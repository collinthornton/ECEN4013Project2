
BackupPlan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800b9c8  0800b9c8  0001b9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bad0  0800bad0  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bad0  0800bad0  0001bad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bad8  0800bad8  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bad8  0800bad8  0001bad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800badc  0800badc  0001badc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800bae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068b8  2000020c  0800bcec  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006ac4  0800bcec  00026ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030661  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000605c  00000000  00000000  0005089d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de0  00000000  00000000  00056900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ba8  00000000  00000000  000586e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fbc4  00000000  00000000  0005a288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024fd0  00000000  00000000  00089e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b59d  00000000  00000000  000aee1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ba3b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ecc  00000000  00000000  001ba40c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b9b0 	.word	0x0800b9b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	0800b9b0 	.word	0x0800b9b0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f8fa 	bl	8000706 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	200f      	movs	r0, #15
 8000514:	f00a f9a8 	bl	800a868 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f00a f882 	bl	800a620 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000004 	.word	0x20000004
 8000548:	20004cf0 	.word	0x20004cf0

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20004cf0 	.word	0x20004cf0

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff ffee 	bl	800054c <HAL_GetTick>
 8000570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057c:	d005      	beq.n	800058a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <HAL_Delay+0x44>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800058a:	bf00      	nop
 800058c:	f7ff ffde 	bl	800054c <HAL_GetTick>
 8000590:	4602      	mov	r2, r0
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f7      	bhi.n	800058c <HAL_Delay+0x28>
  {
  }
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000004 	.word	0x20000004

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__NVIC_SetPriorityGrouping+0x40>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005d6:	4313      	orrs	r3, r2
 80005d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005da:	4a04      	ldr	r2, [pc, #16]	; (80005ec <__NVIC_SetPriorityGrouping+0x40>)
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	60d3      	str	r3, [r2, #12]
}
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000ed00 	.word	0xe000ed00
 80005f0:	05fa0000 	.word	0x05fa0000

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	2b00      	cmp	r3, #0
 8000620:	db0b      	blt.n	800063a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 021f 	and.w	r2, r3, #31
 8000628:	4907      	ldr	r1, [pc, #28]	; (8000648 <__NVIC_EnableIRQ+0x38>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	095b      	lsrs	r3, r3, #5
 8000630:	2001      	movs	r0, #1
 8000632:	fa00 f202 	lsl.w	r2, r0, r2
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000e100 	.word	0xe000e100

0800064c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db0a      	blt.n	8000676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <__NVIC_SetPriority+0x4c>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	0112      	lsls	r2, r2, #4
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	440b      	add	r3, r1
 8000670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000674:	e00a      	b.n	800068c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <__NVIC_SetPriority+0x50>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	3b04      	subs	r3, #4
 8000684:	0112      	lsls	r2, r2, #4
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	440b      	add	r3, r1
 800068a:	761a      	strb	r2, [r3, #24]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f1c3 0307 	rsb	r3, r3, #7
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	bf28      	it	cs
 80006be:	2304      	movcs	r3, #4
 80006c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3304      	adds	r3, #4
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d902      	bls.n	80006d0 <NVIC_EncodePriority+0x30>
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3b03      	subs	r3, #3
 80006ce:	e000      	b.n	80006d2 <NVIC_EncodePriority+0x32>
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43da      	mvns	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	401a      	ands	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43d9      	mvns	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff ff4c 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800072e:	f7ff ff61 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 8000732:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	68b9      	ldr	r1, [r7, #8]
 8000738:	6978      	ldr	r0, [r7, #20]
 800073a:	f7ff ffb1 	bl	80006a0 <NVIC_EncodePriority>
 800073e:	4602      	mov	r2, r0
 8000740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff80 	bl	800064c <__NVIC_SetPriority>
}
 800074c:	bf00      	nop
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff54 	bl	8000610 <__NVIC_EnableIRQ>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000780:	4ba9      	ldr	r3, [pc, #676]	; (8000a28 <HAL_ETH_Init+0x2b8>)
 8000782:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d101      	bne.n	8000796 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	e181      	b.n	8000a9a <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d106      	bne.n	80007b0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f009 ff60 	bl	800a670 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b0:	4b9e      	ldr	r3, [pc, #632]	; (8000a2c <HAL_ETH_Init+0x2bc>)
 80007b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b4:	4a9d      	ldr	r2, [pc, #628]	; (8000a2c <HAL_ETH_Init+0x2bc>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ba:	6453      	str	r3, [r2, #68]	; 0x44
 80007bc:	4b9b      	ldr	r3, [pc, #620]	; (8000a2c <HAL_ETH_Init+0x2bc>)
 80007be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80007c8:	4b99      	ldr	r3, [pc, #612]	; (8000a30 <HAL_ETH_Init+0x2c0>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	4a98      	ldr	r2, [pc, #608]	; (8000a30 <HAL_ETH_Init+0x2c0>)
 80007ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80007d2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80007d4:	4b96      	ldr	r3, [pc, #600]	; (8000a30 <HAL_ETH_Init+0x2c0>)
 80007d6:	685a      	ldr	r2, [r3, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6a1b      	ldr	r3, [r3, #32]
 80007dc:	4994      	ldr	r1, [pc, #592]	; (8000a30 <HAL_ETH_Init+0x2c0>)
 80007de:	4313      	orrs	r3, r2
 80007e0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f042 0201 	orr.w	r2, r2, #1
 80007f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80007fa:	f7ff fea7 	bl	800054c <HAL_GetTick>
 80007fe:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000800:	e011      	b.n	8000826 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000802:	f7ff fea3 	bl	800054c <HAL_GetTick>
 8000806:	4602      	mov	r2, r0
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000810:	d909      	bls.n	8000826 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2203      	movs	r2, #3
 8000816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8000822:	2303      	movs	r3, #3
 8000824:	e139      	b.n	8000a9a <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d1e4      	bne.n	8000802 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	691b      	ldr	r3, [r3, #16]
 800083e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	f023 031c 	bic.w	r3, r3, #28
 8000846:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000848:	f002 fc02 	bl	8003050 <HAL_RCC_GetHCLKFreq>
 800084c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	4a78      	ldr	r2, [pc, #480]	; (8000a34 <HAL_ETH_Init+0x2c4>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d908      	bls.n	8000868 <HAL_ETH_Init+0xf8>
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	4a77      	ldr	r2, [pc, #476]	; (8000a38 <HAL_ETH_Init+0x2c8>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d804      	bhi.n	8000868 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	61fb      	str	r3, [r7, #28]
 8000866:	e027      	b.n	80008b8 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	4a73      	ldr	r2, [pc, #460]	; (8000a38 <HAL_ETH_Init+0x2c8>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d908      	bls.n	8000882 <HAL_ETH_Init+0x112>
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	4a6d      	ldr	r2, [pc, #436]	; (8000a28 <HAL_ETH_Init+0x2b8>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d204      	bcs.n	8000882 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f043 030c 	orr.w	r3, r3, #12
 800087e:	61fb      	str	r3, [r7, #28]
 8000880:	e01a      	b.n	80008b8 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	4a68      	ldr	r2, [pc, #416]	; (8000a28 <HAL_ETH_Init+0x2b8>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d303      	bcc.n	8000892 <HAL_ETH_Init+0x122>
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	4a6b      	ldr	r2, [pc, #428]	; (8000a3c <HAL_ETH_Init+0x2cc>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d911      	bls.n	80008b6 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	4a69      	ldr	r2, [pc, #420]	; (8000a3c <HAL_ETH_Init+0x2cc>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d908      	bls.n	80008ac <HAL_ETH_Init+0x13c>
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	4a68      	ldr	r2, [pc, #416]	; (8000a40 <HAL_ETH_Init+0x2d0>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d804      	bhi.n	80008ac <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	61fb      	str	r3, [r7, #28]
 80008aa:	e005      	b.n	80008b8 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	f043 0310 	orr.w	r3, r3, #16
 80008b2:	61fb      	str	r3, [r7, #28]
 80008b4:	e000      	b.n	80008b8 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80008b6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	69fa      	ldr	r2, [r7, #28]
 80008be:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80008c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008c4:	2100      	movs	r1, #0
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f000 f954 	bl	8000b74 <HAL_ETH_WritePHYRegister>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d00b      	beq.n	80008ea <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80008d6:	6939      	ldr	r1, [r7, #16]
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f000 f9b1 	bl	8000c40 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2201      	movs	r2, #1
 80008e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e0d7      	b.n	8000a9a <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80008ea:	20ff      	movs	r0, #255	; 0xff
 80008ec:	f7ff fe3a 	bl	8000564 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f000 80a5 	beq.w	8000a44 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80008fa:	f7ff fe27 	bl	800054c <HAL_GetTick>
 80008fe:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	461a      	mov	r2, r3
 8000906:	2101      	movs	r1, #1
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f8cb 	bl	8000aa4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800090e:	f7ff fe1d 	bl	800054c <HAL_GetTick>
 8000912:	4602      	mov	r2, r0
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	f241 3288 	movw	r2, #5000	; 0x1388
 800091c:	4293      	cmp	r3, r2
 800091e:	d90f      	bls.n	8000940 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000920:	2301      	movs	r3, #1
 8000922:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000924:	6939      	ldr	r1, [r7, #16]
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f000 f98a 	bl	8000c40 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2201      	movs	r2, #1
 8000930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800093c:	2303      	movs	r3, #3
 800093e:	e0ac      	b.n	8000a9a <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0da      	beq.n	8000900 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800094a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800094e:	2100      	movs	r1, #0
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 f90f 	bl	8000b74 <HAL_ETH_WritePHYRegister>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d00b      	beq.n	8000974 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800095c:	2301      	movs	r3, #1
 800095e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000960:	6939      	ldr	r1, [r7, #16]
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f96c 	bl	8000c40 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2201      	movs	r2, #1
 800096c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000970:	2301      	movs	r3, #1
 8000972:	e092      	b.n	8000a9a <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000974:	f7ff fdea 	bl	800054c <HAL_GetTick>
 8000978:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	461a      	mov	r2, r3
 8000980:	2101      	movs	r1, #1
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 f88e 	bl	8000aa4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000988:	f7ff fde0 	bl	800054c <HAL_GetTick>
 800098c:	4602      	mov	r2, r0
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	f241 3288 	movw	r2, #5000	; 0x1388
 8000996:	4293      	cmp	r3, r2
 8000998:	d90f      	bls.n	80009ba <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800099e:	6939      	ldr	r1, [r7, #16]
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 f94d 	bl	8000c40 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80009b6:	2303      	movs	r3, #3
 80009b8:	e06f      	b.n	8000a9a <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f003 0320 	and.w	r3, r3, #32
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d0da      	beq.n	800097a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	461a      	mov	r2, r3
 80009ca:	2110      	movs	r1, #16
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f869 	bl	8000aa4 <HAL_ETH_ReadPHYRegister>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d00b      	beq.n	80009f0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80009dc:	6939      	ldr	r1, [r7, #16]
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f000 f92e 	bl	8000c40 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2201      	movs	r2, #1
 80009e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80009ec:	2301      	movs	r3, #1
 80009ee:	e054      	b.n	8000a9a <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d004      	beq.n	8000a04 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	e002      	b.n	8000a0a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d003      	beq.n	8000a1c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	e035      	b.n	8000a88 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	e030      	b.n	8000a88 <HAL_ETH_Init+0x318>
 8000a26:	bf00      	nop
 8000a28:	03938700 	.word	0x03938700
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40013800 	.word	0x40013800
 8000a34:	01312cff 	.word	0x01312cff
 8000a38:	02160ebf 	.word	0x02160ebf
 8000a3c:	05f5e0ff 	.word	0x05f5e0ff
 8000a40:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	08db      	lsrs	r3, r3, #3
 8000a4a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	085b      	lsrs	r3, r3, #1
 8000a52:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000a54:	4313      	orrs	r3, r2
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	461a      	mov	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 f889 	bl	8000b74 <HAL_ETH_WritePHYRegister>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d00b      	beq.n	8000a80 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a6c:	6939      	ldr	r1, [r7, #16]
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 f8e6 	bl	8000c40 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2201      	movs	r2, #1
 8000a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e00c      	b.n	8000a9a <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000a80:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000a84:	f7ff fd6e 	bl	8000564 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000a88:	6939      	ldr	r1, [r7, #16]
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 f8d8 	bl	8000c40 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2201      	movs	r2, #1
 8000a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop

08000aa4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	460b      	mov	r3, r1
 8000aae:	607a      	str	r2, [r7, #4]
 8000ab0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b82      	cmp	r3, #130	; 0x82
 8000ac4:	d101      	bne.n	8000aca <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	e050      	b.n	8000b6c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	2282      	movs	r2, #130	; 0x82
 8000ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	691b      	ldr	r3, [r3, #16]
 8000ad8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	f003 031c 	and.w	r3, r3, #28
 8000ae0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	8a1b      	ldrh	r3, [r3, #16]
 8000ae6:	02db      	lsls	r3, r3, #11
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000af0:	897b      	ldrh	r3, [r7, #10]
 8000af2:	019b      	lsls	r3, r3, #6
 8000af4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	f023 0302 	bic.w	r3, r3, #2
 8000b04:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000b16:	f7ff fd19 	bl	800054c <HAL_GetTick>
 8000b1a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b1c:	e015      	b.n	8000b4a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000b1e:	f7ff fd15 	bl	800054c <HAL_GetTick>
 8000b22:	4602      	mov	r2, r0
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b2c:	d309      	bcc.n	8000b42 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	2201      	movs	r2, #1
 8000b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e014      	b.n	8000b6c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	691b      	ldr	r3, [r3, #16]
 8000b48:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1e4      	bne.n	8000b1e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	2201      	movs	r2, #1
 8000b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	607a      	str	r2, [r7, #4]
 8000b80:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b42      	cmp	r3, #66	; 0x42
 8000b94:	d101      	bne.n	8000b9a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8000b96:	2302      	movs	r3, #2
 8000b98:	e04e      	b.n	8000c38 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2242      	movs	r2, #66	; 0x42
 8000b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	f003 031c 	and.w	r3, r3, #28
 8000bb0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	8a1b      	ldrh	r3, [r3, #16]
 8000bb6:	02db      	lsls	r3, r3, #11
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000bc0:	897b      	ldrh	r3, [r7, #10]
 8000bc2:	019b      	lsls	r3, r3, #6
 8000bc4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000bf0:	f7ff fcac 	bl	800054c <HAL_GetTick>
 8000bf4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000bf6:	e015      	b.n	8000c24 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000bf8:	f7ff fca8 	bl	800054c <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c06:	d309      	bcc.n	8000c1c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	e00d      	b.n	8000c38 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1e4      	bne.n	8000bf8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	2201      	movs	r2, #1
 8000c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8000c36:	2300      	movs	r3, #0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b0b0      	sub	sp, #192	; 0xc0
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d007      	beq.n	8000c66 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c5c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c64:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d103      	bne.n	8000c8e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8000c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8a:	663b      	str	r3, [r7, #96]	; 0x60
 8000c8c:	e001      	b.n	8000c92 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8000c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c96:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8000cac:	2340      	movs	r3, #64	; 0x40
 8000cae:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000d14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000d18:	4bab      	ldr	r3, [pc, #684]	; (8000fc8 <ETH_MACDMAConfig+0x388>)
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8000d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000d24:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8000d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8000d28:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8000d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8000d2c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8000d32:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8000d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8000d36:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8000d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8000d3a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8000d40:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8000d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8000d44:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8000d46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8000d48:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8000d4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8000d4c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8000d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8000d50:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8000d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8000d54:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000d56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000d68:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff fbf5 	bl	8000564 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000d82:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000d84:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8000d86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000d88:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8000d8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8000d8c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8000d8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8000d92:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8000d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8000d98:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8000d9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8000d9e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8000da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8000da4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8000da8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8000db0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000db2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff fbd0 	bl	8000564 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000dcc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000dd6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000de0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8000dec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000df0:	f64f 7341 	movw	r3, #65345	; 0xff41
 8000df4:	4013      	ands	r3, r2
 8000df6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000dfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000dfe:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8000e00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000e04:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8000e06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8000e0a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8000e0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8000e10:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8000e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8000e16:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8000e18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8000e1c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000e1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e22:	4313      	orrs	r3, r2
 8000e24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e30:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff fb91 	bl	8000564 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e4a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000e4c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8000e50:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e66:	2001      	movs	r0, #1
 8000e68:	f7ff fb7c 	bl	8000564 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e74:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8000e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e7e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8000e84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e88:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8000e9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8000ea4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000eaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eae:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	f241 0318 	movw	r3, #4120	; 0x1018
 8000eca:	4413      	add	r3, r2
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000ed2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000ed6:	4b3d      	ldr	r3, [pc, #244]	; (8000fcc <ETH_MACDMAConfig+0x38c>)
 8000ed8:	4013      	ands	r3, r2
 8000eda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000ede:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000ee2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8000ee4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8000ee6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8000ee8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8000eea:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8000eec:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8000eee:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8000ef0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8000ef2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8000ef4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8000ef6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8000efa:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8000efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8000efe:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000f00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f04:	4313      	orrs	r3, r2
 8000f06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	f241 0318 	movw	r3, #4120	; 0x1018
 8000f12:	4413      	add	r3, r2
 8000f14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f18:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	f241 0318 	movw	r3, #4120	; 0x1018
 8000f22:	4413      	add	r3, r2
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f7ff fb1a 	bl	8000564 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	f241 0318 	movw	r3, #4120	; 0x1018
 8000f38:	4413      	add	r3, r2
 8000f3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f3e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8000f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000f44:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8000f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8000f48:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8000f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8000f4c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8000f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8000f50:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8000f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f54:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8000f56:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8000f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8000f5a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f68:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f7ff faf3 	bl	8000564 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f8a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d10d      	bne.n	8000fb0 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	f241 031c 	movw	r3, #4124	; 0x101c
 8000f9c:	4413      	add	r3, r2
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6811      	ldr	r1, [r2, #0]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <ETH_MACDMAConfig+0x390>)
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	f241 031c 	movw	r3, #4124	; 0x101c
 8000fac:	440b      	add	r3, r1
 8000fae:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f000 f80b 	bl	8000fd4 <ETH_MACAddressConfig>
}
 8000fbe:	bf00      	nop
 8000fc0:	37c0      	adds	r7, #192	; 0xc0
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	ff20810f 	.word	0xff20810f
 8000fcc:	f8de3f23 	.word	0xf8de3f23
 8000fd0:	00010040 	.word	0x00010040

08000fd4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3305      	adds	r3, #5
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	3204      	adds	r2, #4
 8000fec:	7812      	ldrb	r2, [r2, #0]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <ETH_MACAddressConfig+0x68>)
 8000ff6:	4413      	add	r3, r2
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3303      	adds	r3, #3
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	061a      	lsls	r2, r3, #24
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3302      	adds	r3, #2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3301      	adds	r3, #1
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	4313      	orrs	r3, r2
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	7812      	ldrb	r2, [r2, #0]
 800101e:	4313      	orrs	r3, r2
 8001020:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <ETH_MACAddressConfig+0x6c>)
 8001026:	4413      	add	r3, r2
 8001028:	461a      	mov	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	6013      	str	r3, [r2, #0]
}
 800102e:	bf00      	nop
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40028040 	.word	0x40028040
 8001040:	40028044 	.word	0x40028044

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e175      	b.n	8001350 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	f040 8164 	bne.w	800134a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d00b      	beq.n	80010a2 <HAL_GPIO_Init+0x5e>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001096:	2b11      	cmp	r3, #17
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b12      	cmp	r3, #18
 80010a0:	d130      	bne.n	8001104 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	f003 0201 	and.w	r2, r3, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x100>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b12      	cmp	r3, #18
 8001142:	d123      	bne.n	800118c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	69b9      	ldr	r1, [r7, #24]
 8001188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80be 	beq.w	800134a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	4b66      	ldr	r3, [pc, #408]	; (8001368 <HAL_GPIO_Init+0x324>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a65      	ldr	r2, [pc, #404]	; (8001368 <HAL_GPIO_Init+0x324>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b63      	ldr	r3, [pc, #396]	; (8001368 <HAL_GPIO_Init+0x324>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011e6:	4a61      	ldr	r2, [pc, #388]	; (800136c <HAL_GPIO_Init+0x328>)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a58      	ldr	r2, [pc, #352]	; (8001370 <HAL_GPIO_Init+0x32c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d037      	beq.n	8001282 <HAL_GPIO_Init+0x23e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a57      	ldr	r2, [pc, #348]	; (8001374 <HAL_GPIO_Init+0x330>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d031      	beq.n	800127e <HAL_GPIO_Init+0x23a>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a56      	ldr	r2, [pc, #344]	; (8001378 <HAL_GPIO_Init+0x334>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d02b      	beq.n	800127a <HAL_GPIO_Init+0x236>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a55      	ldr	r2, [pc, #340]	; (800137c <HAL_GPIO_Init+0x338>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d025      	beq.n	8001276 <HAL_GPIO_Init+0x232>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a54      	ldr	r2, [pc, #336]	; (8001380 <HAL_GPIO_Init+0x33c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d01f      	beq.n	8001272 <HAL_GPIO_Init+0x22e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a53      	ldr	r2, [pc, #332]	; (8001384 <HAL_GPIO_Init+0x340>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d019      	beq.n	800126e <HAL_GPIO_Init+0x22a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a52      	ldr	r2, [pc, #328]	; (8001388 <HAL_GPIO_Init+0x344>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0x226>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a51      	ldr	r2, [pc, #324]	; (800138c <HAL_GPIO_Init+0x348>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d00d      	beq.n	8001266 <HAL_GPIO_Init+0x222>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a50      	ldr	r2, [pc, #320]	; (8001390 <HAL_GPIO_Init+0x34c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d007      	beq.n	8001262 <HAL_GPIO_Init+0x21e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4f      	ldr	r2, [pc, #316]	; (8001394 <HAL_GPIO_Init+0x350>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <HAL_GPIO_Init+0x21a>
 800125a:	2309      	movs	r3, #9
 800125c:	e012      	b.n	8001284 <HAL_GPIO_Init+0x240>
 800125e:	230a      	movs	r3, #10
 8001260:	e010      	b.n	8001284 <HAL_GPIO_Init+0x240>
 8001262:	2308      	movs	r3, #8
 8001264:	e00e      	b.n	8001284 <HAL_GPIO_Init+0x240>
 8001266:	2307      	movs	r3, #7
 8001268:	e00c      	b.n	8001284 <HAL_GPIO_Init+0x240>
 800126a:	2306      	movs	r3, #6
 800126c:	e00a      	b.n	8001284 <HAL_GPIO_Init+0x240>
 800126e:	2305      	movs	r3, #5
 8001270:	e008      	b.n	8001284 <HAL_GPIO_Init+0x240>
 8001272:	2304      	movs	r3, #4
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x240>
 8001276:	2303      	movs	r3, #3
 8001278:	e004      	b.n	8001284 <HAL_GPIO_Init+0x240>
 800127a:	2302      	movs	r3, #2
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x240>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_GPIO_Init+0x240>
 8001282:	2300      	movs	r3, #0
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	f002 0203 	and.w	r2, r2, #3
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	4093      	lsls	r3, r2
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001294:	4935      	ldr	r1, [pc, #212]	; (800136c <HAL_GPIO_Init+0x328>)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a2:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <HAL_GPIO_Init+0x354>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c6:	4a34      	ldr	r2, [pc, #208]	; (8001398 <HAL_GPIO_Init+0x354>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012cc:	4b32      	ldr	r3, [pc, #200]	; (8001398 <HAL_GPIO_Init+0x354>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012f0:	4a29      	ldr	r2, [pc, #164]	; (8001398 <HAL_GPIO_Init+0x354>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f6:	4b28      	ldr	r3, [pc, #160]	; (8001398 <HAL_GPIO_Init+0x354>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131a:	4a1f      	ldr	r2, [pc, #124]	; (8001398 <HAL_GPIO_Init+0x354>)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_GPIO_Init+0x354>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001344:	4a14      	ldr	r2, [pc, #80]	; (8001398 <HAL_GPIO_Init+0x354>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3301      	adds	r3, #1
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	2b0f      	cmp	r3, #15
 8001354:	f67f ae86 	bls.w	8001064 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3724      	adds	r7, #36	; 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40013800 	.word	0x40013800
 8001370:	40020000 	.word	0x40020000
 8001374:	40020400 	.word	0x40020400
 8001378:	40020800 	.word	0x40020800
 800137c:	40020c00 	.word	0x40020c00
 8001380:	40021000 	.word	0x40021000
 8001384:	40021400 	.word	0x40021400
 8001388:	40021800 	.word	0x40021800
 800138c:	40021c00 	.word	0x40021c00
 8001390:	40022000 	.word	0x40022000
 8001394:	40022400 	.word	0x40022400
 8001398:	40013c00 	.word	0x40013c00

0800139c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
 80013a8:	4613      	mov	r3, r2
 80013aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80013b8:	e003      	b.n	80013c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d0:	b08f      	sub	sp, #60	; 0x3c
 80013d2:	af0a      	add	r7, sp, #40	; 0x28
 80013d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e116      	b.n	800160e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d106      	bne.n	8001400 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f009 fbce 	bl	800ab9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2203      	movs	r2, #3
 8001404:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001410:	2b00      	cmp	r3, #0
 8001412:	d102      	bne.n	800141a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f003 fa59 	bl	80048d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	687e      	ldr	r6, [r7, #4]
 800142c:	466d      	mov	r5, sp
 800142e:	f106 0410 	add.w	r4, r6, #16
 8001432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800143e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001442:	1d33      	adds	r3, r6, #4
 8001444:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001446:	6838      	ldr	r0, [r7, #0]
 8001448:	f003 f93a 	bl	80046c0 <USB_CoreInit>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d005      	beq.n	800145e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2202      	movs	r2, #2
 8001456:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e0d7      	b.n	800160e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f003 fa47 	bl	80048f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800146a:	2300      	movs	r3, #0
 800146c:	73fb      	strb	r3, [r7, #15]
 800146e:	e04a      	b.n	8001506 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	1a9b      	subs	r3, r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	333d      	adds	r3, #61	; 0x3d
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	1a9b      	subs	r3, r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	333c      	adds	r3, #60	; 0x3c
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001498:	7bfa      	ldrb	r2, [r7, #15]
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	b298      	uxth	r0, r3
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	1a9b      	subs	r3, r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	3342      	adds	r3, #66	; 0x42
 80014ac:	4602      	mov	r2, r0
 80014ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	333f      	adds	r3, #63	; 0x3f
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	1a9b      	subs	r3, r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	3344      	adds	r3, #68	; 0x44
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	1a9b      	subs	r3, r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	3348      	adds	r3, #72	; 0x48
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	1a9b      	subs	r3, r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	3350      	adds	r3, #80	; 0x50
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	3301      	adds	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	d3af      	bcc.n	8001470 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e044      	b.n	80015a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001516:	7bfa      	ldrb	r2, [r7, #15]
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	1a9b      	subs	r3, r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	440b      	add	r3, r1
 8001524:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	1a9b      	subs	r3, r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	1a9b      	subs	r3, r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	1a9b      	subs	r3, r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	1a9b      	subs	r3, r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	3301      	adds	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d3b5      	bcc.n	8001516 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	687e      	ldr	r6, [r7, #4]
 80015b2:	466d      	mov	r5, sp
 80015b4:	f106 0410 	add.w	r4, r6, #16
 80015b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80015c8:	1d33      	adds	r3, r6, #4
 80015ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015cc:	6838      	ldr	r0, [r7, #0]
 80015ce:	f003 f9bd 	bl	800494c <USB_DevInit>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2202      	movs	r2, #2
 80015dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e014      	b.n	800160e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d102      	bne.n	8001602 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f001 f881 	bl	8002704 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f004 fa15 	bl	8005a36 <USB_DevDisconnect>

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001616 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_PCD_Start+0x16>
 8001628:	2302      	movs	r3, #2
 800162a:	e012      	b.n	8001652 <HAL_PCD_Start+0x3c>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f003 f93b 	bl	80048b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f004 f9d6 	bl	80059f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800165a:	b590      	push	{r4, r7, lr}
 800165c:	b08d      	sub	sp, #52	; 0x34
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f004 fa94 	bl	8005b9e <USB_GetMode>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	f040 83ca 	bne.w	8001e12 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f004 f9f8 	bl	8005a78 <USB_ReadInterrupts>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 83c0 	beq.w	8001e10 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f004 f9ef 	bl	8005a78 <USB_ReadInterrupts>
 800169a:	4603      	mov	r3, r0
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d107      	bne.n	80016b4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695a      	ldr	r2, [r3, #20]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f002 0202 	and.w	r2, r2, #2
 80016b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f004 f9dd 	bl	8005a78 <USB_ReadInterrupts>
 80016be:	4603      	mov	r3, r0
 80016c0:	f003 0310 	and.w	r3, r3, #16
 80016c4:	2b10      	cmp	r3, #16
 80016c6:	d161      	bne.n	800178c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699a      	ldr	r2, [r3, #24]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0210 	bic.w	r2, r2, #16
 80016d6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	f003 020f 	and.w	r2, r3, #15
 80016e4:	4613      	mov	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	4413      	add	r3, r2
 80016f4:	3304      	adds	r3, #4
 80016f6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	0c5b      	lsrs	r3, r3, #17
 80016fc:	f003 030f 	and.w	r3, r3, #15
 8001700:	2b02      	cmp	r3, #2
 8001702:	d124      	bne.n	800174e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d035      	beq.n	800177c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800171a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800171e:	b29b      	uxth	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	6a38      	ldr	r0, [r7, #32]
 8001724:	f004 f843 	bl	80057ae <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	091b      	lsrs	r3, r3, #4
 8001730:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001734:	441a      	add	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	699a      	ldr	r2, [r3, #24]
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001746:	441a      	add	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	619a      	str	r2, [r3, #24]
 800174c:	e016      	b.n	800177c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	0c5b      	lsrs	r3, r3, #17
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	2b06      	cmp	r3, #6
 8001758:	d110      	bne.n	800177c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001760:	2208      	movs	r2, #8
 8001762:	4619      	mov	r1, r3
 8001764:	6a38      	ldr	r0, [r7, #32]
 8001766:	f004 f822 	bl	80057ae <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	699a      	ldr	r2, [r3, #24]
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001776:	441a      	add	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699a      	ldr	r2, [r3, #24]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0210 	orr.w	r2, r2, #16
 800178a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f004 f971 	bl	8005a78 <USB_ReadInterrupts>
 8001796:	4603      	mov	r3, r0
 8001798:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800179c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017a0:	d16e      	bne.n	8001880 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 f977 	bl	8005a9e <USB_ReadDevAllOutEpInterrupt>
 80017b0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80017b2:	e062      	b.n	800187a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80017b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d057      	beq.n	800186e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f004 f99c 	bl	8005b06 <USB_ReadDevOutEPInterrupt>
 80017ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00c      	beq.n	80017f4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	015a      	lsls	r2, r3, #5
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017e6:	461a      	mov	r2, r3
 80017e8:	2301      	movs	r3, #1
 80017ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80017ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 fdde 	bl	80023b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00c      	beq.n	8001818 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	015a      	lsls	r2, r3, #5
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	4413      	add	r3, r2
 8001806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800180a:	461a      	mov	r2, r3
 800180c:	2308      	movs	r3, #8
 800180e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 fed8 	bl	80025c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	2b00      	cmp	r3, #0
 8001820:	d008      	beq.n	8001834 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	015a      	lsls	r2, r3, #5
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	4413      	add	r3, r2
 800182a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800182e:	461a      	mov	r2, r3
 8001830:	2310      	movs	r3, #16
 8001832:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	f003 0320 	and.w	r3, r3, #32
 800183a:	2b00      	cmp	r3, #0
 800183c:	d008      	beq.n	8001850 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	015a      	lsls	r2, r3, #5
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	4413      	add	r3, r2
 8001846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800184a:	461a      	mov	r2, r3
 800184c:	2320      	movs	r3, #32
 800184e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d009      	beq.n	800186e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	015a      	lsls	r2, r3, #5
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4413      	add	r3, r2
 8001862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001866:	461a      	mov	r2, r3
 8001868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800186c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	3301      	adds	r3, #1
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001876:	085b      	lsrs	r3, r3, #1
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800187a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187c:	2b00      	cmp	r3, #0
 800187e:	d199      	bne.n	80017b4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f004 f8f7 	bl	8005a78 <USB_ReadInterrupts>
 800188a:	4603      	mov	r3, r0
 800188c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001890:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001894:	f040 80c0 	bne.w	8001a18 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f004 f918 	bl	8005ad2 <USB_ReadDevAllInEpInterrupt>
 80018a2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80018a8:	e0b2      	b.n	8001a10 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80a7 	beq.w	8001a04 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f004 f93e 	bl	8005b42 <USB_ReadDevInEPInterrupt>
 80018c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d057      	beq.n	8001982 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	2201      	movs	r2, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69f9      	ldr	r1, [r7, #28]
 80018ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80018f2:	4013      	ands	r3, r2
 80018f4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	015a      	lsls	r2, r3, #5
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	4413      	add	r3, r2
 80018fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001902:	461a      	mov	r2, r3
 8001904:	2301      	movs	r3, #1
 8001906:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d132      	bne.n	8001976 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001914:	4613      	mov	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	1a9b      	subs	r3, r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	3348      	adds	r3, #72	; 0x48
 8001920:	6819      	ldr	r1, [r3, #0]
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4403      	add	r3, r0
 8001930:	3344      	adds	r3, #68	; 0x44
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4419      	add	r1, r3
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4403      	add	r3, r0
 8001944:	3348      	adds	r3, #72	; 0x48
 8001946:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	2b00      	cmp	r3, #0
 800194c:	d113      	bne.n	8001976 <HAL_PCD_IRQHandler+0x31c>
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001952:	4613      	mov	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	1a9b      	subs	r3, r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	3350      	adds	r3, #80	; 0x50
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d108      	bne.n	8001976 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800196e:	461a      	mov	r2, r3
 8001970:	2101      	movs	r1, #1
 8001972:	f004 f947 	bl	8005c04 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	b2db      	uxtb	r3, r3
 800197a:	4619      	mov	r1, r3
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f009 f99e 	bl	800acbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d008      	beq.n	800199e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	015a      	lsls	r2, r3, #5
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	4413      	add	r3, r2
 8001994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001998:	461a      	mov	r2, r3
 800199a:	2308      	movs	r3, #8
 800199c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	015a      	lsls	r2, r3, #5
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019b4:	461a      	mov	r2, r3
 80019b6:	2310      	movs	r3, #16
 80019b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	015a      	lsls	r2, r3, #5
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	4413      	add	r3, r2
 80019cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019d0:	461a      	mov	r2, r3
 80019d2:	2340      	movs	r3, #64	; 0x40
 80019d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	015a      	lsls	r2, r3, #5
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	4413      	add	r3, r2
 80019e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ec:	461a      	mov	r2, r3
 80019ee:	2302      	movs	r3, #2
 80019f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fc48 	bl	8002294 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	3301      	adds	r3, #1
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0c:	085b      	lsrs	r3, r3, #1
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f47f af49 	bne.w	80018aa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f004 f82b 	bl	8005a78 <USB_ReadInterrupts>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a2c:	d122      	bne.n	8001a74 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d108      	bne.n	8001a5e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a54:	2100      	movs	r1, #0
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f009 fb80 	bl	800b15c <HAL_PCDEx_LPM_Callback>
 8001a5c:	e002      	b.n	8001a64 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f009 f9a4 	bl	800adac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695a      	ldr	r2, [r3, #20]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 fffd 	bl	8005a78 <USB_ReadInterrupts>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a88:	d112      	bne.n	8001ab0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d102      	bne.n	8001aa0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f009 f960 	bl	800ad60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001aae:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 ffdf 	bl	8005a78 <USB_ReadInterrupts>
 8001aba:	4603      	mov	r3, r0
 8001abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ac4:	d121      	bne.n	8001b0a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	695a      	ldr	r2, [r3, #20]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001ad4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d111      	bne.n	8001b04 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	f003 020f 	and.w	r2, r3, #15
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001afa:	2101      	movs	r1, #1
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f009 fb2d 	bl	800b15c <HAL_PCDEx_LPM_Callback>
 8001b02:	e002      	b.n	8001b0a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f009 f92b 	bl	800ad60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 ffb2 	bl	8005a78 <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b1e:	f040 80c7 	bne.w	8001cb0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	69fa      	ldr	r2, [r7, #28]
 8001b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2110      	movs	r1, #16
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f003 f873 	bl	8004c28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b46:	e056      	b.n	8001bf6 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4a:	015a      	lsls	r2, r3, #5
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b54:	461a      	mov	r2, r3
 8001b56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b5a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5e:	015a      	lsls	r2, r3, #5
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	4413      	add	r3, r2
 8001b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b6c:	0151      	lsls	r1, r2, #5
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	440a      	add	r2, r1
 8001b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b7a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7e:	015a      	lsls	r2, r3, #5
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b8c:	0151      	lsls	r1, r2, #5
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	440a      	add	r2, r1
 8001b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9e:	015a      	lsls	r2, r3, #5
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb2:	015a      	lsls	r2, r3, #5
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc0:	0151      	lsls	r1, r2, #5
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	440a      	add	r2, r1
 8001bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd2:	015a      	lsls	r2, r3, #5
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001be0:	0151      	lsls	r1, r2, #5
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	440a      	add	r2, r1
 8001be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d3a3      	bcc.n	8001b48 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c0e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c12:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d016      	beq.n	8001c4a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c2c:	f043 030b 	orr.w	r3, r3, #11
 8001c30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c42:	f043 030b 	orr.w	r3, r3, #11
 8001c46:	6453      	str	r3, [r2, #68]	; 0x44
 8001c48:	e015      	b.n	8001c76 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c50:	695a      	ldr	r2, [r3, #20]
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f242 032b 	movw	r3, #8235	; 0x202b
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	69fa      	ldr	r2, [r7, #28]
 8001c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c70:	f043 030b 	orr.w	r3, r3, #11
 8001c74:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	69fa      	ldr	r2, [r7, #28]
 8001c80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c84:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c88:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f003 ffb2 	bl	8005c04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	695a      	ldr	r2, [r3, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f003 fedf 	bl	8005a78 <USB_ReadInterrupts>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc4:	d124      	bne.n	8001d10 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f003 ff76 	bl	8005bbc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 f808 	bl	8004cea <USB_GetDevSpeed>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	461a      	mov	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681c      	ldr	r4, [r3, #0]
 8001ce6:	f001 f9b3 	bl	8003050 <HAL_RCC_GetHCLKFreq>
 8001cea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f002 fd3b 	bl	8004770 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f009 f807 	bl	800ad0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695a      	ldr	r2, [r3, #20]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 feaf 	bl	8005a78 <USB_ReadInterrupts>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d10a      	bne.n	8001d3a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f008 ffe4 	bl	800acf2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695a      	ldr	r2, [r3, #20]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f002 0208 	and.w	r2, r2, #8
 8001d38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f003 fe9a 	bl	8005a78 <USB_ReadInterrupts>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d4e:	d10f      	bne.n	8001d70 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	4619      	mov	r1, r3
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f009 f846 	bl	800adec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 fe7f 	bl	8005a78 <USB_ReadInterrupts>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d84:	d10f      	bne.n	8001da6 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	4619      	mov	r1, r3
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f009 f819 	bl	800adc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f003 fe64 	bl	8005a78 <USB_ReadInterrupts>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dba:	d10a      	bne.n	8001dd2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f009 f827 	bl	800ae10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	695a      	ldr	r2, [r3, #20]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001dd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f003 fe4e 	bl	8005a78 <USB_ReadInterrupts>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d115      	bne.n	8001e12 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f009 f817 	bl	800ae2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	e000      	b.n	8001e12 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001e10:	bf00      	nop
    }
  }
}
 8001e12:	3734      	adds	r7, #52	; 0x34
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd90      	pop	{r4, r7, pc}

08001e18 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_PCD_SetAddress+0x1a>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e013      	b.n	8001e5a <HAL_PCD_SetAddress+0x42>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	78fa      	ldrb	r2, [r7, #3]
 8001e3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 fdac 	bl	80059a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b084      	sub	sp, #16
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	4608      	mov	r0, r1
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4603      	mov	r3, r0
 8001e72:	70fb      	strb	r3, [r7, #3]
 8001e74:	460b      	mov	r3, r1
 8001e76:	803b      	strh	r3, [r7, #0]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	da0f      	bge.n	8001ea8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	f003 020f 	and.w	r2, r3, #15
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	3338      	adds	r3, #56	; 0x38
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	705a      	strb	r2, [r3, #1]
 8001ea6:	e00f      	b.n	8001ec8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	f003 020f 	and.w	r2, r3, #15
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	1a9b      	subs	r3, r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ed4:	883a      	ldrh	r2, [r7, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	78ba      	ldrb	r2, [r7, #2]
 8001ede:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	785b      	ldrb	r3, [r3, #1]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d004      	beq.n	8001ef2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ef2:	78bb      	ldrb	r3, [r7, #2]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d102      	bne.n	8001efe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_PCD_EP_Open+0xaa>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e00e      	b.n	8001f2a <HAL_PCD_EP_Open+0xc8>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68f9      	ldr	r1, [r7, #12]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f002 ff0a 	bl	8004d34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001f28:	7afb      	ldrb	r3, [r7, #11]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	da0f      	bge.n	8001f66 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	f003 020f 	and.w	r2, r3, #15
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	3338      	adds	r3, #56	; 0x38
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	705a      	strb	r2, [r3, #1]
 8001f64:	e00f      	b.n	8001f86 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	f003 020f 	and.w	r2, r3, #15
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_PCD_EP_Close+0x6e>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e00e      	b.n	8001fbe <HAL_PCD_EP_Close+0x8c>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68f9      	ldr	r1, [r7, #12]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f002 ff48 	bl	8004e44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	603b      	str	r3, [r7, #0]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fd6:	7afb      	ldrb	r3, [r7, #11]
 8001fd8:	f003 020f 	and.w	r2, r3, #15
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	3304      	adds	r3, #4
 8001fee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2200      	movs	r2, #0
 8002006:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002008:	7afb      	ldrb	r3, [r7, #11]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	b2da      	uxtb	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d102      	bne.n	8002022 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002022:	7afb      	ldrb	r3, [r7, #11]
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	6979      	ldr	r1, [r7, #20]
 800203a:	f003 fa2b 	bl	8005494 <USB_EP0StartXfer>
 800203e:	e008      	b.n	8002052 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	6979      	ldr	r1, [r7, #20]
 800204e:	f002 ffd5 	bl	8004ffc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	f003 020f 	and.w	r2, r3, #15
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	1a9b      	subs	r3, r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	460b      	mov	r3, r1
 800209a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800209c:	7afb      	ldrb	r3, [r7, #11]
 800209e:	f003 020f 	and.w	r2, r3, #15
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	3338      	adds	r3, #56	; 0x38
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	3304      	adds	r3, #4
 80020b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2201      	movs	r2, #1
 80020ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020cc:	7afb      	ldrb	r3, [r7, #11]
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d102      	bne.n	80020e6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020e6:	7afb      	ldrb	r3, [r7, #11]
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d109      	bne.n	8002104 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	6979      	ldr	r1, [r7, #20]
 80020fe:	f003 f9c9 	bl	8005494 <USB_EP0StartXfer>
 8002102:	e008      	b.n	8002116 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	6979      	ldr	r1, [r7, #20]
 8002112:	f002 ff73 	bl	8004ffc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	f003 020f 	and.w	r2, r3, #15
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	429a      	cmp	r2, r3
 8002138:	d901      	bls.n	800213e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e050      	b.n	80021e0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800213e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002142:	2b00      	cmp	r3, #0
 8002144:	da0f      	bge.n	8002166 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	f003 020f 	and.w	r2, r3, #15
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	3338      	adds	r3, #56	; 0x38
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	3304      	adds	r3, #4
 800215c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	705a      	strb	r2, [r3, #1]
 8002164:	e00d      	b.n	8002182 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002166:	78fa      	ldrb	r2, [r7, #3]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	4413      	add	r3, r2
 8002178:	3304      	adds	r3, #4
 800217a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2201      	movs	r2, #1
 8002186:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	b2da      	uxtb	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_PCD_EP_SetStall+0x82>
 800219e:	2302      	movs	r3, #2
 80021a0:	e01e      	b.n	80021e0 <HAL_PCD_EP_SetStall+0xc0>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68f9      	ldr	r1, [r7, #12]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f003 fb25 	bl	8005800 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10a      	bne.n	80021d6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	b2d9      	uxtb	r1, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021d0:	461a      	mov	r2, r3
 80021d2:	f003 fd17 	bl	8005c04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	f003 020f 	and.w	r2, r3, #15
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d901      	bls.n	8002206 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e042      	b.n	800228c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002206:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800220a:	2b00      	cmp	r3, #0
 800220c:	da0f      	bge.n	800222e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	f003 020f 	and.w	r2, r3, #15
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	3338      	adds	r3, #56	; 0x38
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	3304      	adds	r3, #4
 8002224:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2201      	movs	r2, #1
 800222a:	705a      	strb	r2, [r3, #1]
 800222c:	e00f      	b.n	800224e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800222e:	78fb      	ldrb	r3, [r7, #3]
 8002230:	f003 020f 	and.w	r2, r3, #15
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	4413      	add	r3, r2
 8002244:	3304      	adds	r3, #4
 8002246:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	b2da      	uxtb	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_PCD_EP_ClrStall+0x86>
 800226a:	2302      	movs	r3, #2
 800226c:	e00e      	b.n	800228c <HAL_PCD_EP_ClrStall+0xa4>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68f9      	ldr	r1, [r7, #12]
 800227c:	4618      	mov	r0, r3
 800227e:	f003 fb2d 	bl	80058dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af02      	add	r7, sp, #8
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	3338      	adds	r3, #56	; 0x38
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	3304      	adds	r3, #4
 80022ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	699a      	ldr	r2, [r3, #24]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d901      	bls.n	80022cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e06c      	b.n	80023a6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d902      	bls.n	80022e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	3303      	adds	r3, #3
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022f0:	e02b      	b.n	800234a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	429a      	cmp	r2, r3
 8002306:	d902      	bls.n	800230e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3303      	adds	r3, #3
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	68d9      	ldr	r1, [r3, #12]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002326:	b2db      	uxtb	r3, r3
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	4603      	mov	r3, r0
 800232c:	6978      	ldr	r0, [r7, #20]
 800232e:	f003 fa09 	bl	8005744 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	441a      	add	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	441a      	add	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	b29b      	uxth	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	429a      	cmp	r2, r3
 800235e:	d809      	bhi.n	8002374 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	699a      	ldr	r2, [r3, #24]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002368:	429a      	cmp	r2, r3
 800236a:	d203      	bcs.n	8002374 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1be      	bne.n	80022f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	695a      	ldr	r2, [r3, #20]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	429a      	cmp	r2, r3
 800237e:	d811      	bhi.n	80023a4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	2201      	movs	r2, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	43db      	mvns	r3, r3
 800239a:	6939      	ldr	r1, [r7, #16]
 800239c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023a0:	4013      	ands	r3, r2
 80023a2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3720      	adds	r7, #32
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	333c      	adds	r3, #60	; 0x3c
 80023c8:	3304      	adds	r3, #4
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	f040 80a0 	bne.w	8002528 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d015      	beq.n	800241e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4a72      	ldr	r2, [pc, #456]	; (80025c0 <PCD_EP_OutXfrComplete_int+0x210>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	f240 80dd 	bls.w	80025b6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80d7 	beq.w	80025b6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002414:	461a      	mov	r2, r3
 8002416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800241a:	6093      	str	r3, [r2, #8]
 800241c:	e0cb      	b.n	80025b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d009      	beq.n	800243c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4413      	add	r3, r2
 8002430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002434:	461a      	mov	r2, r3
 8002436:	2320      	movs	r3, #32
 8002438:	6093      	str	r3, [r2, #8]
 800243a:	e0bc      	b.n	80025b6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002442:	2b00      	cmp	r3, #0
 8002444:	f040 80b7 	bne.w	80025b6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4a5d      	ldr	r2, [pc, #372]	; (80025c0 <PCD_EP_OutXfrComplete_int+0x210>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d90f      	bls.n	8002470 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4413      	add	r3, r2
 8002462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002466:	461a      	mov	r2, r3
 8002468:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800246c:	6093      	str	r3, [r2, #8]
 800246e:	e0a2      	b.n	80025b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002482:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	0159      	lsls	r1, r3, #5
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	440b      	add	r3, r1
 800248c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002496:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4403      	add	r3, r0
 80024a6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80024aa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	4613      	mov	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024be:	6819      	ldr	r1, [r3, #0]
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	4613      	mov	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4403      	add	r3, r0
 80024ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4419      	add	r1, r3
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	1a9b      	subs	r3, r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4403      	add	r3, r0
 80024e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024e8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d114      	bne.n	800251a <PCD_EP_OutXfrComplete_int+0x16a>
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d108      	bne.n	800251a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002512:	461a      	mov	r2, r3
 8002514:	2101      	movs	r1, #1
 8002516:	f003 fb75 	bl	8005c04 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	4619      	mov	r1, r3
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f008 fbb1 	bl	800ac88 <HAL_PCD_DataOutStageCallback>
 8002526:	e046      	b.n	80025b6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4a26      	ldr	r2, [pc, #152]	; (80025c4 <PCD_EP_OutXfrComplete_int+0x214>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d124      	bne.n	800257a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4413      	add	r3, r2
 8002542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002546:	461a      	mov	r2, r3
 8002548:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800254c:	6093      	str	r3, [r2, #8]
 800254e:	e032      	b.n	80025b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002566:	461a      	mov	r2, r3
 8002568:	2320      	movs	r3, #32
 800256a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	4619      	mov	r1, r3
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f008 fb88 	bl	800ac88 <HAL_PCD_DataOutStageCallback>
 8002578:	e01d      	b.n	80025b6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d114      	bne.n	80025aa <PCD_EP_OutXfrComplete_int+0x1fa>
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d108      	bne.n	80025aa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025a2:	461a      	mov	r2, r3
 80025a4:	2100      	movs	r1, #0
 80025a6:	f003 fb2d 	bl	8005c04 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	4619      	mov	r1, r3
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f008 fb69 	bl	800ac88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	4f54300a 	.word	0x4f54300a
 80025c4:	4f54310a 	.word	0x4f54310a

080025c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	333c      	adds	r3, #60	; 0x3c
 80025e0:	3304      	adds	r3, #4
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4a15      	ldr	r2, [pc, #84]	; (8002650 <PCD_EP_OutSetupPacket_int+0x88>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d90e      	bls.n	800261c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002614:	461a      	mov	r2, r3
 8002616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800261a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f008 fb21 	bl	800ac64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <PCD_EP_OutSetupPacket_int+0x88>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d90c      	bls.n	8002644 <PCD_EP_OutSetupPacket_int+0x7c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d108      	bne.n	8002644 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800263c:	461a      	mov	r2, r3
 800263e:	2101      	movs	r1, #1
 8002640:	f003 fae0 	bl	8005c04 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	4f54300a 	.word	0x4f54300a

08002654 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	70fb      	strb	r3, [r7, #3]
 8002660:	4613      	mov	r3, r2
 8002662:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d107      	bne.n	8002682 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002672:	883b      	ldrh	r3, [r7, #0]
 8002674:	0419      	lsls	r1, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	430a      	orrs	r2, r1
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
 8002680:	e028      	b.n	80026d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	0c1b      	lsrs	r3, r3, #16
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	4413      	add	r3, r2
 800268e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002690:	2300      	movs	r3, #0
 8002692:	73fb      	strb	r3, [r7, #15]
 8002694:	e00d      	b.n	80026b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	3340      	adds	r3, #64	; 0x40
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	0c1b      	lsrs	r3, r3, #16
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	4413      	add	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	3301      	adds	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d3ec      	bcc.n	8002696 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80026bc:	883b      	ldrh	r3, [r7, #0]
 80026be:	0418      	lsls	r0, r3, #16
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6819      	ldr	r1, [r3, #0]
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	4302      	orrs	r2, r0
 80026cc:	3340      	adds	r3, #64	; 0x40
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	887a      	ldrh	r2, [r7, #2]
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_PCDEx_ActivateLPM+0x44>)
 8002734:	4313      	orrs	r3, r2
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	10000003 	.word	0x10000003

0800274c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275a:	6013      	str	r3, [r2, #0]
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40007000 	.word	0x40007000

0800276c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002774:	2300      	movs	r3, #0
 8002776:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e291      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 8087 	beq.w	800289e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002790:	4b96      	ldr	r3, [pc, #600]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b04      	cmp	r3, #4
 800279a:	d00c      	beq.n	80027b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279c:	4b93      	ldr	r3, [pc, #588]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 030c 	and.w	r3, r3, #12
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d112      	bne.n	80027ce <HAL_RCC_OscConfig+0x62>
 80027a8:	4b90      	ldr	r3, [pc, #576]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027b4:	d10b      	bne.n	80027ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b6:	4b8d      	ldr	r3, [pc, #564]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d06c      	beq.n	800289c <HAL_RCC_OscConfig+0x130>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d168      	bne.n	800289c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e26b      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x7a>
 80027d8:	4b84      	ldr	r3, [pc, #528]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a83      	ldr	r2, [pc, #524]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	e02e      	b.n	8002844 <HAL_RCC_OscConfig+0xd8>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x9c>
 80027ee:	4b7f      	ldr	r3, [pc, #508]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a7e      	ldr	r2, [pc, #504]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b7c      	ldr	r3, [pc, #496]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a7b      	ldr	r2, [pc, #492]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e01d      	b.n	8002844 <HAL_RCC_OscConfig+0xd8>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0xc0>
 8002812:	4b76      	ldr	r3, [pc, #472]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a75      	ldr	r2, [pc, #468]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b73      	ldr	r3, [pc, #460]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a72      	ldr	r2, [pc, #456]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0xd8>
 800282c:	4b6f      	ldr	r3, [pc, #444]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a6e      	ldr	r2, [pc, #440]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4b6c      	ldr	r3, [pc, #432]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a6b      	ldr	r2, [pc, #428]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800283e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fd fe7e 	bl	800054c <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7fd fe7a 	bl	800054c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e21f      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b61      	ldr	r3, [pc, #388]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0xe8>
 8002872:	e014      	b.n	800289e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fd fe6a 	bl	800054c <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7fd fe66 	bl	800054c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e20b      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	4b57      	ldr	r3, [pc, #348]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x110>
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d069      	beq.n	800297e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028aa:	4b50      	ldr	r3, [pc, #320]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028b6:	4b4d      	ldr	r3, [pc, #308]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d11c      	bne.n	80028fc <HAL_RCC_OscConfig+0x190>
 80028c2:	4b4a      	ldr	r3, [pc, #296]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d116      	bne.n	80028fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_RCC_OscConfig+0x17a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e1df      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e6:	4b41      	ldr	r3, [pc, #260]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	493d      	ldr	r1, [pc, #244]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	e040      	b.n	800297e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d023      	beq.n	800294c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002904:	4b39      	ldr	r3, [pc, #228]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a38      	ldr	r2, [pc, #224]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fd fe1c 	bl	800054c <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002918:	f7fd fe18 	bl	800054c <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e1bd      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292a:	4b30      	ldr	r3, [pc, #192]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002936:	4b2d      	ldr	r3, [pc, #180]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4929      	ldr	r1, [pc, #164]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
 800294a:	e018      	b.n	800297e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800294c:	4b27      	ldr	r3, [pc, #156]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a26      	ldr	r2, [pc, #152]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fd fdf8 	bl	800054c <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002960:	f7fd fdf4 	bl	800054c <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e199      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d038      	beq.n	80029fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d019      	beq.n	80029c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002992:	4b16      	ldr	r3, [pc, #88]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002996:	4a15      	ldr	r2, [pc, #84]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299e:	f7fd fdd5 	bl	800054c <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a6:	f7fd fdd1 	bl	800054c <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e176      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80029ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x23a>
 80029c4:	e01a      	b.n	80029fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80029c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ca:	4a08      	ldr	r2, [pc, #32]	; (80029ec <HAL_RCC_OscConfig+0x280>)
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d2:	f7fd fdbb 	bl	800054c <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029da:	f7fd fdb7 	bl	800054c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d903      	bls.n	80029f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e15c      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
 80029ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f0:	4b91      	ldr	r3, [pc, #580]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 80029f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1ee      	bne.n	80029da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80a4 	beq.w	8002b52 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0a:	4b8b      	ldr	r3, [pc, #556]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10d      	bne.n	8002a32 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	4b88      	ldr	r3, [pc, #544]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	4a87      	ldr	r2, [pc, #540]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6413      	str	r3, [r2, #64]	; 0x40
 8002a22:	4b85      	ldr	r3, [pc, #532]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a32:	4b82      	ldr	r3, [pc, #520]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d118      	bne.n	8002a70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a3e:	4b7f      	ldr	r3, [pc, #508]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a7e      	ldr	r2, [pc, #504]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4a:	f7fd fd7f 	bl	800054c <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a52:	f7fd fd7b 	bl	800054c <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b64      	cmp	r3, #100	; 0x64
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e120      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a64:	4b75      	ldr	r3, [pc, #468]	; (8002c3c <HAL_RCC_OscConfig+0x4d0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d106      	bne.n	8002a86 <HAL_RCC_OscConfig+0x31a>
 8002a78:	4b6f      	ldr	r3, [pc, #444]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	4a6e      	ldr	r2, [pc, #440]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6713      	str	r3, [r2, #112]	; 0x70
 8002a84:	e02d      	b.n	8002ae2 <HAL_RCC_OscConfig+0x376>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x33c>
 8002a8e:	4b6a      	ldr	r3, [pc, #424]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a92:	4a69      	ldr	r2, [pc, #420]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002a94:	f023 0301 	bic.w	r3, r3, #1
 8002a98:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9a:	4b67      	ldr	r3, [pc, #412]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9e:	4a66      	ldr	r2, [pc, #408]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002aa0:	f023 0304 	bic.w	r3, r3, #4
 8002aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa6:	e01c      	b.n	8002ae2 <HAL_RCC_OscConfig+0x376>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b05      	cmp	r3, #5
 8002aae:	d10c      	bne.n	8002aca <HAL_RCC_OscConfig+0x35e>
 8002ab0:	4b61      	ldr	r3, [pc, #388]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	4a60      	ldr	r2, [pc, #384]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002ab6:	f043 0304 	orr.w	r3, r3, #4
 8002aba:	6713      	str	r3, [r2, #112]	; 0x70
 8002abc:	4b5e      	ldr	r3, [pc, #376]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac0:	4a5d      	ldr	r2, [pc, #372]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac8:	e00b      	b.n	8002ae2 <HAL_RCC_OscConfig+0x376>
 8002aca:	4b5b      	ldr	r3, [pc, #364]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ace:	4a5a      	ldr	r2, [pc, #360]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad6:	4b58      	ldr	r3, [pc, #352]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ada:	4a57      	ldr	r2, [pc, #348]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002adc:	f023 0304 	bic.w	r3, r3, #4
 8002ae0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d015      	beq.n	8002b16 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aea:	f7fd fd2f 	bl	800054c <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f7fd fd2b 	bl	800054c <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e0ce      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b08:	4b4b      	ldr	r3, [pc, #300]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0ee      	beq.n	8002af2 <HAL_RCC_OscConfig+0x386>
 8002b14:	e014      	b.n	8002b40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b16:	f7fd fd19 	bl	800054c <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7fd fd15 	bl	800054c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e0b8      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b34:	4b40      	ldr	r3, [pc, #256]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1ee      	bne.n	8002b1e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d105      	bne.n	8002b52 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b46:	4b3c      	ldr	r3, [pc, #240]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	4a3b      	ldr	r2, [pc, #236]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80a4 	beq.w	8002ca4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b5c:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d06b      	beq.n	8002c40 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d149      	bne.n	8002c04 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b70:	4b31      	ldr	r3, [pc, #196]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a30      	ldr	r2, [pc, #192]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7fd fce6 	bl	800054c <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b84:	f7fd fce2 	bl	800054c <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e087      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b96:	4b28      	ldr	r3, [pc, #160]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69da      	ldr	r2, [r3, #28]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	019b      	lsls	r3, r3, #6
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb8:	085b      	lsrs	r3, r3, #1
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	041b      	lsls	r3, r3, #16
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	061b      	lsls	r3, r3, #24
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	4a1b      	ldr	r2, [pc, #108]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002bca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd0:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a18      	ldr	r2, [pc, #96]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fd fcb6 	bl	800054c <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fd fcb2 	bl	800054c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e057      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf6:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x478>
 8002c02:	e04f      	b.n	8002ca4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c10:	f7fd fc9c 	bl	800054c <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c18:	f7fd fc98 	bl	800054c <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e03d      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2a:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x4ac>
 8002c36:	e035      	b.n	8002ca4 <HAL_RCC_OscConfig+0x538>
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c40:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <HAL_RCC_OscConfig+0x544>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d028      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d121      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d11a      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c70:	4013      	ands	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c76:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d111      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d107      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800

08002cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0d0      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b6a      	ldr	r3, [pc, #424]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d910      	bls.n	8002cfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b67      	ldr	r3, [pc, #412]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 020f 	bic.w	r2, r3, #15
 8002ce2:	4965      	ldr	r1, [pc, #404]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b63      	ldr	r3, [pc, #396]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0b8      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d020      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d14:	4b59      	ldr	r3, [pc, #356]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4a58      	ldr	r2, [pc, #352]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d2c:	4b53      	ldr	r3, [pc, #332]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4a52      	ldr	r2, [pc, #328]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d38:	4b50      	ldr	r3, [pc, #320]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	494d      	ldr	r1, [pc, #308]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d040      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d107      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b47      	ldr	r3, [pc, #284]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d115      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e07f      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d76:	4b41      	ldr	r3, [pc, #260]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e073      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d86:	4b3d      	ldr	r3, [pc, #244]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e06b      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d96:	4b39      	ldr	r3, [pc, #228]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f023 0203 	bic.w	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4936      	ldr	r1, [pc, #216]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da8:	f7fd fbd0 	bl	800054c <HAL_GetTick>
 8002dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db0:	f7fd fbcc 	bl	800054c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e053      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc6:	4b2d      	ldr	r3, [pc, #180]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 020c 	and.w	r2, r3, #12
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d1eb      	bne.n	8002db0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d210      	bcs.n	8002e08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 020f 	bic.w	r2, r3, #15
 8002dee:	4922      	ldr	r1, [pc, #136]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e032      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4916      	ldr	r1, [pc, #88]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	490e      	ldr	r1, [pc, #56]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e46:	f000 f821 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	490a      	ldr	r1, [pc, #40]	; (8002e80 <HAL_RCC_ClockConfig+0x1cc>)
 8002e58:	5ccb      	ldrb	r3, [r1, r3]
 8002e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5e:	4a09      	ldr	r2, [pc, #36]	; (8002e84 <HAL_RCC_ClockConfig+0x1d0>)
 8002e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_RCC_ClockConfig+0x1d4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f007 fcfe 	bl	800a868 <HAL_InitTick>

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023c00 	.word	0x40023c00
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	0800ba58 	.word	0x0800ba58
 8002e84:	2000011c 	.word	0x2000011c
 8002e88:	20000000 	.word	0x20000000

08002e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ea4:	4b67      	ldr	r3, [pc, #412]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d00d      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x40>
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	f200 80bd 	bhi.w	8003030 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d003      	beq.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ebe:	e0b7      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec0:	4b61      	ldr	r3, [pc, #388]	; (8003048 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ec2:	60bb      	str	r3, [r7, #8]
      break;
 8002ec4:	e0b7      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ec6:	4b61      	ldr	r3, [pc, #388]	; (800304c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ec8:	60bb      	str	r3, [r7, #8]
      break;
 8002eca:	e0b4      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ecc:	4b5d      	ldr	r3, [pc, #372]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ed6:	4b5b      	ldr	r3, [pc, #364]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d04d      	beq.n	8002f7e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee2:	4b58      	ldr	r3, [pc, #352]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	099b      	lsrs	r3, r3, #6
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ef2:	f04f 0100 	mov.w	r1, #0
 8002ef6:	ea02 0800 	and.w	r8, r2, r0
 8002efa:	ea03 0901 	and.w	r9, r3, r1
 8002efe:	4640      	mov	r0, r8
 8002f00:	4649      	mov	r1, r9
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	014b      	lsls	r3, r1, #5
 8002f0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f10:	0142      	lsls	r2, r0, #5
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	ebb0 0008 	subs.w	r0, r0, r8
 8002f1a:	eb61 0109 	sbc.w	r1, r1, r9
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	018b      	lsls	r3, r1, #6
 8002f28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f2c:	0182      	lsls	r2, r0, #6
 8002f2e:	1a12      	subs	r2, r2, r0
 8002f30:	eb63 0301 	sbc.w	r3, r3, r1
 8002f34:	f04f 0000 	mov.w	r0, #0
 8002f38:	f04f 0100 	mov.w	r1, #0
 8002f3c:	00d9      	lsls	r1, r3, #3
 8002f3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f42:	00d0      	lsls	r0, r2, #3
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	eb12 0208 	adds.w	r2, r2, r8
 8002f4c:	eb43 0309 	adc.w	r3, r3, r9
 8002f50:	f04f 0000 	mov.w	r0, #0
 8002f54:	f04f 0100 	mov.w	r1, #0
 8002f58:	0259      	lsls	r1, r3, #9
 8002f5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f5e:	0250      	lsls	r0, r2, #9
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4610      	mov	r0, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	f7fd f94e 	bl	8000210 <__aeabi_uldivmod>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4613      	mov	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	e04a      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7e:	4b31      	ldr	r3, [pc, #196]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	099b      	lsrs	r3, r3, #6
 8002f84:	461a      	mov	r2, r3
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f8e:	f04f 0100 	mov.w	r1, #0
 8002f92:	ea02 0400 	and.w	r4, r2, r0
 8002f96:	ea03 0501 	and.w	r5, r3, r1
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	014b      	lsls	r3, r1, #5
 8002fa8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fac:	0142      	lsls	r2, r0, #5
 8002fae:	4610      	mov	r0, r2
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	1b00      	subs	r0, r0, r4
 8002fb4:	eb61 0105 	sbc.w	r1, r1, r5
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	018b      	lsls	r3, r1, #6
 8002fc2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fc6:	0182      	lsls	r2, r0, #6
 8002fc8:	1a12      	subs	r2, r2, r0
 8002fca:	eb63 0301 	sbc.w	r3, r3, r1
 8002fce:	f04f 0000 	mov.w	r0, #0
 8002fd2:	f04f 0100 	mov.w	r1, #0
 8002fd6:	00d9      	lsls	r1, r3, #3
 8002fd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fdc:	00d0      	lsls	r0, r2, #3
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	1912      	adds	r2, r2, r4
 8002fe4:	eb45 0303 	adc.w	r3, r5, r3
 8002fe8:	f04f 0000 	mov.w	r0, #0
 8002fec:	f04f 0100 	mov.w	r1, #0
 8002ff0:	0299      	lsls	r1, r3, #10
 8002ff2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ff6:	0290      	lsls	r0, r2, #10
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	461a      	mov	r2, r3
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	f7fd f902 	bl	8000210 <__aeabi_uldivmod>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4613      	mov	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	3301      	adds	r3, #1
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	fbb2 f3f3 	udiv	r3, r2, r3
 800302c:	60bb      	str	r3, [r7, #8]
      break;
 800302e:	e002      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003032:	60bb      	str	r3, [r7, #8]
      break;
 8003034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003036:	68bb      	ldr	r3, [r7, #8]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800
 8003048:	00f42400 	.word	0x00f42400
 800304c:	007a1200 	.word	0x007a1200

08003050 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003054:	4b03      	ldr	r3, [pc, #12]	; (8003064 <HAL_RCC_GetHCLKFreq+0x14>)
 8003056:	681b      	ldr	r3, [r3, #0]
}
 8003058:	4618      	mov	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	2000011c 	.word	0x2000011c

08003068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800306c:	f7ff fff0 	bl	8003050 <HAL_RCC_GetHCLKFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	0a9b      	lsrs	r3, r3, #10
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	4903      	ldr	r1, [pc, #12]	; (800308c <HAL_RCC_GetPCLK1Freq+0x24>)
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40023800 	.word	0x40023800
 800308c:	0800ba68 	.word	0x0800ba68

08003090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003094:	f7ff ffdc 	bl	8003050 <HAL_RCC_GetHCLKFreq>
 8003098:	4602      	mov	r2, r0
 800309a:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	0b5b      	lsrs	r3, r3, #13
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	4903      	ldr	r1, [pc, #12]	; (80030b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a6:	5ccb      	ldrb	r3, [r1, r3]
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40023800 	.word	0x40023800
 80030b4:	0800ba68 	.word	0x0800ba68

080030b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	220f      	movs	r2, #15
 80030c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030c8:	4b12      	ldr	r3, [pc, #72]	; (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0203 	and.w	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	08db      	lsrs	r3, r3, #3
 80030f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030fa:	4b07      	ldr	r3, [pc, #28]	; (8003118 <HAL_RCC_GetClockConfig+0x60>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 020f 	and.w	r2, r3, #15
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	601a      	str	r2, [r3, #0]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800
 8003118:	40023c00 	.word	0x40023c00

0800311c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d012      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003144:	4b69      	ldr	r3, [pc, #420]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a68      	ldr	r2, [pc, #416]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800314e:	6093      	str	r3, [r2, #8]
 8003150:	4b66      	ldr	r3, [pc, #408]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	4964      	ldr	r1, [pc, #400]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003166:	2301      	movs	r3, #1
 8003168:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d017      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003176:	4b5d      	ldr	r3, [pc, #372]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800317c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003184:	4959      	ldr	r1, [pc, #356]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003190:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003194:	d101      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003196:	2301      	movs	r3, #1
 8003198:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031a2:	2301      	movs	r3, #1
 80031a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d017      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031b2:	4b4e      	ldr	r3, [pc, #312]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	494a      	ldr	r1, [pc, #296]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031d0:	d101      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031d2:	2301      	movs	r3, #1
 80031d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80031de:	2301      	movs	r3, #1
 80031e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 808b 	beq.w	8003316 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003200:	4b3a      	ldr	r3, [pc, #232]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	4a39      	ldr	r2, [pc, #228]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320a:	6413      	str	r3, [r2, #64]	; 0x40
 800320c:	4b37      	ldr	r3, [pc, #220]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003218:	4b35      	ldr	r3, [pc, #212]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a34      	ldr	r2, [pc, #208]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800321e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003222:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003224:	f7fd f992 	bl	800054c <HAL_GetTick>
 8003228:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800322a:	e008      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322c:	f7fd f98e 	bl	800054c <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e357      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800323e:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800324a:	4b28      	ldr	r3, [pc, #160]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003252:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d035      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	429a      	cmp	r2, r3
 8003266:	d02e      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003268:	4b20      	ldr	r3, [pc, #128]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003270:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003272:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003276:	4a1d      	ldr	r2, [pc, #116]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800327e:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	4a1a      	ldr	r2, [pc, #104]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003288:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800328a:	4a18      	ldr	r2, [pc, #96]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003290:	4b16      	ldr	r3, [pc, #88]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b01      	cmp	r3, #1
 800329a:	d114      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fd f956 	bl	800054c <HAL_GetTick>
 80032a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a2:	e00a      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7fd f952 	bl	800054c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e319      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ba:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0ee      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032d2:	d111      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032e0:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032e2:	400b      	ands	r3, r1
 80032e4:	4901      	ldr	r1, [pc, #4]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
 80032ea:	e00b      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40007000 	.word	0x40007000
 80032f4:	0ffffcff 	.word	0x0ffffcff
 80032f8:	4bb1      	ldr	r3, [pc, #708]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	4ab0      	ldr	r2, [pc, #704]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003302:	6093      	str	r3, [r2, #8]
 8003304:	4bae      	ldr	r3, [pc, #696]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003306:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003310:	49ab      	ldr	r1, [pc, #684]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003312:	4313      	orrs	r3, r2
 8003314:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	2b00      	cmp	r3, #0
 8003320:	d010      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003322:	4ba7      	ldr	r3, [pc, #668]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003328:	4aa5      	ldr	r2, [pc, #660]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800332a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800332e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003332:	4ba3      	ldr	r3, [pc, #652]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003334:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	49a0      	ldr	r1, [pc, #640]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003350:	4b9b      	ldr	r3, [pc, #620]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003356:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800335e:	4998      	ldr	r1, [pc, #608]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003372:	4b93      	ldr	r3, [pc, #588]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003378:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003380:	498f      	ldr	r1, [pc, #572]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003394:	4b8a      	ldr	r3, [pc, #552]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a2:	4987      	ldr	r1, [pc, #540]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033b6:	4b82      	ldr	r3, [pc, #520]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c4:	497e      	ldr	r1, [pc, #504]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00a      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033d8:	4b79      	ldr	r3, [pc, #484]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f023 0203 	bic.w	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	4976      	ldr	r1, [pc, #472]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033fa:	4b71      	ldr	r3, [pc, #452]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003400:	f023 020c 	bic.w	r2, r3, #12
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003408:	496d      	ldr	r1, [pc, #436]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800341c:	4b68      	ldr	r3, [pc, #416]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342a:	4965      	ldr	r1, [pc, #404]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800343e:	4b60      	ldr	r3, [pc, #384]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344c:	495c      	ldr	r1, [pc, #368]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003460:	4b57      	ldr	r3, [pc, #348]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003466:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346e:	4954      	ldr	r1, [pc, #336]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003482:	4b4f      	ldr	r3, [pc, #316]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	494b      	ldr	r1, [pc, #300]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034a4:	4b46      	ldr	r3, [pc, #280]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b2:	4943      	ldr	r1, [pc, #268]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034c6:	4b3e      	ldr	r3, [pc, #248]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d4:	493a      	ldr	r1, [pc, #232]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034e8:	4b35      	ldr	r3, [pc, #212]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034f6:	4932      	ldr	r1, [pc, #200]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d011      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800350a:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003510:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003518:	4929      	ldr	r1, [pc, #164]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003528:	d101      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800352a:	2301      	movs	r3, #1
 800352c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800353a:	2301      	movs	r3, #1
 800353c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800354a:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003550:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	4919      	ldr	r1, [pc, #100]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00b      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800356c:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800357c:	4910      	ldr	r1, [pc, #64]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d006      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80d9 	beq.w	800374a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a08      	ldr	r2, [pc, #32]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800359e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a4:	f7fc ffd2 	bl	800054c <HAL_GetTick>
 80035a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035aa:	e00b      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035ac:	f7fc ffce 	bl	800054c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	; 0x64
 80035b8:	d904      	bls.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e197      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035c4:	4b6c      	ldr	r3, [pc, #432]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1ed      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d021      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d11d      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035e4:	4b64      	ldr	r3, [pc, #400]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ea:	0c1b      	lsrs	r3, r3, #16
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035f2:	4b61      	ldr	r3, [pc, #388]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f8:	0e1b      	lsrs	r3, r3, #24
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	019a      	lsls	r2, r3, #6
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	041b      	lsls	r3, r3, #16
 800360a:	431a      	orrs	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	061b      	lsls	r3, r3, #24
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	071b      	lsls	r3, r3, #28
 8003618:	4957      	ldr	r1, [pc, #348]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d004      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003630:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003634:	d00a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800363e:	2b00      	cmp	r3, #0
 8003640:	d02e      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800364a:	d129      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800364c:	4b4a      	ldr	r3, [pc, #296]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800364e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003652:	0c1b      	lsrs	r3, r3, #16
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800365a:	4b47      	ldr	r3, [pc, #284]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800365c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003660:	0f1b      	lsrs	r3, r3, #28
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	019a      	lsls	r2, r3, #6
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	041b      	lsls	r3, r3, #16
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	061b      	lsls	r3, r3, #24
 800367a:	431a      	orrs	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	071b      	lsls	r3, r3, #28
 8003680:	493d      	ldr	r1, [pc, #244]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003688:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800368a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800368e:	f023 021f 	bic.w	r2, r3, #31
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	3b01      	subs	r3, #1
 8003698:	4937      	ldr	r1, [pc, #220]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d01d      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036ac:	4b32      	ldr	r3, [pc, #200]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036b2:	0e1b      	lsrs	r3, r3, #24
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036ba:	4b2f      	ldr	r3, [pc, #188]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c0:	0f1b      	lsrs	r3, r3, #28
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	019a      	lsls	r2, r3, #6
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	041b      	lsls	r3, r3, #16
 80036d4:	431a      	orrs	r2, r3
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	061b      	lsls	r3, r3, #24
 80036da:	431a      	orrs	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	071b      	lsls	r3, r3, #28
 80036e0:	4925      	ldr	r1, [pc, #148]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d011      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	019a      	lsls	r2, r3, #6
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	041b      	lsls	r3, r3, #16
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	061b      	lsls	r3, r3, #24
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	071b      	lsls	r3, r3, #28
 8003710:	4919      	ldr	r1, [pc, #100]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003718:	4b17      	ldr	r3, [pc, #92]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a16      	ldr	r2, [pc, #88]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800371e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003724:	f7fc ff12 	bl	800054c <HAL_GetTick>
 8003728:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800372c:	f7fc ff0e 	bl	800054c <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	; 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e0d7      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800373e:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b01      	cmp	r3, #1
 800374e:	f040 80cd 	bne.w	80038ec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003752:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a08      	ldr	r2, [pc, #32]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375e:	f7fc fef5 	bl	800054c <HAL_GetTick>
 8003762:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003764:	e00a      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003766:	f7fc fef1 	bl	800054c <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b64      	cmp	r3, #100	; 0x64
 8003772:	d903      	bls.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e0ba      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003778:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800377c:	4b5e      	ldr	r3, [pc, #376]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003788:	d0ed      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d02e      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d12a      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037b2:	4b51      	ldr	r3, [pc, #324]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037c0:	4b4d      	ldr	r3, [pc, #308]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	0f1b      	lsrs	r3, r3, #28
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	019a      	lsls	r2, r3, #6
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	041b      	lsls	r3, r3, #16
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	061b      	lsls	r3, r3, #24
 80037e0:	431a      	orrs	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	071b      	lsls	r3, r3, #28
 80037e6:	4944      	ldr	r1, [pc, #272]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037ee:	4b42      	ldr	r3, [pc, #264]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	3b01      	subs	r3, #1
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	493d      	ldr	r1, [pc, #244]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d022      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800381c:	d11d      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800381e:	4b36      	ldr	r3, [pc, #216]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003824:	0e1b      	lsrs	r3, r3, #24
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800382c:	4b32      	ldr	r3, [pc, #200]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	0f1b      	lsrs	r3, r3, #28
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	019a      	lsls	r2, r3, #6
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	041b      	lsls	r3, r3, #16
 8003846:	431a      	orrs	r2, r3
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	061b      	lsls	r3, r3, #24
 800384c:	431a      	orrs	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	071b      	lsls	r3, r3, #28
 8003852:	4929      	ldr	r1, [pc, #164]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d028      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003866:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	0e1b      	lsrs	r3, r3, #24
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003874:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	0c1b      	lsrs	r3, r3, #16
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	019a      	lsls	r2, r3, #6
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	041b      	lsls	r3, r3, #16
 800388c:	431a      	orrs	r2, r3
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	061b      	lsls	r3, r3, #24
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	071b      	lsls	r3, r3, #28
 800389a:	4917      	ldr	r1, [pc, #92]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80038a2:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	4911      	ldr	r1, [pc, #68]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038b8:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a0e      	ldr	r2, [pc, #56]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c4:	f7fc fe42 	bl	800054c <HAL_GetTick>
 80038c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038cc:	f7fc fe3e 	bl	800054c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	; 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e007      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038ea:	d1ef      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40023800 	.word	0x40023800

080038fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e049      	b.n	80039a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f841 	bl	80039aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f000 fa00 	bl	8003d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d001      	beq.n	80039d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e054      	b.n	8003a82 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a26      	ldr	r2, [pc, #152]	; (8003a90 <HAL_TIM_Base_Start_IT+0xd0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d022      	beq.n	8003a40 <HAL_TIM_Base_Start_IT+0x80>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a02:	d01d      	beq.n	8003a40 <HAL_TIM_Base_Start_IT+0x80>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a22      	ldr	r2, [pc, #136]	; (8003a94 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d018      	beq.n	8003a40 <HAL_TIM_Base_Start_IT+0x80>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a21      	ldr	r2, [pc, #132]	; (8003a98 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d013      	beq.n	8003a40 <HAL_TIM_Base_Start_IT+0x80>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1f      	ldr	r2, [pc, #124]	; (8003a9c <HAL_TIM_Base_Start_IT+0xdc>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00e      	beq.n	8003a40 <HAL_TIM_Base_Start_IT+0x80>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1e      	ldr	r2, [pc, #120]	; (8003aa0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d009      	beq.n	8003a40 <HAL_TIM_Base_Start_IT+0x80>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d004      	beq.n	8003a40 <HAL_TIM_Base_Start_IT+0x80>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a1b      	ldr	r2, [pc, #108]	; (8003aa8 <HAL_TIM_Base_Start_IT+0xe8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d115      	bne.n	8003a6c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	4b19      	ldr	r3, [pc, #100]	; (8003aac <HAL_TIM_Base_Start_IT+0xec>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b06      	cmp	r3, #6
 8003a50:	d015      	beq.n	8003a7e <HAL_TIM_Base_Start_IT+0xbe>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a58:	d011      	beq.n	8003a7e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 0201 	orr.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6a:	e008      	b.n	8003a7e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	e000      	b.n	8003a80 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40010000 	.word	0x40010000
 8003a94:	40000400 	.word	0x40000400
 8003a98:	40000800 	.word	0x40000800
 8003a9c:	40000c00 	.word	0x40000c00
 8003aa0:	40010400 	.word	0x40010400
 8003aa4:	40014000 	.word	0x40014000
 8003aa8:	40001800 	.word	0x40001800
 8003aac:	00010007 	.word	0x00010007

08003ab0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d122      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d11b      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0202 	mvn.w	r2, #2
 8003adc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f905 	bl	8003d02 <HAL_TIM_IC_CaptureCallback>
 8003af8:	e005      	b.n	8003b06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f8f7 	bl	8003cee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f908 	bl	8003d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d122      	bne.n	8003b60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d11b      	bne.n	8003b60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0204 	mvn.w	r2, #4
 8003b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2202      	movs	r2, #2
 8003b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f8db 	bl	8003d02 <HAL_TIM_IC_CaptureCallback>
 8003b4c:	e005      	b.n	8003b5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f8cd 	bl	8003cee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f8de 	bl	8003d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d122      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d11b      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0208 	mvn.w	r2, #8
 8003b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2204      	movs	r2, #4
 8003b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f8b1 	bl	8003d02 <HAL_TIM_IC_CaptureCallback>
 8003ba0:	e005      	b.n	8003bae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f8a3 	bl	8003cee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f8b4 	bl	8003d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0310 	and.w	r3, r3, #16
 8003bbe:	2b10      	cmp	r3, #16
 8003bc0:	d122      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	d11b      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0210 	mvn.w	r2, #16
 8003bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2208      	movs	r2, #8
 8003bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f887 	bl	8003d02 <HAL_TIM_IC_CaptureCallback>
 8003bf4:	e005      	b.n	8003c02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f879 	bl	8003cee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f88a 	bl	8003d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d10e      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d107      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0201 	mvn.w	r2, #1
 8003c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f006 fcde 	bl	800a5f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3e:	2b80      	cmp	r3, #128	; 0x80
 8003c40:	d10e      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4c:	2b80      	cmp	r3, #128	; 0x80
 8003c4e:	d107      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f91a 	bl	8003e94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6e:	d10e      	bne.n	8003c8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7a:	2b80      	cmp	r3, #128	; 0x80
 8003c7c:	d107      	bne.n	8003c8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f90d 	bl	8003ea8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c98:	2b40      	cmp	r3, #64	; 0x40
 8003c9a:	d10e      	bne.n	8003cba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca6:	2b40      	cmp	r3, #64	; 0x40
 8003ca8:	d107      	bne.n	8003cba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f838 	bl	8003d2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d10e      	bne.n	8003ce6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d107      	bne.n	8003ce6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f06f 0220 	mvn.w	r2, #32
 8003cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f8cd 	bl	8003e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a40      	ldr	r2, [pc, #256]	; (8003e54 <TIM_Base_SetConfig+0x114>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d013      	beq.n	8003d80 <TIM_Base_SetConfig+0x40>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5e:	d00f      	beq.n	8003d80 <TIM_Base_SetConfig+0x40>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a3d      	ldr	r2, [pc, #244]	; (8003e58 <TIM_Base_SetConfig+0x118>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00b      	beq.n	8003d80 <TIM_Base_SetConfig+0x40>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a3c      	ldr	r2, [pc, #240]	; (8003e5c <TIM_Base_SetConfig+0x11c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d007      	beq.n	8003d80 <TIM_Base_SetConfig+0x40>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a3b      	ldr	r2, [pc, #236]	; (8003e60 <TIM_Base_SetConfig+0x120>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <TIM_Base_SetConfig+0x40>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a3a      	ldr	r2, [pc, #232]	; (8003e64 <TIM_Base_SetConfig+0x124>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d108      	bne.n	8003d92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a2f      	ldr	r2, [pc, #188]	; (8003e54 <TIM_Base_SetConfig+0x114>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d02b      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da0:	d027      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a2c      	ldr	r2, [pc, #176]	; (8003e58 <TIM_Base_SetConfig+0x118>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d023      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a2b      	ldr	r2, [pc, #172]	; (8003e5c <TIM_Base_SetConfig+0x11c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01f      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a2a      	ldr	r2, [pc, #168]	; (8003e60 <TIM_Base_SetConfig+0x120>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d01b      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a29      	ldr	r2, [pc, #164]	; (8003e64 <TIM_Base_SetConfig+0x124>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d017      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a28      	ldr	r2, [pc, #160]	; (8003e68 <TIM_Base_SetConfig+0x128>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a27      	ldr	r2, [pc, #156]	; (8003e6c <TIM_Base_SetConfig+0x12c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00f      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a26      	ldr	r2, [pc, #152]	; (8003e70 <TIM_Base_SetConfig+0x130>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00b      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a25      	ldr	r2, [pc, #148]	; (8003e74 <TIM_Base_SetConfig+0x134>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d007      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a24      	ldr	r2, [pc, #144]	; (8003e78 <TIM_Base_SetConfig+0x138>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d003      	beq.n	8003df2 <TIM_Base_SetConfig+0xb2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a23      	ldr	r2, [pc, #140]	; (8003e7c <TIM_Base_SetConfig+0x13c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d108      	bne.n	8003e04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <TIM_Base_SetConfig+0x114>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d003      	beq.n	8003e38 <TIM_Base_SetConfig+0xf8>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a0c      	ldr	r2, [pc, #48]	; (8003e64 <TIM_Base_SetConfig+0x124>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d103      	bne.n	8003e40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	615a      	str	r2, [r3, #20]
}
 8003e46:	bf00      	nop
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40010000 	.word	0x40010000
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40000800 	.word	0x40000800
 8003e60:	40000c00 	.word	0x40000c00
 8003e64:	40010400 	.word	0x40010400
 8003e68:	40014000 	.word	0x40014000
 8003e6c:	40014400 	.word	0x40014400
 8003e70:	40014800 	.word	0x40014800
 8003e74:	40001800 	.word	0x40001800
 8003e78:	40001c00 	.word	0x40001c00
 8003e7c:	40002000 	.word	0x40002000

08003e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e040      	b.n	8003f50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f006 fc7e 	bl	800a7e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2224      	movs	r2, #36	; 0x24
 8003ee8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0201 	bic.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f82c 	bl	8003f58 <UART_SetConfig>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e022      	b.n	8003f50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fa82 	bl	800441c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fb09 	bl	8004560 <UART_CheckIdleState>
 8003f4e:	4603      	mov	r3, r0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4ba7      	ldr	r3, [pc, #668]	; (8004220 <UART_SetConfig+0x2c8>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	6979      	ldr	r1, [r7, #20]
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a95      	ldr	r2, [pc, #596]	; (8004224 <UART_SetConfig+0x2cc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d120      	bne.n	8004016 <UART_SetConfig+0xbe>
 8003fd4:	4b94      	ldr	r3, [pc, #592]	; (8004228 <UART_SetConfig+0x2d0>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d816      	bhi.n	8004010 <UART_SetConfig+0xb8>
 8003fe2:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <UART_SetConfig+0x90>)
 8003fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe8:	08003ff9 	.word	0x08003ff9
 8003fec:	08004005 	.word	0x08004005
 8003ff0:	08003fff 	.word	0x08003fff
 8003ff4:	0800400b 	.word	0x0800400b
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	77fb      	strb	r3, [r7, #31]
 8003ffc:	e14f      	b.n	800429e <UART_SetConfig+0x346>
 8003ffe:	2302      	movs	r3, #2
 8004000:	77fb      	strb	r3, [r7, #31]
 8004002:	e14c      	b.n	800429e <UART_SetConfig+0x346>
 8004004:	2304      	movs	r3, #4
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e149      	b.n	800429e <UART_SetConfig+0x346>
 800400a:	2308      	movs	r3, #8
 800400c:	77fb      	strb	r3, [r7, #31]
 800400e:	e146      	b.n	800429e <UART_SetConfig+0x346>
 8004010:	2310      	movs	r3, #16
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	e143      	b.n	800429e <UART_SetConfig+0x346>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a84      	ldr	r2, [pc, #528]	; (800422c <UART_SetConfig+0x2d4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d132      	bne.n	8004086 <UART_SetConfig+0x12e>
 8004020:	4b81      	ldr	r3, [pc, #516]	; (8004228 <UART_SetConfig+0x2d0>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b0c      	cmp	r3, #12
 800402c:	d828      	bhi.n	8004080 <UART_SetConfig+0x128>
 800402e:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <UART_SetConfig+0xdc>)
 8004030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004034:	08004069 	.word	0x08004069
 8004038:	08004081 	.word	0x08004081
 800403c:	08004081 	.word	0x08004081
 8004040:	08004081 	.word	0x08004081
 8004044:	08004075 	.word	0x08004075
 8004048:	08004081 	.word	0x08004081
 800404c:	08004081 	.word	0x08004081
 8004050:	08004081 	.word	0x08004081
 8004054:	0800406f 	.word	0x0800406f
 8004058:	08004081 	.word	0x08004081
 800405c:	08004081 	.word	0x08004081
 8004060:	08004081 	.word	0x08004081
 8004064:	0800407b 	.word	0x0800407b
 8004068:	2300      	movs	r3, #0
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	e117      	b.n	800429e <UART_SetConfig+0x346>
 800406e:	2302      	movs	r3, #2
 8004070:	77fb      	strb	r3, [r7, #31]
 8004072:	e114      	b.n	800429e <UART_SetConfig+0x346>
 8004074:	2304      	movs	r3, #4
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e111      	b.n	800429e <UART_SetConfig+0x346>
 800407a:	2308      	movs	r3, #8
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e10e      	b.n	800429e <UART_SetConfig+0x346>
 8004080:	2310      	movs	r3, #16
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e10b      	b.n	800429e <UART_SetConfig+0x346>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a69      	ldr	r2, [pc, #420]	; (8004230 <UART_SetConfig+0x2d8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d120      	bne.n	80040d2 <UART_SetConfig+0x17a>
 8004090:	4b65      	ldr	r3, [pc, #404]	; (8004228 <UART_SetConfig+0x2d0>)
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004096:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800409a:	2b30      	cmp	r3, #48	; 0x30
 800409c:	d013      	beq.n	80040c6 <UART_SetConfig+0x16e>
 800409e:	2b30      	cmp	r3, #48	; 0x30
 80040a0:	d814      	bhi.n	80040cc <UART_SetConfig+0x174>
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	d009      	beq.n	80040ba <UART_SetConfig+0x162>
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	d810      	bhi.n	80040cc <UART_SetConfig+0x174>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <UART_SetConfig+0x15c>
 80040ae:	2b10      	cmp	r3, #16
 80040b0:	d006      	beq.n	80040c0 <UART_SetConfig+0x168>
 80040b2:	e00b      	b.n	80040cc <UART_SetConfig+0x174>
 80040b4:	2300      	movs	r3, #0
 80040b6:	77fb      	strb	r3, [r7, #31]
 80040b8:	e0f1      	b.n	800429e <UART_SetConfig+0x346>
 80040ba:	2302      	movs	r3, #2
 80040bc:	77fb      	strb	r3, [r7, #31]
 80040be:	e0ee      	b.n	800429e <UART_SetConfig+0x346>
 80040c0:	2304      	movs	r3, #4
 80040c2:	77fb      	strb	r3, [r7, #31]
 80040c4:	e0eb      	b.n	800429e <UART_SetConfig+0x346>
 80040c6:	2308      	movs	r3, #8
 80040c8:	77fb      	strb	r3, [r7, #31]
 80040ca:	e0e8      	b.n	800429e <UART_SetConfig+0x346>
 80040cc:	2310      	movs	r3, #16
 80040ce:	77fb      	strb	r3, [r7, #31]
 80040d0:	e0e5      	b.n	800429e <UART_SetConfig+0x346>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a57      	ldr	r2, [pc, #348]	; (8004234 <UART_SetConfig+0x2dc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d120      	bne.n	800411e <UART_SetConfig+0x1c6>
 80040dc:	4b52      	ldr	r3, [pc, #328]	; (8004228 <UART_SetConfig+0x2d0>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040e6:	2bc0      	cmp	r3, #192	; 0xc0
 80040e8:	d013      	beq.n	8004112 <UART_SetConfig+0x1ba>
 80040ea:	2bc0      	cmp	r3, #192	; 0xc0
 80040ec:	d814      	bhi.n	8004118 <UART_SetConfig+0x1c0>
 80040ee:	2b80      	cmp	r3, #128	; 0x80
 80040f0:	d009      	beq.n	8004106 <UART_SetConfig+0x1ae>
 80040f2:	2b80      	cmp	r3, #128	; 0x80
 80040f4:	d810      	bhi.n	8004118 <UART_SetConfig+0x1c0>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <UART_SetConfig+0x1a8>
 80040fa:	2b40      	cmp	r3, #64	; 0x40
 80040fc:	d006      	beq.n	800410c <UART_SetConfig+0x1b4>
 80040fe:	e00b      	b.n	8004118 <UART_SetConfig+0x1c0>
 8004100:	2300      	movs	r3, #0
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e0cb      	b.n	800429e <UART_SetConfig+0x346>
 8004106:	2302      	movs	r3, #2
 8004108:	77fb      	strb	r3, [r7, #31]
 800410a:	e0c8      	b.n	800429e <UART_SetConfig+0x346>
 800410c:	2304      	movs	r3, #4
 800410e:	77fb      	strb	r3, [r7, #31]
 8004110:	e0c5      	b.n	800429e <UART_SetConfig+0x346>
 8004112:	2308      	movs	r3, #8
 8004114:	77fb      	strb	r3, [r7, #31]
 8004116:	e0c2      	b.n	800429e <UART_SetConfig+0x346>
 8004118:	2310      	movs	r3, #16
 800411a:	77fb      	strb	r3, [r7, #31]
 800411c:	e0bf      	b.n	800429e <UART_SetConfig+0x346>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a45      	ldr	r2, [pc, #276]	; (8004238 <UART_SetConfig+0x2e0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d125      	bne.n	8004174 <UART_SetConfig+0x21c>
 8004128:	4b3f      	ldr	r3, [pc, #252]	; (8004228 <UART_SetConfig+0x2d0>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004132:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004136:	d017      	beq.n	8004168 <UART_SetConfig+0x210>
 8004138:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800413c:	d817      	bhi.n	800416e <UART_SetConfig+0x216>
 800413e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004142:	d00b      	beq.n	800415c <UART_SetConfig+0x204>
 8004144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004148:	d811      	bhi.n	800416e <UART_SetConfig+0x216>
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <UART_SetConfig+0x1fe>
 800414e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004152:	d006      	beq.n	8004162 <UART_SetConfig+0x20a>
 8004154:	e00b      	b.n	800416e <UART_SetConfig+0x216>
 8004156:	2300      	movs	r3, #0
 8004158:	77fb      	strb	r3, [r7, #31]
 800415a:	e0a0      	b.n	800429e <UART_SetConfig+0x346>
 800415c:	2302      	movs	r3, #2
 800415e:	77fb      	strb	r3, [r7, #31]
 8004160:	e09d      	b.n	800429e <UART_SetConfig+0x346>
 8004162:	2304      	movs	r3, #4
 8004164:	77fb      	strb	r3, [r7, #31]
 8004166:	e09a      	b.n	800429e <UART_SetConfig+0x346>
 8004168:	2308      	movs	r3, #8
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e097      	b.n	800429e <UART_SetConfig+0x346>
 800416e:	2310      	movs	r3, #16
 8004170:	77fb      	strb	r3, [r7, #31]
 8004172:	e094      	b.n	800429e <UART_SetConfig+0x346>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a30      	ldr	r2, [pc, #192]	; (800423c <UART_SetConfig+0x2e4>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d125      	bne.n	80041ca <UART_SetConfig+0x272>
 800417e:	4b2a      	ldr	r3, [pc, #168]	; (8004228 <UART_SetConfig+0x2d0>)
 8004180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004184:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004188:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800418c:	d017      	beq.n	80041be <UART_SetConfig+0x266>
 800418e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004192:	d817      	bhi.n	80041c4 <UART_SetConfig+0x26c>
 8004194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004198:	d00b      	beq.n	80041b2 <UART_SetConfig+0x25a>
 800419a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800419e:	d811      	bhi.n	80041c4 <UART_SetConfig+0x26c>
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <UART_SetConfig+0x254>
 80041a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a8:	d006      	beq.n	80041b8 <UART_SetConfig+0x260>
 80041aa:	e00b      	b.n	80041c4 <UART_SetConfig+0x26c>
 80041ac:	2301      	movs	r3, #1
 80041ae:	77fb      	strb	r3, [r7, #31]
 80041b0:	e075      	b.n	800429e <UART_SetConfig+0x346>
 80041b2:	2302      	movs	r3, #2
 80041b4:	77fb      	strb	r3, [r7, #31]
 80041b6:	e072      	b.n	800429e <UART_SetConfig+0x346>
 80041b8:	2304      	movs	r3, #4
 80041ba:	77fb      	strb	r3, [r7, #31]
 80041bc:	e06f      	b.n	800429e <UART_SetConfig+0x346>
 80041be:	2308      	movs	r3, #8
 80041c0:	77fb      	strb	r3, [r7, #31]
 80041c2:	e06c      	b.n	800429e <UART_SetConfig+0x346>
 80041c4:	2310      	movs	r3, #16
 80041c6:	77fb      	strb	r3, [r7, #31]
 80041c8:	e069      	b.n	800429e <UART_SetConfig+0x346>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1c      	ldr	r2, [pc, #112]	; (8004240 <UART_SetConfig+0x2e8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d137      	bne.n	8004244 <UART_SetConfig+0x2ec>
 80041d4:	4b14      	ldr	r3, [pc, #80]	; (8004228 <UART_SetConfig+0x2d0>)
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041e2:	d017      	beq.n	8004214 <UART_SetConfig+0x2bc>
 80041e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041e8:	d817      	bhi.n	800421a <UART_SetConfig+0x2c2>
 80041ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ee:	d00b      	beq.n	8004208 <UART_SetConfig+0x2b0>
 80041f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041f4:	d811      	bhi.n	800421a <UART_SetConfig+0x2c2>
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <UART_SetConfig+0x2aa>
 80041fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fe:	d006      	beq.n	800420e <UART_SetConfig+0x2b6>
 8004200:	e00b      	b.n	800421a <UART_SetConfig+0x2c2>
 8004202:	2300      	movs	r3, #0
 8004204:	77fb      	strb	r3, [r7, #31]
 8004206:	e04a      	b.n	800429e <UART_SetConfig+0x346>
 8004208:	2302      	movs	r3, #2
 800420a:	77fb      	strb	r3, [r7, #31]
 800420c:	e047      	b.n	800429e <UART_SetConfig+0x346>
 800420e:	2304      	movs	r3, #4
 8004210:	77fb      	strb	r3, [r7, #31]
 8004212:	e044      	b.n	800429e <UART_SetConfig+0x346>
 8004214:	2308      	movs	r3, #8
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e041      	b.n	800429e <UART_SetConfig+0x346>
 800421a:	2310      	movs	r3, #16
 800421c:	77fb      	strb	r3, [r7, #31]
 800421e:	e03e      	b.n	800429e <UART_SetConfig+0x346>
 8004220:	efff69f3 	.word	0xefff69f3
 8004224:	40011000 	.word	0x40011000
 8004228:	40023800 	.word	0x40023800
 800422c:	40004400 	.word	0x40004400
 8004230:	40004800 	.word	0x40004800
 8004234:	40004c00 	.word	0x40004c00
 8004238:	40005000 	.word	0x40005000
 800423c:	40011400 	.word	0x40011400
 8004240:	40007800 	.word	0x40007800
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a71      	ldr	r2, [pc, #452]	; (8004410 <UART_SetConfig+0x4b8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d125      	bne.n	800429a <UART_SetConfig+0x342>
 800424e:	4b71      	ldr	r3, [pc, #452]	; (8004414 <UART_SetConfig+0x4bc>)
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004254:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004258:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800425c:	d017      	beq.n	800428e <UART_SetConfig+0x336>
 800425e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004262:	d817      	bhi.n	8004294 <UART_SetConfig+0x33c>
 8004264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004268:	d00b      	beq.n	8004282 <UART_SetConfig+0x32a>
 800426a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426e:	d811      	bhi.n	8004294 <UART_SetConfig+0x33c>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <UART_SetConfig+0x324>
 8004274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004278:	d006      	beq.n	8004288 <UART_SetConfig+0x330>
 800427a:	e00b      	b.n	8004294 <UART_SetConfig+0x33c>
 800427c:	2300      	movs	r3, #0
 800427e:	77fb      	strb	r3, [r7, #31]
 8004280:	e00d      	b.n	800429e <UART_SetConfig+0x346>
 8004282:	2302      	movs	r3, #2
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e00a      	b.n	800429e <UART_SetConfig+0x346>
 8004288:	2304      	movs	r3, #4
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e007      	b.n	800429e <UART_SetConfig+0x346>
 800428e:	2308      	movs	r3, #8
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e004      	b.n	800429e <UART_SetConfig+0x346>
 8004294:	2310      	movs	r3, #16
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e001      	b.n	800429e <UART_SetConfig+0x346>
 800429a:	2310      	movs	r3, #16
 800429c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a6:	d15b      	bne.n	8004360 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80042a8:	7ffb      	ldrb	r3, [r7, #31]
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d827      	bhi.n	80042fe <UART_SetConfig+0x3a6>
 80042ae:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <UART_SetConfig+0x35c>)
 80042b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b4:	080042d9 	.word	0x080042d9
 80042b8:	080042e1 	.word	0x080042e1
 80042bc:	080042e9 	.word	0x080042e9
 80042c0:	080042ff 	.word	0x080042ff
 80042c4:	080042ef 	.word	0x080042ef
 80042c8:	080042ff 	.word	0x080042ff
 80042cc:	080042ff 	.word	0x080042ff
 80042d0:	080042ff 	.word	0x080042ff
 80042d4:	080042f7 	.word	0x080042f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d8:	f7fe fec6 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 80042dc:	61b8      	str	r0, [r7, #24]
        break;
 80042de:	e013      	b.n	8004308 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042e0:	f7fe fed6 	bl	8003090 <HAL_RCC_GetPCLK2Freq>
 80042e4:	61b8      	str	r0, [r7, #24]
        break;
 80042e6:	e00f      	b.n	8004308 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e8:	4b4b      	ldr	r3, [pc, #300]	; (8004418 <UART_SetConfig+0x4c0>)
 80042ea:	61bb      	str	r3, [r7, #24]
        break;
 80042ec:	e00c      	b.n	8004308 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ee:	f7fe fdcd 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 80042f2:	61b8      	str	r0, [r7, #24]
        break;
 80042f4:	e008      	b.n	8004308 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042fa:	61bb      	str	r3, [r7, #24]
        break;
 80042fc:	e004      	b.n	8004308 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	77bb      	strb	r3, [r7, #30]
        break;
 8004306:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d074      	beq.n	80043f8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	005a      	lsls	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	085b      	lsrs	r3, r3, #1
 8004318:	441a      	add	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004322:	b29b      	uxth	r3, r3
 8004324:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	2b0f      	cmp	r3, #15
 800432a:	d916      	bls.n	800435a <UART_SetConfig+0x402>
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004332:	d212      	bcs.n	800435a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	b29b      	uxth	r3, r3
 8004338:	f023 030f 	bic.w	r3, r3, #15
 800433c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	b29b      	uxth	r3, r3
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	b29a      	uxth	r2, r3
 800434a:	89fb      	ldrh	r3, [r7, #14]
 800434c:	4313      	orrs	r3, r2
 800434e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	89fa      	ldrh	r2, [r7, #14]
 8004356:	60da      	str	r2, [r3, #12]
 8004358:	e04e      	b.n	80043f8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	77bb      	strb	r3, [r7, #30]
 800435e:	e04b      	b.n	80043f8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004360:	7ffb      	ldrb	r3, [r7, #31]
 8004362:	2b08      	cmp	r3, #8
 8004364:	d827      	bhi.n	80043b6 <UART_SetConfig+0x45e>
 8004366:	a201      	add	r2, pc, #4	; (adr r2, 800436c <UART_SetConfig+0x414>)
 8004368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436c:	08004391 	.word	0x08004391
 8004370:	08004399 	.word	0x08004399
 8004374:	080043a1 	.word	0x080043a1
 8004378:	080043b7 	.word	0x080043b7
 800437c:	080043a7 	.word	0x080043a7
 8004380:	080043b7 	.word	0x080043b7
 8004384:	080043b7 	.word	0x080043b7
 8004388:	080043b7 	.word	0x080043b7
 800438c:	080043af 	.word	0x080043af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004390:	f7fe fe6a 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 8004394:	61b8      	str	r0, [r7, #24]
        break;
 8004396:	e013      	b.n	80043c0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004398:	f7fe fe7a 	bl	8003090 <HAL_RCC_GetPCLK2Freq>
 800439c:	61b8      	str	r0, [r7, #24]
        break;
 800439e:	e00f      	b.n	80043c0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043a0:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <UART_SetConfig+0x4c0>)
 80043a2:	61bb      	str	r3, [r7, #24]
        break;
 80043a4:	e00c      	b.n	80043c0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043a6:	f7fe fd71 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 80043aa:	61b8      	str	r0, [r7, #24]
        break;
 80043ac:	e008      	b.n	80043c0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b2:	61bb      	str	r3, [r7, #24]
        break;
 80043b4:	e004      	b.n	80043c0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	77bb      	strb	r3, [r7, #30]
        break;
 80043be:	bf00      	nop
    }

    if (pclk != 0U)
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d018      	beq.n	80043f8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	085a      	lsrs	r2, r3, #1
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	441a      	add	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	b29b      	uxth	r3, r3
 80043da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	2b0f      	cmp	r3, #15
 80043e0:	d908      	bls.n	80043f4 <UART_SetConfig+0x49c>
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e8:	d204      	bcs.n	80043f4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	e001      	b.n	80043f8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004404:	7fbb      	ldrb	r3, [r7, #30]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3720      	adds	r7, #32
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40007c00 	.word	0x40007c00
 8004414:	40023800 	.word	0x40023800
 8004418:	00f42400 	.word	0x00f42400

0800441c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01a      	beq.n	8004532 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800451a:	d10a      	bne.n	8004532 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	605a      	str	r2, [r3, #4]
  }
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af02      	add	r7, sp, #8
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004570:	f7fb ffec 	bl	800054c <HAL_GetTick>
 8004574:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b08      	cmp	r3, #8
 8004582:	d10e      	bne.n	80045a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f817 	bl	80045c6 <UART_WaitOnFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e00d      	b.n	80045be <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	603b      	str	r3, [r7, #0]
 80045d2:	4613      	mov	r3, r2
 80045d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d6:	e05e      	b.n	8004696 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045de:	d05a      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e0:	f7fb ffb4 	bl	800054c <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d302      	bcc.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d11b      	bne.n	800462e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004604:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0201 	bic.w	r2, r2, #1
 8004614:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e043      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d02c      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464a:	d124      	bne.n	8004696 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004654:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004664:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0201 	bic.w	r2, r2, #1
 8004674:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2220      	movs	r2, #32
 800467a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2220      	movs	r2, #32
 8004686:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e00f      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69da      	ldr	r2, [r3, #28]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4013      	ands	r3, r2
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	bf0c      	ite	eq
 80046a6:	2301      	moveq	r3, #1
 80046a8:	2300      	movne	r3, #0
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	461a      	mov	r2, r3
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d091      	beq.n	80045d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046c0:	b084      	sub	sp, #16
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	f107 001c 	add.w	r0, r7, #28
 80046ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d120      	bne.n	800471a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	4b20      	ldr	r3, [pc, #128]	; (800476c <USB_CoreInit+0xac>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d105      	bne.n	800470e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f001 fad6 	bl	8005cc0 <USB_CoreReset>
 8004714:	4603      	mov	r3, r0
 8004716:	73fb      	strb	r3, [r7, #15]
 8004718:	e010      	b.n	800473c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f001 faca 	bl	8005cc0 <USB_CoreReset>
 800472c:	4603      	mov	r3, r0
 800472e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	2b01      	cmp	r3, #1
 8004740:	d10b      	bne.n	800475a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f043 0206 	orr.w	r2, r3, #6
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f043 0220 	orr.w	r2, r3, #32
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004766:	b004      	add	sp, #16
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	ffbdffbf 	.word	0xffbdffbf

08004770 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	4613      	mov	r3, r2
 800477c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d165      	bne.n	8004850 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4a41      	ldr	r2, [pc, #260]	; (800488c <USB_SetTurnaroundTime+0x11c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d906      	bls.n	800479a <USB_SetTurnaroundTime+0x2a>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4a40      	ldr	r2, [pc, #256]	; (8004890 <USB_SetTurnaroundTime+0x120>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d202      	bcs.n	800479a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004794:	230f      	movs	r3, #15
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	e062      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4a3c      	ldr	r2, [pc, #240]	; (8004890 <USB_SetTurnaroundTime+0x120>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d306      	bcc.n	80047b0 <USB_SetTurnaroundTime+0x40>
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4a3b      	ldr	r2, [pc, #236]	; (8004894 <USB_SetTurnaroundTime+0x124>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d202      	bcs.n	80047b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80047aa:	230e      	movs	r3, #14
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	e057      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4a38      	ldr	r2, [pc, #224]	; (8004894 <USB_SetTurnaroundTime+0x124>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d306      	bcc.n	80047c6 <USB_SetTurnaroundTime+0x56>
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	4a37      	ldr	r2, [pc, #220]	; (8004898 <USB_SetTurnaroundTime+0x128>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d202      	bcs.n	80047c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80047c0:	230d      	movs	r3, #13
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	e04c      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	4a33      	ldr	r2, [pc, #204]	; (8004898 <USB_SetTurnaroundTime+0x128>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d306      	bcc.n	80047dc <USB_SetTurnaroundTime+0x6c>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	4a32      	ldr	r2, [pc, #200]	; (800489c <USB_SetTurnaroundTime+0x12c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d802      	bhi.n	80047dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80047d6:	230c      	movs	r3, #12
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	e041      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4a2f      	ldr	r2, [pc, #188]	; (800489c <USB_SetTurnaroundTime+0x12c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d906      	bls.n	80047f2 <USB_SetTurnaroundTime+0x82>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4a2e      	ldr	r2, [pc, #184]	; (80048a0 <USB_SetTurnaroundTime+0x130>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d802      	bhi.n	80047f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80047ec:	230b      	movs	r3, #11
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	e036      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	4a2a      	ldr	r2, [pc, #168]	; (80048a0 <USB_SetTurnaroundTime+0x130>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d906      	bls.n	8004808 <USB_SetTurnaroundTime+0x98>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	4a29      	ldr	r2, [pc, #164]	; (80048a4 <USB_SetTurnaroundTime+0x134>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d802      	bhi.n	8004808 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004802:	230a      	movs	r3, #10
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	e02b      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4a26      	ldr	r2, [pc, #152]	; (80048a4 <USB_SetTurnaroundTime+0x134>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d906      	bls.n	800481e <USB_SetTurnaroundTime+0xae>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4a25      	ldr	r2, [pc, #148]	; (80048a8 <USB_SetTurnaroundTime+0x138>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d202      	bcs.n	800481e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004818:	2309      	movs	r3, #9
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e020      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	4a21      	ldr	r2, [pc, #132]	; (80048a8 <USB_SetTurnaroundTime+0x138>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d306      	bcc.n	8004834 <USB_SetTurnaroundTime+0xc4>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4a20      	ldr	r2, [pc, #128]	; (80048ac <USB_SetTurnaroundTime+0x13c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d802      	bhi.n	8004834 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800482e:	2308      	movs	r3, #8
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	e015      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4a1d      	ldr	r2, [pc, #116]	; (80048ac <USB_SetTurnaroundTime+0x13c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d906      	bls.n	800484a <USB_SetTurnaroundTime+0xda>
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4a1c      	ldr	r2, [pc, #112]	; (80048b0 <USB_SetTurnaroundTime+0x140>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d202      	bcs.n	800484a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004844:	2307      	movs	r3, #7
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	e00a      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800484a:	2306      	movs	r3, #6
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	e007      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d102      	bne.n	800485c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004856:	2309      	movs	r3, #9
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	e001      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800485c:	2309      	movs	r3, #9
 800485e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	029b      	lsls	r3, r3, #10
 8004874:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004878:	431a      	orrs	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	00d8acbf 	.word	0x00d8acbf
 8004890:	00e4e1c0 	.word	0x00e4e1c0
 8004894:	00f42400 	.word	0x00f42400
 8004898:	01067380 	.word	0x01067380
 800489c:	011a499f 	.word	0x011a499f
 80048a0:	01312cff 	.word	0x01312cff
 80048a4:	014ca43f 	.word	0x014ca43f
 80048a8:	016e3600 	.word	0x016e3600
 80048ac:	01a6ab1f 	.word	0x01a6ab1f
 80048b0:	01e84800 	.word	0x01e84800

080048b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f043 0201 	orr.w	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f023 0201 	bic.w	r2, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d106      	bne.n	8004924 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60da      	str	r2, [r3, #12]
 8004922:	e00b      	b.n	800493c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	60da      	str	r2, [r3, #12]
 8004936:	e001      	b.n	800493c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e003      	b.n	8004944 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800493c:	2032      	movs	r0, #50	; 0x32
 800493e:	f7fb fe11 	bl	8000564 <HAL_Delay>

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800494c:	b084      	sub	sp, #16
 800494e:	b580      	push	{r7, lr}
 8004950:	b086      	sub	sp, #24
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800495a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004966:	2300      	movs	r3, #0
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	e009      	b.n	8004980 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	3340      	adds	r3, #64	; 0x40
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	2200      	movs	r2, #0
 8004978:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	3301      	adds	r3, #1
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b0e      	cmp	r3, #14
 8004984:	d9f2      	bls.n	800496c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d11c      	bne.n	80049c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800499a:	f043 0302 	orr.w	r3, r3, #2
 800499e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	e005      	b.n	80049d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049d8:	461a      	mov	r2, r3
 80049da:	2300      	movs	r3, #0
 80049dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e4:	4619      	mov	r1, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ec:	461a      	mov	r2, r3
 80049ee:	680b      	ldr	r3, [r1, #0]
 80049f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d10c      	bne.n	8004a12 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d104      	bne.n	8004a08 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049fe:	2100      	movs	r1, #0
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f959 	bl	8004cb8 <USB_SetDevSpeed>
 8004a06:	e018      	b.n	8004a3a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a08:	2101      	movs	r1, #1
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f954 	bl	8004cb8 <USB_SetDevSpeed>
 8004a10:	e013      	b.n	8004a3a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d10c      	bne.n	8004a32 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d104      	bne.n	8004a28 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a1e:	2100      	movs	r1, #0
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f949 	bl	8004cb8 <USB_SetDevSpeed>
 8004a26:	e008      	b.n	8004a3a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a28:	2101      	movs	r1, #1
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f944 	bl	8004cb8 <USB_SetDevSpeed>
 8004a30:	e003      	b.n	8004a3a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a32:	2103      	movs	r1, #3
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f93f 	bl	8004cb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a3a:	2110      	movs	r1, #16
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f8f3 	bl	8004c28 <USB_FlushTxFifo>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f911 	bl	8004c74 <USB_FlushRxFifo>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a62:	461a      	mov	r2, r3
 8004a64:	2300      	movs	r3, #0
 8004a66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2300      	movs	r3, #0
 8004a72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a80:	2300      	movs	r3, #0
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	e043      	b.n	8004b0e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a9c:	d118      	bne.n	8004ad0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	e013      	b.n	8004ae2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e008      	b.n	8004ae2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004adc:	461a      	mov	r2, r3
 8004ade:	2300      	movs	r3, #0
 8004ae0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aee:	461a      	mov	r2, r3
 8004af0:	2300      	movs	r3, #0
 8004af2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b00:	461a      	mov	r2, r3
 8004b02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d3b7      	bcc.n	8004a86 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b16:	2300      	movs	r3, #0
 8004b18:	613b      	str	r3, [r7, #16]
 8004b1a:	e043      	b.n	8004ba4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b32:	d118      	bne.n	8004b66 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b46:	461a      	mov	r2, r3
 8004b48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	e013      	b.n	8004b78 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	e008      	b.n	8004b78 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b72:	461a      	mov	r2, r3
 8004b74:	2300      	movs	r3, #0
 8004b76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b84:	461a      	mov	r2, r3
 8004b86:	2300      	movs	r3, #0
 8004b88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b96:	461a      	mov	r2, r3
 8004b98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d3b7      	bcc.n	8004b1c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bbe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004bcc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	f043 0210 	orr.w	r2, r3, #16
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699a      	ldr	r2, [r3, #24]
 8004be4:	4b0e      	ldr	r3, [pc, #56]	; (8004c20 <USB_DevInit+0x2d4>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f043 0208 	orr.w	r2, r3, #8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d105      	bne.n	8004c10 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699a      	ldr	r2, [r3, #24]
 8004c08:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <USB_DevInit+0x2d8>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c1c:	b004      	add	sp, #16
 8004c1e:	4770      	bx	lr
 8004c20:	803c3800 	.word	0x803c3800
 8004c24:	40000004 	.word	0x40000004

08004c28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	019b      	lsls	r3, r3, #6
 8004c3a:	f043 0220 	orr.w	r2, r3, #32
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3301      	adds	r3, #1
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4a09      	ldr	r2, [pc, #36]	; (8004c70 <USB_FlushTxFifo+0x48>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d901      	bls.n	8004c54 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e006      	b.n	8004c62 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	f003 0320 	and.w	r3, r3, #32
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d0f0      	beq.n	8004c42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	00030d40 	.word	0x00030d40

08004c74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2210      	movs	r2, #16
 8004c84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4a09      	ldr	r2, [pc, #36]	; (8004cb4 <USB_FlushRxFifo+0x40>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d901      	bls.n	8004c98 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e006      	b.n	8004ca6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	2b10      	cmp	r3, #16
 8004ca2:	d0f0      	beq.n	8004c86 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	00030d40 	.word	0x00030d40

08004cb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	68f9      	ldr	r1, [r7, #12]
 8004cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b087      	sub	sp, #28
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 0306 	and.w	r3, r3, #6
 8004d02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d102      	bne.n	8004d10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	75fb      	strb	r3, [r7, #23]
 8004d0e:	e00a      	b.n	8004d26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d002      	beq.n	8004d1c <USB_GetDevSpeed+0x32>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b06      	cmp	r3, #6
 8004d1a:	d102      	bne.n	8004d22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	75fb      	strb	r3, [r7, #23]
 8004d20:	e001      	b.n	8004d26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d22:	230f      	movs	r3, #15
 8004d24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	785b      	ldrb	r3, [r3, #1]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d139      	bne.n	8004dc4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	2101      	movs	r1, #1
 8004d62:	fa01 f303 	lsl.w	r3, r1, r3
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	68f9      	ldr	r1, [r7, #12]
 8004d6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d153      	bne.n	8004e30 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	78db      	ldrb	r3, [r3, #3]
 8004da2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004da4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	059b      	lsls	r3, r3, #22
 8004daa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004dac:	431a      	orrs	r2, r3
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	0159      	lsls	r1, r3, #5
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	440b      	add	r3, r1
 8004db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4b20      	ldr	r3, [pc, #128]	; (8004e40 <USB_ActivateEndpoint+0x10c>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	600b      	str	r3, [r1, #0]
 8004dc2:	e035      	b.n	8004e30 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dda:	041b      	lsls	r3, r3, #16
 8004ddc:	68f9      	ldr	r1, [r7, #12]
 8004dde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004de2:	4313      	orrs	r3, r2
 8004de4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d119      	bne.n	8004e30 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	78db      	ldrb	r3, [r3, #3]
 8004e16:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e18:	430b      	orrs	r3, r1
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	0159      	lsls	r1, r3, #5
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	440b      	add	r3, r1
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <USB_ActivateEndpoint+0x10c>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	10008000 	.word	0x10008000

08004e44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	785b      	ldrb	r3, [r3, #1]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d161      	bne.n	8004f24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e76:	d11f      	bne.n	8004eb8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	0151      	lsls	r1, r2, #5
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	440a      	add	r2, r1
 8004eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	2101      	movs	r1, #1
 8004eca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	68f9      	ldr	r1, [r7, #12]
 8004ed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ed8:	4013      	ands	r3, r2
 8004eda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	f003 030f 	and.w	r3, r3, #15
 8004eec:	2101      	movs	r1, #1
 8004eee:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	68f9      	ldr	r1, [r7, #12]
 8004ef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004efc:	4013      	ands	r3, r2
 8004efe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	0159      	lsls	r1, r3, #5
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	440b      	add	r3, r1
 8004f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4b35      	ldr	r3, [pc, #212]	; (8004ff4 <USB_DeactivateEndpoint+0x1b0>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	600b      	str	r3, [r1, #0]
 8004f22:	e060      	b.n	8004fe6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f3a:	d11f      	bne.n	8004f7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	0151      	lsls	r1, r2, #5
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	440a      	add	r2, r1
 8004f52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	0151      	lsls	r1, r2, #5
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	440a      	add	r2, r1
 8004f72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	f003 030f 	and.w	r3, r3, #15
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f92:	041b      	lsls	r3, r3, #16
 8004f94:	43db      	mvns	r3, r3
 8004f96:	68f9      	ldr	r1, [r7, #12]
 8004f98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa6:	69da      	ldr	r2, [r3, #28]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	f003 030f 	and.w	r3, r3, #15
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb6:	041b      	lsls	r3, r3, #16
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	68f9      	ldr	r1, [r7, #12]
 8004fbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	0159      	lsls	r1, r3, #5
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	440b      	add	r3, r1
 8004fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <USB_DeactivateEndpoint+0x1b4>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	ec337800 	.word	0xec337800
 8004ff8:	eff37800 	.word	0xeff37800

08004ffc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08a      	sub	sp, #40	; 0x28
 8005000:	af02      	add	r7, sp, #8
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	4613      	mov	r3, r2
 8005008:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	785b      	ldrb	r3, [r3, #1]
 8005018:	2b01      	cmp	r3, #1
 800501a:	f040 8163 	bne.w	80052e4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d132      	bne.n	800508c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	0159      	lsls	r1, r3, #5
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	440b      	add	r3, r1
 800503c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005040:	4619      	mov	r1, r3
 8005042:	4ba5      	ldr	r3, [pc, #660]	; (80052d8 <USB_EPStartXfer+0x2dc>)
 8005044:	4013      	ands	r3, r2
 8005046:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	69fa      	ldr	r2, [r7, #28]
 800505c:	440a      	add	r2, r1
 800505e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005062:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005066:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	0159      	lsls	r1, r3, #5
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	440b      	add	r3, r1
 800507e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005082:	4619      	mov	r1, r3
 8005084:	4b95      	ldr	r3, [pc, #596]	; (80052dc <USB_EPStartXfer+0x2e0>)
 8005086:	4013      	ands	r3, r2
 8005088:	610b      	str	r3, [r1, #16]
 800508a:	e074      	b.n	8005176 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	0159      	lsls	r1, r3, #5
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	440b      	add	r3, r1
 80050a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a6:	4619      	mov	r1, r3
 80050a8:	4b8c      	ldr	r3, [pc, #560]	; (80052dc <USB_EPStartXfer+0x2e0>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	0159      	lsls	r1, r3, #5
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	440b      	add	r3, r1
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	4619      	mov	r1, r3
 80050ca:	4b83      	ldr	r3, [pc, #524]	; (80052d8 <USB_EPStartXfer+0x2dc>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	6959      	ldr	r1, [r3, #20]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	440b      	add	r3, r1
 80050e8:	1e59      	subs	r1, r3, #1
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80050f2:	04d9      	lsls	r1, r3, #19
 80050f4:	4b7a      	ldr	r3, [pc, #488]	; (80052e0 <USB_EPStartXfer+0x2e4>)
 80050f6:	400b      	ands	r3, r1
 80050f8:	69b9      	ldr	r1, [r7, #24]
 80050fa:	0148      	lsls	r0, r1, #5
 80050fc:	69f9      	ldr	r1, [r7, #28]
 80050fe:	4401      	add	r1, r0
 8005100:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005104:	4313      	orrs	r3, r2
 8005106:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800511e:	69b9      	ldr	r1, [r7, #24]
 8005120:	0148      	lsls	r0, r1, #5
 8005122:	69f9      	ldr	r1, [r7, #28]
 8005124:	4401      	add	r1, r0
 8005126:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800512a:	4313      	orrs	r3, r2
 800512c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	78db      	ldrb	r3, [r3, #3]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d11f      	bne.n	8005176 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	0151      	lsls	r1, r2, #5
 8005148:	69fa      	ldr	r2, [r7, #28]
 800514a:	440a      	add	r2, r1
 800514c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005150:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005154:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	0151      	lsls	r1, r2, #5
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	440a      	add	r2, r1
 800516c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005170:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005174:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005176:	79fb      	ldrb	r3, [r7, #7]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d14b      	bne.n	8005214 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d009      	beq.n	8005198 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005190:	461a      	mov	r2, r3
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	78db      	ldrb	r3, [r3, #3]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d128      	bne.n	80051f2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d110      	bne.n	80051d2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	0151      	lsls	r1, r2, #5
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	440a      	add	r2, r1
 80051c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	e00f      	b.n	80051f2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	0151      	lsls	r1, r2, #5
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	440a      	add	r2, r1
 80051e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	0151      	lsls	r1, r2, #5
 8005204:	69fa      	ldr	r2, [r7, #28]
 8005206:	440a      	add	r2, r1
 8005208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800520c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	e133      	b.n	800547c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005232:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	78db      	ldrb	r3, [r3, #3]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d015      	beq.n	8005268 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 811b 	beq.w	800547c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	2101      	movs	r1, #1
 8005258:	fa01 f303 	lsl.w	r3, r1, r3
 800525c:	69f9      	ldr	r1, [r7, #28]
 800525e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005262:	4313      	orrs	r3, r2
 8005264:	634b      	str	r3, [r1, #52]	; 0x34
 8005266:	e109      	b.n	800547c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d110      	bne.n	800529a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	0151      	lsls	r1, r2, #5
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	440a      	add	r2, r1
 800528e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005292:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	e00f      	b.n	80052ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	0151      	lsls	r1, r2, #5
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	440a      	add	r2, r1
 80052b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	68d9      	ldr	r1, [r3, #12]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	781a      	ldrb	r2, [r3, #0]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	b298      	uxth	r0, r3
 80052c8:	79fb      	ldrb	r3, [r7, #7]
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	4603      	mov	r3, r0
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 fa38 	bl	8005744 <USB_WritePacket>
 80052d4:	e0d2      	b.n	800547c <USB_EPStartXfer+0x480>
 80052d6:	bf00      	nop
 80052d8:	e007ffff 	.word	0xe007ffff
 80052dc:	fff80000 	.word	0xfff80000
 80052e0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	0159      	lsls	r1, r3, #5
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	440b      	add	r3, r1
 80052fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fe:	4619      	mov	r1, r3
 8005300:	4b61      	ldr	r3, [pc, #388]	; (8005488 <USB_EPStartXfer+0x48c>)
 8005302:	4013      	ands	r3, r2
 8005304:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	0159      	lsls	r1, r3, #5
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	440b      	add	r3, r1
 800531c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005320:	4619      	mov	r1, r3
 8005322:	4b5a      	ldr	r3, [pc, #360]	; (800548c <USB_EPStartXfer+0x490>)
 8005324:	4013      	ands	r3, r2
 8005326:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d123      	bne.n	8005378 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005346:	69b9      	ldr	r1, [r7, #24]
 8005348:	0148      	lsls	r0, r1, #5
 800534a:	69f9      	ldr	r1, [r7, #28]
 800534c:	4401      	add	r1, r0
 800534e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005352:	4313      	orrs	r3, r2
 8005354:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	0151      	lsls	r1, r2, #5
 8005368:	69fa      	ldr	r2, [r7, #28]
 800536a:	440a      	add	r2, r1
 800536c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005370:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005374:	6113      	str	r3, [r2, #16]
 8005376:	e033      	b.n	80053e0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	4413      	add	r3, r2
 8005382:	1e5a      	subs	r2, r3, #1
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	8afb      	ldrh	r3, [r7, #22]
 800539e:	04d9      	lsls	r1, r3, #19
 80053a0:	4b3b      	ldr	r3, [pc, #236]	; (8005490 <USB_EPStartXfer+0x494>)
 80053a2:	400b      	ands	r3, r1
 80053a4:	69b9      	ldr	r1, [r7, #24]
 80053a6:	0148      	lsls	r0, r1, #5
 80053a8:	69f9      	ldr	r1, [r7, #28]
 80053aa:	4401      	add	r1, r0
 80053ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053b0:	4313      	orrs	r3, r2
 80053b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	8af9      	ldrh	r1, [r7, #22]
 80053c8:	fb01 f303 	mul.w	r3, r1, r3
 80053cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d0:	69b9      	ldr	r1, [r7, #24]
 80053d2:	0148      	lsls	r0, r1, #5
 80053d4:	69f9      	ldr	r1, [r7, #28]
 80053d6:	4401      	add	r1, r0
 80053d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053dc:	4313      	orrs	r3, r2
 80053de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053e0:	79fb      	ldrb	r3, [r7, #7]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d10d      	bne.n	8005402 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d009      	beq.n	8005402 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	68d9      	ldr	r1, [r3, #12]
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fe:	460a      	mov	r2, r1
 8005400:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	78db      	ldrb	r3, [r3, #3]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d128      	bne.n	800545c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005416:	2b00      	cmp	r3, #0
 8005418:	d110      	bne.n	800543c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	0151      	lsls	r1, r2, #5
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	440a      	add	r2, r1
 8005430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005434:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	e00f      	b.n	800545c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	0151      	lsls	r1, r2, #5
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	440a      	add	r2, r1
 8005452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800545a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	69fa      	ldr	r2, [r7, #28]
 8005470:	440a      	add	r2, r1
 8005472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005476:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800547a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	fff80000 	.word	0xfff80000
 800548c:	e007ffff 	.word	0xe007ffff
 8005490:	1ff80000 	.word	0x1ff80000

08005494 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	4613      	mov	r3, r2
 80054a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	f040 80cd 	bne.w	8005650 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d132      	bne.n	8005524 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	0159      	lsls	r1, r3, #5
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	440b      	add	r3, r1
 80054d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d8:	4619      	mov	r1, r3
 80054da:	4b98      	ldr	r3, [pc, #608]	; (800573c <USB_EP0StartXfer+0x2a8>)
 80054dc:	4013      	ands	r3, r2
 80054de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550c:	691a      	ldr	r2, [r3, #16]
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	0159      	lsls	r1, r3, #5
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	440b      	add	r3, r1
 8005516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551a:	4619      	mov	r1, r3
 800551c:	4b88      	ldr	r3, [pc, #544]	; (8005740 <USB_EP0StartXfer+0x2ac>)
 800551e:	4013      	ands	r3, r2
 8005520:	610b      	str	r3, [r1, #16]
 8005522:	e04e      	b.n	80055c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	691a      	ldr	r2, [r3, #16]
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	0159      	lsls	r1, r3, #5
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	440b      	add	r3, r1
 800553a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553e:	4619      	mov	r1, r3
 8005540:	4b7f      	ldr	r3, [pc, #508]	; (8005740 <USB_EP0StartXfer+0x2ac>)
 8005542:	4013      	ands	r3, r2
 8005544:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005552:	691a      	ldr	r2, [r3, #16]
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	0159      	lsls	r1, r3, #5
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	440b      	add	r3, r1
 800555c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005560:	4619      	mov	r1, r3
 8005562:	4b76      	ldr	r3, [pc, #472]	; (800573c <USB_EP0StartXfer+0x2a8>)
 8005564:	4013      	ands	r3, r2
 8005566:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	695a      	ldr	r2, [r3, #20]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	429a      	cmp	r2, r3
 8005572:	d903      	bls.n	800557c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	0151      	lsls	r1, r2, #5
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	440a      	add	r2, r1
 8005592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005596:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800559a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	691a      	ldr	r2, [r3, #16]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055b2:	6939      	ldr	r1, [r7, #16]
 80055b4:	0148      	lsls	r0, r1, #5
 80055b6:	6979      	ldr	r1, [r7, #20]
 80055b8:	4401      	add	r1, r0
 80055ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80055be:	4313      	orrs	r3, r2
 80055c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d11e      	bne.n	8005606 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d009      	beq.n	80055e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055dc:	461a      	mov	r2, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	0151      	lsls	r1, r2, #5
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	440a      	add	r2, r1
 80055fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	e092      	b.n	800572c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	0151      	lsls	r1, r2, #5
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	440a      	add	r2, r1
 800561c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005620:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005624:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d07e      	beq.n	800572c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	2101      	movs	r1, #1
 8005640:	fa01 f303 	lsl.w	r3, r1, r3
 8005644:	6979      	ldr	r1, [r7, #20]
 8005646:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800564a:	4313      	orrs	r3, r2
 800564c:	634b      	str	r3, [r1, #52]	; 0x34
 800564e:	e06d      	b.n	800572c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565c:	691a      	ldr	r2, [r3, #16]
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	0159      	lsls	r1, r3, #5
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	440b      	add	r3, r1
 8005666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566a:	4619      	mov	r1, r3
 800566c:	4b34      	ldr	r3, [pc, #208]	; (8005740 <USB_EP0StartXfer+0x2ac>)
 800566e:	4013      	ands	r3, r2
 8005670:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567e:	691a      	ldr	r2, [r3, #16]
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	0159      	lsls	r1, r3, #5
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	440b      	add	r3, r1
 8005688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568c:	4619      	mov	r1, r3
 800568e:	4b2b      	ldr	r3, [pc, #172]	; (800573c <USB_EP0StartXfer+0x2a8>)
 8005690:	4013      	ands	r3, r2
 8005692:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	0151      	lsls	r1, r2, #5
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	440a      	add	r2, r1
 80056ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d0:	691a      	ldr	r2, [r3, #16]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056da:	6939      	ldr	r1, [r7, #16]
 80056dc:	0148      	lsls	r0, r1, #5
 80056de:	6979      	ldr	r1, [r7, #20]
 80056e0:	4401      	add	r1, r0
 80056e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056e6:	4313      	orrs	r3, r2
 80056e8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d10d      	bne.n	800570c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d009      	beq.n	800570c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	68d9      	ldr	r1, [r3, #12]
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005708:	460a      	mov	r2, r1
 800570a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	440a      	add	r2, r1
 8005722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005726:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800572a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	371c      	adds	r7, #28
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	e007ffff 	.word	0xe007ffff
 8005740:	fff80000 	.word	0xfff80000

08005744 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005744:	b480      	push	{r7}
 8005746:	b089      	sub	sp, #36	; 0x24
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	4611      	mov	r1, r2
 8005750:	461a      	mov	r2, r3
 8005752:	460b      	mov	r3, r1
 8005754:	71fb      	strb	r3, [r7, #7]
 8005756:	4613      	mov	r3, r2
 8005758:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005762:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005766:	2b00      	cmp	r3, #0
 8005768:	d11a      	bne.n	80057a0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800576a:	88bb      	ldrh	r3, [r7, #4]
 800576c:	3303      	adds	r3, #3
 800576e:	089b      	lsrs	r3, r3, #2
 8005770:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005772:	2300      	movs	r3, #0
 8005774:	61bb      	str	r3, [r7, #24]
 8005776:	e00f      	b.n	8005798 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	031a      	lsls	r2, r3, #12
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	4413      	add	r3, r2
 8005780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005784:	461a      	mov	r2, r3
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	3304      	adds	r3, #4
 8005790:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	3301      	adds	r3, #1
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	429a      	cmp	r2, r3
 800579e:	d3eb      	bcc.n	8005778 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3724      	adds	r7, #36	; 0x24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b089      	sub	sp, #36	; 0x24
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	4613      	mov	r3, r2
 80057ba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	3303      	adds	r3, #3
 80057c8:	089b      	lsrs	r3, r3, #2
 80057ca:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80057cc:	2300      	movs	r3, #0
 80057ce:	61bb      	str	r3, [r7, #24]
 80057d0:	e00b      	b.n	80057ea <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	601a      	str	r2, [r3, #0]
    pDest++;
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	3304      	adds	r3, #4
 80057e2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	3301      	adds	r3, #1
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d3ef      	bcc.n	80057d2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80057f2:	69fb      	ldr	r3, [r7, #28]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3724      	adds	r7, #36	; 0x24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	785b      	ldrb	r3, [r3, #1]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d12c      	bne.n	8005876 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	db12      	blt.n	8005854 <USB_EPSetStall+0x54>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00f      	beq.n	8005854 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	440a      	add	r2, r1
 800584a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005852:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	0151      	lsls	r1, r2, #5
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	440a      	add	r2, r1
 800586a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800586e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	e02b      	b.n	80058ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	db12      	blt.n	80058ae <USB_EPSetStall+0xae>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00f      	beq.n	80058ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	0151      	lsls	r1, r2, #5
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	785b      	ldrb	r3, [r3, #1]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d128      	bne.n	800594a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005912:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005916:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	78db      	ldrb	r3, [r3, #3]
 800591c:	2b03      	cmp	r3, #3
 800591e:	d003      	beq.n	8005928 <USB_EPClearStall+0x4c>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	78db      	ldrb	r3, [r3, #3]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d138      	bne.n	800599a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	e027      	b.n	800599a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	440a      	add	r2, r1
 8005960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005964:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005968:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	78db      	ldrb	r3, [r3, #3]
 800596e:	2b03      	cmp	r3, #3
 8005970:	d003      	beq.n	800597a <USB_EPClearStall+0x9e>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	78db      	ldrb	r3, [r3, #3]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d10f      	bne.n	800599a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	0151      	lsls	r1, r2, #5
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	440a      	add	r2, r1
 8005990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005998:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80059ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80059dc:	68f9      	ldr	r1, [r7, #12]
 80059de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059e2:	4313      	orrs	r3, r2
 80059e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a0e:	f023 0303 	bic.w	r3, r3, #3
 8005a12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a22:	f023 0302 	bic.w	r3, r3, #2
 8005a26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b085      	sub	sp, #20
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a50:	f023 0303 	bic.w	r3, r3, #3
 8005a54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a64:	f043 0302 	orr.w	r3, r3, #2
 8005a68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a90:	68fb      	ldr	r3, [r7, #12]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	0c1b      	lsrs	r3, r3, #16
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	4013      	ands	r3, r2
 8005af4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	b29b      	uxth	r3, r3
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b085      	sub	sp, #20
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b16:	78fb      	ldrb	r3, [r7, #3]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	4013      	ands	r3, r2
 8005b32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b34:	68bb      	ldr	r3, [r7, #8]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b087      	sub	sp, #28
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b64:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b66:	78fb      	ldrb	r3, [r7, #3]
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b72:	01db      	lsls	r3, r3, #7
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b7c:	78fb      	ldrb	r3, [r7, #3]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b90:	68bb      	ldr	r3, [r7, #8]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	f003 0301 	and.w	r3, r3, #1
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
	...

08005bbc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <USB_ActivateSetup+0x44>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	fffff800 	.word	0xfffff800

08005c04 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	333c      	adds	r3, #60	; 0x3c
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	4a26      	ldr	r2, [pc, #152]	; (8005cbc <USB_EP0_OutStart+0xb8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d90a      	bls.n	8005c3e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c38:	d101      	bne.n	8005c3e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	e037      	b.n	8005cae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c44:	461a      	mov	r2, r3
 8005c46:	2300      	movs	r3, #0
 8005c48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c6c:	f043 0318 	orr.w	r3, r3, #24
 8005c70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c80:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c84:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c86:	7afb      	ldrb	r3, [r7, #11]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d10f      	bne.n	8005cac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c92:	461a      	mov	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005caa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	4f54300a 	.word	0x4f54300a

08005cc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4a13      	ldr	r2, [pc, #76]	; (8005d24 <USB_CoreReset+0x64>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d901      	bls.n	8005cde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e01b      	b.n	8005d16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	daf2      	bge.n	8005ccc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f043 0201 	orr.w	r2, r3, #1
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4a09      	ldr	r2, [pc, #36]	; (8005d24 <USB_CoreReset+0x64>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d901      	bls.n	8005d08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e006      	b.n	8005d16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d0f0      	beq.n	8005cf6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	00030d40 	.word	0x00030d40

08005d28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d34:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d38:	f005 fce4 	bl	800b704 <malloc>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d105      	bne.n	8005d52 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e066      	b.n	8005e20 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	7c1b      	ldrb	r3, [r3, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d119      	bne.n	8005d96 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d66:	2202      	movs	r2, #2
 8005d68:	2181      	movs	r1, #129	; 0x81
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f005 f8d3 	bl	800af16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f005 f8c9 	bl	800af16 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2210      	movs	r2, #16
 8005d90:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005d94:	e016      	b.n	8005dc4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d96:	2340      	movs	r3, #64	; 0x40
 8005d98:	2202      	movs	r2, #2
 8005d9a:	2181      	movs	r1, #129	; 0x81
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f005 f8ba 	bl	800af16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005da8:	2340      	movs	r3, #64	; 0x40
 8005daa:	2202      	movs	r2, #2
 8005dac:	2101      	movs	r1, #1
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f005 f8b1 	bl	800af16 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2210      	movs	r2, #16
 8005dc0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	2203      	movs	r2, #3
 8005dc8:	2182      	movs	r1, #130	; 0x82
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f005 f8a3 	bl	800af16 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	7c1b      	ldrb	r3, [r3, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d109      	bne.n	8005e0e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e04:	2101      	movs	r1, #1
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f005 f974 	bl	800b0f4 <USBD_LL_PrepareReceive>
 8005e0c:	e007      	b.n	8005e1e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e14:	2340      	movs	r3, #64	; 0x40
 8005e16:	2101      	movs	r1, #1
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f005 f96b 	bl	800b0f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005e38:	2181      	movs	r1, #129	; 0x81
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f005 f891 	bl	800af62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005e46:	2101      	movs	r1, #1
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f005 f88a 	bl	800af62 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005e56:	2182      	movs	r1, #130	; 0x82
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f005 f882 	bl	800af62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00e      	beq.n	8005e96 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f005 fc43 	bl	800b714 <free>
    pdev->pClassData = NULL;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eb0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d03a      	beq.n	8005f40 <USBD_CDC_Setup+0xa0>
 8005eca:	2b20      	cmp	r3, #32
 8005ecc:	f040 8097 	bne.w	8005ffe <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	88db      	ldrh	r3, [r3, #6]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d029      	beq.n	8005f2c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	b25b      	sxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	da11      	bge.n	8005f06 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005eee:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	88d2      	ldrh	r2, [r2, #6]
 8005ef4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005ef6:	6939      	ldr	r1, [r7, #16]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	88db      	ldrh	r3, [r3, #6]
 8005efc:	461a      	mov	r2, r3
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f001 faa6 	bl	8007450 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005f04:	e082      	b.n	800600c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	785a      	ldrb	r2, [r3, #1]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	88db      	ldrh	r3, [r3, #6]
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005f1c:	6939      	ldr	r1, [r7, #16]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	88db      	ldrh	r3, [r3, #6]
 8005f22:	461a      	mov	r2, r3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f001 fabf 	bl	80074a8 <USBD_CtlPrepareRx>
    break;
 8005f2a:	e06f      	b.n	800600c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	7850      	ldrb	r0, [r2, #1]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	4798      	blx	r3
    break;
 8005f3e:	e065      	b.n	800600c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	785b      	ldrb	r3, [r3, #1]
 8005f44:	2b0b      	cmp	r3, #11
 8005f46:	d84f      	bhi.n	8005fe8 <USBD_CDC_Setup+0x148>
 8005f48:	a201      	add	r2, pc, #4	; (adr r2, 8005f50 <USBD_CDC_Setup+0xb0>)
 8005f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4e:	bf00      	nop
 8005f50:	08005f81 	.word	0x08005f81
 8005f54:	08005ff7 	.word	0x08005ff7
 8005f58:	08005fe9 	.word	0x08005fe9
 8005f5c:	08005fe9 	.word	0x08005fe9
 8005f60:	08005fe9 	.word	0x08005fe9
 8005f64:	08005fe9 	.word	0x08005fe9
 8005f68:	08005fe9 	.word	0x08005fe9
 8005f6c:	08005fe9 	.word	0x08005fe9
 8005f70:	08005fe9 	.word	0x08005fe9
 8005f74:	08005fe9 	.word	0x08005fe9
 8005f78:	08005fa9 	.word	0x08005fa9
 8005f7c:	08005fd1 	.word	0x08005fd1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d107      	bne.n	8005f9a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005f8a:	f107 030c 	add.w	r3, r7, #12
 8005f8e:	2202      	movs	r2, #2
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f001 fa5c 	bl	8007450 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005f98:	e030      	b.n	8005ffc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f001 f9e6 	bl	800736e <USBD_CtlError>
        ret = USBD_FAIL;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8005fa6:	e029      	b.n	8005ffc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d107      	bne.n	8005fc2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005fb2:	f107 030f 	add.w	r3, r7, #15
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f001 fa48 	bl	8007450 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005fc0:	e01c      	b.n	8005ffc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f001 f9d2 	bl	800736e <USBD_CtlError>
        ret = USBD_FAIL;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8005fce:	e015      	b.n	8005ffc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d00f      	beq.n	8005ffa <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f001 f9c6 	bl	800736e <USBD_CtlError>
        ret = USBD_FAIL;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005fe6:	e008      	b.n	8005ffa <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005fe8:	6839      	ldr	r1, [r7, #0]
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f001 f9bf 	bl	800736e <USBD_CtlError>
      ret = USBD_FAIL;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff4:	e002      	b.n	8005ffc <USBD_CDC_Setup+0x15c>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e008      	b.n	800600c <USBD_CDC_Setup+0x16c>
      break;
 8005ffa:	bf00      	nop
    }
    break;
 8005ffc:	e006      	b.n	800600c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005ffe:	6839      	ldr	r1, [r7, #0]
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 f9b4 	bl	800736e <USBD_CtlError>
    ret = USBD_FAIL;
 8006006:	2303      	movs	r3, #3
 8006008:	75fb      	strb	r3, [r7, #23]
    break;
 800600a:	bf00      	nop
  }

  return (uint8_t)ret;
 800600c:	7dfb      	ldrb	r3, [r7, #23]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop

08006018 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800602a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006036:	2303      	movs	r3, #3
 8006038:	e049      	b.n	80060ce <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006040:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006042:	78fa      	ldrb	r2, [r7, #3]
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	4613      	mov	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	440b      	add	r3, r1
 8006050:	3318      	adds	r3, #24
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d029      	beq.n	80060ac <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006058:	78fa      	ldrb	r2, [r7, #3]
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	4613      	mov	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	440b      	add	r3, r1
 8006066:	3318      	adds	r3, #24
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	78f9      	ldrb	r1, [r7, #3]
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	460b      	mov	r3, r1
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	1a5b      	subs	r3, r3, r1
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4403      	add	r3, r0
 8006078:	3344      	adds	r3, #68	; 0x44
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006080:	fb03 f301 	mul.w	r3, r3, r1
 8006084:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006086:	2b00      	cmp	r3, #0
 8006088:	d110      	bne.n	80060ac <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800608a:	78fa      	ldrb	r2, [r7, #3]
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	4613      	mov	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	440b      	add	r3, r1
 8006098:	3318      	adds	r3, #24
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800609e:	78f9      	ldrb	r1, [r7, #3]
 80060a0:	2300      	movs	r3, #0
 80060a2:	2200      	movs	r2, #0
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f005 f804 	bl	800b0b2 <USBD_LL_Transmit>
 80060aa:	e00f      	b.n	80060cc <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80060c8:	78fa      	ldrb	r2, [r7, #3]
 80060ca:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	460b      	mov	r3, r1
 80060e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e015      	b.n	8006124 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	4619      	mov	r1, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f005 f81a 	bl	800b136 <USBD_LL_GetRxDataSize>
 8006102:	4602      	mov	r2, r0
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800611e:	4611      	mov	r1, r2
 8006120:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800613a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d015      	beq.n	8006172 <USBD_CDC_EP0_RxReady+0x46>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800614c:	2bff      	cmp	r3, #255	; 0xff
 800614e:	d010      	beq.n	8006172 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800615e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006166:	b292      	uxth	r2, r2
 8006168:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	22ff      	movs	r2, #255	; 0xff
 800616e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2243      	movs	r2, #67	; 0x43
 8006188:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800618a:	4b03      	ldr	r3, [pc, #12]	; (8006198 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	20000090 	.word	0x20000090

0800619c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2243      	movs	r2, #67	; 0x43
 80061a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80061aa:	4b03      	ldr	r3, [pc, #12]	; (80061b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	2000004c 	.word	0x2000004c

080061bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2243      	movs	r2, #67	; 0x43
 80061c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80061ca:	4b03      	ldr	r3, [pc, #12]	; (80061d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	200000d4 	.word	0x200000d4

080061dc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	220a      	movs	r2, #10
 80061e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80061ea:	4b03      	ldr	r3, [pc, #12]	; (80061f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	20000008 	.word	0x20000008

080061fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800620c:	2303      	movs	r3, #3
 800620e:	e004      	b.n	800621a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006226:	b480      	push	{r7}
 8006228:	b087      	sub	sp, #28
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006238:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	371c      	adds	r7, #28
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006268:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800628e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800629a:	2303      	movs	r3, #3
 800629c:	e016      	b.n	80062cc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	7c1b      	ldrb	r3, [r3, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d109      	bne.n	80062ba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062b0:	2101      	movs	r1, #1
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f004 ff1e 	bl	800b0f4 <USBD_LL_PrepareReceive>
 80062b8:	e007      	b.n	80062ca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062c0:	2340      	movs	r3, #64	; 0x40
 80062c2:	2101      	movs	r1, #1
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f004 ff15 	bl	800b0f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	4613      	mov	r3, r2
 80062e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e025      	b.n	8006338 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	79fa      	ldrb	r2, [r7, #7]
 800632a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f004 fd8b 	bl	800ae48 <USBD_LL_Init>
 8006332:	4603      	mov	r3, r0
 8006334:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006336:	7dfb      	ldrb	r3, [r7, #23]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006354:	2303      	movs	r3, #3
 8006356:	e010      	b.n	800637a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006368:	f107 020e 	add.w	r2, r7, #14
 800636c:	4610      	mov	r0, r2
 800636e:	4798      	blx	r3
 8006370:	4602      	mov	r2, r0
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f004 fda8 	bl	800aee0 <USBD_LL_Start>
 8006390:	4603      	mov	r3, r0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80063bc:	2303      	movs	r3, #3
 80063be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d009      	beq.n	80063de <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	78fa      	ldrb	r2, [r7, #3]
 80063d4:	4611      	mov	r1, r2
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	4798      	blx	r3
 80063da:	4603      	mov	r3, r0
 80063dc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80063de:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d007      	beq.n	800640e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	78fa      	ldrb	r2, [r7, #3]
 8006408:	4611      	mov	r1, r2
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	4798      	blx	r3
  }

  return USBD_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	4618      	mov	r0, r3
 800642c:	f000 ff65 	bl	80072fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800643e:	461a      	mov	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800644c:	f003 031f 	and.w	r3, r3, #31
 8006450:	2b02      	cmp	r3, #2
 8006452:	d01a      	beq.n	800648a <USBD_LL_SetupStage+0x72>
 8006454:	2b02      	cmp	r3, #2
 8006456:	d822      	bhi.n	800649e <USBD_LL_SetupStage+0x86>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <USBD_LL_SetupStage+0x4a>
 800645c:	2b01      	cmp	r3, #1
 800645e:	d00a      	beq.n	8006476 <USBD_LL_SetupStage+0x5e>
 8006460:	e01d      	b.n	800649e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006468:	4619      	mov	r1, r3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fa18 	bl	80068a0 <USBD_StdDevReq>
 8006470:	4603      	mov	r3, r0
 8006472:	73fb      	strb	r3, [r7, #15]
      break;
 8006474:	e020      	b.n	80064b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800647c:	4619      	mov	r1, r3
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fa7c 	bl	800697c <USBD_StdItfReq>
 8006484:	4603      	mov	r3, r0
 8006486:	73fb      	strb	r3, [r7, #15]
      break;
 8006488:	e016      	b.n	80064b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 faba 	bl	8006a0c <USBD_StdEPReq>
 8006498:	4603      	mov	r3, r0
 800649a:	73fb      	strb	r3, [r7, #15]
      break;
 800649c:	e00c      	b.n	80064b8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f004 fd77 	bl	800afa0 <USBD_LL_StallEP>
 80064b2:	4603      	mov	r3, r0
 80064b4:	73fb      	strb	r3, [r7, #15]
      break;
 80064b6:	bf00      	nop
  }

  return ret;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b086      	sub	sp, #24
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	60f8      	str	r0, [r7, #12]
 80064ca:	460b      	mov	r3, r1
 80064cc:	607a      	str	r2, [r7, #4]
 80064ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80064d0:	7afb      	ldrb	r3, [r7, #11]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d137      	bne.n	8006546 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80064dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d14a      	bne.n	800657e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d913      	bls.n	800651c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	1ad2      	subs	r2, r2, r3
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	4293      	cmp	r3, r2
 800650c:	bf28      	it	cs
 800650e:	4613      	movcs	r3, r2
 8006510:	461a      	mov	r2, r3
 8006512:	6879      	ldr	r1, [r7, #4]
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 ffe4 	bl	80074e2 <USBD_CtlContinueRx>
 800651a:	e030      	b.n	800657e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00a      	beq.n	800653e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800652e:	2b03      	cmp	r3, #3
 8006530:	d105      	bne.n	800653e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 ffe0 	bl	8007504 <USBD_CtlSendStatus>
 8006544:	e01b      	b.n	800657e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d013      	beq.n	800657a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006558:	2b03      	cmp	r3, #3
 800655a:	d10e      	bne.n	800657a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	7afa      	ldrb	r2, [r7, #11]
 8006566:	4611      	mov	r1, r2
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	4798      	blx	r3
 800656c:	4603      	mov	r3, r0
 800656e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006570:	7dfb      	ldrb	r3, [r7, #23]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006576:	7dfb      	ldrb	r3, [r7, #23]
 8006578:	e002      	b.n	8006580 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800657a:	2303      	movs	r3, #3
 800657c:	e000      	b.n	8006580 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	460b      	mov	r3, r1
 8006592:	607a      	str	r2, [r7, #4]
 8006594:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006596:	7afb      	ldrb	r3, [r7, #11]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d16a      	bne.n	8006672 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3314      	adds	r3, #20
 80065a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d155      	bne.n	8006658 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d914      	bls.n	80065e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	1ad2      	subs	r2, r2, r3
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	461a      	mov	r2, r3
 80065cc:	6879      	ldr	r1, [r7, #4]
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 ff59 	bl	8007486 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065d4:	2300      	movs	r3, #0
 80065d6:	2200      	movs	r2, #0
 80065d8:	2100      	movs	r1, #0
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f004 fd8a 	bl	800b0f4 <USBD_LL_PrepareReceive>
 80065e0:	e03a      	b.n	8006658 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d11c      	bne.n	8006628 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d316      	bcc.n	8006628 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006604:	429a      	cmp	r2, r3
 8006606:	d20f      	bcs.n	8006628 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006608:	2200      	movs	r2, #0
 800660a:	2100      	movs	r1, #0
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 ff3a 	bl	8007486 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800661a:	2300      	movs	r3, #0
 800661c:	2200      	movs	r2, #0
 800661e:	2100      	movs	r1, #0
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f004 fd67 	bl	800b0f4 <USBD_LL_PrepareReceive>
 8006626:	e017      	b.n	8006658 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00a      	beq.n	800664a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800663a:	2b03      	cmp	r3, #3
 800663c:	d105      	bne.n	800664a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800664a:	2180      	movs	r1, #128	; 0x80
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f004 fca7 	bl	800afa0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 ff69 	bl	800752a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800665e:	2b01      	cmp	r3, #1
 8006660:	d123      	bne.n	80066aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f7ff fe99 	bl	800639a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006670:	e01b      	b.n	80066aa <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d013      	beq.n	80066a6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006684:	2b03      	cmp	r3, #3
 8006686:	d10e      	bne.n	80066a6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	7afa      	ldrb	r2, [r7, #11]
 8006692:	4611      	mov	r1, r2
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	4798      	blx	r3
 8006698:	4603      	mov	r3, r0
 800669a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800669c:	7dfb      	ldrb	r3, [r7, #23]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80066a2:	7dfb      	ldrb	r3, [r7, #23]
 80066a4:	e002      	b.n	80066ac <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e000      	b.n	80066ac <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d009      	beq.n	80066f8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6852      	ldr	r2, [r2, #4]
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	4611      	mov	r1, r2
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066f8:	2340      	movs	r3, #64	; 0x40
 80066fa:	2200      	movs	r2, #0
 80066fc:	2100      	movs	r1, #0
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f004 fc09 	bl	800af16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2240      	movs	r2, #64	; 0x40
 8006710:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006714:	2340      	movs	r3, #64	; 0x40
 8006716:	2200      	movs	r2, #0
 8006718:	2180      	movs	r1, #128	; 0x80
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f004 fbfb 	bl	800af16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2240      	movs	r2, #64	; 0x40
 800672a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	460b      	mov	r3, r1
 8006740:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	78fa      	ldrb	r2, [r7, #3]
 8006746:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006756:	b480      	push	{r7}
 8006758:	b083      	sub	sp, #12
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2204      	movs	r2, #4
 800676e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800678e:	2b04      	cmp	r3, #4
 8006790:	d105      	bne.n	800679e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d10b      	bne.n	80067d6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d005      	beq.n	80067d6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	460b      	mov	r3, r1
 80067ea:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	460b      	mov	r3, r1
 8006804:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b082      	sub	sp, #8
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006840:	2b00      	cmp	r3, #0
 8006842:	d009      	beq.n	8006858 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6852      	ldr	r2, [r2, #4]
 8006850:	b2d2      	uxtb	r2, r2
 8006852:	4611      	mov	r1, r2
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	4798      	blx	r3
  }

  return USBD_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006862:	b480      	push	{r7}
 8006864:	b087      	sub	sp, #28
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	3301      	adds	r3, #1
 8006878:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006880:	8a3b      	ldrh	r3, [r7, #16]
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	b21a      	sxth	r2, r3
 8006886:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800688a:	4313      	orrs	r3, r2
 800688c:	b21b      	sxth	r3, r3
 800688e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006890:	89fb      	ldrh	r3, [r7, #14]
}
 8006892:	4618      	mov	r0, r3
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
	...

080068a0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068b6:	2b40      	cmp	r3, #64	; 0x40
 80068b8:	d005      	beq.n	80068c6 <USBD_StdDevReq+0x26>
 80068ba:	2b40      	cmp	r3, #64	; 0x40
 80068bc:	d853      	bhi.n	8006966 <USBD_StdDevReq+0xc6>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00b      	beq.n	80068da <USBD_StdDevReq+0x3a>
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	d14f      	bne.n	8006966 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	4798      	blx	r3
 80068d4:	4603      	mov	r3, r0
 80068d6:	73fb      	strb	r3, [r7, #15]
    break;
 80068d8:	e04a      	b.n	8006970 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	785b      	ldrb	r3, [r3, #1]
 80068de:	2b09      	cmp	r3, #9
 80068e0:	d83b      	bhi.n	800695a <USBD_StdDevReq+0xba>
 80068e2:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <USBD_StdDevReq+0x48>)
 80068e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e8:	0800693d 	.word	0x0800693d
 80068ec:	08006951 	.word	0x08006951
 80068f0:	0800695b 	.word	0x0800695b
 80068f4:	08006947 	.word	0x08006947
 80068f8:	0800695b 	.word	0x0800695b
 80068fc:	0800691b 	.word	0x0800691b
 8006900:	08006911 	.word	0x08006911
 8006904:	0800695b 	.word	0x0800695b
 8006908:	08006933 	.word	0x08006933
 800690c:	08006925 	.word	0x08006925
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f9d8 	bl	8006cc8 <USBD_GetDescriptor>
      break;
 8006918:	e024      	b.n	8006964 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fb67 	bl	8006ff0 <USBD_SetAddress>
      break;
 8006922:	e01f      	b.n	8006964 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006924:	6839      	ldr	r1, [r7, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fba6 	bl	8007078 <USBD_SetConfig>
 800692c:	4603      	mov	r3, r0
 800692e:	73fb      	strb	r3, [r7, #15]
      break;
 8006930:	e018      	b.n	8006964 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fc43 	bl	80071c0 <USBD_GetConfig>
      break;
 800693a:	e013      	b.n	8006964 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fc73 	bl	800722a <USBD_GetStatus>
      break;
 8006944:	e00e      	b.n	8006964 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fca1 	bl	8007290 <USBD_SetFeature>
      break;
 800694e:	e009      	b.n	8006964 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fcb0 	bl	80072b8 <USBD_ClrFeature>
      break;
 8006958:	e004      	b.n	8006964 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fd06 	bl	800736e <USBD_CtlError>
      break;
 8006962:	bf00      	nop
    }
    break;
 8006964:	e004      	b.n	8006970 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006966:	6839      	ldr	r1, [r7, #0]
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fd00 	bl	800736e <USBD_CtlError>
    break;
 800696e:	bf00      	nop
  }

  return ret;
 8006970:	7bfb      	ldrb	r3, [r7, #15]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop

0800697c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006992:	2b40      	cmp	r3, #64	; 0x40
 8006994:	d005      	beq.n	80069a2 <USBD_StdItfReq+0x26>
 8006996:	2b40      	cmp	r3, #64	; 0x40
 8006998:	d82e      	bhi.n	80069f8 <USBD_StdItfReq+0x7c>
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <USBD_StdItfReq+0x26>
 800699e:	2b20      	cmp	r3, #32
 80069a0:	d12a      	bne.n	80069f8 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a8:	3b01      	subs	r3, #1
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d81d      	bhi.n	80069ea <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	889b      	ldrh	r3, [r3, #4]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d813      	bhi.n	80069e0 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	4798      	blx	r3
 80069c6:	4603      	mov	r3, r0
 80069c8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	88db      	ldrh	r3, [r3, #6]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d110      	bne.n	80069f4 <USBD_StdItfReq+0x78>
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10d      	bne.n	80069f4 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fd93 	bl	8007504 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80069de:	e009      	b.n	80069f4 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fcc3 	bl	800736e <USBD_CtlError>
      break;
 80069e8:	e004      	b.n	80069f4 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fcbe 	bl	800736e <USBD_CtlError>
      break;
 80069f2:	e000      	b.n	80069f6 <USBD_StdItfReq+0x7a>
      break;
 80069f4:	bf00      	nop
    }
    break;
 80069f6:	e004      	b.n	8006a02 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fcb7 	bl	800736e <USBD_CtlError>
    break;
 8006a00:	bf00      	nop
  }

  return ret;
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	889b      	ldrh	r3, [r3, #4]
 8006a1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a28:	2b40      	cmp	r3, #64	; 0x40
 8006a2a:	d007      	beq.n	8006a3c <USBD_StdEPReq+0x30>
 8006a2c:	2b40      	cmp	r3, #64	; 0x40
 8006a2e:	f200 8140 	bhi.w	8006cb2 <USBD_StdEPReq+0x2a6>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00c      	beq.n	8006a50 <USBD_StdEPReq+0x44>
 8006a36:	2b20      	cmp	r3, #32
 8006a38:	f040 813b 	bne.w	8006cb2 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	4798      	blx	r3
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	73fb      	strb	r3, [r7, #15]
    break;
 8006a4e:	e135      	b.n	8006cbc <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	785b      	ldrb	r3, [r3, #1]
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d007      	beq.n	8006a68 <USBD_StdEPReq+0x5c>
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	f300 8124 	bgt.w	8006ca6 <USBD_StdEPReq+0x29a>
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d07b      	beq.n	8006b5a <USBD_StdEPReq+0x14e>
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d03b      	beq.n	8006ade <USBD_StdEPReq+0xd2>
 8006a66:	e11e      	b.n	8006ca6 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d002      	beq.n	8006a78 <USBD_StdEPReq+0x6c>
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	d016      	beq.n	8006aa4 <USBD_StdEPReq+0x98>
 8006a76:	e02c      	b.n	8006ad2 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00d      	beq.n	8006a9a <USBD_StdEPReq+0x8e>
 8006a7e:	7bbb      	ldrb	r3, [r7, #14]
 8006a80:	2b80      	cmp	r3, #128	; 0x80
 8006a82:	d00a      	beq.n	8006a9a <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a84:	7bbb      	ldrb	r3, [r7, #14]
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f004 fa89 	bl	800afa0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a8e:	2180      	movs	r1, #128	; 0x80
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f004 fa85 	bl	800afa0 <USBD_LL_StallEP>
 8006a96:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006a98:	e020      	b.n	8006adc <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fc66 	bl	800736e <USBD_CtlError>
        break;
 8006aa2:	e01b      	b.n	8006adc <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	885b      	ldrh	r3, [r3, #2]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10e      	bne.n	8006aca <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006aac:	7bbb      	ldrb	r3, [r7, #14]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00b      	beq.n	8006aca <USBD_StdEPReq+0xbe>
 8006ab2:	7bbb      	ldrb	r3, [r7, #14]
 8006ab4:	2b80      	cmp	r3, #128	; 0x80
 8006ab6:	d008      	beq.n	8006aca <USBD_StdEPReq+0xbe>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	88db      	ldrh	r3, [r3, #6]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d104      	bne.n	8006aca <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ac0:	7bbb      	ldrb	r3, [r7, #14]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f004 fa6b 	bl	800afa0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fd1a 	bl	8007504 <USBD_CtlSendStatus>

        break;
 8006ad0:	e004      	b.n	8006adc <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fc4a 	bl	800736e <USBD_CtlError>
        break;
 8006ada:	bf00      	nop
      }
      break;
 8006adc:	e0e8      	b.n	8006cb0 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d002      	beq.n	8006aee <USBD_StdEPReq+0xe2>
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d016      	beq.n	8006b1a <USBD_StdEPReq+0x10e>
 8006aec:	e02e      	b.n	8006b4c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aee:	7bbb      	ldrb	r3, [r7, #14]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00d      	beq.n	8006b10 <USBD_StdEPReq+0x104>
 8006af4:	7bbb      	ldrb	r3, [r7, #14]
 8006af6:	2b80      	cmp	r3, #128	; 0x80
 8006af8:	d00a      	beq.n	8006b10 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006afa:	7bbb      	ldrb	r3, [r7, #14]
 8006afc:	4619      	mov	r1, r3
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f004 fa4e 	bl	800afa0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b04:	2180      	movs	r1, #128	; 0x80
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f004 fa4a 	bl	800afa0 <USBD_LL_StallEP>
 8006b0c:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006b0e:	e023      	b.n	8006b58 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fc2b 	bl	800736e <USBD_CtlError>
        break;
 8006b18:	e01e      	b.n	8006b58 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	885b      	ldrh	r3, [r3, #2]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d119      	bne.n	8006b56 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d004      	beq.n	8006b36 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b2c:	7bbb      	ldrb	r3, [r7, #14]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f004 fa54 	bl	800afde <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fce4 	bl	8007504 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3
        }
        break;
 8006b4a:	e004      	b.n	8006b56 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fc0d 	bl	800736e <USBD_CtlError>
        break;
 8006b54:	e000      	b.n	8006b58 <USBD_StdEPReq+0x14c>
        break;
 8006b56:	bf00      	nop
      }
      break;
 8006b58:	e0aa      	b.n	8006cb0 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d002      	beq.n	8006b6a <USBD_StdEPReq+0x15e>
 8006b64:	2b03      	cmp	r3, #3
 8006b66:	d032      	beq.n	8006bce <USBD_StdEPReq+0x1c2>
 8006b68:	e097      	b.n	8006c9a <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d007      	beq.n	8006b80 <USBD_StdEPReq+0x174>
 8006b70:	7bbb      	ldrb	r3, [r7, #14]
 8006b72:	2b80      	cmp	r3, #128	; 0x80
 8006b74:	d004      	beq.n	8006b80 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fbf8 	bl	800736e <USBD_CtlError>
          break;
 8006b7e:	e091      	b.n	8006ca4 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	da0b      	bge.n	8006ba0 <USBD_StdEPReq+0x194>
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	3310      	adds	r3, #16
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	e00b      	b.n	8006bb8 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
 8006ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fc42 	bl	8007450 <USBD_CtlSendData>
        break;
 8006bcc:	e06a      	b.n	8006ca4 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006bce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	da11      	bge.n	8006bfa <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006bd6:	7bbb      	ldrb	r3, [r7, #14]
 8006bd8:	f003 020f 	and.w	r2, r3, #15
 8006bdc:	6879      	ldr	r1, [r7, #4]
 8006bde:	4613      	mov	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	440b      	add	r3, r1
 8006be8:	3324      	adds	r3, #36	; 0x24
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d117      	bne.n	8006c20 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fbbb 	bl	800736e <USBD_CtlError>
            break;
 8006bf8:	e054      	b.n	8006ca4 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
 8006bfc:	f003 020f 	and.w	r2, r3, #15
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	4613      	mov	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	440b      	add	r3, r1
 8006c0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d104      	bne.n	8006c20 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fba8 	bl	800736e <USBD_CtlError>
            break;
 8006c1e:	e041      	b.n	8006ca4 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	da0b      	bge.n	8006c40 <USBD_StdEPReq+0x234>
 8006c28:	7bbb      	ldrb	r3, [r7, #14]
 8006c2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	3310      	adds	r3, #16
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	e00b      	b.n	8006c58 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	4413      	add	r3, r2
 8006c56:	3304      	adds	r3, #4
 8006c58:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c5a:	7bbb      	ldrb	r3, [r7, #14]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <USBD_StdEPReq+0x25a>
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	2b80      	cmp	r3, #128	; 0x80
 8006c64:	d103      	bne.n	8006c6e <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	e00e      	b.n	8006c8c <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c6e:	7bbb      	ldrb	r3, [r7, #14]
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f004 f9d2 	bl	800b01c <USBD_LL_IsStallEP>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2201      	movs	r2, #1
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	e002      	b.n	8006c8c <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fbdc 	bl	8007450 <USBD_CtlSendData>
          break;
 8006c98:	e004      	b.n	8006ca4 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fb66 	bl	800736e <USBD_CtlError>
        break;
 8006ca2:	bf00      	nop
      }
      break;
 8006ca4:	e004      	b.n	8006cb0 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fb60 	bl	800736e <USBD_CtlError>
      break;
 8006cae:	bf00      	nop
    }
    break;
 8006cb0:	e004      	b.n	8006cbc <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fb5a 	bl	800736e <USBD_CtlError>
    break;
 8006cba:	bf00      	nop
  }

  return ret;
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	885b      	ldrh	r3, [r3, #2]
 8006ce2:	0a1b      	lsrs	r3, r3, #8
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	2b0e      	cmp	r3, #14
 8006cea:	f200 8152 	bhi.w	8006f92 <USBD_GetDescriptor+0x2ca>
 8006cee:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <USBD_GetDescriptor+0x2c>)
 8006cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf4:	08006d65 	.word	0x08006d65
 8006cf8:	08006d7d 	.word	0x08006d7d
 8006cfc:	08006dbd 	.word	0x08006dbd
 8006d00:	08006f93 	.word	0x08006f93
 8006d04:	08006f93 	.word	0x08006f93
 8006d08:	08006f33 	.word	0x08006f33
 8006d0c:	08006f5f 	.word	0x08006f5f
 8006d10:	08006f93 	.word	0x08006f93
 8006d14:	08006f93 	.word	0x08006f93
 8006d18:	08006f93 	.word	0x08006f93
 8006d1c:	08006f93 	.word	0x08006f93
 8006d20:	08006f93 	.word	0x08006f93
 8006d24:	08006f93 	.word	0x08006f93
 8006d28:	08006f93 	.word	0x08006f93
 8006d2c:	08006d31 	.word	0x08006d31
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	7c12      	ldrb	r2, [r2, #16]
 8006d48:	f107 0108 	add.w	r1, r7, #8
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4798      	blx	r3
 8006d50:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006d52:	e126      	b.n	8006fa2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fb09 	bl	800736e <USBD_CtlError>
      err++;
 8006d5c:	7afb      	ldrb	r3, [r7, #11]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	72fb      	strb	r3, [r7, #11]
    break;
 8006d62:	e11e      	b.n	8006fa2 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	7c12      	ldrb	r2, [r2, #16]
 8006d70:	f107 0108 	add.w	r1, r7, #8
 8006d74:	4610      	mov	r0, r2
 8006d76:	4798      	blx	r3
 8006d78:	60f8      	str	r0, [r7, #12]
    break;
 8006d7a:	e112      	b.n	8006fa2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	7c1b      	ldrb	r3, [r3, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10d      	bne.n	8006da0 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8c:	f107 0208 	add.w	r2, r7, #8
 8006d90:	4610      	mov	r0, r2
 8006d92:	4798      	blx	r3
 8006d94:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006d9e:	e100      	b.n	8006fa2 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	f107 0208 	add.w	r2, r7, #8
 8006dac:	4610      	mov	r0, r2
 8006dae:	4798      	blx	r3
 8006db0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3301      	adds	r3, #1
 8006db6:	2202      	movs	r2, #2
 8006db8:	701a      	strb	r2, [r3, #0]
    break;
 8006dba:	e0f2      	b.n	8006fa2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	885b      	ldrh	r3, [r3, #2]
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b05      	cmp	r3, #5
 8006dc4:	f200 80ac 	bhi.w	8006f20 <USBD_GetDescriptor+0x258>
 8006dc8:	a201      	add	r2, pc, #4	; (adr r2, 8006dd0 <USBD_GetDescriptor+0x108>)
 8006dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dce:	bf00      	nop
 8006dd0:	08006de9 	.word	0x08006de9
 8006dd4:	08006e1d 	.word	0x08006e1d
 8006dd8:	08006e51 	.word	0x08006e51
 8006ddc:	08006e85 	.word	0x08006e85
 8006de0:	08006eb9 	.word	0x08006eb9
 8006de4:	08006eed 	.word	0x08006eed
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00b      	beq.n	8006e0c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	7c12      	ldrb	r2, [r2, #16]
 8006e00:	f107 0108 	add.w	r1, r7, #8
 8006e04:	4610      	mov	r0, r2
 8006e06:	4798      	blx	r3
 8006e08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e0a:	e091      	b.n	8006f30 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 faad 	bl	800736e <USBD_CtlError>
        err++;
 8006e14:	7afb      	ldrb	r3, [r7, #11]
 8006e16:	3301      	adds	r3, #1
 8006e18:	72fb      	strb	r3, [r7, #11]
      break;
 8006e1a:	e089      	b.n	8006f30 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00b      	beq.n	8006e40 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	7c12      	ldrb	r2, [r2, #16]
 8006e34:	f107 0108 	add.w	r1, r7, #8
 8006e38:	4610      	mov	r0, r2
 8006e3a:	4798      	blx	r3
 8006e3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e3e:	e077      	b.n	8006f30 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fa93 	bl	800736e <USBD_CtlError>
        err++;
 8006e48:	7afb      	ldrb	r3, [r7, #11]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	72fb      	strb	r3, [r7, #11]
      break;
 8006e4e:	e06f      	b.n	8006f30 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00b      	beq.n	8006e74 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	7c12      	ldrb	r2, [r2, #16]
 8006e68:	f107 0108 	add.w	r1, r7, #8
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4798      	blx	r3
 8006e70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e72:	e05d      	b.n	8006f30 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fa79 	bl	800736e <USBD_CtlError>
        err++;
 8006e7c:	7afb      	ldrb	r3, [r7, #11]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	72fb      	strb	r3, [r7, #11]
      break;
 8006e82:	e055      	b.n	8006f30 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	7c12      	ldrb	r2, [r2, #16]
 8006e9c:	f107 0108 	add.w	r1, r7, #8
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	4798      	blx	r3
 8006ea4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ea6:	e043      	b.n	8006f30 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fa5f 	bl	800736e <USBD_CtlError>
        err++;
 8006eb0:	7afb      	ldrb	r3, [r7, #11]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	72fb      	strb	r3, [r7, #11]
      break;
 8006eb6:	e03b      	b.n	8006f30 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	7c12      	ldrb	r2, [r2, #16]
 8006ed0:	f107 0108 	add.w	r1, r7, #8
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4798      	blx	r3
 8006ed8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006eda:	e029      	b.n	8006f30 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fa45 	bl	800736e <USBD_CtlError>
        err++;
 8006ee4:	7afb      	ldrb	r3, [r7, #11]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	72fb      	strb	r3, [r7, #11]
      break;
 8006eea:	e021      	b.n	8006f30 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00b      	beq.n	8006f10 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	7c12      	ldrb	r2, [r2, #16]
 8006f04:	f107 0108 	add.w	r1, r7, #8
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4798      	blx	r3
 8006f0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f0e:	e00f      	b.n	8006f30 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa2b 	bl	800736e <USBD_CtlError>
        err++;
 8006f18:	7afb      	ldrb	r3, [r7, #11]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	72fb      	strb	r3, [r7, #11]
      break;
 8006f1e:	e007      	b.n	8006f30 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fa23 	bl	800736e <USBD_CtlError>
      err++;
 8006f28:	7afb      	ldrb	r3, [r7, #11]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006f2e:	bf00      	nop
    }
    break;
 8006f30:	e037      	b.n	8006fa2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	7c1b      	ldrb	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d109      	bne.n	8006f4e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f42:	f107 0208 	add.w	r2, r7, #8
 8006f46:	4610      	mov	r0, r2
 8006f48:	4798      	blx	r3
 8006f4a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006f4c:	e029      	b.n	8006fa2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fa0c 	bl	800736e <USBD_CtlError>
      err++;
 8006f56:	7afb      	ldrb	r3, [r7, #11]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	72fb      	strb	r3, [r7, #11]
    break;
 8006f5c:	e021      	b.n	8006fa2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	7c1b      	ldrb	r3, [r3, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10d      	bne.n	8006f82 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6e:	f107 0208 	add.w	r2, r7, #8
 8006f72:	4610      	mov	r0, r2
 8006f74:	4798      	blx	r3
 8006f76:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	2207      	movs	r2, #7
 8006f7e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006f80:	e00f      	b.n	8006fa2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f9f2 	bl	800736e <USBD_CtlError>
      err++;
 8006f8a:	7afb      	ldrb	r3, [r7, #11]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	72fb      	strb	r3, [r7, #11]
    break;
 8006f90:	e007      	b.n	8006fa2 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f9ea 	bl	800736e <USBD_CtlError>
    err++;
 8006f9a:	7afb      	ldrb	r3, [r7, #11]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	72fb      	strb	r3, [r7, #11]
    break;
 8006fa0:	bf00      	nop
  }

  if (err != 0U)
 8006fa2:	7afb      	ldrb	r3, [r7, #11]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d11e      	bne.n	8006fe6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	88db      	ldrh	r3, [r3, #6]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d016      	beq.n	8006fde <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8006fb0:	893b      	ldrh	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00e      	beq.n	8006fd4 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	88da      	ldrh	r2, [r3, #6]
 8006fba:	893b      	ldrh	r3, [r7, #8]
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	bf28      	it	cs
 8006fc0:	4613      	movcs	r3, r2
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fc6:	893b      	ldrh	r3, [r7, #8]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	68f9      	ldr	r1, [r7, #12]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fa3f 	bl	8007450 <USBD_CtlSendData>
 8006fd2:	e009      	b.n	8006fe8 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f9c9 	bl	800736e <USBD_CtlError>
 8006fdc:	e004      	b.n	8006fe8 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fa90 	bl	8007504 <USBD_CtlSendStatus>
 8006fe4:	e000      	b.n	8006fe8 <USBD_GetDescriptor+0x320>
    return;
 8006fe6:	bf00      	nop
    }
  }
}
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop

08006ff0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	889b      	ldrh	r3, [r3, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d130      	bne.n	8007064 <USBD_SetAddress+0x74>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	88db      	ldrh	r3, [r3, #6]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d12c      	bne.n	8007064 <USBD_SetAddress+0x74>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	885b      	ldrh	r3, [r3, #2]
 800700e:	2b7f      	cmp	r3, #127	; 0x7f
 8007010:	d828      	bhi.n	8007064 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	885b      	ldrh	r3, [r3, #2]
 8007016:	b2db      	uxtb	r3, r3
 8007018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800701c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007024:	2b03      	cmp	r3, #3
 8007026:	d104      	bne.n	8007032 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f99f 	bl	800736e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007030:	e01d      	b.n	800706e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	7bfa      	ldrb	r2, [r7, #15]
 8007036:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800703a:	7bfb      	ldrb	r3, [r7, #15]
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f004 f818 	bl	800b074 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fa5d 	bl	8007504 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d004      	beq.n	800705a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007058:	e009      	b.n	800706e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007062:	e004      	b.n	800706e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007064:	6839      	ldr	r1, [r7, #0]
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f981 	bl	800736e <USBD_CtlError>
  }
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
	...

08007078 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	885b      	ldrh	r3, [r3, #2]
 800708a:	b2da      	uxtb	r2, r3
 800708c:	4b4b      	ldr	r3, [pc, #300]	; (80071bc <USBD_SetConfig+0x144>)
 800708e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007090:	4b4a      	ldr	r3, [pc, #296]	; (80071bc <USBD_SetConfig+0x144>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d905      	bls.n	80070a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007098:	6839      	ldr	r1, [r7, #0]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f967 	bl	800736e <USBD_CtlError>
    return USBD_FAIL;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e087      	b.n	80071b4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d002      	beq.n	80070b4 <USBD_SetConfig+0x3c>
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d025      	beq.n	80070fe <USBD_SetConfig+0x86>
 80070b2:	e071      	b.n	8007198 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80070b4:	4b41      	ldr	r3, [pc, #260]	; (80071bc <USBD_SetConfig+0x144>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01c      	beq.n	80070f6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80070bc:	4b3f      	ldr	r3, [pc, #252]	; (80071bc <USBD_SetConfig+0x144>)
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	461a      	mov	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80070c6:	4b3d      	ldr	r3, [pc, #244]	; (80071bc <USBD_SetConfig+0x144>)
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7ff f96f 	bl	80063b0 <USBD_SetClassConfig>
 80070d2:	4603      	mov	r3, r0
 80070d4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d004      	beq.n	80070e6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f945 	bl	800736e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80070e4:	e065      	b.n	80071b2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa0c 	bl	8007504 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2203      	movs	r2, #3
 80070f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80070f4:	e05d      	b.n	80071b2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fa04 	bl	8007504 <USBD_CtlSendStatus>
    break;
 80070fc:	e059      	b.n	80071b2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80070fe:	4b2f      	ldr	r3, [pc, #188]	; (80071bc <USBD_SetConfig+0x144>)
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d112      	bne.n	800712c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2202      	movs	r2, #2
 800710a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800710e:	4b2b      	ldr	r3, [pc, #172]	; (80071bc <USBD_SetConfig+0x144>)
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007118:	4b28      	ldr	r3, [pc, #160]	; (80071bc <USBD_SetConfig+0x144>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff f962 	bl	80063e8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f9ed 	bl	8007504 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800712a:	e042      	b.n	80071b2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800712c:	4b23      	ldr	r3, [pc, #140]	; (80071bc <USBD_SetConfig+0x144>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	429a      	cmp	r2, r3
 8007138:	d02a      	beq.n	8007190 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	b2db      	uxtb	r3, r3
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff f950 	bl	80063e8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007148:	4b1c      	ldr	r3, [pc, #112]	; (80071bc <USBD_SetConfig+0x144>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007152:	4b1a      	ldr	r3, [pc, #104]	; (80071bc <USBD_SetConfig+0x144>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7ff f929 	bl	80063b0 <USBD_SetClassConfig>
 800715e:	4603      	mov	r3, r0
 8007160:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007162:	7bfb      	ldrb	r3, [r7, #15]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00f      	beq.n	8007188 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f8ff 	bl	800736e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	b2db      	uxtb	r3, r3
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff f935 	bl	80063e8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2202      	movs	r2, #2
 8007182:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007186:	e014      	b.n	80071b2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f9bb 	bl	8007504 <USBD_CtlSendStatus>
    break;
 800718e:	e010      	b.n	80071b2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f9b7 	bl	8007504 <USBD_CtlSendStatus>
    break;
 8007196:	e00c      	b.n	80071b2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f8e7 	bl	800736e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071a0:	4b06      	ldr	r3, [pc, #24]	; (80071bc <USBD_SetConfig+0x144>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7ff f91e 	bl	80063e8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80071ac:	2303      	movs	r3, #3
 80071ae:	73fb      	strb	r3, [r7, #15]
    break;
 80071b0:	bf00      	nop
  }

  return ret;
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	20000228 	.word	0x20000228

080071c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	88db      	ldrh	r3, [r3, #6]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d004      	beq.n	80071dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f8ca 	bl	800736e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80071da:	e022      	b.n	8007222 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	dc02      	bgt.n	80071ec <USBD_GetConfig+0x2c>
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	dc03      	bgt.n	80071f2 <USBD_GetConfig+0x32>
 80071ea:	e015      	b.n	8007218 <USBD_GetConfig+0x58>
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	d00b      	beq.n	8007208 <USBD_GetConfig+0x48>
 80071f0:	e012      	b.n	8007218 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3308      	adds	r3, #8
 80071fc:	2201      	movs	r2, #1
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f925 	bl	8007450 <USBD_CtlSendData>
      break;
 8007206:	e00c      	b.n	8007222 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	3304      	adds	r3, #4
 800720c:	2201      	movs	r2, #1
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f91d 	bl	8007450 <USBD_CtlSendData>
      break;
 8007216:	e004      	b.n	8007222 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f8a7 	bl	800736e <USBD_CtlError>
      break;
 8007220:	bf00      	nop
}
 8007222:	bf00      	nop
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b082      	sub	sp, #8
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800723a:	3b01      	subs	r3, #1
 800723c:	2b02      	cmp	r3, #2
 800723e:	d81e      	bhi.n	800727e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	88db      	ldrh	r3, [r3, #6]
 8007244:	2b02      	cmp	r3, #2
 8007246:	d004      	beq.n	8007252 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f88f 	bl	800736e <USBD_CtlError>
      break;
 8007250:	e01a      	b.n	8007288 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800725e:	2b00      	cmp	r3, #0
 8007260:	d005      	beq.n	800726e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f043 0202 	orr.w	r2, r3, #2
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	330c      	adds	r3, #12
 8007272:	2202      	movs	r2, #2
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f8ea 	bl	8007450 <USBD_CtlSendData>
    break;
 800727c:	e004      	b.n	8007288 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f874 	bl	800736e <USBD_CtlError>
    break;
 8007286:	bf00      	nop
  }
}
 8007288:	bf00      	nop
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	885b      	ldrh	r3, [r3, #2]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d106      	bne.n	80072b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f92a 	bl	8007504 <USBD_CtlSendStatus>
  }
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c8:	3b01      	subs	r3, #1
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d80b      	bhi.n	80072e6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	885b      	ldrh	r3, [r3, #2]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d10c      	bne.n	80072f0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f910 	bl	8007504 <USBD_CtlSendStatus>
      }
      break;
 80072e4:	e004      	b.n	80072f0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f840 	bl	800736e <USBD_CtlError>
      break;
 80072ee:	e000      	b.n	80072f2 <USBD_ClrFeature+0x3a>
      break;
 80072f0:	bf00      	nop
  }
}
 80072f2:	bf00      	nop
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	781a      	ldrb	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3301      	adds	r3, #1
 8007314:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	781a      	ldrb	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3301      	adds	r3, #1
 8007322:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f7ff fa9c 	bl	8006862 <SWAPBYTE>
 800732a:	4603      	mov	r3, r0
 800732c:	461a      	mov	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3301      	adds	r3, #1
 8007336:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3301      	adds	r3, #1
 800733c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f7ff fa8f 	bl	8006862 <SWAPBYTE>
 8007344:	4603      	mov	r3, r0
 8007346:	461a      	mov	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	3301      	adds	r3, #1
 8007350:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3301      	adds	r3, #1
 8007356:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f7ff fa82 	bl	8006862 <SWAPBYTE>
 800735e:	4603      	mov	r3, r0
 8007360:	461a      	mov	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	80da      	strh	r2, [r3, #6]
}
 8007366:	bf00      	nop
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b082      	sub	sp, #8
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007378:	2180      	movs	r1, #128	; 0x80
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f003 fe10 	bl	800afa0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007380:	2100      	movs	r1, #0
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f003 fe0c 	bl	800afa0 <USBD_LL_StallEP>
}
 8007388:	bf00      	nop
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d036      	beq.n	8007414 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80073aa:	6938      	ldr	r0, [r7, #16]
 80073ac:	f000 f836 	bl	800741c <USBD_GetLen>
 80073b0:	4603      	mov	r3, r0
 80073b2:	3301      	adds	r3, #1
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80073be:	7dfb      	ldrb	r3, [r7, #23]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	4413      	add	r3, r2
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	7812      	ldrb	r2, [r2, #0]
 80073c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80073ca:	7dfb      	ldrb	r3, [r7, #23]
 80073cc:	3301      	adds	r3, #1
 80073ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80073d0:	7dfb      	ldrb	r3, [r7, #23]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	4413      	add	r3, r2
 80073d6:	2203      	movs	r2, #3
 80073d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80073da:	7dfb      	ldrb	r3, [r7, #23]
 80073dc:	3301      	adds	r3, #1
 80073de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80073e0:	e013      	b.n	800740a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80073e2:	7dfb      	ldrb	r3, [r7, #23]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	4413      	add	r3, r2
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	7812      	ldrb	r2, [r2, #0]
 80073ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	3301      	adds	r3, #1
 80073f2:	613b      	str	r3, [r7, #16]
    idx++;
 80073f4:	7dfb      	ldrb	r3, [r7, #23]
 80073f6:	3301      	adds	r3, #1
 80073f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	4413      	add	r3, r2
 8007400:	2200      	movs	r2, #0
 8007402:	701a      	strb	r2, [r3, #0]
    idx++;
 8007404:	7dfb      	ldrb	r3, [r7, #23]
 8007406:	3301      	adds	r3, #1
 8007408:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e7      	bne.n	80073e2 <USBD_GetString+0x52>
 8007412:	e000      	b.n	8007416 <USBD_GetString+0x86>
    return;
 8007414:	bf00      	nop
  }
}
 8007416:	3718      	adds	r7, #24
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007424:	2300      	movs	r3, #0
 8007426:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800742c:	e005      	b.n	800743a <USBD_GetLen+0x1e>
  {
    len++;
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	3301      	adds	r3, #1
 8007432:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	3301      	adds	r3, #1
 8007438:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1f5      	bne.n	800742e <USBD_GetLen+0x12>
  }

  return len;
 8007442:	7bfb      	ldrb	r3, [r7, #15]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2202      	movs	r2, #2
 8007460:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	2100      	movs	r1, #0
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f003 fe1b 	bl	800b0b2 <USBD_LL_Transmit>

  return USBD_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	60f8      	str	r0, [r7, #12]
 800748e:	60b9      	str	r1, [r7, #8]
 8007490:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	2100      	movs	r1, #0
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f003 fe0a 	bl	800b0b2 <USBD_LL_Transmit>

  return USBD_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2203      	movs	r2, #3
 80074b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	2100      	movs	r1, #0
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f003 fe0e 	bl	800b0f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	2100      	movs	r1, #0
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f003 fdfd 	bl	800b0f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2204      	movs	r2, #4
 8007510:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007514:	2300      	movs	r3, #0
 8007516:	2200      	movs	r2, #0
 8007518:	2100      	movs	r1, #0
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f003 fdc9 	bl	800b0b2 <USBD_LL_Transmit>

  return USBD_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2205      	movs	r2, #5
 8007536:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800753a:	2300      	movs	r3, #0
 800753c:	2200      	movs	r2, #0
 800753e:	2100      	movs	r1, #0
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f003 fdd7 	bl	800b0f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007550:	b480      	push	{r7}
 8007552:	b087      	sub	sp, #28
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	4613      	mov	r3, r2
 800755c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800755e:	2301      	movs	r3, #1
 8007560:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007562:	2300      	movs	r3, #0
 8007564:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007566:	4b1f      	ldr	r3, [pc, #124]	; (80075e4 <FATFS_LinkDriverEx+0x94>)
 8007568:	7a5b      	ldrb	r3, [r3, #9]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d131      	bne.n	80075d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007570:	4b1c      	ldr	r3, [pc, #112]	; (80075e4 <FATFS_LinkDriverEx+0x94>)
 8007572:	7a5b      	ldrb	r3, [r3, #9]
 8007574:	b2db      	uxtb	r3, r3
 8007576:	461a      	mov	r2, r3
 8007578:	4b1a      	ldr	r3, [pc, #104]	; (80075e4 <FATFS_LinkDriverEx+0x94>)
 800757a:	2100      	movs	r1, #0
 800757c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800757e:	4b19      	ldr	r3, [pc, #100]	; (80075e4 <FATFS_LinkDriverEx+0x94>)
 8007580:	7a5b      	ldrb	r3, [r3, #9]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	4a17      	ldr	r2, [pc, #92]	; (80075e4 <FATFS_LinkDriverEx+0x94>)
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800758e:	4b15      	ldr	r3, [pc, #84]	; (80075e4 <FATFS_LinkDriverEx+0x94>)
 8007590:	7a5b      	ldrb	r3, [r3, #9]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	461a      	mov	r2, r3
 8007596:	4b13      	ldr	r3, [pc, #76]	; (80075e4 <FATFS_LinkDriverEx+0x94>)
 8007598:	4413      	add	r3, r2
 800759a:	79fa      	ldrb	r2, [r7, #7]
 800759c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800759e:	4b11      	ldr	r3, [pc, #68]	; (80075e4 <FATFS_LinkDriverEx+0x94>)
 80075a0:	7a5b      	ldrb	r3, [r3, #9]
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	b2d1      	uxtb	r1, r2
 80075a8:	4a0e      	ldr	r2, [pc, #56]	; (80075e4 <FATFS_LinkDriverEx+0x94>)
 80075aa:	7251      	strb	r1, [r2, #9]
 80075ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80075ae:	7dbb      	ldrb	r3, [r7, #22]
 80075b0:	3330      	adds	r3, #48	; 0x30
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	3301      	adds	r3, #1
 80075bc:	223a      	movs	r2, #58	; 0x3a
 80075be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	3302      	adds	r3, #2
 80075c4:	222f      	movs	r2, #47	; 0x2f
 80075c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	3303      	adds	r3, #3
 80075cc:	2200      	movs	r2, #0
 80075ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	371c      	adds	r7, #28
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	2000022c 	.word	0x2000022c

080075e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80075f2:	2200      	movs	r2, #0
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7ff ffaa 	bl	8007550 <FATFS_LinkDriverEx>
 80075fc:	4603      	mov	r3, r0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007606:	b480      	push	{r7}
 8007608:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800760a:	bf00      	nop
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800761a:	f3ef 8305 	mrs	r3, IPSR
 800761e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007620:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10f      	bne.n	8007646 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007626:	f3ef 8310 	mrs	r3, PRIMASK
 800762a:	607b      	str	r3, [r7, #4]
  return(result);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d105      	bne.n	800763e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007632:	f3ef 8311 	mrs	r3, BASEPRI
 8007636:	603b      	str	r3, [r7, #0]
  return(result);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d007      	beq.n	800764e <osKernelInitialize+0x3a>
 800763e:	4b0e      	ldr	r3, [pc, #56]	; (8007678 <osKernelInitialize+0x64>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b02      	cmp	r3, #2
 8007644:	d103      	bne.n	800764e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007646:	f06f 0305 	mvn.w	r3, #5
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	e00c      	b.n	8007668 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800764e:	4b0a      	ldr	r3, [pc, #40]	; (8007678 <osKernelInitialize+0x64>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d105      	bne.n	8007662 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007656:	4b08      	ldr	r3, [pc, #32]	; (8007678 <osKernelInitialize+0x64>)
 8007658:	2201      	movs	r2, #1
 800765a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800765c:	2300      	movs	r3, #0
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	e002      	b.n	8007668 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007662:	f04f 33ff 	mov.w	r3, #4294967295
 8007666:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007668:	68fb      	ldr	r3, [r7, #12]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	20000238 	.word	0x20000238

0800767c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007682:	f3ef 8305 	mrs	r3, IPSR
 8007686:	60bb      	str	r3, [r7, #8]
  return(result);
 8007688:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10f      	bne.n	80076ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800768e:	f3ef 8310 	mrs	r3, PRIMASK
 8007692:	607b      	str	r3, [r7, #4]
  return(result);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d105      	bne.n	80076a6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800769a:	f3ef 8311 	mrs	r3, BASEPRI
 800769e:	603b      	str	r3, [r7, #0]
  return(result);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d007      	beq.n	80076b6 <osKernelStart+0x3a>
 80076a6:	4b0f      	ldr	r3, [pc, #60]	; (80076e4 <osKernelStart+0x68>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d103      	bne.n	80076b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80076ae:	f06f 0305 	mvn.w	r3, #5
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	e010      	b.n	80076d8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80076b6:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <osKernelStart+0x68>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d109      	bne.n	80076d2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80076be:	f7ff ffa2 	bl	8007606 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80076c2:	4b08      	ldr	r3, [pc, #32]	; (80076e4 <osKernelStart+0x68>)
 80076c4:	2202      	movs	r2, #2
 80076c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80076c8:	f001 f8ca 	bl	8008860 <vTaskStartScheduler>
      stat = osOK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]
 80076d0:	e002      	b.n	80076d8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80076d2:	f04f 33ff 	mov.w	r3, #4294967295
 80076d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80076d8:	68fb      	ldr	r3, [r7, #12]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	20000238 	.word	0x20000238

080076e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b090      	sub	sp, #64	; 0x40
 80076ec:	af04      	add	r7, sp, #16
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80076f4:	2300      	movs	r3, #0
 80076f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076f8:	f3ef 8305 	mrs	r3, IPSR
 80076fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80076fe:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007700:	2b00      	cmp	r3, #0
 8007702:	f040 808f 	bne.w	8007824 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007706:	f3ef 8310 	mrs	r3, PRIMASK
 800770a:	61bb      	str	r3, [r7, #24]
  return(result);
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d105      	bne.n	800771e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007712:	f3ef 8311 	mrs	r3, BASEPRI
 8007716:	617b      	str	r3, [r7, #20]
  return(result);
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <osThreadNew+0x3e>
 800771e:	4b44      	ldr	r3, [pc, #272]	; (8007830 <osThreadNew+0x148>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b02      	cmp	r3, #2
 8007724:	d07e      	beq.n	8007824 <osThreadNew+0x13c>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d07b      	beq.n	8007824 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800772c:	2380      	movs	r3, #128	; 0x80
 800772e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007730:	2318      	movs	r3, #24
 8007732:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007734:	2300      	movs	r3, #0
 8007736:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007738:	f04f 33ff 	mov.w	r3, #4294967295
 800773c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d045      	beq.n	80077d0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <osThreadNew+0x6a>
        name = attr->name;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d002      	beq.n	8007760 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	2b00      	cmp	r3, #0
 8007764:	d008      	beq.n	8007778 <osThreadNew+0x90>
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	2b38      	cmp	r3, #56	; 0x38
 800776a:	d805      	bhi.n	8007778 <osThreadNew+0x90>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <osThreadNew+0x94>
        return (NULL);
 8007778:	2300      	movs	r3, #0
 800777a:	e054      	b.n	8007826 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	089b      	lsrs	r3, r3, #2
 800778a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00e      	beq.n	80077b2 <osThreadNew+0xca>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	2bbb      	cmp	r3, #187	; 0xbb
 800779a:	d90a      	bls.n	80077b2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d006      	beq.n	80077b2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d002      	beq.n	80077b2 <osThreadNew+0xca>
        mem = 1;
 80077ac:	2301      	movs	r3, #1
 80077ae:	623b      	str	r3, [r7, #32]
 80077b0:	e010      	b.n	80077d4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10c      	bne.n	80077d4 <osThreadNew+0xec>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d108      	bne.n	80077d4 <osThreadNew+0xec>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d104      	bne.n	80077d4 <osThreadNew+0xec>
          mem = 0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	623b      	str	r3, [r7, #32]
 80077ce:	e001      	b.n	80077d4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80077d0:	2300      	movs	r3, #0
 80077d2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d110      	bne.n	80077fc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077e2:	9202      	str	r2, [sp, #8]
 80077e4:	9301      	str	r3, [sp, #4]
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 fe3f 	bl	8008474 <xTaskCreateStatic>
 80077f6:	4603      	mov	r3, r0
 80077f8:	613b      	str	r3, [r7, #16]
 80077fa:	e013      	b.n	8007824 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d110      	bne.n	8007824 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007804:	b29a      	uxth	r2, r3
 8007806:	f107 0310 	add.w	r3, r7, #16
 800780a:	9301      	str	r3, [sp, #4]
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f000 fe90 	bl	800853a <xTaskCreate>
 800781a:	4603      	mov	r3, r0
 800781c:	2b01      	cmp	r3, #1
 800781e:	d001      	beq.n	8007824 <osThreadNew+0x13c>
          hTask = NULL;
 8007820:	2300      	movs	r3, #0
 8007822:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007824:	693b      	ldr	r3, [r7, #16]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3730      	adds	r7, #48	; 0x30
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000238 	.word	0x20000238

08007834 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800783c:	f3ef 8305 	mrs	r3, IPSR
 8007840:	613b      	str	r3, [r7, #16]
  return(result);
 8007842:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10f      	bne.n	8007868 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007848:	f3ef 8310 	mrs	r3, PRIMASK
 800784c:	60fb      	str	r3, [r7, #12]
  return(result);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d105      	bne.n	8007860 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007854:	f3ef 8311 	mrs	r3, BASEPRI
 8007858:	60bb      	str	r3, [r7, #8]
  return(result);
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d007      	beq.n	8007870 <osDelay+0x3c>
 8007860:	4b0a      	ldr	r3, [pc, #40]	; (800788c <osDelay+0x58>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b02      	cmp	r3, #2
 8007866:	d103      	bne.n	8007870 <osDelay+0x3c>
    stat = osErrorISR;
 8007868:	f06f 0305 	mvn.w	r3, #5
 800786c:	617b      	str	r3, [r7, #20]
 800786e:	e007      	b.n	8007880 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007870:	2300      	movs	r3, #0
 8007872:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <osDelay+0x4c>
      vTaskDelay(ticks);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 ffba 	bl	80087f4 <vTaskDelay>
    }
  }

  return (stat);
 8007880:	697b      	ldr	r3, [r7, #20]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	20000238 	.word	0x20000238

08007890 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4a07      	ldr	r2, [pc, #28]	; (80078bc <vApplicationGetIdleTaskMemory+0x2c>)
 80078a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	4a06      	ldr	r2, [pc, #24]	; (80078c0 <vApplicationGetIdleTaskMemory+0x30>)
 80078a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2280      	movs	r2, #128	; 0x80
 80078ac:	601a      	str	r2, [r3, #0]
}
 80078ae:	bf00      	nop
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	2000023c 	.word	0x2000023c
 80078c0:	200002f8 	.word	0x200002f8

080078c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4a07      	ldr	r2, [pc, #28]	; (80078f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80078d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	4a06      	ldr	r2, [pc, #24]	; (80078f4 <vApplicationGetTimerTaskMemory+0x30>)
 80078da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078e2:	601a      	str	r2, [r3, #0]
}
 80078e4:	bf00      	nop
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr
 80078f0:	200004f8 	.word	0x200004f8
 80078f4:	200005b4 	.word	0x200005b4

080078f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f103 0208 	add.w	r2, r3, #8
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f04f 32ff 	mov.w	r2, #4294967295
 8007910:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f103 0208 	add.w	r2, r3, #8
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f103 0208 	add.w	r2, r3, #8
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007952:	b480      	push	{r7}
 8007954:	b085      	sub	sp, #20
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	601a      	str	r2, [r3, #0]
}
 800798e:	bf00      	nop
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800799a:	b480      	push	{r7}
 800799c:	b085      	sub	sp, #20
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b0:	d103      	bne.n	80079ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	e00c      	b.n	80079d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	3308      	adds	r3, #8
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	e002      	b.n	80079c8 <vListInsert+0x2e>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d2f6      	bcs.n	80079c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	601a      	str	r2, [r3, #0]
}
 8007a00:	bf00      	nop
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6892      	ldr	r2, [r2, #8]
 8007a22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6852      	ldr	r2, [r2, #4]
 8007a2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d103      	bne.n	8007a40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689a      	ldr	r2, [r3, #8]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	1e5a      	subs	r2, r3, #1
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10c      	bne.n	8007a8e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a78:	b672      	cpsid	i
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	b662      	cpsie	i
 8007a88:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a8a:	bf00      	nop
 8007a8c:	e7fe      	b.n	8007a8c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007a8e:	f002 f8a5 	bl	8009bdc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9a:	68f9      	ldr	r1, [r7, #12]
 8007a9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a9e:	fb01 f303 	mul.w	r3, r1, r3
 8007aa2:	441a      	add	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	68f9      	ldr	r1, [r7, #12]
 8007ac2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ac4:	fb01 f303 	mul.w	r3, r1, r3
 8007ac8:	441a      	add	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	22ff      	movs	r2, #255	; 0xff
 8007ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	22ff      	movs	r2, #255	; 0xff
 8007ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d114      	bne.n	8007b0e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d01a      	beq.n	8007b22 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	3310      	adds	r3, #16
 8007af0:	4618      	mov	r0, r3
 8007af2:	f001 f95d 	bl	8008db0 <xTaskRemoveFromEventList>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d012      	beq.n	8007b22 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007afc:	4b0c      	ldr	r3, [pc, #48]	; (8007b30 <xQueueGenericReset+0xd0>)
 8007afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	e009      	b.n	8007b22 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3310      	adds	r3, #16
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7ff fef0 	bl	80078f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3324      	adds	r3, #36	; 0x24
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff feeb 	bl	80078f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b22:	f002 f88f 	bl	8009c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b26:	2301      	movs	r3, #1
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	e000ed04 	.word	0xe000ed04

08007b34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08e      	sub	sp, #56	; 0x38
 8007b38:	af02      	add	r7, sp, #8
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
 8007b40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10c      	bne.n	8007b62 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4c:	b672      	cpsid	i
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	b662      	cpsie	i
 8007b5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b5e:	bf00      	nop
 8007b60:	e7fe      	b.n	8007b60 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10c      	bne.n	8007b82 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6c:	b672      	cpsid	i
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	b662      	cpsie	i
 8007b7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b7e:	bf00      	nop
 8007b80:	e7fe      	b.n	8007b80 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <xQueueGenericCreateStatic+0x5a>
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <xQueueGenericCreateStatic+0x5e>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e000      	b.n	8007b94 <xQueueGenericCreateStatic+0x60>
 8007b92:	2300      	movs	r3, #0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10c      	bne.n	8007bb2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9c:	b672      	cpsid	i
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	b662      	cpsie	i
 8007bac:	623b      	str	r3, [r7, #32]
}
 8007bae:	bf00      	nop
 8007bb0:	e7fe      	b.n	8007bb0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d102      	bne.n	8007bbe <xQueueGenericCreateStatic+0x8a>
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d101      	bne.n	8007bc2 <xQueueGenericCreateStatic+0x8e>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e000      	b.n	8007bc4 <xQueueGenericCreateStatic+0x90>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10c      	bne.n	8007be2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	b672      	cpsid	i
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	b662      	cpsie	i
 8007bdc:	61fb      	str	r3, [r7, #28]
}
 8007bde:	bf00      	nop
 8007be0:	e7fe      	b.n	8007be0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007be2:	2350      	movs	r3, #80	; 0x50
 8007be4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	2b50      	cmp	r3, #80	; 0x50
 8007bea:	d00c      	beq.n	8007c06 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf0:	b672      	cpsid	i
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	b662      	cpsie	i
 8007c00:	61bb      	str	r3, [r7, #24]
}
 8007c02:	bf00      	nop
 8007c04:	e7fe      	b.n	8007c04 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00d      	beq.n	8007c2e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	4613      	mov	r3, r2
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 f805 	bl	8007c38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3730      	adds	r7, #48	; 0x30
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
 8007c44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d103      	bne.n	8007c54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	e002      	b.n	8007c5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c66:	2101      	movs	r1, #1
 8007c68:	69b8      	ldr	r0, [r7, #24]
 8007c6a:	f7ff fef9 	bl	8007a60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	78fa      	ldrb	r2, [r7, #3]
 8007c72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c76:	bf00      	nop
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08e      	sub	sp, #56	; 0x38
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10c      	bne.n	8007cb6 <xQueueGenericSend+0x36>
	__asm volatile
 8007c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca0:	b672      	cpsid	i
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	b662      	cpsie	i
 8007cb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007cb2:	bf00      	nop
 8007cb4:	e7fe      	b.n	8007cb4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d103      	bne.n	8007cc4 <xQueueGenericSend+0x44>
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <xQueueGenericSend+0x48>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e000      	b.n	8007cca <xQueueGenericSend+0x4a>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10c      	bne.n	8007ce8 <xQueueGenericSend+0x68>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	b672      	cpsid	i
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	b662      	cpsie	i
 8007ce2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d103      	bne.n	8007cf6 <xQueueGenericSend+0x76>
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d101      	bne.n	8007cfa <xQueueGenericSend+0x7a>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e000      	b.n	8007cfc <xQueueGenericSend+0x7c>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10c      	bne.n	8007d1a <xQueueGenericSend+0x9a>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	b672      	cpsid	i
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	b662      	cpsie	i
 8007d14:	623b      	str	r3, [r7, #32]
}
 8007d16:	bf00      	nop
 8007d18:	e7fe      	b.n	8007d18 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d1a:	f001 fa13 	bl	8009144 <xTaskGetSchedulerState>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d102      	bne.n	8007d2a <xQueueGenericSend+0xaa>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <xQueueGenericSend+0xae>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e000      	b.n	8007d30 <xQueueGenericSend+0xb0>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10c      	bne.n	8007d4e <xQueueGenericSend+0xce>
	__asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d38:	b672      	cpsid	i
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	b662      	cpsie	i
 8007d48:	61fb      	str	r3, [r7, #28]
}
 8007d4a:	bf00      	nop
 8007d4c:	e7fe      	b.n	8007d4c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d4e:	f001 ff45 	bl	8009bdc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d302      	bcc.n	8007d64 <xQueueGenericSend+0xe4>
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d129      	bne.n	8007db8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	68b9      	ldr	r1, [r7, #8]
 8007d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d6a:	f000 fa15 	bl	8008198 <prvCopyDataToQueue>
 8007d6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d010      	beq.n	8007d9a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	3324      	adds	r3, #36	; 0x24
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f001 f817 	bl	8008db0 <xTaskRemoveFromEventList>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d013      	beq.n	8007db0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d88:	4b3f      	ldr	r3, [pc, #252]	; (8007e88 <xQueueGenericSend+0x208>)
 8007d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d8e:	601a      	str	r2, [r3, #0]
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	e00a      	b.n	8007db0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d007      	beq.n	8007db0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007da0:	4b39      	ldr	r3, [pc, #228]	; (8007e88 <xQueueGenericSend+0x208>)
 8007da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da6:	601a      	str	r2, [r3, #0]
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007db0:	f001 ff48 	bl	8009c44 <vPortExitCritical>
				return pdPASS;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e063      	b.n	8007e80 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d103      	bne.n	8007dc6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dbe:	f001 ff41 	bl	8009c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	e05c      	b.n	8007e80 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d106      	bne.n	8007dda <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dcc:	f107 0314 	add.w	r3, r7, #20
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f001 f853 	bl	8008e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dda:	f001 ff33 	bl	8009c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007dde:	f000 fdb3 	bl	8008948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007de2:	f001 fefb 	bl	8009bdc <vPortEnterCritical>
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dec:	b25b      	sxtb	r3, r3
 8007dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df2:	d103      	bne.n	8007dfc <xQueueGenericSend+0x17c>
 8007df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e02:	b25b      	sxtb	r3, r3
 8007e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e08:	d103      	bne.n	8007e12 <xQueueGenericSend+0x192>
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e12:	f001 ff17 	bl	8009c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e16:	1d3a      	adds	r2, r7, #4
 8007e18:	f107 0314 	add.w	r3, r7, #20
 8007e1c:	4611      	mov	r1, r2
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f001 f842 	bl	8008ea8 <xTaskCheckForTimeOut>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d124      	bne.n	8007e74 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e2c:	f000 faac 	bl	8008388 <prvIsQueueFull>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d018      	beq.n	8007e68 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	3310      	adds	r3, #16
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 ff62 	bl	8008d08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e46:	f000 fa37 	bl	80082b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e4a:	f000 fd8b 	bl	8008964 <xTaskResumeAll>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f47f af7c 	bne.w	8007d4e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007e56:	4b0c      	ldr	r3, [pc, #48]	; (8007e88 <xQueueGenericSend+0x208>)
 8007e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	e772      	b.n	8007d4e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e6a:	f000 fa25 	bl	80082b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e6e:	f000 fd79 	bl	8008964 <xTaskResumeAll>
 8007e72:	e76c      	b.n	8007d4e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e76:	f000 fa1f 	bl	80082b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e7a:	f000 fd73 	bl	8008964 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3738      	adds	r7, #56	; 0x38
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	e000ed04 	.word	0xe000ed04

08007e8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b08e      	sub	sp, #56	; 0x38
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
 8007e98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10c      	bne.n	8007ebe <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea8:	b672      	cpsid	i
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	b662      	cpsie	i
 8007eb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007eba:	bf00      	nop
 8007ebc:	e7fe      	b.n	8007ebc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d103      	bne.n	8007ecc <xQueueGenericSendFromISR+0x40>
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <xQueueGenericSendFromISR+0x44>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e000      	b.n	8007ed2 <xQueueGenericSendFromISR+0x46>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10c      	bne.n	8007ef0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eda:	b672      	cpsid	i
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	b662      	cpsie	i
 8007eea:	623b      	str	r3, [r7, #32]
}
 8007eec:	bf00      	nop
 8007eee:	e7fe      	b.n	8007eee <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d103      	bne.n	8007efe <xQueueGenericSendFromISR+0x72>
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d101      	bne.n	8007f02 <xQueueGenericSendFromISR+0x76>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e000      	b.n	8007f04 <xQueueGenericSendFromISR+0x78>
 8007f02:	2300      	movs	r3, #0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10c      	bne.n	8007f22 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	b672      	cpsid	i
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	b662      	cpsie	i
 8007f1c:	61fb      	str	r3, [r7, #28]
}
 8007f1e:	bf00      	nop
 8007f20:	e7fe      	b.n	8007f20 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f22:	f001 ff43 	bl	8009dac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f26:	f3ef 8211 	mrs	r2, BASEPRI
 8007f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2e:	b672      	cpsid	i
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	b662      	cpsie	i
 8007f3e:	61ba      	str	r2, [r7, #24]
 8007f40:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f42:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d302      	bcc.n	8007f58 <xQueueGenericSendFromISR+0xcc>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d12c      	bne.n	8007fb2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f62:	683a      	ldr	r2, [r7, #0]
 8007f64:	68b9      	ldr	r1, [r7, #8]
 8007f66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f68:	f000 f916 	bl	8008198 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f6c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f74:	d112      	bne.n	8007f9c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d016      	beq.n	8007fac <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	3324      	adds	r3, #36	; 0x24
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 ff14 	bl	8008db0 <xTaskRemoveFromEventList>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00e      	beq.n	8007fac <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	e007      	b.n	8007fac <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	b25a      	sxtb	r2, r3
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007fac:	2301      	movs	r3, #1
 8007fae:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007fb0:	e001      	b.n	8007fb6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8007fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3738      	adds	r7, #56	; 0x38
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08c      	sub	sp, #48	; 0x30
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10c      	bne.n	8008000 <xQueueReceive+0x34>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fea:	b672      	cpsid	i
 8007fec:	f383 8811 	msr	BASEPRI, r3
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	b662      	cpsie	i
 8007ffa:	623b      	str	r3, [r7, #32]
}
 8007ffc:	bf00      	nop
 8007ffe:	e7fe      	b.n	8007ffe <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d103      	bne.n	800800e <xQueueReceive+0x42>
 8008006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <xQueueReceive+0x46>
 800800e:	2301      	movs	r3, #1
 8008010:	e000      	b.n	8008014 <xQueueReceive+0x48>
 8008012:	2300      	movs	r3, #0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10c      	bne.n	8008032 <xQueueReceive+0x66>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801c:	b672      	cpsid	i
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	b662      	cpsie	i
 800802c:	61fb      	str	r3, [r7, #28]
}
 800802e:	bf00      	nop
 8008030:	e7fe      	b.n	8008030 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008032:	f001 f887 	bl	8009144 <xTaskGetSchedulerState>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d102      	bne.n	8008042 <xQueueReceive+0x76>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <xQueueReceive+0x7a>
 8008042:	2301      	movs	r3, #1
 8008044:	e000      	b.n	8008048 <xQueueReceive+0x7c>
 8008046:	2300      	movs	r3, #0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10c      	bne.n	8008066 <xQueueReceive+0x9a>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	b672      	cpsid	i
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	b662      	cpsie	i
 8008060:	61bb      	str	r3, [r7, #24]
}
 8008062:	bf00      	nop
 8008064:	e7fe      	b.n	8008064 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008066:	f001 fdb9 	bl	8009bdc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800806a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	2b00      	cmp	r3, #0
 8008074:	d01f      	beq.n	80080b6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008076:	68b9      	ldr	r1, [r7, #8]
 8008078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800807a:	f000 f8f7 	bl	800826c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	1e5a      	subs	r2, r3, #1
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00f      	beq.n	80080ae <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800808e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008090:	3310      	adds	r3, #16
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fe8c 	bl	8008db0 <xTaskRemoveFromEventList>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d007      	beq.n	80080ae <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800809e:	4b3d      	ldr	r3, [pc, #244]	; (8008194 <xQueueReceive+0x1c8>)
 80080a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080ae:	f001 fdc9 	bl	8009c44 <vPortExitCritical>
				return pdPASS;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e069      	b.n	800818a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d103      	bne.n	80080c4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080bc:	f001 fdc2 	bl	8009c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080c0:	2300      	movs	r3, #0
 80080c2:	e062      	b.n	800818a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d106      	bne.n	80080d8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080ca:	f107 0310 	add.w	r3, r7, #16
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 fed4 	bl	8008e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080d4:	2301      	movs	r3, #1
 80080d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080d8:	f001 fdb4 	bl	8009c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080dc:	f000 fc34 	bl	8008948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080e0:	f001 fd7c 	bl	8009bdc <vPortEnterCritical>
 80080e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080ea:	b25b      	sxtb	r3, r3
 80080ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f0:	d103      	bne.n	80080fa <xQueueReceive+0x12e>
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008100:	b25b      	sxtb	r3, r3
 8008102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008106:	d103      	bne.n	8008110 <xQueueReceive+0x144>
 8008108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008110:	f001 fd98 	bl	8009c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008114:	1d3a      	adds	r2, r7, #4
 8008116:	f107 0310 	add.w	r3, r7, #16
 800811a:	4611      	mov	r1, r2
 800811c:	4618      	mov	r0, r3
 800811e:	f000 fec3 	bl	8008ea8 <xTaskCheckForTimeOut>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d123      	bne.n	8008170 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800812a:	f000 f917 	bl	800835c <prvIsQueueEmpty>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d017      	beq.n	8008164 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	3324      	adds	r3, #36	; 0x24
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f000 fde3 	bl	8008d08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008144:	f000 f8b8 	bl	80082b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008148:	f000 fc0c 	bl	8008964 <xTaskResumeAll>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d189      	bne.n	8008066 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008152:	4b10      	ldr	r3, [pc, #64]	; (8008194 <xQueueReceive+0x1c8>)
 8008154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	e780      	b.n	8008066 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008166:	f000 f8a7 	bl	80082b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800816a:	f000 fbfb 	bl	8008964 <xTaskResumeAll>
 800816e:	e77a      	b.n	8008066 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008172:	f000 f8a1 	bl	80082b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008176:	f000 fbf5 	bl	8008964 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800817a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800817c:	f000 f8ee 	bl	800835c <prvIsQueueEmpty>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	f43f af6f 	beq.w	8008066 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008188:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800818a:	4618      	mov	r0, r3
 800818c:	3730      	adds	r7, #48	; 0x30
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	e000ed04 	.word	0xe000ed04

08008198 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081a4:	2300      	movs	r3, #0
 80081a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10d      	bne.n	80081d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d14d      	bne.n	800825a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 ffdc 	bl	8009180 <xTaskPriorityDisinherit>
 80081c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	609a      	str	r2, [r3, #8]
 80081d0:	e043      	b.n	800825a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d119      	bne.n	800820c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6858      	ldr	r0, [r3, #4]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e0:	461a      	mov	r2, r3
 80081e2:	68b9      	ldr	r1, [r7, #8]
 80081e4:	f003 fa9e 	bl	800b724 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f0:	441a      	add	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d32b      	bcc.n	800825a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	605a      	str	r2, [r3, #4]
 800820a:	e026      	b.n	800825a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	68d8      	ldr	r0, [r3, #12]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008214:	461a      	mov	r2, r3
 8008216:	68b9      	ldr	r1, [r7, #8]
 8008218:	f003 fa84 	bl	800b724 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	68da      	ldr	r2, [r3, #12]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008224:	425b      	negs	r3, r3
 8008226:	441a      	add	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	68da      	ldr	r2, [r3, #12]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	429a      	cmp	r2, r3
 8008236:	d207      	bcs.n	8008248 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	689a      	ldr	r2, [r3, #8]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008240:	425b      	negs	r3, r3
 8008242:	441a      	add	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b02      	cmp	r3, #2
 800824c:	d105      	bne.n	800825a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	3b01      	subs	r3, #1
 8008258:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	1c5a      	adds	r2, r3, #1
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008262:	697b      	ldr	r3, [r7, #20]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827a:	2b00      	cmp	r3, #0
 800827c:	d018      	beq.n	80082b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008286:	441a      	add	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	429a      	cmp	r2, r3
 8008296:	d303      	bcc.n	80082a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68d9      	ldr	r1, [r3, #12]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a8:	461a      	mov	r2, r3
 80082aa:	6838      	ldr	r0, [r7, #0]
 80082ac:	f003 fa3a 	bl	800b724 <memcpy>
	}
}
 80082b0:	bf00      	nop
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082c0:	f001 fc8c 	bl	8009bdc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082cc:	e011      	b.n	80082f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d012      	beq.n	80082fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3324      	adds	r3, #36	; 0x24
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 fd68 	bl	8008db0 <xTaskRemoveFromEventList>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082e6:	f000 fe45 	bl	8008f74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	dce9      	bgt.n	80082ce <prvUnlockQueue+0x16>
 80082fa:	e000      	b.n	80082fe <prvUnlockQueue+0x46>
					break;
 80082fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	22ff      	movs	r2, #255	; 0xff
 8008302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008306:	f001 fc9d 	bl	8009c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800830a:	f001 fc67 	bl	8009bdc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008314:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008316:	e011      	b.n	800833c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d012      	beq.n	8008346 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	3310      	adds	r3, #16
 8008324:	4618      	mov	r0, r3
 8008326:	f000 fd43 	bl	8008db0 <xTaskRemoveFromEventList>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008330:	f000 fe20 	bl	8008f74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008334:	7bbb      	ldrb	r3, [r7, #14]
 8008336:	3b01      	subs	r3, #1
 8008338:	b2db      	uxtb	r3, r3
 800833a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800833c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008340:	2b00      	cmp	r3, #0
 8008342:	dce9      	bgt.n	8008318 <prvUnlockQueue+0x60>
 8008344:	e000      	b.n	8008348 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008346:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	22ff      	movs	r2, #255	; 0xff
 800834c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008350:	f001 fc78 	bl	8009c44 <vPortExitCritical>
}
 8008354:	bf00      	nop
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008364:	f001 fc3a 	bl	8009bdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836c:	2b00      	cmp	r3, #0
 800836e:	d102      	bne.n	8008376 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008370:	2301      	movs	r3, #1
 8008372:	60fb      	str	r3, [r7, #12]
 8008374:	e001      	b.n	800837a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008376:	2300      	movs	r3, #0
 8008378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800837a:	f001 fc63 	bl	8009c44 <vPortExitCritical>

	return xReturn;
 800837e:	68fb      	ldr	r3, [r7, #12]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008390:	f001 fc24 	bl	8009bdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800839c:	429a      	cmp	r2, r3
 800839e:	d102      	bne.n	80083a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083a0:	2301      	movs	r3, #1
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	e001      	b.n	80083aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083a6:	2300      	movs	r3, #0
 80083a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083aa:	f001 fc4b 	bl	8009c44 <vPortExitCritical>

	return xReturn;
 80083ae:	68fb      	ldr	r3, [r7, #12]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083c2:	2300      	movs	r3, #0
 80083c4:	60fb      	str	r3, [r7, #12]
 80083c6:	e014      	b.n	80083f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083c8:	4a0f      	ldr	r2, [pc, #60]	; (8008408 <vQueueAddToRegistry+0x50>)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10b      	bne.n	80083ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083d4:	490c      	ldr	r1, [pc, #48]	; (8008408 <vQueueAddToRegistry+0x50>)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083de:	4a0a      	ldr	r2, [pc, #40]	; (8008408 <vQueueAddToRegistry+0x50>)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	00db      	lsls	r3, r3, #3
 80083e4:	4413      	add	r3, r2
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083ea:	e006      	b.n	80083fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	3301      	adds	r3, #1
 80083f0:	60fb      	str	r3, [r7, #12]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2b07      	cmp	r3, #7
 80083f6:	d9e7      	bls.n	80083c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	20004cf4 	.word	0x20004cf4

0800840c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800841c:	f001 fbde 	bl	8009bdc <vPortEnterCritical>
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008426:	b25b      	sxtb	r3, r3
 8008428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842c:	d103      	bne.n	8008436 <vQueueWaitForMessageRestricted+0x2a>
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800843c:	b25b      	sxtb	r3, r3
 800843e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008442:	d103      	bne.n	800844c <vQueueWaitForMessageRestricted+0x40>
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800844c:	f001 fbfa 	bl	8009c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008454:	2b00      	cmp	r3, #0
 8008456:	d106      	bne.n	8008466 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	3324      	adds	r3, #36	; 0x24
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	68b9      	ldr	r1, [r7, #8]
 8008460:	4618      	mov	r0, r3
 8008462:	f000 fc77 	bl	8008d54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008466:	6978      	ldr	r0, [r7, #20]
 8008468:	f7ff ff26 	bl	80082b8 <prvUnlockQueue>
	}
 800846c:	bf00      	nop
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008474:	b580      	push	{r7, lr}
 8008476:	b08e      	sub	sp, #56	; 0x38
 8008478:	af04      	add	r7, sp, #16
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10c      	bne.n	80084a2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848c:	b672      	cpsid	i
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	b662      	cpsie	i
 800849c:	623b      	str	r3, [r7, #32]
}
 800849e:	bf00      	nop
 80084a0:	e7fe      	b.n	80084a0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80084a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10c      	bne.n	80084c2 <xTaskCreateStatic+0x4e>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ac:	b672      	cpsid	i
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	b662      	cpsie	i
 80084bc:	61fb      	str	r3, [r7, #28]
}
 80084be:	bf00      	nop
 80084c0:	e7fe      	b.n	80084c0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084c2:	23bc      	movs	r3, #188	; 0xbc
 80084c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	2bbc      	cmp	r3, #188	; 0xbc
 80084ca:	d00c      	beq.n	80084e6 <xTaskCreateStatic+0x72>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d0:	b672      	cpsid	i
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	b662      	cpsie	i
 80084e0:	61bb      	str	r3, [r7, #24]
}
 80084e2:	bf00      	nop
 80084e4:	e7fe      	b.n	80084e4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d01e      	beq.n	800852c <xTaskCreateStatic+0xb8>
 80084ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d01b      	beq.n	800852c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	2202      	movs	r2, #2
 8008502:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008506:	2300      	movs	r3, #0
 8008508:	9303      	str	r3, [sp, #12]
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	9302      	str	r3, [sp, #8]
 800850e:	f107 0314 	add.w	r3, r7, #20
 8008512:	9301      	str	r3, [sp, #4]
 8008514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	68b9      	ldr	r1, [r7, #8]
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f000 f850 	bl	80085c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008526:	f000 f8f5 	bl	8008714 <prvAddNewTaskToReadyList>
 800852a:	e001      	b.n	8008530 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800852c:	2300      	movs	r3, #0
 800852e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008530:	697b      	ldr	r3, [r7, #20]
	}
 8008532:	4618      	mov	r0, r3
 8008534:	3728      	adds	r7, #40	; 0x28
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800853a:	b580      	push	{r7, lr}
 800853c:	b08c      	sub	sp, #48	; 0x30
 800853e:	af04      	add	r7, sp, #16
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	603b      	str	r3, [r7, #0]
 8008546:	4613      	mov	r3, r2
 8008548:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800854a:	88fb      	ldrh	r3, [r7, #6]
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	4618      	mov	r0, r3
 8008550:	f001 fc70 	bl	8009e34 <pvPortMalloc>
 8008554:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00e      	beq.n	800857a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800855c:	20bc      	movs	r0, #188	; 0xbc
 800855e:	f001 fc69 	bl	8009e34 <pvPortMalloc>
 8008562:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d003      	beq.n	8008572 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	697a      	ldr	r2, [r7, #20]
 800856e:	631a      	str	r2, [r3, #48]	; 0x30
 8008570:	e005      	b.n	800857e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008572:	6978      	ldr	r0, [r7, #20]
 8008574:	f001 fd28 	bl	8009fc8 <vPortFree>
 8008578:	e001      	b.n	800857e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800857a:	2300      	movs	r3, #0
 800857c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d017      	beq.n	80085b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800858c:	88fa      	ldrh	r2, [r7, #6]
 800858e:	2300      	movs	r3, #0
 8008590:	9303      	str	r3, [sp, #12]
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	9302      	str	r3, [sp, #8]
 8008596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008598:	9301      	str	r3, [sp, #4]
 800859a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	68b9      	ldr	r1, [r7, #8]
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f000 f80e 	bl	80085c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085a8:	69f8      	ldr	r0, [r7, #28]
 80085aa:	f000 f8b3 	bl	8008714 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085ae:	2301      	movs	r3, #1
 80085b0:	61bb      	str	r3, [r7, #24]
 80085b2:	e002      	b.n	80085ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085b4:	f04f 33ff 	mov.w	r3, #4294967295
 80085b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085ba:	69bb      	ldr	r3, [r7, #24]
	}
 80085bc:	4618      	mov	r0, r3
 80085be:	3720      	adds	r7, #32
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	461a      	mov	r2, r3
 80085dc:	21a5      	movs	r1, #165	; 0xa5
 80085de:	f003 f8af 	bl	800b740 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085e6:	6879      	ldr	r1, [r7, #4]
 80085e8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80085ec:	440b      	add	r3, r1
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	f023 0307 	bic.w	r3, r3, #7
 80085fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	f003 0307 	and.w	r3, r3, #7
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00c      	beq.n	8008620 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860a:	b672      	cpsid	i
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	b662      	cpsie	i
 800861a:	617b      	str	r3, [r7, #20]
}
 800861c:	bf00      	nop
 800861e:	e7fe      	b.n	800861e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d01f      	beq.n	8008666 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008626:	2300      	movs	r3, #0
 8008628:	61fb      	str	r3, [r7, #28]
 800862a:	e012      	b.n	8008652 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	4413      	add	r3, r2
 8008632:	7819      	ldrb	r1, [r3, #0]
 8008634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	4413      	add	r3, r2
 800863a:	3334      	adds	r3, #52	; 0x34
 800863c:	460a      	mov	r2, r1
 800863e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	4413      	add	r3, r2
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d006      	beq.n	800865a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	3301      	adds	r3, #1
 8008650:	61fb      	str	r3, [r7, #28]
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	2b0f      	cmp	r3, #15
 8008656:	d9e9      	bls.n	800862c <prvInitialiseNewTask+0x68>
 8008658:	e000      	b.n	800865c <prvInitialiseNewTask+0x98>
			{
				break;
 800865a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800865c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865e:	2200      	movs	r2, #0
 8008660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008664:	e003      	b.n	800866e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800866e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008670:	2b37      	cmp	r3, #55	; 0x37
 8008672:	d901      	bls.n	8008678 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008674:	2337      	movs	r3, #55	; 0x37
 8008676:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800867c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008682:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008686:	2200      	movs	r2, #0
 8008688:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	3304      	adds	r3, #4
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff f952 	bl	8007938 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008696:	3318      	adds	r3, #24
 8008698:	4618      	mov	r0, r3
 800869a:	f7ff f94d 	bl	8007938 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800869e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b6:	2200      	movs	r2, #0
 80086b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c6:	3354      	adds	r3, #84	; 0x54
 80086c8:	2260      	movs	r2, #96	; 0x60
 80086ca:	2100      	movs	r1, #0
 80086cc:	4618      	mov	r0, r3
 80086ce:	f003 f837 	bl	800b740 <memset>
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	4a0c      	ldr	r2, [pc, #48]	; (8008708 <prvInitialiseNewTask+0x144>)
 80086d6:	659a      	str	r2, [r3, #88]	; 0x58
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	4a0c      	ldr	r2, [pc, #48]	; (800870c <prvInitialiseNewTask+0x148>)
 80086dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	4a0b      	ldr	r2, [pc, #44]	; (8008710 <prvInitialiseNewTask+0x14c>)
 80086e2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	68f9      	ldr	r1, [r7, #12]
 80086e8:	69b8      	ldr	r0, [r7, #24]
 80086ea:	f001 f96b 	bl	80099c4 <pxPortInitialiseStack>
 80086ee:	4602      	mov	r2, r0
 80086f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d002      	beq.n	8008700 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008700:	bf00      	nop
 8008702:	3720      	adds	r7, #32
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	0800ba90 	.word	0x0800ba90
 800870c:	0800bab0 	.word	0x0800bab0
 8008710:	0800ba70 	.word	0x0800ba70

08008714 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800871c:	f001 fa5e 	bl	8009bdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008720:	4b2d      	ldr	r3, [pc, #180]	; (80087d8 <prvAddNewTaskToReadyList+0xc4>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3301      	adds	r3, #1
 8008726:	4a2c      	ldr	r2, [pc, #176]	; (80087d8 <prvAddNewTaskToReadyList+0xc4>)
 8008728:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800872a:	4b2c      	ldr	r3, [pc, #176]	; (80087dc <prvAddNewTaskToReadyList+0xc8>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d109      	bne.n	8008746 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008732:	4a2a      	ldr	r2, [pc, #168]	; (80087dc <prvAddNewTaskToReadyList+0xc8>)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008738:	4b27      	ldr	r3, [pc, #156]	; (80087d8 <prvAddNewTaskToReadyList+0xc4>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d110      	bne.n	8008762 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008740:	f000 fc3c 	bl	8008fbc <prvInitialiseTaskLists>
 8008744:	e00d      	b.n	8008762 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008746:	4b26      	ldr	r3, [pc, #152]	; (80087e0 <prvAddNewTaskToReadyList+0xcc>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d109      	bne.n	8008762 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800874e:	4b23      	ldr	r3, [pc, #140]	; (80087dc <prvAddNewTaskToReadyList+0xc8>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008758:	429a      	cmp	r2, r3
 800875a:	d802      	bhi.n	8008762 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800875c:	4a1f      	ldr	r2, [pc, #124]	; (80087dc <prvAddNewTaskToReadyList+0xc8>)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008762:	4b20      	ldr	r3, [pc, #128]	; (80087e4 <prvAddNewTaskToReadyList+0xd0>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	3301      	adds	r3, #1
 8008768:	4a1e      	ldr	r2, [pc, #120]	; (80087e4 <prvAddNewTaskToReadyList+0xd0>)
 800876a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800876c:	4b1d      	ldr	r3, [pc, #116]	; (80087e4 <prvAddNewTaskToReadyList+0xd0>)
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008778:	4b1b      	ldr	r3, [pc, #108]	; (80087e8 <prvAddNewTaskToReadyList+0xd4>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	429a      	cmp	r2, r3
 800877e:	d903      	bls.n	8008788 <prvAddNewTaskToReadyList+0x74>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008784:	4a18      	ldr	r2, [pc, #96]	; (80087e8 <prvAddNewTaskToReadyList+0xd4>)
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800878c:	4613      	mov	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4413      	add	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4a15      	ldr	r2, [pc, #84]	; (80087ec <prvAddNewTaskToReadyList+0xd8>)
 8008796:	441a      	add	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3304      	adds	r3, #4
 800879c:	4619      	mov	r1, r3
 800879e:	4610      	mov	r0, r2
 80087a0:	f7ff f8d7 	bl	8007952 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087a4:	f001 fa4e 	bl	8009c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087a8:	4b0d      	ldr	r3, [pc, #52]	; (80087e0 <prvAddNewTaskToReadyList+0xcc>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00e      	beq.n	80087ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087b0:	4b0a      	ldr	r3, [pc, #40]	; (80087dc <prvAddNewTaskToReadyList+0xc8>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d207      	bcs.n	80087ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087be:	4b0c      	ldr	r3, [pc, #48]	; (80087f0 <prvAddNewTaskToReadyList+0xdc>)
 80087c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20000e88 	.word	0x20000e88
 80087dc:	200009b4 	.word	0x200009b4
 80087e0:	20000e94 	.word	0x20000e94
 80087e4:	20000ea4 	.word	0x20000ea4
 80087e8:	20000e90 	.word	0x20000e90
 80087ec:	200009b8 	.word	0x200009b8
 80087f0:	e000ed04 	.word	0xe000ed04

080087f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087fc:	2300      	movs	r3, #0
 80087fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d019      	beq.n	800883a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008806:	4b14      	ldr	r3, [pc, #80]	; (8008858 <vTaskDelay+0x64>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00c      	beq.n	8008828 <vTaskDelay+0x34>
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008812:	b672      	cpsid	i
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	b662      	cpsie	i
 8008822:	60bb      	str	r3, [r7, #8]
}
 8008824:	bf00      	nop
 8008826:	e7fe      	b.n	8008826 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008828:	f000 f88e 	bl	8008948 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800882c:	2100      	movs	r1, #0
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fd18 	bl	8009264 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008834:	f000 f896 	bl	8008964 <xTaskResumeAll>
 8008838:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d107      	bne.n	8008850 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008840:	4b06      	ldr	r3, [pc, #24]	; (800885c <vTaskDelay+0x68>)
 8008842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008850:	bf00      	nop
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	20000eb0 	.word	0x20000eb0
 800885c:	e000ed04 	.word	0xe000ed04

08008860 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b08a      	sub	sp, #40	; 0x28
 8008864:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008866:	2300      	movs	r3, #0
 8008868:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800886a:	2300      	movs	r3, #0
 800886c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800886e:	463a      	mov	r2, r7
 8008870:	1d39      	adds	r1, r7, #4
 8008872:	f107 0308 	add.w	r3, r7, #8
 8008876:	4618      	mov	r0, r3
 8008878:	f7ff f80a 	bl	8007890 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	9202      	str	r2, [sp, #8]
 8008884:	9301      	str	r3, [sp, #4]
 8008886:	2300      	movs	r3, #0
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	2300      	movs	r3, #0
 800888c:	460a      	mov	r2, r1
 800888e:	4926      	ldr	r1, [pc, #152]	; (8008928 <vTaskStartScheduler+0xc8>)
 8008890:	4826      	ldr	r0, [pc, #152]	; (800892c <vTaskStartScheduler+0xcc>)
 8008892:	f7ff fdef 	bl	8008474 <xTaskCreateStatic>
 8008896:	4603      	mov	r3, r0
 8008898:	4a25      	ldr	r2, [pc, #148]	; (8008930 <vTaskStartScheduler+0xd0>)
 800889a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800889c:	4b24      	ldr	r3, [pc, #144]	; (8008930 <vTaskStartScheduler+0xd0>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088a4:	2301      	movs	r3, #1
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	e001      	b.n	80088ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d102      	bne.n	80088ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088b4:	f000 fd2a 	bl	800930c <xTimerCreateTimerTask>
 80088b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d11d      	bne.n	80088fc <vTaskStartScheduler+0x9c>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c4:	b672      	cpsid	i
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	b662      	cpsie	i
 80088d4:	613b      	str	r3, [r7, #16]
}
 80088d6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088d8:	4b16      	ldr	r3, [pc, #88]	; (8008934 <vTaskStartScheduler+0xd4>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3354      	adds	r3, #84	; 0x54
 80088de:	4a16      	ldr	r2, [pc, #88]	; (8008938 <vTaskStartScheduler+0xd8>)
 80088e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088e2:	4b16      	ldr	r3, [pc, #88]	; (800893c <vTaskStartScheduler+0xdc>)
 80088e4:	f04f 32ff 	mov.w	r2, #4294967295
 80088e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088ea:	4b15      	ldr	r3, [pc, #84]	; (8008940 <vTaskStartScheduler+0xe0>)
 80088ec:	2201      	movs	r2, #1
 80088ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088f0:	4b14      	ldr	r3, [pc, #80]	; (8008944 <vTaskStartScheduler+0xe4>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088f6:	f001 f8f3 	bl	8009ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088fa:	e010      	b.n	800891e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008902:	d10c      	bne.n	800891e <vTaskStartScheduler+0xbe>
	__asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008908:	b672      	cpsid	i
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	b662      	cpsie	i
 8008918:	60fb      	str	r3, [r7, #12]
}
 800891a:	bf00      	nop
 800891c:	e7fe      	b.n	800891c <vTaskStartScheduler+0xbc>
}
 800891e:	bf00      	nop
 8008920:	3718      	adds	r7, #24
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	0800b9c8 	.word	0x0800b9c8
 800892c:	08008f8d 	.word	0x08008f8d
 8008930:	20000eac 	.word	0x20000eac
 8008934:	200009b4 	.word	0x200009b4
 8008938:	200001a8 	.word	0x200001a8
 800893c:	20000ea8 	.word	0x20000ea8
 8008940:	20000e94 	.word	0x20000e94
 8008944:	20000e8c 	.word	0x20000e8c

08008948 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008948:	b480      	push	{r7}
 800894a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800894c:	4b04      	ldr	r3, [pc, #16]	; (8008960 <vTaskSuspendAll+0x18>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3301      	adds	r3, #1
 8008952:	4a03      	ldr	r2, [pc, #12]	; (8008960 <vTaskSuspendAll+0x18>)
 8008954:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008956:	bf00      	nop
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	20000eb0 	.word	0x20000eb0

08008964 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800896a:	2300      	movs	r3, #0
 800896c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800896e:	2300      	movs	r3, #0
 8008970:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008972:	4b43      	ldr	r3, [pc, #268]	; (8008a80 <xTaskResumeAll+0x11c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10c      	bne.n	8008994 <xTaskResumeAll+0x30>
	__asm volatile
 800897a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897e:	b672      	cpsid	i
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	b662      	cpsie	i
 800898e:	603b      	str	r3, [r7, #0]
}
 8008990:	bf00      	nop
 8008992:	e7fe      	b.n	8008992 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008994:	f001 f922 	bl	8009bdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008998:	4b39      	ldr	r3, [pc, #228]	; (8008a80 <xTaskResumeAll+0x11c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3b01      	subs	r3, #1
 800899e:	4a38      	ldr	r2, [pc, #224]	; (8008a80 <xTaskResumeAll+0x11c>)
 80089a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089a2:	4b37      	ldr	r3, [pc, #220]	; (8008a80 <xTaskResumeAll+0x11c>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d162      	bne.n	8008a70 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089aa:	4b36      	ldr	r3, [pc, #216]	; (8008a84 <xTaskResumeAll+0x120>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d05e      	beq.n	8008a70 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089b2:	e02f      	b.n	8008a14 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089b4:	4b34      	ldr	r3, [pc, #208]	; (8008a88 <xTaskResumeAll+0x124>)
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	3318      	adds	r3, #24
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7ff f823 	bl	8007a0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	3304      	adds	r3, #4
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7ff f81e 	bl	8007a0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d4:	4b2d      	ldr	r3, [pc, #180]	; (8008a8c <xTaskResumeAll+0x128>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d903      	bls.n	80089e4 <xTaskResumeAll+0x80>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e0:	4a2a      	ldr	r2, [pc, #168]	; (8008a8c <xTaskResumeAll+0x128>)
 80089e2:	6013      	str	r3, [r2, #0]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e8:	4613      	mov	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4a27      	ldr	r2, [pc, #156]	; (8008a90 <xTaskResumeAll+0x12c>)
 80089f2:	441a      	add	r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3304      	adds	r3, #4
 80089f8:	4619      	mov	r1, r3
 80089fa:	4610      	mov	r0, r2
 80089fc:	f7fe ffa9 	bl	8007952 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a04:	4b23      	ldr	r3, [pc, #140]	; (8008a94 <xTaskResumeAll+0x130>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d302      	bcc.n	8008a14 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008a0e:	4b22      	ldr	r3, [pc, #136]	; (8008a98 <xTaskResumeAll+0x134>)
 8008a10:	2201      	movs	r2, #1
 8008a12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a14:	4b1c      	ldr	r3, [pc, #112]	; (8008a88 <xTaskResumeAll+0x124>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1cb      	bne.n	80089b4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a22:	f000 fb6f 	bl	8009104 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008a26:	4b1d      	ldr	r3, [pc, #116]	; (8008a9c <xTaskResumeAll+0x138>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d010      	beq.n	8008a54 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a32:	f000 f847 	bl	8008ac4 <xTaskIncrementTick>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008a3c:	4b16      	ldr	r3, [pc, #88]	; (8008a98 <xTaskResumeAll+0x134>)
 8008a3e:	2201      	movs	r2, #1
 8008a40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1f1      	bne.n	8008a32 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008a4e:	4b13      	ldr	r3, [pc, #76]	; (8008a9c <xTaskResumeAll+0x138>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a54:	4b10      	ldr	r3, [pc, #64]	; (8008a98 <xTaskResumeAll+0x134>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d009      	beq.n	8008a70 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a60:	4b0f      	ldr	r3, [pc, #60]	; (8008aa0 <xTaskResumeAll+0x13c>)
 8008a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a66:	601a      	str	r2, [r3, #0]
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a70:	f001 f8e8 	bl	8009c44 <vPortExitCritical>

	return xAlreadyYielded;
 8008a74:	68bb      	ldr	r3, [r7, #8]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	20000eb0 	.word	0x20000eb0
 8008a84:	20000e88 	.word	0x20000e88
 8008a88:	20000e48 	.word	0x20000e48
 8008a8c:	20000e90 	.word	0x20000e90
 8008a90:	200009b8 	.word	0x200009b8
 8008a94:	200009b4 	.word	0x200009b4
 8008a98:	20000e9c 	.word	0x20000e9c
 8008a9c:	20000e98 	.word	0x20000e98
 8008aa0:	e000ed04 	.word	0xe000ed04

08008aa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008aaa:	4b05      	ldr	r3, [pc, #20]	; (8008ac0 <xTaskGetTickCount+0x1c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ab0:	687b      	ldr	r3, [r7, #4]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	20000e8c 	.word	0x20000e8c

08008ac4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b086      	sub	sp, #24
 8008ac8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008aca:	2300      	movs	r3, #0
 8008acc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ace:	4b50      	ldr	r3, [pc, #320]	; (8008c10 <xTaskIncrementTick+0x14c>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f040 808b 	bne.w	8008bee <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ad8:	4b4e      	ldr	r3, [pc, #312]	; (8008c14 <xTaskIncrementTick+0x150>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3301      	adds	r3, #1
 8008ade:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ae0:	4a4c      	ldr	r2, [pc, #304]	; (8008c14 <xTaskIncrementTick+0x150>)
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d122      	bne.n	8008b32 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008aec:	4b4a      	ldr	r3, [pc, #296]	; (8008c18 <xTaskIncrementTick+0x154>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00c      	beq.n	8008b10 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afa:	b672      	cpsid	i
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	b662      	cpsie	i
 8008b0a:	603b      	str	r3, [r7, #0]
}
 8008b0c:	bf00      	nop
 8008b0e:	e7fe      	b.n	8008b0e <xTaskIncrementTick+0x4a>
 8008b10:	4b41      	ldr	r3, [pc, #260]	; (8008c18 <xTaskIncrementTick+0x154>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	60fb      	str	r3, [r7, #12]
 8008b16:	4b41      	ldr	r3, [pc, #260]	; (8008c1c <xTaskIncrementTick+0x158>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a3f      	ldr	r2, [pc, #252]	; (8008c18 <xTaskIncrementTick+0x154>)
 8008b1c:	6013      	str	r3, [r2, #0]
 8008b1e:	4a3f      	ldr	r2, [pc, #252]	; (8008c1c <xTaskIncrementTick+0x158>)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6013      	str	r3, [r2, #0]
 8008b24:	4b3e      	ldr	r3, [pc, #248]	; (8008c20 <xTaskIncrementTick+0x15c>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	4a3d      	ldr	r2, [pc, #244]	; (8008c20 <xTaskIncrementTick+0x15c>)
 8008b2c:	6013      	str	r3, [r2, #0]
 8008b2e:	f000 fae9 	bl	8009104 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b32:	4b3c      	ldr	r3, [pc, #240]	; (8008c24 <xTaskIncrementTick+0x160>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d349      	bcc.n	8008bd0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b3c:	4b36      	ldr	r3, [pc, #216]	; (8008c18 <xTaskIncrementTick+0x154>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d104      	bne.n	8008b50 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b46:	4b37      	ldr	r3, [pc, #220]	; (8008c24 <xTaskIncrementTick+0x160>)
 8008b48:	f04f 32ff 	mov.w	r2, #4294967295
 8008b4c:	601a      	str	r2, [r3, #0]
					break;
 8008b4e:	e03f      	b.n	8008bd0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b50:	4b31      	ldr	r3, [pc, #196]	; (8008c18 <xTaskIncrementTick+0x154>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d203      	bcs.n	8008b70 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b68:	4a2e      	ldr	r2, [pc, #184]	; (8008c24 <xTaskIncrementTick+0x160>)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b6e:	e02f      	b.n	8008bd0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	3304      	adds	r3, #4
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fe ff49 	bl	8007a0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d004      	beq.n	8008b8c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	3318      	adds	r3, #24
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fe ff40 	bl	8007a0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b90:	4b25      	ldr	r3, [pc, #148]	; (8008c28 <xTaskIncrementTick+0x164>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d903      	bls.n	8008ba0 <xTaskIncrementTick+0xdc>
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9c:	4a22      	ldr	r2, [pc, #136]	; (8008c28 <xTaskIncrementTick+0x164>)
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4a1f      	ldr	r2, [pc, #124]	; (8008c2c <xTaskIncrementTick+0x168>)
 8008bae:	441a      	add	r2, r3
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	f7fe fecb 	bl	8007952 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc0:	4b1b      	ldr	r3, [pc, #108]	; (8008c30 <xTaskIncrementTick+0x16c>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d3b8      	bcc.n	8008b3c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bce:	e7b5      	b.n	8008b3c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bd0:	4b17      	ldr	r3, [pc, #92]	; (8008c30 <xTaskIncrementTick+0x16c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd6:	4915      	ldr	r1, [pc, #84]	; (8008c2c <xTaskIncrementTick+0x168>)
 8008bd8:	4613      	mov	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4413      	add	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	440b      	add	r3, r1
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d907      	bls.n	8008bf8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008be8:	2301      	movs	r3, #1
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	e004      	b.n	8008bf8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008bee:	4b11      	ldr	r3, [pc, #68]	; (8008c34 <xTaskIncrementTick+0x170>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	4a0f      	ldr	r2, [pc, #60]	; (8008c34 <xTaskIncrementTick+0x170>)
 8008bf6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008bf8:	4b0f      	ldr	r3, [pc, #60]	; (8008c38 <xTaskIncrementTick+0x174>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008c00:	2301      	movs	r3, #1
 8008c02:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008c04:	697b      	ldr	r3, [r7, #20]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3718      	adds	r7, #24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	20000eb0 	.word	0x20000eb0
 8008c14:	20000e8c 	.word	0x20000e8c
 8008c18:	20000e40 	.word	0x20000e40
 8008c1c:	20000e44 	.word	0x20000e44
 8008c20:	20000ea0 	.word	0x20000ea0
 8008c24:	20000ea8 	.word	0x20000ea8
 8008c28:	20000e90 	.word	0x20000e90
 8008c2c:	200009b8 	.word	0x200009b8
 8008c30:	200009b4 	.word	0x200009b4
 8008c34:	20000e98 	.word	0x20000e98
 8008c38:	20000e9c 	.word	0x20000e9c

08008c3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c42:	4b2b      	ldr	r3, [pc, #172]	; (8008cf0 <vTaskSwitchContext+0xb4>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c4a:	4b2a      	ldr	r3, [pc, #168]	; (8008cf4 <vTaskSwitchContext+0xb8>)
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c50:	e048      	b.n	8008ce4 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008c52:	4b28      	ldr	r3, [pc, #160]	; (8008cf4 <vTaskSwitchContext+0xb8>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c58:	4b27      	ldr	r3, [pc, #156]	; (8008cf8 <vTaskSwitchContext+0xbc>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	60fb      	str	r3, [r7, #12]
 8008c5e:	e012      	b.n	8008c86 <vTaskSwitchContext+0x4a>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10c      	bne.n	8008c80 <vTaskSwitchContext+0x44>
	__asm volatile
 8008c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6a:	b672      	cpsid	i
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	b662      	cpsie	i
 8008c7a:	607b      	str	r3, [r7, #4]
}
 8008c7c:	bf00      	nop
 8008c7e:	e7fe      	b.n	8008c7e <vTaskSwitchContext+0x42>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	3b01      	subs	r3, #1
 8008c84:	60fb      	str	r3, [r7, #12]
 8008c86:	491d      	ldr	r1, [pc, #116]	; (8008cfc <vTaskSwitchContext+0xc0>)
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	440b      	add	r3, r1
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d0e2      	beq.n	8008c60 <vTaskSwitchContext+0x24>
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4a15      	ldr	r2, [pc, #84]	; (8008cfc <vTaskSwitchContext+0xc0>)
 8008ca6:	4413      	add	r3, r2
 8008ca8:	60bb      	str	r3, [r7, #8]
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	605a      	str	r2, [r3, #4]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	3308      	adds	r3, #8
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d104      	bne.n	8008cca <vTaskSwitchContext+0x8e>
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	605a      	str	r2, [r3, #4]
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	4a0b      	ldr	r2, [pc, #44]	; (8008d00 <vTaskSwitchContext+0xc4>)
 8008cd2:	6013      	str	r3, [r2, #0]
 8008cd4:	4a08      	ldr	r2, [pc, #32]	; (8008cf8 <vTaskSwitchContext+0xbc>)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008cda:	4b09      	ldr	r3, [pc, #36]	; (8008d00 <vTaskSwitchContext+0xc4>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3354      	adds	r3, #84	; 0x54
 8008ce0:	4a08      	ldr	r2, [pc, #32]	; (8008d04 <vTaskSwitchContext+0xc8>)
 8008ce2:	6013      	str	r3, [r2, #0]
}
 8008ce4:	bf00      	nop
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	20000eb0 	.word	0x20000eb0
 8008cf4:	20000e9c 	.word	0x20000e9c
 8008cf8:	20000e90 	.word	0x20000e90
 8008cfc:	200009b8 	.word	0x200009b8
 8008d00:	200009b4 	.word	0x200009b4
 8008d04:	200001a8 	.word	0x200001a8

08008d08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10c      	bne.n	8008d32 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1c:	b672      	cpsid	i
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	b662      	cpsie	i
 8008d2c:	60fb      	str	r3, [r7, #12]
}
 8008d2e:	bf00      	nop
 8008d30:	e7fe      	b.n	8008d30 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d32:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <vTaskPlaceOnEventList+0x48>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3318      	adds	r3, #24
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7fe fe2d 	bl	800799a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d40:	2101      	movs	r1, #1
 8008d42:	6838      	ldr	r0, [r7, #0]
 8008d44:	f000 fa8e 	bl	8009264 <prvAddCurrentTaskToDelayedList>
}
 8008d48:	bf00      	nop
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	200009b4 	.word	0x200009b4

08008d54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d10c      	bne.n	8008d80 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6a:	b672      	cpsid	i
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	b662      	cpsie	i
 8008d7a:	617b      	str	r3, [r7, #20]
}
 8008d7c:	bf00      	nop
 8008d7e:	e7fe      	b.n	8008d7e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d80:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <vTaskPlaceOnEventListRestricted+0x58>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3318      	adds	r3, #24
 8008d86:	4619      	mov	r1, r3
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f7fe fde2 	bl	8007952 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d002      	beq.n	8008d9a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008d94:	f04f 33ff 	mov.w	r3, #4294967295
 8008d98:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d9a:	6879      	ldr	r1, [r7, #4]
 8008d9c:	68b8      	ldr	r0, [r7, #8]
 8008d9e:	f000 fa61 	bl	8009264 <prvAddCurrentTaskToDelayedList>
	}
 8008da2:	bf00      	nop
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	200009b4 	.word	0x200009b4

08008db0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10c      	bne.n	8008de0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dca:	b672      	cpsid	i
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	b662      	cpsie	i
 8008dda:	60fb      	str	r3, [r7, #12]
}
 8008ddc:	bf00      	nop
 8008dde:	e7fe      	b.n	8008dde <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	3318      	adds	r3, #24
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7fe fe11 	bl	8007a0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dea:	4b1e      	ldr	r3, [pc, #120]	; (8008e64 <xTaskRemoveFromEventList+0xb4>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d11d      	bne.n	8008e2e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	3304      	adds	r3, #4
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fe fe08 	bl	8007a0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e00:	4b19      	ldr	r3, [pc, #100]	; (8008e68 <xTaskRemoveFromEventList+0xb8>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d903      	bls.n	8008e10 <xTaskRemoveFromEventList+0x60>
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0c:	4a16      	ldr	r2, [pc, #88]	; (8008e68 <xTaskRemoveFromEventList+0xb8>)
 8008e0e:	6013      	str	r3, [r2, #0]
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e14:	4613      	mov	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4413      	add	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4a13      	ldr	r2, [pc, #76]	; (8008e6c <xTaskRemoveFromEventList+0xbc>)
 8008e1e:	441a      	add	r2, r3
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	3304      	adds	r3, #4
 8008e24:	4619      	mov	r1, r3
 8008e26:	4610      	mov	r0, r2
 8008e28:	f7fe fd93 	bl	8007952 <vListInsertEnd>
 8008e2c:	e005      	b.n	8008e3a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	3318      	adds	r3, #24
 8008e32:	4619      	mov	r1, r3
 8008e34:	480e      	ldr	r0, [pc, #56]	; (8008e70 <xTaskRemoveFromEventList+0xc0>)
 8008e36:	f7fe fd8c 	bl	8007952 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e3e:	4b0d      	ldr	r3, [pc, #52]	; (8008e74 <xTaskRemoveFromEventList+0xc4>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d905      	bls.n	8008e54 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e4c:	4b0a      	ldr	r3, [pc, #40]	; (8008e78 <xTaskRemoveFromEventList+0xc8>)
 8008e4e:	2201      	movs	r2, #1
 8008e50:	601a      	str	r2, [r3, #0]
 8008e52:	e001      	b.n	8008e58 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008e54:	2300      	movs	r3, #0
 8008e56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e58:	697b      	ldr	r3, [r7, #20]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3718      	adds	r7, #24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	20000eb0 	.word	0x20000eb0
 8008e68:	20000e90 	.word	0x20000e90
 8008e6c:	200009b8 	.word	0x200009b8
 8008e70:	20000e48 	.word	0x20000e48
 8008e74:	200009b4 	.word	0x200009b4
 8008e78:	20000e9c 	.word	0x20000e9c

08008e7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e84:	4b06      	ldr	r3, [pc, #24]	; (8008ea0 <vTaskInternalSetTimeOutState+0x24>)
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e8c:	4b05      	ldr	r3, [pc, #20]	; (8008ea4 <vTaskInternalSetTimeOutState+0x28>)
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	605a      	str	r2, [r3, #4]
}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	20000ea0 	.word	0x20000ea0
 8008ea4:	20000e8c 	.word	0x20000e8c

08008ea8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b088      	sub	sp, #32
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10c      	bne.n	8008ed2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	b672      	cpsid	i
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	b662      	cpsie	i
 8008ecc:	613b      	str	r3, [r7, #16]
}
 8008ece:	bf00      	nop
 8008ed0:	e7fe      	b.n	8008ed0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10c      	bne.n	8008ef2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008edc:	b672      	cpsid	i
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	b662      	cpsie	i
 8008eec:	60fb      	str	r3, [r7, #12]
}
 8008eee:	bf00      	nop
 8008ef0:	e7fe      	b.n	8008ef0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008ef2:	f000 fe73 	bl	8009bdc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ef6:	4b1d      	ldr	r3, [pc, #116]	; (8008f6c <xTaskCheckForTimeOut+0xc4>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	69ba      	ldr	r2, [r7, #24]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0e:	d102      	bne.n	8008f16 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f10:	2300      	movs	r3, #0
 8008f12:	61fb      	str	r3, [r7, #28]
 8008f14:	e023      	b.n	8008f5e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	4b15      	ldr	r3, [pc, #84]	; (8008f70 <xTaskCheckForTimeOut+0xc8>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d007      	beq.n	8008f32 <xTaskCheckForTimeOut+0x8a>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d302      	bcc.n	8008f32 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	61fb      	str	r3, [r7, #28]
 8008f30:	e015      	b.n	8008f5e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d20b      	bcs.n	8008f54 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	1ad2      	subs	r2, r2, r3
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7ff ff97 	bl	8008e7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	61fb      	str	r3, [r7, #28]
 8008f52:	e004      	b.n	8008f5e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	2200      	movs	r2, #0
 8008f58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f5e:	f000 fe71 	bl	8009c44 <vPortExitCritical>

	return xReturn;
 8008f62:	69fb      	ldr	r3, [r7, #28]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3720      	adds	r7, #32
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	20000e8c 	.word	0x20000e8c
 8008f70:	20000ea0 	.word	0x20000ea0

08008f74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f74:	b480      	push	{r7}
 8008f76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f78:	4b03      	ldr	r3, [pc, #12]	; (8008f88 <vTaskMissedYield+0x14>)
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	601a      	str	r2, [r3, #0]
}
 8008f7e:	bf00      	nop
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	20000e9c 	.word	0x20000e9c

08008f8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f94:	f000 f852 	bl	800903c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f98:	4b06      	ldr	r3, [pc, #24]	; (8008fb4 <prvIdleTask+0x28>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d9f9      	bls.n	8008f94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008fa0:	4b05      	ldr	r3, [pc, #20]	; (8008fb8 <prvIdleTask+0x2c>)
 8008fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fa6:	601a      	str	r2, [r3, #0]
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008fb0:	e7f0      	b.n	8008f94 <prvIdleTask+0x8>
 8008fb2:	bf00      	nop
 8008fb4:	200009b8 	.word	0x200009b8
 8008fb8:	e000ed04 	.word	0xe000ed04

08008fbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	607b      	str	r3, [r7, #4]
 8008fc6:	e00c      	b.n	8008fe2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4a12      	ldr	r2, [pc, #72]	; (800901c <prvInitialiseTaskLists+0x60>)
 8008fd4:	4413      	add	r3, r2
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe fc8e 	bl	80078f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	607b      	str	r3, [r7, #4]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2b37      	cmp	r3, #55	; 0x37
 8008fe6:	d9ef      	bls.n	8008fc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fe8:	480d      	ldr	r0, [pc, #52]	; (8009020 <prvInitialiseTaskLists+0x64>)
 8008fea:	f7fe fc85 	bl	80078f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fee:	480d      	ldr	r0, [pc, #52]	; (8009024 <prvInitialiseTaskLists+0x68>)
 8008ff0:	f7fe fc82 	bl	80078f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ff4:	480c      	ldr	r0, [pc, #48]	; (8009028 <prvInitialiseTaskLists+0x6c>)
 8008ff6:	f7fe fc7f 	bl	80078f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ffa:	480c      	ldr	r0, [pc, #48]	; (800902c <prvInitialiseTaskLists+0x70>)
 8008ffc:	f7fe fc7c 	bl	80078f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009000:	480b      	ldr	r0, [pc, #44]	; (8009030 <prvInitialiseTaskLists+0x74>)
 8009002:	f7fe fc79 	bl	80078f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009006:	4b0b      	ldr	r3, [pc, #44]	; (8009034 <prvInitialiseTaskLists+0x78>)
 8009008:	4a05      	ldr	r2, [pc, #20]	; (8009020 <prvInitialiseTaskLists+0x64>)
 800900a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800900c:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <prvInitialiseTaskLists+0x7c>)
 800900e:	4a05      	ldr	r2, [pc, #20]	; (8009024 <prvInitialiseTaskLists+0x68>)
 8009010:	601a      	str	r2, [r3, #0]
}
 8009012:	bf00      	nop
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	200009b8 	.word	0x200009b8
 8009020:	20000e18 	.word	0x20000e18
 8009024:	20000e2c 	.word	0x20000e2c
 8009028:	20000e48 	.word	0x20000e48
 800902c:	20000e5c 	.word	0x20000e5c
 8009030:	20000e74 	.word	0x20000e74
 8009034:	20000e40 	.word	0x20000e40
 8009038:	20000e44 	.word	0x20000e44

0800903c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009042:	e019      	b.n	8009078 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009044:	f000 fdca 	bl	8009bdc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009048:	4b10      	ldr	r3, [pc, #64]	; (800908c <prvCheckTasksWaitingTermination+0x50>)
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3304      	adds	r3, #4
 8009054:	4618      	mov	r0, r3
 8009056:	f7fe fcd9 	bl	8007a0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800905a:	4b0d      	ldr	r3, [pc, #52]	; (8009090 <prvCheckTasksWaitingTermination+0x54>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3b01      	subs	r3, #1
 8009060:	4a0b      	ldr	r2, [pc, #44]	; (8009090 <prvCheckTasksWaitingTermination+0x54>)
 8009062:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009064:	4b0b      	ldr	r3, [pc, #44]	; (8009094 <prvCheckTasksWaitingTermination+0x58>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3b01      	subs	r3, #1
 800906a:	4a0a      	ldr	r2, [pc, #40]	; (8009094 <prvCheckTasksWaitingTermination+0x58>)
 800906c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800906e:	f000 fde9 	bl	8009c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f810 	bl	8009098 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009078:	4b06      	ldr	r3, [pc, #24]	; (8009094 <prvCheckTasksWaitingTermination+0x58>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e1      	bne.n	8009044 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009080:	bf00      	nop
 8009082:	bf00      	nop
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	20000e5c 	.word	0x20000e5c
 8009090:	20000e88 	.word	0x20000e88
 8009094:	20000e70 	.word	0x20000e70

08009098 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	3354      	adds	r3, #84	; 0x54
 80090a4:	4618      	mov	r0, r3
 80090a6:	f002 fc0b 	bl	800b8c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d108      	bne.n	80090c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 ff85 	bl	8009fc8 <vPortFree>
				vPortFree( pxTCB );
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 ff82 	bl	8009fc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090c4:	e01a      	b.n	80090fc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d103      	bne.n	80090d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 ff79 	bl	8009fc8 <vPortFree>
	}
 80090d6:	e011      	b.n	80090fc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d00c      	beq.n	80090fc <prvDeleteTCB+0x64>
	__asm volatile
 80090e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e6:	b672      	cpsid	i
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	b662      	cpsie	i
 80090f6:	60fb      	str	r3, [r7, #12]
}
 80090f8:	bf00      	nop
 80090fa:	e7fe      	b.n	80090fa <prvDeleteTCB+0x62>
	}
 80090fc:	bf00      	nop
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800910a:	4b0c      	ldr	r3, [pc, #48]	; (800913c <prvResetNextTaskUnblockTime+0x38>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d104      	bne.n	800911e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009114:	4b0a      	ldr	r3, [pc, #40]	; (8009140 <prvResetNextTaskUnblockTime+0x3c>)
 8009116:	f04f 32ff 	mov.w	r2, #4294967295
 800911a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800911c:	e008      	b.n	8009130 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800911e:	4b07      	ldr	r3, [pc, #28]	; (800913c <prvResetNextTaskUnblockTime+0x38>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	4a04      	ldr	r2, [pc, #16]	; (8009140 <prvResetNextTaskUnblockTime+0x3c>)
 800912e:	6013      	str	r3, [r2, #0]
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	20000e40 	.word	0x20000e40
 8009140:	20000ea8 	.word	0x20000ea8

08009144 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800914a:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <xTaskGetSchedulerState+0x34>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d102      	bne.n	8009158 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009152:	2301      	movs	r3, #1
 8009154:	607b      	str	r3, [r7, #4]
 8009156:	e008      	b.n	800916a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009158:	4b08      	ldr	r3, [pc, #32]	; (800917c <xTaskGetSchedulerState+0x38>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d102      	bne.n	8009166 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009160:	2302      	movs	r3, #2
 8009162:	607b      	str	r3, [r7, #4]
 8009164:	e001      	b.n	800916a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009166:	2300      	movs	r3, #0
 8009168:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800916a:	687b      	ldr	r3, [r7, #4]
	}
 800916c:	4618      	mov	r0, r3
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	20000e94 	.word	0x20000e94
 800917c:	20000eb0 	.word	0x20000eb0

08009180 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800918c:	2300      	movs	r3, #0
 800918e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d05a      	beq.n	800924c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009196:	4b30      	ldr	r3, [pc, #192]	; (8009258 <xTaskPriorityDisinherit+0xd8>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	429a      	cmp	r2, r3
 800919e:	d00c      	beq.n	80091ba <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80091a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a4:	b672      	cpsid	i
 80091a6:	f383 8811 	msr	BASEPRI, r3
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	b662      	cpsie	i
 80091b4:	60fb      	str	r3, [r7, #12]
}
 80091b6:	bf00      	nop
 80091b8:	e7fe      	b.n	80091b8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10c      	bne.n	80091dc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80091c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c6:	b672      	cpsid	i
 80091c8:	f383 8811 	msr	BASEPRI, r3
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	f3bf 8f4f 	dsb	sy
 80091d4:	b662      	cpsie	i
 80091d6:	60bb      	str	r3, [r7, #8]
}
 80091d8:	bf00      	nop
 80091da:	e7fe      	b.n	80091da <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e0:	1e5a      	subs	r2, r3, #1
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d02c      	beq.n	800924c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d128      	bne.n	800924c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	3304      	adds	r3, #4
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fe fc04 	bl	8007a0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009210:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800921c:	4b0f      	ldr	r3, [pc, #60]	; (800925c <xTaskPriorityDisinherit+0xdc>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	429a      	cmp	r2, r3
 8009222:	d903      	bls.n	800922c <xTaskPriorityDisinherit+0xac>
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009228:	4a0c      	ldr	r2, [pc, #48]	; (800925c <xTaskPriorityDisinherit+0xdc>)
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009230:	4613      	mov	r3, r2
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	4413      	add	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4a09      	ldr	r2, [pc, #36]	; (8009260 <xTaskPriorityDisinherit+0xe0>)
 800923a:	441a      	add	r2, r3
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	3304      	adds	r3, #4
 8009240:	4619      	mov	r1, r3
 8009242:	4610      	mov	r0, r2
 8009244:	f7fe fb85 	bl	8007952 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009248:	2301      	movs	r3, #1
 800924a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800924c:	697b      	ldr	r3, [r7, #20]
	}
 800924e:	4618      	mov	r0, r3
 8009250:	3718      	adds	r7, #24
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	200009b4 	.word	0x200009b4
 800925c:	20000e90 	.word	0x20000e90
 8009260:	200009b8 	.word	0x200009b8

08009264 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800926e:	4b21      	ldr	r3, [pc, #132]	; (80092f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009274:	4b20      	ldr	r3, [pc, #128]	; (80092f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3304      	adds	r3, #4
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe fbc6 	bl	8007a0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009286:	d10a      	bne.n	800929e <prvAddCurrentTaskToDelayedList+0x3a>
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d007      	beq.n	800929e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800928e:	4b1a      	ldr	r3, [pc, #104]	; (80092f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3304      	adds	r3, #4
 8009294:	4619      	mov	r1, r3
 8009296:	4819      	ldr	r0, [pc, #100]	; (80092fc <prvAddCurrentTaskToDelayedList+0x98>)
 8009298:	f7fe fb5b 	bl	8007952 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800929c:	e026      	b.n	80092ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4413      	add	r3, r2
 80092a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80092a6:	4b14      	ldr	r3, [pc, #80]	; (80092f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d209      	bcs.n	80092ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092b6:	4b12      	ldr	r3, [pc, #72]	; (8009300 <prvAddCurrentTaskToDelayedList+0x9c>)
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	4b0f      	ldr	r3, [pc, #60]	; (80092f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	3304      	adds	r3, #4
 80092c0:	4619      	mov	r1, r3
 80092c2:	4610      	mov	r0, r2
 80092c4:	f7fe fb69 	bl	800799a <vListInsert>
}
 80092c8:	e010      	b.n	80092ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092ca:	4b0e      	ldr	r3, [pc, #56]	; (8009304 <prvAddCurrentTaskToDelayedList+0xa0>)
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	4b0a      	ldr	r3, [pc, #40]	; (80092f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	3304      	adds	r3, #4
 80092d4:	4619      	mov	r1, r3
 80092d6:	4610      	mov	r0, r2
 80092d8:	f7fe fb5f 	bl	800799a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80092dc:	4b0a      	ldr	r3, [pc, #40]	; (8009308 <prvAddCurrentTaskToDelayedList+0xa4>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d202      	bcs.n	80092ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80092e6:	4a08      	ldr	r2, [pc, #32]	; (8009308 <prvAddCurrentTaskToDelayedList+0xa4>)
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	6013      	str	r3, [r2, #0]
}
 80092ec:	bf00      	nop
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	20000e8c 	.word	0x20000e8c
 80092f8:	200009b4 	.word	0x200009b4
 80092fc:	20000e74 	.word	0x20000e74
 8009300:	20000e44 	.word	0x20000e44
 8009304:	20000e40 	.word	0x20000e40
 8009308:	20000ea8 	.word	0x20000ea8

0800930c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b08a      	sub	sp, #40	; 0x28
 8009310:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009312:	2300      	movs	r3, #0
 8009314:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009316:	f000 fb15 	bl	8009944 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800931a:	4b1d      	ldr	r3, [pc, #116]	; (8009390 <xTimerCreateTimerTask+0x84>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d021      	beq.n	8009366 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009322:	2300      	movs	r3, #0
 8009324:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009326:	2300      	movs	r3, #0
 8009328:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800932a:	1d3a      	adds	r2, r7, #4
 800932c:	f107 0108 	add.w	r1, r7, #8
 8009330:	f107 030c 	add.w	r3, r7, #12
 8009334:	4618      	mov	r0, r3
 8009336:	f7fe fac5 	bl	80078c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800933a:	6879      	ldr	r1, [r7, #4]
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	9202      	str	r2, [sp, #8]
 8009342:	9301      	str	r3, [sp, #4]
 8009344:	2302      	movs	r3, #2
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	2300      	movs	r3, #0
 800934a:	460a      	mov	r2, r1
 800934c:	4911      	ldr	r1, [pc, #68]	; (8009394 <xTimerCreateTimerTask+0x88>)
 800934e:	4812      	ldr	r0, [pc, #72]	; (8009398 <xTimerCreateTimerTask+0x8c>)
 8009350:	f7ff f890 	bl	8008474 <xTaskCreateStatic>
 8009354:	4603      	mov	r3, r0
 8009356:	4a11      	ldr	r2, [pc, #68]	; (800939c <xTimerCreateTimerTask+0x90>)
 8009358:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800935a:	4b10      	ldr	r3, [pc, #64]	; (800939c <xTimerCreateTimerTask+0x90>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d001      	beq.n	8009366 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009362:	2301      	movs	r3, #1
 8009364:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10c      	bne.n	8009386 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009370:	b672      	cpsid	i
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	b662      	cpsie	i
 8009380:	613b      	str	r3, [r7, #16]
}
 8009382:	bf00      	nop
 8009384:	e7fe      	b.n	8009384 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009386:	697b      	ldr	r3, [r7, #20]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3718      	adds	r7, #24
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	20000ee4 	.word	0x20000ee4
 8009394:	0800b9d0 	.word	0x0800b9d0
 8009398:	080094dd 	.word	0x080094dd
 800939c:	20000ee8 	.word	0x20000ee8

080093a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b08a      	sub	sp, #40	; 0x28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	607a      	str	r2, [r7, #4]
 80093ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10c      	bne.n	80093d2 <xTimerGenericCommand+0x32>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093bc:	b672      	cpsid	i
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	b662      	cpsie	i
 80093cc:	623b      	str	r3, [r7, #32]
}
 80093ce:	bf00      	nop
 80093d0:	e7fe      	b.n	80093d0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80093d2:	4b1a      	ldr	r3, [pc, #104]	; (800943c <xTimerGenericCommand+0x9c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d02a      	beq.n	8009430 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	2b05      	cmp	r3, #5
 80093ea:	dc18      	bgt.n	800941e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80093ec:	f7ff feaa 	bl	8009144 <xTaskGetSchedulerState>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d109      	bne.n	800940a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80093f6:	4b11      	ldr	r3, [pc, #68]	; (800943c <xTimerGenericCommand+0x9c>)
 80093f8:	6818      	ldr	r0, [r3, #0]
 80093fa:	f107 0110 	add.w	r1, r7, #16
 80093fe:	2300      	movs	r3, #0
 8009400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009402:	f7fe fc3d 	bl	8007c80 <xQueueGenericSend>
 8009406:	6278      	str	r0, [r7, #36]	; 0x24
 8009408:	e012      	b.n	8009430 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800940a:	4b0c      	ldr	r3, [pc, #48]	; (800943c <xTimerGenericCommand+0x9c>)
 800940c:	6818      	ldr	r0, [r3, #0]
 800940e:	f107 0110 	add.w	r1, r7, #16
 8009412:	2300      	movs	r3, #0
 8009414:	2200      	movs	r2, #0
 8009416:	f7fe fc33 	bl	8007c80 <xQueueGenericSend>
 800941a:	6278      	str	r0, [r7, #36]	; 0x24
 800941c:	e008      	b.n	8009430 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800941e:	4b07      	ldr	r3, [pc, #28]	; (800943c <xTimerGenericCommand+0x9c>)
 8009420:	6818      	ldr	r0, [r3, #0]
 8009422:	f107 0110 	add.w	r1, r7, #16
 8009426:	2300      	movs	r3, #0
 8009428:	683a      	ldr	r2, [r7, #0]
 800942a:	f7fe fd2f 	bl	8007e8c <xQueueGenericSendFromISR>
 800942e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009432:	4618      	mov	r0, r3
 8009434:	3728      	adds	r7, #40	; 0x28
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	20000ee4 	.word	0x20000ee4

08009440 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b088      	sub	sp, #32
 8009444:	af02      	add	r7, sp, #8
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800944a:	4b23      	ldr	r3, [pc, #140]	; (80094d8 <prvProcessExpiredTimer+0x98>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	3304      	adds	r3, #4
 8009458:	4618      	mov	r0, r3
 800945a:	f7fe fad7 	bl	8007a0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009464:	f003 0304 	and.w	r3, r3, #4
 8009468:	2b00      	cmp	r3, #0
 800946a:	d024      	beq.n	80094b6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	699a      	ldr	r2, [r3, #24]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	18d1      	adds	r1, r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	6978      	ldr	r0, [r7, #20]
 800947a:	f000 f8d3 	bl	8009624 <prvInsertTimerInActiveList>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d021      	beq.n	80094c8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009484:	2300      	movs	r3, #0
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	2300      	movs	r3, #0
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	2100      	movs	r1, #0
 800948e:	6978      	ldr	r0, [r7, #20]
 8009490:	f7ff ff86 	bl	80093a0 <xTimerGenericCommand>
 8009494:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d115      	bne.n	80094c8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800949c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a0:	b672      	cpsid	i
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	b662      	cpsie	i
 80094b0:	60fb      	str	r3, [r7, #12]
}
 80094b2:	bf00      	nop
 80094b4:	e7fe      	b.n	80094b4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094bc:	f023 0301 	bic.w	r3, r3, #1
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	6a1b      	ldr	r3, [r3, #32]
 80094cc:	6978      	ldr	r0, [r7, #20]
 80094ce:	4798      	blx	r3
}
 80094d0:	bf00      	nop
 80094d2:	3718      	adds	r7, #24
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	20000edc 	.word	0x20000edc

080094dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094e4:	f107 0308 	add.w	r3, r7, #8
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 f857 	bl	800959c <prvGetNextExpireTime>
 80094ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	4619      	mov	r1, r3
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f000 f803 	bl	8009500 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80094fa:	f000 f8d5 	bl	80096a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094fe:	e7f1      	b.n	80094e4 <prvTimerTask+0x8>

08009500 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800950a:	f7ff fa1d 	bl	8008948 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800950e:	f107 0308 	add.w	r3, r7, #8
 8009512:	4618      	mov	r0, r3
 8009514:	f000 f866 	bl	80095e4 <prvSampleTimeNow>
 8009518:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d130      	bne.n	8009582 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10a      	bne.n	800953c <prvProcessTimerOrBlockTask+0x3c>
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	429a      	cmp	r2, r3
 800952c:	d806      	bhi.n	800953c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800952e:	f7ff fa19 	bl	8008964 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009532:	68f9      	ldr	r1, [r7, #12]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7ff ff83 	bl	8009440 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800953a:	e024      	b.n	8009586 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d008      	beq.n	8009554 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009542:	4b13      	ldr	r3, [pc, #76]	; (8009590 <prvProcessTimerOrBlockTask+0x90>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <prvProcessTimerOrBlockTask+0x50>
 800954c:	2301      	movs	r3, #1
 800954e:	e000      	b.n	8009552 <prvProcessTimerOrBlockTask+0x52>
 8009550:	2300      	movs	r3, #0
 8009552:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009554:	4b0f      	ldr	r3, [pc, #60]	; (8009594 <prvProcessTimerOrBlockTask+0x94>)
 8009556:	6818      	ldr	r0, [r3, #0]
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	4619      	mov	r1, r3
 8009562:	f7fe ff53 	bl	800840c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009566:	f7ff f9fd 	bl	8008964 <xTaskResumeAll>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10a      	bne.n	8009586 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009570:	4b09      	ldr	r3, [pc, #36]	; (8009598 <prvProcessTimerOrBlockTask+0x98>)
 8009572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	f3bf 8f6f 	isb	sy
}
 8009580:	e001      	b.n	8009586 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009582:	f7ff f9ef 	bl	8008964 <xTaskResumeAll>
}
 8009586:	bf00      	nop
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20000ee0 	.word	0x20000ee0
 8009594:	20000ee4 	.word	0x20000ee4
 8009598:	e000ed04 	.word	0xe000ed04

0800959c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80095a4:	4b0e      	ldr	r3, [pc, #56]	; (80095e0 <prvGetNextExpireTime+0x44>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d101      	bne.n	80095b2 <prvGetNextExpireTime+0x16>
 80095ae:	2201      	movs	r2, #1
 80095b0:	e000      	b.n	80095b4 <prvGetNextExpireTime+0x18>
 80095b2:	2200      	movs	r2, #0
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d105      	bne.n	80095cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095c0:	4b07      	ldr	r3, [pc, #28]	; (80095e0 <prvGetNextExpireTime+0x44>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	60fb      	str	r3, [r7, #12]
 80095ca:	e001      	b.n	80095d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80095cc:	2300      	movs	r3, #0
 80095ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80095d0:	68fb      	ldr	r3, [r7, #12]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3714      	adds	r7, #20
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	20000edc 	.word	0x20000edc

080095e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80095ec:	f7ff fa5a 	bl	8008aa4 <xTaskGetTickCount>
 80095f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80095f2:	4b0b      	ldr	r3, [pc, #44]	; (8009620 <prvSampleTimeNow+0x3c>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d205      	bcs.n	8009608 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80095fc:	f000 f93c 	bl	8009878 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	e002      	b.n	800960e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800960e:	4a04      	ldr	r2, [pc, #16]	; (8009620 <prvSampleTimeNow+0x3c>)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009614:	68fb      	ldr	r3, [r7, #12]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	20000eec 	.word	0x20000eec

08009624 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
 8009630:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009632:	2300      	movs	r3, #0
 8009634:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	429a      	cmp	r2, r3
 8009648:	d812      	bhi.n	8009670 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	1ad2      	subs	r2, r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	429a      	cmp	r2, r3
 8009656:	d302      	bcc.n	800965e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009658:	2301      	movs	r3, #1
 800965a:	617b      	str	r3, [r7, #20]
 800965c:	e01b      	b.n	8009696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800965e:	4b10      	ldr	r3, [pc, #64]	; (80096a0 <prvInsertTimerInActiveList+0x7c>)
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	3304      	adds	r3, #4
 8009666:	4619      	mov	r1, r3
 8009668:	4610      	mov	r0, r2
 800966a:	f7fe f996 	bl	800799a <vListInsert>
 800966e:	e012      	b.n	8009696 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	429a      	cmp	r2, r3
 8009676:	d206      	bcs.n	8009686 <prvInsertTimerInActiveList+0x62>
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	429a      	cmp	r2, r3
 800967e:	d302      	bcc.n	8009686 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009680:	2301      	movs	r3, #1
 8009682:	617b      	str	r3, [r7, #20]
 8009684:	e007      	b.n	8009696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009686:	4b07      	ldr	r3, [pc, #28]	; (80096a4 <prvInsertTimerInActiveList+0x80>)
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3304      	adds	r3, #4
 800968e:	4619      	mov	r1, r3
 8009690:	4610      	mov	r0, r2
 8009692:	f7fe f982 	bl	800799a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009696:	697b      	ldr	r3, [r7, #20]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3718      	adds	r7, #24
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	20000ee0 	.word	0x20000ee0
 80096a4:	20000edc 	.word	0x20000edc

080096a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b08e      	sub	sp, #56	; 0x38
 80096ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096ae:	e0d0      	b.n	8009852 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	da1a      	bge.n	80096ec <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80096b6:	1d3b      	adds	r3, r7, #4
 80096b8:	3304      	adds	r3, #4
 80096ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80096bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d10c      	bne.n	80096dc <prvProcessReceivedCommands+0x34>
	__asm volatile
 80096c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c6:	b672      	cpsid	i
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	b662      	cpsie	i
 80096d6:	61fb      	str	r3, [r7, #28]
}
 80096d8:	bf00      	nop
 80096da:	e7fe      	b.n	80096da <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80096dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096e2:	6850      	ldr	r0, [r2, #4]
 80096e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096e6:	6892      	ldr	r2, [r2, #8]
 80096e8:	4611      	mov	r1, r2
 80096ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f2c0 80ae 	blt.w	8009850 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80096f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d004      	beq.n	800970a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009702:	3304      	adds	r3, #4
 8009704:	4618      	mov	r0, r3
 8009706:	f7fe f981 	bl	8007a0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800970a:	463b      	mov	r3, r7
 800970c:	4618      	mov	r0, r3
 800970e:	f7ff ff69 	bl	80095e4 <prvSampleTimeNow>
 8009712:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b09      	cmp	r3, #9
 8009718:	f200 809b 	bhi.w	8009852 <prvProcessReceivedCommands+0x1aa>
 800971c:	a201      	add	r2, pc, #4	; (adr r2, 8009724 <prvProcessReceivedCommands+0x7c>)
 800971e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009722:	bf00      	nop
 8009724:	0800974d 	.word	0x0800974d
 8009728:	0800974d 	.word	0x0800974d
 800972c:	0800974d 	.word	0x0800974d
 8009730:	080097c5 	.word	0x080097c5
 8009734:	080097d9 	.word	0x080097d9
 8009738:	08009827 	.word	0x08009827
 800973c:	0800974d 	.word	0x0800974d
 8009740:	0800974d 	.word	0x0800974d
 8009744:	080097c5 	.word	0x080097c5
 8009748:	080097d9 	.word	0x080097d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800974c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009752:	f043 0301 	orr.w	r3, r3, #1
 8009756:	b2da      	uxtb	r2, r3
 8009758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	18d1      	adds	r1, r2, r3
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800976a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800976c:	f7ff ff5a 	bl	8009624 <prvInsertTimerInActiveList>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d06d      	beq.n	8009852 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800977c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800977e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009784:	f003 0304 	and.w	r3, r3, #4
 8009788:	2b00      	cmp	r3, #0
 800978a:	d062      	beq.n	8009852 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	441a      	add	r2, r3
 8009794:	2300      	movs	r3, #0
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	2300      	movs	r3, #0
 800979a:	2100      	movs	r1, #0
 800979c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800979e:	f7ff fdff 	bl	80093a0 <xTimerGenericCommand>
 80097a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80097a4:	6a3b      	ldr	r3, [r7, #32]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d153      	bne.n	8009852 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80097aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ae:	b672      	cpsid	i
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	b662      	cpsie	i
 80097be:	61bb      	str	r3, [r7, #24]
}
 80097c0:	bf00      	nop
 80097c2:	e7fe      	b.n	80097c2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097ca:	f023 0301 	bic.w	r3, r3, #1
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80097d6:	e03c      	b.n	8009852 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097de:	f043 0301 	orr.w	r3, r3, #1
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80097f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10c      	bne.n	8009812 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80097f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fc:	b672      	cpsid	i
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	b662      	cpsie	i
 800980c:	617b      	str	r3, [r7, #20]
}
 800980e:	bf00      	nop
 8009810:	e7fe      	b.n	8009810 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009814:	699a      	ldr	r2, [r3, #24]
 8009816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009818:	18d1      	adds	r1, r2, r3
 800981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800981e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009820:	f7ff ff00 	bl	8009624 <prvInsertTimerInActiveList>
					break;
 8009824:	e015      	b.n	8009852 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800982c:	f003 0302 	and.w	r3, r3, #2
 8009830:	2b00      	cmp	r3, #0
 8009832:	d103      	bne.n	800983c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009836:	f000 fbc7 	bl	8009fc8 <vPortFree>
 800983a:	e00a      	b.n	8009852 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800983c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009842:	f023 0301 	bic.w	r3, r3, #1
 8009846:	b2da      	uxtb	r2, r3
 8009848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800984e:	e000      	b.n	8009852 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009850:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009852:	4b08      	ldr	r3, [pc, #32]	; (8009874 <prvProcessReceivedCommands+0x1cc>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	1d39      	adds	r1, r7, #4
 8009858:	2200      	movs	r2, #0
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe fbb6 	bl	8007fcc <xQueueReceive>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	f47f af24 	bne.w	80096b0 <prvProcessReceivedCommands+0x8>
	}
}
 8009868:	bf00      	nop
 800986a:	bf00      	nop
 800986c:	3730      	adds	r7, #48	; 0x30
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	20000ee4 	.word	0x20000ee4

08009878 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b088      	sub	sp, #32
 800987c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800987e:	e04a      	b.n	8009916 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009880:	4b2e      	ldr	r3, [pc, #184]	; (800993c <prvSwitchTimerLists+0xc4>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800988a:	4b2c      	ldr	r3, [pc, #176]	; (800993c <prvSwitchTimerLists+0xc4>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	3304      	adds	r3, #4
 8009898:	4618      	mov	r0, r3
 800989a:	f7fe f8b7 	bl	8007a0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d030      	beq.n	8009916 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	4413      	add	r3, r2
 80098bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d90e      	bls.n	80098e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	68fa      	ldr	r2, [r7, #12]
 80098d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098d2:	4b1a      	ldr	r3, [pc, #104]	; (800993c <prvSwitchTimerLists+0xc4>)
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	3304      	adds	r3, #4
 80098da:	4619      	mov	r1, r3
 80098dc:	4610      	mov	r0, r2
 80098de:	f7fe f85c 	bl	800799a <vListInsert>
 80098e2:	e018      	b.n	8009916 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098e4:	2300      	movs	r3, #0
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	2300      	movs	r3, #0
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	2100      	movs	r1, #0
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f7ff fd56 	bl	80093a0 <xTimerGenericCommand>
 80098f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10c      	bne.n	8009916 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	b672      	cpsid	i
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	b662      	cpsie	i
 8009910:	603b      	str	r3, [r7, #0]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009916:	4b09      	ldr	r3, [pc, #36]	; (800993c <prvSwitchTimerLists+0xc4>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1af      	bne.n	8009880 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009920:	4b06      	ldr	r3, [pc, #24]	; (800993c <prvSwitchTimerLists+0xc4>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009926:	4b06      	ldr	r3, [pc, #24]	; (8009940 <prvSwitchTimerLists+0xc8>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a04      	ldr	r2, [pc, #16]	; (800993c <prvSwitchTimerLists+0xc4>)
 800992c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800992e:	4a04      	ldr	r2, [pc, #16]	; (8009940 <prvSwitchTimerLists+0xc8>)
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	6013      	str	r3, [r2, #0]
}
 8009934:	bf00      	nop
 8009936:	3718      	adds	r7, #24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	20000edc 	.word	0x20000edc
 8009940:	20000ee0 	.word	0x20000ee0

08009944 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800994a:	f000 f947 	bl	8009bdc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800994e:	4b15      	ldr	r3, [pc, #84]	; (80099a4 <prvCheckForValidListAndQueue+0x60>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d120      	bne.n	8009998 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009956:	4814      	ldr	r0, [pc, #80]	; (80099a8 <prvCheckForValidListAndQueue+0x64>)
 8009958:	f7fd ffce 	bl	80078f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800995c:	4813      	ldr	r0, [pc, #76]	; (80099ac <prvCheckForValidListAndQueue+0x68>)
 800995e:	f7fd ffcb 	bl	80078f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009962:	4b13      	ldr	r3, [pc, #76]	; (80099b0 <prvCheckForValidListAndQueue+0x6c>)
 8009964:	4a10      	ldr	r2, [pc, #64]	; (80099a8 <prvCheckForValidListAndQueue+0x64>)
 8009966:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009968:	4b12      	ldr	r3, [pc, #72]	; (80099b4 <prvCheckForValidListAndQueue+0x70>)
 800996a:	4a10      	ldr	r2, [pc, #64]	; (80099ac <prvCheckForValidListAndQueue+0x68>)
 800996c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800996e:	2300      	movs	r3, #0
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	4b11      	ldr	r3, [pc, #68]	; (80099b8 <prvCheckForValidListAndQueue+0x74>)
 8009974:	4a11      	ldr	r2, [pc, #68]	; (80099bc <prvCheckForValidListAndQueue+0x78>)
 8009976:	2110      	movs	r1, #16
 8009978:	200a      	movs	r0, #10
 800997a:	f7fe f8db 	bl	8007b34 <xQueueGenericCreateStatic>
 800997e:	4603      	mov	r3, r0
 8009980:	4a08      	ldr	r2, [pc, #32]	; (80099a4 <prvCheckForValidListAndQueue+0x60>)
 8009982:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009984:	4b07      	ldr	r3, [pc, #28]	; (80099a4 <prvCheckForValidListAndQueue+0x60>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d005      	beq.n	8009998 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800998c:	4b05      	ldr	r3, [pc, #20]	; (80099a4 <prvCheckForValidListAndQueue+0x60>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	490b      	ldr	r1, [pc, #44]	; (80099c0 <prvCheckForValidListAndQueue+0x7c>)
 8009992:	4618      	mov	r0, r3
 8009994:	f7fe fd10 	bl	80083b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009998:	f000 f954 	bl	8009c44 <vPortExitCritical>
}
 800999c:	bf00      	nop
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	20000ee4 	.word	0x20000ee4
 80099a8:	20000eb4 	.word	0x20000eb4
 80099ac:	20000ec8 	.word	0x20000ec8
 80099b0:	20000edc 	.word	0x20000edc
 80099b4:	20000ee0 	.word	0x20000ee0
 80099b8:	20000f90 	.word	0x20000f90
 80099bc:	20000ef0 	.word	0x20000ef0
 80099c0:	0800b9d8 	.word	0x0800b9d8

080099c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	3b04      	subs	r3, #4
 80099d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80099dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	3b04      	subs	r3, #4
 80099e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	f023 0201 	bic.w	r2, r3, #1
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	3b04      	subs	r3, #4
 80099f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80099f4:	4a0c      	ldr	r2, [pc, #48]	; (8009a28 <pxPortInitialiseStack+0x64>)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	3b14      	subs	r3, #20
 80099fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3b04      	subs	r3, #4
 8009a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f06f 0202 	mvn.w	r2, #2
 8009a12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3b20      	subs	r3, #32
 8009a18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	08009a2d 	.word	0x08009a2d

08009a2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009a32:	2300      	movs	r3, #0
 8009a34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009a36:	4b14      	ldr	r3, [pc, #80]	; (8009a88 <prvTaskExitError+0x5c>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a3e:	d00c      	beq.n	8009a5a <prvTaskExitError+0x2e>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	b672      	cpsid	i
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	b662      	cpsie	i
 8009a54:	60fb      	str	r3, [r7, #12]
}
 8009a56:	bf00      	nop
 8009a58:	e7fe      	b.n	8009a58 <prvTaskExitError+0x2c>
	__asm volatile
 8009a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5e:	b672      	cpsid	i
 8009a60:	f383 8811 	msr	BASEPRI, r3
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	b662      	cpsie	i
 8009a6e:	60bb      	str	r3, [r7, #8]
}
 8009a70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a72:	bf00      	nop
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d0fc      	beq.n	8009a74 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a7a:	bf00      	nop
 8009a7c:	bf00      	nop
 8009a7e:	3714      	adds	r7, #20
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr
 8009a88:	20000118 	.word	0x20000118
 8009a8c:	00000000 	.word	0x00000000

08009a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a90:	4b07      	ldr	r3, [pc, #28]	; (8009ab0 <pxCurrentTCBConst2>)
 8009a92:	6819      	ldr	r1, [r3, #0]
 8009a94:	6808      	ldr	r0, [r1, #0]
 8009a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a9a:	f380 8809 	msr	PSP, r0
 8009a9e:	f3bf 8f6f 	isb	sy
 8009aa2:	f04f 0000 	mov.w	r0, #0
 8009aa6:	f380 8811 	msr	BASEPRI, r0
 8009aaa:	4770      	bx	lr
 8009aac:	f3af 8000 	nop.w

08009ab0 <pxCurrentTCBConst2>:
 8009ab0:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ab4:	bf00      	nop
 8009ab6:	bf00      	nop

08009ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ab8:	4808      	ldr	r0, [pc, #32]	; (8009adc <prvPortStartFirstTask+0x24>)
 8009aba:	6800      	ldr	r0, [r0, #0]
 8009abc:	6800      	ldr	r0, [r0, #0]
 8009abe:	f380 8808 	msr	MSP, r0
 8009ac2:	f04f 0000 	mov.w	r0, #0
 8009ac6:	f380 8814 	msr	CONTROL, r0
 8009aca:	b662      	cpsie	i
 8009acc:	b661      	cpsie	f
 8009ace:	f3bf 8f4f 	dsb	sy
 8009ad2:	f3bf 8f6f 	isb	sy
 8009ad6:	df00      	svc	0
 8009ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009ada:	bf00      	nop
 8009adc:	e000ed08 	.word	0xe000ed08

08009ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ae6:	4b37      	ldr	r3, [pc, #220]	; (8009bc4 <xPortStartScheduler+0xe4>)
 8009ae8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	22ff      	movs	r2, #255	; 0xff
 8009af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b00:	78fb      	ldrb	r3, [r7, #3]
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009b08:	b2da      	uxtb	r2, r3
 8009b0a:	4b2f      	ldr	r3, [pc, #188]	; (8009bc8 <xPortStartScheduler+0xe8>)
 8009b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b0e:	4b2f      	ldr	r3, [pc, #188]	; (8009bcc <xPortStartScheduler+0xec>)
 8009b10:	2207      	movs	r2, #7
 8009b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b14:	e009      	b.n	8009b2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009b16:	4b2d      	ldr	r3, [pc, #180]	; (8009bcc <xPortStartScheduler+0xec>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	4a2b      	ldr	r2, [pc, #172]	; (8009bcc <xPortStartScheduler+0xec>)
 8009b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b20:	78fb      	ldrb	r3, [r7, #3]
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	005b      	lsls	r3, r3, #1
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b2a:	78fb      	ldrb	r3, [r7, #3]
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b32:	2b80      	cmp	r3, #128	; 0x80
 8009b34:	d0ef      	beq.n	8009b16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b36:	4b25      	ldr	r3, [pc, #148]	; (8009bcc <xPortStartScheduler+0xec>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f1c3 0307 	rsb	r3, r3, #7
 8009b3e:	2b04      	cmp	r3, #4
 8009b40:	d00c      	beq.n	8009b5c <xPortStartScheduler+0x7c>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b46:	b672      	cpsid	i
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	b662      	cpsie	i
 8009b56:	60bb      	str	r3, [r7, #8]
}
 8009b58:	bf00      	nop
 8009b5a:	e7fe      	b.n	8009b5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b5c:	4b1b      	ldr	r3, [pc, #108]	; (8009bcc <xPortStartScheduler+0xec>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	021b      	lsls	r3, r3, #8
 8009b62:	4a1a      	ldr	r2, [pc, #104]	; (8009bcc <xPortStartScheduler+0xec>)
 8009b64:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b66:	4b19      	ldr	r3, [pc, #100]	; (8009bcc <xPortStartScheduler+0xec>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b6e:	4a17      	ldr	r2, [pc, #92]	; (8009bcc <xPortStartScheduler+0xec>)
 8009b70:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	b2da      	uxtb	r2, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b7a:	4b15      	ldr	r3, [pc, #84]	; (8009bd0 <xPortStartScheduler+0xf0>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a14      	ldr	r2, [pc, #80]	; (8009bd0 <xPortStartScheduler+0xf0>)
 8009b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b84:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b86:	4b12      	ldr	r3, [pc, #72]	; (8009bd0 <xPortStartScheduler+0xf0>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a11      	ldr	r2, [pc, #68]	; (8009bd0 <xPortStartScheduler+0xf0>)
 8009b8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b90:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b92:	f000 f8dd 	bl	8009d50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b96:	4b0f      	ldr	r3, [pc, #60]	; (8009bd4 <xPortStartScheduler+0xf4>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b9c:	f000 f8fc 	bl	8009d98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ba0:	4b0d      	ldr	r3, [pc, #52]	; (8009bd8 <xPortStartScheduler+0xf8>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a0c      	ldr	r2, [pc, #48]	; (8009bd8 <xPortStartScheduler+0xf8>)
 8009ba6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009baa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009bac:	f7ff ff84 	bl	8009ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009bb0:	f7ff f844 	bl	8008c3c <vTaskSwitchContext>
	prvTaskExitError();
 8009bb4:	f7ff ff3a 	bl	8009a2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	e000e400 	.word	0xe000e400
 8009bc8:	20000fe0 	.word	0x20000fe0
 8009bcc:	20000fe4 	.word	0x20000fe4
 8009bd0:	e000ed20 	.word	0xe000ed20
 8009bd4:	20000118 	.word	0x20000118
 8009bd8:	e000ef34 	.word	0xe000ef34

08009bdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
	__asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be6:	b672      	cpsid	i
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	b662      	cpsie	i
 8009bf6:	607b      	str	r3, [r7, #4]
}
 8009bf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009bfa:	4b10      	ldr	r3, [pc, #64]	; (8009c3c <vPortEnterCritical+0x60>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	4a0e      	ldr	r2, [pc, #56]	; (8009c3c <vPortEnterCritical+0x60>)
 8009c02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c04:	4b0d      	ldr	r3, [pc, #52]	; (8009c3c <vPortEnterCritical+0x60>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d111      	bne.n	8009c30 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c0c:	4b0c      	ldr	r3, [pc, #48]	; (8009c40 <vPortEnterCritical+0x64>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00c      	beq.n	8009c30 <vPortEnterCritical+0x54>
	__asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1a:	b672      	cpsid	i
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	b662      	cpsie	i
 8009c2a:	603b      	str	r3, [r7, #0]
}
 8009c2c:	bf00      	nop
 8009c2e:	e7fe      	b.n	8009c2e <vPortEnterCritical+0x52>
	}
}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	20000118 	.word	0x20000118
 8009c40:	e000ed04 	.word	0xe000ed04

08009c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c4a:	4b13      	ldr	r3, [pc, #76]	; (8009c98 <vPortExitCritical+0x54>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10c      	bne.n	8009c6c <vPortExitCritical+0x28>
	__asm volatile
 8009c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c56:	b672      	cpsid	i
 8009c58:	f383 8811 	msr	BASEPRI, r3
 8009c5c:	f3bf 8f6f 	isb	sy
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	b662      	cpsie	i
 8009c66:	607b      	str	r3, [r7, #4]
}
 8009c68:	bf00      	nop
 8009c6a:	e7fe      	b.n	8009c6a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009c6c:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <vPortExitCritical+0x54>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3b01      	subs	r3, #1
 8009c72:	4a09      	ldr	r2, [pc, #36]	; (8009c98 <vPortExitCritical+0x54>)
 8009c74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c76:	4b08      	ldr	r3, [pc, #32]	; (8009c98 <vPortExitCritical+0x54>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d105      	bne.n	8009c8a <vPortExitCritical+0x46>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	f383 8811 	msr	BASEPRI, r3
}
 8009c88:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c8a:	bf00      	nop
 8009c8c:	370c      	adds	r7, #12
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	20000118 	.word	0x20000118
 8009c9c:	00000000 	.word	0x00000000

08009ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ca0:	f3ef 8009 	mrs	r0, PSP
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	4b15      	ldr	r3, [pc, #84]	; (8009d00 <pxCurrentTCBConst>)
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	f01e 0f10 	tst.w	lr, #16
 8009cb0:	bf08      	it	eq
 8009cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cba:	6010      	str	r0, [r2, #0]
 8009cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009cc4:	b672      	cpsid	i
 8009cc6:	f380 8811 	msr	BASEPRI, r0
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	b662      	cpsie	i
 8009cd4:	f7fe ffb2 	bl	8008c3c <vTaskSwitchContext>
 8009cd8:	f04f 0000 	mov.w	r0, #0
 8009cdc:	f380 8811 	msr	BASEPRI, r0
 8009ce0:	bc09      	pop	{r0, r3}
 8009ce2:	6819      	ldr	r1, [r3, #0]
 8009ce4:	6808      	ldr	r0, [r1, #0]
 8009ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cea:	f01e 0f10 	tst.w	lr, #16
 8009cee:	bf08      	it	eq
 8009cf0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009cf4:	f380 8809 	msr	PSP, r0
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop

08009d00 <pxCurrentTCBConst>:
 8009d00:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d04:	bf00      	nop
 8009d06:	bf00      	nop

08009d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	b672      	cpsid	i
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	b662      	cpsie	i
 8009d22:	607b      	str	r3, [r7, #4]
}
 8009d24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d26:	f7fe fecd 	bl	8008ac4 <xTaskIncrementTick>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d003      	beq.n	8009d38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d30:	4b06      	ldr	r3, [pc, #24]	; (8009d4c <SysTick_Handler+0x44>)
 8009d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d36:	601a      	str	r2, [r3, #0]
 8009d38:	2300      	movs	r3, #0
 8009d3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	f383 8811 	msr	BASEPRI, r3
}
 8009d42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d44:	bf00      	nop
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	e000ed04 	.word	0xe000ed04

08009d50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d50:	b480      	push	{r7}
 8009d52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d54:	4b0b      	ldr	r3, [pc, #44]	; (8009d84 <vPortSetupTimerInterrupt+0x34>)
 8009d56:	2200      	movs	r2, #0
 8009d58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d5a:	4b0b      	ldr	r3, [pc, #44]	; (8009d88 <vPortSetupTimerInterrupt+0x38>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d60:	4b0a      	ldr	r3, [pc, #40]	; (8009d8c <vPortSetupTimerInterrupt+0x3c>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a0a      	ldr	r2, [pc, #40]	; (8009d90 <vPortSetupTimerInterrupt+0x40>)
 8009d66:	fba2 2303 	umull	r2, r3, r2, r3
 8009d6a:	099b      	lsrs	r3, r3, #6
 8009d6c:	4a09      	ldr	r2, [pc, #36]	; (8009d94 <vPortSetupTimerInterrupt+0x44>)
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d72:	4b04      	ldr	r3, [pc, #16]	; (8009d84 <vPortSetupTimerInterrupt+0x34>)
 8009d74:	2207      	movs	r2, #7
 8009d76:	601a      	str	r2, [r3, #0]
}
 8009d78:	bf00      	nop
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	e000e010 	.word	0xe000e010
 8009d88:	e000e018 	.word	0xe000e018
 8009d8c:	2000011c 	.word	0x2000011c
 8009d90:	10624dd3 	.word	0x10624dd3
 8009d94:	e000e014 	.word	0xe000e014

08009d98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d98:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009da8 <vPortEnableVFP+0x10>
 8009d9c:	6801      	ldr	r1, [r0, #0]
 8009d9e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009da2:	6001      	str	r1, [r0, #0]
 8009da4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009da6:	bf00      	nop
 8009da8:	e000ed88 	.word	0xe000ed88

08009dac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009db2:	f3ef 8305 	mrs	r3, IPSR
 8009db6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2b0f      	cmp	r3, #15
 8009dbc:	d916      	bls.n	8009dec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009dbe:	4a19      	ldr	r2, [pc, #100]	; (8009e24 <vPortValidateInterruptPriority+0x78>)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009dc8:	4b17      	ldr	r3, [pc, #92]	; (8009e28 <vPortValidateInterruptPriority+0x7c>)
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	7afa      	ldrb	r2, [r7, #11]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d20c      	bcs.n	8009dec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd6:	b672      	cpsid	i
 8009dd8:	f383 8811 	msr	BASEPRI, r3
 8009ddc:	f3bf 8f6f 	isb	sy
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	b662      	cpsie	i
 8009de6:	607b      	str	r3, [r7, #4]
}
 8009de8:	bf00      	nop
 8009dea:	e7fe      	b.n	8009dea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009dec:	4b0f      	ldr	r3, [pc, #60]	; (8009e2c <vPortValidateInterruptPriority+0x80>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009df4:	4b0e      	ldr	r3, [pc, #56]	; (8009e30 <vPortValidateInterruptPriority+0x84>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d90c      	bls.n	8009e16 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e00:	b672      	cpsid	i
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	b662      	cpsie	i
 8009e10:	603b      	str	r3, [r7, #0]
}
 8009e12:	bf00      	nop
 8009e14:	e7fe      	b.n	8009e14 <vPortValidateInterruptPriority+0x68>
	}
 8009e16:	bf00      	nop
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	e000e3f0 	.word	0xe000e3f0
 8009e28:	20000fe0 	.word	0x20000fe0
 8009e2c:	e000ed0c 	.word	0xe000ed0c
 8009e30:	20000fe4 	.word	0x20000fe4

08009e34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b08a      	sub	sp, #40	; 0x28
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009e40:	f7fe fd82 	bl	8008948 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009e44:	4b5b      	ldr	r3, [pc, #364]	; (8009fb4 <pvPortMalloc+0x180>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d101      	bne.n	8009e50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e4c:	f000 f91a 	bl	800a084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e50:	4b59      	ldr	r3, [pc, #356]	; (8009fb8 <pvPortMalloc+0x184>)
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4013      	ands	r3, r2
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f040 8092 	bne.w	8009f82 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d01f      	beq.n	8009ea4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009e64:	2208      	movs	r2, #8
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4413      	add	r3, r2
 8009e6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f003 0307 	and.w	r3, r3, #7
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d016      	beq.n	8009ea4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f023 0307 	bic.w	r3, r3, #7
 8009e7c:	3308      	adds	r3, #8
 8009e7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f003 0307 	and.w	r3, r3, #7
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00c      	beq.n	8009ea4 <pvPortMalloc+0x70>
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	b672      	cpsid	i
 8009e90:	f383 8811 	msr	BASEPRI, r3
 8009e94:	f3bf 8f6f 	isb	sy
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	b662      	cpsie	i
 8009e9e:	617b      	str	r3, [r7, #20]
}
 8009ea0:	bf00      	nop
 8009ea2:	e7fe      	b.n	8009ea2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d06b      	beq.n	8009f82 <pvPortMalloc+0x14e>
 8009eaa:	4b44      	ldr	r3, [pc, #272]	; (8009fbc <pvPortMalloc+0x188>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d866      	bhi.n	8009f82 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009eb4:	4b42      	ldr	r3, [pc, #264]	; (8009fc0 <pvPortMalloc+0x18c>)
 8009eb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009eb8:	4b41      	ldr	r3, [pc, #260]	; (8009fc0 <pvPortMalloc+0x18c>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ebe:	e004      	b.n	8009eca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d903      	bls.n	8009edc <pvPortMalloc+0xa8>
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1f1      	bne.n	8009ec0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009edc:	4b35      	ldr	r3, [pc, #212]	; (8009fb4 <pvPortMalloc+0x180>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d04d      	beq.n	8009f82 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ee6:	6a3b      	ldr	r3, [r7, #32]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2208      	movs	r2, #8
 8009eec:	4413      	add	r3, r2
 8009eee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	6a3b      	ldr	r3, [r7, #32]
 8009ef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	1ad2      	subs	r2, r2, r3
 8009f00:	2308      	movs	r3, #8
 8009f02:	005b      	lsls	r3, r3, #1
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d921      	bls.n	8009f4c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	f003 0307 	and.w	r3, r3, #7
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00c      	beq.n	8009f34 <pvPortMalloc+0x100>
	__asm volatile
 8009f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1e:	b672      	cpsid	i
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	b662      	cpsie	i
 8009f2e:	613b      	str	r3, [r7, #16]
}
 8009f30:	bf00      	nop
 8009f32:	e7fe      	b.n	8009f32 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f36:	685a      	ldr	r2, [r3, #4]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	1ad2      	subs	r2, r2, r3
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009f46:	69b8      	ldr	r0, [r7, #24]
 8009f48:	f000 f8fe 	bl	800a148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f4c:	4b1b      	ldr	r3, [pc, #108]	; (8009fbc <pvPortMalloc+0x188>)
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	4a19      	ldr	r2, [pc, #100]	; (8009fbc <pvPortMalloc+0x188>)
 8009f58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f5a:	4b18      	ldr	r3, [pc, #96]	; (8009fbc <pvPortMalloc+0x188>)
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	4b19      	ldr	r3, [pc, #100]	; (8009fc4 <pvPortMalloc+0x190>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d203      	bcs.n	8009f6e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f66:	4b15      	ldr	r3, [pc, #84]	; (8009fbc <pvPortMalloc+0x188>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a16      	ldr	r2, [pc, #88]	; (8009fc4 <pvPortMalloc+0x190>)
 8009f6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f70:	685a      	ldr	r2, [r3, #4]
 8009f72:	4b11      	ldr	r3, [pc, #68]	; (8009fb8 <pvPortMalloc+0x184>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	431a      	orrs	r2, r3
 8009f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7e:	2200      	movs	r2, #0
 8009f80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f82:	f7fe fcef 	bl	8008964 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	f003 0307 	and.w	r3, r3, #7
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00c      	beq.n	8009faa <pvPortMalloc+0x176>
	__asm volatile
 8009f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f94:	b672      	cpsid	i
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	b662      	cpsie	i
 8009fa4:	60fb      	str	r3, [r7, #12]
}
 8009fa6:	bf00      	nop
 8009fa8:	e7fe      	b.n	8009fa8 <pvPortMalloc+0x174>
	return pvReturn;
 8009faa:	69fb      	ldr	r3, [r7, #28]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3728      	adds	r7, #40	; 0x28
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	20004bf0 	.word	0x20004bf0
 8009fb8:	20004bfc 	.word	0x20004bfc
 8009fbc:	20004bf4 	.word	0x20004bf4
 8009fc0:	20004be8 	.word	0x20004be8
 8009fc4:	20004bf8 	.word	0x20004bf8

08009fc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d04c      	beq.n	800a074 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009fda:	2308      	movs	r3, #8
 8009fdc:	425b      	negs	r3, r3
 8009fde:	697a      	ldr	r2, [r7, #20]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	685a      	ldr	r2, [r3, #4]
 8009fec:	4b23      	ldr	r3, [pc, #140]	; (800a07c <vPortFree+0xb4>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10c      	bne.n	800a010 <vPortFree+0x48>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffa:	b672      	cpsid	i
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	b662      	cpsie	i
 800a00a:	60fb      	str	r3, [r7, #12]
}
 800a00c:	bf00      	nop
 800a00e:	e7fe      	b.n	800a00e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00c      	beq.n	800a032 <vPortFree+0x6a>
	__asm volatile
 800a018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01c:	b672      	cpsid	i
 800a01e:	f383 8811 	msr	BASEPRI, r3
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	b662      	cpsie	i
 800a02c:	60bb      	str	r3, [r7, #8]
}
 800a02e:	bf00      	nop
 800a030:	e7fe      	b.n	800a030 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	685a      	ldr	r2, [r3, #4]
 800a036:	4b11      	ldr	r3, [pc, #68]	; (800a07c <vPortFree+0xb4>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4013      	ands	r3, r2
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d019      	beq.n	800a074 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d115      	bne.n	800a074 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	4b0b      	ldr	r3, [pc, #44]	; (800a07c <vPortFree+0xb4>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	43db      	mvns	r3, r3
 800a052:	401a      	ands	r2, r3
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a058:	f7fe fc76 	bl	8008948 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	685a      	ldr	r2, [r3, #4]
 800a060:	4b07      	ldr	r3, [pc, #28]	; (800a080 <vPortFree+0xb8>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4413      	add	r3, r2
 800a066:	4a06      	ldr	r2, [pc, #24]	; (800a080 <vPortFree+0xb8>)
 800a068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a06a:	6938      	ldr	r0, [r7, #16]
 800a06c:	f000 f86c 	bl	800a148 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a070:	f7fe fc78 	bl	8008964 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a074:	bf00      	nop
 800a076:	3718      	adds	r7, #24
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	20004bfc 	.word	0x20004bfc
 800a080:	20004bf4 	.word	0x20004bf4

0800a084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a084:	b480      	push	{r7}
 800a086:	b085      	sub	sp, #20
 800a088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a08a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a08e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a090:	4b27      	ldr	r3, [pc, #156]	; (800a130 <prvHeapInit+0xac>)
 800a092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f003 0307 	and.w	r3, r3, #7
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00c      	beq.n	800a0b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	3307      	adds	r3, #7
 800a0a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f023 0307 	bic.w	r3, r3, #7
 800a0aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	4a1f      	ldr	r2, [pc, #124]	; (800a130 <prvHeapInit+0xac>)
 800a0b4:	4413      	add	r3, r2
 800a0b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a0bc:	4a1d      	ldr	r2, [pc, #116]	; (800a134 <prvHeapInit+0xb0>)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a0c2:	4b1c      	ldr	r3, [pc, #112]	; (800a134 <prvHeapInit+0xb0>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	68ba      	ldr	r2, [r7, #8]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a0d0:	2208      	movs	r2, #8
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	1a9b      	subs	r3, r3, r2
 800a0d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f023 0307 	bic.w	r3, r3, #7
 800a0de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	4a15      	ldr	r2, [pc, #84]	; (800a138 <prvHeapInit+0xb4>)
 800a0e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a0e6:	4b14      	ldr	r3, [pc, #80]	; (800a138 <prvHeapInit+0xb4>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a0ee:	4b12      	ldr	r3, [pc, #72]	; (800a138 <prvHeapInit+0xb4>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	1ad2      	subs	r2, r2, r3
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a104:	4b0c      	ldr	r3, [pc, #48]	; (800a138 <prvHeapInit+0xb4>)
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	4a0a      	ldr	r2, [pc, #40]	; (800a13c <prvHeapInit+0xb8>)
 800a112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	4a09      	ldr	r2, [pc, #36]	; (800a140 <prvHeapInit+0xbc>)
 800a11a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a11c:	4b09      	ldr	r3, [pc, #36]	; (800a144 <prvHeapInit+0xc0>)
 800a11e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a122:	601a      	str	r2, [r3, #0]
}
 800a124:	bf00      	nop
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	20000fe8 	.word	0x20000fe8
 800a134:	20004be8 	.word	0x20004be8
 800a138:	20004bf0 	.word	0x20004bf0
 800a13c:	20004bf8 	.word	0x20004bf8
 800a140:	20004bf4 	.word	0x20004bf4
 800a144:	20004bfc 	.word	0x20004bfc

0800a148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a150:	4b28      	ldr	r3, [pc, #160]	; (800a1f4 <prvInsertBlockIntoFreeList+0xac>)
 800a152:	60fb      	str	r3, [r7, #12]
 800a154:	e002      	b.n	800a15c <prvInsertBlockIntoFreeList+0x14>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	60fb      	str	r3, [r7, #12]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	429a      	cmp	r2, r3
 800a164:	d8f7      	bhi.n	800a156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	4413      	add	r3, r2
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	429a      	cmp	r2, r3
 800a176:	d108      	bne.n	800a18a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	685a      	ldr	r2, [r3, #4]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	441a      	add	r2, r3
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	441a      	add	r2, r3
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d118      	bne.n	800a1d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	4b15      	ldr	r3, [pc, #84]	; (800a1f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d00d      	beq.n	800a1c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	441a      	add	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	e008      	b.n	800a1d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a1c6:	4b0c      	ldr	r3, [pc, #48]	; (800a1f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	601a      	str	r2, [r3, #0]
 800a1ce:	e003      	b.n	800a1d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d002      	beq.n	800a1e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1e6:	bf00      	nop
 800a1e8:	3714      	adds	r7, #20
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	20004be8 	.word	0x20004be8
 800a1f8:	20004bf0 	.word	0x20004bf0

0800a1fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a200:	4904      	ldr	r1, [pc, #16]	; (800a214 <MX_FATFS_Init+0x18>)
 800a202:	4805      	ldr	r0, [pc, #20]	; (800a218 <MX_FATFS_Init+0x1c>)
 800a204:	f7fd f9f0 	bl	80075e8 <FATFS_LinkDriver>
 800a208:	4603      	mov	r3, r0
 800a20a:	461a      	mov	r2, r3
 800a20c:	4b03      	ldr	r3, [pc, #12]	; (800a21c <MX_FATFS_Init+0x20>)
 800a20e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a210:	bf00      	nop
 800a212:	bd80      	pop	{r7, pc}
 800a214:	20004d34 	.word	0x20004d34
 800a218:	20000194 	.word	0x20000194
 800a21c:	20004d38 	.word	0x20004d38

0800a220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a224:	f7f6 f970 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a228:	f000 f81c 	bl	800a264 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a22c:	f000 f934 	bl	800a498 <_ZL12MX_GPIO_Initv>
  MX_ETH_Init();
 800a230:	f000 f8b6 	bl	800a3a0 <_ZL11MX_ETH_Initv>
  MX_USART3_UART_Init();
 800a234:	f000 f8fc 	bl	800a430 <_ZL19MX_USART3_UART_Initv>
  MX_FATFS_Init();
 800a238:	f7ff ffe0 	bl	800a1fc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800a23c:	f7fd f9ea 	bl	8007614 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800a240:	4a05      	ldr	r2, [pc, #20]	; (800a258 <main+0x38>)
 800a242:	2100      	movs	r1, #0
 800a244:	4805      	ldr	r0, [pc, #20]	; (800a25c <main+0x3c>)
 800a246:	f7fd fa4f 	bl	80076e8 <osThreadNew>
 800a24a:	4603      	mov	r3, r0
 800a24c:	4a04      	ldr	r2, [pc, #16]	; (800a260 <main+0x40>)
 800a24e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800a250:	f7fd fa14 	bl	800767c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a254:	e7fe      	b.n	800a254 <main+0x34>
 800a256:	bf00      	nop
 800a258:	0800ba34 	.word	0x0800ba34
 800a25c:	0800a5dd 	.word	0x0800a5dd
 800a260:	20004ccc 	.word	0x20004ccc

0800a264 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b0b4      	sub	sp, #208	; 0xd0
 800a268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a26a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a26e:	2230      	movs	r2, #48	; 0x30
 800a270:	2100      	movs	r1, #0
 800a272:	4618      	mov	r0, r3
 800a274:	f001 fa64 	bl	800b740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a278:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a27c:	2200      	movs	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	605a      	str	r2, [r3, #4]
 800a282:	609a      	str	r2, [r3, #8]
 800a284:	60da      	str	r2, [r3, #12]
 800a286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a288:	f107 0308 	add.w	r3, r7, #8
 800a28c:	2284      	movs	r2, #132	; 0x84
 800a28e:	2100      	movs	r1, #0
 800a290:	4618      	mov	r0, r3
 800a292:	f001 fa55 	bl	800b740 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800a296:	f7f8 fa59 	bl	800274c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a29a:	4b3e      	ldr	r3, [pc, #248]	; (800a394 <_Z18SystemClock_Configv+0x130>)
 800a29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29e:	4a3d      	ldr	r2, [pc, #244]	; (800a394 <_Z18SystemClock_Configv+0x130>)
 800a2a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2a4:	6413      	str	r3, [r2, #64]	; 0x40
 800a2a6:	4b3b      	ldr	r3, [pc, #236]	; (800a394 <_Z18SystemClock_Configv+0x130>)
 800a2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2ae:	607b      	str	r3, [r7, #4]
 800a2b0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800a2b2:	4b39      	ldr	r3, [pc, #228]	; (800a398 <_Z18SystemClock_Configv+0x134>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a2ba:	4a37      	ldr	r2, [pc, #220]	; (800a398 <_Z18SystemClock_Configv+0x134>)
 800a2bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2c0:	6013      	str	r3, [r2, #0]
 800a2c2:	4b35      	ldr	r3, [pc, #212]	; (800a398 <_Z18SystemClock_Configv+0x134>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a2ca:	603b      	str	r3, [r7, #0]
 800a2cc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800a2d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800a2d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a2dc:	2302      	movs	r3, #2
 800a2de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a2e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a2e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800a2ea:	2304      	movs	r3, #4
 800a2ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 800a2f0:	2348      	movs	r3, #72	; 0x48
 800a2f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a2f6:	2302      	movs	r3, #2
 800a2f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a302:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a306:	4618      	mov	r0, r3
 800a308:	f7f8 fa30 	bl	800276c <HAL_RCC_OscConfig>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	bf14      	ite	ne
 800a312:	2301      	movne	r3, #1
 800a314:	2300      	moveq	r3, #0
 800a316:	b2db      	uxtb	r3, r3
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 800a31c:	f000 f97a 	bl	800a614 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a320:	230f      	movs	r3, #15
 800a322:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a326:	2302      	movs	r3, #2
 800a328:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a32c:	2300      	movs	r3, #0
 800a32e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a336:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a33a:	2300      	movs	r3, #0
 800a33c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a340:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a344:	2102      	movs	r1, #2
 800a346:	4618      	mov	r0, r3
 800a348:	f7f8 fcb4 	bl	8002cb4 <HAL_RCC_ClockConfig>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	bf14      	ite	ne
 800a352:	2301      	movne	r3, #1
 800a354:	2300      	moveq	r3, #0
 800a356:	b2db      	uxtb	r3, r3
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d001      	beq.n	800a360 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 800a35c:	f000 f95a 	bl	800a614 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800a360:	4b0e      	ldr	r3, [pc, #56]	; (800a39c <_Z18SystemClock_Configv+0x138>)
 800a362:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a364:	2300      	movs	r3, #0
 800a366:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800a368:	2300      	movs	r3, #0
 800a36a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a36e:	f107 0308 	add.w	r3, r7, #8
 800a372:	4618      	mov	r0, r3
 800a374:	f7f8 fed2 	bl	800311c <HAL_RCCEx_PeriphCLKConfig>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	bf14      	ite	ne
 800a37e:	2301      	movne	r3, #1
 800a380:	2300      	moveq	r3, #0
 800a382:	b2db      	uxtb	r3, r3
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <_Z18SystemClock_Configv+0x128>
  {
    Error_Handler();
 800a388:	f000 f944 	bl	800a614 <Error_Handler>
  }
}
 800a38c:	bf00      	nop
 800a38e:	37d0      	adds	r7, #208	; 0xd0
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	40023800 	.word	0x40023800
 800a398:	40007000 	.word	0x40007000
 800a39c:	00200100 	.word	0x00200100

0800a3a0 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800a3a4:	4b1f      	ldr	r3, [pc, #124]	; (800a424 <_ZL11MX_ETH_Initv+0x84>)
 800a3a6:	4a20      	ldr	r2, [pc, #128]	; (800a428 <_ZL11MX_ETH_Initv+0x88>)
 800a3a8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a3aa:	4b1e      	ldr	r3, [pc, #120]	; (800a424 <_ZL11MX_ETH_Initv+0x84>)
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800a3b0:	4b1c      	ldr	r3, [pc, #112]	; (800a424 <_ZL11MX_ETH_Initv+0x84>)
 800a3b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a3b6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a3b8:	4b1a      	ldr	r3, [pc, #104]	; (800a424 <_ZL11MX_ETH_Initv+0x84>)
 800a3ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3be:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800a3c0:	4b18      	ldr	r3, [pc, #96]	; (800a424 <_ZL11MX_ETH_Initv+0x84>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800a3c6:	4b19      	ldr	r3, [pc, #100]	; (800a42c <_ZL11MX_ETH_Initv+0x8c>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800a3cc:	4b17      	ldr	r3, [pc, #92]	; (800a42c <_ZL11MX_ETH_Initv+0x8c>)
 800a3ce:	2280      	movs	r2, #128	; 0x80
 800a3d0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800a3d2:	4b16      	ldr	r3, [pc, #88]	; (800a42c <_ZL11MX_ETH_Initv+0x8c>)
 800a3d4:	22e1      	movs	r2, #225	; 0xe1
 800a3d6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800a3d8:	4b14      	ldr	r3, [pc, #80]	; (800a42c <_ZL11MX_ETH_Initv+0x8c>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800a3de:	4b13      	ldr	r3, [pc, #76]	; (800a42c <_ZL11MX_ETH_Initv+0x8c>)
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800a3e4:	4b11      	ldr	r3, [pc, #68]	; (800a42c <_ZL11MX_ETH_Initv+0x8c>)
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800a3ea:	4b0e      	ldr	r3, [pc, #56]	; (800a424 <_ZL11MX_ETH_Initv+0x84>)
 800a3ec:	4a0f      	ldr	r2, [pc, #60]	; (800a42c <_ZL11MX_ETH_Initv+0x8c>)
 800a3ee:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800a3f0:	4b0c      	ldr	r3, [pc, #48]	; (800a424 <_ZL11MX_ETH_Initv+0x84>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800a3f6:	4b0b      	ldr	r3, [pc, #44]	; (800a424 <_ZL11MX_ETH_Initv+0x84>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a3fc:	4b09      	ldr	r3, [pc, #36]	; (800a424 <_ZL11MX_ETH_Initv+0x84>)
 800a3fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a402:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800a404:	4807      	ldr	r0, [pc, #28]	; (800a424 <_ZL11MX_ETH_Initv+0x84>)
 800a406:	f7f6 f9b3 	bl	8000770 <HAL_ETH_Init>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	bf14      	ite	ne
 800a410:	2301      	movne	r3, #1
 800a412:	2300      	moveq	r3, #0
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <_ZL11MX_ETH_Initv+0x7e>
  {
    Error_Handler();
 800a41a:	f000 f8fb 	bl	800a614 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800a41e:	bf00      	nop
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	20004c00 	.word	0x20004c00
 800a428:	40028000 	.word	0x40028000
 800a42c:	20004cd0 	.word	0x20004cd0

0800a430 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a434:	4b16      	ldr	r3, [pc, #88]	; (800a490 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a436:	4a17      	ldr	r2, [pc, #92]	; (800a494 <_ZL19MX_USART3_UART_Initv+0x64>)
 800a438:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800a43a:	4b15      	ldr	r3, [pc, #84]	; (800a490 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a43c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a440:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a442:	4b13      	ldr	r3, [pc, #76]	; (800a490 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a444:	2200      	movs	r2, #0
 800a446:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a448:	4b11      	ldr	r3, [pc, #68]	; (800a490 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a44a:	2200      	movs	r2, #0
 800a44c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a44e:	4b10      	ldr	r3, [pc, #64]	; (800a490 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a450:	2200      	movs	r2, #0
 800a452:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a454:	4b0e      	ldr	r3, [pc, #56]	; (800a490 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a456:	220c      	movs	r2, #12
 800a458:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a45a:	4b0d      	ldr	r3, [pc, #52]	; (800a490 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a460:	4b0b      	ldr	r3, [pc, #44]	; (800a490 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a462:	2200      	movs	r2, #0
 800a464:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a466:	4b0a      	ldr	r3, [pc, #40]	; (800a490 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a468:	2200      	movs	r2, #0
 800a46a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a46c:	4b08      	ldr	r3, [pc, #32]	; (800a490 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a46e:	2200      	movs	r2, #0
 800a470:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a472:	4807      	ldr	r0, [pc, #28]	; (800a490 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a474:	f7f9 fd22 	bl	8003ebc <HAL_UART_Init>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	bf14      	ite	ne
 800a47e:	2301      	movne	r3, #1
 800a480:	2300      	moveq	r3, #0
 800a482:	b2db      	uxtb	r3, r3
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 800a488:	f000 f8c4 	bl	800a614 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a48c:	bf00      	nop
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	20004c48 	.word	0x20004c48
 800a494:	40004800 	.word	0x40004800

0800a498 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b08c      	sub	sp, #48	; 0x30
 800a49c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a49e:	f107 031c 	add.w	r3, r7, #28
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	601a      	str	r2, [r3, #0]
 800a4a6:	605a      	str	r2, [r3, #4]
 800a4a8:	609a      	str	r2, [r3, #8]
 800a4aa:	60da      	str	r2, [r3, #12]
 800a4ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4ae:	4b46      	ldr	r3, [pc, #280]	; (800a5c8 <_ZL12MX_GPIO_Initv+0x130>)
 800a4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b2:	4a45      	ldr	r2, [pc, #276]	; (800a5c8 <_ZL12MX_GPIO_Initv+0x130>)
 800a4b4:	f043 0304 	orr.w	r3, r3, #4
 800a4b8:	6313      	str	r3, [r2, #48]	; 0x30
 800a4ba:	4b43      	ldr	r3, [pc, #268]	; (800a5c8 <_ZL12MX_GPIO_Initv+0x130>)
 800a4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4be:	f003 0304 	and.w	r3, r3, #4
 800a4c2:	61bb      	str	r3, [r7, #24]
 800a4c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a4c6:	4b40      	ldr	r3, [pc, #256]	; (800a5c8 <_ZL12MX_GPIO_Initv+0x130>)
 800a4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ca:	4a3f      	ldr	r2, [pc, #252]	; (800a5c8 <_ZL12MX_GPIO_Initv+0x130>)
 800a4cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4d0:	6313      	str	r3, [r2, #48]	; 0x30
 800a4d2:	4b3d      	ldr	r3, [pc, #244]	; (800a5c8 <_ZL12MX_GPIO_Initv+0x130>)
 800a4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4da:	617b      	str	r3, [r7, #20]
 800a4dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4de:	4b3a      	ldr	r3, [pc, #232]	; (800a5c8 <_ZL12MX_GPIO_Initv+0x130>)
 800a4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e2:	4a39      	ldr	r2, [pc, #228]	; (800a5c8 <_ZL12MX_GPIO_Initv+0x130>)
 800a4e4:	f043 0301 	orr.w	r3, r3, #1
 800a4e8:	6313      	str	r3, [r2, #48]	; 0x30
 800a4ea:	4b37      	ldr	r3, [pc, #220]	; (800a5c8 <_ZL12MX_GPIO_Initv+0x130>)
 800a4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	613b      	str	r3, [r7, #16]
 800a4f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4f6:	4b34      	ldr	r3, [pc, #208]	; (800a5c8 <_ZL12MX_GPIO_Initv+0x130>)
 800a4f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fa:	4a33      	ldr	r2, [pc, #204]	; (800a5c8 <_ZL12MX_GPIO_Initv+0x130>)
 800a4fc:	f043 0302 	orr.w	r3, r3, #2
 800a500:	6313      	str	r3, [r2, #48]	; 0x30
 800a502:	4b31      	ldr	r3, [pc, #196]	; (800a5c8 <_ZL12MX_GPIO_Initv+0x130>)
 800a504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a506:	f003 0302 	and.w	r3, r3, #2
 800a50a:	60fb      	str	r3, [r7, #12]
 800a50c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a50e:	4b2e      	ldr	r3, [pc, #184]	; (800a5c8 <_ZL12MX_GPIO_Initv+0x130>)
 800a510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a512:	4a2d      	ldr	r2, [pc, #180]	; (800a5c8 <_ZL12MX_GPIO_Initv+0x130>)
 800a514:	f043 0308 	orr.w	r3, r3, #8
 800a518:	6313      	str	r3, [r2, #48]	; 0x30
 800a51a:	4b2b      	ldr	r3, [pc, #172]	; (800a5c8 <_ZL12MX_GPIO_Initv+0x130>)
 800a51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51e:	f003 0308 	and.w	r3, r3, #8
 800a522:	60bb      	str	r3, [r7, #8]
 800a524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a526:	4b28      	ldr	r3, [pc, #160]	; (800a5c8 <_ZL12MX_GPIO_Initv+0x130>)
 800a528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52a:	4a27      	ldr	r2, [pc, #156]	; (800a5c8 <_ZL12MX_GPIO_Initv+0x130>)
 800a52c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a530:	6313      	str	r3, [r2, #48]	; 0x30
 800a532:	4b25      	ldr	r3, [pc, #148]	; (800a5c8 <_ZL12MX_GPIO_Initv+0x130>)
 800a534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a53a:	607b      	str	r3, [r7, #4]
 800a53c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800a53e:	2200      	movs	r2, #0
 800a540:	f244 0181 	movw	r1, #16513	; 0x4081
 800a544:	4821      	ldr	r0, [pc, #132]	; (800a5cc <_ZL12MX_GPIO_Initv+0x134>)
 800a546:	f7f6 ff29 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800a54a:	2200      	movs	r2, #0
 800a54c:	2140      	movs	r1, #64	; 0x40
 800a54e:	4820      	ldr	r0, [pc, #128]	; (800a5d0 <_ZL12MX_GPIO_Initv+0x138>)
 800a550:	f7f6 ff24 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800a554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a55a:	4b1e      	ldr	r3, [pc, #120]	; (800a5d4 <_ZL12MX_GPIO_Initv+0x13c>)
 800a55c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a55e:	2300      	movs	r3, #0
 800a560:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800a562:	f107 031c 	add.w	r3, r7, #28
 800a566:	4619      	mov	r1, r3
 800a568:	481b      	ldr	r0, [pc, #108]	; (800a5d8 <_ZL12MX_GPIO_Initv+0x140>)
 800a56a:	f7f6 fd6b 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800a56e:	f244 0381 	movw	r3, #16513	; 0x4081
 800a572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a574:	2301      	movs	r3, #1
 800a576:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a578:	2300      	movs	r3, #0
 800a57a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a57c:	2300      	movs	r3, #0
 800a57e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a580:	f107 031c 	add.w	r3, r7, #28
 800a584:	4619      	mov	r1, r3
 800a586:	4811      	ldr	r0, [pc, #68]	; (800a5cc <_ZL12MX_GPIO_Initv+0x134>)
 800a588:	f7f6 fd5c 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800a58c:	2340      	movs	r3, #64	; 0x40
 800a58e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a590:	2301      	movs	r3, #1
 800a592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a594:	2300      	movs	r3, #0
 800a596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a598:	2300      	movs	r3, #0
 800a59a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800a59c:	f107 031c 	add.w	r3, r7, #28
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	480b      	ldr	r0, [pc, #44]	; (800a5d0 <_ZL12MX_GPIO_Initv+0x138>)
 800a5a4:	f7f6 fd4e 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800a5a8:	2380      	movs	r3, #128	; 0x80
 800a5aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a5b4:	f107 031c 	add.w	r3, r7, #28
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	4805      	ldr	r0, [pc, #20]	; (800a5d0 <_ZL12MX_GPIO_Initv+0x138>)
 800a5bc:	f7f6 fd42 	bl	8001044 <HAL_GPIO_Init>

}
 800a5c0:	bf00      	nop
 800a5c2:	3730      	adds	r7, #48	; 0x30
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	40023800 	.word	0x40023800
 800a5cc:	40020400 	.word	0x40020400
 800a5d0:	40021800 	.word	0x40021800
 800a5d4:	10110000 	.word	0x10110000
 800a5d8:	40020800 	.word	0x40020800

0800a5dc <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800a5e4:	f000 fa0a 	bl	800a9fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800a5e8:	2001      	movs	r0, #1
 800a5ea:	f7fd f923 	bl	8007834 <osDelay>
 800a5ee:	e7fb      	b.n	800a5e8 <_Z16StartDefaultTaskPv+0xc>

0800a5f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a04      	ldr	r2, [pc, #16]	; (800a610 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d101      	bne.n	800a606 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a602:	f7f5 ff8f 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a606:	bf00      	nop
 800a608:	3708      	adds	r7, #8
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	40002000 	.word	0x40002000

0800a614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a614:	b480      	push	{r7}
 800a616:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a618:	b672      	cpsid	i
}
 800a61a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a61c:	e7fe      	b.n	800a61c <Error_Handler+0x8>
	...

0800a620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a626:	4b11      	ldr	r3, [pc, #68]	; (800a66c <HAL_MspInit+0x4c>)
 800a628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62a:	4a10      	ldr	r2, [pc, #64]	; (800a66c <HAL_MspInit+0x4c>)
 800a62c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a630:	6413      	str	r3, [r2, #64]	; 0x40
 800a632:	4b0e      	ldr	r3, [pc, #56]	; (800a66c <HAL_MspInit+0x4c>)
 800a634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a63a:	607b      	str	r3, [r7, #4]
 800a63c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a63e:	4b0b      	ldr	r3, [pc, #44]	; (800a66c <HAL_MspInit+0x4c>)
 800a640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a642:	4a0a      	ldr	r2, [pc, #40]	; (800a66c <HAL_MspInit+0x4c>)
 800a644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a648:	6453      	str	r3, [r2, #68]	; 0x44
 800a64a:	4b08      	ldr	r3, [pc, #32]	; (800a66c <HAL_MspInit+0x4c>)
 800a64c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a64e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a652:	603b      	str	r3, [r7, #0]
 800a654:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a656:	2200      	movs	r2, #0
 800a658:	210f      	movs	r1, #15
 800a65a:	f06f 0001 	mvn.w	r0, #1
 800a65e:	f7f6 f85d 	bl	800071c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a662:	bf00      	nop
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	40023800 	.word	0x40023800

0800a670 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b08e      	sub	sp, #56	; 0x38
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a67c:	2200      	movs	r2, #0
 800a67e:	601a      	str	r2, [r3, #0]
 800a680:	605a      	str	r2, [r3, #4]
 800a682:	609a      	str	r2, [r3, #8]
 800a684:	60da      	str	r2, [r3, #12]
 800a686:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a4e      	ldr	r2, [pc, #312]	; (800a7c8 <HAL_ETH_MspInit+0x158>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	f040 8096 	bne.w	800a7c0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a694:	4b4d      	ldr	r3, [pc, #308]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a698:	4a4c      	ldr	r2, [pc, #304]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a69a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a69e:	6313      	str	r3, [r2, #48]	; 0x30
 800a6a0:	4b4a      	ldr	r3, [pc, #296]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6a8:	623b      	str	r3, [r7, #32]
 800a6aa:	6a3b      	ldr	r3, [r7, #32]
 800a6ac:	4b47      	ldr	r3, [pc, #284]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b0:	4a46      	ldr	r2, [pc, #280]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a6b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a6b6:	6313      	str	r3, [r2, #48]	; 0x30
 800a6b8:	4b44      	ldr	r3, [pc, #272]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a6c0:	61fb      	str	r3, [r7, #28]
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	4b41      	ldr	r3, [pc, #260]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c8:	4a40      	ldr	r2, [pc, #256]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a6ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a6ce:	6313      	str	r3, [r2, #48]	; 0x30
 800a6d0:	4b3e      	ldr	r3, [pc, #248]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6d8:	61bb      	str	r3, [r7, #24]
 800a6da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a6dc:	4b3b      	ldr	r3, [pc, #236]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a6de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e0:	4a3a      	ldr	r2, [pc, #232]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a6e2:	f043 0304 	orr.w	r3, r3, #4
 800a6e6:	6313      	str	r3, [r2, #48]	; 0x30
 800a6e8:	4b38      	ldr	r3, [pc, #224]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ec:	f003 0304 	and.w	r3, r3, #4
 800a6f0:	617b      	str	r3, [r7, #20]
 800a6f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6f4:	4b35      	ldr	r3, [pc, #212]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f8:	4a34      	ldr	r2, [pc, #208]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a6fa:	f043 0301 	orr.w	r3, r3, #1
 800a6fe:	6313      	str	r3, [r2, #48]	; 0x30
 800a700:	4b32      	ldr	r3, [pc, #200]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a704:	f003 0301 	and.w	r3, r3, #1
 800a708:	613b      	str	r3, [r7, #16]
 800a70a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a70c:	4b2f      	ldr	r3, [pc, #188]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a710:	4a2e      	ldr	r2, [pc, #184]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a712:	f043 0302 	orr.w	r3, r3, #2
 800a716:	6313      	str	r3, [r2, #48]	; 0x30
 800a718:	4b2c      	ldr	r3, [pc, #176]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71c:	f003 0302 	and.w	r3, r3, #2
 800a720:	60fb      	str	r3, [r7, #12]
 800a722:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a724:	4b29      	ldr	r3, [pc, #164]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a728:	4a28      	ldr	r2, [pc, #160]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a72a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a72e:	6313      	str	r3, [r2, #48]	; 0x30
 800a730:	4b26      	ldr	r3, [pc, #152]	; (800a7cc <HAL_ETH_MspInit+0x15c>)
 800a732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a738:	60bb      	str	r3, [r7, #8]
 800a73a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a73c:	2332      	movs	r3, #50	; 0x32
 800a73e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a740:	2302      	movs	r3, #2
 800a742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a744:	2300      	movs	r3, #0
 800a746:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a748:	2303      	movs	r3, #3
 800a74a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a74c:	230b      	movs	r3, #11
 800a74e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a754:	4619      	mov	r1, r3
 800a756:	481e      	ldr	r0, [pc, #120]	; (800a7d0 <HAL_ETH_MspInit+0x160>)
 800a758:	f7f6 fc74 	bl	8001044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a75c:	2386      	movs	r3, #134	; 0x86
 800a75e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a760:	2302      	movs	r3, #2
 800a762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a764:	2300      	movs	r3, #0
 800a766:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a768:	2303      	movs	r3, #3
 800a76a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a76c:	230b      	movs	r3, #11
 800a76e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a774:	4619      	mov	r1, r3
 800a776:	4817      	ldr	r0, [pc, #92]	; (800a7d4 <HAL_ETH_MspInit+0x164>)
 800a778:	f7f6 fc64 	bl	8001044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a77c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a782:	2302      	movs	r3, #2
 800a784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a786:	2300      	movs	r3, #0
 800a788:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a78a:	2303      	movs	r3, #3
 800a78c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a78e:	230b      	movs	r3, #11
 800a790:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a796:	4619      	mov	r1, r3
 800a798:	480f      	ldr	r0, [pc, #60]	; (800a7d8 <HAL_ETH_MspInit+0x168>)
 800a79a:	f7f6 fc53 	bl	8001044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a79e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a7a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7a4:	2302      	movs	r3, #2
 800a7a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a7b0:	230b      	movs	r3, #11
 800a7b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a7b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	4808      	ldr	r0, [pc, #32]	; (800a7dc <HAL_ETH_MspInit+0x16c>)
 800a7bc:	f7f6 fc42 	bl	8001044 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800a7c0:	bf00      	nop
 800a7c2:	3738      	adds	r7, #56	; 0x38
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	40028000 	.word	0x40028000
 800a7cc:	40023800 	.word	0x40023800
 800a7d0:	40020800 	.word	0x40020800
 800a7d4:	40020000 	.word	0x40020000
 800a7d8:	40020400 	.word	0x40020400
 800a7dc:	40021800 	.word	0x40021800

0800a7e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b08a      	sub	sp, #40	; 0x28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7e8:	f107 0314 	add.w	r3, r7, #20
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	601a      	str	r2, [r3, #0]
 800a7f0:	605a      	str	r2, [r3, #4]
 800a7f2:	609a      	str	r2, [r3, #8]
 800a7f4:	60da      	str	r2, [r3, #12]
 800a7f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a17      	ldr	r2, [pc, #92]	; (800a85c <HAL_UART_MspInit+0x7c>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d128      	bne.n	800a854 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800a802:	4b17      	ldr	r3, [pc, #92]	; (800a860 <HAL_UART_MspInit+0x80>)
 800a804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a806:	4a16      	ldr	r2, [pc, #88]	; (800a860 <HAL_UART_MspInit+0x80>)
 800a808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a80c:	6413      	str	r3, [r2, #64]	; 0x40
 800a80e:	4b14      	ldr	r3, [pc, #80]	; (800a860 <HAL_UART_MspInit+0x80>)
 800a810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a816:	613b      	str	r3, [r7, #16]
 800a818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a81a:	4b11      	ldr	r3, [pc, #68]	; (800a860 <HAL_UART_MspInit+0x80>)
 800a81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a81e:	4a10      	ldr	r2, [pc, #64]	; (800a860 <HAL_UART_MspInit+0x80>)
 800a820:	f043 0308 	orr.w	r3, r3, #8
 800a824:	6313      	str	r3, [r2, #48]	; 0x30
 800a826:	4b0e      	ldr	r3, [pc, #56]	; (800a860 <HAL_UART_MspInit+0x80>)
 800a828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82a:	f003 0308 	and.w	r3, r3, #8
 800a82e:	60fb      	str	r3, [r7, #12]
 800a830:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800a832:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a838:	2302      	movs	r3, #2
 800a83a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a83c:	2300      	movs	r3, #0
 800a83e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a840:	2303      	movs	r3, #3
 800a842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a844:	2307      	movs	r3, #7
 800a846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a848:	f107 0314 	add.w	r3, r7, #20
 800a84c:	4619      	mov	r1, r3
 800a84e:	4805      	ldr	r0, [pc, #20]	; (800a864 <HAL_UART_MspInit+0x84>)
 800a850:	f7f6 fbf8 	bl	8001044 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800a854:	bf00      	nop
 800a856:	3728      	adds	r7, #40	; 0x28
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	40004800 	.word	0x40004800
 800a860:	40023800 	.word	0x40023800
 800a864:	40020c00 	.word	0x40020c00

0800a868 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b08c      	sub	sp, #48	; 0x30
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a874:	2300      	movs	r3, #0
 800a876:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 800a878:	2200      	movs	r2, #0
 800a87a:	6879      	ldr	r1, [r7, #4]
 800a87c:	202d      	movs	r0, #45	; 0x2d
 800a87e:	f7f5 ff4d 	bl	800071c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800a882:	202d      	movs	r0, #45	; 0x2d
 800a884:	f7f5 ff66 	bl	8000754 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800a888:	4b1f      	ldr	r3, [pc, #124]	; (800a908 <HAL_InitTick+0xa0>)
 800a88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88c:	4a1e      	ldr	r2, [pc, #120]	; (800a908 <HAL_InitTick+0xa0>)
 800a88e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a892:	6413      	str	r3, [r2, #64]	; 0x40
 800a894:	4b1c      	ldr	r3, [pc, #112]	; (800a908 <HAL_InitTick+0xa0>)
 800a896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a89c:	60fb      	str	r3, [r7, #12]
 800a89e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a8a0:	f107 0210 	add.w	r2, r7, #16
 800a8a4:	f107 0314 	add.w	r3, r7, #20
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7f8 fc04 	bl	80030b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a8b0:	f7f8 fbda 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	005b      	lsls	r3, r3, #1
 800a8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8bc:	4a13      	ldr	r2, [pc, #76]	; (800a90c <HAL_InitTick+0xa4>)
 800a8be:	fba2 2303 	umull	r2, r3, r2, r3
 800a8c2:	0c9b      	lsrs	r3, r3, #18
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800a8c8:	4b11      	ldr	r3, [pc, #68]	; (800a910 <HAL_InitTick+0xa8>)
 800a8ca:	4a12      	ldr	r2, [pc, #72]	; (800a914 <HAL_InitTick+0xac>)
 800a8cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800a8ce:	4b10      	ldr	r3, [pc, #64]	; (800a910 <HAL_InitTick+0xa8>)
 800a8d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a8d4:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800a8d6:	4a0e      	ldr	r2, [pc, #56]	; (800a910 <HAL_InitTick+0xa8>)
 800a8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8da:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800a8dc:	4b0c      	ldr	r3, [pc, #48]	; (800a910 <HAL_InitTick+0xa8>)
 800a8de:	2200      	movs	r2, #0
 800a8e0:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a8e2:	4b0b      	ldr	r3, [pc, #44]	; (800a910 <HAL_InitTick+0xa8>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800a8e8:	4809      	ldr	r0, [pc, #36]	; (800a910 <HAL_InitTick+0xa8>)
 800a8ea:	f7f9 f807 	bl	80038fc <HAL_TIM_Base_Init>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d104      	bne.n	800a8fe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 800a8f4:	4806      	ldr	r0, [pc, #24]	; (800a910 <HAL_InitTick+0xa8>)
 800a8f6:	f7f9 f863 	bl	80039c0 <HAL_TIM_Base_Start_IT>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	e000      	b.n	800a900 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
}
 800a900:	4618      	mov	r0, r3
 800a902:	3730      	adds	r7, #48	; 0x30
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	40023800 	.word	0x40023800
 800a90c:	431bde83 	.word	0x431bde83
 800a910:	200051a0 	.word	0x200051a0
 800a914:	40002000 	.word	0x40002000

0800a918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a918:	b480      	push	{r7}
 800a91a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a91c:	e7fe      	b.n	800a91c <NMI_Handler+0x4>

0800a91e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a91e:	b480      	push	{r7}
 800a920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a922:	e7fe      	b.n	800a922 <HardFault_Handler+0x4>

0800a924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a924:	b480      	push	{r7}
 800a926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a928:	e7fe      	b.n	800a928 <MemManage_Handler+0x4>

0800a92a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a92a:	b480      	push	{r7}
 800a92c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a92e:	e7fe      	b.n	800a92e <BusFault_Handler+0x4>

0800a930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a930:	b480      	push	{r7}
 800a932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a934:	e7fe      	b.n	800a934 <UsageFault_Handler+0x4>

0800a936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a936:	b480      	push	{r7}
 800a938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a93a:	bf00      	nop
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800a948:	4802      	ldr	r0, [pc, #8]	; (800a954 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800a94a:	f7f9 f8b1 	bl	8003ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800a94e:	bf00      	nop
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	200051a0 	.word	0x200051a0

0800a958 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a95c:	4802      	ldr	r0, [pc, #8]	; (800a968 <OTG_FS_IRQHandler+0x10>)
 800a95e:	f7f6 fe7c 	bl	800165a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a962:	bf00      	nop
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	200064bc 	.word	0x200064bc

0800a96c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b086      	sub	sp, #24
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a974:	4a14      	ldr	r2, [pc, #80]	; (800a9c8 <_sbrk+0x5c>)
 800a976:	4b15      	ldr	r3, [pc, #84]	; (800a9cc <_sbrk+0x60>)
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a980:	4b13      	ldr	r3, [pc, #76]	; (800a9d0 <_sbrk+0x64>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d102      	bne.n	800a98e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a988:	4b11      	ldr	r3, [pc, #68]	; (800a9d0 <_sbrk+0x64>)
 800a98a:	4a12      	ldr	r2, [pc, #72]	; (800a9d4 <_sbrk+0x68>)
 800a98c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a98e:	4b10      	ldr	r3, [pc, #64]	; (800a9d0 <_sbrk+0x64>)
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4413      	add	r3, r2
 800a996:	693a      	ldr	r2, [r7, #16]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d207      	bcs.n	800a9ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a99c:	f000 fe88 	bl	800b6b0 <__errno>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	220c      	movs	r2, #12
 800a9a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a9a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9aa:	e009      	b.n	800a9c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a9ac:	4b08      	ldr	r3, [pc, #32]	; (800a9d0 <_sbrk+0x64>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a9b2:	4b07      	ldr	r3, [pc, #28]	; (800a9d0 <_sbrk+0x64>)
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	4a05      	ldr	r2, [pc, #20]	; (800a9d0 <_sbrk+0x64>)
 800a9bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a9be:	68fb      	ldr	r3, [r7, #12]
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3718      	adds	r7, #24
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	20050000 	.word	0x20050000
 800a9cc:	00000400 	.word	0x00000400
 800a9d0:	20004cd8 	.word	0x20004cd8
 800a9d4:	20006ac8 	.word	0x20006ac8

0800a9d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a9dc:	4b06      	ldr	r3, [pc, #24]	; (800a9f8 <SystemInit+0x20>)
 800a9de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9e2:	4a05      	ldr	r2, [pc, #20]	; (800a9f8 <SystemInit+0x20>)
 800a9e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a9e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a9ec:	bf00      	nop
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr
 800a9f6:	bf00      	nop
 800a9f8:	e000ed00 	.word	0xe000ed00

0800a9fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aa00:	2200      	movs	r2, #0
 800aa02:	4912      	ldr	r1, [pc, #72]	; (800aa4c <MX_USB_DEVICE_Init+0x50>)
 800aa04:	4812      	ldr	r0, [pc, #72]	; (800aa50 <MX_USB_DEVICE_Init+0x54>)
 800aa06:	f7fb fc65 	bl	80062d4 <USBD_Init>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d001      	beq.n	800aa14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aa10:	f7ff fe00 	bl	800a614 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800aa14:	490f      	ldr	r1, [pc, #60]	; (800aa54 <MX_USB_DEVICE_Init+0x58>)
 800aa16:	480e      	ldr	r0, [pc, #56]	; (800aa50 <MX_USB_DEVICE_Init+0x54>)
 800aa18:	f7fb fc92 	bl	8006340 <USBD_RegisterClass>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d001      	beq.n	800aa26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aa22:	f7ff fdf7 	bl	800a614 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aa26:	490c      	ldr	r1, [pc, #48]	; (800aa58 <MX_USB_DEVICE_Init+0x5c>)
 800aa28:	4809      	ldr	r0, [pc, #36]	; (800aa50 <MX_USB_DEVICE_Init+0x54>)
 800aa2a:	f7fb fbe7 	bl	80061fc <USBD_CDC_RegisterInterface>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aa34:	f7ff fdee 	bl	800a614 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aa38:	4805      	ldr	r0, [pc, #20]	; (800aa50 <MX_USB_DEVICE_Init+0x54>)
 800aa3a:	f7fb fca2 	bl	8006382 <USBD_Start>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d001      	beq.n	800aa48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aa44:	f7ff fde6 	bl	800a614 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aa48:	bf00      	nop
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	20000134 	.word	0x20000134
 800aa50:	200051ec 	.word	0x200051ec
 800aa54:	20000014 	.word	0x20000014
 800aa58:	20000120 	.word	0x20000120

0800aa5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aa60:	2200      	movs	r2, #0
 800aa62:	4905      	ldr	r1, [pc, #20]	; (800aa78 <CDC_Init_FS+0x1c>)
 800aa64:	4805      	ldr	r0, [pc, #20]	; (800aa7c <CDC_Init_FS+0x20>)
 800aa66:	f7fb fbde 	bl	8006226 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa6a:	4905      	ldr	r1, [pc, #20]	; (800aa80 <CDC_Init_FS+0x24>)
 800aa6c:	4803      	ldr	r0, [pc, #12]	; (800aa7c <CDC_Init_FS+0x20>)
 800aa6e:	f7fb fbf3 	bl	8006258 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aa72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	20005cbc 	.word	0x20005cbc
 800aa7c:	200051ec 	.word	0x200051ec
 800aa80:	200054bc 	.word	0x200054bc

0800aa84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aa84:	b480      	push	{r7}
 800aa86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aa88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	6039      	str	r1, [r7, #0]
 800aa9e:	71fb      	strb	r3, [r7, #7]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aaa4:	79fb      	ldrb	r3, [r7, #7]
 800aaa6:	2b23      	cmp	r3, #35	; 0x23
 800aaa8:	d84a      	bhi.n	800ab40 <CDC_Control_FS+0xac>
 800aaaa:	a201      	add	r2, pc, #4	; (adr r2, 800aab0 <CDC_Control_FS+0x1c>)
 800aaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab0:	0800ab41 	.word	0x0800ab41
 800aab4:	0800ab41 	.word	0x0800ab41
 800aab8:	0800ab41 	.word	0x0800ab41
 800aabc:	0800ab41 	.word	0x0800ab41
 800aac0:	0800ab41 	.word	0x0800ab41
 800aac4:	0800ab41 	.word	0x0800ab41
 800aac8:	0800ab41 	.word	0x0800ab41
 800aacc:	0800ab41 	.word	0x0800ab41
 800aad0:	0800ab41 	.word	0x0800ab41
 800aad4:	0800ab41 	.word	0x0800ab41
 800aad8:	0800ab41 	.word	0x0800ab41
 800aadc:	0800ab41 	.word	0x0800ab41
 800aae0:	0800ab41 	.word	0x0800ab41
 800aae4:	0800ab41 	.word	0x0800ab41
 800aae8:	0800ab41 	.word	0x0800ab41
 800aaec:	0800ab41 	.word	0x0800ab41
 800aaf0:	0800ab41 	.word	0x0800ab41
 800aaf4:	0800ab41 	.word	0x0800ab41
 800aaf8:	0800ab41 	.word	0x0800ab41
 800aafc:	0800ab41 	.word	0x0800ab41
 800ab00:	0800ab41 	.word	0x0800ab41
 800ab04:	0800ab41 	.word	0x0800ab41
 800ab08:	0800ab41 	.word	0x0800ab41
 800ab0c:	0800ab41 	.word	0x0800ab41
 800ab10:	0800ab41 	.word	0x0800ab41
 800ab14:	0800ab41 	.word	0x0800ab41
 800ab18:	0800ab41 	.word	0x0800ab41
 800ab1c:	0800ab41 	.word	0x0800ab41
 800ab20:	0800ab41 	.word	0x0800ab41
 800ab24:	0800ab41 	.word	0x0800ab41
 800ab28:	0800ab41 	.word	0x0800ab41
 800ab2c:	0800ab41 	.word	0x0800ab41
 800ab30:	0800ab41 	.word	0x0800ab41
 800ab34:	0800ab41 	.word	0x0800ab41
 800ab38:	0800ab41 	.word	0x0800ab41
 800ab3c:	0800ab41 	.word	0x0800ab41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ab40:	bf00      	nop
  }

  return (USBD_OK);
 800ab42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ab5a:	6879      	ldr	r1, [r7, #4]
 800ab5c:	4805      	ldr	r0, [pc, #20]	; (800ab74 <CDC_Receive_FS+0x24>)
 800ab5e:	f7fb fb7b 	bl	8006258 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ab62:	4804      	ldr	r0, [pc, #16]	; (800ab74 <CDC_Receive_FS+0x24>)
 800ab64:	f7fb fb8c 	bl	8006280 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ab68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	200051ec 	.word	0x200051ec

0800ab78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b087      	sub	sp, #28
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	4613      	mov	r3, r2
 800ab84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ab86:	2300      	movs	r3, #0
 800ab88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ab8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	371c      	adds	r7, #28
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr
	...

0800ab9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08a      	sub	sp, #40	; 0x28
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aba4:	f107 0314 	add.w	r3, r7, #20
 800aba8:	2200      	movs	r2, #0
 800abaa:	601a      	str	r2, [r3, #0]
 800abac:	605a      	str	r2, [r3, #4]
 800abae:	609a      	str	r2, [r3, #8]
 800abb0:	60da      	str	r2, [r3, #12]
 800abb2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800abbc:	d149      	bne.n	800ac52 <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800abbe:	4b27      	ldr	r3, [pc, #156]	; (800ac5c <HAL_PCD_MspInit+0xc0>)
 800abc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abc2:	4a26      	ldr	r2, [pc, #152]	; (800ac5c <HAL_PCD_MspInit+0xc0>)
 800abc4:	f043 0301 	orr.w	r3, r3, #1
 800abc8:	6313      	str	r3, [r2, #48]	; 0x30
 800abca:	4b24      	ldr	r3, [pc, #144]	; (800ac5c <HAL_PCD_MspInit+0xc0>)
 800abcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abce:	f003 0301 	and.w	r3, r3, #1
 800abd2:	613b      	str	r3, [r7, #16]
 800abd4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800abd6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800abda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abdc:	2302      	movs	r3, #2
 800abde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abe0:	2300      	movs	r3, #0
 800abe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abe4:	2303      	movs	r3, #3
 800abe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800abe8:	230a      	movs	r3, #10
 800abea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abec:	f107 0314 	add.w	r3, r7, #20
 800abf0:	4619      	mov	r1, r3
 800abf2:	481b      	ldr	r0, [pc, #108]	; (800ac60 <HAL_PCD_MspInit+0xc4>)
 800abf4:	f7f6 fa26 	bl	8001044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800abf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800abfe:	2300      	movs	r3, #0
 800ac00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac02:	2300      	movs	r3, #0
 800ac04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ac06:	f107 0314 	add.w	r3, r7, #20
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	4814      	ldr	r0, [pc, #80]	; (800ac60 <HAL_PCD_MspInit+0xc4>)
 800ac0e:	f7f6 fa19 	bl	8001044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac12:	4b12      	ldr	r3, [pc, #72]	; (800ac5c <HAL_PCD_MspInit+0xc0>)
 800ac14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac16:	4a11      	ldr	r2, [pc, #68]	; (800ac5c <HAL_PCD_MspInit+0xc0>)
 800ac18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac1c:	6353      	str	r3, [r2, #52]	; 0x34
 800ac1e:	4b0f      	ldr	r3, [pc, #60]	; (800ac5c <HAL_PCD_MspInit+0xc0>)
 800ac20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac26:	60fb      	str	r3, [r7, #12]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	4b0c      	ldr	r3, [pc, #48]	; (800ac5c <HAL_PCD_MspInit+0xc0>)
 800ac2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac2e:	4a0b      	ldr	r2, [pc, #44]	; (800ac5c <HAL_PCD_MspInit+0xc0>)
 800ac30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac34:	6453      	str	r3, [r2, #68]	; 0x44
 800ac36:	4b09      	ldr	r3, [pc, #36]	; (800ac5c <HAL_PCD_MspInit+0xc0>)
 800ac38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac3e:	60bb      	str	r3, [r7, #8]
 800ac40:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ac42:	2200      	movs	r2, #0
 800ac44:	2105      	movs	r1, #5
 800ac46:	2043      	movs	r0, #67	; 0x43
 800ac48:	f7f5 fd68 	bl	800071c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ac4c:	2043      	movs	r0, #67	; 0x43
 800ac4e:	f7f5 fd81 	bl	8000754 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ac52:	bf00      	nop
 800ac54:	3728      	adds	r7, #40	; 0x28
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	40023800 	.word	0x40023800
 800ac60:	40020000 	.word	0x40020000

0800ac64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ac78:	4619      	mov	r1, r3
 800ac7a:	4610      	mov	r0, r2
 800ac7c:	f7fb fbcc 	bl	8006418 <USBD_LL_SetupStage>
}
 800ac80:	bf00      	nop
 800ac82:	3708      	adds	r7, #8
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	460b      	mov	r3, r1
 800ac92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800ac9a:	78fa      	ldrb	r2, [r7, #3]
 800ac9c:	6879      	ldr	r1, [r7, #4]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	00db      	lsls	r3, r3, #3
 800aca2:	1a9b      	subs	r3, r3, r2
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	440b      	add	r3, r1
 800aca8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	78fb      	ldrb	r3, [r7, #3]
 800acb0:	4619      	mov	r1, r3
 800acb2:	f7fb fc06 	bl	80064c2 <USBD_LL_DataOutStage>
}
 800acb6:	bf00      	nop
 800acb8:	3708      	adds	r7, #8
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b082      	sub	sp, #8
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
 800acc6:	460b      	mov	r3, r1
 800acc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800acd0:	78fa      	ldrb	r2, [r7, #3]
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	4613      	mov	r3, r2
 800acd6:	00db      	lsls	r3, r3, #3
 800acd8:	1a9b      	subs	r3, r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	440b      	add	r3, r1
 800acde:	3348      	adds	r3, #72	; 0x48
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	78fb      	ldrb	r3, [r7, #3]
 800ace4:	4619      	mov	r1, r3
 800ace6:	f7fb fc4f 	bl	8006588 <USBD_LL_DataInStage>
}
 800acea:	bf00      	nop
 800acec:	3708      	adds	r7, #8
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b082      	sub	sp, #8
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fb fd53 	bl	80067ac <USBD_LL_SOF>
}
 800ad06:	bf00      	nop
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b084      	sub	sp, #16
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad16:	2301      	movs	r3, #1
 800ad18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d102      	bne.n	800ad28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ad22:	2300      	movs	r3, #0
 800ad24:	73fb      	strb	r3, [r7, #15]
 800ad26:	e008      	b.n	800ad3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	2b02      	cmp	r3, #2
 800ad2e:	d102      	bne.n	800ad36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ad30:	2301      	movs	r3, #1
 800ad32:	73fb      	strb	r3, [r7, #15]
 800ad34:	e001      	b.n	800ad3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ad36:	f7ff fc6d 	bl	800a614 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ad40:	7bfa      	ldrb	r2, [r7, #15]
 800ad42:	4611      	mov	r1, r2
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7fb fcf6 	bl	8006736 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7fb fcaf 	bl	80066b4 <USBD_LL_Reset>
}
 800ad56:	bf00      	nop
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
	...

0800ad60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7fb fcf1 	bl	8006756 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	6812      	ldr	r2, [r2, #0]
 800ad82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad86:	f043 0301 	orr.w	r3, r3, #1
 800ad8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a1b      	ldr	r3, [r3, #32]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d005      	beq.n	800ada0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad94:	4b04      	ldr	r3, [pc, #16]	; (800ada8 <HAL_PCD_SuspendCallback+0x48>)
 800ad96:	691b      	ldr	r3, [r3, #16]
 800ad98:	4a03      	ldr	r2, [pc, #12]	; (800ada8 <HAL_PCD_SuspendCallback+0x48>)
 800ad9a:	f043 0306 	orr.w	r3, r3, #6
 800ad9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ada0:	bf00      	nop
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	e000ed00 	.word	0xe000ed00

0800adac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fb fce0 	bl	8006780 <USBD_LL_Resume>
}
 800adc0:	bf00      	nop
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	460b      	mov	r3, r1
 800add2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800adda:	78fa      	ldrb	r2, [r7, #3]
 800addc:	4611      	mov	r1, r2
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fb fd0b 	bl	80067fa <USBD_LL_IsoOUTIncomplete>
}
 800ade4:	bf00      	nop
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	460b      	mov	r3, r1
 800adf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800adfe:	78fa      	ldrb	r2, [r7, #3]
 800ae00:	4611      	mov	r1, r2
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7fb fcec 	bl	80067e0 <USBD_LL_IsoINIncomplete>
}
 800ae08:	bf00      	nop
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fb fcf8 	bl	8006814 <USBD_LL_DevConnected>
}
 800ae24:	bf00      	nop
 800ae26:	3708      	adds	r7, #8
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7fb fcf5 	bl	800682a <USBD_LL_DevDisconnected>
}
 800ae40:	bf00      	nop
 800ae42:	3708      	adds	r7, #8
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d13c      	bne.n	800aed2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ae58:	4a20      	ldr	r2, [pc, #128]	; (800aedc <USBD_LL_Init+0x94>)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a1e      	ldr	r2, [pc, #120]	; (800aedc <USBD_LL_Init+0x94>)
 800ae64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae68:	4b1c      	ldr	r3, [pc, #112]	; (800aedc <USBD_LL_Init+0x94>)
 800ae6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ae6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ae70:	4b1a      	ldr	r3, [pc, #104]	; (800aedc <USBD_LL_Init+0x94>)
 800ae72:	2206      	movs	r2, #6
 800ae74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ae76:	4b19      	ldr	r3, [pc, #100]	; (800aedc <USBD_LL_Init+0x94>)
 800ae78:	2202      	movs	r2, #2
 800ae7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ae7c:	4b17      	ldr	r3, [pc, #92]	; (800aedc <USBD_LL_Init+0x94>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ae82:	4b16      	ldr	r3, [pc, #88]	; (800aedc <USBD_LL_Init+0x94>)
 800ae84:	2202      	movs	r2, #2
 800ae86:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800ae88:	4b14      	ldr	r3, [pc, #80]	; (800aedc <USBD_LL_Init+0x94>)
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ae8e:	4b13      	ldr	r3, [pc, #76]	; (800aedc <USBD_LL_Init+0x94>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ae94:	4b11      	ldr	r3, [pc, #68]	; (800aedc <USBD_LL_Init+0x94>)
 800ae96:	2200      	movs	r2, #0
 800ae98:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ae9a:	4b10      	ldr	r3, [pc, #64]	; (800aedc <USBD_LL_Init+0x94>)
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aea0:	4b0e      	ldr	r3, [pc, #56]	; (800aedc <USBD_LL_Init+0x94>)
 800aea2:	2200      	movs	r2, #0
 800aea4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aea6:	480d      	ldr	r0, [pc, #52]	; (800aedc <USBD_LL_Init+0x94>)
 800aea8:	f7f6 fa91 	bl	80013ce <HAL_PCD_Init>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d001      	beq.n	800aeb6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800aeb2:	f7ff fbaf 	bl	800a614 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aeb6:	2180      	movs	r1, #128	; 0x80
 800aeb8:	4808      	ldr	r0, [pc, #32]	; (800aedc <USBD_LL_Init+0x94>)
 800aeba:	f7f7 fc12 	bl	80026e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aebe:	2240      	movs	r2, #64	; 0x40
 800aec0:	2100      	movs	r1, #0
 800aec2:	4806      	ldr	r0, [pc, #24]	; (800aedc <USBD_LL_Init+0x94>)
 800aec4:	f7f7 fbc6 	bl	8002654 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800aec8:	2280      	movs	r2, #128	; 0x80
 800aeca:	2101      	movs	r1, #1
 800aecc:	4803      	ldr	r0, [pc, #12]	; (800aedc <USBD_LL_Init+0x94>)
 800aece:	f7f7 fbc1 	bl	8002654 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	200064bc 	.word	0x200064bc

0800aee0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aee8:	2300      	movs	r3, #0
 800aeea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeec:	2300      	movs	r3, #0
 800aeee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7f6 fb8d 	bl	8001616 <HAL_PCD_Start>
 800aefc:	4603      	mov	r3, r0
 800aefe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af00:	7bfb      	ldrb	r3, [r7, #15]
 800af02:	4618      	mov	r0, r3
 800af04:	f000 f980 	bl	800b208 <USBD_Get_USB_Status>
 800af08:	4603      	mov	r3, r0
 800af0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b084      	sub	sp, #16
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
 800af1e:	4608      	mov	r0, r1
 800af20:	4611      	mov	r1, r2
 800af22:	461a      	mov	r2, r3
 800af24:	4603      	mov	r3, r0
 800af26:	70fb      	strb	r3, [r7, #3]
 800af28:	460b      	mov	r3, r1
 800af2a:	70bb      	strb	r3, [r7, #2]
 800af2c:	4613      	mov	r3, r2
 800af2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af30:	2300      	movs	r3, #0
 800af32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af34:	2300      	movs	r3, #0
 800af36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af3e:	78bb      	ldrb	r3, [r7, #2]
 800af40:	883a      	ldrh	r2, [r7, #0]
 800af42:	78f9      	ldrb	r1, [r7, #3]
 800af44:	f7f6 ff8d 	bl	8001e62 <HAL_PCD_EP_Open>
 800af48:	4603      	mov	r3, r0
 800af4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 f95a 	bl	800b208 <USBD_Get_USB_Status>
 800af54:	4603      	mov	r3, r0
 800af56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af58:	7bbb      	ldrb	r3, [r7, #14]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b084      	sub	sp, #16
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	460b      	mov	r3, r1
 800af6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af72:	2300      	movs	r3, #0
 800af74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af7c:	78fa      	ldrb	r2, [r7, #3]
 800af7e:	4611      	mov	r1, r2
 800af80:	4618      	mov	r0, r3
 800af82:	f7f6 ffd6 	bl	8001f32 <HAL_PCD_EP_Close>
 800af86:	4603      	mov	r3, r0
 800af88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
 800af8c:	4618      	mov	r0, r3
 800af8e:	f000 f93b 	bl	800b208 <USBD_Get_USB_Status>
 800af92:	4603      	mov	r3, r0
 800af94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af96:	7bbb      	ldrb	r3, [r7, #14]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	460b      	mov	r3, r1
 800afaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afb0:	2300      	movs	r3, #0
 800afb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800afba:	78fa      	ldrb	r2, [r7, #3]
 800afbc:	4611      	mov	r1, r2
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7f7 f8ae 	bl	8002120 <HAL_PCD_EP_SetStall>
 800afc4:	4603      	mov	r3, r0
 800afc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
 800afca:	4618      	mov	r0, r3
 800afcc:	f000 f91c 	bl	800b208 <USBD_Get_USB_Status>
 800afd0:	4603      	mov	r3, r0
 800afd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b084      	sub	sp, #16
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
 800afe6:	460b      	mov	r3, r1
 800afe8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afea:	2300      	movs	r3, #0
 800afec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afee:	2300      	movs	r3, #0
 800aff0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aff8:	78fa      	ldrb	r2, [r7, #3]
 800affa:	4611      	mov	r1, r2
 800affc:	4618      	mov	r0, r3
 800affe:	f7f7 f8f3 	bl	80021e8 <HAL_PCD_EP_ClrStall>
 800b002:	4603      	mov	r3, r0
 800b004:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b006:	7bfb      	ldrb	r3, [r7, #15]
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 f8fd 	bl	800b208 <USBD_Get_USB_Status>
 800b00e:	4603      	mov	r3, r0
 800b010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b012:	7bbb      	ldrb	r3, [r7, #14]
}
 800b014:	4618      	mov	r0, r3
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b085      	sub	sp, #20
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	460b      	mov	r3, r1
 800b026:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b02e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b034:	2b00      	cmp	r3, #0
 800b036:	da0b      	bge.n	800b050 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b038:	78fb      	ldrb	r3, [r7, #3]
 800b03a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b03e:	68f9      	ldr	r1, [r7, #12]
 800b040:	4613      	mov	r3, r2
 800b042:	00db      	lsls	r3, r3, #3
 800b044:	1a9b      	subs	r3, r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	440b      	add	r3, r1
 800b04a:	333e      	adds	r3, #62	; 0x3e
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	e00b      	b.n	800b068 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b050:	78fb      	ldrb	r3, [r7, #3]
 800b052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b056:	68f9      	ldr	r1, [r7, #12]
 800b058:	4613      	mov	r3, r2
 800b05a:	00db      	lsls	r3, r3, #3
 800b05c:	1a9b      	subs	r3, r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	440b      	add	r3, r1
 800b062:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b066:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3714      	adds	r7, #20
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	460b      	mov	r3, r1
 800b07e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b080:	2300      	movs	r3, #0
 800b082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b084:	2300      	movs	r3, #0
 800b086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b08e:	78fa      	ldrb	r2, [r7, #3]
 800b090:	4611      	mov	r1, r2
 800b092:	4618      	mov	r0, r3
 800b094:	f7f6 fec0 	bl	8001e18 <HAL_PCD_SetAddress>
 800b098:	4603      	mov	r3, r0
 800b09a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b09c:	7bfb      	ldrb	r3, [r7, #15]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f000 f8b2 	bl	800b208 <USBD_Get_USB_Status>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b086      	sub	sp, #24
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	60f8      	str	r0, [r7, #12]
 800b0ba:	607a      	str	r2, [r7, #4]
 800b0bc:	603b      	str	r3, [r7, #0]
 800b0be:	460b      	mov	r3, r1
 800b0c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b0d0:	7af9      	ldrb	r1, [r7, #11]
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	f7f6 ffd9 	bl	800208c <HAL_PCD_EP_Transmit>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0de:	7dfb      	ldrb	r3, [r7, #23]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f000 f891 	bl	800b208 <USBD_Get_USB_Status>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3718      	adds	r7, #24
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	607a      	str	r2, [r7, #4]
 800b0fe:	603b      	str	r3, [r7, #0]
 800b100:	460b      	mov	r3, r1
 800b102:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b104:	2300      	movs	r3, #0
 800b106:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b108:	2300      	movs	r3, #0
 800b10a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b112:	7af9      	ldrb	r1, [r7, #11]
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	f7f6 ff55 	bl	8001fc6 <HAL_PCD_EP_Receive>
 800b11c:	4603      	mov	r3, r0
 800b11e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b120:	7dfb      	ldrb	r3, [r7, #23]
 800b122:	4618      	mov	r0, r3
 800b124:	f000 f870 	bl	800b208 <USBD_Get_USB_Status>
 800b128:	4603      	mov	r3, r0
 800b12a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b12c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3718      	adds	r7, #24
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b082      	sub	sp, #8
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	460b      	mov	r3, r1
 800b140:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b148:	78fa      	ldrb	r2, [r7, #3]
 800b14a:	4611      	mov	r1, r2
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7f6 ff85 	bl	800205c <HAL_PCD_EP_GetRxCount>
 800b152:	4603      	mov	r3, r0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3708      	adds	r7, #8
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	460b      	mov	r3, r1
 800b166:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b168:	78fb      	ldrb	r3, [r7, #3]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d002      	beq.n	800b174 <HAL_PCDEx_LPM_Callback+0x18>
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d01f      	beq.n	800b1b2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b172:	e03b      	b.n	800b1ec <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6a1b      	ldr	r3, [r3, #32]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d007      	beq.n	800b18c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b17c:	f000 f83c 	bl	800b1f8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b180:	4b1c      	ldr	r3, [pc, #112]	; (800b1f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	4a1b      	ldr	r2, [pc, #108]	; (800b1f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b186:	f023 0306 	bic.w	r3, r3, #6
 800b18a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	6812      	ldr	r2, [r2, #0]
 800b19a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b19e:	f023 0301 	bic.w	r3, r3, #1
 800b1a2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fb fae8 	bl	8006780 <USBD_LL_Resume>
    break;
 800b1b0:	e01c      	b.n	800b1ec <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	6812      	ldr	r2, [r2, #0]
 800b1c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b1c4:	f043 0301 	orr.w	r3, r3, #1
 800b1c8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7fb fac0 	bl	8006756 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a1b      	ldr	r3, [r3, #32]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d005      	beq.n	800b1ea <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b1de:	4b05      	ldr	r3, [pc, #20]	; (800b1f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	4a04      	ldr	r2, [pc, #16]	; (800b1f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b1e4:	f043 0306 	orr.w	r3, r3, #6
 800b1e8:	6113      	str	r3, [r2, #16]
    break;
 800b1ea:	bf00      	nop
}
 800b1ec:	bf00      	nop
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	e000ed00 	.word	0xe000ed00

0800b1f8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	af00      	add	r7, sp, #0
	//SystemClock_Config();
}
 800b1fc:	bf00      	nop
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr
	...

0800b208 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	4603      	mov	r3, r0
 800b210:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b216:	79fb      	ldrb	r3, [r7, #7]
 800b218:	2b03      	cmp	r3, #3
 800b21a:	d817      	bhi.n	800b24c <USBD_Get_USB_Status+0x44>
 800b21c:	a201      	add	r2, pc, #4	; (adr r2, 800b224 <USBD_Get_USB_Status+0x1c>)
 800b21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b222:	bf00      	nop
 800b224:	0800b235 	.word	0x0800b235
 800b228:	0800b23b 	.word	0x0800b23b
 800b22c:	0800b241 	.word	0x0800b241
 800b230:	0800b247 	.word	0x0800b247
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b234:	2300      	movs	r3, #0
 800b236:	73fb      	strb	r3, [r7, #15]
    break;
 800b238:	e00b      	b.n	800b252 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b23a:	2303      	movs	r3, #3
 800b23c:	73fb      	strb	r3, [r7, #15]
    break;
 800b23e:	e008      	b.n	800b252 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b240:	2301      	movs	r3, #1
 800b242:	73fb      	strb	r3, [r7, #15]
    break;
 800b244:	e005      	b.n	800b252 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b246:	2303      	movs	r3, #3
 800b248:	73fb      	strb	r3, [r7, #15]
    break;
 800b24a:	e002      	b.n	800b252 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b24c:	2303      	movs	r3, #3
 800b24e:	73fb      	strb	r3, [r7, #15]
    break;
 800b250:	bf00      	nop
  }
  return usb_status;
 800b252:	7bfb      	ldrb	r3, [r7, #15]
}
 800b254:	4618      	mov	r0, r3
 800b256:	3714      	adds	r7, #20
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	4603      	mov	r3, r0
 800b268:	6039      	str	r1, [r7, #0]
 800b26a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	2212      	movs	r2, #18
 800b270:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b272:	4b03      	ldr	r3, [pc, #12]	; (800b280 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b274:	4618      	mov	r0, r3
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr
 800b280:	20000154 	.word	0x20000154

0800b284 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	4603      	mov	r3, r0
 800b28c:	6039      	str	r1, [r7, #0]
 800b28e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	2204      	movs	r2, #4
 800b294:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b296:	4b03      	ldr	r3, [pc, #12]	; (800b2a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b298:	4618      	mov	r0, r3
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr
 800b2a4:	20000174 	.word	0x20000174

0800b2a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	6039      	str	r1, [r7, #0]
 800b2b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b2b4:	79fb      	ldrb	r3, [r7, #7]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d105      	bne.n	800b2c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b2ba:	683a      	ldr	r2, [r7, #0]
 800b2bc:	4907      	ldr	r1, [pc, #28]	; (800b2dc <USBD_FS_ProductStrDescriptor+0x34>)
 800b2be:	4808      	ldr	r0, [pc, #32]	; (800b2e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b2c0:	f7fc f866 	bl	8007390 <USBD_GetString>
 800b2c4:	e004      	b.n	800b2d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b2c6:	683a      	ldr	r2, [r7, #0]
 800b2c8:	4904      	ldr	r1, [pc, #16]	; (800b2dc <USBD_FS_ProductStrDescriptor+0x34>)
 800b2ca:	4805      	ldr	r0, [pc, #20]	; (800b2e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b2cc:	f7fc f860 	bl	8007390 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2d0:	4b02      	ldr	r3, [pc, #8]	; (800b2dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3708      	adds	r7, #8
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	200068c0 	.word	0x200068c0
 800b2e0:	0800b9ec 	.word	0x0800b9ec

0800b2e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	6039      	str	r1, [r7, #0]
 800b2ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b2f0:	683a      	ldr	r2, [r7, #0]
 800b2f2:	4904      	ldr	r1, [pc, #16]	; (800b304 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b2f4:	4804      	ldr	r0, [pc, #16]	; (800b308 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b2f6:	f7fc f84b 	bl	8007390 <USBD_GetString>
  return USBD_StrDesc;
 800b2fa:	4b02      	ldr	r3, [pc, #8]	; (800b304 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3708      	adds	r7, #8
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	200068c0 	.word	0x200068c0
 800b308:	0800ba04 	.word	0x0800ba04

0800b30c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	4603      	mov	r3, r0
 800b314:	6039      	str	r1, [r7, #0]
 800b316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	221a      	movs	r2, #26
 800b31c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b31e:	f000 f855 	bl	800b3cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b322:	4b02      	ldr	r3, [pc, #8]	; (800b32c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b324:	4618      	mov	r0, r3
 800b326:	3708      	adds	r7, #8
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	20000178 	.word	0x20000178

0800b330 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	4603      	mov	r3, r0
 800b338:	6039      	str	r1, [r7, #0]
 800b33a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b33c:	79fb      	ldrb	r3, [r7, #7]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d105      	bne.n	800b34e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b342:	683a      	ldr	r2, [r7, #0]
 800b344:	4907      	ldr	r1, [pc, #28]	; (800b364 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b346:	4808      	ldr	r0, [pc, #32]	; (800b368 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b348:	f7fc f822 	bl	8007390 <USBD_GetString>
 800b34c:	e004      	b.n	800b358 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	4904      	ldr	r1, [pc, #16]	; (800b364 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b352:	4805      	ldr	r0, [pc, #20]	; (800b368 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b354:	f7fc f81c 	bl	8007390 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b358:	4b02      	ldr	r3, [pc, #8]	; (800b364 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	200068c0 	.word	0x200068c0
 800b368:	0800ba18 	.word	0x0800ba18

0800b36c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	4603      	mov	r3, r0
 800b374:	6039      	str	r1, [r7, #0]
 800b376:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b378:	79fb      	ldrb	r3, [r7, #7]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d105      	bne.n	800b38a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	4907      	ldr	r1, [pc, #28]	; (800b3a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b382:	4808      	ldr	r0, [pc, #32]	; (800b3a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b384:	f7fc f804 	bl	8007390 <USBD_GetString>
 800b388:	e004      	b.n	800b394 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	4904      	ldr	r1, [pc, #16]	; (800b3a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b38e:	4805      	ldr	r0, [pc, #20]	; (800b3a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b390:	f7fb fffe 	bl	8007390 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b394:	4b02      	ldr	r3, [pc, #8]	; (800b3a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b396:	4618      	mov	r0, r3
 800b398:	3708      	adds	r7, #8
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	200068c0 	.word	0x200068c0
 800b3a4:	0800ba24 	.word	0x0800ba24

0800b3a8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	6039      	str	r1, [r7, #0]
 800b3b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	220c      	movs	r2, #12
 800b3b8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b3ba:	4b03      	ldr	r3, [pc, #12]	; (800b3c8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr
 800b3c8:	20000168 	.word	0x20000168

0800b3cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b3d2:	4b0f      	ldr	r3, [pc, #60]	; (800b410 <Get_SerialNum+0x44>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b3d8:	4b0e      	ldr	r3, [pc, #56]	; (800b414 <Get_SerialNum+0x48>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b3de:	4b0e      	ldr	r3, [pc, #56]	; (800b418 <Get_SerialNum+0x4c>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4413      	add	r3, r2
 800b3ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d009      	beq.n	800b406 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b3f2:	2208      	movs	r2, #8
 800b3f4:	4909      	ldr	r1, [pc, #36]	; (800b41c <Get_SerialNum+0x50>)
 800b3f6:	68f8      	ldr	r0, [r7, #12]
 800b3f8:	f000 f814 	bl	800b424 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b3fc:	2204      	movs	r2, #4
 800b3fe:	4908      	ldr	r1, [pc, #32]	; (800b420 <Get_SerialNum+0x54>)
 800b400:	68b8      	ldr	r0, [r7, #8]
 800b402:	f000 f80f 	bl	800b424 <IntToUnicode>
  }
}
 800b406:	bf00      	nop
 800b408:	3710      	adds	r7, #16
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	1ff0f420 	.word	0x1ff0f420
 800b414:	1ff0f424 	.word	0x1ff0f424
 800b418:	1ff0f428 	.word	0x1ff0f428
 800b41c:	2000017a 	.word	0x2000017a
 800b420:	2000018a 	.word	0x2000018a

0800b424 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b424:	b480      	push	{r7}
 800b426:	b087      	sub	sp, #28
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	4613      	mov	r3, r2
 800b430:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b432:	2300      	movs	r3, #0
 800b434:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b436:	2300      	movs	r3, #0
 800b438:	75fb      	strb	r3, [r7, #23]
 800b43a:	e027      	b.n	800b48c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	0f1b      	lsrs	r3, r3, #28
 800b440:	2b09      	cmp	r3, #9
 800b442:	d80b      	bhi.n	800b45c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	0f1b      	lsrs	r3, r3, #28
 800b448:	b2da      	uxtb	r2, r3
 800b44a:	7dfb      	ldrb	r3, [r7, #23]
 800b44c:	005b      	lsls	r3, r3, #1
 800b44e:	4619      	mov	r1, r3
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	440b      	add	r3, r1
 800b454:	3230      	adds	r2, #48	; 0x30
 800b456:	b2d2      	uxtb	r2, r2
 800b458:	701a      	strb	r2, [r3, #0]
 800b45a:	e00a      	b.n	800b472 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	0f1b      	lsrs	r3, r3, #28
 800b460:	b2da      	uxtb	r2, r3
 800b462:	7dfb      	ldrb	r3, [r7, #23]
 800b464:	005b      	lsls	r3, r3, #1
 800b466:	4619      	mov	r1, r3
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	440b      	add	r3, r1
 800b46c:	3237      	adds	r2, #55	; 0x37
 800b46e:	b2d2      	uxtb	r2, r2
 800b470:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	011b      	lsls	r3, r3, #4
 800b476:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b478:	7dfb      	ldrb	r3, [r7, #23]
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	3301      	adds	r3, #1
 800b47e:	68ba      	ldr	r2, [r7, #8]
 800b480:	4413      	add	r3, r2
 800b482:	2200      	movs	r2, #0
 800b484:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b486:	7dfb      	ldrb	r3, [r7, #23]
 800b488:	3301      	adds	r3, #1
 800b48a:	75fb      	strb	r3, [r7, #23]
 800b48c:	7dfa      	ldrb	r2, [r7, #23]
 800b48e:	79fb      	ldrb	r3, [r7, #7]
 800b490:	429a      	cmp	r2, r3
 800b492:	d3d3      	bcc.n	800b43c <IntToUnicode+0x18>
  }
}
 800b494:	bf00      	nop
 800b496:	bf00      	nop
 800b498:	371c      	adds	r7, #28
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr
	...

0800b4a4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b4ae:	4b06      	ldr	r3, [pc, #24]	; (800b4c8 <USER_initialize+0x24>)
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b4b4:	4b04      	ldr	r3, [pc, #16]	; (800b4c8 <USER_initialize+0x24>)
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	370c      	adds	r7, #12
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	20000192 	.word	0x20000192

0800b4cc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b4d6:	4b06      	ldr	r3, [pc, #24]	; (800b4f0 <USER_status+0x24>)
 800b4d8:	2201      	movs	r2, #1
 800b4da:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b4dc:	4b04      	ldr	r3, [pc, #16]	; (800b4f0 <USER_status+0x24>)
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	370c      	adds	r7, #12
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop
 800b4f0:	20000192 	.word	0x20000192

0800b4f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b085      	sub	sp, #20
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60b9      	str	r1, [r7, #8]
 800b4fc:	607a      	str	r2, [r7, #4]
 800b4fe:	603b      	str	r3, [r7, #0]
 800b500:	4603      	mov	r3, r0
 800b502:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b504:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b506:	4618      	mov	r0, r3
 800b508:	3714      	adds	r7, #20
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr

0800b512 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b512:	b480      	push	{r7}
 800b514:	b085      	sub	sp, #20
 800b516:	af00      	add	r7, sp, #0
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
 800b51c:	603b      	str	r3, [r7, #0]
 800b51e:	4603      	mov	r3, r0
 800b520:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b522:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b524:	4618      	mov	r0, r3
 800b526:	3714      	adds	r7, #20
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b530:	b480      	push	{r7}
 800b532:	b085      	sub	sp, #20
 800b534:	af00      	add	r7, sp, #0
 800b536:	4603      	mov	r3, r0
 800b538:	603a      	str	r2, [r7, #0]
 800b53a:	71fb      	strb	r3, [r7, #7]
 800b53c:	460b      	mov	r3, r1
 800b53e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	73fb      	strb	r3, [r7, #15]
    return res;
 800b544:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b546:	4618      	mov	r0, r3
 800b548:	3714      	adds	r7, #20
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr
	...

0800b554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b58c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b558:	480d      	ldr	r0, [pc, #52]	; (800b590 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b55a:	490e      	ldr	r1, [pc, #56]	; (800b594 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b55c:	4a0e      	ldr	r2, [pc, #56]	; (800b598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b55e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b560:	e002      	b.n	800b568 <LoopCopyDataInit>

0800b562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b566:	3304      	adds	r3, #4

0800b568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b56a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b56c:	d3f9      	bcc.n	800b562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b56e:	4a0b      	ldr	r2, [pc, #44]	; (800b59c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b570:	4c0b      	ldr	r4, [pc, #44]	; (800b5a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 800b572:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b574:	e001      	b.n	800b57a <LoopFillZerobss>

0800b576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b578:	3204      	adds	r2, #4

0800b57a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b57a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b57c:	d3fb      	bcc.n	800b576 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b57e:	f7ff fa2b 	bl	800a9d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b582:	f000 f89b 	bl	800b6bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b586:	f7fe fe4b 	bl	800a220 <main>
  bx  lr    
 800b58a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b58c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800b590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b594:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800b598:	0800bae0 	.word	0x0800bae0
  ldr r2, =_sbss
 800b59c:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 800b5a0:	20006ac4 	.word	0x20006ac4

0800b5a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b5a4:	e7fe      	b.n	800b5a4 <ADC_IRQHandler>

0800b5a6 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b084      	sub	sp, #16
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d104      	bne.n	800b5be <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800b5b4:	b672      	cpsid	i
}
 800b5b6:	bf00      	nop
 800b5b8:	f7ff f82c 	bl	800a614 <Error_Handler>
 800b5bc:	e7fe      	b.n	800b5bc <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	7a1b      	ldrb	r3, [r3, #8]
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d904      	bls.n	800b5d0 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800b5c6:	b672      	cpsid	i
}
 800b5c8:	bf00      	nop
 800b5ca:	f7ff f823 	bl	800a614 <Error_Handler>
 800b5ce:	e7fe      	b.n	800b5ce <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	7a1b      	ldrb	r3, [r3, #8]
 800b5d4:	1c5a      	adds	r2, r3, #1
 800b5d6:	b2d1      	uxtb	r1, r2
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	7211      	strb	r1, [r2, #8]
 800b5dc:	4619      	mov	r1, r3
	__asm volatile
 800b5de:	f3ef 8211 	mrs	r2, BASEPRI
 800b5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e6:	b672      	cpsid	i
 800b5e8:	f383 8811 	msr	BASEPRI, r3
 800b5ec:	f3bf 8f6f 	isb	sy
 800b5f0:	f3bf 8f4f 	dsb	sy
 800b5f4:	b662      	cpsie	i
 800b5f6:	60fa      	str	r2, [r7, #12]
 800b5f8:	60bb      	str	r3, [r7, #8]
	return ulOriginalBASEPRI;
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800b602:	bf00      	nop
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b084      	sub	sp, #16
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d104      	bne.n	800b622 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800b618:	b672      	cpsid	i
}
 800b61a:	bf00      	nop
 800b61c:	f7fe fffa 	bl	800a614 <Error_Handler>
 800b620:	e7fe      	b.n	800b620 <stm32_lock_release+0x16>
  lock->nesting_level--;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	7a1b      	ldrb	r3, [r3, #8]
 800b626:	3b01      	subs	r3, #1
 800b628:	b2da      	uxtb	r2, r3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	7a1b      	ldrb	r3, [r3, #8]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d904      	bls.n	800b640 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800b636:	b672      	cpsid	i
}
 800b638:	bf00      	nop
 800b63a:	f7fe ffeb 	bl	800a614 <Error_Handler>
 800b63e:	e7fe      	b.n	800b63e <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	7a1b      	ldrb	r3, [r3, #8]
 800b644:	461a      	mov	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b64c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f383 8811 	msr	BASEPRI, r3
}
 800b654:	bf00      	nop
}
 800b656:	bf00      	nop
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b082      	sub	sp, #8
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d104      	bne.n	800b676 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800b66c:	b672      	cpsid	i
}
 800b66e:	bf00      	nop
 800b670:	f7fe ffd0 	bl	800a614 <Error_Handler>
 800b674:	e7fe      	b.n	800b674 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4618      	mov	r0, r3
 800b67a:	f7ff ff94 	bl	800b5a6 <stm32_lock_acquire>
}
 800b67e:	bf00      	nop
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b082      	sub	sp, #8
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d104      	bne.n	800b69e <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800b694:	b672      	cpsid	i
}
 800b696:	bf00      	nop
 800b698:	f7fe ffbc 	bl	800a614 <Error_Handler>
 800b69c:	e7fe      	b.n	800b69c <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7ff ffb2 	bl	800b60a <stm32_lock_release>
}
 800b6a6:	bf00      	nop
 800b6a8:	3708      	adds	r7, #8
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
	...

0800b6b0 <__errno>:
 800b6b0:	4b01      	ldr	r3, [pc, #4]	; (800b6b8 <__errno+0x8>)
 800b6b2:	6818      	ldr	r0, [r3, #0]
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	200001a8 	.word	0x200001a8

0800b6bc <__libc_init_array>:
 800b6bc:	b570      	push	{r4, r5, r6, lr}
 800b6be:	4d0d      	ldr	r5, [pc, #52]	; (800b6f4 <__libc_init_array+0x38>)
 800b6c0:	4c0d      	ldr	r4, [pc, #52]	; (800b6f8 <__libc_init_array+0x3c>)
 800b6c2:	1b64      	subs	r4, r4, r5
 800b6c4:	10a4      	asrs	r4, r4, #2
 800b6c6:	2600      	movs	r6, #0
 800b6c8:	42a6      	cmp	r6, r4
 800b6ca:	d109      	bne.n	800b6e0 <__libc_init_array+0x24>
 800b6cc:	4d0b      	ldr	r5, [pc, #44]	; (800b6fc <__libc_init_array+0x40>)
 800b6ce:	4c0c      	ldr	r4, [pc, #48]	; (800b700 <__libc_init_array+0x44>)
 800b6d0:	f000 f96e 	bl	800b9b0 <_init>
 800b6d4:	1b64      	subs	r4, r4, r5
 800b6d6:	10a4      	asrs	r4, r4, #2
 800b6d8:	2600      	movs	r6, #0
 800b6da:	42a6      	cmp	r6, r4
 800b6dc:	d105      	bne.n	800b6ea <__libc_init_array+0x2e>
 800b6de:	bd70      	pop	{r4, r5, r6, pc}
 800b6e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6e4:	4798      	blx	r3
 800b6e6:	3601      	adds	r6, #1
 800b6e8:	e7ee      	b.n	800b6c8 <__libc_init_array+0xc>
 800b6ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6ee:	4798      	blx	r3
 800b6f0:	3601      	adds	r6, #1
 800b6f2:	e7f2      	b.n	800b6da <__libc_init_array+0x1e>
 800b6f4:	0800bad8 	.word	0x0800bad8
 800b6f8:	0800bad8 	.word	0x0800bad8
 800b6fc:	0800bad8 	.word	0x0800bad8
 800b700:	0800badc 	.word	0x0800badc

0800b704 <malloc>:
 800b704:	4b02      	ldr	r3, [pc, #8]	; (800b710 <malloc+0xc>)
 800b706:	4601      	mov	r1, r0
 800b708:	6818      	ldr	r0, [r3, #0]
 800b70a:	f000 b871 	b.w	800b7f0 <_malloc_r>
 800b70e:	bf00      	nop
 800b710:	200001a8 	.word	0x200001a8

0800b714 <free>:
 800b714:	4b02      	ldr	r3, [pc, #8]	; (800b720 <free+0xc>)
 800b716:	4601      	mov	r1, r0
 800b718:	6818      	ldr	r0, [r3, #0]
 800b71a:	f000 b819 	b.w	800b750 <_free_r>
 800b71e:	bf00      	nop
 800b720:	200001a8 	.word	0x200001a8

0800b724 <memcpy>:
 800b724:	440a      	add	r2, r1
 800b726:	4291      	cmp	r1, r2
 800b728:	f100 33ff 	add.w	r3, r0, #4294967295
 800b72c:	d100      	bne.n	800b730 <memcpy+0xc>
 800b72e:	4770      	bx	lr
 800b730:	b510      	push	{r4, lr}
 800b732:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b73a:	4291      	cmp	r1, r2
 800b73c:	d1f9      	bne.n	800b732 <memcpy+0xe>
 800b73e:	bd10      	pop	{r4, pc}

0800b740 <memset>:
 800b740:	4402      	add	r2, r0
 800b742:	4603      	mov	r3, r0
 800b744:	4293      	cmp	r3, r2
 800b746:	d100      	bne.n	800b74a <memset+0xa>
 800b748:	4770      	bx	lr
 800b74a:	f803 1b01 	strb.w	r1, [r3], #1
 800b74e:	e7f9      	b.n	800b744 <memset+0x4>

0800b750 <_free_r>:
 800b750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b752:	2900      	cmp	r1, #0
 800b754:	d048      	beq.n	800b7e8 <_free_r+0x98>
 800b756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b75a:	9001      	str	r0, [sp, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f1a1 0404 	sub.w	r4, r1, #4
 800b762:	bfb8      	it	lt
 800b764:	18e4      	addlt	r4, r4, r3
 800b766:	f000 f917 	bl	800b998 <__malloc_lock>
 800b76a:	4a20      	ldr	r2, [pc, #128]	; (800b7ec <_free_r+0x9c>)
 800b76c:	9801      	ldr	r0, [sp, #4]
 800b76e:	6813      	ldr	r3, [r2, #0]
 800b770:	4615      	mov	r5, r2
 800b772:	b933      	cbnz	r3, 800b782 <_free_r+0x32>
 800b774:	6063      	str	r3, [r4, #4]
 800b776:	6014      	str	r4, [r2, #0]
 800b778:	b003      	add	sp, #12
 800b77a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b77e:	f000 b911 	b.w	800b9a4 <__malloc_unlock>
 800b782:	42a3      	cmp	r3, r4
 800b784:	d90b      	bls.n	800b79e <_free_r+0x4e>
 800b786:	6821      	ldr	r1, [r4, #0]
 800b788:	1862      	adds	r2, r4, r1
 800b78a:	4293      	cmp	r3, r2
 800b78c:	bf04      	itt	eq
 800b78e:	681a      	ldreq	r2, [r3, #0]
 800b790:	685b      	ldreq	r3, [r3, #4]
 800b792:	6063      	str	r3, [r4, #4]
 800b794:	bf04      	itt	eq
 800b796:	1852      	addeq	r2, r2, r1
 800b798:	6022      	streq	r2, [r4, #0]
 800b79a:	602c      	str	r4, [r5, #0]
 800b79c:	e7ec      	b.n	800b778 <_free_r+0x28>
 800b79e:	461a      	mov	r2, r3
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	b10b      	cbz	r3, 800b7a8 <_free_r+0x58>
 800b7a4:	42a3      	cmp	r3, r4
 800b7a6:	d9fa      	bls.n	800b79e <_free_r+0x4e>
 800b7a8:	6811      	ldr	r1, [r2, #0]
 800b7aa:	1855      	adds	r5, r2, r1
 800b7ac:	42a5      	cmp	r5, r4
 800b7ae:	d10b      	bne.n	800b7c8 <_free_r+0x78>
 800b7b0:	6824      	ldr	r4, [r4, #0]
 800b7b2:	4421      	add	r1, r4
 800b7b4:	1854      	adds	r4, r2, r1
 800b7b6:	42a3      	cmp	r3, r4
 800b7b8:	6011      	str	r1, [r2, #0]
 800b7ba:	d1dd      	bne.n	800b778 <_free_r+0x28>
 800b7bc:	681c      	ldr	r4, [r3, #0]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	6053      	str	r3, [r2, #4]
 800b7c2:	4421      	add	r1, r4
 800b7c4:	6011      	str	r1, [r2, #0]
 800b7c6:	e7d7      	b.n	800b778 <_free_r+0x28>
 800b7c8:	d902      	bls.n	800b7d0 <_free_r+0x80>
 800b7ca:	230c      	movs	r3, #12
 800b7cc:	6003      	str	r3, [r0, #0]
 800b7ce:	e7d3      	b.n	800b778 <_free_r+0x28>
 800b7d0:	6825      	ldr	r5, [r4, #0]
 800b7d2:	1961      	adds	r1, r4, r5
 800b7d4:	428b      	cmp	r3, r1
 800b7d6:	bf04      	itt	eq
 800b7d8:	6819      	ldreq	r1, [r3, #0]
 800b7da:	685b      	ldreq	r3, [r3, #4]
 800b7dc:	6063      	str	r3, [r4, #4]
 800b7de:	bf04      	itt	eq
 800b7e0:	1949      	addeq	r1, r1, r5
 800b7e2:	6021      	streq	r1, [r4, #0]
 800b7e4:	6054      	str	r4, [r2, #4]
 800b7e6:	e7c7      	b.n	800b778 <_free_r+0x28>
 800b7e8:	b003      	add	sp, #12
 800b7ea:	bd30      	pop	{r4, r5, pc}
 800b7ec:	20004ce8 	.word	0x20004ce8

0800b7f0 <_malloc_r>:
 800b7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f2:	1ccd      	adds	r5, r1, #3
 800b7f4:	f025 0503 	bic.w	r5, r5, #3
 800b7f8:	3508      	adds	r5, #8
 800b7fa:	2d0c      	cmp	r5, #12
 800b7fc:	bf38      	it	cc
 800b7fe:	250c      	movcc	r5, #12
 800b800:	2d00      	cmp	r5, #0
 800b802:	4606      	mov	r6, r0
 800b804:	db01      	blt.n	800b80a <_malloc_r+0x1a>
 800b806:	42a9      	cmp	r1, r5
 800b808:	d903      	bls.n	800b812 <_malloc_r+0x22>
 800b80a:	230c      	movs	r3, #12
 800b80c:	6033      	str	r3, [r6, #0]
 800b80e:	2000      	movs	r0, #0
 800b810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b812:	f000 f8c1 	bl	800b998 <__malloc_lock>
 800b816:	4921      	ldr	r1, [pc, #132]	; (800b89c <_malloc_r+0xac>)
 800b818:	680a      	ldr	r2, [r1, #0]
 800b81a:	4614      	mov	r4, r2
 800b81c:	b99c      	cbnz	r4, 800b846 <_malloc_r+0x56>
 800b81e:	4f20      	ldr	r7, [pc, #128]	; (800b8a0 <_malloc_r+0xb0>)
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	b923      	cbnz	r3, 800b82e <_malloc_r+0x3e>
 800b824:	4621      	mov	r1, r4
 800b826:	4630      	mov	r0, r6
 800b828:	f000 f8a6 	bl	800b978 <_sbrk_r>
 800b82c:	6038      	str	r0, [r7, #0]
 800b82e:	4629      	mov	r1, r5
 800b830:	4630      	mov	r0, r6
 800b832:	f000 f8a1 	bl	800b978 <_sbrk_r>
 800b836:	1c43      	adds	r3, r0, #1
 800b838:	d123      	bne.n	800b882 <_malloc_r+0x92>
 800b83a:	230c      	movs	r3, #12
 800b83c:	6033      	str	r3, [r6, #0]
 800b83e:	4630      	mov	r0, r6
 800b840:	f000 f8b0 	bl	800b9a4 <__malloc_unlock>
 800b844:	e7e3      	b.n	800b80e <_malloc_r+0x1e>
 800b846:	6823      	ldr	r3, [r4, #0]
 800b848:	1b5b      	subs	r3, r3, r5
 800b84a:	d417      	bmi.n	800b87c <_malloc_r+0x8c>
 800b84c:	2b0b      	cmp	r3, #11
 800b84e:	d903      	bls.n	800b858 <_malloc_r+0x68>
 800b850:	6023      	str	r3, [r4, #0]
 800b852:	441c      	add	r4, r3
 800b854:	6025      	str	r5, [r4, #0]
 800b856:	e004      	b.n	800b862 <_malloc_r+0x72>
 800b858:	6863      	ldr	r3, [r4, #4]
 800b85a:	42a2      	cmp	r2, r4
 800b85c:	bf0c      	ite	eq
 800b85e:	600b      	streq	r3, [r1, #0]
 800b860:	6053      	strne	r3, [r2, #4]
 800b862:	4630      	mov	r0, r6
 800b864:	f000 f89e 	bl	800b9a4 <__malloc_unlock>
 800b868:	f104 000b 	add.w	r0, r4, #11
 800b86c:	1d23      	adds	r3, r4, #4
 800b86e:	f020 0007 	bic.w	r0, r0, #7
 800b872:	1ac2      	subs	r2, r0, r3
 800b874:	d0cc      	beq.n	800b810 <_malloc_r+0x20>
 800b876:	1a1b      	subs	r3, r3, r0
 800b878:	50a3      	str	r3, [r4, r2]
 800b87a:	e7c9      	b.n	800b810 <_malloc_r+0x20>
 800b87c:	4622      	mov	r2, r4
 800b87e:	6864      	ldr	r4, [r4, #4]
 800b880:	e7cc      	b.n	800b81c <_malloc_r+0x2c>
 800b882:	1cc4      	adds	r4, r0, #3
 800b884:	f024 0403 	bic.w	r4, r4, #3
 800b888:	42a0      	cmp	r0, r4
 800b88a:	d0e3      	beq.n	800b854 <_malloc_r+0x64>
 800b88c:	1a21      	subs	r1, r4, r0
 800b88e:	4630      	mov	r0, r6
 800b890:	f000 f872 	bl	800b978 <_sbrk_r>
 800b894:	3001      	adds	r0, #1
 800b896:	d1dd      	bne.n	800b854 <_malloc_r+0x64>
 800b898:	e7cf      	b.n	800b83a <_malloc_r+0x4a>
 800b89a:	bf00      	nop
 800b89c:	20004ce8 	.word	0x20004ce8
 800b8a0:	20004cec 	.word	0x20004cec

0800b8a4 <cleanup_glue>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	460c      	mov	r4, r1
 800b8a8:	6809      	ldr	r1, [r1, #0]
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	b109      	cbz	r1, 800b8b2 <cleanup_glue+0xe>
 800b8ae:	f7ff fff9 	bl	800b8a4 <cleanup_glue>
 800b8b2:	4621      	mov	r1, r4
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8ba:	f7ff bf49 	b.w	800b750 <_free_r>
	...

0800b8c0 <_reclaim_reent>:
 800b8c0:	4b2c      	ldr	r3, [pc, #176]	; (800b974 <_reclaim_reent+0xb4>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4283      	cmp	r3, r0
 800b8c6:	b570      	push	{r4, r5, r6, lr}
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	d051      	beq.n	800b970 <_reclaim_reent+0xb0>
 800b8cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b8ce:	b143      	cbz	r3, 800b8e2 <_reclaim_reent+0x22>
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d14a      	bne.n	800b96c <_reclaim_reent+0xac>
 800b8d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8d8:	6819      	ldr	r1, [r3, #0]
 800b8da:	b111      	cbz	r1, 800b8e2 <_reclaim_reent+0x22>
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f7ff ff37 	bl	800b750 <_free_r>
 800b8e2:	6961      	ldr	r1, [r4, #20]
 800b8e4:	b111      	cbz	r1, 800b8ec <_reclaim_reent+0x2c>
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f7ff ff32 	bl	800b750 <_free_r>
 800b8ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b8ee:	b111      	cbz	r1, 800b8f6 <_reclaim_reent+0x36>
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f7ff ff2d 	bl	800b750 <_free_r>
 800b8f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b8f8:	b111      	cbz	r1, 800b900 <_reclaim_reent+0x40>
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f7ff ff28 	bl	800b750 <_free_r>
 800b900:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b902:	b111      	cbz	r1, 800b90a <_reclaim_reent+0x4a>
 800b904:	4620      	mov	r0, r4
 800b906:	f7ff ff23 	bl	800b750 <_free_r>
 800b90a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b90c:	b111      	cbz	r1, 800b914 <_reclaim_reent+0x54>
 800b90e:	4620      	mov	r0, r4
 800b910:	f7ff ff1e 	bl	800b750 <_free_r>
 800b914:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b916:	b111      	cbz	r1, 800b91e <_reclaim_reent+0x5e>
 800b918:	4620      	mov	r0, r4
 800b91a:	f7ff ff19 	bl	800b750 <_free_r>
 800b91e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b920:	b111      	cbz	r1, 800b928 <_reclaim_reent+0x68>
 800b922:	4620      	mov	r0, r4
 800b924:	f7ff ff14 	bl	800b750 <_free_r>
 800b928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b92a:	b111      	cbz	r1, 800b932 <_reclaim_reent+0x72>
 800b92c:	4620      	mov	r0, r4
 800b92e:	f7ff ff0f 	bl	800b750 <_free_r>
 800b932:	69a3      	ldr	r3, [r4, #24]
 800b934:	b1e3      	cbz	r3, 800b970 <_reclaim_reent+0xb0>
 800b936:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b938:	4620      	mov	r0, r4
 800b93a:	4798      	blx	r3
 800b93c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b93e:	b1b9      	cbz	r1, 800b970 <_reclaim_reent+0xb0>
 800b940:	4620      	mov	r0, r4
 800b942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b946:	f7ff bfad 	b.w	800b8a4 <cleanup_glue>
 800b94a:	5949      	ldr	r1, [r1, r5]
 800b94c:	b941      	cbnz	r1, 800b960 <_reclaim_reent+0xa0>
 800b94e:	3504      	adds	r5, #4
 800b950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b952:	2d80      	cmp	r5, #128	; 0x80
 800b954:	68d9      	ldr	r1, [r3, #12]
 800b956:	d1f8      	bne.n	800b94a <_reclaim_reent+0x8a>
 800b958:	4620      	mov	r0, r4
 800b95a:	f7ff fef9 	bl	800b750 <_free_r>
 800b95e:	e7ba      	b.n	800b8d6 <_reclaim_reent+0x16>
 800b960:	680e      	ldr	r6, [r1, #0]
 800b962:	4620      	mov	r0, r4
 800b964:	f7ff fef4 	bl	800b750 <_free_r>
 800b968:	4631      	mov	r1, r6
 800b96a:	e7ef      	b.n	800b94c <_reclaim_reent+0x8c>
 800b96c:	2500      	movs	r5, #0
 800b96e:	e7ef      	b.n	800b950 <_reclaim_reent+0x90>
 800b970:	bd70      	pop	{r4, r5, r6, pc}
 800b972:	bf00      	nop
 800b974:	200001a8 	.word	0x200001a8

0800b978 <_sbrk_r>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	4d06      	ldr	r5, [pc, #24]	; (800b994 <_sbrk_r+0x1c>)
 800b97c:	2300      	movs	r3, #0
 800b97e:	4604      	mov	r4, r0
 800b980:	4608      	mov	r0, r1
 800b982:	602b      	str	r3, [r5, #0]
 800b984:	f7fe fff2 	bl	800a96c <_sbrk>
 800b988:	1c43      	adds	r3, r0, #1
 800b98a:	d102      	bne.n	800b992 <_sbrk_r+0x1a>
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	b103      	cbz	r3, 800b992 <_sbrk_r+0x1a>
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	20006ac0 	.word	0x20006ac0

0800b998 <__malloc_lock>:
 800b998:	4801      	ldr	r0, [pc, #4]	; (800b9a0 <__malloc_lock+0x8>)
 800b99a:	f7ff be60 	b.w	800b65e <__retarget_lock_acquire_recursive>
 800b99e:	bf00      	nop
 800b9a0:	20004cdc 	.word	0x20004cdc

0800b9a4 <__malloc_unlock>:
 800b9a4:	4801      	ldr	r0, [pc, #4]	; (800b9ac <__malloc_unlock+0x8>)
 800b9a6:	f7ff be6e 	b.w	800b686 <__retarget_lock_release_recursive>
 800b9aa:	bf00      	nop
 800b9ac:	20004cdc 	.word	0x20004cdc

0800b9b0 <_init>:
 800b9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b2:	bf00      	nop
 800b9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9b6:	bc08      	pop	{r3}
 800b9b8:	469e      	mov	lr, r3
 800b9ba:	4770      	bx	lr

0800b9bc <_fini>:
 800b9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9be:	bf00      	nop
 800b9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9c2:	bc08      	pop	{r3}
 800b9c4:	469e      	mov	lr, r3
 800b9c6:	4770      	bx	lr
