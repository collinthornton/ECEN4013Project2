
BackupPlan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b068  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800b238  0800b238  0001b238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b370  0800b370  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b370  0800b370  0001b370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b378  0800b378  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b378  0800b378  0001b378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b37c  0800b37c  0001b37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800b380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068d0  2000020c  0800b58c  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006adc  0800b58c  00026adc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030f22  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000607e  00000000  00000000  0005115e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ec8  00000000  00000000  000571e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c90  00000000  00000000  000590a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030133  00000000  00000000  0005ad38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025fc7  00000000  00000000  0008ae6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d1dc  00000000  00000000  000b0e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001be00e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082fc  00000000  00000000  001be064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b220 	.word	0x0800b220

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	0800b220 	.word	0x0800b220

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f8fa 	bl	8000706 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	200f      	movs	r0, #15
 8000514:	f009 fde0 	bl	800a0d8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f009 fd10 	bl	8009f3c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000004 	.word	0x20000004
 8000548:	20004d08 	.word	0x20004d08

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20004d08 	.word	0x20004d08

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff ffee 	bl	800054c <HAL_GetTick>
 8000570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800057c:	d005      	beq.n	800058a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <HAL_Delay+0x44>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800058a:	bf00      	nop
 800058c:	f7ff ffde 	bl	800054c <HAL_GetTick>
 8000590:	4602      	mov	r2, r0
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f7      	bhi.n	800058c <HAL_Delay+0x28>
  {
  }
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000004 	.word	0x20000004

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__NVIC_SetPriorityGrouping+0x40>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005d6:	4313      	orrs	r3, r2
 80005d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005da:	4a04      	ldr	r2, [pc, #16]	; (80005ec <__NVIC_SetPriorityGrouping+0x40>)
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	60d3      	str	r3, [r2, #12]
}
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000ed00 	.word	0xe000ed00
 80005f0:	05fa0000 	.word	0x05fa0000

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	2b00      	cmp	r3, #0
 8000620:	db0b      	blt.n	800063a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 021f 	and.w	r2, r3, #31
 8000628:	4907      	ldr	r1, [pc, #28]	; (8000648 <__NVIC_EnableIRQ+0x38>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	095b      	lsrs	r3, r3, #5
 8000630:	2001      	movs	r0, #1
 8000632:	fa00 f202 	lsl.w	r2, r0, r2
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000e100 	.word	0xe000e100

0800064c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db0a      	blt.n	8000676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <__NVIC_SetPriority+0x4c>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	0112      	lsls	r2, r2, #4
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	440b      	add	r3, r1
 8000670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000674:	e00a      	b.n	800068c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <__NVIC_SetPriority+0x50>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	3b04      	subs	r3, #4
 8000684:	0112      	lsls	r2, r2, #4
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	440b      	add	r3, r1
 800068a:	761a      	strb	r2, [r3, #24]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f1c3 0307 	rsb	r3, r3, #7
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	bf28      	it	cs
 80006be:	2304      	movcs	r3, #4
 80006c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3304      	adds	r3, #4
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d902      	bls.n	80006d0 <NVIC_EncodePriority+0x30>
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3b03      	subs	r3, #3
 80006ce:	e000      	b.n	80006d2 <NVIC_EncodePriority+0x32>
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43da      	mvns	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	401a      	ands	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43d9      	mvns	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff ff4c 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800072e:	f7ff ff61 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 8000732:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	68b9      	ldr	r1, [r7, #8]
 8000738:	6978      	ldr	r0, [r7, #20]
 800073a:	f7ff ffb1 	bl	80006a0 <NVIC_EncodePriority>
 800073e:	4602      	mov	r2, r0
 8000740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff80 	bl	800064c <__NVIC_SetPriority>
}
 800074c:	bf00      	nop
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff54 	bl	8000610 <__NVIC_EnableIRQ>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	; 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
 800078e:	e175      	b.n	8000a7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000790:	2201      	movs	r2, #1
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	697a      	ldr	r2, [r7, #20]
 80007a0:	4013      	ands	r3, r2
 80007a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007a4:	693a      	ldr	r2, [r7, #16]
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	f040 8164 	bne.w	8000a76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d00b      	beq.n	80007ce <HAL_GPIO_Init+0x5e>
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d007      	beq.n	80007ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c2:	2b11      	cmp	r3, #17
 80007c4:	d003      	beq.n	80007ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	2b12      	cmp	r3, #18
 80007cc:	d130      	bne.n	8000830 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	689b      	ldr	r3, [r3, #8]
 80007d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	2203      	movs	r2, #3
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43db      	mvns	r3, r3
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	4013      	ands	r3, r2
 80007e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	68da      	ldr	r2, [r3, #12]
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	69ba      	ldr	r2, [r7, #24]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	69ba      	ldr	r2, [r7, #24]
 80007fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000804:	2201      	movs	r2, #1
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	fa02 f303 	lsl.w	r3, r2, r3
 800080c:	43db      	mvns	r3, r3
 800080e:	69ba      	ldr	r2, [r7, #24]
 8000810:	4013      	ands	r3, r2
 8000812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	091b      	lsrs	r3, r3, #4
 800081a:	f003 0201 	and.w	r2, r3, #1
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	4313      	orrs	r3, r2
 8000828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	69ba      	ldr	r2, [r7, #24]
 800082e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	2203      	movs	r2, #3
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	69ba      	ldr	r2, [r7, #24]
 8000844:	4013      	ands	r3, r2
 8000846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	689a      	ldr	r2, [r3, #8]
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	4313      	orrs	r3, r2
 8000858:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	69ba      	ldr	r2, [r7, #24]
 800085e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	2b02      	cmp	r3, #2
 8000866:	d003      	beq.n	8000870 <HAL_GPIO_Init+0x100>
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	2b12      	cmp	r3, #18
 800086e:	d123      	bne.n	80008b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	08da      	lsrs	r2, r3, #3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3208      	adds	r2, #8
 8000878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800087c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	f003 0307 	and.w	r3, r3, #7
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	220f      	movs	r2, #15
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4013      	ands	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	691a      	ldr	r2, [r3, #16]
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	08da      	lsrs	r2, r3, #3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3208      	adds	r2, #8
 80008b2:	69b9      	ldr	r1, [r7, #24]
 80008b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	2203      	movs	r2, #3
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	4013      	ands	r3, r2
 80008ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f003 0203 	and.w	r2, r3, #3
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f000 80be 	beq.w	8000a76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b66      	ldr	r3, [pc, #408]	; (8000a94 <HAL_GPIO_Init+0x324>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	4a65      	ldr	r2, [pc, #404]	; (8000a94 <HAL_GPIO_Init+0x324>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000904:	6453      	str	r3, [r2, #68]	; 0x44
 8000906:	4b63      	ldr	r3, [pc, #396]	; (8000a94 <HAL_GPIO_Init+0x324>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000912:	4a61      	ldr	r2, [pc, #388]	; (8000a98 <HAL_GPIO_Init+0x328>)
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	089b      	lsrs	r3, r3, #2
 8000918:	3302      	adds	r3, #2
 800091a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f003 0303 	and.w	r3, r3, #3
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	220f      	movs	r2, #15
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	4013      	ands	r3, r2
 8000934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a58      	ldr	r2, [pc, #352]	; (8000a9c <HAL_GPIO_Init+0x32c>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d037      	beq.n	80009ae <HAL_GPIO_Init+0x23e>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a57      	ldr	r2, [pc, #348]	; (8000aa0 <HAL_GPIO_Init+0x330>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d031      	beq.n	80009aa <HAL_GPIO_Init+0x23a>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a56      	ldr	r2, [pc, #344]	; (8000aa4 <HAL_GPIO_Init+0x334>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d02b      	beq.n	80009a6 <HAL_GPIO_Init+0x236>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a55      	ldr	r2, [pc, #340]	; (8000aa8 <HAL_GPIO_Init+0x338>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d025      	beq.n	80009a2 <HAL_GPIO_Init+0x232>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a54      	ldr	r2, [pc, #336]	; (8000aac <HAL_GPIO_Init+0x33c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d01f      	beq.n	800099e <HAL_GPIO_Init+0x22e>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a53      	ldr	r2, [pc, #332]	; (8000ab0 <HAL_GPIO_Init+0x340>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d019      	beq.n	800099a <HAL_GPIO_Init+0x22a>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a52      	ldr	r2, [pc, #328]	; (8000ab4 <HAL_GPIO_Init+0x344>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d013      	beq.n	8000996 <HAL_GPIO_Init+0x226>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a51      	ldr	r2, [pc, #324]	; (8000ab8 <HAL_GPIO_Init+0x348>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d00d      	beq.n	8000992 <HAL_GPIO_Init+0x222>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a50      	ldr	r2, [pc, #320]	; (8000abc <HAL_GPIO_Init+0x34c>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d007      	beq.n	800098e <HAL_GPIO_Init+0x21e>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a4f      	ldr	r2, [pc, #316]	; (8000ac0 <HAL_GPIO_Init+0x350>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d101      	bne.n	800098a <HAL_GPIO_Init+0x21a>
 8000986:	2309      	movs	r3, #9
 8000988:	e012      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 800098a:	230a      	movs	r3, #10
 800098c:	e010      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 800098e:	2308      	movs	r3, #8
 8000990:	e00e      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 8000992:	2307      	movs	r3, #7
 8000994:	e00c      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 8000996:	2306      	movs	r3, #6
 8000998:	e00a      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 800099a:	2305      	movs	r3, #5
 800099c:	e008      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 800099e:	2304      	movs	r3, #4
 80009a0:	e006      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 80009a2:	2303      	movs	r3, #3
 80009a4:	e004      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 80009a6:	2302      	movs	r3, #2
 80009a8:	e002      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 80009aa:	2301      	movs	r3, #1
 80009ac:	e000      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 80009ae:	2300      	movs	r3, #0
 80009b0:	69fa      	ldr	r2, [r7, #28]
 80009b2:	f002 0203 	and.w	r2, r2, #3
 80009b6:	0092      	lsls	r2, r2, #2
 80009b8:	4093      	lsls	r3, r2
 80009ba:	69ba      	ldr	r2, [r7, #24]
 80009bc:	4313      	orrs	r3, r2
 80009be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80009c0:	4935      	ldr	r1, [pc, #212]	; (8000a98 <HAL_GPIO_Init+0x328>)
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	089b      	lsrs	r3, r3, #2
 80009c6:	3302      	adds	r3, #2
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009ce:	4b3d      	ldr	r3, [pc, #244]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	43db      	mvns	r3, r3
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	4013      	ands	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009f2:	4a34      	ldr	r2, [pc, #208]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009f8:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	43db      	mvns	r3, r3
 8000a02:	69ba      	ldr	r2, [r7, #24]
 8000a04:	4013      	ands	r3, r2
 8000a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d003      	beq.n	8000a1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a1c:	4a29      	ldr	r2, [pc, #164]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a22:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a46:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a70:	4a14      	ldr	r2, [pc, #80]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	61fb      	str	r3, [r7, #28]
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	2b0f      	cmp	r3, #15
 8000a80:	f67f ae86 	bls.w	8000790 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3724      	adds	r7, #36	; 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40013800 	.word	0x40013800
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40020400 	.word	0x40020400
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40021400 	.word	0x40021400
 8000ab4:	40021800 	.word	0x40021800
 8000ab8:	40021c00 	.word	0x40021c00
 8000abc:	40022000 	.word	0x40022000
 8000ac0:	40022400 	.word	0x40022400
 8000ac4:	40013c00 	.word	0x40013c00

08000ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	807b      	strh	r3, [r7, #2]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ad8:	787b      	ldrb	r3, [r7, #1]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ade:	887a      	ldrh	r2, [r7, #2]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000ae4:	e003      	b.n	8000aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000ae6:	887b      	ldrh	r3, [r7, #2]
 8000ae8:	041a      	lsls	r2, r3, #16
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	619a      	str	r2, [r3, #24]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b085      	sub	sp, #20
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b0c:	887a      	ldrh	r2, [r7, #2]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4013      	ands	r3, r2
 8000b12:	041a      	lsls	r2, r3, #16
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	400b      	ands	r3, r1
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	619a      	str	r2, [r3, #24]
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b30:	b08f      	sub	sp, #60	; 0x3c
 8000b32:	af0a      	add	r7, sp, #40	; 0x28
 8000b34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d101      	bne.n	8000b40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e116      	b.n	8000d6e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d106      	bne.n	8000b60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f009 fc56 	bl	800a40c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2203      	movs	r2, #3
 8000b64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d102      	bne.n	8000b7a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f003 fb03 	bl	800418a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	687e      	ldr	r6, [r7, #4]
 8000b8c:	466d      	mov	r5, sp
 8000b8e:	f106 0410 	add.w	r4, r6, #16
 8000b92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ba2:	1d33      	adds	r3, r6, #4
 8000ba4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ba6:	6838      	ldr	r0, [r7, #0]
 8000ba8:	f003 f9e4 	bl	8003f74 <USB_CoreInit>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d005      	beq.n	8000bbe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e0d7      	b.n	8000d6e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 faf1 	bl	80041ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73fb      	strb	r3, [r7, #15]
 8000bce:	e04a      	b.n	8000c66 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000bd0:	7bfa      	ldrb	r2, [r7, #15]
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	1a9b      	subs	r3, r3, r2
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	440b      	add	r3, r1
 8000bde:	333d      	adds	r3, #61	; 0x3d
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000be4:	7bfa      	ldrb	r2, [r7, #15]
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	4613      	mov	r3, r2
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	1a9b      	subs	r3, r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	333c      	adds	r3, #60	; 0x3c
 8000bf4:	7bfa      	ldrb	r2, [r7, #15]
 8000bf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000bf8:	7bfa      	ldrb	r2, [r7, #15]
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	b298      	uxth	r0, r3
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	4613      	mov	r3, r2
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	1a9b      	subs	r3, r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	440b      	add	r3, r1
 8000c0a:	3342      	adds	r3, #66	; 0x42
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c10:	7bfa      	ldrb	r2, [r7, #15]
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	4613      	mov	r3, r2
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	1a9b      	subs	r3, r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	333f      	adds	r3, #63	; 0x3f
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c24:	7bfa      	ldrb	r2, [r7, #15]
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	1a9b      	subs	r3, r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	440b      	add	r3, r1
 8000c32:	3344      	adds	r3, #68	; 0x44
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c38:	7bfa      	ldrb	r2, [r7, #15]
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	1a9b      	subs	r3, r3, r2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	440b      	add	r3, r1
 8000c46:	3348      	adds	r3, #72	; 0x48
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	4613      	mov	r3, r2
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	1a9b      	subs	r3, r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	440b      	add	r3, r1
 8000c5a:	3350      	adds	r3, #80	; 0x50
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	3301      	adds	r3, #1
 8000c64:	73fb      	strb	r3, [r7, #15]
 8000c66:	7bfa      	ldrb	r2, [r7, #15]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d3af      	bcc.n	8000bd0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	e044      	b.n	8000d00 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c76:	7bfa      	ldrb	r2, [r7, #15]
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	1a9b      	subs	r3, r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	440b      	add	r3, r1
 8000c84:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c8c:	7bfa      	ldrb	r2, [r7, #15]
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	4613      	mov	r3, r2
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	1a9b      	subs	r3, r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	440b      	add	r3, r1
 8000c9a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000c9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ca0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ca2:	7bfa      	ldrb	r2, [r7, #15]
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	1a9b      	subs	r3, r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000cb8:	7bfa      	ldrb	r2, [r7, #15]
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	1a9b      	subs	r3, r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000cce:	7bfa      	ldrb	r2, [r7, #15]
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	1a9b      	subs	r3, r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ce4:	7bfa      	ldrb	r2, [r7, #15]
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	1a9b      	subs	r3, r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	73fb      	strb	r3, [r7, #15]
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d3b5      	bcc.n	8000c76 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	687e      	ldr	r6, [r7, #4]
 8000d12:	466d      	mov	r5, sp
 8000d14:	f106 0410 	add.w	r4, r6, #16
 8000d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d24:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d28:	1d33      	adds	r3, r6, #4
 8000d2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d2c:	6838      	ldr	r0, [r7, #0]
 8000d2e:	f003 fa67 	bl	8004200 <USB_DevInit>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d005      	beq.n	8000d44 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e014      	b.n	8000d6e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d102      	bne.n	8000d62 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f001 f881 	bl	8001e64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f004 fabf 	bl	80052ea <USB_DevDisconnect>

  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d76 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d101      	bne.n	8000d8c <HAL_PCD_Start+0x16>
 8000d88:	2302      	movs	r3, #2
 8000d8a:	e012      	b.n	8000db2 <HAL_PCD_Start+0x3c>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f003 f9e5 	bl	8004168 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f004 fa80 	bl	80052a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000dba:	b590      	push	{r4, r7, lr}
 8000dbc:	b08d      	sub	sp, #52	; 0x34
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000dc8:	6a3b      	ldr	r3, [r7, #32]
 8000dca:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f004 fb3e 	bl	8005452 <USB_GetMode>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f040 83ca 	bne.w	8001572 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f004 faa2 	bl	800532c <USB_ReadInterrupts>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 83c0 	beq.w	8001570 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f004 fa99 	bl	800532c <USB_ReadInterrupts>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d107      	bne.n	8000e14 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	695a      	ldr	r2, [r3, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f002 0202 	and.w	r2, r2, #2
 8000e12:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f004 fa87 	bl	800532c <USB_ReadInterrupts>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	f003 0310 	and.w	r3, r3, #16
 8000e24:	2b10      	cmp	r3, #16
 8000e26:	d161      	bne.n	8000eec <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	699a      	ldr	r2, [r3, #24]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 0210 	bic.w	r2, r2, #16
 8000e36:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8000e38:	6a3b      	ldr	r3, [r7, #32]
 8000e3a:	6a1b      	ldr	r3, [r3, #32]
 8000e3c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	f003 020f 	and.w	r2, r3, #15
 8000e44:	4613      	mov	r3, r2
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	1a9b      	subs	r3, r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	4413      	add	r3, r2
 8000e54:	3304      	adds	r3, #4
 8000e56:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	0c5b      	lsrs	r3, r3, #17
 8000e5c:	f003 030f 	and.w	r3, r3, #15
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d124      	bne.n	8000eae <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d035      	beq.n	8000edc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	6a38      	ldr	r0, [r7, #32]
 8000e84:	f004 f8ed 	bl	8005062 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	68da      	ldr	r2, [r3, #12]
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	091b      	lsrs	r3, r3, #4
 8000e90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e94:	441a      	add	r2, r3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	699a      	ldr	r2, [r3, #24]
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	091b      	lsrs	r3, r3, #4
 8000ea2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ea6:	441a      	add	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	619a      	str	r2, [r3, #24]
 8000eac:	e016      	b.n	8000edc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	0c5b      	lsrs	r3, r3, #17
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d110      	bne.n	8000edc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8000ec0:	2208      	movs	r2, #8
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	6a38      	ldr	r0, [r7, #32]
 8000ec6:	f004 f8cc 	bl	8005062 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	699a      	ldr	r2, [r3, #24]
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	091b      	lsrs	r3, r3, #4
 8000ed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ed6:	441a      	add	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	699a      	ldr	r2, [r3, #24]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0210 	orr.w	r2, r2, #16
 8000eea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f004 fa1b 	bl	800532c <USB_ReadInterrupts>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000efc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000f00:	d16e      	bne.n	8000fe0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f004 fa21 	bl	8005352 <USB_ReadDevAllOutEpInterrupt>
 8000f10:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000f12:	e062      	b.n	8000fda <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d057      	beq.n	8000fce <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 fa46 	bl	80053ba <USB_ReadDevOutEPInterrupt>
 8000f2e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d00c      	beq.n	8000f54 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	015a      	lsls	r2, r3, #5
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	4413      	add	r3, r2
 8000f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f46:	461a      	mov	r2, r3
 8000f48:	2301      	movs	r3, #1
 8000f4a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000f4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 fdde 	bl	8001b10 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00c      	beq.n	8000f78 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	015a      	lsls	r2, r3, #5
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	4413      	add	r3, r2
 8000f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 fed8 	bl	8001d28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	f003 0310 	and.w	r3, r3, #16
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d008      	beq.n	8000f94 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	015a      	lsls	r2, r3, #5
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	4413      	add	r3, r2
 8000f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f8e:	461a      	mov	r2, r3
 8000f90:	2310      	movs	r3, #16
 8000f92:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	f003 0320 	and.w	r3, r3, #32
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d008      	beq.n	8000fb0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	015a      	lsls	r2, r3, #5
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000faa:	461a      	mov	r2, r3
 8000fac:	2320      	movs	r3, #32
 8000fae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d009      	beq.n	8000fce <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	015a      	lsls	r2, r3, #5
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fcc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd6:	085b      	lsrs	r3, r3, #1
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8000fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d199      	bne.n	8000f14 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f004 f9a1 	bl	800532c <USB_ReadInterrupts>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000ff4:	f040 80c0 	bne.w	8001178 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f004 f9c2 	bl	8005386 <USB_ReadDevAllInEpInterrupt>
 8001002:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001008:	e0b2      	b.n	8001170 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 80a7 	beq.w	8001164 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f004 f9e8 	bl	80053f6 <USB_ReadDevInEPInterrupt>
 8001026:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	d057      	beq.n	80010e2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	f003 030f 	and.w	r3, r3, #15
 8001038:	2201      	movs	r2, #1
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43db      	mvns	r3, r3
 800104c:	69f9      	ldr	r1, [r7, #28]
 800104e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001052:	4013      	ands	r3, r2
 8001054:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001058:	015a      	lsls	r2, r3, #5
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	4413      	add	r3, r2
 800105e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001062:	461a      	mov	r2, r3
 8001064:	2301      	movs	r3, #1
 8001066:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d132      	bne.n	80010d6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001074:	4613      	mov	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	1a9b      	subs	r3, r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	3348      	adds	r3, #72	; 0x48
 8001080:	6819      	ldr	r1, [r3, #0]
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001086:	4613      	mov	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	1a9b      	subs	r3, r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4403      	add	r3, r0
 8001090:	3344      	adds	r3, #68	; 0x44
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4419      	add	r1, r3
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800109a:	4613      	mov	r3, r2
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	1a9b      	subs	r3, r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4403      	add	r3, r0
 80010a4:	3348      	adds	r3, #72	; 0x48
 80010a6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d113      	bne.n	80010d6 <HAL_PCD_IRQHandler+0x31c>
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b2:	4613      	mov	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	1a9b      	subs	r3, r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	440b      	add	r3, r1
 80010bc:	3350      	adds	r3, #80	; 0x50
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d108      	bne.n	80010d6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6818      	ldr	r0, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80010ce:	461a      	mov	r2, r3
 80010d0:	2101      	movs	r1, #1
 80010d2:	f004 f9f1 	bl	80054b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4619      	mov	r1, r3
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f009 fa26 	bl	800a52e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	015a      	lsls	r2, r3, #5
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	4413      	add	r3, r2
 80010f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010f8:	461a      	mov	r2, r3
 80010fa:	2308      	movs	r3, #8
 80010fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	f003 0310 	and.w	r3, r3, #16
 8001104:	2b00      	cmp	r3, #0
 8001106:	d008      	beq.n	800111a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	015a      	lsls	r2, r3, #5
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	4413      	add	r3, r2
 8001110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001114:	461a      	mov	r2, r3
 8001116:	2310      	movs	r3, #16
 8001118:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001120:	2b00      	cmp	r3, #0
 8001122:	d008      	beq.n	8001136 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	015a      	lsls	r2, r3, #5
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	4413      	add	r3, r2
 800112c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001130:	461a      	mov	r2, r3
 8001132:	2340      	movs	r3, #64	; 0x40
 8001134:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d008      	beq.n	8001152 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	015a      	lsls	r2, r3, #5
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	4413      	add	r3, r2
 8001148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800114c:	461a      	mov	r2, r3
 800114e:	2302      	movs	r3, #2
 8001150:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800115c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 fc48 	bl	80019f4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	3301      	adds	r3, #1
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116c:	085b      	lsrs	r3, r3, #1
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001172:	2b00      	cmp	r3, #0
 8001174:	f47f af49 	bne.w	800100a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f004 f8d5 	bl	800532c <USB_ReadInterrupts>
 8001182:	4603      	mov	r3, r0
 8001184:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001188:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800118c:	d122      	bne.n	80011d4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800119c:	f023 0301 	bic.w	r3, r3, #1
 80011a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d108      	bne.n	80011be <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80011b4:	2100      	movs	r1, #0
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f009 fc08 	bl	800a9cc <HAL_PCDEx_LPM_Callback>
 80011bc:	e002      	b.n	80011c4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f009 fa2c 	bl	800a61c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	695a      	ldr	r2, [r3, #20]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80011d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f004 f8a7 	bl	800532c <USB_ReadInterrupts>
 80011de:	4603      	mov	r3, r0
 80011e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011e8:	d112      	bne.n	8001210 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d102      	bne.n	8001200 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f009 f9e8 	bl	800a5d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	695a      	ldr	r2, [r3, #20]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800120e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f004 f889 	bl	800532c <USB_ReadInterrupts>
 800121a:	4603      	mov	r3, r0
 800121c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001224:	d121      	bne.n	800126a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	695a      	ldr	r2, [r3, #20]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001234:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800123c:	2b00      	cmp	r3, #0
 800123e:	d111      	bne.n	8001264 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	f003 020f 	and.w	r2, r3, #15
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800125a:	2101      	movs	r1, #1
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f009 fbb5 	bl	800a9cc <HAL_PCDEx_LPM_Callback>
 8001262:	e002      	b.n	800126a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f009 f9b3 	bl	800a5d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f004 f85c 	bl	800532c <USB_ReadInterrupts>
 8001274:	4603      	mov	r3, r0
 8001276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800127a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800127e:	f040 80c7 	bne.w	8001410 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	69fa      	ldr	r2, [r7, #28]
 800128c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2110      	movs	r1, #16
 800129c:	4618      	mov	r0, r3
 800129e:	f003 f91d 	bl	80044dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012a6:	e056      	b.n	8001356 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80012a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012aa:	015a      	lsls	r2, r3, #5
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	4413      	add	r3, r2
 80012b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012b4:	461a      	mov	r2, r3
 80012b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012ba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80012bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012be:	015a      	lsls	r2, r3, #5
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	4413      	add	r3, r2
 80012c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012cc:	0151      	lsls	r1, r2, #5
 80012ce:	69fa      	ldr	r2, [r7, #28]
 80012d0:	440a      	add	r2, r1
 80012d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80012d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012da:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80012dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012de:	015a      	lsls	r2, r3, #5
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	4413      	add	r3, r2
 80012e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ec:	0151      	lsls	r1, r2, #5
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	440a      	add	r2, r1
 80012f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80012f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80012fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fe:	015a      	lsls	r2, r3, #5
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	4413      	add	r3, r2
 8001304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001308:	461a      	mov	r2, r3
 800130a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800130e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001312:	015a      	lsls	r2, r3, #5
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	4413      	add	r3, r2
 8001318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001320:	0151      	lsls	r1, r2, #5
 8001322:	69fa      	ldr	r2, [r7, #28]
 8001324:	440a      	add	r2, r1
 8001326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800132a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800132e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001332:	015a      	lsls	r2, r3, #5
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	4413      	add	r3, r2
 8001338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001340:	0151      	lsls	r1, r2, #5
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	440a      	add	r2, r1
 8001346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800134a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800134e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001352:	3301      	adds	r3, #1
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800135c:	429a      	cmp	r2, r3
 800135e:	d3a3      	bcc.n	80012a8 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800136e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001372:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	2b00      	cmp	r3, #0
 800137a:	d016      	beq.n	80013aa <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800138c:	f043 030b 	orr.w	r3, r3, #11
 8001390:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800139a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139c:	69fa      	ldr	r2, [r7, #28]
 800139e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013a2:	f043 030b 	orr.w	r3, r3, #11
 80013a6:	6453      	str	r3, [r2, #68]	; 0x44
 80013a8:	e015      	b.n	80013d6 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013b0:	695a      	ldr	r2, [r3, #20]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013b8:	4619      	mov	r1, r3
 80013ba:	f242 032b 	movw	r3, #8235	; 0x202b
 80013be:	4313      	orrs	r3, r2
 80013c0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013d0:	f043 030b 	orr.w	r3, r3, #11
 80013d4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80013e8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80013fa:	461a      	mov	r2, r3
 80013fc:	f004 f85c 	bl	80054b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	695a      	ldr	r2, [r3, #20]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800140e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f003 ff89 	bl	800532c <USB_ReadInterrupts>
 800141a:	4603      	mov	r3, r0
 800141c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001424:	d124      	bne.n	8001470 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f004 f820 	bl	8005470 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f003 f8b2 	bl	800459e <USB_GetDevSpeed>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681c      	ldr	r4, [r3, #0]
 8001446:	f001 f9b3 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 800144a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001450:	b2db      	uxtb	r3, r3
 8001452:	461a      	mov	r2, r3
 8001454:	4620      	mov	r0, r4
 8001456:	f002 fde5 	bl	8004024 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f009 f88f 	bl	800a57e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	695a      	ldr	r2, [r3, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800146e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f003 ff59 	bl	800532c <USB_ReadInterrupts>
 800147a:	4603      	mov	r3, r0
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b08      	cmp	r3, #8
 8001482:	d10a      	bne.n	800149a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f009 f86c 	bl	800a562 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	695a      	ldr	r2, [r3, #20]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f002 0208 	and.w	r2, r2, #8
 8001498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 ff44 	bl	800532c <USB_ReadInterrupts>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014ae:	d10f      	bne.n	80014d0 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	4619      	mov	r1, r3
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f009 f8ce 	bl	800a65c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80014ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 ff29 	bl	800532c <USB_ReadInterrupts>
 80014da:	4603      	mov	r3, r0
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014e4:	d10f      	bne.n	8001506 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4619      	mov	r1, r3
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f009 f8a1 	bl	800a638 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	695a      	ldr	r2, [r3, #20]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001504:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f003 ff0e 	bl	800532c <USB_ReadInterrupts>
 8001510:	4603      	mov	r3, r0
 8001512:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800151a:	d10a      	bne.n	8001532 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f009 f8af 	bl	800a680 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	695a      	ldr	r2, [r3, #20]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001530:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f003 fef8 	bl	800532c <USB_ReadInterrupts>
 800153c:	4603      	mov	r3, r0
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	2b04      	cmp	r3, #4
 8001544:	d115      	bne.n	8001572 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f009 f89f 	bl	800a69c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6859      	ldr	r1, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	e000      	b.n	8001572 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001570:	bf00      	nop
    }
  }
}
 8001572:	3734      	adds	r7, #52	; 0x34
 8001574:	46bd      	mov	sp, r7
 8001576:	bd90      	pop	{r4, r7, pc}

08001578 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800158a:	2b01      	cmp	r3, #1
 800158c:	d101      	bne.n	8001592 <HAL_PCD_SetAddress+0x1a>
 800158e:	2302      	movs	r3, #2
 8001590:	e013      	b.n	80015ba <HAL_PCD_SetAddress+0x42>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	78fa      	ldrb	r2, [r7, #3]
 800159e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	78fa      	ldrb	r2, [r7, #3]
 80015a8:	4611      	mov	r1, r2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 fe56 	bl	800525c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	4608      	mov	r0, r1
 80015cc:	4611      	mov	r1, r2
 80015ce:	461a      	mov	r2, r3
 80015d0:	4603      	mov	r3, r0
 80015d2:	70fb      	strb	r3, [r7, #3]
 80015d4:	460b      	mov	r3, r1
 80015d6:	803b      	strh	r3, [r7, #0]
 80015d8:	4613      	mov	r3, r2
 80015da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da0f      	bge.n	8001608 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	f003 020f 	and.w	r2, r3, #15
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	1a9b      	subs	r3, r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	3338      	adds	r3, #56	; 0x38
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	4413      	add	r3, r2
 80015fc:	3304      	adds	r3, #4
 80015fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2201      	movs	r2, #1
 8001604:	705a      	strb	r2, [r3, #1]
 8001606:	e00f      	b.n	8001628 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	f003 020f 	and.w	r2, r3, #15
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	1a9b      	subs	r3, r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	3304      	adds	r3, #4
 8001620:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	b2da      	uxtb	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001634:	883a      	ldrh	r2, [r7, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	78ba      	ldrb	r2, [r7, #2]
 800163e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	785b      	ldrb	r3, [r3, #1]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d004      	beq.n	8001652 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b29a      	uxth	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001652:	78bb      	ldrb	r3, [r7, #2]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d102      	bne.n	800165e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <HAL_PCD_EP_Open+0xaa>
 8001668:	2302      	movs	r3, #2
 800166a:	e00e      	b.n	800168a <HAL_PCD_EP_Open+0xc8>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68f9      	ldr	r1, [r7, #12]
 800167a:	4618      	mov	r0, r3
 800167c:	f002 ffb4 	bl	80045e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001688:	7afb      	ldrb	r3, [r7, #11]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b084      	sub	sp, #16
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800169e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	da0f      	bge.n	80016c6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	f003 020f 	and.w	r2, r3, #15
 80016ac:	4613      	mov	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	1a9b      	subs	r3, r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	3338      	adds	r3, #56	; 0x38
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	3304      	adds	r3, #4
 80016bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2201      	movs	r2, #1
 80016c2:	705a      	strb	r2, [r3, #1]
 80016c4:	e00f      	b.n	80016e6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	f003 020f 	and.w	r2, r3, #15
 80016cc:	4613      	mov	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	1a9b      	subs	r3, r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4413      	add	r3, r2
 80016dc:	3304      	adds	r3, #4
 80016de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d101      	bne.n	8001700 <HAL_PCD_EP_Close+0x6e>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e00e      	b.n	800171e <HAL_PCD_EP_Close+0x8c>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68f9      	ldr	r1, [r7, #12]
 800170e:	4618      	mov	r0, r3
 8001710:	f002 fff2 	bl	80046f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	460b      	mov	r3, r1
 8001734:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001736:	7afb      	ldrb	r3, [r7, #11]
 8001738:	f003 020f 	and.w	r2, r3, #15
 800173c:	4613      	mov	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	1a9b      	subs	r3, r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	3304      	adds	r3, #4
 800174e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2200      	movs	r2, #0
 8001766:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001768:	7afb      	ldrb	r3, [r7, #11]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	b2da      	uxtb	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d102      	bne.n	8001782 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001782:	7afb      	ldrb	r3, [r7, #11]
 8001784:	f003 030f 	and.w	r3, r3, #15
 8001788:	2b00      	cmp	r3, #0
 800178a:	d109      	bne.n	80017a0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	6979      	ldr	r1, [r7, #20]
 800179a:	f003 fad5 	bl	8004d48 <USB_EP0StartXfer>
 800179e:	e008      	b.n	80017b2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	461a      	mov	r2, r3
 80017ac:	6979      	ldr	r1, [r7, #20]
 80017ae:	f003 f87f 	bl	80048b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	f003 020f 	and.w	r2, r3, #15
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	1a9b      	subs	r3, r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	460b      	mov	r3, r1
 80017fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017fc:	7afb      	ldrb	r3, [r7, #11]
 80017fe:	f003 020f 	and.w	r2, r3, #15
 8001802:	4613      	mov	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	1a9b      	subs	r3, r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	3338      	adds	r3, #56	; 0x38
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	3304      	adds	r3, #4
 8001812:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2201      	movs	r2, #1
 800182a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800182c:	7afb      	ldrb	r3, [r7, #11]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	b2da      	uxtb	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d102      	bne.n	8001846 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001846:	7afb      	ldrb	r3, [r7, #11]
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	2b00      	cmp	r3, #0
 800184e:	d109      	bne.n	8001864 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	6979      	ldr	r1, [r7, #20]
 800185e:	f003 fa73 	bl	8004d48 <USB_EP0StartXfer>
 8001862:	e008      	b.n	8001876 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	6979      	ldr	r1, [r7, #20]
 8001872:	f003 f81d 	bl	80048b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	f003 020f 	and.w	r2, r3, #15
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	429a      	cmp	r2, r3
 8001898:	d901      	bls.n	800189e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e050      	b.n	8001940 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800189e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	da0f      	bge.n	80018c6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	f003 020f 	and.w	r2, r3, #15
 80018ac:	4613      	mov	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	3338      	adds	r3, #56	; 0x38
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	3304      	adds	r3, #4
 80018bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2201      	movs	r2, #1
 80018c2:	705a      	strb	r2, [r3, #1]
 80018c4:	e00d      	b.n	80018e2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018c6:	78fa      	ldrb	r2, [r7, #3]
 80018c8:	4613      	mov	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	1a9b      	subs	r3, r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	4413      	add	r3, r2
 80018d8:	3304      	adds	r3, #4
 80018da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2201      	movs	r2, #1
 80018e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_PCD_EP_SetStall+0x82>
 80018fe:	2302      	movs	r3, #2
 8001900:	e01e      	b.n	8001940 <HAL_PCD_EP_SetStall+0xc0>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68f9      	ldr	r1, [r7, #12]
 8001910:	4618      	mov	r0, r3
 8001912:	f003 fbcf 	bl	80050b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10a      	bne.n	8001936 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	b2d9      	uxtb	r1, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001930:	461a      	mov	r2, r3
 8001932:	f003 fdc1 	bl	80054b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	f003 020f 	and.w	r2, r3, #15
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	429a      	cmp	r2, r3
 8001960:	d901      	bls.n	8001966 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e042      	b.n	80019ec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001966:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800196a:	2b00      	cmp	r3, #0
 800196c:	da0f      	bge.n	800198e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	f003 020f 	and.w	r2, r3, #15
 8001974:	4613      	mov	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	3338      	adds	r3, #56	; 0x38
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	3304      	adds	r3, #4
 8001984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2201      	movs	r2, #1
 800198a:	705a      	strb	r2, [r3, #1]
 800198c:	e00f      	b.n	80019ae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	f003 020f 	and.w	r2, r3, #15
 8001994:	4613      	mov	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4413      	add	r3, r2
 80019a4:	3304      	adds	r3, #4
 80019a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <HAL_PCD_EP_ClrStall+0x86>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e00e      	b.n	80019ec <HAL_PCD_EP_ClrStall+0xa4>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68f9      	ldr	r1, [r7, #12]
 80019dc:	4618      	mov	r0, r3
 80019de:	f003 fbd7 	bl	8005190 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	3338      	adds	r3, #56	; 0x38
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	4413      	add	r3, r2
 8001a18:	3304      	adds	r3, #4
 8001a1a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	699a      	ldr	r2, [r3, #24]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d901      	bls.n	8001a2c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e06c      	b.n	8001b06 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	695a      	ldr	r2, [r3, #20]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d902      	bls.n	8001a48 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	3303      	adds	r3, #3
 8001a4c:	089b      	lsrs	r3, r3, #2
 8001a4e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a50:	e02b      	b.n	8001aaa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d902      	bls.n	8001a6e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3303      	adds	r3, #3
 8001a72:	089b      	lsrs	r3, r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	68d9      	ldr	r1, [r3, #12]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6978      	ldr	r0, [r7, #20]
 8001a8e:	f003 fab3 	bl	8004ff8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	441a      	add	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	699a      	ldr	r2, [r3, #24]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	441a      	add	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	015a      	lsls	r2, r3, #5
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d809      	bhi.n	8001ad4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	699a      	ldr	r2, [r3, #24]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d203      	bcs.n	8001ad4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1be      	bne.n	8001a52 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d811      	bhi.n	8001b04 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	6939      	ldr	r1, [r7, #16]
 8001afc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001b00:	4013      	ands	r3, r2
 8001b02:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	333c      	adds	r3, #60	; 0x3c
 8001b28:	3304      	adds	r3, #4
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	015a      	lsls	r2, r3, #5
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4413      	add	r3, r2
 8001b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	f040 80a0 	bne.w	8001c88 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d015      	beq.n	8001b7e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4a72      	ldr	r2, [pc, #456]	; (8001d20 <PCD_EP_OutXfrComplete_int+0x210>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	f240 80dd 	bls.w	8001d16 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 80d7 	beq.w	8001d16 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	015a      	lsls	r2, r3, #5
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b74:	461a      	mov	r2, r3
 8001b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b7a:	6093      	str	r3, [r2, #8]
 8001b7c:	e0cb      	b.n	8001d16 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f003 0320 	and.w	r3, r3, #32
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d009      	beq.n	8001b9c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	015a      	lsls	r2, r3, #5
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4413      	add	r3, r2
 8001b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b94:	461a      	mov	r2, r3
 8001b96:	2320      	movs	r3, #32
 8001b98:	6093      	str	r3, [r2, #8]
 8001b9a:	e0bc      	b.n	8001d16 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 80b7 	bne.w	8001d16 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4a5d      	ldr	r2, [pc, #372]	; (8001d20 <PCD_EP_OutXfrComplete_int+0x210>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d90f      	bls.n	8001bd0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00a      	beq.n	8001bd0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	015a      	lsls	r2, r3, #5
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bcc:	6093      	str	r3, [r2, #8]
 8001bce:	e0a2      	b.n	8001d16 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	1a9b      	subs	r3, r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001be2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	0159      	lsls	r1, r3, #5
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	440b      	add	r3, r1
 8001bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001bf6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4403      	add	r3, r0
 8001c06:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001c0a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	4613      	mov	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c1e:	6819      	ldr	r1, [r3, #0]
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	4613      	mov	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4403      	add	r3, r0
 8001c2e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4419      	add	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	1a9b      	subs	r3, r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4403      	add	r3, r0
 8001c44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c48:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d114      	bne.n	8001c7a <PCD_EP_OutXfrComplete_int+0x16a>
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	4613      	mov	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d108      	bne.n	8001c7a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c72:	461a      	mov	r2, r3
 8001c74:	2101      	movs	r1, #1
 8001c76:	f003 fc1f 	bl	80054b8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f008 fc39 	bl	800a4f8 <HAL_PCD_DataOutStageCallback>
 8001c86:	e046      	b.n	8001d16 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <PCD_EP_OutXfrComplete_int+0x214>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d124      	bne.n	8001cda <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00a      	beq.n	8001cb0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	015a      	lsls	r2, r3, #5
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cac:	6093      	str	r3, [r2, #8]
 8001cae:	e032      	b.n	8001d16 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d008      	beq.n	8001ccc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	015a      	lsls	r2, r3, #5
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	2320      	movs	r3, #32
 8001cca:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f008 fc10 	bl	800a4f8 <HAL_PCD_DataOutStageCallback>
 8001cd8:	e01d      	b.n	8001d16 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d114      	bne.n	8001d0a <PCD_EP_OutXfrComplete_int+0x1fa>
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	1a9b      	subs	r3, r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d108      	bne.n	8001d0a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d02:	461a      	mov	r2, r3
 8001d04:	2100      	movs	r1, #0
 8001d06:	f003 fbd7 	bl	80054b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	4619      	mov	r1, r3
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f008 fbf1 	bl	800a4f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	4f54300a 	.word	0x4f54300a
 8001d24:	4f54310a 	.word	0x4f54310a

08001d28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	333c      	adds	r3, #60	; 0x3c
 8001d40:	3304      	adds	r3, #4
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <PCD_EP_OutSetupPacket_int+0x88>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d90e      	bls.n	8001d7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d009      	beq.n	8001d7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	015a      	lsls	r2, r3, #5
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d74:	461a      	mov	r2, r3
 8001d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f008 fba9 	bl	800a4d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <PCD_EP_OutSetupPacket_int+0x88>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d90c      	bls.n	8001da4 <PCD_EP_OutSetupPacket_int+0x7c>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d108      	bne.n	8001da4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2101      	movs	r1, #1
 8001da0:	f003 fb8a 	bl	80054b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	4f54300a 	.word	0x4f54300a

08001db4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	70fb      	strb	r3, [r7, #3]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d107      	bne.n	8001de2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001dd2:	883b      	ldrh	r3, [r7, #0]
 8001dd4:	0419      	lsls	r1, r3, #16
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	629a      	str	r2, [r3, #40]	; 0x28
 8001de0:	e028      	b.n	8001e34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	0c1b      	lsrs	r3, r3, #16
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	4413      	add	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	e00d      	b.n	8001e12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	3340      	adds	r3, #64	; 0x40
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	0c1b      	lsrs	r3, r3, #16
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	4413      	add	r3, r2
 8001e0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d3ec      	bcc.n	8001df6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001e1c:	883b      	ldrh	r3, [r7, #0]
 8001e1e:	0418      	lsls	r0, r3, #16
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6819      	ldr	r1, [r3, #0]
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	4302      	orrs	r2, r0
 8001e2c:	3340      	adds	r3, #64	; 0x40
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_PCDEx_ActivateLPM+0x44>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	10000003 	.word	0x10000003

08001eac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40007000 	.word	0x40007000

08001ecc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e291      	b.n	8002406 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8087 	beq.w	8001ffe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef0:	4b96      	ldr	r3, [pc, #600]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d00c      	beq.n	8001f16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001efc:	4b93      	ldr	r3, [pc, #588]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d112      	bne.n	8001f2e <HAL_RCC_OscConfig+0x62>
 8001f08:	4b90      	ldr	r3, [pc, #576]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f14:	d10b      	bne.n	8001f2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f16:	4b8d      	ldr	r3, [pc, #564]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d06c      	beq.n	8001ffc <HAL_RCC_OscConfig+0x130>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d168      	bne.n	8001ffc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e26b      	b.n	8002406 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f36:	d106      	bne.n	8001f46 <HAL_RCC_OscConfig+0x7a>
 8001f38:	4b84      	ldr	r3, [pc, #528]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a83      	ldr	r2, [pc, #524]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	e02e      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd8>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x9c>
 8001f4e:	4b7f      	ldr	r3, [pc, #508]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a7e      	ldr	r2, [pc, #504]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b7c      	ldr	r3, [pc, #496]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a7b      	ldr	r2, [pc, #492]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e01d      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0xc0>
 8001f72:	4b76      	ldr	r3, [pc, #472]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a75      	ldr	r2, [pc, #468]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b73      	ldr	r3, [pc, #460]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a72      	ldr	r2, [pc, #456]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e00b      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd8>
 8001f8c:	4b6f      	ldr	r3, [pc, #444]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a6e      	ldr	r2, [pc, #440]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	4b6c      	ldr	r3, [pc, #432]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a6b      	ldr	r2, [pc, #428]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d013      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7fe face 	bl	800054c <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7fe faca 	bl	800054c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	; 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e21f      	b.n	8002406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	4b61      	ldr	r3, [pc, #388]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0xe8>
 8001fd2:	e014      	b.n	8001ffe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd4:	f7fe faba 	bl	800054c <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fdc:	f7fe fab6 	bl	800054c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e20b      	b.n	8002406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	4b57      	ldr	r3, [pc, #348]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x110>
 8001ffa:	e000      	b.n	8001ffe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d069      	beq.n	80020de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800200a:	4b50      	ldr	r3, [pc, #320]	; (800214c <HAL_RCC_OscConfig+0x280>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00b      	beq.n	800202e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002016:	4b4d      	ldr	r3, [pc, #308]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b08      	cmp	r3, #8
 8002020:	d11c      	bne.n	800205c <HAL_RCC_OscConfig+0x190>
 8002022:	4b4a      	ldr	r3, [pc, #296]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d116      	bne.n	800205c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <HAL_RCC_OscConfig+0x17a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d001      	beq.n	8002046 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e1df      	b.n	8002406 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002046:	4b41      	ldr	r3, [pc, #260]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	493d      	ldr	r1, [pc, #244]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205a:	e040      	b.n	80020de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d023      	beq.n	80020ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002064:	4b39      	ldr	r3, [pc, #228]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a38      	ldr	r2, [pc, #224]	; (800214c <HAL_RCC_OscConfig+0x280>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7fe fa6c 	bl	800054c <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002078:	f7fe fa68 	bl	800054c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e1bd      	b.n	8002406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208a:	4b30      	ldr	r3, [pc, #192]	; (800214c <HAL_RCC_OscConfig+0x280>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002096:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4929      	ldr	r1, [pc, #164]	; (800214c <HAL_RCC_OscConfig+0x280>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
 80020aa:	e018      	b.n	80020de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ac:	4b27      	ldr	r3, [pc, #156]	; (800214c <HAL_RCC_OscConfig+0x280>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a26      	ldr	r2, [pc, #152]	; (800214c <HAL_RCC_OscConfig+0x280>)
 80020b2:	f023 0301 	bic.w	r3, r3, #1
 80020b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7fe fa48 	bl	800054c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c0:	f7fe fa44 	bl	800054c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e199      	b.n	8002406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	4b1e      	ldr	r3, [pc, #120]	; (800214c <HAL_RCC_OscConfig+0x280>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d038      	beq.n	800215c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d019      	beq.n	8002126 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f2:	4b16      	ldr	r3, [pc, #88]	; (800214c <HAL_RCC_OscConfig+0x280>)
 80020f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f6:	4a15      	ldr	r2, [pc, #84]	; (800214c <HAL_RCC_OscConfig+0x280>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fe:	f7fe fa25 	bl	800054c <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002106:	f7fe fa21 	bl	800054c <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e176      	b.n	8002406 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <HAL_RCC_OscConfig+0x280>)
 800211a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x23a>
 8002124:	e01a      	b.n	800215c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_RCC_OscConfig+0x280>)
 8002128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800212a:	4a08      	ldr	r2, [pc, #32]	; (800214c <HAL_RCC_OscConfig+0x280>)
 800212c:	f023 0301 	bic.w	r3, r3, #1
 8002130:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002132:	f7fe fa0b 	bl	800054c <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002138:	e00a      	b.n	8002150 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213a:	f7fe fa07 	bl	800054c <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d903      	bls.n	8002150 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e15c      	b.n	8002406 <HAL_RCC_OscConfig+0x53a>
 800214c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002150:	4b91      	ldr	r3, [pc, #580]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 8002152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1ee      	bne.n	800213a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80a4 	beq.w	80022b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216a:	4b8b      	ldr	r3, [pc, #556]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10d      	bne.n	8002192 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	4b88      	ldr	r3, [pc, #544]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	4a87      	ldr	r2, [pc, #540]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002180:	6413      	str	r3, [r2, #64]	; 0x40
 8002182:	4b85      	ldr	r3, [pc, #532]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218e:	2301      	movs	r3, #1
 8002190:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002192:	4b82      	ldr	r3, [pc, #520]	; (800239c <HAL_RCC_OscConfig+0x4d0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d118      	bne.n	80021d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800219e:	4b7f      	ldr	r3, [pc, #508]	; (800239c <HAL_RCC_OscConfig+0x4d0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a7e      	ldr	r2, [pc, #504]	; (800239c <HAL_RCC_OscConfig+0x4d0>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021aa:	f7fe f9cf 	bl	800054c <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b2:	f7fe f9cb 	bl	800054c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b64      	cmp	r3, #100	; 0x64
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e120      	b.n	8002406 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c4:	4b75      	ldr	r3, [pc, #468]	; (800239c <HAL_RCC_OscConfig+0x4d0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d106      	bne.n	80021e6 <HAL_RCC_OscConfig+0x31a>
 80021d8:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	4a6e      	ldr	r2, [pc, #440]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6713      	str	r3, [r2, #112]	; 0x70
 80021e4:	e02d      	b.n	8002242 <HAL_RCC_OscConfig+0x376>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x33c>
 80021ee:	4b6a      	ldr	r3, [pc, #424]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	4a69      	ldr	r2, [pc, #420]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	6713      	str	r3, [r2, #112]	; 0x70
 80021fa:	4b67      	ldr	r3, [pc, #412]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	4a66      	ldr	r2, [pc, #408]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 8002200:	f023 0304 	bic.w	r3, r3, #4
 8002204:	6713      	str	r3, [r2, #112]	; 0x70
 8002206:	e01c      	b.n	8002242 <HAL_RCC_OscConfig+0x376>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b05      	cmp	r3, #5
 800220e:	d10c      	bne.n	800222a <HAL_RCC_OscConfig+0x35e>
 8002210:	4b61      	ldr	r3, [pc, #388]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 8002212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002214:	4a60      	ldr	r2, [pc, #384]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 8002216:	f043 0304 	orr.w	r3, r3, #4
 800221a:	6713      	str	r3, [r2, #112]	; 0x70
 800221c:	4b5e      	ldr	r3, [pc, #376]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002220:	4a5d      	ldr	r2, [pc, #372]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6713      	str	r3, [r2, #112]	; 0x70
 8002228:	e00b      	b.n	8002242 <HAL_RCC_OscConfig+0x376>
 800222a:	4b5b      	ldr	r3, [pc, #364]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 800222c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222e:	4a5a      	ldr	r2, [pc, #360]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	6713      	str	r3, [r2, #112]	; 0x70
 8002236:	4b58      	ldr	r3, [pc, #352]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	4a57      	ldr	r2, [pc, #348]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 800223c:	f023 0304 	bic.w	r3, r3, #4
 8002240:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d015      	beq.n	8002276 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224a:	f7fe f97f 	bl	800054c <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002250:	e00a      	b.n	8002268 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7fe f97b 	bl	800054c <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e0ce      	b.n	8002406 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002268:	4b4b      	ldr	r3, [pc, #300]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 800226a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ee      	beq.n	8002252 <HAL_RCC_OscConfig+0x386>
 8002274:	e014      	b.n	80022a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002276:	f7fe f969 	bl	800054c <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227c:	e00a      	b.n	8002294 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227e:	f7fe f965 	bl	800054c <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	f241 3288 	movw	r2, #5000	; 0x1388
 800228c:	4293      	cmp	r3, r2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e0b8      	b.n	8002406 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002294:	4b40      	ldr	r3, [pc, #256]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1ee      	bne.n	800227e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d105      	bne.n	80022b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a6:	4b3c      	ldr	r3, [pc, #240]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	4a3b      	ldr	r2, [pc, #236]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 80022ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 80a4 	beq.w	8002404 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022bc:	4b36      	ldr	r3, [pc, #216]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d06b      	beq.n	80023a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d149      	bne.n	8002364 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d0:	4b31      	ldr	r3, [pc, #196]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a30      	ldr	r2, [pc, #192]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 80022d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022dc:	f7fe f936 	bl	800054c <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e4:	f7fe f932 	bl	800054c <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e087      	b.n	8002406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f6:	4b28      	ldr	r3, [pc, #160]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69da      	ldr	r2, [r3, #28]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	019b      	lsls	r3, r3, #6
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	085b      	lsrs	r3, r3, #1
 800231a:	3b01      	subs	r3, #1
 800231c:	041b      	lsls	r3, r3, #16
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	061b      	lsls	r3, r3, #24
 8002326:	4313      	orrs	r3, r2
 8002328:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 800232a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800232e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a18      	ldr	r2, [pc, #96]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 8002336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800233a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7fe f906 	bl	800054c <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002344:	f7fe f902 	bl	800054c <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e057      	b.n	8002406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x478>
 8002362:	e04f      	b.n	8002404 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 800236a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800236e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7fe f8ec 	bl	800054c <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002378:	f7fe f8e8 	bl	800054c <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e03d      	b.n	8002406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	4b03      	ldr	r3, [pc, #12]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x4ac>
 8002396:	e035      	b.n	8002404 <HAL_RCC_OscConfig+0x538>
 8002398:	40023800 	.word	0x40023800
 800239c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023a0:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <HAL_RCC_OscConfig+0x544>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d028      	beq.n	8002400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d121      	bne.n	8002400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d11a      	bne.n	8002400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023d0:	4013      	ands	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023d8:	4293      	cmp	r3, r2
 80023da:	d111      	bne.n	8002400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	085b      	lsrs	r3, r3, #1
 80023e8:	3b01      	subs	r3, #1
 80023ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d107      	bne.n	8002400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800

08002414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0d0      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800242c:	4b6a      	ldr	r3, [pc, #424]	; (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d910      	bls.n	800245c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b67      	ldr	r3, [pc, #412]	; (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 020f 	bic.w	r2, r3, #15
 8002442:	4965      	ldr	r1, [pc, #404]	; (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b63      	ldr	r3, [pc, #396]	; (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0b8      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002474:	4b59      	ldr	r3, [pc, #356]	; (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a58      	ldr	r2, [pc, #352]	; (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 800247a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800247e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800248c:	4b53      	ldr	r3, [pc, #332]	; (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	4a52      	ldr	r2, [pc, #328]	; (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 8002492:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002496:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002498:	4b50      	ldr	r3, [pc, #320]	; (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	494d      	ldr	r1, [pc, #308]	; (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d040      	beq.n	8002538 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b47      	ldr	r3, [pc, #284]	; (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d115      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e07f      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d6:	4b41      	ldr	r3, [pc, #260]	; (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e073      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e6:	4b3d      	ldr	r3, [pc, #244]	; (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e06b      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f6:	4b39      	ldr	r3, [pc, #228]	; (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f023 0203 	bic.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4936      	ldr	r1, [pc, #216]	; (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 8002504:	4313      	orrs	r3, r2
 8002506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002508:	f7fe f820 	bl	800054c <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	e00a      	b.n	8002526 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7fe f81c 	bl	800054c <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	; 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e053      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002526:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 020c 	and.w	r2, r3, #12
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	429a      	cmp	r2, r3
 8002536:	d1eb      	bne.n	8002510 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002538:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d210      	bcs.n	8002568 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 020f 	bic.w	r2, r3, #15
 800254e:	4922      	ldr	r1, [pc, #136]	; (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e032      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002574:	4b19      	ldr	r3, [pc, #100]	; (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4916      	ldr	r1, [pc, #88]	; (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 8002582:	4313      	orrs	r3, r2
 8002584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	490e      	ldr	r1, [pc, #56]	; (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025a6:	f000 f821 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80025aa:	4602      	mov	r2, r0
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_ClockConfig+0x1c8>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	490a      	ldr	r1, [pc, #40]	; (80025e0 <HAL_RCC_ClockConfig+0x1cc>)
 80025b8:	5ccb      	ldrb	r3, [r1, r3]
 80025ba:	fa22 f303 	lsr.w	r3, r2, r3
 80025be:	4a09      	ldr	r2, [pc, #36]	; (80025e4 <HAL_RCC_ClockConfig+0x1d0>)
 80025c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_RCC_ClockConfig+0x1d4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f007 fd86 	bl	800a0d8 <HAL_InitTick>

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023c00 	.word	0x40023c00
 80025dc:	40023800 	.word	0x40023800
 80025e0:	0800b2f8 	.word	0x0800b2f8
 80025e4:	2000011c 	.word	0x2000011c
 80025e8:	20000000 	.word	0x20000000

080025ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	607b      	str	r3, [r7, #4]
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	2300      	movs	r3, #0
 80025fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002604:	4b67      	ldr	r3, [pc, #412]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b08      	cmp	r3, #8
 800260e:	d00d      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x40>
 8002610:	2b08      	cmp	r3, #8
 8002612:	f200 80bd 	bhi.w	8002790 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x34>
 800261a:	2b04      	cmp	r3, #4
 800261c:	d003      	beq.n	8002626 <HAL_RCC_GetSysClockFreq+0x3a>
 800261e:	e0b7      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002620:	4b61      	ldr	r3, [pc, #388]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002622:	60bb      	str	r3, [r7, #8]
      break;
 8002624:	e0b7      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002626:	4b61      	ldr	r3, [pc, #388]	; (80027ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002628:	60bb      	str	r3, [r7, #8]
      break;
 800262a:	e0b4      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800262c:	4b5d      	ldr	r3, [pc, #372]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002634:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002636:	4b5b      	ldr	r3, [pc, #364]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d04d      	beq.n	80026de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002642:	4b58      	ldr	r3, [pc, #352]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	099b      	lsrs	r3, r3, #6
 8002648:	461a      	mov	r2, r3
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002652:	f04f 0100 	mov.w	r1, #0
 8002656:	ea02 0800 	and.w	r8, r2, r0
 800265a:	ea03 0901 	and.w	r9, r3, r1
 800265e:	4640      	mov	r0, r8
 8002660:	4649      	mov	r1, r9
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	014b      	lsls	r3, r1, #5
 800266c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002670:	0142      	lsls	r2, r0, #5
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	ebb0 0008 	subs.w	r0, r0, r8
 800267a:	eb61 0109 	sbc.w	r1, r1, r9
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	018b      	lsls	r3, r1, #6
 8002688:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800268c:	0182      	lsls	r2, r0, #6
 800268e:	1a12      	subs	r2, r2, r0
 8002690:	eb63 0301 	sbc.w	r3, r3, r1
 8002694:	f04f 0000 	mov.w	r0, #0
 8002698:	f04f 0100 	mov.w	r1, #0
 800269c:	00d9      	lsls	r1, r3, #3
 800269e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026a2:	00d0      	lsls	r0, r2, #3
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	eb12 0208 	adds.w	r2, r2, r8
 80026ac:	eb43 0309 	adc.w	r3, r3, r9
 80026b0:	f04f 0000 	mov.w	r0, #0
 80026b4:	f04f 0100 	mov.w	r1, #0
 80026b8:	0259      	lsls	r1, r3, #9
 80026ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80026be:	0250      	lsls	r0, r2, #9
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	461a      	mov	r2, r3
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	f7fd fd9e 	bl	8000210 <__aeabi_uldivmod>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4613      	mov	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	e04a      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026de:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	099b      	lsrs	r3, r3, #6
 80026e4:	461a      	mov	r2, r3
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026ee:	f04f 0100 	mov.w	r1, #0
 80026f2:	ea02 0400 	and.w	r4, r2, r0
 80026f6:	ea03 0501 	and.w	r5, r3, r1
 80026fa:	4620      	mov	r0, r4
 80026fc:	4629      	mov	r1, r5
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	014b      	lsls	r3, r1, #5
 8002708:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800270c:	0142      	lsls	r2, r0, #5
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	1b00      	subs	r0, r0, r4
 8002714:	eb61 0105 	sbc.w	r1, r1, r5
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	018b      	lsls	r3, r1, #6
 8002722:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002726:	0182      	lsls	r2, r0, #6
 8002728:	1a12      	subs	r2, r2, r0
 800272a:	eb63 0301 	sbc.w	r3, r3, r1
 800272e:	f04f 0000 	mov.w	r0, #0
 8002732:	f04f 0100 	mov.w	r1, #0
 8002736:	00d9      	lsls	r1, r3, #3
 8002738:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800273c:	00d0      	lsls	r0, r2, #3
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	1912      	adds	r2, r2, r4
 8002744:	eb45 0303 	adc.w	r3, r5, r3
 8002748:	f04f 0000 	mov.w	r0, #0
 800274c:	f04f 0100 	mov.w	r1, #0
 8002750:	0299      	lsls	r1, r3, #10
 8002752:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002756:	0290      	lsls	r0, r2, #10
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	461a      	mov	r2, r3
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	f7fd fd52 	bl	8000210 <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4613      	mov	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	0c1b      	lsrs	r3, r3, #16
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	3301      	adds	r3, #1
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	fbb2 f3f3 	udiv	r3, r2, r3
 800278c:	60bb      	str	r3, [r7, #8]
      break;
 800278e:	e002      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002792:	60bb      	str	r3, [r7, #8]
      break;
 8002794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002796:	68bb      	ldr	r3, [r7, #8]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800
 80027a8:	00f42400 	.word	0x00f42400
 80027ac:	007a1200 	.word	0x007a1200

080027b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b4:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027b6:	681b      	ldr	r3, [r3, #0]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	2000011c 	.word	0x2000011c

080027c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027cc:	f7ff fff0 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	0a9b      	lsrs	r3, r3, #10
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4903      	ldr	r1, [pc, #12]	; (80027ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40023800 	.word	0x40023800
 80027ec:	0800b308 	.word	0x0800b308

080027f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027f4:	f7ff ffdc 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 80027f8:	4602      	mov	r2, r0
 80027fa:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	0b5b      	lsrs	r3, r3, #13
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	4903      	ldr	r1, [pc, #12]	; (8002814 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002806:	5ccb      	ldrb	r3, [r1, r3]
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800280c:	4618      	mov	r0, r3
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40023800 	.word	0x40023800
 8002814:	0800b308 	.word	0x0800b308

08002818 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	220f      	movs	r2, #15
 8002826:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002828:	4b12      	ldr	r3, [pc, #72]	; (8002874 <HAL_RCC_GetClockConfig+0x5c>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0203 	and.w	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002834:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <HAL_RCC_GetClockConfig+0x5c>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <HAL_RCC_GetClockConfig+0x5c>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_RCC_GetClockConfig+0x5c>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	08db      	lsrs	r3, r3, #3
 8002852:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800285a:	4b07      	ldr	r3, [pc, #28]	; (8002878 <HAL_RCC_GetClockConfig+0x60>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 020f 	and.w	r2, r3, #15
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	601a      	str	r2, [r3, #0]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	40023c00 	.word	0x40023c00

0800287c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d012      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028a4:	4b69      	ldr	r3, [pc, #420]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	4a68      	ldr	r2, [pc, #416]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028ae:	6093      	str	r3, [r2, #8]
 80028b0:	4b66      	ldr	r3, [pc, #408]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b8:	4964      	ldr	r1, [pc, #400]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028c6:	2301      	movs	r3, #1
 80028c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d017      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028d6:	4b5d      	ldr	r3, [pc, #372]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e4:	4959      	ldr	r1, [pc, #356]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f4:	d101      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028f6:	2301      	movs	r3, #1
 80028f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002902:	2301      	movs	r3, #1
 8002904:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d017      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002912:	4b4e      	ldr	r3, [pc, #312]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002918:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	494a      	ldr	r1, [pc, #296]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002930:	d101      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002932:	2301      	movs	r3, #1
 8002934:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800293e:	2301      	movs	r3, #1
 8002940:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800294e:	2301      	movs	r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 808b 	beq.w	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002960:	4b3a      	ldr	r3, [pc, #232]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	4a39      	ldr	r2, [pc, #228]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296a:	6413      	str	r3, [r2, #64]	; 0x40
 800296c:	4b37      	ldr	r3, [pc, #220]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002978:	4b35      	ldr	r3, [pc, #212]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a34      	ldr	r2, [pc, #208]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800297e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002982:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002984:	f7fd fde2 	bl	800054c <HAL_GetTick>
 8002988:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298c:	f7fd fdde 	bl	800054c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	; 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e357      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800299e:	4b2c      	ldr	r3, [pc, #176]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029aa:	4b28      	ldr	r3, [pc, #160]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d035      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d02e      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029c8:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029d2:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	4a1d      	ldr	r2, [pc, #116]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029de:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e2:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029ea:	4a18      	ldr	r2, [pc, #96]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029f0:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d114      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fd fda6 	bl	800054c <HAL_GetTick>
 8002a00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a02:	e00a      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a04:	f7fd fda2 	bl	800054c <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e319      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0ee      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a32:	d111      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a40:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a42:	400b      	ands	r3, r1
 8002a44:	4901      	ldr	r1, [pc, #4]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
 8002a4a:	e00b      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40007000 	.word	0x40007000
 8002a54:	0ffffcff 	.word	0x0ffffcff
 8002a58:	4bb1      	ldr	r3, [pc, #708]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	4ab0      	ldr	r2, [pc, #704]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a62:	6093      	str	r3, [r2, #8]
 8002a64:	4bae      	ldr	r3, [pc, #696]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a70:	49ab      	ldr	r1, [pc, #684]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d010      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a82:	4ba7      	ldr	r3, [pc, #668]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a88:	4aa5      	ldr	r2, [pc, #660]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a92:	4ba3      	ldr	r3, [pc, #652]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9c:	49a0      	ldr	r1, [pc, #640]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ab0:	4b9b      	ldr	r3, [pc, #620]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002abe:	4998      	ldr	r1, [pc, #608]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ad2:	4b93      	ldr	r3, [pc, #588]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ae0:	498f      	ldr	r1, [pc, #572]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002af4:	4b8a      	ldr	r3, [pc, #552]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b02:	4987      	ldr	r1, [pc, #540]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b16:	4b82      	ldr	r3, [pc, #520]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	497e      	ldr	r1, [pc, #504]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b38:	4b79      	ldr	r3, [pc, #484]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	f023 0203 	bic.w	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	4976      	ldr	r1, [pc, #472]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b5a:	4b71      	ldr	r3, [pc, #452]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b60:	f023 020c 	bic.w	r2, r3, #12
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b68:	496d      	ldr	r1, [pc, #436]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b7c:	4b68      	ldr	r3, [pc, #416]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8a:	4965      	ldr	r1, [pc, #404]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b9e:	4b60      	ldr	r3, [pc, #384]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bac:	495c      	ldr	r1, [pc, #368]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bc0:	4b57      	ldr	r3, [pc, #348]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bce:	4954      	ldr	r1, [pc, #336]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002be2:	4b4f      	ldr	r3, [pc, #316]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	494b      	ldr	r1, [pc, #300]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c04:	4b46      	ldr	r3, [pc, #280]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	4943      	ldr	r1, [pc, #268]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c26:	4b3e      	ldr	r3, [pc, #248]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c34:	493a      	ldr	r1, [pc, #232]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c48:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c56:	4932      	ldr	r1, [pc, #200]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d011      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c6a:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c78:	4929      	ldr	r1, [pc, #164]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c88:	d101      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002caa:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb8:	4919      	ldr	r1, [pc, #100]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00b      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ccc:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cdc:	4910      	ldr	r1, [pc, #64]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d006      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 80d9 	beq.w	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d04:	f7fd fc22 	bl	800054c <HAL_GetTick>
 8002d08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d0a:	e00b      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d0c:	f7fd fc1e 	bl	800054c <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d904      	bls.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e197      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d24:	4b6c      	ldr	r3, [pc, #432]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ed      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d021      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d11d      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d44:	4b64      	ldr	r3, [pc, #400]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d4a:	0c1b      	lsrs	r3, r3, #16
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d52:	4b61      	ldr	r3, [pc, #388]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d58:	0e1b      	lsrs	r3, r3, #24
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	019a      	lsls	r2, r3, #6
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	061b      	lsls	r3, r3, #24
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	071b      	lsls	r3, r3, #28
 8002d78:	4957      	ldr	r1, [pc, #348]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d004      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d94:	d00a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d02e      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002daa:	d129      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dac:	4b4a      	ldr	r3, [pc, #296]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db2:	0c1b      	lsrs	r3, r3, #16
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dba:	4b47      	ldr	r3, [pc, #284]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc0:	0f1b      	lsrs	r3, r3, #28
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	019a      	lsls	r2, r3, #6
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	041b      	lsls	r3, r3, #16
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	061b      	lsls	r3, r3, #24
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	071b      	lsls	r3, r3, #28
 8002de0:	493d      	ldr	r1, [pc, #244]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002de8:	4b3b      	ldr	r3, [pc, #236]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dee:	f023 021f 	bic.w	r2, r3, #31
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	3b01      	subs	r3, #1
 8002df8:	4937      	ldr	r1, [pc, #220]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01d      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e0c:	4b32      	ldr	r3, [pc, #200]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e12:	0e1b      	lsrs	r3, r3, #24
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e1a:	4b2f      	ldr	r3, [pc, #188]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e20:	0f1b      	lsrs	r3, r3, #28
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	019a      	lsls	r2, r3, #6
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	041b      	lsls	r3, r3, #16
 8002e34:	431a      	orrs	r2, r3
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	061b      	lsls	r3, r3, #24
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	071b      	lsls	r3, r3, #28
 8002e40:	4925      	ldr	r1, [pc, #148]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d011      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	019a      	lsls	r2, r3, #6
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	041b      	lsls	r3, r3, #16
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	061b      	lsls	r3, r3, #24
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	071b      	lsls	r3, r3, #28
 8002e70:	4919      	ldr	r1, [pc, #100]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e78:	4b17      	ldr	r3, [pc, #92]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a16      	ldr	r2, [pc, #88]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e84:	f7fd fb62 	bl	800054c <HAL_GetTick>
 8002e88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e8c:	f7fd fb5e 	bl	800054c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	; 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e0d7      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	f040 80cd 	bne.w	800304c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a08      	ldr	r2, [pc, #32]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ebe:	f7fd fb45 	bl	800054c <HAL_GetTick>
 8002ec2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ec6:	f7fd fb41 	bl	800054c <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b64      	cmp	r3, #100	; 0x64
 8002ed2:	d903      	bls.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e0ba      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ed8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002edc:	4b5e      	ldr	r3, [pc, #376]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ee8:	d0ed      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d02e      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d12a      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f12:	4b51      	ldr	r3, [pc, #324]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f18:	0c1b      	lsrs	r3, r3, #16
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f20:	4b4d      	ldr	r3, [pc, #308]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	0f1b      	lsrs	r3, r3, #28
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	019a      	lsls	r2, r3, #6
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	041b      	lsls	r3, r3, #16
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	061b      	lsls	r3, r3, #24
 8002f40:	431a      	orrs	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	071b      	lsls	r3, r3, #28
 8002f46:	4944      	ldr	r1, [pc, #272]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f4e:	4b42      	ldr	r3, [pc, #264]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	021b      	lsls	r3, r3, #8
 8002f60:	493d      	ldr	r1, [pc, #244]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d022      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f7c:	d11d      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f7e:	4b36      	ldr	r3, [pc, #216]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f84:	0e1b      	lsrs	r3, r3, #24
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f8c:	4b32      	ldr	r3, [pc, #200]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f92:	0f1b      	lsrs	r3, r3, #28
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	019a      	lsls	r2, r3, #6
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	061b      	lsls	r3, r3, #24
 8002fac:	431a      	orrs	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	071b      	lsls	r3, r3, #28
 8002fb2:	4929      	ldr	r1, [pc, #164]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d028      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fc6:	4b24      	ldr	r3, [pc, #144]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fcc:	0e1b      	lsrs	r3, r3, #24
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fd4:	4b20      	ldr	r3, [pc, #128]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	0c1b      	lsrs	r3, r3, #16
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	019a      	lsls	r2, r3, #6
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	041b      	lsls	r3, r3, #16
 8002fec:	431a      	orrs	r2, r3
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	061b      	lsls	r3, r3, #24
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	071b      	lsls	r3, r3, #28
 8002ffa:	4917      	ldr	r1, [pc, #92]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003002:	4b15      	ldr	r3, [pc, #84]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003008:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	4911      	ldr	r1, [pc, #68]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a0e      	ldr	r2, [pc, #56]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800301e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003022:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003024:	f7fd fa92 	bl	800054c <HAL_GetTick>
 8003028:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800302a:	e008      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800302c:	f7fd fa8e 	bl	800054c <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	; 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e007      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800304a:	d1ef      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3720      	adds	r7, #32
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800

0800305c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e09d      	b.n	80031aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	2b00      	cmp	r3, #0
 8003074:	d108      	bne.n	8003088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800307e:	d009      	beq.n	8003094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	61da      	str	r2, [r3, #28]
 8003086:	e005      	b.n	8003094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f006 ff6c 	bl	8009f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030d4:	d902      	bls.n	80030dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	e002      	b.n	80030e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030ea:	d007      	beq.n	80030fc <HAL_SPI_Init+0xa0>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030f4:	d002      	beq.n	80030fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313e:	ea42 0103 	orr.w	r1, r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003146:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	0c1b      	lsrs	r3, r3, #16
 8003158:	f003 0204 	and.w	r2, r3, #4
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003178:	ea42 0103 	orr.w	r1, r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69da      	ldr	r2, [r3, #28]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003198:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e049      	b.n	8003258 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d106      	bne.n	80031de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f841 	bl	8003260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2202      	movs	r2, #2
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3304      	adds	r3, #4
 80031ee:	4619      	mov	r1, r3
 80031f0:	4610      	mov	r0, r2
 80031f2:	f000 f9ff 	bl	80035f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d001      	beq.n	800328c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e054      	b.n	8003336 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a26      	ldr	r2, [pc, #152]	; (8003344 <HAL_TIM_Base_Start_IT+0xd0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d022      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x80>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b6:	d01d      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x80>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a22      	ldr	r2, [pc, #136]	; (8003348 <HAL_TIM_Base_Start_IT+0xd4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d018      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x80>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a21      	ldr	r2, [pc, #132]	; (800334c <HAL_TIM_Base_Start_IT+0xd8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d013      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x80>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1f      	ldr	r2, [pc, #124]	; (8003350 <HAL_TIM_Base_Start_IT+0xdc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00e      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x80>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1e      	ldr	r2, [pc, #120]	; (8003354 <HAL_TIM_Base_Start_IT+0xe0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d009      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x80>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1c      	ldr	r2, [pc, #112]	; (8003358 <HAL_TIM_Base_Start_IT+0xe4>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d004      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x80>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1b      	ldr	r2, [pc, #108]	; (800335c <HAL_TIM_Base_Start_IT+0xe8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d115      	bne.n	8003320 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	4b19      	ldr	r3, [pc, #100]	; (8003360 <HAL_TIM_Base_Start_IT+0xec>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b06      	cmp	r3, #6
 8003304:	d015      	beq.n	8003332 <HAL_TIM_Base_Start_IT+0xbe>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330c:	d011      	beq.n	8003332 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0201 	orr.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800331e:	e008      	b.n	8003332 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	e000      	b.n	8003334 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003332:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40010000 	.word	0x40010000
 8003348:	40000400 	.word	0x40000400
 800334c:	40000800 	.word	0x40000800
 8003350:	40000c00 	.word	0x40000c00
 8003354:	40010400 	.word	0x40010400
 8003358:	40014000 	.word	0x40014000
 800335c:	40001800 	.word	0x40001800
 8003360:	00010007 	.word	0x00010007

08003364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b02      	cmp	r3, #2
 8003378:	d122      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b02      	cmp	r3, #2
 8003386:	d11b      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0202 	mvn.w	r2, #2
 8003390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f905 	bl	80035b6 <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f8f7 	bl	80035a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f908 	bl	80035ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d122      	bne.n	8003414 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d11b      	bne.n	8003414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0204 	mvn.w	r2, #4
 80033e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f8db 	bl	80035b6 <HAL_TIM_IC_CaptureCallback>
 8003400:	e005      	b.n	800340e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f8cd 	bl	80035a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f8de 	bl	80035ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b08      	cmp	r3, #8
 8003420:	d122      	bne.n	8003468 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b08      	cmp	r3, #8
 800342e:	d11b      	bne.n	8003468 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0208 	mvn.w	r2, #8
 8003438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2204      	movs	r2, #4
 800343e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f8b1 	bl	80035b6 <HAL_TIM_IC_CaptureCallback>
 8003454:	e005      	b.n	8003462 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8a3 	bl	80035a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f8b4 	bl	80035ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b10      	cmp	r3, #16
 8003474:	d122      	bne.n	80034bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b10      	cmp	r3, #16
 8003482:	d11b      	bne.n	80034bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0210 	mvn.w	r2, #16
 800348c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2208      	movs	r2, #8
 8003492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f887 	bl	80035b6 <HAL_TIM_IC_CaptureCallback>
 80034a8:	e005      	b.n	80034b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f879 	bl	80035a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f88a 	bl	80035ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d10e      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d107      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0201 	mvn.w	r2, #1
 80034e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f006 fd12 	bl	8009f0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f2:	2b80      	cmp	r3, #128	; 0x80
 80034f4:	d10e      	bne.n	8003514 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003500:	2b80      	cmp	r3, #128	; 0x80
 8003502:	d107      	bne.n	8003514 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800350c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f91a 	bl	8003748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003522:	d10e      	bne.n	8003542 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352e:	2b80      	cmp	r3, #128	; 0x80
 8003530:	d107      	bne.n	8003542 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800353a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f90d 	bl	800375c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	d10e      	bne.n	800356e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355a:	2b40      	cmp	r3, #64	; 0x40
 800355c:	d107      	bne.n	800356e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f838 	bl	80035de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	2b20      	cmp	r3, #32
 800357a:	d10e      	bne.n	800359a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b20      	cmp	r3, #32
 8003588:	d107      	bne.n	800359a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f06f 0220 	mvn.w	r2, #32
 8003592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f8cd 	bl	8003734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a40      	ldr	r2, [pc, #256]	; (8003708 <TIM_Base_SetConfig+0x114>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d013      	beq.n	8003634 <TIM_Base_SetConfig+0x40>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003612:	d00f      	beq.n	8003634 <TIM_Base_SetConfig+0x40>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a3d      	ldr	r2, [pc, #244]	; (800370c <TIM_Base_SetConfig+0x118>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00b      	beq.n	8003634 <TIM_Base_SetConfig+0x40>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a3c      	ldr	r2, [pc, #240]	; (8003710 <TIM_Base_SetConfig+0x11c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d007      	beq.n	8003634 <TIM_Base_SetConfig+0x40>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a3b      	ldr	r2, [pc, #236]	; (8003714 <TIM_Base_SetConfig+0x120>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d003      	beq.n	8003634 <TIM_Base_SetConfig+0x40>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a3a      	ldr	r2, [pc, #232]	; (8003718 <TIM_Base_SetConfig+0x124>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d108      	bne.n	8003646 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a2f      	ldr	r2, [pc, #188]	; (8003708 <TIM_Base_SetConfig+0x114>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d02b      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003654:	d027      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a2c      	ldr	r2, [pc, #176]	; (800370c <TIM_Base_SetConfig+0x118>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d023      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a2b      	ldr	r2, [pc, #172]	; (8003710 <TIM_Base_SetConfig+0x11c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01f      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a2a      	ldr	r2, [pc, #168]	; (8003714 <TIM_Base_SetConfig+0x120>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01b      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a29      	ldr	r2, [pc, #164]	; (8003718 <TIM_Base_SetConfig+0x124>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d017      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a28      	ldr	r2, [pc, #160]	; (800371c <TIM_Base_SetConfig+0x128>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a27      	ldr	r2, [pc, #156]	; (8003720 <TIM_Base_SetConfig+0x12c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00f      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a26      	ldr	r2, [pc, #152]	; (8003724 <TIM_Base_SetConfig+0x130>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00b      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a25      	ldr	r2, [pc, #148]	; (8003728 <TIM_Base_SetConfig+0x134>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d007      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a24      	ldr	r2, [pc, #144]	; (800372c <TIM_Base_SetConfig+0x138>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d003      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a23      	ldr	r2, [pc, #140]	; (8003730 <TIM_Base_SetConfig+0x13c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d108      	bne.n	80036b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <TIM_Base_SetConfig+0x114>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d003      	beq.n	80036ec <TIM_Base_SetConfig+0xf8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a0c      	ldr	r2, [pc, #48]	; (8003718 <TIM_Base_SetConfig+0x124>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d103      	bne.n	80036f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	615a      	str	r2, [r3, #20]
}
 80036fa:	bf00      	nop
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40010000 	.word	0x40010000
 800370c:	40000400 	.word	0x40000400
 8003710:	40000800 	.word	0x40000800
 8003714:	40000c00 	.word	0x40000c00
 8003718:	40010400 	.word	0x40010400
 800371c:	40014000 	.word	0x40014000
 8003720:	40014400 	.word	0x40014400
 8003724:	40014800 	.word	0x40014800
 8003728:	40001800 	.word	0x40001800
 800372c:	40001c00 	.word	0x40001c00
 8003730:	40002000 	.word	0x40002000

08003734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e040      	b.n	8003804 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f006 fc5c 	bl	800a050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2224      	movs	r2, #36	; 0x24
 800379c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f82c 	bl	800380c <UART_SetConfig>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e022      	b.n	8003804 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fa82 	bl	8003cd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fb09 	bl	8003e14 <UART_CheckIdleState>
 8003802:	4603      	mov	r3, r0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4ba7      	ldr	r3, [pc, #668]	; (8003ad4 <UART_SetConfig+0x2c8>)
 8003838:	4013      	ands	r3, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	6979      	ldr	r1, [r7, #20]
 8003840:	430b      	orrs	r3, r1
 8003842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	430a      	orrs	r2, r1
 800387c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a95      	ldr	r2, [pc, #596]	; (8003ad8 <UART_SetConfig+0x2cc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d120      	bne.n	80038ca <UART_SetConfig+0xbe>
 8003888:	4b94      	ldr	r3, [pc, #592]	; (8003adc <UART_SetConfig+0x2d0>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b03      	cmp	r3, #3
 8003894:	d816      	bhi.n	80038c4 <UART_SetConfig+0xb8>
 8003896:	a201      	add	r2, pc, #4	; (adr r2, 800389c <UART_SetConfig+0x90>)
 8003898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389c:	080038ad 	.word	0x080038ad
 80038a0:	080038b9 	.word	0x080038b9
 80038a4:	080038b3 	.word	0x080038b3
 80038a8:	080038bf 	.word	0x080038bf
 80038ac:	2301      	movs	r3, #1
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e14f      	b.n	8003b52 <UART_SetConfig+0x346>
 80038b2:	2302      	movs	r3, #2
 80038b4:	77fb      	strb	r3, [r7, #31]
 80038b6:	e14c      	b.n	8003b52 <UART_SetConfig+0x346>
 80038b8:	2304      	movs	r3, #4
 80038ba:	77fb      	strb	r3, [r7, #31]
 80038bc:	e149      	b.n	8003b52 <UART_SetConfig+0x346>
 80038be:	2308      	movs	r3, #8
 80038c0:	77fb      	strb	r3, [r7, #31]
 80038c2:	e146      	b.n	8003b52 <UART_SetConfig+0x346>
 80038c4:	2310      	movs	r3, #16
 80038c6:	77fb      	strb	r3, [r7, #31]
 80038c8:	e143      	b.n	8003b52 <UART_SetConfig+0x346>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a84      	ldr	r2, [pc, #528]	; (8003ae0 <UART_SetConfig+0x2d4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d132      	bne.n	800393a <UART_SetConfig+0x12e>
 80038d4:	4b81      	ldr	r3, [pc, #516]	; (8003adc <UART_SetConfig+0x2d0>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038da:	f003 030c 	and.w	r3, r3, #12
 80038de:	2b0c      	cmp	r3, #12
 80038e0:	d828      	bhi.n	8003934 <UART_SetConfig+0x128>
 80038e2:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <UART_SetConfig+0xdc>)
 80038e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e8:	0800391d 	.word	0x0800391d
 80038ec:	08003935 	.word	0x08003935
 80038f0:	08003935 	.word	0x08003935
 80038f4:	08003935 	.word	0x08003935
 80038f8:	08003929 	.word	0x08003929
 80038fc:	08003935 	.word	0x08003935
 8003900:	08003935 	.word	0x08003935
 8003904:	08003935 	.word	0x08003935
 8003908:	08003923 	.word	0x08003923
 800390c:	08003935 	.word	0x08003935
 8003910:	08003935 	.word	0x08003935
 8003914:	08003935 	.word	0x08003935
 8003918:	0800392f 	.word	0x0800392f
 800391c:	2300      	movs	r3, #0
 800391e:	77fb      	strb	r3, [r7, #31]
 8003920:	e117      	b.n	8003b52 <UART_SetConfig+0x346>
 8003922:	2302      	movs	r3, #2
 8003924:	77fb      	strb	r3, [r7, #31]
 8003926:	e114      	b.n	8003b52 <UART_SetConfig+0x346>
 8003928:	2304      	movs	r3, #4
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	e111      	b.n	8003b52 <UART_SetConfig+0x346>
 800392e:	2308      	movs	r3, #8
 8003930:	77fb      	strb	r3, [r7, #31]
 8003932:	e10e      	b.n	8003b52 <UART_SetConfig+0x346>
 8003934:	2310      	movs	r3, #16
 8003936:	77fb      	strb	r3, [r7, #31]
 8003938:	e10b      	b.n	8003b52 <UART_SetConfig+0x346>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a69      	ldr	r2, [pc, #420]	; (8003ae4 <UART_SetConfig+0x2d8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d120      	bne.n	8003986 <UART_SetConfig+0x17a>
 8003944:	4b65      	ldr	r3, [pc, #404]	; (8003adc <UART_SetConfig+0x2d0>)
 8003946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800394e:	2b30      	cmp	r3, #48	; 0x30
 8003950:	d013      	beq.n	800397a <UART_SetConfig+0x16e>
 8003952:	2b30      	cmp	r3, #48	; 0x30
 8003954:	d814      	bhi.n	8003980 <UART_SetConfig+0x174>
 8003956:	2b20      	cmp	r3, #32
 8003958:	d009      	beq.n	800396e <UART_SetConfig+0x162>
 800395a:	2b20      	cmp	r3, #32
 800395c:	d810      	bhi.n	8003980 <UART_SetConfig+0x174>
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <UART_SetConfig+0x15c>
 8003962:	2b10      	cmp	r3, #16
 8003964:	d006      	beq.n	8003974 <UART_SetConfig+0x168>
 8003966:	e00b      	b.n	8003980 <UART_SetConfig+0x174>
 8003968:	2300      	movs	r3, #0
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	e0f1      	b.n	8003b52 <UART_SetConfig+0x346>
 800396e:	2302      	movs	r3, #2
 8003970:	77fb      	strb	r3, [r7, #31]
 8003972:	e0ee      	b.n	8003b52 <UART_SetConfig+0x346>
 8003974:	2304      	movs	r3, #4
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e0eb      	b.n	8003b52 <UART_SetConfig+0x346>
 800397a:	2308      	movs	r3, #8
 800397c:	77fb      	strb	r3, [r7, #31]
 800397e:	e0e8      	b.n	8003b52 <UART_SetConfig+0x346>
 8003980:	2310      	movs	r3, #16
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e0e5      	b.n	8003b52 <UART_SetConfig+0x346>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a57      	ldr	r2, [pc, #348]	; (8003ae8 <UART_SetConfig+0x2dc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d120      	bne.n	80039d2 <UART_SetConfig+0x1c6>
 8003990:	4b52      	ldr	r3, [pc, #328]	; (8003adc <UART_SetConfig+0x2d0>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003996:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800399a:	2bc0      	cmp	r3, #192	; 0xc0
 800399c:	d013      	beq.n	80039c6 <UART_SetConfig+0x1ba>
 800399e:	2bc0      	cmp	r3, #192	; 0xc0
 80039a0:	d814      	bhi.n	80039cc <UART_SetConfig+0x1c0>
 80039a2:	2b80      	cmp	r3, #128	; 0x80
 80039a4:	d009      	beq.n	80039ba <UART_SetConfig+0x1ae>
 80039a6:	2b80      	cmp	r3, #128	; 0x80
 80039a8:	d810      	bhi.n	80039cc <UART_SetConfig+0x1c0>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <UART_SetConfig+0x1a8>
 80039ae:	2b40      	cmp	r3, #64	; 0x40
 80039b0:	d006      	beq.n	80039c0 <UART_SetConfig+0x1b4>
 80039b2:	e00b      	b.n	80039cc <UART_SetConfig+0x1c0>
 80039b4:	2300      	movs	r3, #0
 80039b6:	77fb      	strb	r3, [r7, #31]
 80039b8:	e0cb      	b.n	8003b52 <UART_SetConfig+0x346>
 80039ba:	2302      	movs	r3, #2
 80039bc:	77fb      	strb	r3, [r7, #31]
 80039be:	e0c8      	b.n	8003b52 <UART_SetConfig+0x346>
 80039c0:	2304      	movs	r3, #4
 80039c2:	77fb      	strb	r3, [r7, #31]
 80039c4:	e0c5      	b.n	8003b52 <UART_SetConfig+0x346>
 80039c6:	2308      	movs	r3, #8
 80039c8:	77fb      	strb	r3, [r7, #31]
 80039ca:	e0c2      	b.n	8003b52 <UART_SetConfig+0x346>
 80039cc:	2310      	movs	r3, #16
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e0bf      	b.n	8003b52 <UART_SetConfig+0x346>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a45      	ldr	r2, [pc, #276]	; (8003aec <UART_SetConfig+0x2e0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d125      	bne.n	8003a28 <UART_SetConfig+0x21c>
 80039dc:	4b3f      	ldr	r3, [pc, #252]	; (8003adc <UART_SetConfig+0x2d0>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ea:	d017      	beq.n	8003a1c <UART_SetConfig+0x210>
 80039ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039f0:	d817      	bhi.n	8003a22 <UART_SetConfig+0x216>
 80039f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039f6:	d00b      	beq.n	8003a10 <UART_SetConfig+0x204>
 80039f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039fc:	d811      	bhi.n	8003a22 <UART_SetConfig+0x216>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <UART_SetConfig+0x1fe>
 8003a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a06:	d006      	beq.n	8003a16 <UART_SetConfig+0x20a>
 8003a08:	e00b      	b.n	8003a22 <UART_SetConfig+0x216>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	77fb      	strb	r3, [r7, #31]
 8003a0e:	e0a0      	b.n	8003b52 <UART_SetConfig+0x346>
 8003a10:	2302      	movs	r3, #2
 8003a12:	77fb      	strb	r3, [r7, #31]
 8003a14:	e09d      	b.n	8003b52 <UART_SetConfig+0x346>
 8003a16:	2304      	movs	r3, #4
 8003a18:	77fb      	strb	r3, [r7, #31]
 8003a1a:	e09a      	b.n	8003b52 <UART_SetConfig+0x346>
 8003a1c:	2308      	movs	r3, #8
 8003a1e:	77fb      	strb	r3, [r7, #31]
 8003a20:	e097      	b.n	8003b52 <UART_SetConfig+0x346>
 8003a22:	2310      	movs	r3, #16
 8003a24:	77fb      	strb	r3, [r7, #31]
 8003a26:	e094      	b.n	8003b52 <UART_SetConfig+0x346>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a30      	ldr	r2, [pc, #192]	; (8003af0 <UART_SetConfig+0x2e4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d125      	bne.n	8003a7e <UART_SetConfig+0x272>
 8003a32:	4b2a      	ldr	r3, [pc, #168]	; (8003adc <UART_SetConfig+0x2d0>)
 8003a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a40:	d017      	beq.n	8003a72 <UART_SetConfig+0x266>
 8003a42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a46:	d817      	bhi.n	8003a78 <UART_SetConfig+0x26c>
 8003a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a4c:	d00b      	beq.n	8003a66 <UART_SetConfig+0x25a>
 8003a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a52:	d811      	bhi.n	8003a78 <UART_SetConfig+0x26c>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <UART_SetConfig+0x254>
 8003a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5c:	d006      	beq.n	8003a6c <UART_SetConfig+0x260>
 8003a5e:	e00b      	b.n	8003a78 <UART_SetConfig+0x26c>
 8003a60:	2301      	movs	r3, #1
 8003a62:	77fb      	strb	r3, [r7, #31]
 8003a64:	e075      	b.n	8003b52 <UART_SetConfig+0x346>
 8003a66:	2302      	movs	r3, #2
 8003a68:	77fb      	strb	r3, [r7, #31]
 8003a6a:	e072      	b.n	8003b52 <UART_SetConfig+0x346>
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e06f      	b.n	8003b52 <UART_SetConfig+0x346>
 8003a72:	2308      	movs	r3, #8
 8003a74:	77fb      	strb	r3, [r7, #31]
 8003a76:	e06c      	b.n	8003b52 <UART_SetConfig+0x346>
 8003a78:	2310      	movs	r3, #16
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e069      	b.n	8003b52 <UART_SetConfig+0x346>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1c      	ldr	r2, [pc, #112]	; (8003af4 <UART_SetConfig+0x2e8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d137      	bne.n	8003af8 <UART_SetConfig+0x2ec>
 8003a88:	4b14      	ldr	r3, [pc, #80]	; (8003adc <UART_SetConfig+0x2d0>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a96:	d017      	beq.n	8003ac8 <UART_SetConfig+0x2bc>
 8003a98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a9c:	d817      	bhi.n	8003ace <UART_SetConfig+0x2c2>
 8003a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa2:	d00b      	beq.n	8003abc <UART_SetConfig+0x2b0>
 8003aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa8:	d811      	bhi.n	8003ace <UART_SetConfig+0x2c2>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <UART_SetConfig+0x2aa>
 8003aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab2:	d006      	beq.n	8003ac2 <UART_SetConfig+0x2b6>
 8003ab4:	e00b      	b.n	8003ace <UART_SetConfig+0x2c2>
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	77fb      	strb	r3, [r7, #31]
 8003aba:	e04a      	b.n	8003b52 <UART_SetConfig+0x346>
 8003abc:	2302      	movs	r3, #2
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e047      	b.n	8003b52 <UART_SetConfig+0x346>
 8003ac2:	2304      	movs	r3, #4
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e044      	b.n	8003b52 <UART_SetConfig+0x346>
 8003ac8:	2308      	movs	r3, #8
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e041      	b.n	8003b52 <UART_SetConfig+0x346>
 8003ace:	2310      	movs	r3, #16
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e03e      	b.n	8003b52 <UART_SetConfig+0x346>
 8003ad4:	efff69f3 	.word	0xefff69f3
 8003ad8:	40011000 	.word	0x40011000
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40004400 	.word	0x40004400
 8003ae4:	40004800 	.word	0x40004800
 8003ae8:	40004c00 	.word	0x40004c00
 8003aec:	40005000 	.word	0x40005000
 8003af0:	40011400 	.word	0x40011400
 8003af4:	40007800 	.word	0x40007800
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a71      	ldr	r2, [pc, #452]	; (8003cc4 <UART_SetConfig+0x4b8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d125      	bne.n	8003b4e <UART_SetConfig+0x342>
 8003b02:	4b71      	ldr	r3, [pc, #452]	; (8003cc8 <UART_SetConfig+0x4bc>)
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b10:	d017      	beq.n	8003b42 <UART_SetConfig+0x336>
 8003b12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b16:	d817      	bhi.n	8003b48 <UART_SetConfig+0x33c>
 8003b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b1c:	d00b      	beq.n	8003b36 <UART_SetConfig+0x32a>
 8003b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b22:	d811      	bhi.n	8003b48 <UART_SetConfig+0x33c>
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <UART_SetConfig+0x324>
 8003b28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b2c:	d006      	beq.n	8003b3c <UART_SetConfig+0x330>
 8003b2e:	e00b      	b.n	8003b48 <UART_SetConfig+0x33c>
 8003b30:	2300      	movs	r3, #0
 8003b32:	77fb      	strb	r3, [r7, #31]
 8003b34:	e00d      	b.n	8003b52 <UART_SetConfig+0x346>
 8003b36:	2302      	movs	r3, #2
 8003b38:	77fb      	strb	r3, [r7, #31]
 8003b3a:	e00a      	b.n	8003b52 <UART_SetConfig+0x346>
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	77fb      	strb	r3, [r7, #31]
 8003b40:	e007      	b.n	8003b52 <UART_SetConfig+0x346>
 8003b42:	2308      	movs	r3, #8
 8003b44:	77fb      	strb	r3, [r7, #31]
 8003b46:	e004      	b.n	8003b52 <UART_SetConfig+0x346>
 8003b48:	2310      	movs	r3, #16
 8003b4a:	77fb      	strb	r3, [r7, #31]
 8003b4c:	e001      	b.n	8003b52 <UART_SetConfig+0x346>
 8003b4e:	2310      	movs	r3, #16
 8003b50:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b5a:	d15b      	bne.n	8003c14 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003b5c:	7ffb      	ldrb	r3, [r7, #31]
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d827      	bhi.n	8003bb2 <UART_SetConfig+0x3a6>
 8003b62:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <UART_SetConfig+0x35c>)
 8003b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b68:	08003b8d 	.word	0x08003b8d
 8003b6c:	08003b95 	.word	0x08003b95
 8003b70:	08003b9d 	.word	0x08003b9d
 8003b74:	08003bb3 	.word	0x08003bb3
 8003b78:	08003ba3 	.word	0x08003ba3
 8003b7c:	08003bb3 	.word	0x08003bb3
 8003b80:	08003bb3 	.word	0x08003bb3
 8003b84:	08003bb3 	.word	0x08003bb3
 8003b88:	08003bab 	.word	0x08003bab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b8c:	f7fe fe1c 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 8003b90:	61b8      	str	r0, [r7, #24]
        break;
 8003b92:	e013      	b.n	8003bbc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b94:	f7fe fe2c 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 8003b98:	61b8      	str	r0, [r7, #24]
        break;
 8003b9a:	e00f      	b.n	8003bbc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b9c:	4b4b      	ldr	r3, [pc, #300]	; (8003ccc <UART_SetConfig+0x4c0>)
 8003b9e:	61bb      	str	r3, [r7, #24]
        break;
 8003ba0:	e00c      	b.n	8003bbc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ba2:	f7fe fd23 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8003ba6:	61b8      	str	r0, [r7, #24]
        break;
 8003ba8:	e008      	b.n	8003bbc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bae:	61bb      	str	r3, [r7, #24]
        break;
 8003bb0:	e004      	b.n	8003bbc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	77bb      	strb	r3, [r7, #30]
        break;
 8003bba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d074      	beq.n	8003cac <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	005a      	lsls	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	085b      	lsrs	r3, r3, #1
 8003bcc:	441a      	add	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	2b0f      	cmp	r3, #15
 8003bde:	d916      	bls.n	8003c0e <UART_SetConfig+0x402>
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be6:	d212      	bcs.n	8003c0e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f023 030f 	bic.w	r3, r3, #15
 8003bf0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	085b      	lsrs	r3, r3, #1
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	89fb      	ldrh	r3, [r7, #14]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	89fa      	ldrh	r2, [r7, #14]
 8003c0a:	60da      	str	r2, [r3, #12]
 8003c0c:	e04e      	b.n	8003cac <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	77bb      	strb	r3, [r7, #30]
 8003c12:	e04b      	b.n	8003cac <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c14:	7ffb      	ldrb	r3, [r7, #31]
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d827      	bhi.n	8003c6a <UART_SetConfig+0x45e>
 8003c1a:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <UART_SetConfig+0x414>)
 8003c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c20:	08003c45 	.word	0x08003c45
 8003c24:	08003c4d 	.word	0x08003c4d
 8003c28:	08003c55 	.word	0x08003c55
 8003c2c:	08003c6b 	.word	0x08003c6b
 8003c30:	08003c5b 	.word	0x08003c5b
 8003c34:	08003c6b 	.word	0x08003c6b
 8003c38:	08003c6b 	.word	0x08003c6b
 8003c3c:	08003c6b 	.word	0x08003c6b
 8003c40:	08003c63 	.word	0x08003c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c44:	f7fe fdc0 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 8003c48:	61b8      	str	r0, [r7, #24]
        break;
 8003c4a:	e013      	b.n	8003c74 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c4c:	f7fe fdd0 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 8003c50:	61b8      	str	r0, [r7, #24]
        break;
 8003c52:	e00f      	b.n	8003c74 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c54:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <UART_SetConfig+0x4c0>)
 8003c56:	61bb      	str	r3, [r7, #24]
        break;
 8003c58:	e00c      	b.n	8003c74 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c5a:	f7fe fcc7 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8003c5e:	61b8      	str	r0, [r7, #24]
        break;
 8003c60:	e008      	b.n	8003c74 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c66:	61bb      	str	r3, [r7, #24]
        break;
 8003c68:	e004      	b.n	8003c74 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	77bb      	strb	r3, [r7, #30]
        break;
 8003c72:	bf00      	nop
    }

    if (pclk != 0U)
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d018      	beq.n	8003cac <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	085a      	lsrs	r2, r3, #1
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	441a      	add	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	2b0f      	cmp	r3, #15
 8003c94:	d908      	bls.n	8003ca8 <UART_SetConfig+0x49c>
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9c:	d204      	bcs.n	8003ca8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	e001      	b.n	8003cac <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003cb8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40007c00 	.word	0x40007c00
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	00f42400 	.word	0x00f42400

08003cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01a      	beq.n	8003de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dce:	d10a      	bne.n	8003de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	605a      	str	r2, [r3, #4]
  }
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e24:	f7fc fb92 	bl	800054c <HAL_GetTick>
 8003e28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d10e      	bne.n	8003e56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f817 	bl	8003e7a <UART_WaitOnFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e00d      	b.n	8003e72 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	603b      	str	r3, [r7, #0]
 8003e86:	4613      	mov	r3, r2
 8003e88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8a:	e05e      	b.n	8003f4a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e92:	d05a      	beq.n	8003f4a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e94:	f7fc fb5a 	bl	800054c <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d302      	bcc.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x30>
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d11b      	bne.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003eb8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0201 	bic.w	r2, r2, #1
 8003ec8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e043      	b.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d02c      	beq.n	8003f4a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003efe:	d124      	bne.n	8003f4a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f18:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0201 	bic.w	r2, r2, #1
 8003f28:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e00f      	b.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69da      	ldr	r2, [r3, #28]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4013      	ands	r3, r2
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	bf0c      	ite	eq
 8003f5a:	2301      	moveq	r3, #1
 8003f5c:	2300      	movne	r3, #0
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d091      	beq.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f74:	b084      	sub	sp, #16
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	f107 001c 	add.w	r0, r7, #28
 8003f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d120      	bne.n	8003fce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	4b20      	ldr	r3, [pc, #128]	; (8004020 <USB_CoreInit+0xac>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d105      	bne.n	8003fc2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f001 fad6 	bl	8005574 <USB_CoreReset>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	73fb      	strb	r3, [r7, #15]
 8003fcc:	e010      	b.n	8003ff0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f001 faca 	bl	8005574 <USB_CoreReset>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d10b      	bne.n	800400e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f043 0206 	orr.w	r2, r3, #6
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f043 0220 	orr.w	r2, r3, #32
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800400e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800401a:	b004      	add	sp, #16
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	ffbdffbf 	.word	0xffbdffbf

08004024 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	4613      	mov	r3, r2
 8004030:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d165      	bne.n	8004104 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4a41      	ldr	r2, [pc, #260]	; (8004140 <USB_SetTurnaroundTime+0x11c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d906      	bls.n	800404e <USB_SetTurnaroundTime+0x2a>
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4a40      	ldr	r2, [pc, #256]	; (8004144 <USB_SetTurnaroundTime+0x120>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d202      	bcs.n	800404e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004048:	230f      	movs	r3, #15
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	e062      	b.n	8004114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4a3c      	ldr	r2, [pc, #240]	; (8004144 <USB_SetTurnaroundTime+0x120>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d306      	bcc.n	8004064 <USB_SetTurnaroundTime+0x40>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4a3b      	ldr	r2, [pc, #236]	; (8004148 <USB_SetTurnaroundTime+0x124>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d202      	bcs.n	8004064 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800405e:	230e      	movs	r3, #14
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	e057      	b.n	8004114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4a38      	ldr	r2, [pc, #224]	; (8004148 <USB_SetTurnaroundTime+0x124>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d306      	bcc.n	800407a <USB_SetTurnaroundTime+0x56>
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4a37      	ldr	r2, [pc, #220]	; (800414c <USB_SetTurnaroundTime+0x128>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d202      	bcs.n	800407a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004074:	230d      	movs	r3, #13
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	e04c      	b.n	8004114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	4a33      	ldr	r2, [pc, #204]	; (800414c <USB_SetTurnaroundTime+0x128>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d306      	bcc.n	8004090 <USB_SetTurnaroundTime+0x6c>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	4a32      	ldr	r2, [pc, #200]	; (8004150 <USB_SetTurnaroundTime+0x12c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d802      	bhi.n	8004090 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800408a:	230c      	movs	r3, #12
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	e041      	b.n	8004114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4a2f      	ldr	r2, [pc, #188]	; (8004150 <USB_SetTurnaroundTime+0x12c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d906      	bls.n	80040a6 <USB_SetTurnaroundTime+0x82>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4a2e      	ldr	r2, [pc, #184]	; (8004154 <USB_SetTurnaroundTime+0x130>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d802      	bhi.n	80040a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80040a0:	230b      	movs	r3, #11
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	e036      	b.n	8004114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4a2a      	ldr	r2, [pc, #168]	; (8004154 <USB_SetTurnaroundTime+0x130>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d906      	bls.n	80040bc <USB_SetTurnaroundTime+0x98>
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4a29      	ldr	r2, [pc, #164]	; (8004158 <USB_SetTurnaroundTime+0x134>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d802      	bhi.n	80040bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80040b6:	230a      	movs	r3, #10
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	e02b      	b.n	8004114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4a26      	ldr	r2, [pc, #152]	; (8004158 <USB_SetTurnaroundTime+0x134>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d906      	bls.n	80040d2 <USB_SetTurnaroundTime+0xae>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4a25      	ldr	r2, [pc, #148]	; (800415c <USB_SetTurnaroundTime+0x138>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d202      	bcs.n	80040d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80040cc:	2309      	movs	r3, #9
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e020      	b.n	8004114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4a21      	ldr	r2, [pc, #132]	; (800415c <USB_SetTurnaroundTime+0x138>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d306      	bcc.n	80040e8 <USB_SetTurnaroundTime+0xc4>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4a20      	ldr	r2, [pc, #128]	; (8004160 <USB_SetTurnaroundTime+0x13c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d802      	bhi.n	80040e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80040e2:	2308      	movs	r3, #8
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	e015      	b.n	8004114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4a1d      	ldr	r2, [pc, #116]	; (8004160 <USB_SetTurnaroundTime+0x13c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d906      	bls.n	80040fe <USB_SetTurnaroundTime+0xda>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4a1c      	ldr	r2, [pc, #112]	; (8004164 <USB_SetTurnaroundTime+0x140>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d202      	bcs.n	80040fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80040f8:	2307      	movs	r3, #7
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	e00a      	b.n	8004114 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80040fe:	2306      	movs	r3, #6
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	e007      	b.n	8004114 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d102      	bne.n	8004110 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800410a:	2309      	movs	r3, #9
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	e001      	b.n	8004114 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004110:	2309      	movs	r3, #9
 8004112:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	029b      	lsls	r3, r3, #10
 8004128:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800412c:	431a      	orrs	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	371c      	adds	r7, #28
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	00d8acbf 	.word	0x00d8acbf
 8004144:	00e4e1c0 	.word	0x00e4e1c0
 8004148:	00f42400 	.word	0x00f42400
 800414c:	01067380 	.word	0x01067380
 8004150:	011a499f 	.word	0x011a499f
 8004154:	01312cff 	.word	0x01312cff
 8004158:	014ca43f 	.word	0x014ca43f
 800415c:	016e3600 	.word	0x016e3600
 8004160:	01a6ab1f 	.word	0x01a6ab1f
 8004164:	01e84800 	.word	0x01e84800

08004168 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f043 0201 	orr.w	r2, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f023 0201 	bic.w	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d106      	bne.n	80041d8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	60da      	str	r2, [r3, #12]
 80041d6:	e00b      	b.n	80041f0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	60da      	str	r2, [r3, #12]
 80041ea:	e001      	b.n	80041f0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e003      	b.n	80041f8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80041f0:	2032      	movs	r0, #50	; 0x32
 80041f2:	f7fc f9b7 	bl	8000564 <HAL_Delay>

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004200:	b084      	sub	sp, #16
 8004202:	b580      	push	{r7, lr}
 8004204:	b086      	sub	sp, #24
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800420e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800421a:	2300      	movs	r3, #0
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	e009      	b.n	8004234 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	3340      	adds	r3, #64	; 0x40
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	2200      	movs	r2, #0
 800422c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	3301      	adds	r3, #1
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	2b0e      	cmp	r3, #14
 8004238:	d9f2      	bls.n	8004220 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800423a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d11c      	bne.n	800427a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800424e:	f043 0302 	orr.w	r3, r3, #2
 8004252:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	e005      	b.n	8004286 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800428c:	461a      	mov	r2, r3
 800428e:	2300      	movs	r3, #0
 8004290:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004298:	4619      	mov	r1, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a0:	461a      	mov	r2, r3
 80042a2:	680b      	ldr	r3, [r1, #0]
 80042a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d10c      	bne.n	80042c6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d104      	bne.n	80042bc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042b2:	2100      	movs	r1, #0
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f959 	bl	800456c <USB_SetDevSpeed>
 80042ba:	e018      	b.n	80042ee <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042bc:	2101      	movs	r1, #1
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f954 	bl	800456c <USB_SetDevSpeed>
 80042c4:	e013      	b.n	80042ee <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80042c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d10c      	bne.n	80042e6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d104      	bne.n	80042dc <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042d2:	2100      	movs	r1, #0
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f949 	bl	800456c <USB_SetDevSpeed>
 80042da:	e008      	b.n	80042ee <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042dc:	2101      	movs	r1, #1
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f944 	bl	800456c <USB_SetDevSpeed>
 80042e4:	e003      	b.n	80042ee <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042e6:	2103      	movs	r1, #3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f93f 	bl	800456c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042ee:	2110      	movs	r1, #16
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f8f3 	bl	80044dc <USB_FlushTxFifo>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f911 	bl	8004528 <USB_FlushRxFifo>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004316:	461a      	mov	r2, r3
 8004318:	2300      	movs	r3, #0
 800431a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004322:	461a      	mov	r2, r3
 8004324:	2300      	movs	r3, #0
 8004326:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	461a      	mov	r2, r3
 8004330:	2300      	movs	r3, #0
 8004332:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004334:	2300      	movs	r3, #0
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	e043      	b.n	80043c2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800434c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004350:	d118      	bne.n	8004384 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004364:	461a      	mov	r2, r3
 8004366:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	e013      	b.n	8004396 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437a:	461a      	mov	r2, r3
 800437c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	e008      	b.n	8004396 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004390:	461a      	mov	r2, r3
 8004392:	2300      	movs	r3, #0
 8004394:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a2:	461a      	mov	r2, r3
 80043a4:	2300      	movs	r3, #0
 80043a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b4:	461a      	mov	r2, r3
 80043b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	3301      	adds	r3, #1
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d3b7      	bcc.n	800433a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043ca:	2300      	movs	r3, #0
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	e043      	b.n	8004458 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043e6:	d118      	bne.n	800441a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10a      	bne.n	8004404 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fa:	461a      	mov	r2, r3
 80043fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	e013      	b.n	800442c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004410:	461a      	mov	r2, r3
 8004412:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	e008      	b.n	800442c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004426:	461a      	mov	r2, r3
 8004428:	2300      	movs	r3, #0
 800442a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004438:	461a      	mov	r2, r3
 800443a:	2300      	movs	r3, #0
 800443c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444a:	461a      	mov	r2, r3
 800444c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004450:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	3301      	adds	r3, #1
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	429a      	cmp	r2, r3
 800445e:	d3b7      	bcc.n	80043d0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800446e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004472:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004480:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	2b00      	cmp	r3, #0
 8004486:	d105      	bne.n	8004494 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	f043 0210 	orr.w	r2, r3, #16
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699a      	ldr	r2, [r3, #24]
 8004498:	4b0e      	ldr	r3, [pc, #56]	; (80044d4 <USB_DevInit+0x2d4>)
 800449a:	4313      	orrs	r3, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80044a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f043 0208 	orr.w	r2, r3, #8
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d105      	bne.n	80044c4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699a      	ldr	r2, [r3, #24]
 80044bc:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <USB_DevInit+0x2d8>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044d0:	b004      	add	sp, #16
 80044d2:	4770      	bx	lr
 80044d4:	803c3800 	.word	0x803c3800
 80044d8:	40000004 	.word	0x40000004

080044dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	019b      	lsls	r3, r3, #6
 80044ee:	f043 0220 	orr.w	r2, r3, #32
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3301      	adds	r3, #1
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4a09      	ldr	r2, [pc, #36]	; (8004524 <USB_FlushTxFifo+0x48>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d901      	bls.n	8004508 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e006      	b.n	8004516 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f003 0320 	and.w	r3, r3, #32
 8004510:	2b20      	cmp	r3, #32
 8004512:	d0f0      	beq.n	80044f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	00030d40 	.word	0x00030d40

08004528 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2210      	movs	r2, #16
 8004538:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3301      	adds	r3, #1
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4a09      	ldr	r2, [pc, #36]	; (8004568 <USB_FlushRxFifo+0x40>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d901      	bls.n	800454c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e006      	b.n	800455a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b10      	cmp	r3, #16
 8004556:	d0f0      	beq.n	800453a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	00030d40 	.word	0x00030d40

0800456c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	460b      	mov	r3, r1
 8004576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	68f9      	ldr	r1, [r7, #12]
 8004588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800459e:	b480      	push	{r7}
 80045a0:	b087      	sub	sp, #28
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 0306 	and.w	r3, r3, #6
 80045b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d102      	bne.n	80045c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80045be:	2300      	movs	r3, #0
 80045c0:	75fb      	strb	r3, [r7, #23]
 80045c2:	e00a      	b.n	80045da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d002      	beq.n	80045d0 <USB_GetDevSpeed+0x32>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b06      	cmp	r3, #6
 80045ce:	d102      	bne.n	80045d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80045d0:	2302      	movs	r3, #2
 80045d2:	75fb      	strb	r3, [r7, #23]
 80045d4:	e001      	b.n	80045da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80045d6:	230f      	movs	r3, #15
 80045d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045da:	7dfb      	ldrb	r3, [r7, #23]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	785b      	ldrb	r3, [r3, #1]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d139      	bne.n	8004678 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460a:	69da      	ldr	r2, [r3, #28]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	f003 030f 	and.w	r3, r3, #15
 8004614:	2101      	movs	r1, #1
 8004616:	fa01 f303 	lsl.w	r3, r1, r3
 800461a:	b29b      	uxth	r3, r3
 800461c:	68f9      	ldr	r1, [r7, #12]
 800461e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004622:	4313      	orrs	r3, r2
 8004624:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d153      	bne.n	80046e4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	78db      	ldrb	r3, [r3, #3]
 8004656:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004658:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	059b      	lsls	r3, r3, #22
 800465e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004660:	431a      	orrs	r2, r3
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	0159      	lsls	r1, r3, #5
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	440b      	add	r3, r1
 800466a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466e:	4619      	mov	r1, r3
 8004670:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <USB_ActivateEndpoint+0x10c>)
 8004672:	4313      	orrs	r3, r2
 8004674:	600b      	str	r3, [r1, #0]
 8004676:	e035      	b.n	80046e4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	2101      	movs	r1, #1
 800468a:	fa01 f303 	lsl.w	r3, r1, r3
 800468e:	041b      	lsls	r3, r3, #16
 8004690:	68f9      	ldr	r1, [r7, #12]
 8004692:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004696:	4313      	orrs	r3, r2
 8004698:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d119      	bne.n	80046e4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	78db      	ldrb	r3, [r3, #3]
 80046ca:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046cc:	430b      	orrs	r3, r1
 80046ce:	431a      	orrs	r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	0159      	lsls	r1, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	440b      	add	r3, r1
 80046d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046dc:	4619      	mov	r1, r3
 80046de:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <USB_ActivateEndpoint+0x10c>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	10008000 	.word	0x10008000

080046f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	785b      	ldrb	r3, [r3, #1]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d161      	bne.n	80047d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004726:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800472a:	d11f      	bne.n	800476c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	0151      	lsls	r1, r2, #5
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	440a      	add	r2, r1
 8004742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004746:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800474a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	0151      	lsls	r1, r2, #5
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	440a      	add	r2, r1
 8004762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004766:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800476a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	2101      	movs	r1, #1
 800477e:	fa01 f303 	lsl.w	r3, r1, r3
 8004782:	b29b      	uxth	r3, r3
 8004784:	43db      	mvns	r3, r3
 8004786:	68f9      	ldr	r1, [r7, #12]
 8004788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800478c:	4013      	ands	r3, r2
 800478e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	2101      	movs	r1, #1
 80047a2:	fa01 f303 	lsl.w	r3, r1, r3
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	68f9      	ldr	r1, [r7, #12]
 80047ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047b0:	4013      	ands	r3, r2
 80047b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	0159      	lsls	r1, r3, #5
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	440b      	add	r3, r1
 80047ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ce:	4619      	mov	r1, r3
 80047d0:	4b35      	ldr	r3, [pc, #212]	; (80048a8 <USB_DeactivateEndpoint+0x1b0>)
 80047d2:	4013      	ands	r3, r2
 80047d4:	600b      	str	r3, [r1, #0]
 80047d6:	e060      	b.n	800489a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ee:	d11f      	bne.n	8004830 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	0151      	lsls	r1, r2, #5
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	440a      	add	r2, r1
 8004806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800480a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800480e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	0151      	lsls	r1, r2, #5
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	440a      	add	r2, r1
 8004826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800482a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800482e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	2101      	movs	r1, #1
 8004842:	fa01 f303 	lsl.w	r3, r1, r3
 8004846:	041b      	lsls	r3, r3, #16
 8004848:	43db      	mvns	r3, r3
 800484a:	68f9      	ldr	r1, [r7, #12]
 800484c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004850:	4013      	ands	r3, r2
 8004852:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485a:	69da      	ldr	r2, [r3, #28]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	2101      	movs	r1, #1
 8004866:	fa01 f303 	lsl.w	r3, r1, r3
 800486a:	041b      	lsls	r3, r3, #16
 800486c:	43db      	mvns	r3, r3
 800486e:	68f9      	ldr	r1, [r7, #12]
 8004870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004874:	4013      	ands	r3, r2
 8004876:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	0159      	lsls	r1, r3, #5
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	440b      	add	r3, r1
 800488e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004892:	4619      	mov	r1, r3
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <USB_DeactivateEndpoint+0x1b4>)
 8004896:	4013      	ands	r3, r2
 8004898:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	ec337800 	.word	0xec337800
 80048ac:	eff37800 	.word	0xeff37800

080048b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08a      	sub	sp, #40	; 0x28
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	4613      	mov	r3, r2
 80048bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	785b      	ldrb	r3, [r3, #1]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	f040 8163 	bne.w	8004b98 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d132      	bne.n	8004940 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	0159      	lsls	r1, r3, #5
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	440b      	add	r3, r1
 80048f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f4:	4619      	mov	r1, r3
 80048f6:	4ba5      	ldr	r3, [pc, #660]	; (8004b8c <USB_EPStartXfer+0x2dc>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	0151      	lsls	r1, r2, #5
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	440a      	add	r2, r1
 8004912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004916:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800491a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	0159      	lsls	r1, r3, #5
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	440b      	add	r3, r1
 8004932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004936:	4619      	mov	r1, r3
 8004938:	4b95      	ldr	r3, [pc, #596]	; (8004b90 <USB_EPStartXfer+0x2e0>)
 800493a:	4013      	ands	r3, r2
 800493c:	610b      	str	r3, [r1, #16]
 800493e:	e074      	b.n	8004a2a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494c:	691a      	ldr	r2, [r3, #16]
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	0159      	lsls	r1, r3, #5
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	440b      	add	r3, r1
 8004956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495a:	4619      	mov	r1, r3
 800495c:	4b8c      	ldr	r3, [pc, #560]	; (8004b90 <USB_EPStartXfer+0x2e0>)
 800495e:	4013      	ands	r3, r2
 8004960:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	0159      	lsls	r1, r3, #5
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	440b      	add	r3, r1
 8004978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497c:	4619      	mov	r1, r3
 800497e:	4b83      	ldr	r3, [pc, #524]	; (8004b8c <USB_EPStartXfer+0x2dc>)
 8004980:	4013      	ands	r3, r2
 8004982:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004990:	691a      	ldr	r2, [r3, #16]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	6959      	ldr	r1, [r3, #20]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	440b      	add	r3, r1
 800499c:	1e59      	subs	r1, r3, #1
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80049a6:	04d9      	lsls	r1, r3, #19
 80049a8:	4b7a      	ldr	r3, [pc, #488]	; (8004b94 <USB_EPStartXfer+0x2e4>)
 80049aa:	400b      	ands	r3, r1
 80049ac:	69b9      	ldr	r1, [r7, #24]
 80049ae:	0148      	lsls	r0, r1, #5
 80049b0:	69f9      	ldr	r1, [r7, #28]
 80049b2:	4401      	add	r1, r0
 80049b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049b8:	4313      	orrs	r3, r2
 80049ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d2:	69b9      	ldr	r1, [r7, #24]
 80049d4:	0148      	lsls	r0, r1, #5
 80049d6:	69f9      	ldr	r1, [r7, #28]
 80049d8:	4401      	add	r1, r0
 80049da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049de:	4313      	orrs	r3, r2
 80049e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	78db      	ldrb	r3, [r3, #3]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d11f      	bne.n	8004a2a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	0151      	lsls	r1, r2, #5
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	440a      	add	r2, r1
 8004a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a04:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a08:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	0151      	lsls	r1, r2, #5
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	440a      	add	r2, r1
 8004a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a28:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d14b      	bne.n	8004ac8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d009      	beq.n	8004a4c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a44:	461a      	mov	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	78db      	ldrb	r3, [r3, #3]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d128      	bne.n	8004aa6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d110      	bne.n	8004a86 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	0151      	lsls	r1, r2, #5
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	440a      	add	r2, r1
 8004a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	e00f      	b.n	8004aa6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	0151      	lsls	r1, r2, #5
 8004a98:	69fa      	ldr	r2, [r7, #28]
 8004a9a:	440a      	add	r2, r1
 8004a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	0151      	lsls	r1, r2, #5
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	440a      	add	r2, r1
 8004abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e133      	b.n	8004d30 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	0151      	lsls	r1, r2, #5
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	440a      	add	r2, r1
 8004ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ae6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	78db      	ldrb	r3, [r3, #3]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d015      	beq.n	8004b1c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 811b 	beq.w	8004d30 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b10:	69f9      	ldr	r1, [r7, #28]
 8004b12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b16:	4313      	orrs	r3, r2
 8004b18:	634b      	str	r3, [r1, #52]	; 0x34
 8004b1a:	e109      	b.n	8004d30 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d110      	bne.n	8004b4e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	0151      	lsls	r1, r2, #5
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	440a      	add	r2, r1
 8004b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	e00f      	b.n	8004b6e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	0151      	lsls	r1, r2, #5
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	440a      	add	r2, r1
 8004b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	68d9      	ldr	r1, [r3, #12]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	781a      	ldrb	r2, [r3, #0]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	b298      	uxth	r0, r3
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	4603      	mov	r3, r0
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fa38 	bl	8004ff8 <USB_WritePacket>
 8004b88:	e0d2      	b.n	8004d30 <USB_EPStartXfer+0x480>
 8004b8a:	bf00      	nop
 8004b8c:	e007ffff 	.word	0xe007ffff
 8004b90:	fff80000 	.word	0xfff80000
 8004b94:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	0159      	lsls	r1, r3, #5
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	440b      	add	r3, r1
 8004bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4b61      	ldr	r3, [pc, #388]	; (8004d3c <USB_EPStartXfer+0x48c>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	0159      	lsls	r1, r3, #5
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	440b      	add	r3, r1
 8004bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4b5a      	ldr	r3, [pc, #360]	; (8004d40 <USB_EPStartXfer+0x490>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d123      	bne.n	8004c2c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bfa:	69b9      	ldr	r1, [r7, #24]
 8004bfc:	0148      	lsls	r0, r1, #5
 8004bfe:	69f9      	ldr	r1, [r7, #28]
 8004c00:	4401      	add	r1, r0
 8004c02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c06:	4313      	orrs	r3, r2
 8004c08:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	0151      	lsls	r1, r2, #5
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	440a      	add	r2, r1
 8004c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c28:	6113      	str	r3, [r2, #16]
 8004c2a:	e033      	b.n	8004c94 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	695a      	ldr	r2, [r3, #20]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4413      	add	r3, r2
 8004c36:	1e5a      	subs	r2, r3, #1
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c40:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	8afb      	ldrh	r3, [r7, #22]
 8004c52:	04d9      	lsls	r1, r3, #19
 8004c54:	4b3b      	ldr	r3, [pc, #236]	; (8004d44 <USB_EPStartXfer+0x494>)
 8004c56:	400b      	ands	r3, r1
 8004c58:	69b9      	ldr	r1, [r7, #24]
 8004c5a:	0148      	lsls	r0, r1, #5
 8004c5c:	69f9      	ldr	r1, [r7, #28]
 8004c5e:	4401      	add	r1, r0
 8004c60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c64:	4313      	orrs	r3, r2
 8004c66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	8af9      	ldrh	r1, [r7, #22]
 8004c7c:	fb01 f303 	mul.w	r3, r1, r3
 8004c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c84:	69b9      	ldr	r1, [r7, #24]
 8004c86:	0148      	lsls	r0, r1, #5
 8004c88:	69f9      	ldr	r1, [r7, #28]
 8004c8a:	4401      	add	r1, r0
 8004c8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c90:	4313      	orrs	r3, r2
 8004c92:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c94:	79fb      	ldrb	r3, [r7, #7]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d10d      	bne.n	8004cb6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	68d9      	ldr	r1, [r3, #12]
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb2:	460a      	mov	r2, r1
 8004cb4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	78db      	ldrb	r3, [r3, #3]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d128      	bne.n	8004d10 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d110      	bne.n	8004cf0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	0151      	lsls	r1, r2, #5
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	440a      	add	r2, r1
 8004ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ce8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e00f      	b.n	8004d10 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	0151      	lsls	r1, r2, #5
 8004d02:	69fa      	ldr	r2, [r7, #28]
 8004d04:	440a      	add	r2, r1
 8004d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	0151      	lsls	r1, r2, #5
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	440a      	add	r2, r1
 8004d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3720      	adds	r7, #32
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	fff80000 	.word	0xfff80000
 8004d40:	e007ffff 	.word	0xe007ffff
 8004d44:	1ff80000 	.word	0x1ff80000

08004d48 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	4613      	mov	r3, r2
 8004d54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	785b      	ldrb	r3, [r3, #1]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	f040 80cd 	bne.w	8004f04 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d132      	bne.n	8004dd8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	0159      	lsls	r1, r3, #5
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	440b      	add	r3, r1
 8004d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4b98      	ldr	r3, [pc, #608]	; (8004ff0 <USB_EP0StartXfer+0x2a8>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	0151      	lsls	r1, r2, #5
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	440a      	add	r2, r1
 8004daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004db2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc0:	691a      	ldr	r2, [r3, #16]
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	0159      	lsls	r1, r3, #5
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	440b      	add	r3, r1
 8004dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4b88      	ldr	r3, [pc, #544]	; (8004ff4 <USB_EP0StartXfer+0x2ac>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	610b      	str	r3, [r1, #16]
 8004dd6:	e04e      	b.n	8004e76 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	0159      	lsls	r1, r3, #5
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	440b      	add	r3, r1
 8004dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df2:	4619      	mov	r1, r3
 8004df4:	4b7f      	ldr	r3, [pc, #508]	; (8004ff4 <USB_EP0StartXfer+0x2ac>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	0159      	lsls	r1, r3, #5
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	440b      	add	r3, r1
 8004e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e14:	4619      	mov	r1, r3
 8004e16:	4b76      	ldr	r3, [pc, #472]	; (8004ff0 <USB_EP0StartXfer+0x2a8>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	695a      	ldr	r2, [r3, #20]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d903      	bls.n	8004e30 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	0151      	lsls	r1, r2, #5
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	440a      	add	r2, r1
 8004e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5c:	691a      	ldr	r2, [r3, #16]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e66:	6939      	ldr	r1, [r7, #16]
 8004e68:	0148      	lsls	r0, r1, #5
 8004e6a:	6979      	ldr	r1, [r7, #20]
 8004e6c:	4401      	add	r1, r0
 8004e6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e72:	4313      	orrs	r3, r2
 8004e74:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d11e      	bne.n	8004eba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d009      	beq.n	8004e98 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e90:	461a      	mov	r2, r3
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	0151      	lsls	r1, r2, #5
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	440a      	add	r2, r1
 8004eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	e092      	b.n	8004fe0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ed8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d07e      	beq.n	8004fe0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef8:	6979      	ldr	r1, [r7, #20]
 8004efa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004efe:	4313      	orrs	r3, r2
 8004f00:	634b      	str	r3, [r1, #52]	; 0x34
 8004f02:	e06d      	b.n	8004fe0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	0159      	lsls	r1, r3, #5
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	440b      	add	r3, r1
 8004f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4b34      	ldr	r3, [pc, #208]	; (8004ff4 <USB_EP0StartXfer+0x2ac>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	0159      	lsls	r1, r3, #5
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	440b      	add	r3, r1
 8004f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f40:	4619      	mov	r1, r3
 8004f42:	4b2b      	ldr	r3, [pc, #172]	; (8004ff0 <USB_EP0StartXfer+0x2a8>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	0151      	lsls	r1, r2, #5
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	440a      	add	r2, r1
 8004f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f8e:	6939      	ldr	r1, [r7, #16]
 8004f90:	0148      	lsls	r0, r1, #5
 8004f92:	6979      	ldr	r1, [r7, #20]
 8004f94:	4401      	add	r1, r0
 8004f96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d10d      	bne.n	8004fc0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d009      	beq.n	8004fc0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	68d9      	ldr	r1, [r3, #12]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fbc:	460a      	mov	r2, r1
 8004fbe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	0151      	lsls	r1, r2, #5
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	e007ffff 	.word	0xe007ffff
 8004ff4:	fff80000 	.word	0xfff80000

08004ff8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b089      	sub	sp, #36	; 0x24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	4611      	mov	r1, r2
 8005004:	461a      	mov	r2, r3
 8005006:	460b      	mov	r3, r1
 8005008:	71fb      	strb	r3, [r7, #7]
 800500a:	4613      	mov	r3, r2
 800500c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005016:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800501a:	2b00      	cmp	r3, #0
 800501c:	d11a      	bne.n	8005054 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800501e:	88bb      	ldrh	r3, [r7, #4]
 8005020:	3303      	adds	r3, #3
 8005022:	089b      	lsrs	r3, r3, #2
 8005024:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005026:	2300      	movs	r3, #0
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	e00f      	b.n	800504c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800502c:	79fb      	ldrb	r3, [r7, #7]
 800502e:	031a      	lsls	r2, r3, #12
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	4413      	add	r3, r2
 8005034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005038:	461a      	mov	r2, r3
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	3304      	adds	r3, #4
 8005044:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	3301      	adds	r3, #1
 800504a:	61bb      	str	r3, [r7, #24]
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	429a      	cmp	r2, r3
 8005052:	d3eb      	bcc.n	800502c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3724      	adds	r7, #36	; 0x24
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005062:	b480      	push	{r7}
 8005064:	b089      	sub	sp, #36	; 0x24
 8005066:	af00      	add	r7, sp, #0
 8005068:	60f8      	str	r0, [r7, #12]
 800506a:	60b9      	str	r1, [r7, #8]
 800506c:	4613      	mov	r3, r2
 800506e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005078:	88fb      	ldrh	r3, [r7, #6]
 800507a:	3303      	adds	r3, #3
 800507c:	089b      	lsrs	r3, r3, #2
 800507e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005080:	2300      	movs	r3, #0
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	e00b      	b.n	800509e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	601a      	str	r2, [r3, #0]
    pDest++;
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	3304      	adds	r3, #4
 8005096:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	3301      	adds	r3, #1
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d3ef      	bcc.n	8005086 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80050a6:	69fb      	ldr	r3, [r7, #28]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3724      	adds	r7, #36	; 0x24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	785b      	ldrb	r3, [r3, #1]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d12c      	bne.n	800512a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	db12      	blt.n	8005108 <USB_EPSetStall+0x54>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00f      	beq.n	8005108 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005102:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005106:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	0151      	lsls	r1, r2, #5
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	440a      	add	r2, r1
 800511e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005122:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	e02b      	b.n	8005182 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	db12      	blt.n	8005162 <USB_EPSetStall+0xae>
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00f      	beq.n	8005162 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	0151      	lsls	r1, r2, #5
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	440a      	add	r2, r1
 8005158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800515c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005160:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	0151      	lsls	r1, r2, #5
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	440a      	add	r2, r1
 8005178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800517c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005180:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	785b      	ldrb	r3, [r3, #1]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d128      	bne.n	80051fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	0151      	lsls	r1, r2, #5
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	440a      	add	r2, r1
 80051c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	78db      	ldrb	r3, [r3, #3]
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d003      	beq.n	80051dc <USB_EPClearStall+0x4c>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	78db      	ldrb	r3, [r3, #3]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d138      	bne.n	800524e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	e027      	b.n	800524e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	440a      	add	r2, r1
 8005214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005218:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800521c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	78db      	ldrb	r3, [r3, #3]
 8005222:	2b03      	cmp	r3, #3
 8005224:	d003      	beq.n	800522e <USB_EPClearStall+0x9e>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	78db      	ldrb	r3, [r3, #3]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d10f      	bne.n	800524e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	0151      	lsls	r1, r2, #5
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	440a      	add	r2, r1
 8005244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800524c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	460b      	mov	r3, r1
 8005266:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800527a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800527e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005290:	68f9      	ldr	r1, [r7, #12]
 8005292:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005296:	4313      	orrs	r3, r2
 8005298:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052c2:	f023 0303 	bic.w	r3, r3, #3
 80052c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052d6:	f023 0302 	bic.w	r3, r3, #2
 80052da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b085      	sub	sp, #20
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005304:	f023 0303 	bic.w	r3, r3, #3
 8005308:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005318:	f043 0302 	orr.w	r3, r3, #2
 800531c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4013      	ands	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005344:	68fb      	ldr	r3, [r7, #12]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	4013      	ands	r3, r2
 8005374:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	0c1b      	lsrs	r3, r3, #16
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	4013      	ands	r3, r2
 80053a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	b29b      	uxth	r3, r3
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b085      	sub	sp, #20
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	460b      	mov	r3, r1
 80053c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80053ca:	78fb      	ldrb	r3, [r7, #3]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	4013      	ands	r3, r2
 80053e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053e8:	68bb      	ldr	r3, [r7, #8]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b087      	sub	sp, #28
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	460b      	mov	r3, r1
 8005400:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005418:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	fa22 f303 	lsr.w	r3, r2, r3
 8005426:	01db      	lsls	r3, r3, #7
 8005428:	b2db      	uxtb	r3, r3
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005430:	78fb      	ldrb	r3, [r7, #3]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4013      	ands	r3, r2
 8005442:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005444:	68bb      	ldr	r3, [r7, #8]
}
 8005446:	4618      	mov	r0, r3
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	f003 0301 	and.w	r3, r3, #1
}
 8005462:	4618      	mov	r0, r3
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
	...

08005470 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548a:	4619      	mov	r1, r3
 800548c:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <USB_ActivateSetup+0x44>)
 800548e:	4013      	ands	r3, r2
 8005490:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	fffff800 	.word	0xfffff800

080054b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	460b      	mov	r3, r1
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	333c      	adds	r3, #60	; 0x3c
 80054ce:	3304      	adds	r3, #4
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4a26      	ldr	r2, [pc, #152]	; (8005570 <USB_EP0_OutStart+0xb8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d90a      	bls.n	80054f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ec:	d101      	bne.n	80054f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	e037      	b.n	8005562 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f8:	461a      	mov	r2, r3
 80054fa:	2300      	movs	r3, #0
 80054fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800550c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005510:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005520:	f043 0318 	orr.w	r3, r3, #24
 8005524:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005534:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005538:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800553a:	7afb      	ldrb	r3, [r7, #11]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d10f      	bne.n	8005560 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005546:	461a      	mov	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800555a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800555e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	4f54300a 	.word	0x4f54300a

08005574 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	3301      	adds	r3, #1
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4a13      	ldr	r2, [pc, #76]	; (80055d8 <USB_CoreReset+0x64>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d901      	bls.n	8005592 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e01b      	b.n	80055ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	daf2      	bge.n	8005580 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f043 0201 	orr.w	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3301      	adds	r3, #1
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4a09      	ldr	r2, [pc, #36]	; (80055d8 <USB_CoreReset+0x64>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d901      	bls.n	80055bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e006      	b.n	80055ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d0f0      	beq.n	80055aa <USB_CoreReset+0x36>

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	00030d40 	.word	0x00030d40

080055dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	460b      	mov	r3, r1
 80055e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80055e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80055ec:	f005 fcc2 	bl	800af74 <malloc>
 80055f0:	4603      	mov	r3, r0
 80055f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d105      	bne.n	8005606 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005602:	2302      	movs	r3, #2
 8005604:	e066      	b.n	80056d4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	7c1b      	ldrb	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d119      	bne.n	800564a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800561a:	2202      	movs	r2, #2
 800561c:	2181      	movs	r1, #129	; 0x81
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f005 f8b1 	bl	800a786 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800562a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800562e:	2202      	movs	r2, #2
 8005630:	2101      	movs	r1, #1
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f005 f8a7 	bl	800a786 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2210      	movs	r2, #16
 8005644:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005648:	e016      	b.n	8005678 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800564a:	2340      	movs	r3, #64	; 0x40
 800564c:	2202      	movs	r2, #2
 800564e:	2181      	movs	r1, #129	; 0x81
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f005 f898 	bl	800a786 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800565c:	2340      	movs	r3, #64	; 0x40
 800565e:	2202      	movs	r2, #2
 8005660:	2101      	movs	r1, #1
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f005 f88f 	bl	800a786 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2210      	movs	r2, #16
 8005674:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005678:	2308      	movs	r3, #8
 800567a:	2203      	movs	r2, #3
 800567c:	2182      	movs	r1, #130	; 0x82
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f005 f881 	bl	800a786 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	7c1b      	ldrb	r3, [r3, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d109      	bne.n	80056c2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056b8:	2101      	movs	r1, #1
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f005 f952 	bl	800a964 <USBD_LL_PrepareReceive>
 80056c0:	e007      	b.n	80056d2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056c8:	2340      	movs	r3, #64	; 0x40
 80056ca:	2101      	movs	r1, #1
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f005 f949 	bl	800a964 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80056ec:	2181      	movs	r1, #129	; 0x81
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f005 f86f 	bl	800a7d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80056fa:	2101      	movs	r1, #1
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f005 f868 	bl	800a7d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800570a:	2182      	movs	r1, #130	; 0x82
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f005 f860 	bl	800a7d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00e      	beq.n	800574a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800573c:	4618      	mov	r0, r3
 800573e:	f005 fc21 	bl	800af84 <free>
    pdev->pClassData = NULL;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800574a:	7bfb      	ldrb	r3, [r7, #15]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005764:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800577a:	2b00      	cmp	r3, #0
 800577c:	d03a      	beq.n	80057f4 <USBD_CDC_Setup+0xa0>
 800577e:	2b20      	cmp	r3, #32
 8005780:	f040 8097 	bne.w	80058b2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	88db      	ldrh	r3, [r3, #6]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d029      	beq.n	80057e0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	b25b      	sxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	da11      	bge.n	80057ba <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80057a2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	88d2      	ldrh	r2, [r2, #6]
 80057a8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80057aa:	6939      	ldr	r1, [r7, #16]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	88db      	ldrh	r3, [r3, #6]
 80057b0:	461a      	mov	r2, r3
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f001 faa6 	bl	8006d04 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80057b8:	e082      	b.n	80058c0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	785a      	ldrb	r2, [r3, #1]
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	88db      	ldrh	r3, [r3, #6]
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80057d0:	6939      	ldr	r1, [r7, #16]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	88db      	ldrh	r3, [r3, #6]
 80057d6:	461a      	mov	r2, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f001 fabf 	bl	8006d5c <USBD_CtlPrepareRx>
    break;
 80057de:	e06f      	b.n	80058c0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	7850      	ldrb	r0, [r2, #1]
 80057ec:	2200      	movs	r2, #0
 80057ee:	6839      	ldr	r1, [r7, #0]
 80057f0:	4798      	blx	r3
    break;
 80057f2:	e065      	b.n	80058c0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	785b      	ldrb	r3, [r3, #1]
 80057f8:	2b0b      	cmp	r3, #11
 80057fa:	d84f      	bhi.n	800589c <USBD_CDC_Setup+0x148>
 80057fc:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <USBD_CDC_Setup+0xb0>)
 80057fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005802:	bf00      	nop
 8005804:	08005835 	.word	0x08005835
 8005808:	080058ab 	.word	0x080058ab
 800580c:	0800589d 	.word	0x0800589d
 8005810:	0800589d 	.word	0x0800589d
 8005814:	0800589d 	.word	0x0800589d
 8005818:	0800589d 	.word	0x0800589d
 800581c:	0800589d 	.word	0x0800589d
 8005820:	0800589d 	.word	0x0800589d
 8005824:	0800589d 	.word	0x0800589d
 8005828:	0800589d 	.word	0x0800589d
 800582c:	0800585d 	.word	0x0800585d
 8005830:	08005885 	.word	0x08005885
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800583a:	2b03      	cmp	r3, #3
 800583c:	d107      	bne.n	800584e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800583e:	f107 030c 	add.w	r3, r7, #12
 8005842:	2202      	movs	r2, #2
 8005844:	4619      	mov	r1, r3
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f001 fa5c 	bl	8006d04 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800584c:	e030      	b.n	80058b0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f001 f9e6 	bl	8006c22 <USBD_CtlError>
        ret = USBD_FAIL;
 8005856:	2303      	movs	r3, #3
 8005858:	75fb      	strb	r3, [r7, #23]
      break;
 800585a:	e029      	b.n	80058b0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005862:	2b03      	cmp	r3, #3
 8005864:	d107      	bne.n	8005876 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005866:	f107 030f 	add.w	r3, r7, #15
 800586a:	2201      	movs	r2, #1
 800586c:	4619      	mov	r1, r3
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f001 fa48 	bl	8006d04 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005874:	e01c      	b.n	80058b0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005876:	6839      	ldr	r1, [r7, #0]
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 f9d2 	bl	8006c22 <USBD_CtlError>
        ret = USBD_FAIL;
 800587e:	2303      	movs	r3, #3
 8005880:	75fb      	strb	r3, [r7, #23]
      break;
 8005882:	e015      	b.n	80058b0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800588a:	2b03      	cmp	r3, #3
 800588c:	d00f      	beq.n	80058ae <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800588e:	6839      	ldr	r1, [r7, #0]
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f001 f9c6 	bl	8006c22 <USBD_CtlError>
        ret = USBD_FAIL;
 8005896:	2303      	movs	r3, #3
 8005898:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800589a:	e008      	b.n	80058ae <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800589c:	6839      	ldr	r1, [r7, #0]
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f001 f9bf 	bl	8006c22 <USBD_CtlError>
      ret = USBD_FAIL;
 80058a4:	2303      	movs	r3, #3
 80058a6:	75fb      	strb	r3, [r7, #23]
      break;
 80058a8:	e002      	b.n	80058b0 <USBD_CDC_Setup+0x15c>
      break;
 80058aa:	bf00      	nop
 80058ac:	e008      	b.n	80058c0 <USBD_CDC_Setup+0x16c>
      break;
 80058ae:	bf00      	nop
    }
    break;
 80058b0:	e006      	b.n	80058c0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 f9b4 	bl	8006c22 <USBD_CtlError>
    ret = USBD_FAIL;
 80058ba:	2303      	movs	r3, #3
 80058bc:	75fb      	strb	r3, [r7, #23]
    break;
 80058be:	bf00      	nop
  }

  return (uint8_t)ret;
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop

080058cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80058de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e049      	b.n	8005982 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80058f6:	78fa      	ldrb	r2, [r7, #3]
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	440b      	add	r3, r1
 8005904:	3318      	adds	r3, #24
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d029      	beq.n	8005960 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	3318      	adds	r3, #24
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	78f9      	ldrb	r1, [r7, #3]
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	460b      	mov	r3, r1
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	1a5b      	subs	r3, r3, r1
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4403      	add	r3, r0
 800592c:	3344      	adds	r3, #68	; 0x44
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	fbb2 f1f3 	udiv	r1, r2, r3
 8005934:	fb03 f301 	mul.w	r3, r3, r1
 8005938:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800593a:	2b00      	cmp	r3, #0
 800593c:	d110      	bne.n	8005960 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800593e:	78fa      	ldrb	r2, [r7, #3]
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	440b      	add	r3, r1
 800594c:	3318      	adds	r3, #24
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005952:	78f9      	ldrb	r1, [r7, #3]
 8005954:	2300      	movs	r3, #0
 8005956:	2200      	movs	r2, #0
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f004 ffe2 	bl	800a922 <USBD_LL_Transmit>
 800595e:	e00f      	b.n	8005980 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2200      	movs	r2, #0
 8005964:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800597c:	78fa      	ldrb	r2, [r7, #3]
 800597e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b084      	sub	sp, #16
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	460b      	mov	r3, r1
 8005994:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800599c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e015      	b.n	80059d8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	4619      	mov	r1, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f004 fff8 	bl	800a9a6 <USBD_LL_GetRxDataSize>
 80059b6:	4602      	mov	r2, r0
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80059d2:	4611      	mov	r1, r2
 80059d4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059ee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d015      	beq.n	8005a26 <USBD_CDC_EP0_RxReady+0x46>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a00:	2bff      	cmp	r3, #255	; 0xff
 8005a02:	d010      	beq.n	8005a26 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005a12:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a1a:	b292      	uxth	r2, r2
 8005a1c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	22ff      	movs	r2, #255	; 0xff
 8005a22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2243      	movs	r2, #67	; 0x43
 8005a3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005a3e:	4b03      	ldr	r3, [pc, #12]	; (8005a4c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	20000090 	.word	0x20000090

08005a50 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2243      	movs	r2, #67	; 0x43
 8005a5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005a5e:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	2000004c 	.word	0x2000004c

08005a70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2243      	movs	r2, #67	; 0x43
 8005a7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005a7e:	4b03      	ldr	r3, [pc, #12]	; (8005a8c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	200000d4 	.word	0x200000d4

08005a90 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	220a      	movs	r2, #10
 8005a9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005a9e:	4b03      	ldr	r3, [pc, #12]	; (8005aac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	20000008 	.word	0x20000008

08005ab0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e004      	b.n	8005ace <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b087      	sub	sp, #28
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	371c      	adds	r7, #28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b1c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e016      	b.n	8005b80 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	7c1b      	ldrb	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d109      	bne.n	8005b6e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b64:	2101      	movs	r1, #1
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f004 fefc 	bl	800a964 <USBD_LL_PrepareReceive>
 8005b6c:	e007      	b.n	8005b7e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b74:	2340      	movs	r3, #64	; 0x40
 8005b76:	2101      	movs	r1, #1
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f004 fef3 	bl	800a964 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	4613      	mov	r3, r2
 8005b94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e025      	b.n	8005bec <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	79fa      	ldrb	r2, [r7, #7]
 8005bde:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f004 fd69 	bl	800a6b8 <USBD_LL_Init>
 8005be6:	4603      	mov	r3, r0
 8005be8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e010      	b.n	8005c2e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	f107 020e 	add.w	r2, r7, #14
 8005c20:	4610      	mov	r0, r2
 8005c22:	4798      	blx	r3
 8005c24:	4602      	mov	r2, r0
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b082      	sub	sp, #8
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f004 fd86 	bl	800a750 <USBD_LL_Start>
 8005c44:	4603      	mov	r3, r0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005c70:	2303      	movs	r3, #3
 8005c72:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d009      	beq.n	8005c92 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	78fa      	ldrb	r2, [r7, #3]
 8005c88:	4611      	mov	r1, r2
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	4798      	blx	r3
 8005c8e:	4603      	mov	r3, r0
 8005c90:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d007      	beq.n	8005cc2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	78fa      	ldrb	r2, [r7, #3]
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	4798      	blx	r3
  }

  return USBD_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cdc:	6839      	ldr	r1, [r7, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 ff65 	bl	8006bae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d00:	f003 031f 	and.w	r3, r3, #31
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d01a      	beq.n	8005d3e <USBD_LL_SetupStage+0x72>
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d822      	bhi.n	8005d52 <USBD_LL_SetupStage+0x86>
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <USBD_LL_SetupStage+0x4a>
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d00a      	beq.n	8005d2a <USBD_LL_SetupStage+0x5e>
 8005d14:	e01d      	b.n	8005d52 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fa18 	bl	8006154 <USBD_StdDevReq>
 8005d24:	4603      	mov	r3, r0
 8005d26:	73fb      	strb	r3, [r7, #15]
      break;
 8005d28:	e020      	b.n	8005d6c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fa7c 	bl	8006230 <USBD_StdItfReq>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d3c:	e016      	b.n	8005d6c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 faba 	bl	80062c0 <USBD_StdEPReq>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d50:	e00c      	b.n	8005d6c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	4619      	mov	r1, r3
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f004 fd55 	bl	800a810 <USBD_LL_StallEP>
 8005d66:	4603      	mov	r3, r0
 8005d68:	73fb      	strb	r3, [r7, #15]
      break;
 8005d6a:	bf00      	nop
  }

  return ret;
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b086      	sub	sp, #24
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	607a      	str	r2, [r7, #4]
 8005d82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005d84:	7afb      	ldrb	r3, [r7, #11]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d137      	bne.n	8005dfa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005d90:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d14a      	bne.n	8005e32 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d913      	bls.n	8005dd0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	1ad2      	subs	r2, r2, r3
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	bf28      	it	cs
 8005dc2:	4613      	movcs	r3, r2
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 ffe4 	bl	8006d96 <USBD_CtlContinueRx>
 8005dce:	e030      	b.n	8005e32 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d105      	bne.n	8005df2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 ffe0 	bl	8006db8 <USBD_CtlSendStatus>
 8005df8:	e01b      	b.n	8005e32 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d013      	beq.n	8005e2e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d10e      	bne.n	8005e2e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	7afa      	ldrb	r2, [r7, #11]
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	4798      	blx	r3
 8005e20:	4603      	mov	r3, r0
 8005e22:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
 8005e2c:	e002      	b.n	8005e34 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e000      	b.n	8005e34 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	460b      	mov	r3, r1
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005e4a:	7afb      	ldrb	r3, [r7, #11]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d16a      	bne.n	8005f26 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3314      	adds	r3, #20
 8005e54:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d155      	bne.n	8005f0c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d914      	bls.n	8005e96 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	689a      	ldr	r2, [r3, #8]
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	1ad2      	subs	r2, r2, r3
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	6879      	ldr	r1, [r7, #4]
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 ff59 	bl	8006d3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e88:	2300      	movs	r3, #0
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f004 fd68 	bl	800a964 <USBD_LL_PrepareReceive>
 8005e94:	e03a      	b.n	8005f0c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d11c      	bne.n	8005edc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d316      	bcc.n	8005edc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d20f      	bcs.n	8005edc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 ff3a 	bl	8006d3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ece:	2300      	movs	r3, #0
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f004 fd45 	bl	800a964 <USBD_LL_PrepareReceive>
 8005eda:	e017      	b.n	8005f0c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00a      	beq.n	8005efe <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d105      	bne.n	8005efe <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005efe:	2180      	movs	r1, #128	; 0x80
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f004 fc85 	bl	800a810 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 ff69 	bl	8006dde <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d123      	bne.n	8005f5e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f7ff fe99 	bl	8005c4e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005f24:	e01b      	b.n	8005f5e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d013      	beq.n	8005f5a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	d10e      	bne.n	8005f5a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	7afa      	ldrb	r2, [r7, #11]
 8005f46:	4611      	mov	r1, r2
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	4798      	blx	r3
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005f50:	7dfb      	ldrb	r3, [r7, #23]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005f56:	7dfb      	ldrb	r3, [r7, #23]
 8005f58:	e002      	b.n	8005f60 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e000      	b.n	8005f60 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d009      	beq.n	8005fac <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6852      	ldr	r2, [r2, #4]
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fac:	2340      	movs	r3, #64	; 0x40
 8005fae:	2200      	movs	r2, #0
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f004 fbe7 	bl	800a786 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2240      	movs	r2, #64	; 0x40
 8005fc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fc8:	2340      	movs	r3, #64	; 0x40
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2180      	movs	r1, #128	; 0x80
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f004 fbd9 	bl	800a786 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2240      	movs	r2, #64	; 0x40
 8005fde:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	78fa      	ldrb	r2, [r7, #3]
 8005ffa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2204      	movs	r2, #4
 8006022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006042:	2b04      	cmp	r3, #4
 8006044:	d105      	bne.n	8006052 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800606e:	2b03      	cmp	r3, #3
 8006070:	d10b      	bne.n	800608a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	460b      	mov	r3, r1
 800609e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	460b      	mov	r3, r1
 80060b8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b082      	sub	sp, #8
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d009      	beq.n	800610c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6852      	ldr	r2, [r2, #4]
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	4611      	mov	r1, r2
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	4798      	blx	r3
  }

  return USBD_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006116:	b480      	push	{r7}
 8006118:	b087      	sub	sp, #28
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	3301      	adds	r3, #1
 800612c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006134:	8a3b      	ldrh	r3, [r7, #16]
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	b21a      	sxth	r2, r3
 800613a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800613e:	4313      	orrs	r3, r2
 8006140:	b21b      	sxth	r3, r3
 8006142:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006144:	89fb      	ldrh	r3, [r7, #14]
}
 8006146:	4618      	mov	r0, r3
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
	...

08006154 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800616a:	2b40      	cmp	r3, #64	; 0x40
 800616c:	d005      	beq.n	800617a <USBD_StdDevReq+0x26>
 800616e:	2b40      	cmp	r3, #64	; 0x40
 8006170:	d853      	bhi.n	800621a <USBD_StdDevReq+0xc6>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00b      	beq.n	800618e <USBD_StdDevReq+0x3a>
 8006176:	2b20      	cmp	r3, #32
 8006178:	d14f      	bne.n	800621a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	6839      	ldr	r1, [r7, #0]
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
 8006188:	4603      	mov	r3, r0
 800618a:	73fb      	strb	r3, [r7, #15]
    break;
 800618c:	e04a      	b.n	8006224 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	785b      	ldrb	r3, [r3, #1]
 8006192:	2b09      	cmp	r3, #9
 8006194:	d83b      	bhi.n	800620e <USBD_StdDevReq+0xba>
 8006196:	a201      	add	r2, pc, #4	; (adr r2, 800619c <USBD_StdDevReq+0x48>)
 8006198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619c:	080061f1 	.word	0x080061f1
 80061a0:	08006205 	.word	0x08006205
 80061a4:	0800620f 	.word	0x0800620f
 80061a8:	080061fb 	.word	0x080061fb
 80061ac:	0800620f 	.word	0x0800620f
 80061b0:	080061cf 	.word	0x080061cf
 80061b4:	080061c5 	.word	0x080061c5
 80061b8:	0800620f 	.word	0x0800620f
 80061bc:	080061e7 	.word	0x080061e7
 80061c0:	080061d9 	.word	0x080061d9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f9d8 	bl	800657c <USBD_GetDescriptor>
      break;
 80061cc:	e024      	b.n	8006218 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80061ce:	6839      	ldr	r1, [r7, #0]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fb67 	bl	80068a4 <USBD_SetAddress>
      break;
 80061d6:	e01f      	b.n	8006218 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fba6 	bl	800692c <USBD_SetConfig>
 80061e0:	4603      	mov	r3, r0
 80061e2:	73fb      	strb	r3, [r7, #15]
      break;
 80061e4:	e018      	b.n	8006218 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fc43 	bl	8006a74 <USBD_GetConfig>
      break;
 80061ee:	e013      	b.n	8006218 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fc73 	bl	8006ade <USBD_GetStatus>
      break;
 80061f8:	e00e      	b.n	8006218 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80061fa:	6839      	ldr	r1, [r7, #0]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 fca1 	bl	8006b44 <USBD_SetFeature>
      break;
 8006202:	e009      	b.n	8006218 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fcb0 	bl	8006b6c <USBD_ClrFeature>
      break;
 800620c:	e004      	b.n	8006218 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fd06 	bl	8006c22 <USBD_CtlError>
      break;
 8006216:	bf00      	nop
    }
    break;
 8006218:	e004      	b.n	8006224 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800621a:	6839      	ldr	r1, [r7, #0]
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fd00 	bl	8006c22 <USBD_CtlError>
    break;
 8006222:	bf00      	nop
  }

  return ret;
 8006224:	7bfb      	ldrb	r3, [r7, #15]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop

08006230 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006246:	2b40      	cmp	r3, #64	; 0x40
 8006248:	d005      	beq.n	8006256 <USBD_StdItfReq+0x26>
 800624a:	2b40      	cmp	r3, #64	; 0x40
 800624c:	d82e      	bhi.n	80062ac <USBD_StdItfReq+0x7c>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <USBD_StdItfReq+0x26>
 8006252:	2b20      	cmp	r3, #32
 8006254:	d12a      	bne.n	80062ac <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800625c:	3b01      	subs	r3, #1
 800625e:	2b02      	cmp	r3, #2
 8006260:	d81d      	bhi.n	800629e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	889b      	ldrh	r3, [r3, #4]
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b01      	cmp	r3, #1
 800626a:	d813      	bhi.n	8006294 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	4798      	blx	r3
 800627a:	4603      	mov	r3, r0
 800627c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	88db      	ldrh	r3, [r3, #6]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d110      	bne.n	80062a8 <USBD_StdItfReq+0x78>
 8006286:	7bfb      	ldrb	r3, [r7, #15]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10d      	bne.n	80062a8 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fd93 	bl	8006db8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006292:	e009      	b.n	80062a8 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fcc3 	bl	8006c22 <USBD_CtlError>
      break;
 800629c:	e004      	b.n	80062a8 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fcbe 	bl	8006c22 <USBD_CtlError>
      break;
 80062a6:	e000      	b.n	80062aa <USBD_StdItfReq+0x7a>
      break;
 80062a8:	bf00      	nop
    }
    break;
 80062aa:	e004      	b.n	80062b6 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fcb7 	bl	8006c22 <USBD_CtlError>
    break;
 80062b4:	bf00      	nop
  }

  return ret;
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	889b      	ldrh	r3, [r3, #4]
 80062d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062dc:	2b40      	cmp	r3, #64	; 0x40
 80062de:	d007      	beq.n	80062f0 <USBD_StdEPReq+0x30>
 80062e0:	2b40      	cmp	r3, #64	; 0x40
 80062e2:	f200 8140 	bhi.w	8006566 <USBD_StdEPReq+0x2a6>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00c      	beq.n	8006304 <USBD_StdEPReq+0x44>
 80062ea:	2b20      	cmp	r3, #32
 80062ec:	f040 813b 	bne.w	8006566 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	4798      	blx	r3
 80062fe:	4603      	mov	r3, r0
 8006300:	73fb      	strb	r3, [r7, #15]
    break;
 8006302:	e135      	b.n	8006570 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	785b      	ldrb	r3, [r3, #1]
 8006308:	2b03      	cmp	r3, #3
 800630a:	d007      	beq.n	800631c <USBD_StdEPReq+0x5c>
 800630c:	2b03      	cmp	r3, #3
 800630e:	f300 8124 	bgt.w	800655a <USBD_StdEPReq+0x29a>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d07b      	beq.n	800640e <USBD_StdEPReq+0x14e>
 8006316:	2b01      	cmp	r3, #1
 8006318:	d03b      	beq.n	8006392 <USBD_StdEPReq+0xd2>
 800631a:	e11e      	b.n	800655a <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006322:	2b02      	cmp	r3, #2
 8006324:	d002      	beq.n	800632c <USBD_StdEPReq+0x6c>
 8006326:	2b03      	cmp	r3, #3
 8006328:	d016      	beq.n	8006358 <USBD_StdEPReq+0x98>
 800632a:	e02c      	b.n	8006386 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800632c:	7bbb      	ldrb	r3, [r7, #14]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00d      	beq.n	800634e <USBD_StdEPReq+0x8e>
 8006332:	7bbb      	ldrb	r3, [r7, #14]
 8006334:	2b80      	cmp	r3, #128	; 0x80
 8006336:	d00a      	beq.n	800634e <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006338:	7bbb      	ldrb	r3, [r7, #14]
 800633a:	4619      	mov	r1, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f004 fa67 	bl	800a810 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006342:	2180      	movs	r1, #128	; 0x80
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f004 fa63 	bl	800a810 <USBD_LL_StallEP>
 800634a:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800634c:	e020      	b.n	8006390 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fc66 	bl	8006c22 <USBD_CtlError>
        break;
 8006356:	e01b      	b.n	8006390 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	885b      	ldrh	r3, [r3, #2]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10e      	bne.n	800637e <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006360:	7bbb      	ldrb	r3, [r7, #14]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00b      	beq.n	800637e <USBD_StdEPReq+0xbe>
 8006366:	7bbb      	ldrb	r3, [r7, #14]
 8006368:	2b80      	cmp	r3, #128	; 0x80
 800636a:	d008      	beq.n	800637e <USBD_StdEPReq+0xbe>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	88db      	ldrh	r3, [r3, #6]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d104      	bne.n	800637e <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006374:	7bbb      	ldrb	r3, [r7, #14]
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f004 fa49 	bl	800a810 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fd1a 	bl	8006db8 <USBD_CtlSendStatus>

        break;
 8006384:	e004      	b.n	8006390 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8006386:	6839      	ldr	r1, [r7, #0]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fc4a 	bl	8006c22 <USBD_CtlError>
        break;
 800638e:	bf00      	nop
      }
      break;
 8006390:	e0e8      	b.n	8006564 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006398:	2b02      	cmp	r3, #2
 800639a:	d002      	beq.n	80063a2 <USBD_StdEPReq+0xe2>
 800639c:	2b03      	cmp	r3, #3
 800639e:	d016      	beq.n	80063ce <USBD_StdEPReq+0x10e>
 80063a0:	e02e      	b.n	8006400 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063a2:	7bbb      	ldrb	r3, [r7, #14]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00d      	beq.n	80063c4 <USBD_StdEPReq+0x104>
 80063a8:	7bbb      	ldrb	r3, [r7, #14]
 80063aa:	2b80      	cmp	r3, #128	; 0x80
 80063ac:	d00a      	beq.n	80063c4 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80063ae:	7bbb      	ldrb	r3, [r7, #14]
 80063b0:	4619      	mov	r1, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f004 fa2c 	bl	800a810 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80063b8:	2180      	movs	r1, #128	; 0x80
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f004 fa28 	bl	800a810 <USBD_LL_StallEP>
 80063c0:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80063c2:	e023      	b.n	800640c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fc2b 	bl	8006c22 <USBD_CtlError>
        break;
 80063cc:	e01e      	b.n	800640c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	885b      	ldrh	r3, [r3, #2]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d119      	bne.n	800640a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d004      	beq.n	80063ea <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063e0:	7bbb      	ldrb	r3, [r7, #14]
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f004 fa32 	bl	800a84e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fce4 	bl	8006db8 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	4798      	blx	r3
        }
        break;
 80063fe:	e004      	b.n	800640a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006400:	6839      	ldr	r1, [r7, #0]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fc0d 	bl	8006c22 <USBD_CtlError>
        break;
 8006408:	e000      	b.n	800640c <USBD_StdEPReq+0x14c>
        break;
 800640a:	bf00      	nop
      }
      break;
 800640c:	e0aa      	b.n	8006564 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006414:	2b02      	cmp	r3, #2
 8006416:	d002      	beq.n	800641e <USBD_StdEPReq+0x15e>
 8006418:	2b03      	cmp	r3, #3
 800641a:	d032      	beq.n	8006482 <USBD_StdEPReq+0x1c2>
 800641c:	e097      	b.n	800654e <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d007      	beq.n	8006434 <USBD_StdEPReq+0x174>
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	2b80      	cmp	r3, #128	; 0x80
 8006428:	d004      	beq.n	8006434 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800642a:	6839      	ldr	r1, [r7, #0]
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fbf8 	bl	8006c22 <USBD_CtlError>
          break;
 8006432:	e091      	b.n	8006558 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006438:	2b00      	cmp	r3, #0
 800643a:	da0b      	bge.n	8006454 <USBD_StdEPReq+0x194>
 800643c:	7bbb      	ldrb	r3, [r7, #14]
 800643e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	3310      	adds	r3, #16
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	4413      	add	r3, r2
 8006450:	3304      	adds	r3, #4
 8006452:	e00b      	b.n	800646c <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800645a:	4613      	mov	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	4413      	add	r3, r2
 800646a:	3304      	adds	r3, #4
 800646c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2202      	movs	r2, #2
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fc42 	bl	8006d04 <USBD_CtlSendData>
        break;
 8006480:	e06a      	b.n	8006558 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006482:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006486:	2b00      	cmp	r3, #0
 8006488:	da11      	bge.n	80064ae <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800648a:	7bbb      	ldrb	r3, [r7, #14]
 800648c:	f003 020f 	and.w	r2, r3, #15
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	440b      	add	r3, r1
 800649c:	3324      	adds	r3, #36	; 0x24
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d117      	bne.n	80064d4 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fbbb 	bl	8006c22 <USBD_CtlError>
            break;
 80064ac:	e054      	b.n	8006558 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064ae:	7bbb      	ldrb	r3, [r7, #14]
 80064b0:	f003 020f 	and.w	r2, r3, #15
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	440b      	add	r3, r1
 80064c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d104      	bne.n	80064d4 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fba8 	bl	8006c22 <USBD_CtlError>
            break;
 80064d2:	e041      	b.n	8006558 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	da0b      	bge.n	80064f4 <USBD_StdEPReq+0x234>
 80064dc:	7bbb      	ldrb	r3, [r7, #14]
 80064de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064e2:	4613      	mov	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	3310      	adds	r3, #16
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	4413      	add	r3, r2
 80064f0:	3304      	adds	r3, #4
 80064f2:	e00b      	b.n	800650c <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064fa:	4613      	mov	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	4413      	add	r3, r2
 800650a:	3304      	adds	r3, #4
 800650c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800650e:	7bbb      	ldrb	r3, [r7, #14]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <USBD_StdEPReq+0x25a>
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	2b80      	cmp	r3, #128	; 0x80
 8006518:	d103      	bne.n	8006522 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	e00e      	b.n	8006540 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006522:	7bbb      	ldrb	r3, [r7, #14]
 8006524:	4619      	mov	r1, r3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f004 f9b0 	bl	800a88c <USBD_LL_IsStallEP>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2201      	movs	r2, #1
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	e002      	b.n	8006540 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2202      	movs	r2, #2
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fbdc 	bl	8006d04 <USBD_CtlSendData>
          break;
 800654c:	e004      	b.n	8006558 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fb66 	bl	8006c22 <USBD_CtlError>
        break;
 8006556:	bf00      	nop
      }
      break;
 8006558:	e004      	b.n	8006564 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fb60 	bl	8006c22 <USBD_CtlError>
      break;
 8006562:	bf00      	nop
    }
    break;
 8006564:	e004      	b.n	8006570 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fb5a 	bl	8006c22 <USBD_CtlError>
    break;
 800656e:	bf00      	nop
  }

  return ret;
 8006570:	7bfb      	ldrb	r3, [r7, #15]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
	...

0800657c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	885b      	ldrh	r3, [r3, #2]
 8006596:	0a1b      	lsrs	r3, r3, #8
 8006598:	b29b      	uxth	r3, r3
 800659a:	3b01      	subs	r3, #1
 800659c:	2b0e      	cmp	r3, #14
 800659e:	f200 8152 	bhi.w	8006846 <USBD_GetDescriptor+0x2ca>
 80065a2:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <USBD_GetDescriptor+0x2c>)
 80065a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a8:	08006619 	.word	0x08006619
 80065ac:	08006631 	.word	0x08006631
 80065b0:	08006671 	.word	0x08006671
 80065b4:	08006847 	.word	0x08006847
 80065b8:	08006847 	.word	0x08006847
 80065bc:	080067e7 	.word	0x080067e7
 80065c0:	08006813 	.word	0x08006813
 80065c4:	08006847 	.word	0x08006847
 80065c8:	08006847 	.word	0x08006847
 80065cc:	08006847 	.word	0x08006847
 80065d0:	08006847 	.word	0x08006847
 80065d4:	08006847 	.word	0x08006847
 80065d8:	08006847 	.word	0x08006847
 80065dc:	08006847 	.word	0x08006847
 80065e0:	080065e5 	.word	0x080065e5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00b      	beq.n	8006608 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	7c12      	ldrb	r2, [r2, #16]
 80065fc:	f107 0108 	add.w	r1, r7, #8
 8006600:	4610      	mov	r0, r2
 8006602:	4798      	blx	r3
 8006604:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006606:	e126      	b.n	8006856 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fb09 	bl	8006c22 <USBD_CtlError>
      err++;
 8006610:	7afb      	ldrb	r3, [r7, #11]
 8006612:	3301      	adds	r3, #1
 8006614:	72fb      	strb	r3, [r7, #11]
    break;
 8006616:	e11e      	b.n	8006856 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	7c12      	ldrb	r2, [r2, #16]
 8006624:	f107 0108 	add.w	r1, r7, #8
 8006628:	4610      	mov	r0, r2
 800662a:	4798      	blx	r3
 800662c:	60f8      	str	r0, [r7, #12]
    break;
 800662e:	e112      	b.n	8006856 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	7c1b      	ldrb	r3, [r3, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10d      	bne.n	8006654 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800663e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006640:	f107 0208 	add.w	r2, r7, #8
 8006644:	4610      	mov	r0, r2
 8006646:	4798      	blx	r3
 8006648:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	3301      	adds	r3, #1
 800664e:	2202      	movs	r2, #2
 8006650:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006652:	e100      	b.n	8006856 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665c:	f107 0208 	add.w	r2, r7, #8
 8006660:	4610      	mov	r0, r2
 8006662:	4798      	blx	r3
 8006664:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3301      	adds	r3, #1
 800666a:	2202      	movs	r2, #2
 800666c:	701a      	strb	r2, [r3, #0]
    break;
 800666e:	e0f2      	b.n	8006856 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	885b      	ldrh	r3, [r3, #2]
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b05      	cmp	r3, #5
 8006678:	f200 80ac 	bhi.w	80067d4 <USBD_GetDescriptor+0x258>
 800667c:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <USBD_GetDescriptor+0x108>)
 800667e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006682:	bf00      	nop
 8006684:	0800669d 	.word	0x0800669d
 8006688:	080066d1 	.word	0x080066d1
 800668c:	08006705 	.word	0x08006705
 8006690:	08006739 	.word	0x08006739
 8006694:	0800676d 	.word	0x0800676d
 8006698:	080067a1 	.word	0x080067a1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00b      	beq.n	80066c0 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	7c12      	ldrb	r2, [r2, #16]
 80066b4:	f107 0108 	add.w	r1, r7, #8
 80066b8:	4610      	mov	r0, r2
 80066ba:	4798      	blx	r3
 80066bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066be:	e091      	b.n	80067e4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 faad 	bl	8006c22 <USBD_CtlError>
        err++;
 80066c8:	7afb      	ldrb	r3, [r7, #11]
 80066ca:	3301      	adds	r3, #1
 80066cc:	72fb      	strb	r3, [r7, #11]
      break;
 80066ce:	e089      	b.n	80067e4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00b      	beq.n	80066f4 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	7c12      	ldrb	r2, [r2, #16]
 80066e8:	f107 0108 	add.w	r1, r7, #8
 80066ec:	4610      	mov	r0, r2
 80066ee:	4798      	blx	r3
 80066f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066f2:	e077      	b.n	80067e4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fa93 	bl	8006c22 <USBD_CtlError>
        err++;
 80066fc:	7afb      	ldrb	r3, [r7, #11]
 80066fe:	3301      	adds	r3, #1
 8006700:	72fb      	strb	r3, [r7, #11]
      break;
 8006702:	e06f      	b.n	80067e4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00b      	beq.n	8006728 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	7c12      	ldrb	r2, [r2, #16]
 800671c:	f107 0108 	add.w	r1, r7, #8
 8006720:	4610      	mov	r0, r2
 8006722:	4798      	blx	r3
 8006724:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006726:	e05d      	b.n	80067e4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fa79 	bl	8006c22 <USBD_CtlError>
        err++;
 8006730:	7afb      	ldrb	r3, [r7, #11]
 8006732:	3301      	adds	r3, #1
 8006734:	72fb      	strb	r3, [r7, #11]
      break;
 8006736:	e055      	b.n	80067e4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00b      	beq.n	800675c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	7c12      	ldrb	r2, [r2, #16]
 8006750:	f107 0108 	add.w	r1, r7, #8
 8006754:	4610      	mov	r0, r2
 8006756:	4798      	blx	r3
 8006758:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800675a:	e043      	b.n	80067e4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fa5f 	bl	8006c22 <USBD_CtlError>
        err++;
 8006764:	7afb      	ldrb	r3, [r7, #11]
 8006766:	3301      	adds	r3, #1
 8006768:	72fb      	strb	r3, [r7, #11]
      break;
 800676a:	e03b      	b.n	80067e4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00b      	beq.n	8006790 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	7c12      	ldrb	r2, [r2, #16]
 8006784:	f107 0108 	add.w	r1, r7, #8
 8006788:	4610      	mov	r0, r2
 800678a:	4798      	blx	r3
 800678c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800678e:	e029      	b.n	80067e4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006790:	6839      	ldr	r1, [r7, #0]
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fa45 	bl	8006c22 <USBD_CtlError>
        err++;
 8006798:	7afb      	ldrb	r3, [r7, #11]
 800679a:	3301      	adds	r3, #1
 800679c:	72fb      	strb	r3, [r7, #11]
      break;
 800679e:	e021      	b.n	80067e4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00b      	beq.n	80067c4 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	7c12      	ldrb	r2, [r2, #16]
 80067b8:	f107 0108 	add.w	r1, r7, #8
 80067bc:	4610      	mov	r0, r2
 80067be:	4798      	blx	r3
 80067c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067c2:	e00f      	b.n	80067e4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fa2b 	bl	8006c22 <USBD_CtlError>
        err++;
 80067cc:	7afb      	ldrb	r3, [r7, #11]
 80067ce:	3301      	adds	r3, #1
 80067d0:	72fb      	strb	r3, [r7, #11]
      break;
 80067d2:	e007      	b.n	80067e4 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fa23 	bl	8006c22 <USBD_CtlError>
      err++;
 80067dc:	7afb      	ldrb	r3, [r7, #11]
 80067de:	3301      	adds	r3, #1
 80067e0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80067e2:	bf00      	nop
    }
    break;
 80067e4:	e037      	b.n	8006856 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	7c1b      	ldrb	r3, [r3, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d109      	bne.n	8006802 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f6:	f107 0208 	add.w	r2, r7, #8
 80067fa:	4610      	mov	r0, r2
 80067fc:	4798      	blx	r3
 80067fe:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006800:	e029      	b.n	8006856 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fa0c 	bl	8006c22 <USBD_CtlError>
      err++;
 800680a:	7afb      	ldrb	r3, [r7, #11]
 800680c:	3301      	adds	r3, #1
 800680e:	72fb      	strb	r3, [r7, #11]
    break;
 8006810:	e021      	b.n	8006856 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	7c1b      	ldrb	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10d      	bne.n	8006836 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006822:	f107 0208 	add.w	r2, r7, #8
 8006826:	4610      	mov	r0, r2
 8006828:	4798      	blx	r3
 800682a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	3301      	adds	r3, #1
 8006830:	2207      	movs	r2, #7
 8006832:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006834:	e00f      	b.n	8006856 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f9f2 	bl	8006c22 <USBD_CtlError>
      err++;
 800683e:	7afb      	ldrb	r3, [r7, #11]
 8006840:	3301      	adds	r3, #1
 8006842:	72fb      	strb	r3, [r7, #11]
    break;
 8006844:	e007      	b.n	8006856 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f9ea 	bl	8006c22 <USBD_CtlError>
    err++;
 800684e:	7afb      	ldrb	r3, [r7, #11]
 8006850:	3301      	adds	r3, #1
 8006852:	72fb      	strb	r3, [r7, #11]
    break;
 8006854:	bf00      	nop
  }

  if (err != 0U)
 8006856:	7afb      	ldrb	r3, [r7, #11]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d11e      	bne.n	800689a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	88db      	ldrh	r3, [r3, #6]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d016      	beq.n	8006892 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8006864:	893b      	ldrh	r3, [r7, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00e      	beq.n	8006888 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	88da      	ldrh	r2, [r3, #6]
 800686e:	893b      	ldrh	r3, [r7, #8]
 8006870:	4293      	cmp	r3, r2
 8006872:	bf28      	it	cs
 8006874:	4613      	movcs	r3, r2
 8006876:	b29b      	uxth	r3, r3
 8006878:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800687a:	893b      	ldrh	r3, [r7, #8]
 800687c:	461a      	mov	r2, r3
 800687e:	68f9      	ldr	r1, [r7, #12]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fa3f 	bl	8006d04 <USBD_CtlSendData>
 8006886:	e009      	b.n	800689c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f9c9 	bl	8006c22 <USBD_CtlError>
 8006890:	e004      	b.n	800689c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fa90 	bl	8006db8 <USBD_CtlSendStatus>
 8006898:	e000      	b.n	800689c <USBD_GetDescriptor+0x320>
    return;
 800689a:	bf00      	nop
    }
  }
}
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop

080068a4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	889b      	ldrh	r3, [r3, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d130      	bne.n	8006918 <USBD_SetAddress+0x74>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	88db      	ldrh	r3, [r3, #6]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d12c      	bne.n	8006918 <USBD_SetAddress+0x74>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	885b      	ldrh	r3, [r3, #2]
 80068c2:	2b7f      	cmp	r3, #127	; 0x7f
 80068c4:	d828      	bhi.n	8006918 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	885b      	ldrh	r3, [r3, #2]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d8:	2b03      	cmp	r3, #3
 80068da:	d104      	bne.n	80068e6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f99f 	bl	8006c22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e4:	e01d      	b.n	8006922 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	7bfa      	ldrb	r2, [r7, #15]
 80068ea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f003 fff6 	bl	800a8e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fa5d 	bl	8006db8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d004      	beq.n	800690e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800690c:	e009      	b.n	8006922 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006916:	e004      	b.n	8006922 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f981 	bl	8006c22 <USBD_CtlError>
  }
}
 8006920:	bf00      	nop
 8006922:	bf00      	nop
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	885b      	ldrh	r3, [r3, #2]
 800693e:	b2da      	uxtb	r2, r3
 8006940:	4b4b      	ldr	r3, [pc, #300]	; (8006a70 <USBD_SetConfig+0x144>)
 8006942:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006944:	4b4a      	ldr	r3, [pc, #296]	; (8006a70 <USBD_SetConfig+0x144>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d905      	bls.n	8006958 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f967 	bl	8006c22 <USBD_CtlError>
    return USBD_FAIL;
 8006954:	2303      	movs	r3, #3
 8006956:	e087      	b.n	8006a68 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695e:	2b02      	cmp	r3, #2
 8006960:	d002      	beq.n	8006968 <USBD_SetConfig+0x3c>
 8006962:	2b03      	cmp	r3, #3
 8006964:	d025      	beq.n	80069b2 <USBD_SetConfig+0x86>
 8006966:	e071      	b.n	8006a4c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006968:	4b41      	ldr	r3, [pc, #260]	; (8006a70 <USBD_SetConfig+0x144>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01c      	beq.n	80069aa <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006970:	4b3f      	ldr	r3, [pc, #252]	; (8006a70 <USBD_SetConfig+0x144>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	461a      	mov	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800697a:	4b3d      	ldr	r3, [pc, #244]	; (8006a70 <USBD_SetConfig+0x144>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	4619      	mov	r1, r3
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff f96f 	bl	8005c64 <USBD_SetClassConfig>
 8006986:	4603      	mov	r3, r0
 8006988:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d004      	beq.n	800699a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f945 	bl	8006c22 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006998:	e065      	b.n	8006a66 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fa0c 	bl	8006db8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2203      	movs	r2, #3
 80069a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80069a8:	e05d      	b.n	8006a66 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa04 	bl	8006db8 <USBD_CtlSendStatus>
    break;
 80069b0:	e059      	b.n	8006a66 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80069b2:	4b2f      	ldr	r3, [pc, #188]	; (8006a70 <USBD_SetConfig+0x144>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d112      	bne.n	80069e0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2202      	movs	r2, #2
 80069be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80069c2:	4b2b      	ldr	r3, [pc, #172]	; (8006a70 <USBD_SetConfig+0x144>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069cc:	4b28      	ldr	r3, [pc, #160]	; (8006a70 <USBD_SetConfig+0x144>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff f962 	bl	8005c9c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f9ed 	bl	8006db8 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80069de:	e042      	b.n	8006a66 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80069e0:	4b23      	ldr	r3, [pc, #140]	; (8006a70 <USBD_SetConfig+0x144>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d02a      	beq.n	8006a44 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	4619      	mov	r1, r3
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff f950 	bl	8005c9c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80069fc:	4b1c      	ldr	r3, [pc, #112]	; (8006a70 <USBD_SetConfig+0x144>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a06:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <USBD_SetConfig+0x144>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7ff f929 	bl	8005c64 <USBD_SetClassConfig>
 8006a12:	4603      	mov	r3, r0
 8006a14:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00f      	beq.n	8006a3c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f8ff 	bl	8006c22 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff f935 	bl	8005c9c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2202      	movs	r2, #2
 8006a36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006a3a:	e014      	b.n	8006a66 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f9bb 	bl	8006db8 <USBD_CtlSendStatus>
    break;
 8006a42:	e010      	b.n	8006a66 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f9b7 	bl	8006db8 <USBD_CtlSendStatus>
    break;
 8006a4a:	e00c      	b.n	8006a66 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f8e7 	bl	8006c22 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a54:	4b06      	ldr	r3, [pc, #24]	; (8006a70 <USBD_SetConfig+0x144>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7ff f91e 	bl	8005c9c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006a60:	2303      	movs	r3, #3
 8006a62:	73fb      	strb	r3, [r7, #15]
    break;
 8006a64:	bf00      	nop
  }

  return ret;
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	20000228 	.word	0x20000228

08006a74 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	88db      	ldrh	r3, [r3, #6]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d004      	beq.n	8006a90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f8ca 	bl	8006c22 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006a8e:	e022      	b.n	8006ad6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	dc02      	bgt.n	8006aa0 <USBD_GetConfig+0x2c>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	dc03      	bgt.n	8006aa6 <USBD_GetConfig+0x32>
 8006a9e:	e015      	b.n	8006acc <USBD_GetConfig+0x58>
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d00b      	beq.n	8006abc <USBD_GetConfig+0x48>
 8006aa4:	e012      	b.n	8006acc <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3308      	adds	r3, #8
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f925 	bl	8006d04 <USBD_CtlSendData>
      break;
 8006aba:	e00c      	b.n	8006ad6 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3304      	adds	r3, #4
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f91d 	bl	8006d04 <USBD_CtlSendData>
      break;
 8006aca:	e004      	b.n	8006ad6 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f8a7 	bl	8006c22 <USBD_CtlError>
      break;
 8006ad4:	bf00      	nop
}
 8006ad6:	bf00      	nop
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b082      	sub	sp, #8
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aee:	3b01      	subs	r3, #1
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d81e      	bhi.n	8006b32 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	88db      	ldrh	r3, [r3, #6]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d004      	beq.n	8006b06 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f88f 	bl	8006c22 <USBD_CtlError>
      break;
 8006b04:	e01a      	b.n	8006b3c <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d005      	beq.n	8006b22 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	f043 0202 	orr.w	r2, r3, #2
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	330c      	adds	r3, #12
 8006b26:	2202      	movs	r2, #2
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f8ea 	bl	8006d04 <USBD_CtlSendData>
    break;
 8006b30:	e004      	b.n	8006b3c <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f874 	bl	8006c22 <USBD_CtlError>
    break;
 8006b3a:	bf00      	nop
  }
}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	885b      	ldrh	r3, [r3, #2]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d106      	bne.n	8006b64 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f92a 	bl	8006db8 <USBD_CtlSendStatus>
  }
}
 8006b64:	bf00      	nop
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d80b      	bhi.n	8006b9a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	885b      	ldrh	r3, [r3, #2]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d10c      	bne.n	8006ba4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f910 	bl	8006db8 <USBD_CtlSendStatus>
      }
      break;
 8006b98:	e004      	b.n	8006ba4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f840 	bl	8006c22 <USBD_CtlError>
      break;
 8006ba2:	e000      	b.n	8006ba6 <USBD_ClrFeature+0x3a>
      break;
 8006ba4:	bf00      	nop
  }
}
 8006ba6:	bf00      	nop
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	781a      	ldrb	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	781a      	ldrb	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f7ff fa9c 	bl	8006116 <SWAPBYTE>
 8006bde:	4603      	mov	r3, r0
 8006be0:	461a      	mov	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3301      	adds	r3, #1
 8006bea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f7ff fa8f 	bl	8006116 <SWAPBYTE>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	3301      	adds	r3, #1
 8006c04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f7ff fa82 	bl	8006116 <SWAPBYTE>
 8006c12:	4603      	mov	r3, r0
 8006c14:	461a      	mov	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	80da      	strh	r2, [r3, #6]
}
 8006c1a:	bf00      	nop
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b082      	sub	sp, #8
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c2c:	2180      	movs	r1, #128	; 0x80
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f003 fdee 	bl	800a810 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c34:	2100      	movs	r1, #0
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f003 fdea 	bl	800a810 <USBD_LL_StallEP>
}
 8006c3c:	bf00      	nop
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d036      	beq.n	8006cc8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c5e:	6938      	ldr	r0, [r7, #16]
 8006c60:	f000 f836 	bl	8006cd0 <USBD_GetLen>
 8006c64:	4603      	mov	r3, r0
 8006c66:	3301      	adds	r3, #1
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	005b      	lsls	r3, r3, #1
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	4413      	add	r3, r2
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	7812      	ldrb	r2, [r2, #0]
 8006c7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c7e:	7dfb      	ldrb	r3, [r7, #23]
 8006c80:	3301      	adds	r3, #1
 8006c82:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	4413      	add	r3, r2
 8006c8a:	2203      	movs	r2, #3
 8006c8c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
 8006c90:	3301      	adds	r3, #1
 8006c92:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c94:	e013      	b.n	8006cbe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	7812      	ldrb	r2, [r2, #0]
 8006ca0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	613b      	str	r3, [r7, #16]
    idx++;
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
 8006caa:	3301      	adds	r3, #1
 8006cac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	701a      	strb	r2, [r3, #0]
    idx++;
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e7      	bne.n	8006c96 <USBD_GetString+0x52>
 8006cc6:	e000      	b.n	8006cca <USBD_GetString+0x86>
    return;
 8006cc8:	bf00      	nop
  }
}
 8006cca:	3718      	adds	r7, #24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ce0:	e005      	b.n	8006cee <USBD_GetLen+0x1e>
  {
    len++;
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	3301      	adds	r3, #1
 8006cec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1f5      	bne.n	8006ce2 <USBD_GetLen+0x12>
  }

  return len;
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	2100      	movs	r1, #0
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f003 fdf9 	bl	800a922 <USBD_LL_Transmit>

  return USBD_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f003 fde8 	bl	800a922 <USBD_LL_Transmit>

  return USBD_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2203      	movs	r2, #3
 8006d6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	2100      	movs	r1, #0
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f003 fdec 	bl	800a964 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b084      	sub	sp, #16
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	2100      	movs	r1, #0
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f003 fddb 	bl	800a964 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2204      	movs	r2, #4
 8006dc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dc8:	2300      	movs	r3, #0
 8006dca:	2200      	movs	r2, #0
 8006dcc:	2100      	movs	r1, #0
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f003 fda7 	bl	800a922 <USBD_LL_Transmit>

  return USBD_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2205      	movs	r2, #5
 8006dea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dee:	2300      	movs	r3, #0
 8006df0:	2200      	movs	r2, #0
 8006df2:	2100      	movs	r1, #0
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f003 fdb5 	bl	800a964 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006e12:	2301      	movs	r3, #1
 8006e14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006e1a:	4b1f      	ldr	r3, [pc, #124]	; (8006e98 <FATFS_LinkDriverEx+0x94>)
 8006e1c:	7a5b      	ldrb	r3, [r3, #9]
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d131      	bne.n	8006e88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006e24:	4b1c      	ldr	r3, [pc, #112]	; (8006e98 <FATFS_LinkDriverEx+0x94>)
 8006e26:	7a5b      	ldrb	r3, [r3, #9]
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	4b1a      	ldr	r3, [pc, #104]	; (8006e98 <FATFS_LinkDriverEx+0x94>)
 8006e2e:	2100      	movs	r1, #0
 8006e30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006e32:	4b19      	ldr	r3, [pc, #100]	; (8006e98 <FATFS_LinkDriverEx+0x94>)
 8006e34:	7a5b      	ldrb	r3, [r3, #9]
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	4a17      	ldr	r2, [pc, #92]	; (8006e98 <FATFS_LinkDriverEx+0x94>)
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006e42:	4b15      	ldr	r3, [pc, #84]	; (8006e98 <FATFS_LinkDriverEx+0x94>)
 8006e44:	7a5b      	ldrb	r3, [r3, #9]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	4b13      	ldr	r3, [pc, #76]	; (8006e98 <FATFS_LinkDriverEx+0x94>)
 8006e4c:	4413      	add	r3, r2
 8006e4e:	79fa      	ldrb	r2, [r7, #7]
 8006e50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006e52:	4b11      	ldr	r3, [pc, #68]	; (8006e98 <FATFS_LinkDriverEx+0x94>)
 8006e54:	7a5b      	ldrb	r3, [r3, #9]
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	b2d1      	uxtb	r1, r2
 8006e5c:	4a0e      	ldr	r2, [pc, #56]	; (8006e98 <FATFS_LinkDriverEx+0x94>)
 8006e5e:	7251      	strb	r1, [r2, #9]
 8006e60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006e62:	7dbb      	ldrb	r3, [r7, #22]
 8006e64:	3330      	adds	r3, #48	; 0x30
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	223a      	movs	r2, #58	; 0x3a
 8006e72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	3302      	adds	r3, #2
 8006e78:	222f      	movs	r2, #47	; 0x2f
 8006e7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	3303      	adds	r3, #3
 8006e80:	2200      	movs	r2, #0
 8006e82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	2000022c 	.word	0x2000022c

08006e9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7ff ffaa 	bl	8006e04 <FATFS_LinkDriverEx>
 8006eb0:	4603      	mov	r3, r0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006eba:	b480      	push	{r7}
 8006ebc:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006ebe:	bf00      	nop
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ece:	f3ef 8305 	mrs	r3, IPSR
 8006ed2:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ed4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10f      	bne.n	8006efa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eda:	f3ef 8310 	mrs	r3, PRIMASK
 8006ede:	607b      	str	r3, [r7, #4]
  return(result);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d105      	bne.n	8006ef2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ee6:	f3ef 8311 	mrs	r3, BASEPRI
 8006eea:	603b      	str	r3, [r7, #0]
  return(result);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d007      	beq.n	8006f02 <osKernelInitialize+0x3a>
 8006ef2:	4b0e      	ldr	r3, [pc, #56]	; (8006f2c <osKernelInitialize+0x64>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d103      	bne.n	8006f02 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006efa:	f06f 0305 	mvn.w	r3, #5
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	e00c      	b.n	8006f1c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006f02:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <osKernelInitialize+0x64>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d105      	bne.n	8006f16 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006f0a:	4b08      	ldr	r3, [pc, #32]	; (8006f2c <osKernelInitialize+0x64>)
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	e002      	b.n	8006f1c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	20000238 	.word	0x20000238

08006f30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f36:	f3ef 8305 	mrs	r3, IPSR
 8006f3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10f      	bne.n	8006f62 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f42:	f3ef 8310 	mrs	r3, PRIMASK
 8006f46:	607b      	str	r3, [r7, #4]
  return(result);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d105      	bne.n	8006f5a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f4e:	f3ef 8311 	mrs	r3, BASEPRI
 8006f52:	603b      	str	r3, [r7, #0]
  return(result);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d007      	beq.n	8006f6a <osKernelStart+0x3a>
 8006f5a:	4b0f      	ldr	r3, [pc, #60]	; (8006f98 <osKernelStart+0x68>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d103      	bne.n	8006f6a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006f62:	f06f 0305 	mvn.w	r3, #5
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	e010      	b.n	8006f8c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006f6a:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <osKernelStart+0x68>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d109      	bne.n	8006f86 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006f72:	f7ff ffa2 	bl	8006eba <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006f76:	4b08      	ldr	r3, [pc, #32]	; (8006f98 <osKernelStart+0x68>)
 8006f78:	2202      	movs	r2, #2
 8006f7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006f7c:	f001 f8ca 	bl	8008114 <vTaskStartScheduler>
      stat = osOK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	e002      	b.n	8006f8c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f8a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	20000238 	.word	0x20000238

08006f9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b090      	sub	sp, #64	; 0x40
 8006fa0:	af04      	add	r7, sp, #16
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fac:	f3ef 8305 	mrs	r3, IPSR
 8006fb0:	61fb      	str	r3, [r7, #28]
  return(result);
 8006fb2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f040 808f 	bne.w	80070d8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fba:	f3ef 8310 	mrs	r3, PRIMASK
 8006fbe:	61bb      	str	r3, [r7, #24]
  return(result);
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d105      	bne.n	8006fd2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fc6:	f3ef 8311 	mrs	r3, BASEPRI
 8006fca:	617b      	str	r3, [r7, #20]
  return(result);
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <osThreadNew+0x3e>
 8006fd2:	4b44      	ldr	r3, [pc, #272]	; (80070e4 <osThreadNew+0x148>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d07e      	beq.n	80070d8 <osThreadNew+0x13c>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d07b      	beq.n	80070d8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006fe0:	2380      	movs	r3, #128	; 0x80
 8006fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006fe4:	2318      	movs	r3, #24
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ff0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d045      	beq.n	8007084 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <osThreadNew+0x6a>
        name = attr->name;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	2b00      	cmp	r3, #0
 8007018:	d008      	beq.n	800702c <osThreadNew+0x90>
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	2b38      	cmp	r3, #56	; 0x38
 800701e:	d805      	bhi.n	800702c <osThreadNew+0x90>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <osThreadNew+0x94>
        return (NULL);
 800702c:	2300      	movs	r3, #0
 800702e:	e054      	b.n	80070da <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	089b      	lsrs	r3, r3, #2
 800703e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00e      	beq.n	8007066 <osThreadNew+0xca>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	2bbb      	cmp	r3, #187	; 0xbb
 800704e:	d90a      	bls.n	8007066 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007054:	2b00      	cmp	r3, #0
 8007056:	d006      	beq.n	8007066 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <osThreadNew+0xca>
        mem = 1;
 8007060:	2301      	movs	r3, #1
 8007062:	623b      	str	r3, [r7, #32]
 8007064:	e010      	b.n	8007088 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10c      	bne.n	8007088 <osThreadNew+0xec>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d108      	bne.n	8007088 <osThreadNew+0xec>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d104      	bne.n	8007088 <osThreadNew+0xec>
          mem = 0;
 800707e:	2300      	movs	r3, #0
 8007080:	623b      	str	r3, [r7, #32]
 8007082:	e001      	b.n	8007088 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007084:	2300      	movs	r3, #0
 8007086:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d110      	bne.n	80070b0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007096:	9202      	str	r2, [sp, #8]
 8007098:	9301      	str	r3, [sp, #4]
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 fe3f 	bl	8007d28 <xTaskCreateStatic>
 80070aa:	4603      	mov	r3, r0
 80070ac:	613b      	str	r3, [r7, #16]
 80070ae:	e013      	b.n	80070d8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d110      	bne.n	80070d8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80070b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	f107 0310 	add.w	r3, r7, #16
 80070be:	9301      	str	r3, [sp, #4]
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 fe90 	bl	8007dee <xTaskCreate>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d001      	beq.n	80070d8 <osThreadNew+0x13c>
          hTask = NULL;
 80070d4:	2300      	movs	r3, #0
 80070d6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80070d8:	693b      	ldr	r3, [r7, #16]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3730      	adds	r7, #48	; 0x30
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20000238 	.word	0x20000238

080070e8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070f0:	f3ef 8305 	mrs	r3, IPSR
 80070f4:	613b      	str	r3, [r7, #16]
  return(result);
 80070f6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10f      	bne.n	800711c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007100:	60fb      	str	r3, [r7, #12]
  return(result);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d105      	bne.n	8007114 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007108:	f3ef 8311 	mrs	r3, BASEPRI
 800710c:	60bb      	str	r3, [r7, #8]
  return(result);
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d007      	beq.n	8007124 <osDelay+0x3c>
 8007114:	4b0a      	ldr	r3, [pc, #40]	; (8007140 <osDelay+0x58>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b02      	cmp	r3, #2
 800711a:	d103      	bne.n	8007124 <osDelay+0x3c>
    stat = osErrorISR;
 800711c:	f06f 0305 	mvn.w	r3, #5
 8007120:	617b      	str	r3, [r7, #20]
 8007122:	e007      	b.n	8007134 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007124:	2300      	movs	r3, #0
 8007126:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d002      	beq.n	8007134 <osDelay+0x4c>
      vTaskDelay(ticks);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 ffba 	bl	80080a8 <vTaskDelay>
    }
  }

  return (stat);
 8007134:	697b      	ldr	r3, [r7, #20]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20000238 	.word	0x20000238

08007144 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4a07      	ldr	r2, [pc, #28]	; (8007170 <vApplicationGetIdleTaskMemory+0x2c>)
 8007154:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	4a06      	ldr	r2, [pc, #24]	; (8007174 <vApplicationGetIdleTaskMemory+0x30>)
 800715a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2280      	movs	r2, #128	; 0x80
 8007160:	601a      	str	r2, [r3, #0]
}
 8007162:	bf00      	nop
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	2000023c 	.word	0x2000023c
 8007174:	200002f8 	.word	0x200002f8

08007178 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4a07      	ldr	r2, [pc, #28]	; (80071a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007188:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	4a06      	ldr	r2, [pc, #24]	; (80071a8 <vApplicationGetTimerTaskMemory+0x30>)
 800718e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007196:	601a      	str	r2, [r3, #0]
}
 8007198:	bf00      	nop
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	200004f8 	.word	0x200004f8
 80071a8:	200005b4 	.word	0x200005b4

080071ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f103 0208 	add.w	r2, r3, #8
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f103 0208 	add.w	r2, r3, #8
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f103 0208 	add.w	r2, r3, #8
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071fa:	bf00      	nop
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007206:	b480      	push	{r7}
 8007208:	b085      	sub	sp, #20
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	601a      	str	r2, [r3, #0]
}
 8007242:	bf00      	nop
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007264:	d103      	bne.n	800726e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	e00c      	b.n	8007288 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	3308      	adds	r3, #8
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	e002      	b.n	800727c <vListInsert+0x2e>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	429a      	cmp	r2, r3
 8007286:	d2f6      	bcs.n	8007276 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	601a      	str	r2, [r3, #0]
}
 80072b4:	bf00      	nop
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	6892      	ldr	r2, [r2, #8]
 80072d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	6852      	ldr	r2, [r2, #4]
 80072e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d103      	bne.n	80072f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	1e5a      	subs	r2, r3, #1
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10c      	bne.n	8007342 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	b672      	cpsid	i
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	b662      	cpsie	i
 800733c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800733e:	bf00      	nop
 8007340:	e7fe      	b.n	8007340 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007342:	f002 f8a3 	bl	800948c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734e:	68f9      	ldr	r1, [r7, #12]
 8007350:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007352:	fb01 f303 	mul.w	r3, r1, r3
 8007356:	441a      	add	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007372:	3b01      	subs	r3, #1
 8007374:	68f9      	ldr	r1, [r7, #12]
 8007376:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007378:	fb01 f303 	mul.w	r3, r1, r3
 800737c:	441a      	add	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	22ff      	movs	r2, #255	; 0xff
 8007386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	22ff      	movs	r2, #255	; 0xff
 800738e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d114      	bne.n	80073c2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d01a      	beq.n	80073d6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3310      	adds	r3, #16
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 f95d 	bl	8008664 <xTaskRemoveFromEventList>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d012      	beq.n	80073d6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073b0:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <xQueueGenericReset+0xd0>)
 80073b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	e009      	b.n	80073d6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3310      	adds	r3, #16
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff fef0 	bl	80071ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3324      	adds	r3, #36	; 0x24
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7ff feeb 	bl	80071ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073d6:	f002 f88d 	bl	80094f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073da:	2301      	movs	r3, #1
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	e000ed04 	.word	0xe000ed04

080073e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08e      	sub	sp, #56	; 0x38
 80073ec:	af02      	add	r7, sp, #8
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10c      	bne.n	8007416 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	b672      	cpsid	i
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	b662      	cpsie	i
 8007410:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007412:	bf00      	nop
 8007414:	e7fe      	b.n	8007414 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10c      	bne.n	8007436 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007420:	b672      	cpsid	i
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	b662      	cpsie	i
 8007430:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007432:	bf00      	nop
 8007434:	e7fe      	b.n	8007434 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <xQueueGenericCreateStatic+0x5a>
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <xQueueGenericCreateStatic+0x5e>
 8007442:	2301      	movs	r3, #1
 8007444:	e000      	b.n	8007448 <xQueueGenericCreateStatic+0x60>
 8007446:	2300      	movs	r3, #0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10c      	bne.n	8007466 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	b672      	cpsid	i
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	b662      	cpsie	i
 8007460:	623b      	str	r3, [r7, #32]
}
 8007462:	bf00      	nop
 8007464:	e7fe      	b.n	8007464 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d102      	bne.n	8007472 <xQueueGenericCreateStatic+0x8a>
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <xQueueGenericCreateStatic+0x8e>
 8007472:	2301      	movs	r3, #1
 8007474:	e000      	b.n	8007478 <xQueueGenericCreateStatic+0x90>
 8007476:	2300      	movs	r3, #0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10c      	bne.n	8007496 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007480:	b672      	cpsid	i
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	b662      	cpsie	i
 8007490:	61fb      	str	r3, [r7, #28]
}
 8007492:	bf00      	nop
 8007494:	e7fe      	b.n	8007494 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007496:	2350      	movs	r3, #80	; 0x50
 8007498:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2b50      	cmp	r3, #80	; 0x50
 800749e:	d00c      	beq.n	80074ba <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	b672      	cpsid	i
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	b662      	cpsie	i
 80074b4:	61bb      	str	r3, [r7, #24]
}
 80074b6:	bf00      	nop
 80074b8:	e7fe      	b.n	80074b8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80074ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00d      	beq.n	80074e2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80074c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80074d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	4613      	mov	r3, r2
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	68b9      	ldr	r1, [r7, #8]
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 f805 	bl	80074ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3730      	adds	r7, #48	; 0x30
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d103      	bne.n	8007508 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	e002      	b.n	800750e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800751a:	2101      	movs	r1, #1
 800751c:	69b8      	ldr	r0, [r7, #24]
 800751e:	f7ff fef9 	bl	8007314 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	78fa      	ldrb	r2, [r7, #3]
 8007526:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800752a:	bf00      	nop
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b08e      	sub	sp, #56	; 0x38
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
 8007540:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007542:	2300      	movs	r3, #0
 8007544:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10c      	bne.n	800756a <xQueueGenericSend+0x36>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	b672      	cpsid	i
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	b662      	cpsie	i
 8007564:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007566:	bf00      	nop
 8007568:	e7fe      	b.n	8007568 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d103      	bne.n	8007578 <xQueueGenericSend+0x44>
 8007570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <xQueueGenericSend+0x48>
 8007578:	2301      	movs	r3, #1
 800757a:	e000      	b.n	800757e <xQueueGenericSend+0x4a>
 800757c:	2300      	movs	r3, #0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10c      	bne.n	800759c <xQueueGenericSend+0x68>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	b672      	cpsid	i
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	b662      	cpsie	i
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007598:	bf00      	nop
 800759a:	e7fe      	b.n	800759a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d103      	bne.n	80075aa <xQueueGenericSend+0x76>
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d101      	bne.n	80075ae <xQueueGenericSend+0x7a>
 80075aa:	2301      	movs	r3, #1
 80075ac:	e000      	b.n	80075b0 <xQueueGenericSend+0x7c>
 80075ae:	2300      	movs	r3, #0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10c      	bne.n	80075ce <xQueueGenericSend+0x9a>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b8:	b672      	cpsid	i
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	b662      	cpsie	i
 80075c8:	623b      	str	r3, [r7, #32]
}
 80075ca:	bf00      	nop
 80075cc:	e7fe      	b.n	80075cc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075ce:	f001 fa13 	bl	80089f8 <xTaskGetSchedulerState>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d102      	bne.n	80075de <xQueueGenericSend+0xaa>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <xQueueGenericSend+0xae>
 80075de:	2301      	movs	r3, #1
 80075e0:	e000      	b.n	80075e4 <xQueueGenericSend+0xb0>
 80075e2:	2300      	movs	r3, #0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10c      	bne.n	8007602 <xQueueGenericSend+0xce>
	__asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	b672      	cpsid	i
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	b662      	cpsie	i
 80075fc:	61fb      	str	r3, [r7, #28]
}
 80075fe:	bf00      	nop
 8007600:	e7fe      	b.n	8007600 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007602:	f001 ff43 	bl	800948c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760e:	429a      	cmp	r2, r3
 8007610:	d302      	bcc.n	8007618 <xQueueGenericSend+0xe4>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b02      	cmp	r3, #2
 8007616:	d129      	bne.n	800766c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	68b9      	ldr	r1, [r7, #8]
 800761c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800761e:	f000 fa15 	bl	8007a4c <prvCopyDataToQueue>
 8007622:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	2b00      	cmp	r3, #0
 800762a:	d010      	beq.n	800764e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	3324      	adds	r3, #36	; 0x24
 8007630:	4618      	mov	r0, r3
 8007632:	f001 f817 	bl	8008664 <xTaskRemoveFromEventList>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d013      	beq.n	8007664 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800763c:	4b3f      	ldr	r3, [pc, #252]	; (800773c <xQueueGenericSend+0x208>)
 800763e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	e00a      	b.n	8007664 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800764e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007650:	2b00      	cmp	r3, #0
 8007652:	d007      	beq.n	8007664 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007654:	4b39      	ldr	r3, [pc, #228]	; (800773c <xQueueGenericSend+0x208>)
 8007656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007664:	f001 ff46 	bl	80094f4 <vPortExitCritical>
				return pdPASS;
 8007668:	2301      	movs	r3, #1
 800766a:	e063      	b.n	8007734 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d103      	bne.n	800767a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007672:	f001 ff3f 	bl	80094f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007676:	2300      	movs	r3, #0
 8007678:	e05c      	b.n	8007734 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800767a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767c:	2b00      	cmp	r3, #0
 800767e:	d106      	bne.n	800768e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007680:	f107 0314 	add.w	r3, r7, #20
 8007684:	4618      	mov	r0, r3
 8007686:	f001 f853 	bl	8008730 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800768a:	2301      	movs	r3, #1
 800768c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800768e:	f001 ff31 	bl	80094f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007692:	f000 fdb3 	bl	80081fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007696:	f001 fef9 	bl	800948c <vPortEnterCritical>
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076a0:	b25b      	sxtb	r3, r3
 80076a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076a6:	d103      	bne.n	80076b0 <xQueueGenericSend+0x17c>
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076b6:	b25b      	sxtb	r3, r3
 80076b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076bc:	d103      	bne.n	80076c6 <xQueueGenericSend+0x192>
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076c6:	f001 ff15 	bl	80094f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076ca:	1d3a      	adds	r2, r7, #4
 80076cc:	f107 0314 	add.w	r3, r7, #20
 80076d0:	4611      	mov	r1, r2
 80076d2:	4618      	mov	r0, r3
 80076d4:	f001 f842 	bl	800875c <xTaskCheckForTimeOut>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d124      	bne.n	8007728 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076e0:	f000 faac 	bl	8007c3c <prvIsQueueFull>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d018      	beq.n	800771c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	3310      	adds	r3, #16
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	4611      	mov	r1, r2
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 ff62 	bl	80085bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80076f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076fa:	f000 fa37 	bl	8007b6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80076fe:	f000 fd8b 	bl	8008218 <xTaskResumeAll>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	f47f af7c 	bne.w	8007602 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800770a:	4b0c      	ldr	r3, [pc, #48]	; (800773c <xQueueGenericSend+0x208>)
 800770c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	e772      	b.n	8007602 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800771c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800771e:	f000 fa25 	bl	8007b6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007722:	f000 fd79 	bl	8008218 <xTaskResumeAll>
 8007726:	e76c      	b.n	8007602 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800772a:	f000 fa1f 	bl	8007b6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800772e:	f000 fd73 	bl	8008218 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007732:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007734:	4618      	mov	r0, r3
 8007736:	3738      	adds	r7, #56	; 0x38
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	e000ed04 	.word	0xe000ed04

08007740 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08e      	sub	sp, #56	; 0x38
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10c      	bne.n	8007772 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775c:	b672      	cpsid	i
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	b662      	cpsie	i
 800776c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800776e:	bf00      	nop
 8007770:	e7fe      	b.n	8007770 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d103      	bne.n	8007780 <xQueueGenericSendFromISR+0x40>
 8007778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <xQueueGenericSendFromISR+0x44>
 8007780:	2301      	movs	r3, #1
 8007782:	e000      	b.n	8007786 <xQueueGenericSendFromISR+0x46>
 8007784:	2300      	movs	r3, #0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10c      	bne.n	80077a4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	b672      	cpsid	i
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	b662      	cpsie	i
 800779e:	623b      	str	r3, [r7, #32]
}
 80077a0:	bf00      	nop
 80077a2:	e7fe      	b.n	80077a2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d103      	bne.n	80077b2 <xQueueGenericSendFromISR+0x72>
 80077aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <xQueueGenericSendFromISR+0x76>
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <xQueueGenericSendFromISR+0x78>
 80077b6:	2300      	movs	r3, #0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10c      	bne.n	80077d6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	b672      	cpsid	i
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	b662      	cpsie	i
 80077d0:	61fb      	str	r3, [r7, #28]
}
 80077d2:	bf00      	nop
 80077d4:	e7fe      	b.n	80077d4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077d6:	f001 ff41 	bl	800965c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80077da:	f3ef 8211 	mrs	r2, BASEPRI
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	b672      	cpsid	i
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	b662      	cpsie	i
 80077f2:	61ba      	str	r2, [r7, #24]
 80077f4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80077f6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007802:	429a      	cmp	r2, r3
 8007804:	d302      	bcc.n	800780c <xQueueGenericSendFromISR+0xcc>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b02      	cmp	r3, #2
 800780a:	d12c      	bne.n	8007866 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800780c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	68b9      	ldr	r1, [r7, #8]
 800781a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800781c:	f000 f916 	bl	8007a4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007820:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007828:	d112      	bne.n	8007850 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782e:	2b00      	cmp	r3, #0
 8007830:	d016      	beq.n	8007860 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007834:	3324      	adds	r3, #36	; 0x24
 8007836:	4618      	mov	r0, r3
 8007838:	f000 ff14 	bl	8008664 <xTaskRemoveFromEventList>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00e      	beq.n	8007860 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00b      	beq.n	8007860 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	e007      	b.n	8007860 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007850:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007854:	3301      	adds	r3, #1
 8007856:	b2db      	uxtb	r3, r3
 8007858:	b25a      	sxtb	r2, r3
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007860:	2301      	movs	r3, #1
 8007862:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007864:	e001      	b.n	800786a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007866:	2300      	movs	r3, #0
 8007868:	637b      	str	r3, [r7, #52]	; 0x34
 800786a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007874:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007878:	4618      	mov	r0, r3
 800787a:	3738      	adds	r7, #56	; 0x38
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08c      	sub	sp, #48	; 0x30
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800788c:	2300      	movs	r3, #0
 800788e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10c      	bne.n	80078b4 <xQueueReceive+0x34>
	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	b672      	cpsid	i
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	b662      	cpsie	i
 80078ae:	623b      	str	r3, [r7, #32]
}
 80078b0:	bf00      	nop
 80078b2:	e7fe      	b.n	80078b2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d103      	bne.n	80078c2 <xQueueReceive+0x42>
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <xQueueReceive+0x46>
 80078c2:	2301      	movs	r3, #1
 80078c4:	e000      	b.n	80078c8 <xQueueReceive+0x48>
 80078c6:	2300      	movs	r3, #0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10c      	bne.n	80078e6 <xQueueReceive+0x66>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d0:	b672      	cpsid	i
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	b662      	cpsie	i
 80078e0:	61fb      	str	r3, [r7, #28]
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078e6:	f001 f887 	bl	80089f8 <xTaskGetSchedulerState>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d102      	bne.n	80078f6 <xQueueReceive+0x76>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <xQueueReceive+0x7a>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <xQueueReceive+0x7c>
 80078fa:	2300      	movs	r3, #0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10c      	bne.n	800791a <xQueueReceive+0x9a>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	b672      	cpsid	i
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	b662      	cpsie	i
 8007914:	61bb      	str	r3, [r7, #24]
}
 8007916:	bf00      	nop
 8007918:	e7fe      	b.n	8007918 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800791a:	f001 fdb7 	bl	800948c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007922:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	2b00      	cmp	r3, #0
 8007928:	d01f      	beq.n	800796a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800792a:	68b9      	ldr	r1, [r7, #8]
 800792c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800792e:	f000 f8f7 	bl	8007b20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	1e5a      	subs	r2, r3, #1
 8007936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007938:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00f      	beq.n	8007962 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007944:	3310      	adds	r3, #16
 8007946:	4618      	mov	r0, r3
 8007948:	f000 fe8c 	bl	8008664 <xTaskRemoveFromEventList>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d007      	beq.n	8007962 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007952:	4b3d      	ldr	r3, [pc, #244]	; (8007a48 <xQueueReceive+0x1c8>)
 8007954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007962:	f001 fdc7 	bl	80094f4 <vPortExitCritical>
				return pdPASS;
 8007966:	2301      	movs	r3, #1
 8007968:	e069      	b.n	8007a3e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d103      	bne.n	8007978 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007970:	f001 fdc0 	bl	80094f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007974:	2300      	movs	r3, #0
 8007976:	e062      	b.n	8007a3e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	2b00      	cmp	r3, #0
 800797c:	d106      	bne.n	800798c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800797e:	f107 0310 	add.w	r3, r7, #16
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fed4 	bl	8008730 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007988:	2301      	movs	r3, #1
 800798a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800798c:	f001 fdb2 	bl	80094f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007990:	f000 fc34 	bl	80081fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007994:	f001 fd7a 	bl	800948c <vPortEnterCritical>
 8007998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800799e:	b25b      	sxtb	r3, r3
 80079a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079a4:	d103      	bne.n	80079ae <xQueueReceive+0x12e>
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079b4:	b25b      	sxtb	r3, r3
 80079b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079ba:	d103      	bne.n	80079c4 <xQueueReceive+0x144>
 80079bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079c4:	f001 fd96 	bl	80094f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079c8:	1d3a      	adds	r2, r7, #4
 80079ca:	f107 0310 	add.w	r3, r7, #16
 80079ce:	4611      	mov	r1, r2
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fec3 	bl	800875c <xTaskCheckForTimeOut>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d123      	bne.n	8007a24 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079de:	f000 f917 	bl	8007c10 <prvIsQueueEmpty>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d017      	beq.n	8007a18 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	3324      	adds	r3, #36	; 0x24
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	4611      	mov	r1, r2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 fde3 	bl	80085bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079f8:	f000 f8b8 	bl	8007b6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80079fc:	f000 fc0c 	bl	8008218 <xTaskResumeAll>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d189      	bne.n	800791a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007a06:	4b10      	ldr	r3, [pc, #64]	; (8007a48 <xQueueReceive+0x1c8>)
 8007a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	e780      	b.n	800791a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a1a:	f000 f8a7 	bl	8007b6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a1e:	f000 fbfb 	bl	8008218 <xTaskResumeAll>
 8007a22:	e77a      	b.n	800791a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a26:	f000 f8a1 	bl	8007b6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a2a:	f000 fbf5 	bl	8008218 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a30:	f000 f8ee 	bl	8007c10 <prvIsQueueEmpty>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f43f af6f 	beq.w	800791a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3730      	adds	r7, #48	; 0x30
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	e000ed04 	.word	0xe000ed04

08007a4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10d      	bne.n	8007a86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d14d      	bne.n	8007b0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 ffdc 	bl	8008a34 <xTaskPriorityDisinherit>
 8007a7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	609a      	str	r2, [r3, #8]
 8007a84:	e043      	b.n	8007b0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d119      	bne.n	8007ac0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6858      	ldr	r0, [r3, #4]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a94:	461a      	mov	r2, r3
 8007a96:	68b9      	ldr	r1, [r7, #8]
 8007a98:	f003 fa7c 	bl	800af94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa4:	441a      	add	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d32b      	bcc.n	8007b0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	605a      	str	r2, [r3, #4]
 8007abe:	e026      	b.n	8007b0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	68d8      	ldr	r0, [r3, #12]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac8:	461a      	mov	r2, r3
 8007aca:	68b9      	ldr	r1, [r7, #8]
 8007acc:	f003 fa62 	bl	800af94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	68da      	ldr	r2, [r3, #12]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad8:	425b      	negs	r3, r3
 8007ada:	441a      	add	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d207      	bcs.n	8007afc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	689a      	ldr	r2, [r3, #8]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af4:	425b      	negs	r3, r3
 8007af6:	441a      	add	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d105      	bne.n	8007b0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d002      	beq.n	8007b0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	1c5a      	adds	r2, r3, #1
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007b16:	697b      	ldr	r3, [r7, #20]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d018      	beq.n	8007b64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68da      	ldr	r2, [r3, #12]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3a:	441a      	add	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	68da      	ldr	r2, [r3, #12]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d303      	bcc.n	8007b54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68d9      	ldr	r1, [r3, #12]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	6838      	ldr	r0, [r7, #0]
 8007b60:	f003 fa18 	bl	800af94 <memcpy>
	}
}
 8007b64:	bf00      	nop
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b74:	f001 fc8a 	bl	800948c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b80:	e011      	b.n	8007ba6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d012      	beq.n	8007bb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	3324      	adds	r3, #36	; 0x24
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 fd68 	bl	8008664 <xTaskRemoveFromEventList>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b9a:	f000 fe45 	bl	8008828 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	dce9      	bgt.n	8007b82 <prvUnlockQueue+0x16>
 8007bae:	e000      	b.n	8007bb2 <prvUnlockQueue+0x46>
					break;
 8007bb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	22ff      	movs	r2, #255	; 0xff
 8007bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007bba:	f001 fc9b 	bl	80094f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007bbe:	f001 fc65 	bl	800948c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bca:	e011      	b.n	8007bf0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d012      	beq.n	8007bfa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3310      	adds	r3, #16
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f000 fd43 	bl	8008664 <xTaskRemoveFromEventList>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007be4:	f000 fe20 	bl	8008828 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007be8:	7bbb      	ldrb	r3, [r7, #14]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	dce9      	bgt.n	8007bcc <prvUnlockQueue+0x60>
 8007bf8:	e000      	b.n	8007bfc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007bfa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	22ff      	movs	r2, #255	; 0xff
 8007c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c04:	f001 fc76 	bl	80094f4 <vPortExitCritical>
}
 8007c08:	bf00      	nop
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c18:	f001 fc38 	bl	800948c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d102      	bne.n	8007c2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c24:	2301      	movs	r3, #1
 8007c26:	60fb      	str	r3, [r7, #12]
 8007c28:	e001      	b.n	8007c2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c2e:	f001 fc61 	bl	80094f4 <vPortExitCritical>

	return xReturn;
 8007c32:	68fb      	ldr	r3, [r7, #12]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c44:	f001 fc22 	bl	800948c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d102      	bne.n	8007c5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c54:	2301      	movs	r3, #1
 8007c56:	60fb      	str	r3, [r7, #12]
 8007c58:	e001      	b.n	8007c5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c5e:	f001 fc49 	bl	80094f4 <vPortExitCritical>

	return xReturn;
 8007c62:	68fb      	ldr	r3, [r7, #12]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c76:	2300      	movs	r3, #0
 8007c78:	60fb      	str	r3, [r7, #12]
 8007c7a:	e014      	b.n	8007ca6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007c7c:	4a0f      	ldr	r2, [pc, #60]	; (8007cbc <vQueueAddToRegistry+0x50>)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10b      	bne.n	8007ca0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c88:	490c      	ldr	r1, [pc, #48]	; (8007cbc <vQueueAddToRegistry+0x50>)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c92:	4a0a      	ldr	r2, [pc, #40]	; (8007cbc <vQueueAddToRegistry+0x50>)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	00db      	lsls	r3, r3, #3
 8007c98:	4413      	add	r3, r2
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c9e:	e006      	b.n	8007cae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	60fb      	str	r3, [r7, #12]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b07      	cmp	r3, #7
 8007caa:	d9e7      	bls.n	8007c7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007cac:	bf00      	nop
 8007cae:	bf00      	nop
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	20004d0c 	.word	0x20004d0c

08007cc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007cd0:	f001 fbdc 	bl	800948c <vPortEnterCritical>
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cda:	b25b      	sxtb	r3, r3
 8007cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ce0:	d103      	bne.n	8007cea <vQueueWaitForMessageRestricted+0x2a>
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cf0:	b25b      	sxtb	r3, r3
 8007cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cf6:	d103      	bne.n	8007d00 <vQueueWaitForMessageRestricted+0x40>
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d00:	f001 fbf8 	bl	80094f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d106      	bne.n	8007d1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	3324      	adds	r3, #36	; 0x24
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	68b9      	ldr	r1, [r7, #8]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 fc77 	bl	8008608 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007d1a:	6978      	ldr	r0, [r7, #20]
 8007d1c:	f7ff ff26 	bl	8007b6c <prvUnlockQueue>
	}
 8007d20:	bf00      	nop
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b08e      	sub	sp, #56	; 0x38
 8007d2c:	af04      	add	r7, sp, #16
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
 8007d34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10c      	bne.n	8007d56 <xTaskCreateStatic+0x2e>
	__asm volatile
 8007d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d40:	b672      	cpsid	i
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	b662      	cpsie	i
 8007d50:	623b      	str	r3, [r7, #32]
}
 8007d52:	bf00      	nop
 8007d54:	e7fe      	b.n	8007d54 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10c      	bne.n	8007d76 <xTaskCreateStatic+0x4e>
	__asm volatile
 8007d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d60:	b672      	cpsid	i
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	b662      	cpsie	i
 8007d70:	61fb      	str	r3, [r7, #28]
}
 8007d72:	bf00      	nop
 8007d74:	e7fe      	b.n	8007d74 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d76:	23bc      	movs	r3, #188	; 0xbc
 8007d78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	2bbc      	cmp	r3, #188	; 0xbc
 8007d7e:	d00c      	beq.n	8007d9a <xTaskCreateStatic+0x72>
	__asm volatile
 8007d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d84:	b672      	cpsid	i
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	b662      	cpsie	i
 8007d94:	61bb      	str	r3, [r7, #24]
}
 8007d96:	bf00      	nop
 8007d98:	e7fe      	b.n	8007d98 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d01e      	beq.n	8007de0 <xTaskCreateStatic+0xb8>
 8007da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d01b      	beq.n	8007de0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007db0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	2202      	movs	r2, #2
 8007db6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007dba:	2300      	movs	r3, #0
 8007dbc:	9303      	str	r3, [sp, #12]
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc0:	9302      	str	r3, [sp, #8]
 8007dc2:	f107 0314 	add.w	r3, r7, #20
 8007dc6:	9301      	str	r3, [sp, #4]
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	68b9      	ldr	r1, [r7, #8]
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 f850 	bl	8007e78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007dd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007dda:	f000 f8f5 	bl	8007fc8 <prvAddNewTaskToReadyList>
 8007dde:	e001      	b.n	8007de4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007de0:	2300      	movs	r3, #0
 8007de2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007de4:	697b      	ldr	r3, [r7, #20]
	}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3728      	adds	r7, #40	; 0x28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b08c      	sub	sp, #48	; 0x30
 8007df2:	af04      	add	r7, sp, #16
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	60b9      	str	r1, [r7, #8]
 8007df8:	603b      	str	r3, [r7, #0]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007dfe:	88fb      	ldrh	r3, [r7, #6]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f001 fc6e 	bl	80096e4 <pvPortMalloc>
 8007e08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00e      	beq.n	8007e2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e10:	20bc      	movs	r0, #188	; 0xbc
 8007e12:	f001 fc67 	bl	80096e4 <pvPortMalloc>
 8007e16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	631a      	str	r2, [r3, #48]	; 0x30
 8007e24:	e005      	b.n	8007e32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e26:	6978      	ldr	r0, [r7, #20]
 8007e28:	f001 fd26 	bl	8009878 <vPortFree>
 8007e2c:	e001      	b.n	8007e32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d017      	beq.n	8007e68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e40:	88fa      	ldrh	r2, [r7, #6]
 8007e42:	2300      	movs	r3, #0
 8007e44:	9303      	str	r3, [sp, #12]
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	9302      	str	r3, [sp, #8]
 8007e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4c:	9301      	str	r3, [sp, #4]
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	68b9      	ldr	r1, [r7, #8]
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f000 f80e 	bl	8007e78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e5c:	69f8      	ldr	r0, [r7, #28]
 8007e5e:	f000 f8b3 	bl	8007fc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e62:	2301      	movs	r3, #1
 8007e64:	61bb      	str	r3, [r7, #24]
 8007e66:	e002      	b.n	8007e6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e6e:	69bb      	ldr	r3, [r7, #24]
	}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3720      	adds	r7, #32
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b088      	sub	sp, #32
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
 8007e84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	461a      	mov	r2, r3
 8007e90:	21a5      	movs	r1, #165	; 0xa5
 8007e92:	f003 f88d 	bl	800afb0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e9a:	6879      	ldr	r1, [r7, #4]
 8007e9c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007ea0:	440b      	add	r3, r1
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	f023 0307 	bic.w	r3, r3, #7
 8007eae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	f003 0307 	and.w	r3, r3, #7
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00c      	beq.n	8007ed4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebe:	b672      	cpsid	i
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	b662      	cpsie	i
 8007ece:	617b      	str	r3, [r7, #20]
}
 8007ed0:	bf00      	nop
 8007ed2:	e7fe      	b.n	8007ed2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d01f      	beq.n	8007f1a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007eda:	2300      	movs	r3, #0
 8007edc:	61fb      	str	r3, [r7, #28]
 8007ede:	e012      	b.n	8007f06 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	7819      	ldrb	r1, [r3, #0]
 8007ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	4413      	add	r3, r2
 8007eee:	3334      	adds	r3, #52	; 0x34
 8007ef0:	460a      	mov	r2, r1
 8007ef2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	4413      	add	r3, r2
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d006      	beq.n	8007f0e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	3301      	adds	r3, #1
 8007f04:	61fb      	str	r3, [r7, #28]
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	2b0f      	cmp	r3, #15
 8007f0a:	d9e9      	bls.n	8007ee0 <prvInitialiseNewTask+0x68>
 8007f0c:	e000      	b.n	8007f10 <prvInitialiseNewTask+0x98>
			{
				break;
 8007f0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f18:	e003      	b.n	8007f22 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f24:	2b37      	cmp	r3, #55	; 0x37
 8007f26:	d901      	bls.n	8007f2c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f28:	2337      	movs	r3, #55	; 0x37
 8007f2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	3304      	adds	r3, #4
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7ff f952 	bl	80071ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	3318      	adds	r3, #24
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7ff f94d 	bl	80071ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7a:	3354      	adds	r3, #84	; 0x54
 8007f7c:	2260      	movs	r2, #96	; 0x60
 8007f7e:	2100      	movs	r1, #0
 8007f80:	4618      	mov	r0, r3
 8007f82:	f003 f815 	bl	800afb0 <memset>
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	4a0c      	ldr	r2, [pc, #48]	; (8007fbc <prvInitialiseNewTask+0x144>)
 8007f8a:	659a      	str	r2, [r3, #88]	; 0x58
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	4a0c      	ldr	r2, [pc, #48]	; (8007fc0 <prvInitialiseNewTask+0x148>)
 8007f90:	65da      	str	r2, [r3, #92]	; 0x5c
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	4a0b      	ldr	r2, [pc, #44]	; (8007fc4 <prvInitialiseNewTask+0x14c>)
 8007f96:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	68f9      	ldr	r1, [r7, #12]
 8007f9c:	69b8      	ldr	r0, [r7, #24]
 8007f9e:	f001 f96b 	bl	8009278 <pxPortInitialiseStack>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d002      	beq.n	8007fb4 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fb2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fb4:	bf00      	nop
 8007fb6:	3720      	adds	r7, #32
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	0800b330 	.word	0x0800b330
 8007fc0:	0800b350 	.word	0x0800b350
 8007fc4:	0800b310 	.word	0x0800b310

08007fc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007fd0:	f001 fa5c 	bl	800948c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007fd4:	4b2d      	ldr	r3, [pc, #180]	; (800808c <prvAddNewTaskToReadyList+0xc4>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	4a2c      	ldr	r2, [pc, #176]	; (800808c <prvAddNewTaskToReadyList+0xc4>)
 8007fdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007fde:	4b2c      	ldr	r3, [pc, #176]	; (8008090 <prvAddNewTaskToReadyList+0xc8>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d109      	bne.n	8007ffa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007fe6:	4a2a      	ldr	r2, [pc, #168]	; (8008090 <prvAddNewTaskToReadyList+0xc8>)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007fec:	4b27      	ldr	r3, [pc, #156]	; (800808c <prvAddNewTaskToReadyList+0xc4>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d110      	bne.n	8008016 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ff4:	f000 fc3c 	bl	8008870 <prvInitialiseTaskLists>
 8007ff8:	e00d      	b.n	8008016 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ffa:	4b26      	ldr	r3, [pc, #152]	; (8008094 <prvAddNewTaskToReadyList+0xcc>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d109      	bne.n	8008016 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008002:	4b23      	ldr	r3, [pc, #140]	; (8008090 <prvAddNewTaskToReadyList+0xc8>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800c:	429a      	cmp	r2, r3
 800800e:	d802      	bhi.n	8008016 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008010:	4a1f      	ldr	r2, [pc, #124]	; (8008090 <prvAddNewTaskToReadyList+0xc8>)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008016:	4b20      	ldr	r3, [pc, #128]	; (8008098 <prvAddNewTaskToReadyList+0xd0>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3301      	adds	r3, #1
 800801c:	4a1e      	ldr	r2, [pc, #120]	; (8008098 <prvAddNewTaskToReadyList+0xd0>)
 800801e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008020:	4b1d      	ldr	r3, [pc, #116]	; (8008098 <prvAddNewTaskToReadyList+0xd0>)
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802c:	4b1b      	ldr	r3, [pc, #108]	; (800809c <prvAddNewTaskToReadyList+0xd4>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	429a      	cmp	r2, r3
 8008032:	d903      	bls.n	800803c <prvAddNewTaskToReadyList+0x74>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008038:	4a18      	ldr	r2, [pc, #96]	; (800809c <prvAddNewTaskToReadyList+0xd4>)
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008040:	4613      	mov	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4a15      	ldr	r2, [pc, #84]	; (80080a0 <prvAddNewTaskToReadyList+0xd8>)
 800804a:	441a      	add	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3304      	adds	r3, #4
 8008050:	4619      	mov	r1, r3
 8008052:	4610      	mov	r0, r2
 8008054:	f7ff f8d7 	bl	8007206 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008058:	f001 fa4c 	bl	80094f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800805c:	4b0d      	ldr	r3, [pc, #52]	; (8008094 <prvAddNewTaskToReadyList+0xcc>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00e      	beq.n	8008082 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008064:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <prvAddNewTaskToReadyList+0xc8>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806e:	429a      	cmp	r2, r3
 8008070:	d207      	bcs.n	8008082 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008072:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <prvAddNewTaskToReadyList+0xdc>)
 8008074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008082:	bf00      	nop
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000e88 	.word	0x20000e88
 8008090:	200009b4 	.word	0x200009b4
 8008094:	20000e94 	.word	0x20000e94
 8008098:	20000ea4 	.word	0x20000ea4
 800809c:	20000e90 	.word	0x20000e90
 80080a0:	200009b8 	.word	0x200009b8
 80080a4:	e000ed04 	.word	0xe000ed04

080080a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d019      	beq.n	80080ee <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080ba:	4b14      	ldr	r3, [pc, #80]	; (800810c <vTaskDelay+0x64>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00c      	beq.n	80080dc <vTaskDelay+0x34>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	b672      	cpsid	i
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	b662      	cpsie	i
 80080d6:	60bb      	str	r3, [r7, #8]
}
 80080d8:	bf00      	nop
 80080da:	e7fe      	b.n	80080da <vTaskDelay+0x32>
			vTaskSuspendAll();
 80080dc:	f000 f88e 	bl	80081fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80080e0:	2100      	movs	r1, #0
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fd18 	bl	8008b18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80080e8:	f000 f896 	bl	8008218 <xTaskResumeAll>
 80080ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d107      	bne.n	8008104 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80080f4:	4b06      	ldr	r3, [pc, #24]	; (8008110 <vTaskDelay+0x68>)
 80080f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008104:	bf00      	nop
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	20000eb0 	.word	0x20000eb0
 8008110:	e000ed04 	.word	0xe000ed04

08008114 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b08a      	sub	sp, #40	; 0x28
 8008118:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800811a:	2300      	movs	r3, #0
 800811c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800811e:	2300      	movs	r3, #0
 8008120:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008122:	463a      	mov	r2, r7
 8008124:	1d39      	adds	r1, r7, #4
 8008126:	f107 0308 	add.w	r3, r7, #8
 800812a:	4618      	mov	r0, r3
 800812c:	f7ff f80a 	bl	8007144 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	9202      	str	r2, [sp, #8]
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	2300      	movs	r3, #0
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	2300      	movs	r3, #0
 8008140:	460a      	mov	r2, r1
 8008142:	4926      	ldr	r1, [pc, #152]	; (80081dc <vTaskStartScheduler+0xc8>)
 8008144:	4826      	ldr	r0, [pc, #152]	; (80081e0 <vTaskStartScheduler+0xcc>)
 8008146:	f7ff fdef 	bl	8007d28 <xTaskCreateStatic>
 800814a:	4603      	mov	r3, r0
 800814c:	4a25      	ldr	r2, [pc, #148]	; (80081e4 <vTaskStartScheduler+0xd0>)
 800814e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008150:	4b24      	ldr	r3, [pc, #144]	; (80081e4 <vTaskStartScheduler+0xd0>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008158:	2301      	movs	r3, #1
 800815a:	617b      	str	r3, [r7, #20]
 800815c:	e001      	b.n	8008162 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800815e:	2300      	movs	r3, #0
 8008160:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d102      	bne.n	800816e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008168:	f000 fd2a 	bl	8008bc0 <xTimerCreateTimerTask>
 800816c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d11d      	bne.n	80081b0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008178:	b672      	cpsid	i
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	b662      	cpsie	i
 8008188:	613b      	str	r3, [r7, #16]
}
 800818a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800818c:	4b16      	ldr	r3, [pc, #88]	; (80081e8 <vTaskStartScheduler+0xd4>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3354      	adds	r3, #84	; 0x54
 8008192:	4a16      	ldr	r2, [pc, #88]	; (80081ec <vTaskStartScheduler+0xd8>)
 8008194:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008196:	4b16      	ldr	r3, [pc, #88]	; (80081f0 <vTaskStartScheduler+0xdc>)
 8008198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800819c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800819e:	4b15      	ldr	r3, [pc, #84]	; (80081f4 <vTaskStartScheduler+0xe0>)
 80081a0:	2201      	movs	r2, #1
 80081a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80081a4:	4b14      	ldr	r3, [pc, #80]	; (80081f8 <vTaskStartScheduler+0xe4>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80081aa:	f001 f8f1 	bl	8009390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80081ae:	e010      	b.n	80081d2 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081b6:	d10c      	bne.n	80081d2 <vTaskStartScheduler+0xbe>
	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081bc:	b672      	cpsid	i
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	b662      	cpsie	i
 80081cc:	60fb      	str	r3, [r7, #12]
}
 80081ce:	bf00      	nop
 80081d0:	e7fe      	b.n	80081d0 <vTaskStartScheduler+0xbc>
}
 80081d2:	bf00      	nop
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	0800b238 	.word	0x0800b238
 80081e0:	08008841 	.word	0x08008841
 80081e4:	20000eac 	.word	0x20000eac
 80081e8:	200009b4 	.word	0x200009b4
 80081ec:	200001a8 	.word	0x200001a8
 80081f0:	20000ea8 	.word	0x20000ea8
 80081f4:	20000e94 	.word	0x20000e94
 80081f8:	20000e8c 	.word	0x20000e8c

080081fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80081fc:	b480      	push	{r7}
 80081fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008200:	4b04      	ldr	r3, [pc, #16]	; (8008214 <vTaskSuspendAll+0x18>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3301      	adds	r3, #1
 8008206:	4a03      	ldr	r2, [pc, #12]	; (8008214 <vTaskSuspendAll+0x18>)
 8008208:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800820a:	bf00      	nop
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	20000eb0 	.word	0x20000eb0

08008218 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800821e:	2300      	movs	r3, #0
 8008220:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008222:	2300      	movs	r3, #0
 8008224:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008226:	4b43      	ldr	r3, [pc, #268]	; (8008334 <xTaskResumeAll+0x11c>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10c      	bne.n	8008248 <xTaskResumeAll+0x30>
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	b672      	cpsid	i
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	b662      	cpsie	i
 8008242:	603b      	str	r3, [r7, #0]
}
 8008244:	bf00      	nop
 8008246:	e7fe      	b.n	8008246 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008248:	f001 f920 	bl	800948c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800824c:	4b39      	ldr	r3, [pc, #228]	; (8008334 <xTaskResumeAll+0x11c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3b01      	subs	r3, #1
 8008252:	4a38      	ldr	r2, [pc, #224]	; (8008334 <xTaskResumeAll+0x11c>)
 8008254:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008256:	4b37      	ldr	r3, [pc, #220]	; (8008334 <xTaskResumeAll+0x11c>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d162      	bne.n	8008324 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800825e:	4b36      	ldr	r3, [pc, #216]	; (8008338 <xTaskResumeAll+0x120>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d05e      	beq.n	8008324 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008266:	e02f      	b.n	80082c8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008268:	4b34      	ldr	r3, [pc, #208]	; (800833c <xTaskResumeAll+0x124>)
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	3318      	adds	r3, #24
 8008274:	4618      	mov	r0, r3
 8008276:	f7ff f823 	bl	80072c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	3304      	adds	r3, #4
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff f81e 	bl	80072c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008288:	4b2d      	ldr	r3, [pc, #180]	; (8008340 <xTaskResumeAll+0x128>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	429a      	cmp	r2, r3
 800828e:	d903      	bls.n	8008298 <xTaskResumeAll+0x80>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	4a2a      	ldr	r2, [pc, #168]	; (8008340 <xTaskResumeAll+0x128>)
 8008296:	6013      	str	r3, [r2, #0]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829c:	4613      	mov	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4a27      	ldr	r2, [pc, #156]	; (8008344 <xTaskResumeAll+0x12c>)
 80082a6:	441a      	add	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	3304      	adds	r3, #4
 80082ac:	4619      	mov	r1, r3
 80082ae:	4610      	mov	r0, r2
 80082b0:	f7fe ffa9 	bl	8007206 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b8:	4b23      	ldr	r3, [pc, #140]	; (8008348 <xTaskResumeAll+0x130>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082be:	429a      	cmp	r2, r3
 80082c0:	d302      	bcc.n	80082c8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80082c2:	4b22      	ldr	r3, [pc, #136]	; (800834c <xTaskResumeAll+0x134>)
 80082c4:	2201      	movs	r2, #1
 80082c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082c8:	4b1c      	ldr	r3, [pc, #112]	; (800833c <xTaskResumeAll+0x124>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1cb      	bne.n	8008268 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082d6:	f000 fb6f 	bl	80089b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80082da:	4b1d      	ldr	r3, [pc, #116]	; (8008350 <xTaskResumeAll+0x138>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d010      	beq.n	8008308 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80082e6:	f000 f847 	bl	8008378 <xTaskIncrementTick>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80082f0:	4b16      	ldr	r3, [pc, #88]	; (800834c <xTaskResumeAll+0x134>)
 80082f2:	2201      	movs	r2, #1
 80082f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	3b01      	subs	r3, #1
 80082fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1f1      	bne.n	80082e6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008302:	4b13      	ldr	r3, [pc, #76]	; (8008350 <xTaskResumeAll+0x138>)
 8008304:	2200      	movs	r2, #0
 8008306:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008308:	4b10      	ldr	r3, [pc, #64]	; (800834c <xTaskResumeAll+0x134>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d009      	beq.n	8008324 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008310:	2301      	movs	r3, #1
 8008312:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008314:	4b0f      	ldr	r3, [pc, #60]	; (8008354 <xTaskResumeAll+0x13c>)
 8008316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008324:	f001 f8e6 	bl	80094f4 <vPortExitCritical>

	return xAlreadyYielded;
 8008328:	68bb      	ldr	r3, [r7, #8]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	20000eb0 	.word	0x20000eb0
 8008338:	20000e88 	.word	0x20000e88
 800833c:	20000e48 	.word	0x20000e48
 8008340:	20000e90 	.word	0x20000e90
 8008344:	200009b8 	.word	0x200009b8
 8008348:	200009b4 	.word	0x200009b4
 800834c:	20000e9c 	.word	0x20000e9c
 8008350:	20000e98 	.word	0x20000e98
 8008354:	e000ed04 	.word	0xe000ed04

08008358 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800835e:	4b05      	ldr	r3, [pc, #20]	; (8008374 <xTaskGetTickCount+0x1c>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008364:	687b      	ldr	r3, [r7, #4]
}
 8008366:	4618      	mov	r0, r3
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20000e8c 	.word	0x20000e8c

08008378 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800837e:	2300      	movs	r3, #0
 8008380:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008382:	4b50      	ldr	r3, [pc, #320]	; (80084c4 <xTaskIncrementTick+0x14c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	f040 808b 	bne.w	80084a2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800838c:	4b4e      	ldr	r3, [pc, #312]	; (80084c8 <xTaskIncrementTick+0x150>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3301      	adds	r3, #1
 8008392:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008394:	4a4c      	ldr	r2, [pc, #304]	; (80084c8 <xTaskIncrementTick+0x150>)
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d122      	bne.n	80083e6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80083a0:	4b4a      	ldr	r3, [pc, #296]	; (80084cc <xTaskIncrementTick+0x154>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00c      	beq.n	80083c4 <xTaskIncrementTick+0x4c>
	__asm volatile
 80083aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ae:	b672      	cpsid	i
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	b662      	cpsie	i
 80083be:	603b      	str	r3, [r7, #0]
}
 80083c0:	bf00      	nop
 80083c2:	e7fe      	b.n	80083c2 <xTaskIncrementTick+0x4a>
 80083c4:	4b41      	ldr	r3, [pc, #260]	; (80084cc <xTaskIncrementTick+0x154>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	60fb      	str	r3, [r7, #12]
 80083ca:	4b41      	ldr	r3, [pc, #260]	; (80084d0 <xTaskIncrementTick+0x158>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a3f      	ldr	r2, [pc, #252]	; (80084cc <xTaskIncrementTick+0x154>)
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	4a3f      	ldr	r2, [pc, #252]	; (80084d0 <xTaskIncrementTick+0x158>)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	4b3e      	ldr	r3, [pc, #248]	; (80084d4 <xTaskIncrementTick+0x15c>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3301      	adds	r3, #1
 80083de:	4a3d      	ldr	r2, [pc, #244]	; (80084d4 <xTaskIncrementTick+0x15c>)
 80083e0:	6013      	str	r3, [r2, #0]
 80083e2:	f000 fae9 	bl	80089b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80083e6:	4b3c      	ldr	r3, [pc, #240]	; (80084d8 <xTaskIncrementTick+0x160>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d349      	bcc.n	8008484 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083f0:	4b36      	ldr	r3, [pc, #216]	; (80084cc <xTaskIncrementTick+0x154>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d104      	bne.n	8008404 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083fa:	4b37      	ldr	r3, [pc, #220]	; (80084d8 <xTaskIncrementTick+0x160>)
 80083fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008400:	601a      	str	r2, [r3, #0]
					break;
 8008402:	e03f      	b.n	8008484 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008404:	4b31      	ldr	r3, [pc, #196]	; (80084cc <xTaskIncrementTick+0x154>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	429a      	cmp	r2, r3
 800841a:	d203      	bcs.n	8008424 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800841c:	4a2e      	ldr	r2, [pc, #184]	; (80084d8 <xTaskIncrementTick+0x160>)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008422:	e02f      	b.n	8008484 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	3304      	adds	r3, #4
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe ff49 	bl	80072c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008432:	2b00      	cmp	r3, #0
 8008434:	d004      	beq.n	8008440 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	3318      	adds	r3, #24
 800843a:	4618      	mov	r0, r3
 800843c:	f7fe ff40 	bl	80072c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008444:	4b25      	ldr	r3, [pc, #148]	; (80084dc <xTaskIncrementTick+0x164>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	429a      	cmp	r2, r3
 800844a:	d903      	bls.n	8008454 <xTaskIncrementTick+0xdc>
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	4a22      	ldr	r2, [pc, #136]	; (80084dc <xTaskIncrementTick+0x164>)
 8008452:	6013      	str	r3, [r2, #0]
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008458:	4613      	mov	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4a1f      	ldr	r2, [pc, #124]	; (80084e0 <xTaskIncrementTick+0x168>)
 8008462:	441a      	add	r2, r3
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	3304      	adds	r3, #4
 8008468:	4619      	mov	r1, r3
 800846a:	4610      	mov	r0, r2
 800846c:	f7fe fecb 	bl	8007206 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008474:	4b1b      	ldr	r3, [pc, #108]	; (80084e4 <xTaskIncrementTick+0x16c>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847a:	429a      	cmp	r2, r3
 800847c:	d3b8      	bcc.n	80083f0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800847e:	2301      	movs	r3, #1
 8008480:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008482:	e7b5      	b.n	80083f0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008484:	4b17      	ldr	r3, [pc, #92]	; (80084e4 <xTaskIncrementTick+0x16c>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800848a:	4915      	ldr	r1, [pc, #84]	; (80084e0 <xTaskIncrementTick+0x168>)
 800848c:	4613      	mov	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	440b      	add	r3, r1
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d907      	bls.n	80084ac <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800849c:	2301      	movs	r3, #1
 800849e:	617b      	str	r3, [r7, #20]
 80084a0:	e004      	b.n	80084ac <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80084a2:	4b11      	ldr	r3, [pc, #68]	; (80084e8 <xTaskIncrementTick+0x170>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3301      	adds	r3, #1
 80084a8:	4a0f      	ldr	r2, [pc, #60]	; (80084e8 <xTaskIncrementTick+0x170>)
 80084aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80084ac:	4b0f      	ldr	r3, [pc, #60]	; (80084ec <xTaskIncrementTick+0x174>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80084b4:	2301      	movs	r3, #1
 80084b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80084b8:	697b      	ldr	r3, [r7, #20]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3718      	adds	r7, #24
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20000eb0 	.word	0x20000eb0
 80084c8:	20000e8c 	.word	0x20000e8c
 80084cc:	20000e40 	.word	0x20000e40
 80084d0:	20000e44 	.word	0x20000e44
 80084d4:	20000ea0 	.word	0x20000ea0
 80084d8:	20000ea8 	.word	0x20000ea8
 80084dc:	20000e90 	.word	0x20000e90
 80084e0:	200009b8 	.word	0x200009b8
 80084e4:	200009b4 	.word	0x200009b4
 80084e8:	20000e98 	.word	0x20000e98
 80084ec:	20000e9c 	.word	0x20000e9c

080084f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80084f6:	4b2b      	ldr	r3, [pc, #172]	; (80085a4 <vTaskSwitchContext+0xb4>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80084fe:	4b2a      	ldr	r3, [pc, #168]	; (80085a8 <vTaskSwitchContext+0xb8>)
 8008500:	2201      	movs	r2, #1
 8008502:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008504:	e048      	b.n	8008598 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008506:	4b28      	ldr	r3, [pc, #160]	; (80085a8 <vTaskSwitchContext+0xb8>)
 8008508:	2200      	movs	r2, #0
 800850a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800850c:	4b27      	ldr	r3, [pc, #156]	; (80085ac <vTaskSwitchContext+0xbc>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	60fb      	str	r3, [r7, #12]
 8008512:	e012      	b.n	800853a <vTaskSwitchContext+0x4a>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10c      	bne.n	8008534 <vTaskSwitchContext+0x44>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851e:	b672      	cpsid	i
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	b662      	cpsie	i
 800852e:	607b      	str	r3, [r7, #4]
}
 8008530:	bf00      	nop
 8008532:	e7fe      	b.n	8008532 <vTaskSwitchContext+0x42>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	3b01      	subs	r3, #1
 8008538:	60fb      	str	r3, [r7, #12]
 800853a:	491d      	ldr	r1, [pc, #116]	; (80085b0 <vTaskSwitchContext+0xc0>)
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	4613      	mov	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	440b      	add	r3, r1
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0e2      	beq.n	8008514 <vTaskSwitchContext+0x24>
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	4613      	mov	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4a15      	ldr	r2, [pc, #84]	; (80085b0 <vTaskSwitchContext+0xc0>)
 800855a:	4413      	add	r3, r2
 800855c:	60bb      	str	r3, [r7, #8]
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	605a      	str	r2, [r3, #4]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	3308      	adds	r3, #8
 8008570:	429a      	cmp	r2, r3
 8008572:	d104      	bne.n	800857e <vTaskSwitchContext+0x8e>
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	685a      	ldr	r2, [r3, #4]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	605a      	str	r2, [r3, #4]
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	4a0b      	ldr	r2, [pc, #44]	; (80085b4 <vTaskSwitchContext+0xc4>)
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	4a08      	ldr	r2, [pc, #32]	; (80085ac <vTaskSwitchContext+0xbc>)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800858e:	4b09      	ldr	r3, [pc, #36]	; (80085b4 <vTaskSwitchContext+0xc4>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3354      	adds	r3, #84	; 0x54
 8008594:	4a08      	ldr	r2, [pc, #32]	; (80085b8 <vTaskSwitchContext+0xc8>)
 8008596:	6013      	str	r3, [r2, #0]
}
 8008598:	bf00      	nop
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	20000eb0 	.word	0x20000eb0
 80085a8:	20000e9c 	.word	0x20000e9c
 80085ac:	20000e90 	.word	0x20000e90
 80085b0:	200009b8 	.word	0x200009b8
 80085b4:	200009b4 	.word	0x200009b4
 80085b8:	200001a8 	.word	0x200001a8

080085bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10c      	bne.n	80085e6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	b672      	cpsid	i
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	b662      	cpsie	i
 80085e0:	60fb      	str	r3, [r7, #12]
}
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085e6:	4b07      	ldr	r3, [pc, #28]	; (8008604 <vTaskPlaceOnEventList+0x48>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3318      	adds	r3, #24
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7fe fe2d 	bl	800724e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80085f4:	2101      	movs	r1, #1
 80085f6:	6838      	ldr	r0, [r7, #0]
 80085f8:	f000 fa8e 	bl	8008b18 <prvAddCurrentTaskToDelayedList>
}
 80085fc:	bf00      	nop
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	200009b4 	.word	0x200009b4

08008608 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10c      	bne.n	8008634 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	b672      	cpsid	i
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	b662      	cpsie	i
 800862e:	617b      	str	r3, [r7, #20]
}
 8008630:	bf00      	nop
 8008632:	e7fe      	b.n	8008632 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008634:	4b0a      	ldr	r3, [pc, #40]	; (8008660 <vTaskPlaceOnEventListRestricted+0x58>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3318      	adds	r3, #24
 800863a:	4619      	mov	r1, r3
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f7fe fde2 	bl	8007206 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800864c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	68b8      	ldr	r0, [r7, #8]
 8008652:	f000 fa61 	bl	8008b18 <prvAddCurrentTaskToDelayedList>
	}
 8008656:	bf00      	nop
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	200009b4 	.word	0x200009b4

08008664 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10c      	bne.n	8008694 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	b672      	cpsid	i
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	b662      	cpsie	i
 800868e:	60fb      	str	r3, [r7, #12]
}
 8008690:	bf00      	nop
 8008692:	e7fe      	b.n	8008692 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	3318      	adds	r3, #24
 8008698:	4618      	mov	r0, r3
 800869a:	f7fe fe11 	bl	80072c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800869e:	4b1e      	ldr	r3, [pc, #120]	; (8008718 <xTaskRemoveFromEventList+0xb4>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d11d      	bne.n	80086e2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	3304      	adds	r3, #4
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fe fe08 	bl	80072c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b4:	4b19      	ldr	r3, [pc, #100]	; (800871c <xTaskRemoveFromEventList+0xb8>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d903      	bls.n	80086c4 <xTaskRemoveFromEventList+0x60>
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c0:	4a16      	ldr	r2, [pc, #88]	; (800871c <xTaskRemoveFromEventList+0xb8>)
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c8:	4613      	mov	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4a13      	ldr	r2, [pc, #76]	; (8008720 <xTaskRemoveFromEventList+0xbc>)
 80086d2:	441a      	add	r2, r3
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4619      	mov	r1, r3
 80086da:	4610      	mov	r0, r2
 80086dc:	f7fe fd93 	bl	8007206 <vListInsertEnd>
 80086e0:	e005      	b.n	80086ee <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	3318      	adds	r3, #24
 80086e6:	4619      	mov	r1, r3
 80086e8:	480e      	ldr	r0, [pc, #56]	; (8008724 <xTaskRemoveFromEventList+0xc0>)
 80086ea:	f7fe fd8c 	bl	8007206 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f2:	4b0d      	ldr	r3, [pc, #52]	; (8008728 <xTaskRemoveFromEventList+0xc4>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d905      	bls.n	8008708 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086fc:	2301      	movs	r3, #1
 80086fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008700:	4b0a      	ldr	r3, [pc, #40]	; (800872c <xTaskRemoveFromEventList+0xc8>)
 8008702:	2201      	movs	r2, #1
 8008704:	601a      	str	r2, [r3, #0]
 8008706:	e001      	b.n	800870c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008708:	2300      	movs	r3, #0
 800870a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800870c:	697b      	ldr	r3, [r7, #20]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	20000eb0 	.word	0x20000eb0
 800871c:	20000e90 	.word	0x20000e90
 8008720:	200009b8 	.word	0x200009b8
 8008724:	20000e48 	.word	0x20000e48
 8008728:	200009b4 	.word	0x200009b4
 800872c:	20000e9c 	.word	0x20000e9c

08008730 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008738:	4b06      	ldr	r3, [pc, #24]	; (8008754 <vTaskInternalSetTimeOutState+0x24>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008740:	4b05      	ldr	r3, [pc, #20]	; (8008758 <vTaskInternalSetTimeOutState+0x28>)
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	605a      	str	r2, [r3, #4]
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	20000ea0 	.word	0x20000ea0
 8008758:	20000e8c 	.word	0x20000e8c

0800875c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10c      	bne.n	8008786 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	b672      	cpsid	i
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	b662      	cpsie	i
 8008780:	613b      	str	r3, [r7, #16]
}
 8008782:	bf00      	nop
 8008784:	e7fe      	b.n	8008784 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10c      	bne.n	80087a6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800878c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008790:	b672      	cpsid	i
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	b662      	cpsie	i
 80087a0:	60fb      	str	r3, [r7, #12]
}
 80087a2:	bf00      	nop
 80087a4:	e7fe      	b.n	80087a4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80087a6:	f000 fe71 	bl	800948c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087aa:	4b1d      	ldr	r3, [pc, #116]	; (8008820 <xTaskCheckForTimeOut+0xc4>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	69ba      	ldr	r2, [r7, #24]
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087c2:	d102      	bne.n	80087ca <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087c4:	2300      	movs	r3, #0
 80087c6:	61fb      	str	r3, [r7, #28]
 80087c8:	e023      	b.n	8008812 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	4b15      	ldr	r3, [pc, #84]	; (8008824 <xTaskCheckForTimeOut+0xc8>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d007      	beq.n	80087e6 <xTaskCheckForTimeOut+0x8a>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	69ba      	ldr	r2, [r7, #24]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d302      	bcc.n	80087e6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80087e0:	2301      	movs	r3, #1
 80087e2:	61fb      	str	r3, [r7, #28]
 80087e4:	e015      	b.n	8008812 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d20b      	bcs.n	8008808 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	1ad2      	subs	r2, r2, r3
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f7ff ff97 	bl	8008730 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008802:	2300      	movs	r3, #0
 8008804:	61fb      	str	r3, [r7, #28]
 8008806:	e004      	b.n	8008812 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	2200      	movs	r2, #0
 800880c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800880e:	2301      	movs	r3, #1
 8008810:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008812:	f000 fe6f 	bl	80094f4 <vPortExitCritical>

	return xReturn;
 8008816:	69fb      	ldr	r3, [r7, #28]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3720      	adds	r7, #32
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	20000e8c 	.word	0x20000e8c
 8008824:	20000ea0 	.word	0x20000ea0

08008828 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008828:	b480      	push	{r7}
 800882a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800882c:	4b03      	ldr	r3, [pc, #12]	; (800883c <vTaskMissedYield+0x14>)
 800882e:	2201      	movs	r2, #1
 8008830:	601a      	str	r2, [r3, #0]
}
 8008832:	bf00      	nop
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr
 800883c:	20000e9c 	.word	0x20000e9c

08008840 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008848:	f000 f852 	bl	80088f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800884c:	4b06      	ldr	r3, [pc, #24]	; (8008868 <prvIdleTask+0x28>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d9f9      	bls.n	8008848 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008854:	4b05      	ldr	r3, [pc, #20]	; (800886c <prvIdleTask+0x2c>)
 8008856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008864:	e7f0      	b.n	8008848 <prvIdleTask+0x8>
 8008866:	bf00      	nop
 8008868:	200009b8 	.word	0x200009b8
 800886c:	e000ed04 	.word	0xe000ed04

08008870 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008876:	2300      	movs	r3, #0
 8008878:	607b      	str	r3, [r7, #4]
 800887a:	e00c      	b.n	8008896 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	4613      	mov	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4a12      	ldr	r2, [pc, #72]	; (80088d0 <prvInitialiseTaskLists+0x60>)
 8008888:	4413      	add	r3, r2
 800888a:	4618      	mov	r0, r3
 800888c:	f7fe fc8e 	bl	80071ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3301      	adds	r3, #1
 8008894:	607b      	str	r3, [r7, #4]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b37      	cmp	r3, #55	; 0x37
 800889a:	d9ef      	bls.n	800887c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800889c:	480d      	ldr	r0, [pc, #52]	; (80088d4 <prvInitialiseTaskLists+0x64>)
 800889e:	f7fe fc85 	bl	80071ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088a2:	480d      	ldr	r0, [pc, #52]	; (80088d8 <prvInitialiseTaskLists+0x68>)
 80088a4:	f7fe fc82 	bl	80071ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088a8:	480c      	ldr	r0, [pc, #48]	; (80088dc <prvInitialiseTaskLists+0x6c>)
 80088aa:	f7fe fc7f 	bl	80071ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088ae:	480c      	ldr	r0, [pc, #48]	; (80088e0 <prvInitialiseTaskLists+0x70>)
 80088b0:	f7fe fc7c 	bl	80071ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088b4:	480b      	ldr	r0, [pc, #44]	; (80088e4 <prvInitialiseTaskLists+0x74>)
 80088b6:	f7fe fc79 	bl	80071ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088ba:	4b0b      	ldr	r3, [pc, #44]	; (80088e8 <prvInitialiseTaskLists+0x78>)
 80088bc:	4a05      	ldr	r2, [pc, #20]	; (80088d4 <prvInitialiseTaskLists+0x64>)
 80088be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088c0:	4b0a      	ldr	r3, [pc, #40]	; (80088ec <prvInitialiseTaskLists+0x7c>)
 80088c2:	4a05      	ldr	r2, [pc, #20]	; (80088d8 <prvInitialiseTaskLists+0x68>)
 80088c4:	601a      	str	r2, [r3, #0]
}
 80088c6:	bf00      	nop
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	200009b8 	.word	0x200009b8
 80088d4:	20000e18 	.word	0x20000e18
 80088d8:	20000e2c 	.word	0x20000e2c
 80088dc:	20000e48 	.word	0x20000e48
 80088e0:	20000e5c 	.word	0x20000e5c
 80088e4:	20000e74 	.word	0x20000e74
 80088e8:	20000e40 	.word	0x20000e40
 80088ec:	20000e44 	.word	0x20000e44

080088f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088f6:	e019      	b.n	800892c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088f8:	f000 fdc8 	bl	800948c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088fc:	4b10      	ldr	r3, [pc, #64]	; (8008940 <prvCheckTasksWaitingTermination+0x50>)
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	3304      	adds	r3, #4
 8008908:	4618      	mov	r0, r3
 800890a:	f7fe fcd9 	bl	80072c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800890e:	4b0d      	ldr	r3, [pc, #52]	; (8008944 <prvCheckTasksWaitingTermination+0x54>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3b01      	subs	r3, #1
 8008914:	4a0b      	ldr	r2, [pc, #44]	; (8008944 <prvCheckTasksWaitingTermination+0x54>)
 8008916:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008918:	4b0b      	ldr	r3, [pc, #44]	; (8008948 <prvCheckTasksWaitingTermination+0x58>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3b01      	subs	r3, #1
 800891e:	4a0a      	ldr	r2, [pc, #40]	; (8008948 <prvCheckTasksWaitingTermination+0x58>)
 8008920:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008922:	f000 fde7 	bl	80094f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f810 	bl	800894c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800892c:	4b06      	ldr	r3, [pc, #24]	; (8008948 <prvCheckTasksWaitingTermination+0x58>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e1      	bne.n	80088f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008934:	bf00      	nop
 8008936:	bf00      	nop
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	20000e5c 	.word	0x20000e5c
 8008944:	20000e88 	.word	0x20000e88
 8008948:	20000e70 	.word	0x20000e70

0800894c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	3354      	adds	r3, #84	; 0x54
 8008958:	4618      	mov	r0, r3
 800895a:	f002 fbe9 	bl	800b130 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008964:	2b00      	cmp	r3, #0
 8008966:	d108      	bne.n	800897a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896c:	4618      	mov	r0, r3
 800896e:	f000 ff83 	bl	8009878 <vPortFree>
				vPortFree( pxTCB );
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 ff80 	bl	8009878 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008978:	e01a      	b.n	80089b0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008980:	2b01      	cmp	r3, #1
 8008982:	d103      	bne.n	800898c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 ff77 	bl	8009878 <vPortFree>
	}
 800898a:	e011      	b.n	80089b0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008992:	2b02      	cmp	r3, #2
 8008994:	d00c      	beq.n	80089b0 <prvDeleteTCB+0x64>
	__asm volatile
 8008996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899a:	b672      	cpsid	i
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	b662      	cpsie	i
 80089aa:	60fb      	str	r3, [r7, #12]
}
 80089ac:	bf00      	nop
 80089ae:	e7fe      	b.n	80089ae <prvDeleteTCB+0x62>
	}
 80089b0:	bf00      	nop
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089be:	4b0c      	ldr	r3, [pc, #48]	; (80089f0 <prvResetNextTaskUnblockTime+0x38>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d104      	bne.n	80089d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089c8:	4b0a      	ldr	r3, [pc, #40]	; (80089f4 <prvResetNextTaskUnblockTime+0x3c>)
 80089ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089d0:	e008      	b.n	80089e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d2:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <prvResetNextTaskUnblockTime+0x38>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	4a04      	ldr	r2, [pc, #16]	; (80089f4 <prvResetNextTaskUnblockTime+0x3c>)
 80089e2:	6013      	str	r3, [r2, #0]
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	20000e40 	.word	0x20000e40
 80089f4:	20000ea8 	.word	0x20000ea8

080089f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089fe:	4b0b      	ldr	r3, [pc, #44]	; (8008a2c <xTaskGetSchedulerState+0x34>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d102      	bne.n	8008a0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a06:	2301      	movs	r3, #1
 8008a08:	607b      	str	r3, [r7, #4]
 8008a0a:	e008      	b.n	8008a1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a0c:	4b08      	ldr	r3, [pc, #32]	; (8008a30 <xTaskGetSchedulerState+0x38>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d102      	bne.n	8008a1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a14:	2302      	movs	r3, #2
 8008a16:	607b      	str	r3, [r7, #4]
 8008a18:	e001      	b.n	8008a1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a1e:	687b      	ldr	r3, [r7, #4]
	}
 8008a20:	4618      	mov	r0, r3
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	20000e94 	.word	0x20000e94
 8008a30:	20000eb0 	.word	0x20000eb0

08008a34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a40:	2300      	movs	r3, #0
 8008a42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d05a      	beq.n	8008b00 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a4a:	4b30      	ldr	r3, [pc, #192]	; (8008b0c <xTaskPriorityDisinherit+0xd8>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d00c      	beq.n	8008a6e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a58:	b672      	cpsid	i
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	b662      	cpsie	i
 8008a68:	60fb      	str	r3, [r7, #12]
}
 8008a6a:	bf00      	nop
 8008a6c:	e7fe      	b.n	8008a6c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10c      	bne.n	8008a90 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7a:	b672      	cpsid	i
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	b662      	cpsie	i
 8008a8a:	60bb      	str	r3, [r7, #8]
}
 8008a8c:	bf00      	nop
 8008a8e:	e7fe      	b.n	8008a8e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a94:	1e5a      	subs	r2, r3, #1
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d02c      	beq.n	8008b00 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d128      	bne.n	8008b00 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fe fc04 	bl	80072c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad0:	4b0f      	ldr	r3, [pc, #60]	; (8008b10 <xTaskPriorityDisinherit+0xdc>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d903      	bls.n	8008ae0 <xTaskPriorityDisinherit+0xac>
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008adc:	4a0c      	ldr	r2, [pc, #48]	; (8008b10 <xTaskPriorityDisinherit+0xdc>)
 8008ade:	6013      	str	r3, [r2, #0]
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4a09      	ldr	r2, [pc, #36]	; (8008b14 <xTaskPriorityDisinherit+0xe0>)
 8008aee:	441a      	add	r2, r3
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	3304      	adds	r3, #4
 8008af4:	4619      	mov	r1, r3
 8008af6:	4610      	mov	r0, r2
 8008af8:	f7fe fb85 	bl	8007206 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008afc:	2301      	movs	r3, #1
 8008afe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b00:	697b      	ldr	r3, [r7, #20]
	}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3718      	adds	r7, #24
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	200009b4 	.word	0x200009b4
 8008b10:	20000e90 	.word	0x20000e90
 8008b14:	200009b8 	.word	0x200009b8

08008b18 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b22:	4b21      	ldr	r3, [pc, #132]	; (8008ba8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b28:	4b20      	ldr	r3, [pc, #128]	; (8008bac <prvAddCurrentTaskToDelayedList+0x94>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fe fbc6 	bl	80072c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b3a:	d10a      	bne.n	8008b52 <prvAddCurrentTaskToDelayedList+0x3a>
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d007      	beq.n	8008b52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b42:	4b1a      	ldr	r3, [pc, #104]	; (8008bac <prvAddCurrentTaskToDelayedList+0x94>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3304      	adds	r3, #4
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4819      	ldr	r0, [pc, #100]	; (8008bb0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008b4c:	f7fe fb5b 	bl	8007206 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b50:	e026      	b.n	8008ba0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4413      	add	r3, r2
 8008b58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b5a:	4b14      	ldr	r3, [pc, #80]	; (8008bac <prvAddCurrentTaskToDelayedList+0x94>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d209      	bcs.n	8008b7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b6a:	4b12      	ldr	r3, [pc, #72]	; (8008bb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	4b0f      	ldr	r3, [pc, #60]	; (8008bac <prvAddCurrentTaskToDelayedList+0x94>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3304      	adds	r3, #4
 8008b74:	4619      	mov	r1, r3
 8008b76:	4610      	mov	r0, r2
 8008b78:	f7fe fb69 	bl	800724e <vListInsert>
}
 8008b7c:	e010      	b.n	8008ba0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b7e:	4b0e      	ldr	r3, [pc, #56]	; (8008bb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	4b0a      	ldr	r3, [pc, #40]	; (8008bac <prvAddCurrentTaskToDelayedList+0x94>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	3304      	adds	r3, #4
 8008b88:	4619      	mov	r1, r3
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	f7fe fb5f 	bl	800724e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b90:	4b0a      	ldr	r3, [pc, #40]	; (8008bbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d202      	bcs.n	8008ba0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008b9a:	4a08      	ldr	r2, [pc, #32]	; (8008bbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	6013      	str	r3, [r2, #0]
}
 8008ba0:	bf00      	nop
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	20000e8c 	.word	0x20000e8c
 8008bac:	200009b4 	.word	0x200009b4
 8008bb0:	20000e74 	.word	0x20000e74
 8008bb4:	20000e44 	.word	0x20000e44
 8008bb8:	20000e40 	.word	0x20000e40
 8008bbc:	20000ea8 	.word	0x20000ea8

08008bc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b08a      	sub	sp, #40	; 0x28
 8008bc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008bca:	f000 fb15 	bl	80091f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008bce:	4b1d      	ldr	r3, [pc, #116]	; (8008c44 <xTimerCreateTimerTask+0x84>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d021      	beq.n	8008c1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008bde:	1d3a      	adds	r2, r7, #4
 8008be0:	f107 0108 	add.w	r1, r7, #8
 8008be4:	f107 030c 	add.w	r3, r7, #12
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fe fac5 	bl	8007178 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008bee:	6879      	ldr	r1, [r7, #4]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	9202      	str	r2, [sp, #8]
 8008bf6:	9301      	str	r3, [sp, #4]
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	460a      	mov	r2, r1
 8008c00:	4911      	ldr	r1, [pc, #68]	; (8008c48 <xTimerCreateTimerTask+0x88>)
 8008c02:	4812      	ldr	r0, [pc, #72]	; (8008c4c <xTimerCreateTimerTask+0x8c>)
 8008c04:	f7ff f890 	bl	8007d28 <xTaskCreateStatic>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	4a11      	ldr	r2, [pc, #68]	; (8008c50 <xTimerCreateTimerTask+0x90>)
 8008c0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c0e:	4b10      	ldr	r3, [pc, #64]	; (8008c50 <xTimerCreateTimerTask+0x90>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c16:	2301      	movs	r3, #1
 8008c18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10c      	bne.n	8008c3a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	b672      	cpsid	i
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	b662      	cpsie	i
 8008c34:	613b      	str	r3, [r7, #16]
}
 8008c36:	bf00      	nop
 8008c38:	e7fe      	b.n	8008c38 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008c3a:	697b      	ldr	r3, [r7, #20]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	20000ee4 	.word	0x20000ee4
 8008c48:	0800b240 	.word	0x0800b240
 8008c4c:	08008d91 	.word	0x08008d91
 8008c50:	20000ee8 	.word	0x20000ee8

08008c54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08a      	sub	sp, #40	; 0x28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
 8008c60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c62:	2300      	movs	r3, #0
 8008c64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10c      	bne.n	8008c86 <xTimerGenericCommand+0x32>
	__asm volatile
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	b672      	cpsid	i
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	b662      	cpsie	i
 8008c80:	623b      	str	r3, [r7, #32]
}
 8008c82:	bf00      	nop
 8008c84:	e7fe      	b.n	8008c84 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c86:	4b1a      	ldr	r3, [pc, #104]	; (8008cf0 <xTimerGenericCommand+0x9c>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d02a      	beq.n	8008ce4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2b05      	cmp	r3, #5
 8008c9e:	dc18      	bgt.n	8008cd2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ca0:	f7ff feaa 	bl	80089f8 <xTaskGetSchedulerState>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d109      	bne.n	8008cbe <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008caa:	4b11      	ldr	r3, [pc, #68]	; (8008cf0 <xTimerGenericCommand+0x9c>)
 8008cac:	6818      	ldr	r0, [r3, #0]
 8008cae:	f107 0110 	add.w	r1, r7, #16
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cb6:	f7fe fc3d 	bl	8007534 <xQueueGenericSend>
 8008cba:	6278      	str	r0, [r7, #36]	; 0x24
 8008cbc:	e012      	b.n	8008ce4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008cbe:	4b0c      	ldr	r3, [pc, #48]	; (8008cf0 <xTimerGenericCommand+0x9c>)
 8008cc0:	6818      	ldr	r0, [r3, #0]
 8008cc2:	f107 0110 	add.w	r1, r7, #16
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f7fe fc33 	bl	8007534 <xQueueGenericSend>
 8008cce:	6278      	str	r0, [r7, #36]	; 0x24
 8008cd0:	e008      	b.n	8008ce4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008cd2:	4b07      	ldr	r3, [pc, #28]	; (8008cf0 <xTimerGenericCommand+0x9c>)
 8008cd4:	6818      	ldr	r0, [r3, #0]
 8008cd6:	f107 0110 	add.w	r1, r7, #16
 8008cda:	2300      	movs	r3, #0
 8008cdc:	683a      	ldr	r2, [r7, #0]
 8008cde:	f7fe fd2f 	bl	8007740 <xQueueGenericSendFromISR>
 8008ce2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3728      	adds	r7, #40	; 0x28
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	20000ee4 	.word	0x20000ee4

08008cf4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b088      	sub	sp, #32
 8008cf8:	af02      	add	r7, sp, #8
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cfe:	4b23      	ldr	r3, [pc, #140]	; (8008d8c <prvProcessExpiredTimer+0x98>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe fad7 	bl	80072c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d18:	f003 0304 	and.w	r3, r3, #4
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d024      	beq.n	8008d6a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	699a      	ldr	r2, [r3, #24]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	18d1      	adds	r1, r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	6978      	ldr	r0, [r7, #20]
 8008d2e:	f000 f8d3 	bl	8008ed8 <prvInsertTimerInActiveList>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d021      	beq.n	8008d7c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d38:	2300      	movs	r3, #0
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	2100      	movs	r1, #0
 8008d42:	6978      	ldr	r0, [r7, #20]
 8008d44:	f7ff ff86 	bl	8008c54 <xTimerGenericCommand>
 8008d48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d115      	bne.n	8008d7c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	b672      	cpsid	i
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	b662      	cpsie	i
 8008d64:	60fb      	str	r3, [r7, #12]
}
 8008d66:	bf00      	nop
 8008d68:	e7fe      	b.n	8008d68 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d70:	f023 0301 	bic.w	r3, r3, #1
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	6a1b      	ldr	r3, [r3, #32]
 8008d80:	6978      	ldr	r0, [r7, #20]
 8008d82:	4798      	blx	r3
}
 8008d84:	bf00      	nop
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	20000edc 	.word	0x20000edc

08008d90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d98:	f107 0308 	add.w	r3, r7, #8
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f000 f857 	bl	8008e50 <prvGetNextExpireTime>
 8008da2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	4619      	mov	r1, r3
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f000 f803 	bl	8008db4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008dae:	f000 f8d5 	bl	8008f5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008db2:	e7f1      	b.n	8008d98 <prvTimerTask+0x8>

08008db4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008dbe:	f7ff fa1d 	bl	80081fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dc2:	f107 0308 	add.w	r3, r7, #8
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 f866 	bl	8008e98 <prvSampleTimeNow>
 8008dcc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d130      	bne.n	8008e36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10a      	bne.n	8008df0 <prvProcessTimerOrBlockTask+0x3c>
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d806      	bhi.n	8008df0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008de2:	f7ff fa19 	bl	8008218 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008de6:	68f9      	ldr	r1, [r7, #12]
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f7ff ff83 	bl	8008cf4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008dee:	e024      	b.n	8008e3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d008      	beq.n	8008e08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008df6:	4b13      	ldr	r3, [pc, #76]	; (8008e44 <prvProcessTimerOrBlockTask+0x90>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <prvProcessTimerOrBlockTask+0x50>
 8008e00:	2301      	movs	r3, #1
 8008e02:	e000      	b.n	8008e06 <prvProcessTimerOrBlockTask+0x52>
 8008e04:	2300      	movs	r3, #0
 8008e06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e08:	4b0f      	ldr	r3, [pc, #60]	; (8008e48 <prvProcessTimerOrBlockTask+0x94>)
 8008e0a:	6818      	ldr	r0, [r3, #0]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	4619      	mov	r1, r3
 8008e16:	f7fe ff53 	bl	8007cc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e1a:	f7ff f9fd 	bl	8008218 <xTaskResumeAll>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10a      	bne.n	8008e3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e24:	4b09      	ldr	r3, [pc, #36]	; (8008e4c <prvProcessTimerOrBlockTask+0x98>)
 8008e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e2a:	601a      	str	r2, [r3, #0]
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	f3bf 8f6f 	isb	sy
}
 8008e34:	e001      	b.n	8008e3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e36:	f7ff f9ef 	bl	8008218 <xTaskResumeAll>
}
 8008e3a:	bf00      	nop
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20000ee0 	.word	0x20000ee0
 8008e48:	20000ee4 	.word	0x20000ee4
 8008e4c:	e000ed04 	.word	0xe000ed04

08008e50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e58:	4b0e      	ldr	r3, [pc, #56]	; (8008e94 <prvGetNextExpireTime+0x44>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <prvGetNextExpireTime+0x16>
 8008e62:	2201      	movs	r2, #1
 8008e64:	e000      	b.n	8008e68 <prvGetNextExpireTime+0x18>
 8008e66:	2200      	movs	r2, #0
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d105      	bne.n	8008e80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e74:	4b07      	ldr	r3, [pc, #28]	; (8008e94 <prvGetNextExpireTime+0x44>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	60fb      	str	r3, [r7, #12]
 8008e7e:	e001      	b.n	8008e84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e84:	68fb      	ldr	r3, [r7, #12]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	20000edc 	.word	0x20000edc

08008e98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ea0:	f7ff fa5a 	bl	8008358 <xTaskGetTickCount>
 8008ea4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ea6:	4b0b      	ldr	r3, [pc, #44]	; (8008ed4 <prvSampleTimeNow+0x3c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d205      	bcs.n	8008ebc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008eb0:	f000 f93c 	bl	800912c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	e002      	b.n	8008ec2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008ec2:	4a04      	ldr	r2, [pc, #16]	; (8008ed4 <prvSampleTimeNow+0x3c>)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	20000eec 	.word	0x20000eec

08008ed8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
 8008ee4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d812      	bhi.n	8008f24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	1ad2      	subs	r2, r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d302      	bcc.n	8008f12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	617b      	str	r3, [r7, #20]
 8008f10:	e01b      	b.n	8008f4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f12:	4b10      	ldr	r3, [pc, #64]	; (8008f54 <prvInsertTimerInActiveList+0x7c>)
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3304      	adds	r3, #4
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	f7fe f996 	bl	800724e <vListInsert>
 8008f22:	e012      	b.n	8008f4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d206      	bcs.n	8008f3a <prvInsertTimerInActiveList+0x62>
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d302      	bcc.n	8008f3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f34:	2301      	movs	r3, #1
 8008f36:	617b      	str	r3, [r7, #20]
 8008f38:	e007      	b.n	8008f4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f3a:	4b07      	ldr	r3, [pc, #28]	; (8008f58 <prvInsertTimerInActiveList+0x80>)
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	3304      	adds	r3, #4
 8008f42:	4619      	mov	r1, r3
 8008f44:	4610      	mov	r0, r2
 8008f46:	f7fe f982 	bl	800724e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f4a:	697b      	ldr	r3, [r7, #20]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3718      	adds	r7, #24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	20000ee0 	.word	0x20000ee0
 8008f58:	20000edc 	.word	0x20000edc

08008f5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b08e      	sub	sp, #56	; 0x38
 8008f60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f62:	e0d0      	b.n	8009106 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	da1a      	bge.n	8008fa0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f6a:	1d3b      	adds	r3, r7, #4
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10c      	bne.n	8008f90 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7a:	b672      	cpsid	i
 8008f7c:	f383 8811 	msr	BASEPRI, r3
 8008f80:	f3bf 8f6f 	isb	sy
 8008f84:	f3bf 8f4f 	dsb	sy
 8008f88:	b662      	cpsie	i
 8008f8a:	61fb      	str	r3, [r7, #28]
}
 8008f8c:	bf00      	nop
 8008f8e:	e7fe      	b.n	8008f8e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f96:	6850      	ldr	r0, [r2, #4]
 8008f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f9a:	6892      	ldr	r2, [r2, #8]
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f2c0 80ae 	blt.w	8009104 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d004      	beq.n	8008fbe <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fe f981 	bl	80072c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fbe:	463b      	mov	r3, r7
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7ff ff69 	bl	8008e98 <prvSampleTimeNow>
 8008fc6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b09      	cmp	r3, #9
 8008fcc:	f200 809b 	bhi.w	8009106 <prvProcessReceivedCommands+0x1aa>
 8008fd0:	a201      	add	r2, pc, #4	; (adr r2, 8008fd8 <prvProcessReceivedCommands+0x7c>)
 8008fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd6:	bf00      	nop
 8008fd8:	08009001 	.word	0x08009001
 8008fdc:	08009001 	.word	0x08009001
 8008fe0:	08009001 	.word	0x08009001
 8008fe4:	08009079 	.word	0x08009079
 8008fe8:	0800908d 	.word	0x0800908d
 8008fec:	080090db 	.word	0x080090db
 8008ff0:	08009001 	.word	0x08009001
 8008ff4:	08009001 	.word	0x08009001
 8008ff8:	08009079 	.word	0x08009079
 8008ffc:	0800908d 	.word	0x0800908d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009006:	f043 0301 	orr.w	r3, r3, #1
 800900a:	b2da      	uxtb	r2, r3
 800900c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	18d1      	adds	r1, r2, r3
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800901e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009020:	f7ff ff5a 	bl	8008ed8 <prvInsertTimerInActiveList>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d06d      	beq.n	8009106 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800902a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009030:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009038:	f003 0304 	and.w	r3, r3, #4
 800903c:	2b00      	cmp	r3, #0
 800903e:	d062      	beq.n	8009106 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	441a      	add	r2, r3
 8009048:	2300      	movs	r3, #0
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	2300      	movs	r3, #0
 800904e:	2100      	movs	r1, #0
 8009050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009052:	f7ff fdff 	bl	8008c54 <xTimerGenericCommand>
 8009056:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009058:	6a3b      	ldr	r3, [r7, #32]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d153      	bne.n	8009106 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009062:	b672      	cpsid	i
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	b662      	cpsie	i
 8009072:	61bb      	str	r3, [r7, #24]
}
 8009074:	bf00      	nop
 8009076:	e7fe      	b.n	8009076 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800907e:	f023 0301 	bic.w	r3, r3, #1
 8009082:	b2da      	uxtb	r2, r3
 8009084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800908a:	e03c      	b.n	8009106 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800908c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009092:	f043 0301 	orr.w	r3, r3, #1
 8009096:	b2da      	uxtb	r2, r3
 8009098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10c      	bne.n	80090c6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b0:	b672      	cpsid	i
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	b662      	cpsie	i
 80090c0:	617b      	str	r3, [r7, #20]
}
 80090c2:	bf00      	nop
 80090c4:	e7fe      	b.n	80090c4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80090c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c8:	699a      	ldr	r2, [r3, #24]
 80090ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090cc:	18d1      	adds	r1, r2, r3
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090d4:	f7ff ff00 	bl	8008ed8 <prvInsertTimerInActiveList>
					break;
 80090d8:	e015      	b.n	8009106 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80090da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090e0:	f003 0302 	and.w	r3, r3, #2
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d103      	bne.n	80090f0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80090e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090ea:	f000 fbc5 	bl	8009878 <vPortFree>
 80090ee:	e00a      	b.n	8009106 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090f6:	f023 0301 	bic.w	r3, r3, #1
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009102:	e000      	b.n	8009106 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009104:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009106:	4b08      	ldr	r3, [pc, #32]	; (8009128 <prvProcessReceivedCommands+0x1cc>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	1d39      	adds	r1, r7, #4
 800910c:	2200      	movs	r2, #0
 800910e:	4618      	mov	r0, r3
 8009110:	f7fe fbb6 	bl	8007880 <xQueueReceive>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	f47f af24 	bne.w	8008f64 <prvProcessReceivedCommands+0x8>
	}
}
 800911c:	bf00      	nop
 800911e:	bf00      	nop
 8009120:	3730      	adds	r7, #48	; 0x30
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20000ee4 	.word	0x20000ee4

0800912c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b088      	sub	sp, #32
 8009130:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009132:	e04a      	b.n	80091ca <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009134:	4b2e      	ldr	r3, [pc, #184]	; (80091f0 <prvSwitchTimerLists+0xc4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800913e:	4b2c      	ldr	r3, [pc, #176]	; (80091f0 <prvSwitchTimerLists+0xc4>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	3304      	adds	r3, #4
 800914c:	4618      	mov	r0, r3
 800914e:	f7fe f8b7 	bl	80072c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6a1b      	ldr	r3, [r3, #32]
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009160:	f003 0304 	and.w	r3, r3, #4
 8009164:	2b00      	cmp	r3, #0
 8009166:	d030      	beq.n	80091ca <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	4413      	add	r3, r2
 8009170:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	429a      	cmp	r2, r3
 8009178:	d90e      	bls.n	8009198 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009186:	4b1a      	ldr	r3, [pc, #104]	; (80091f0 <prvSwitchTimerLists+0xc4>)
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	3304      	adds	r3, #4
 800918e:	4619      	mov	r1, r3
 8009190:	4610      	mov	r0, r2
 8009192:	f7fe f85c 	bl	800724e <vListInsert>
 8009196:	e018      	b.n	80091ca <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009198:	2300      	movs	r3, #0
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	2300      	movs	r3, #0
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	2100      	movs	r1, #0
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f7ff fd56 	bl	8008c54 <xTimerGenericCommand>
 80091a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10c      	bne.n	80091ca <prvSwitchTimerLists+0x9e>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	b672      	cpsid	i
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	b662      	cpsie	i
 80091c4:	603b      	str	r3, [r7, #0]
}
 80091c6:	bf00      	nop
 80091c8:	e7fe      	b.n	80091c8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091ca:	4b09      	ldr	r3, [pc, #36]	; (80091f0 <prvSwitchTimerLists+0xc4>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1af      	bne.n	8009134 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80091d4:	4b06      	ldr	r3, [pc, #24]	; (80091f0 <prvSwitchTimerLists+0xc4>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80091da:	4b06      	ldr	r3, [pc, #24]	; (80091f4 <prvSwitchTimerLists+0xc8>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a04      	ldr	r2, [pc, #16]	; (80091f0 <prvSwitchTimerLists+0xc4>)
 80091e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80091e2:	4a04      	ldr	r2, [pc, #16]	; (80091f4 <prvSwitchTimerLists+0xc8>)
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	6013      	str	r3, [r2, #0]
}
 80091e8:	bf00      	nop
 80091ea:	3718      	adds	r7, #24
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	20000edc 	.word	0x20000edc
 80091f4:	20000ee0 	.word	0x20000ee0

080091f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80091fe:	f000 f945 	bl	800948c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009202:	4b15      	ldr	r3, [pc, #84]	; (8009258 <prvCheckForValidListAndQueue+0x60>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d120      	bne.n	800924c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800920a:	4814      	ldr	r0, [pc, #80]	; (800925c <prvCheckForValidListAndQueue+0x64>)
 800920c:	f7fd ffce 	bl	80071ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009210:	4813      	ldr	r0, [pc, #76]	; (8009260 <prvCheckForValidListAndQueue+0x68>)
 8009212:	f7fd ffcb 	bl	80071ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009216:	4b13      	ldr	r3, [pc, #76]	; (8009264 <prvCheckForValidListAndQueue+0x6c>)
 8009218:	4a10      	ldr	r2, [pc, #64]	; (800925c <prvCheckForValidListAndQueue+0x64>)
 800921a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800921c:	4b12      	ldr	r3, [pc, #72]	; (8009268 <prvCheckForValidListAndQueue+0x70>)
 800921e:	4a10      	ldr	r2, [pc, #64]	; (8009260 <prvCheckForValidListAndQueue+0x68>)
 8009220:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009222:	2300      	movs	r3, #0
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	4b11      	ldr	r3, [pc, #68]	; (800926c <prvCheckForValidListAndQueue+0x74>)
 8009228:	4a11      	ldr	r2, [pc, #68]	; (8009270 <prvCheckForValidListAndQueue+0x78>)
 800922a:	2110      	movs	r1, #16
 800922c:	200a      	movs	r0, #10
 800922e:	f7fe f8db 	bl	80073e8 <xQueueGenericCreateStatic>
 8009232:	4603      	mov	r3, r0
 8009234:	4a08      	ldr	r2, [pc, #32]	; (8009258 <prvCheckForValidListAndQueue+0x60>)
 8009236:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009238:	4b07      	ldr	r3, [pc, #28]	; (8009258 <prvCheckForValidListAndQueue+0x60>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d005      	beq.n	800924c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009240:	4b05      	ldr	r3, [pc, #20]	; (8009258 <prvCheckForValidListAndQueue+0x60>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	490b      	ldr	r1, [pc, #44]	; (8009274 <prvCheckForValidListAndQueue+0x7c>)
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe fd10 	bl	8007c6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800924c:	f000 f952 	bl	80094f4 <vPortExitCritical>
}
 8009250:	bf00      	nop
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	20000ee4 	.word	0x20000ee4
 800925c:	20000eb4 	.word	0x20000eb4
 8009260:	20000ec8 	.word	0x20000ec8
 8009264:	20000edc 	.word	0x20000edc
 8009268:	20000ee0 	.word	0x20000ee0
 800926c:	20000f90 	.word	0x20000f90
 8009270:	20000ef0 	.word	0x20000ef0
 8009274:	0800b248 	.word	0x0800b248

08009278 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	3b04      	subs	r3, #4
 8009288:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009290:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	3b04      	subs	r3, #4
 8009296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f023 0201 	bic.w	r2, r3, #1
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	3b04      	subs	r3, #4
 80092a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092a8:	4a0c      	ldr	r2, [pc, #48]	; (80092dc <pxPortInitialiseStack+0x64>)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3b14      	subs	r3, #20
 80092b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3b04      	subs	r3, #4
 80092be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f06f 0202 	mvn.w	r2, #2
 80092c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	3b20      	subs	r3, #32
 80092cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092ce:	68fb      	ldr	r3, [r7, #12]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	080092e1 	.word	0x080092e1

080092e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80092e6:	2300      	movs	r3, #0
 80092e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80092ea:	4b14      	ldr	r3, [pc, #80]	; (800933c <prvTaskExitError+0x5c>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092f2:	d00c      	beq.n	800930e <prvTaskExitError+0x2e>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f8:	b672      	cpsid	i
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	b662      	cpsie	i
 8009308:	60fb      	str	r3, [r7, #12]
}
 800930a:	bf00      	nop
 800930c:	e7fe      	b.n	800930c <prvTaskExitError+0x2c>
	__asm volatile
 800930e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009312:	b672      	cpsid	i
 8009314:	f383 8811 	msr	BASEPRI, r3
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	b662      	cpsie	i
 8009322:	60bb      	str	r3, [r7, #8]
}
 8009324:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009326:	bf00      	nop
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d0fc      	beq.n	8009328 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800932e:	bf00      	nop
 8009330:	bf00      	nop
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	20000118 	.word	0x20000118

08009340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009340:	4b07      	ldr	r3, [pc, #28]	; (8009360 <pxCurrentTCBConst2>)
 8009342:	6819      	ldr	r1, [r3, #0]
 8009344:	6808      	ldr	r0, [r1, #0]
 8009346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934a:	f380 8809 	msr	PSP, r0
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f04f 0000 	mov.w	r0, #0
 8009356:	f380 8811 	msr	BASEPRI, r0
 800935a:	4770      	bx	lr
 800935c:	f3af 8000 	nop.w

08009360 <pxCurrentTCBConst2>:
 8009360:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009364:	bf00      	nop
 8009366:	bf00      	nop

08009368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009368:	4808      	ldr	r0, [pc, #32]	; (800938c <prvPortStartFirstTask+0x24>)
 800936a:	6800      	ldr	r0, [r0, #0]
 800936c:	6800      	ldr	r0, [r0, #0]
 800936e:	f380 8808 	msr	MSP, r0
 8009372:	f04f 0000 	mov.w	r0, #0
 8009376:	f380 8814 	msr	CONTROL, r0
 800937a:	b662      	cpsie	i
 800937c:	b661      	cpsie	f
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	f3bf 8f6f 	isb	sy
 8009386:	df00      	svc	0
 8009388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800938a:	bf00      	nop
 800938c:	e000ed08 	.word	0xe000ed08

08009390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009396:	4b37      	ldr	r3, [pc, #220]	; (8009474 <xPortStartScheduler+0xe4>)
 8009398:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	22ff      	movs	r2, #255	; 0xff
 80093a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	4b2f      	ldr	r3, [pc, #188]	; (8009478 <xPortStartScheduler+0xe8>)
 80093bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093be:	4b2f      	ldr	r3, [pc, #188]	; (800947c <xPortStartScheduler+0xec>)
 80093c0:	2207      	movs	r2, #7
 80093c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093c4:	e009      	b.n	80093da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80093c6:	4b2d      	ldr	r3, [pc, #180]	; (800947c <xPortStartScheduler+0xec>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3b01      	subs	r3, #1
 80093cc:	4a2b      	ldr	r2, [pc, #172]	; (800947c <xPortStartScheduler+0xec>)
 80093ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	005b      	lsls	r3, r3, #1
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093da:	78fb      	ldrb	r3, [r7, #3]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e2:	2b80      	cmp	r3, #128	; 0x80
 80093e4:	d0ef      	beq.n	80093c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80093e6:	4b25      	ldr	r3, [pc, #148]	; (800947c <xPortStartScheduler+0xec>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f1c3 0307 	rsb	r3, r3, #7
 80093ee:	2b04      	cmp	r3, #4
 80093f0:	d00c      	beq.n	800940c <xPortStartScheduler+0x7c>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f6:	b672      	cpsid	i
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	b662      	cpsie	i
 8009406:	60bb      	str	r3, [r7, #8]
}
 8009408:	bf00      	nop
 800940a:	e7fe      	b.n	800940a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800940c:	4b1b      	ldr	r3, [pc, #108]	; (800947c <xPortStartScheduler+0xec>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	021b      	lsls	r3, r3, #8
 8009412:	4a1a      	ldr	r2, [pc, #104]	; (800947c <xPortStartScheduler+0xec>)
 8009414:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009416:	4b19      	ldr	r3, [pc, #100]	; (800947c <xPortStartScheduler+0xec>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800941e:	4a17      	ldr	r2, [pc, #92]	; (800947c <xPortStartScheduler+0xec>)
 8009420:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	b2da      	uxtb	r2, r3
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800942a:	4b15      	ldr	r3, [pc, #84]	; (8009480 <xPortStartScheduler+0xf0>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a14      	ldr	r2, [pc, #80]	; (8009480 <xPortStartScheduler+0xf0>)
 8009430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009434:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009436:	4b12      	ldr	r3, [pc, #72]	; (8009480 <xPortStartScheduler+0xf0>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a11      	ldr	r2, [pc, #68]	; (8009480 <xPortStartScheduler+0xf0>)
 800943c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009440:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009442:	f000 f8dd 	bl	8009600 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009446:	4b0f      	ldr	r3, [pc, #60]	; (8009484 <xPortStartScheduler+0xf4>)
 8009448:	2200      	movs	r2, #0
 800944a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800944c:	f000 f8fc 	bl	8009648 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009450:	4b0d      	ldr	r3, [pc, #52]	; (8009488 <xPortStartScheduler+0xf8>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a0c      	ldr	r2, [pc, #48]	; (8009488 <xPortStartScheduler+0xf8>)
 8009456:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800945a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800945c:	f7ff ff84 	bl	8009368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009460:	f7ff f846 	bl	80084f0 <vTaskSwitchContext>
	prvTaskExitError();
 8009464:	f7ff ff3c 	bl	80092e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	e000e400 	.word	0xe000e400
 8009478:	20000fe0 	.word	0x20000fe0
 800947c:	20000fe4 	.word	0x20000fe4
 8009480:	e000ed20 	.word	0xe000ed20
 8009484:	20000118 	.word	0x20000118
 8009488:	e000ef34 	.word	0xe000ef34

0800948c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
	__asm volatile
 8009492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009496:	b672      	cpsid	i
 8009498:	f383 8811 	msr	BASEPRI, r3
 800949c:	f3bf 8f6f 	isb	sy
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	b662      	cpsie	i
 80094a6:	607b      	str	r3, [r7, #4]
}
 80094a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094aa:	4b10      	ldr	r3, [pc, #64]	; (80094ec <vPortEnterCritical+0x60>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3301      	adds	r3, #1
 80094b0:	4a0e      	ldr	r2, [pc, #56]	; (80094ec <vPortEnterCritical+0x60>)
 80094b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094b4:	4b0d      	ldr	r3, [pc, #52]	; (80094ec <vPortEnterCritical+0x60>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d111      	bne.n	80094e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094bc:	4b0c      	ldr	r3, [pc, #48]	; (80094f0 <vPortEnterCritical+0x64>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00c      	beq.n	80094e0 <vPortEnterCritical+0x54>
	__asm volatile
 80094c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ca:	b672      	cpsid	i
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	b662      	cpsie	i
 80094da:	603b      	str	r3, [r7, #0]
}
 80094dc:	bf00      	nop
 80094de:	e7fe      	b.n	80094de <vPortEnterCritical+0x52>
	}
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	20000118 	.word	0x20000118
 80094f0:	e000ed04 	.word	0xe000ed04

080094f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80094fa:	4b13      	ldr	r3, [pc, #76]	; (8009548 <vPortExitCritical+0x54>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10c      	bne.n	800951c <vPortExitCritical+0x28>
	__asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	b672      	cpsid	i
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	b662      	cpsie	i
 8009516:	607b      	str	r3, [r7, #4]
}
 8009518:	bf00      	nop
 800951a:	e7fe      	b.n	800951a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800951c:	4b0a      	ldr	r3, [pc, #40]	; (8009548 <vPortExitCritical+0x54>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	3b01      	subs	r3, #1
 8009522:	4a09      	ldr	r2, [pc, #36]	; (8009548 <vPortExitCritical+0x54>)
 8009524:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009526:	4b08      	ldr	r3, [pc, #32]	; (8009548 <vPortExitCritical+0x54>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d105      	bne.n	800953a <vPortExitCritical+0x46>
 800952e:	2300      	movs	r3, #0
 8009530:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	f383 8811 	msr	BASEPRI, r3
}
 8009538:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800953a:	bf00      	nop
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	20000118 	.word	0x20000118
 800954c:	00000000 	.word	0x00000000

08009550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009550:	f3ef 8009 	mrs	r0, PSP
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	4b15      	ldr	r3, [pc, #84]	; (80095b0 <pxCurrentTCBConst>)
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	f01e 0f10 	tst.w	lr, #16
 8009560:	bf08      	it	eq
 8009562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956a:	6010      	str	r0, [r2, #0]
 800956c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009574:	b672      	cpsid	i
 8009576:	f380 8811 	msr	BASEPRI, r0
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	b662      	cpsie	i
 8009584:	f7fe ffb4 	bl	80084f0 <vTaskSwitchContext>
 8009588:	f04f 0000 	mov.w	r0, #0
 800958c:	f380 8811 	msr	BASEPRI, r0
 8009590:	bc09      	pop	{r0, r3}
 8009592:	6819      	ldr	r1, [r3, #0]
 8009594:	6808      	ldr	r0, [r1, #0]
 8009596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959a:	f01e 0f10 	tst.w	lr, #16
 800959e:	bf08      	it	eq
 80095a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095a4:	f380 8809 	msr	PSP, r0
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop

080095b0 <pxCurrentTCBConst>:
 80095b0:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop

080095b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
	__asm volatile
 80095be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c2:	b672      	cpsid	i
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	b662      	cpsie	i
 80095d2:	607b      	str	r3, [r7, #4]
}
 80095d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095d6:	f7fe fecf 	bl	8008378 <xTaskIncrementTick>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d003      	beq.n	80095e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095e0:	4b06      	ldr	r3, [pc, #24]	; (80095fc <SysTick_Handler+0x44>)
 80095e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e6:	601a      	str	r2, [r3, #0]
 80095e8:	2300      	movs	r3, #0
 80095ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	f383 8811 	msr	BASEPRI, r3
}
 80095f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80095f4:	bf00      	nop
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	e000ed04 	.word	0xe000ed04

08009600 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009600:	b480      	push	{r7}
 8009602:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009604:	4b0b      	ldr	r3, [pc, #44]	; (8009634 <vPortSetupTimerInterrupt+0x34>)
 8009606:	2200      	movs	r2, #0
 8009608:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800960a:	4b0b      	ldr	r3, [pc, #44]	; (8009638 <vPortSetupTimerInterrupt+0x38>)
 800960c:	2200      	movs	r2, #0
 800960e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009610:	4b0a      	ldr	r3, [pc, #40]	; (800963c <vPortSetupTimerInterrupt+0x3c>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a0a      	ldr	r2, [pc, #40]	; (8009640 <vPortSetupTimerInterrupt+0x40>)
 8009616:	fba2 2303 	umull	r2, r3, r2, r3
 800961a:	099b      	lsrs	r3, r3, #6
 800961c:	4a09      	ldr	r2, [pc, #36]	; (8009644 <vPortSetupTimerInterrupt+0x44>)
 800961e:	3b01      	subs	r3, #1
 8009620:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009622:	4b04      	ldr	r3, [pc, #16]	; (8009634 <vPortSetupTimerInterrupt+0x34>)
 8009624:	2207      	movs	r2, #7
 8009626:	601a      	str	r2, [r3, #0]
}
 8009628:	bf00      	nop
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	e000e010 	.word	0xe000e010
 8009638:	e000e018 	.word	0xe000e018
 800963c:	2000011c 	.word	0x2000011c
 8009640:	10624dd3 	.word	0x10624dd3
 8009644:	e000e014 	.word	0xe000e014

08009648 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009648:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009658 <vPortEnableVFP+0x10>
 800964c:	6801      	ldr	r1, [r0, #0]
 800964e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009652:	6001      	str	r1, [r0, #0]
 8009654:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009656:	bf00      	nop
 8009658:	e000ed88 	.word	0xe000ed88

0800965c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009662:	f3ef 8305 	mrs	r3, IPSR
 8009666:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2b0f      	cmp	r3, #15
 800966c:	d916      	bls.n	800969c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800966e:	4a19      	ldr	r2, [pc, #100]	; (80096d4 <vPortValidateInterruptPriority+0x78>)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4413      	add	r3, r2
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009678:	4b17      	ldr	r3, [pc, #92]	; (80096d8 <vPortValidateInterruptPriority+0x7c>)
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	7afa      	ldrb	r2, [r7, #11]
 800967e:	429a      	cmp	r2, r3
 8009680:	d20c      	bcs.n	800969c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009686:	b672      	cpsid	i
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	b662      	cpsie	i
 8009696:	607b      	str	r3, [r7, #4]
}
 8009698:	bf00      	nop
 800969a:	e7fe      	b.n	800969a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800969c:	4b0f      	ldr	r3, [pc, #60]	; (80096dc <vPortValidateInterruptPriority+0x80>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096a4:	4b0e      	ldr	r3, [pc, #56]	; (80096e0 <vPortValidateInterruptPriority+0x84>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d90c      	bls.n	80096c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	b672      	cpsid	i
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	b662      	cpsie	i
 80096c0:	603b      	str	r3, [r7, #0]
}
 80096c2:	bf00      	nop
 80096c4:	e7fe      	b.n	80096c4 <vPortValidateInterruptPriority+0x68>
	}
 80096c6:	bf00      	nop
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	e000e3f0 	.word	0xe000e3f0
 80096d8:	20000fe0 	.word	0x20000fe0
 80096dc:	e000ed0c 	.word	0xe000ed0c
 80096e0:	20000fe4 	.word	0x20000fe4

080096e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b08a      	sub	sp, #40	; 0x28
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80096ec:	2300      	movs	r3, #0
 80096ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80096f0:	f7fe fd84 	bl	80081fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80096f4:	4b5b      	ldr	r3, [pc, #364]	; (8009864 <pvPortMalloc+0x180>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d101      	bne.n	8009700 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80096fc:	f000 f91a 	bl	8009934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009700:	4b59      	ldr	r3, [pc, #356]	; (8009868 <pvPortMalloc+0x184>)
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4013      	ands	r3, r2
 8009708:	2b00      	cmp	r3, #0
 800970a:	f040 8092 	bne.w	8009832 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d01f      	beq.n	8009754 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009714:	2208      	movs	r2, #8
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4413      	add	r3, r2
 800971a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f003 0307 	and.w	r3, r3, #7
 8009722:	2b00      	cmp	r3, #0
 8009724:	d016      	beq.n	8009754 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f023 0307 	bic.w	r3, r3, #7
 800972c:	3308      	adds	r3, #8
 800972e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f003 0307 	and.w	r3, r3, #7
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00c      	beq.n	8009754 <pvPortMalloc+0x70>
	__asm volatile
 800973a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973e:	b672      	cpsid	i
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	b662      	cpsie	i
 800974e:	617b      	str	r3, [r7, #20]
}
 8009750:	bf00      	nop
 8009752:	e7fe      	b.n	8009752 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d06b      	beq.n	8009832 <pvPortMalloc+0x14e>
 800975a:	4b44      	ldr	r3, [pc, #272]	; (800986c <pvPortMalloc+0x188>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	429a      	cmp	r2, r3
 8009762:	d866      	bhi.n	8009832 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009764:	4b42      	ldr	r3, [pc, #264]	; (8009870 <pvPortMalloc+0x18c>)
 8009766:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009768:	4b41      	ldr	r3, [pc, #260]	; (8009870 <pvPortMalloc+0x18c>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800976e:	e004      	b.n	800977a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	429a      	cmp	r2, r3
 8009782:	d903      	bls.n	800978c <pvPortMalloc+0xa8>
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1f1      	bne.n	8009770 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800978c:	4b35      	ldr	r3, [pc, #212]	; (8009864 <pvPortMalloc+0x180>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009792:	429a      	cmp	r2, r3
 8009794:	d04d      	beq.n	8009832 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2208      	movs	r2, #8
 800979c:	4413      	add	r3, r2
 800979e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	6a3b      	ldr	r3, [r7, #32]
 80097a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	1ad2      	subs	r2, r2, r3
 80097b0:	2308      	movs	r3, #8
 80097b2:	005b      	lsls	r3, r3, #1
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d921      	bls.n	80097fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4413      	add	r3, r2
 80097be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	f003 0307 	and.w	r3, r3, #7
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00c      	beq.n	80097e4 <pvPortMalloc+0x100>
	__asm volatile
 80097ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ce:	b672      	cpsid	i
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	b662      	cpsie	i
 80097de:	613b      	str	r3, [r7, #16]
}
 80097e0:	bf00      	nop
 80097e2:	e7fe      	b.n	80097e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80097e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	1ad2      	subs	r2, r2, r3
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80097f6:	69b8      	ldr	r0, [r7, #24]
 80097f8:	f000 f8fe 	bl	80099f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80097fc:	4b1b      	ldr	r3, [pc, #108]	; (800986c <pvPortMalloc+0x188>)
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	4a19      	ldr	r2, [pc, #100]	; (800986c <pvPortMalloc+0x188>)
 8009808:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800980a:	4b18      	ldr	r3, [pc, #96]	; (800986c <pvPortMalloc+0x188>)
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	4b19      	ldr	r3, [pc, #100]	; (8009874 <pvPortMalloc+0x190>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	429a      	cmp	r2, r3
 8009814:	d203      	bcs.n	800981e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009816:	4b15      	ldr	r3, [pc, #84]	; (800986c <pvPortMalloc+0x188>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a16      	ldr	r2, [pc, #88]	; (8009874 <pvPortMalloc+0x190>)
 800981c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009820:	685a      	ldr	r2, [r3, #4]
 8009822:	4b11      	ldr	r3, [pc, #68]	; (8009868 <pvPortMalloc+0x184>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	431a      	orrs	r2, r3
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	2200      	movs	r2, #0
 8009830:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009832:	f7fe fcf1 	bl	8008218 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	f003 0307 	and.w	r3, r3, #7
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00c      	beq.n	800985a <pvPortMalloc+0x176>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009844:	b672      	cpsid	i
 8009846:	f383 8811 	msr	BASEPRI, r3
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	b662      	cpsie	i
 8009854:	60fb      	str	r3, [r7, #12]
}
 8009856:	bf00      	nop
 8009858:	e7fe      	b.n	8009858 <pvPortMalloc+0x174>
	return pvReturn;
 800985a:	69fb      	ldr	r3, [r7, #28]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3728      	adds	r7, #40	; 0x28
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	20004bf0 	.word	0x20004bf0
 8009868:	20004bfc 	.word	0x20004bfc
 800986c:	20004bf4 	.word	0x20004bf4
 8009870:	20004be8 	.word	0x20004be8
 8009874:	20004bf8 	.word	0x20004bf8

08009878 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d04c      	beq.n	8009924 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800988a:	2308      	movs	r3, #8
 800988c:	425b      	negs	r3, r3
 800988e:	697a      	ldr	r2, [r7, #20]
 8009890:	4413      	add	r3, r2
 8009892:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	4b23      	ldr	r3, [pc, #140]	; (800992c <vPortFree+0xb4>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4013      	ands	r3, r2
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10c      	bne.n	80098c0 <vPortFree+0x48>
	__asm volatile
 80098a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098aa:	b672      	cpsid	i
 80098ac:	f383 8811 	msr	BASEPRI, r3
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	b662      	cpsie	i
 80098ba:	60fb      	str	r3, [r7, #12]
}
 80098bc:	bf00      	nop
 80098be:	e7fe      	b.n	80098be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00c      	beq.n	80098e2 <vPortFree+0x6a>
	__asm volatile
 80098c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098cc:	b672      	cpsid	i
 80098ce:	f383 8811 	msr	BASEPRI, r3
 80098d2:	f3bf 8f6f 	isb	sy
 80098d6:	f3bf 8f4f 	dsb	sy
 80098da:	b662      	cpsie	i
 80098dc:	60bb      	str	r3, [r7, #8]
}
 80098de:	bf00      	nop
 80098e0:	e7fe      	b.n	80098e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	685a      	ldr	r2, [r3, #4]
 80098e6:	4b11      	ldr	r3, [pc, #68]	; (800992c <vPortFree+0xb4>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4013      	ands	r3, r2
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d019      	beq.n	8009924 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d115      	bne.n	8009924 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	685a      	ldr	r2, [r3, #4]
 80098fc:	4b0b      	ldr	r3, [pc, #44]	; (800992c <vPortFree+0xb4>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	43db      	mvns	r3, r3
 8009902:	401a      	ands	r2, r3
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009908:	f7fe fc78 	bl	80081fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	4b07      	ldr	r3, [pc, #28]	; (8009930 <vPortFree+0xb8>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4413      	add	r3, r2
 8009916:	4a06      	ldr	r2, [pc, #24]	; (8009930 <vPortFree+0xb8>)
 8009918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800991a:	6938      	ldr	r0, [r7, #16]
 800991c:	f000 f86c 	bl	80099f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009920:	f7fe fc7a 	bl	8008218 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009924:	bf00      	nop
 8009926:	3718      	adds	r7, #24
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	20004bfc 	.word	0x20004bfc
 8009930:	20004bf4 	.word	0x20004bf4

08009934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800993a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800993e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009940:	4b27      	ldr	r3, [pc, #156]	; (80099e0 <prvHeapInit+0xac>)
 8009942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f003 0307 	and.w	r3, r3, #7
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00c      	beq.n	8009968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3307      	adds	r3, #7
 8009952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f023 0307 	bic.w	r3, r3, #7
 800995a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	4a1f      	ldr	r2, [pc, #124]	; (80099e0 <prvHeapInit+0xac>)
 8009964:	4413      	add	r3, r2
 8009966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800996c:	4a1d      	ldr	r2, [pc, #116]	; (80099e4 <prvHeapInit+0xb0>)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009972:	4b1c      	ldr	r3, [pc, #112]	; (80099e4 <prvHeapInit+0xb0>)
 8009974:	2200      	movs	r2, #0
 8009976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	4413      	add	r3, r2
 800997e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009980:	2208      	movs	r2, #8
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	1a9b      	subs	r3, r3, r2
 8009986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f023 0307 	bic.w	r3, r3, #7
 800998e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	4a15      	ldr	r2, [pc, #84]	; (80099e8 <prvHeapInit+0xb4>)
 8009994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009996:	4b14      	ldr	r3, [pc, #80]	; (80099e8 <prvHeapInit+0xb4>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2200      	movs	r2, #0
 800999c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800999e:	4b12      	ldr	r3, [pc, #72]	; (80099e8 <prvHeapInit+0xb4>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2200      	movs	r2, #0
 80099a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	1ad2      	subs	r2, r2, r3
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80099b4:	4b0c      	ldr	r3, [pc, #48]	; (80099e8 <prvHeapInit+0xb4>)
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	4a0a      	ldr	r2, [pc, #40]	; (80099ec <prvHeapInit+0xb8>)
 80099c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	4a09      	ldr	r2, [pc, #36]	; (80099f0 <prvHeapInit+0xbc>)
 80099ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80099cc:	4b09      	ldr	r3, [pc, #36]	; (80099f4 <prvHeapInit+0xc0>)
 80099ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80099d2:	601a      	str	r2, [r3, #0]
}
 80099d4:	bf00      	nop
 80099d6:	3714      	adds	r7, #20
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr
 80099e0:	20000fe8 	.word	0x20000fe8
 80099e4:	20004be8 	.word	0x20004be8
 80099e8:	20004bf0 	.word	0x20004bf0
 80099ec:	20004bf8 	.word	0x20004bf8
 80099f0:	20004bf4 	.word	0x20004bf4
 80099f4:	20004bfc 	.word	0x20004bfc

080099f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a00:	4b28      	ldr	r3, [pc, #160]	; (8009aa4 <prvInsertBlockIntoFreeList+0xac>)
 8009a02:	60fb      	str	r3, [r7, #12]
 8009a04:	e002      	b.n	8009a0c <prvInsertBlockIntoFreeList+0x14>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d8f7      	bhi.n	8009a06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	4413      	add	r3, r2
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d108      	bne.n	8009a3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	685a      	ldr	r2, [r3, #4]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	441a      	add	r2, r3
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	441a      	add	r2, r3
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d118      	bne.n	8009a80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	4b15      	ldr	r3, [pc, #84]	; (8009aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d00d      	beq.n	8009a76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	685a      	ldr	r2, [r3, #4]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	441a      	add	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	601a      	str	r2, [r3, #0]
 8009a74:	e008      	b.n	8009a88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a76:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	601a      	str	r2, [r3, #0]
 8009a7e:	e003      	b.n	8009a88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d002      	beq.n	8009a96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a96:	bf00      	nop
 8009a98:	3714      	adds	r7, #20
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	20004be8 	.word	0x20004be8
 8009aa8:	20004bf0 	.word	0x20004bf0

08009aac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009ab0:	4904      	ldr	r1, [pc, #16]	; (8009ac4 <MX_FATFS_Init+0x18>)
 8009ab2:	4805      	ldr	r0, [pc, #20]	; (8009ac8 <MX_FATFS_Init+0x1c>)
 8009ab4:	f7fd f9f2 	bl	8006e9c <FATFS_LinkDriver>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	461a      	mov	r2, r3
 8009abc:	4b03      	ldr	r3, [pc, #12]	; (8009acc <MX_FATFS_Init+0x20>)
 8009abe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009ac0:	bf00      	nop
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	20004d4c 	.word	0x20004d4c
 8009ac8:	20000194 	.word	0x20000194
 8009acc:	20004d50 	.word	0x20004d50

08009ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009ad4:	f7f6 fd18 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009ad8:	f000 f82a 	bl	8009b30 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009adc:	f000 f93c 	bl	8009d58 <_ZL12MX_GPIO_Initv>
  //MX_ETH_Init();
  MX_USART3_UART_Init();
 8009ae0:	f000 f906 	bl	8009cf0 <_ZL19MX_USART3_UART_Initv>
  MX_FATFS_Init();
 8009ae4:	f7ff ffe2 	bl	8009aac <MX_FATFS_Init>
  MX_SPI1_Init();
 8009ae8:	f000 f8c0 	bl	8009c6c <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8009aec:	f7fd f9ec 	bl	8006ec8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkLED01 */
  blinkLED01Handle = osThreadNew(StartDefaultTask, NULL, &blinkLED01_attributes);
 8009af0:	4a09      	ldr	r2, [pc, #36]	; (8009b18 <main+0x48>)
 8009af2:	2100      	movs	r1, #0
 8009af4:	4809      	ldr	r0, [pc, #36]	; (8009b1c <main+0x4c>)
 8009af6:	f7fd fa51 	bl	8006f9c <osThreadNew>
 8009afa:	4603      	mov	r3, r0
 8009afc:	4a08      	ldr	r2, [pc, #32]	; (8009b20 <main+0x50>)
 8009afe:	6013      	str	r3, [r2, #0]

  /* creation of blinkLED02 */
  blinkLED02Handle = osThreadNew(StartTask02, NULL, &blinkLED02_attributes);
 8009b00:	4a08      	ldr	r2, [pc, #32]	; (8009b24 <main+0x54>)
 8009b02:	2100      	movs	r1, #0
 8009b04:	4808      	ldr	r0, [pc, #32]	; (8009b28 <main+0x58>)
 8009b06:	f7fd fa49 	bl	8006f9c <osThreadNew>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	4a07      	ldr	r2, [pc, #28]	; (8009b2c <main+0x5c>)
 8009b0e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8009b10:	f7fd fa0e 	bl	8006f30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009b14:	e7fe      	b.n	8009b14 <main+0x44>
 8009b16:	bf00      	nop
 8009b18:	0800b2b0 	.word	0x0800b2b0
 8009b1c:	08009ec9 	.word	0x08009ec9
 8009b20:	20004ce8 	.word	0x20004ce8
 8009b24:	0800b2d4 	.word	0x0800b2d4
 8009b28:	08009eed 	.word	0x08009eed
 8009b2c:	20004cec 	.word	0x20004cec

08009b30 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b0b4      	sub	sp, #208	; 0xd0
 8009b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009b36:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009b3a:	2230      	movs	r2, #48	; 0x30
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f001 fa36 	bl	800afb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009b44:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009b48:	2200      	movs	r2, #0
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	605a      	str	r2, [r3, #4]
 8009b4e:	609a      	str	r2, [r3, #8]
 8009b50:	60da      	str	r2, [r3, #12]
 8009b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009b54:	f107 0308 	add.w	r3, r7, #8
 8009b58:	2284      	movs	r2, #132	; 0x84
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f001 fa27 	bl	800afb0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8009b62:	f7f8 f9a3 	bl	8001eac <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009b66:	4b3e      	ldr	r3, [pc, #248]	; (8009c60 <_Z18SystemClock_Configv+0x130>)
 8009b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6a:	4a3d      	ldr	r2, [pc, #244]	; (8009c60 <_Z18SystemClock_Configv+0x130>)
 8009b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b70:	6413      	str	r3, [r2, #64]	; 0x40
 8009b72:	4b3b      	ldr	r3, [pc, #236]	; (8009c60 <_Z18SystemClock_Configv+0x130>)
 8009b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b7a:	607b      	str	r3, [r7, #4]
 8009b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8009b7e:	4b39      	ldr	r3, [pc, #228]	; (8009c64 <_Z18SystemClock_Configv+0x134>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009b86:	4a37      	ldr	r2, [pc, #220]	; (8009c64 <_Z18SystemClock_Configv+0x134>)
 8009b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b8c:	6013      	str	r3, [r2, #0]
 8009b8e:	4b35      	ldr	r3, [pc, #212]	; (8009c64 <_Z18SystemClock_Configv+0x134>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009b96:	603b      	str	r3, [r7, #0]
 8009b98:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8009ba0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8009ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009ba8:	2302      	movs	r3, #2
 8009baa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009bae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009bb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009bb6:	2304      	movs	r3, #4
 8009bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8009bbc:	2348      	movs	r3, #72	; 0x48
 8009bbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009bce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7f8 f97a 	bl	8001ecc <HAL_RCC_OscConfig>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	bf14      	ite	ne
 8009bde:	2301      	movne	r3, #1
 8009be0:	2300      	moveq	r3, #0
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d001      	beq.n	8009bec <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8009be8:	f000 f9a2 	bl	8009f30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009bec:	230f      	movs	r3, #15
 8009bee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009c06:	2300      	movs	r3, #0
 8009c08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009c0c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009c10:	2102      	movs	r1, #2
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7f8 fbfe 	bl	8002414 <HAL_RCC_ClockConfig>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	bf14      	ite	ne
 8009c1e:	2301      	movne	r3, #1
 8009c20:	2300      	moveq	r3, #0
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 8009c28:	f000 f982 	bl	8009f30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8009c2c:	4b0e      	ldr	r3, [pc, #56]	; (8009c68 <_Z18SystemClock_Configv+0x138>)
 8009c2e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8009c30:	2300      	movs	r3, #0
 8009c32:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8009c34:	2300      	movs	r3, #0
 8009c36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009c3a:	f107 0308 	add.w	r3, r7, #8
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7f8 fe1c 	bl	800287c <HAL_RCCEx_PeriphCLKConfig>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	bf14      	ite	ne
 8009c4a:	2301      	movne	r3, #1
 8009c4c:	2300      	moveq	r3, #0
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <_Z18SystemClock_Configv+0x128>
  {
    Error_Handler();
 8009c54:	f000 f96c 	bl	8009f30 <Error_Handler>
  }
}
 8009c58:	bf00      	nop
 8009c5a:	37d0      	adds	r7, #208	; 0xd0
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	40023800 	.word	0x40023800
 8009c64:	40007000 	.word	0x40007000
 8009c68:	00200100 	.word	0x00200100

08009c6c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8009c70:	4b1d      	ldr	r3, [pc, #116]	; (8009ce8 <_ZL12MX_SPI1_Initv+0x7c>)
 8009c72:	4a1e      	ldr	r2, [pc, #120]	; (8009cec <_ZL12MX_SPI1_Initv+0x80>)
 8009c74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009c76:	4b1c      	ldr	r3, [pc, #112]	; (8009ce8 <_ZL12MX_SPI1_Initv+0x7c>)
 8009c78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009c7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009c7e:	4b1a      	ldr	r3, [pc, #104]	; (8009ce8 <_ZL12MX_SPI1_Initv+0x7c>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009c84:	4b18      	ldr	r3, [pc, #96]	; (8009ce8 <_ZL12MX_SPI1_Initv+0x7c>)
 8009c86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009c8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c8c:	4b16      	ldr	r3, [pc, #88]	; (8009ce8 <_ZL12MX_SPI1_Initv+0x7c>)
 8009c8e:	2200      	movs	r2, #0
 8009c90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009c92:	4b15      	ldr	r3, [pc, #84]	; (8009ce8 <_ZL12MX_SPI1_Initv+0x7c>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009c98:	4b13      	ldr	r3, [pc, #76]	; (8009ce8 <_ZL12MX_SPI1_Initv+0x7c>)
 8009c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8009ca0:	4b11      	ldr	r3, [pc, #68]	; (8009ce8 <_ZL12MX_SPI1_Initv+0x7c>)
 8009ca2:	2228      	movs	r2, #40	; 0x28
 8009ca4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009ca6:	4b10      	ldr	r3, [pc, #64]	; (8009ce8 <_ZL12MX_SPI1_Initv+0x7c>)
 8009ca8:	2200      	movs	r2, #0
 8009caa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009cac:	4b0e      	ldr	r3, [pc, #56]	; (8009ce8 <_ZL12MX_SPI1_Initv+0x7c>)
 8009cae:	2200      	movs	r2, #0
 8009cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cb2:	4b0d      	ldr	r3, [pc, #52]	; (8009ce8 <_ZL12MX_SPI1_Initv+0x7c>)
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8009cb8:	4b0b      	ldr	r3, [pc, #44]	; (8009ce8 <_ZL12MX_SPI1_Initv+0x7c>)
 8009cba:	2207      	movs	r2, #7
 8009cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009cbe:	4b0a      	ldr	r3, [pc, #40]	; (8009ce8 <_ZL12MX_SPI1_Initv+0x7c>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8009cc4:	4b08      	ldr	r3, [pc, #32]	; (8009ce8 <_ZL12MX_SPI1_Initv+0x7c>)
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009cca:	4807      	ldr	r0, [pc, #28]	; (8009ce8 <_ZL12MX_SPI1_Initv+0x7c>)
 8009ccc:	f7f9 f9c6 	bl	800305c <HAL_SPI_Init>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	bf14      	ite	ne
 8009cd6:	2301      	movne	r3, #1
 8009cd8:	2300      	moveq	r3, #0
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d001      	beq.n	8009ce4 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8009ce0:	f000 f926 	bl	8009f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009ce4:	bf00      	nop
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	20004c00 	.word	0x20004c00
 8009cec:	40013000 	.word	0x40013000

08009cf0 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8009cf4:	4b16      	ldr	r3, [pc, #88]	; (8009d50 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009cf6:	4a17      	ldr	r2, [pc, #92]	; (8009d54 <_ZL19MX_USART3_UART_Initv+0x64>)
 8009cf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8009cfa:	4b15      	ldr	r3, [pc, #84]	; (8009d50 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009d00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009d02:	4b13      	ldr	r3, [pc, #76]	; (8009d50 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009d08:	4b11      	ldr	r3, [pc, #68]	; (8009d50 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009d0e:	4b10      	ldr	r3, [pc, #64]	; (8009d50 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009d14:	4b0e      	ldr	r3, [pc, #56]	; (8009d50 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009d16:	220c      	movs	r2, #12
 8009d18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009d1a:	4b0d      	ldr	r3, [pc, #52]	; (8009d50 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009d20:	4b0b      	ldr	r3, [pc, #44]	; (8009d50 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009d26:	4b0a      	ldr	r3, [pc, #40]	; (8009d50 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009d2c:	4b08      	ldr	r3, [pc, #32]	; (8009d50 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009d2e:	2200      	movs	r2, #0
 8009d30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009d32:	4807      	ldr	r0, [pc, #28]	; (8009d50 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009d34:	f7f9 fd1c 	bl	8003770 <HAL_UART_Init>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	bf14      	ite	ne
 8009d3e:	2301      	movne	r3, #1
 8009d40:	2300      	moveq	r3, #0
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d001      	beq.n	8009d4c <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 8009d48:	f000 f8f2 	bl	8009f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8009d4c:	bf00      	nop
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	20004c64 	.word	0x20004c64
 8009d54:	40004800 	.word	0x40004800

08009d58 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b08c      	sub	sp, #48	; 0x30
 8009d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d5e:	f107 031c 	add.w	r3, r7, #28
 8009d62:	2200      	movs	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	605a      	str	r2, [r3, #4]
 8009d68:	609a      	str	r2, [r3, #8]
 8009d6a:	60da      	str	r2, [r3, #12]
 8009d6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009d6e:	4b50      	ldr	r3, [pc, #320]	; (8009eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8009d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d72:	4a4f      	ldr	r2, [pc, #316]	; (8009eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8009d74:	f043 0304 	orr.w	r3, r3, #4
 8009d78:	6313      	str	r3, [r2, #48]	; 0x30
 8009d7a:	4b4d      	ldr	r3, [pc, #308]	; (8009eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8009d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d7e:	f003 0304 	and.w	r3, r3, #4
 8009d82:	61bb      	str	r3, [r7, #24]
 8009d84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009d86:	4b4a      	ldr	r3, [pc, #296]	; (8009eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8009d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d8a:	4a49      	ldr	r2, [pc, #292]	; (8009eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8009d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d90:	6313      	str	r3, [r2, #48]	; 0x30
 8009d92:	4b47      	ldr	r3, [pc, #284]	; (8009eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8009d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d9a:	617b      	str	r3, [r7, #20]
 8009d9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d9e:	4b44      	ldr	r3, [pc, #272]	; (8009eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8009da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da2:	4a43      	ldr	r2, [pc, #268]	; (8009eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8009da4:	f043 0301 	orr.w	r3, r3, #1
 8009da8:	6313      	str	r3, [r2, #48]	; 0x30
 8009daa:	4b41      	ldr	r3, [pc, #260]	; (8009eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8009dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dae:	f003 0301 	and.w	r3, r3, #1
 8009db2:	613b      	str	r3, [r7, #16]
 8009db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009db6:	4b3e      	ldr	r3, [pc, #248]	; (8009eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8009db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dba:	4a3d      	ldr	r2, [pc, #244]	; (8009eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8009dbc:	f043 0302 	orr.w	r3, r3, #2
 8009dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8009dc2:	4b3b      	ldr	r3, [pc, #236]	; (8009eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8009dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc6:	f003 0302 	and.w	r3, r3, #2
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009dce:	4b38      	ldr	r3, [pc, #224]	; (8009eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8009dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd2:	4a37      	ldr	r2, [pc, #220]	; (8009eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8009dd4:	f043 0308 	orr.w	r3, r3, #8
 8009dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8009dda:	4b35      	ldr	r3, [pc, #212]	; (8009eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8009ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dde:	f003 0308 	and.w	r3, r3, #8
 8009de2:	60bb      	str	r3, [r7, #8]
 8009de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009de6:	4b32      	ldr	r3, [pc, #200]	; (8009eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8009de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dea:	4a31      	ldr	r2, [pc, #196]	; (8009eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8009dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009df0:	6313      	str	r3, [r2, #48]	; 0x30
 8009df2:	4b2f      	ldr	r3, [pc, #188]	; (8009eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8009df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dfa:	607b      	str	r3, [r7, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8009dfe:	2200      	movs	r2, #0
 8009e00:	2110      	movs	r1, #16
 8009e02:	482c      	ldr	r0, [pc, #176]	; (8009eb4 <_ZL12MX_GPIO_Initv+0x15c>)
 8009e04:	f7f6 fe60 	bl	8000ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f244 0181 	movw	r1, #16513	; 0x4081
 8009e0e:	482a      	ldr	r0, [pc, #168]	; (8009eb8 <_ZL12MX_GPIO_Initv+0x160>)
 8009e10:	f7f6 fe5a 	bl	8000ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8009e14:	2200      	movs	r2, #0
 8009e16:	2140      	movs	r1, #64	; 0x40
 8009e18:	4828      	ldr	r0, [pc, #160]	; (8009ebc <_ZL12MX_GPIO_Initv+0x164>)
 8009e1a:	f7f6 fe55 	bl	8000ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8009e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009e24:	4b26      	ldr	r3, [pc, #152]	; (8009ec0 <_ZL12MX_GPIO_Initv+0x168>)
 8009e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8009e2c:	f107 031c 	add.w	r3, r7, #28
 8009e30:	4619      	mov	r1, r3
 8009e32:	4824      	ldr	r0, [pc, #144]	; (8009ec4 <_ZL12MX_GPIO_Initv+0x16c>)
 8009e34:	f7f6 fc9c 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8009e38:	2310      	movs	r3, #16
 8009e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e40:	2300      	movs	r3, #0
 8009e42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e44:	2300      	movs	r3, #0
 8009e46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8009e48:	f107 031c 	add.w	r3, r7, #28
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	4819      	ldr	r0, [pc, #100]	; (8009eb4 <_ZL12MX_GPIO_Initv+0x15c>)
 8009e50:	f7f6 fc8e 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8009e54:	f244 0381 	movw	r3, #16513	; 0x4081
 8009e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e62:	2300      	movs	r3, #0
 8009e64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e66:	f107 031c 	add.w	r3, r7, #28
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	4812      	ldr	r0, [pc, #72]	; (8009eb8 <_ZL12MX_GPIO_Initv+0x160>)
 8009e6e:	f7f6 fc7f 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8009e72:	2340      	movs	r3, #64	; 0x40
 8009e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e76:	2301      	movs	r3, #1
 8009e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8009e82:	f107 031c 	add.w	r3, r7, #28
 8009e86:	4619      	mov	r1, r3
 8009e88:	480c      	ldr	r0, [pc, #48]	; (8009ebc <_ZL12MX_GPIO_Initv+0x164>)
 8009e8a:	f7f6 fc71 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8009e8e:	2380      	movs	r3, #128	; 0x80
 8009e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009e92:	2300      	movs	r3, #0
 8009e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8009e9a:	f107 031c 	add.w	r3, r7, #28
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	4806      	ldr	r0, [pc, #24]	; (8009ebc <_ZL12MX_GPIO_Initv+0x164>)
 8009ea2:	f7f6 fc65 	bl	8000770 <HAL_GPIO_Init>

}
 8009ea6:	bf00      	nop
 8009ea8:	3730      	adds	r7, #48	; 0x30
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	40023800 	.word	0x40023800
 8009eb4:	40020000 	.word	0x40020000
 8009eb8:	40020400 	.word	0x40020400
 8009ebc:	40021800 	.word	0x40021800
 8009ec0:	10110000 	.word	0x10110000
 8009ec4:	40020800 	.word	0x40020800

08009ec8 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8009ed0:	f000 f9cc 	bl	800a26c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8009ed4:	2101      	movs	r1, #1
 8009ed6:	4804      	ldr	r0, [pc, #16]	; (8009ee8 <_Z16StartDefaultTaskPv+0x20>)
 8009ed8:	f7f6 fe0f 	bl	8000afa <HAL_GPIO_TogglePin>
	  osDelay(500);
 8009edc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009ee0:	f7fd f902 	bl	80070e8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8009ee4:	e7f6      	b.n	8009ed4 <_Z16StartDefaultTaskPv+0xc>
 8009ee6:	bf00      	nop
 8009ee8:	40020400 	.word	0x40020400

08009eec <_Z11StartTask02Pv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8009ef4:	2180      	movs	r1, #128	; 0x80
 8009ef6:	4804      	ldr	r0, [pc, #16]	; (8009f08 <_Z11StartTask02Pv+0x1c>)
 8009ef8:	f7f6 fdff 	bl	8000afa <HAL_GPIO_TogglePin>
	  osDelay(500);
 8009efc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009f00:	f7fd f8f2 	bl	80070e8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8009f04:	e7f6      	b.n	8009ef4 <_Z11StartTask02Pv+0x8>
 8009f06:	bf00      	nop
 8009f08:	40020400 	.word	0x40020400

08009f0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a04      	ldr	r2, [pc, #16]	; (8009f2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d101      	bne.n	8009f22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8009f1e:	f7f6 fb01 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8009f22:	bf00      	nop
 8009f24:	3708      	adds	r7, #8
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	40002000 	.word	0x40002000

08009f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009f30:	b480      	push	{r7}
 8009f32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009f34:	b672      	cpsid	i
}
 8009f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009f38:	e7fe      	b.n	8009f38 <Error_Handler+0x8>
	...

08009f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009f42:	4b11      	ldr	r3, [pc, #68]	; (8009f88 <HAL_MspInit+0x4c>)
 8009f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f46:	4a10      	ldr	r2, [pc, #64]	; (8009f88 <HAL_MspInit+0x4c>)
 8009f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8009f4e:	4b0e      	ldr	r3, [pc, #56]	; (8009f88 <HAL_MspInit+0x4c>)
 8009f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f56:	607b      	str	r3, [r7, #4]
 8009f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f5a:	4b0b      	ldr	r3, [pc, #44]	; (8009f88 <HAL_MspInit+0x4c>)
 8009f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f5e:	4a0a      	ldr	r2, [pc, #40]	; (8009f88 <HAL_MspInit+0x4c>)
 8009f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f64:	6453      	str	r3, [r2, #68]	; 0x44
 8009f66:	4b08      	ldr	r3, [pc, #32]	; (8009f88 <HAL_MspInit+0x4c>)
 8009f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f6e:	603b      	str	r3, [r7, #0]
 8009f70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009f72:	2200      	movs	r2, #0
 8009f74:	210f      	movs	r1, #15
 8009f76:	f06f 0001 	mvn.w	r0, #1
 8009f7a:	f7f6 fbcf 	bl	800071c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009f7e:	bf00      	nop
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	40023800 	.word	0x40023800

08009f8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08a      	sub	sp, #40	; 0x28
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f94:	f107 0314 	add.w	r3, r7, #20
 8009f98:	2200      	movs	r2, #0
 8009f9a:	601a      	str	r2, [r3, #0]
 8009f9c:	605a      	str	r2, [r3, #4]
 8009f9e:	609a      	str	r2, [r3, #8]
 8009fa0:	60da      	str	r2, [r3, #12]
 8009fa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a25      	ldr	r2, [pc, #148]	; (800a040 <HAL_SPI_MspInit+0xb4>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d143      	bne.n	800a036 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009fae:	4b25      	ldr	r3, [pc, #148]	; (800a044 <HAL_SPI_MspInit+0xb8>)
 8009fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fb2:	4a24      	ldr	r2, [pc, #144]	; (800a044 <HAL_SPI_MspInit+0xb8>)
 8009fb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8009fba:	4b22      	ldr	r3, [pc, #136]	; (800a044 <HAL_SPI_MspInit+0xb8>)
 8009fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009fc2:	613b      	str	r3, [r7, #16]
 8009fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009fc6:	4b1f      	ldr	r3, [pc, #124]	; (800a044 <HAL_SPI_MspInit+0xb8>)
 8009fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fca:	4a1e      	ldr	r2, [pc, #120]	; (800a044 <HAL_SPI_MspInit+0xb8>)
 8009fcc:	f043 0301 	orr.w	r3, r3, #1
 8009fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8009fd2:	4b1c      	ldr	r3, [pc, #112]	; (800a044 <HAL_SPI_MspInit+0xb8>)
 8009fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	60fb      	str	r3, [r7, #12]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009fde:	4b19      	ldr	r3, [pc, #100]	; (800a044 <HAL_SPI_MspInit+0xb8>)
 8009fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe2:	4a18      	ldr	r2, [pc, #96]	; (800a044 <HAL_SPI_MspInit+0xb8>)
 8009fe4:	f043 0302 	orr.w	r3, r3, #2
 8009fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8009fea:	4b16      	ldr	r3, [pc, #88]	; (800a044 <HAL_SPI_MspInit+0xb8>)
 8009fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fee:	f003 0302 	and.w	r3, r3, #2
 8009ff2:	60bb      	str	r3, [r7, #8]
 8009ff4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8009ff6:	2360      	movs	r3, #96	; 0x60
 8009ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ffe:	2300      	movs	r3, #0
 800a000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a002:	2303      	movs	r3, #3
 800a004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a006:	2305      	movs	r3, #5
 800a008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a00a:	f107 0314 	add.w	r3, r7, #20
 800a00e:	4619      	mov	r1, r3
 800a010:	480d      	ldr	r0, [pc, #52]	; (800a048 <HAL_SPI_MspInit+0xbc>)
 800a012:	f7f6 fbad 	bl	8000770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800a016:	2320      	movs	r3, #32
 800a018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a01a:	2302      	movs	r3, #2
 800a01c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a01e:	2300      	movs	r3, #0
 800a020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a022:	2303      	movs	r3, #3
 800a024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a026:	2305      	movs	r3, #5
 800a028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a02a:	f107 0314 	add.w	r3, r7, #20
 800a02e:	4619      	mov	r1, r3
 800a030:	4806      	ldr	r0, [pc, #24]	; (800a04c <HAL_SPI_MspInit+0xc0>)
 800a032:	f7f6 fb9d 	bl	8000770 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800a036:	bf00      	nop
 800a038:	3728      	adds	r7, #40	; 0x28
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	40013000 	.word	0x40013000
 800a044:	40023800 	.word	0x40023800
 800a048:	40020000 	.word	0x40020000
 800a04c:	40020400 	.word	0x40020400

0800a050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08a      	sub	sp, #40	; 0x28
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a058:	f107 0314 	add.w	r3, r7, #20
 800a05c:	2200      	movs	r2, #0
 800a05e:	601a      	str	r2, [r3, #0]
 800a060:	605a      	str	r2, [r3, #4]
 800a062:	609a      	str	r2, [r3, #8]
 800a064:	60da      	str	r2, [r3, #12]
 800a066:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a17      	ldr	r2, [pc, #92]	; (800a0cc <HAL_UART_MspInit+0x7c>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d128      	bne.n	800a0c4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800a072:	4b17      	ldr	r3, [pc, #92]	; (800a0d0 <HAL_UART_MspInit+0x80>)
 800a074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a076:	4a16      	ldr	r2, [pc, #88]	; (800a0d0 <HAL_UART_MspInit+0x80>)
 800a078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a07c:	6413      	str	r3, [r2, #64]	; 0x40
 800a07e:	4b14      	ldr	r3, [pc, #80]	; (800a0d0 <HAL_UART_MspInit+0x80>)
 800a080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a086:	613b      	str	r3, [r7, #16]
 800a088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a08a:	4b11      	ldr	r3, [pc, #68]	; (800a0d0 <HAL_UART_MspInit+0x80>)
 800a08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08e:	4a10      	ldr	r2, [pc, #64]	; (800a0d0 <HAL_UART_MspInit+0x80>)
 800a090:	f043 0308 	orr.w	r3, r3, #8
 800a094:	6313      	str	r3, [r2, #48]	; 0x30
 800a096:	4b0e      	ldr	r3, [pc, #56]	; (800a0d0 <HAL_UART_MspInit+0x80>)
 800a098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a09a:	f003 0308 	and.w	r3, r3, #8
 800a09e:	60fb      	str	r3, [r7, #12]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800a0a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a0a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a0b4:	2307      	movs	r3, #7
 800a0b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a0b8:	f107 0314 	add.w	r3, r7, #20
 800a0bc:	4619      	mov	r1, r3
 800a0be:	4805      	ldr	r0, [pc, #20]	; (800a0d4 <HAL_UART_MspInit+0x84>)
 800a0c0:	f7f6 fb56 	bl	8000770 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800a0c4:	bf00      	nop
 800a0c6:	3728      	adds	r7, #40	; 0x28
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	40004800 	.word	0x40004800
 800a0d0:	40023800 	.word	0x40023800
 800a0d4:	40020c00 	.word	0x40020c00

0800a0d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b08c      	sub	sp, #48	; 0x30
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	6879      	ldr	r1, [r7, #4]
 800a0ec:	202d      	movs	r0, #45	; 0x2d
 800a0ee:	f7f6 fb15 	bl	800071c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800a0f2:	202d      	movs	r0, #45	; 0x2d
 800a0f4:	f7f6 fb2e 	bl	8000754 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800a0f8:	4b1f      	ldr	r3, [pc, #124]	; (800a178 <HAL_InitTick+0xa0>)
 800a0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fc:	4a1e      	ldr	r2, [pc, #120]	; (800a178 <HAL_InitTick+0xa0>)
 800a0fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a102:	6413      	str	r3, [r2, #64]	; 0x40
 800a104:	4b1c      	ldr	r3, [pc, #112]	; (800a178 <HAL_InitTick+0xa0>)
 800a106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a10c:	60fb      	str	r3, [r7, #12]
 800a10e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a110:	f107 0210 	add.w	r2, r7, #16
 800a114:	f107 0314 	add.w	r3, r7, #20
 800a118:	4611      	mov	r1, r2
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7f8 fb7c 	bl	8002818 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a120:	f7f8 fb52 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 800a124:	4603      	mov	r3, r0
 800a126:	005b      	lsls	r3, r3, #1
 800a128:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12c:	4a13      	ldr	r2, [pc, #76]	; (800a17c <HAL_InitTick+0xa4>)
 800a12e:	fba2 2303 	umull	r2, r3, r2, r3
 800a132:	0c9b      	lsrs	r3, r3, #18
 800a134:	3b01      	subs	r3, #1
 800a136:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800a138:	4b11      	ldr	r3, [pc, #68]	; (800a180 <HAL_InitTick+0xa8>)
 800a13a:	4a12      	ldr	r2, [pc, #72]	; (800a184 <HAL_InitTick+0xac>)
 800a13c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800a13e:	4b10      	ldr	r3, [pc, #64]	; (800a180 <HAL_InitTick+0xa8>)
 800a140:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a144:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800a146:	4a0e      	ldr	r2, [pc, #56]	; (800a180 <HAL_InitTick+0xa8>)
 800a148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800a14c:	4b0c      	ldr	r3, [pc, #48]	; (800a180 <HAL_InitTick+0xa8>)
 800a14e:	2200      	movs	r2, #0
 800a150:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a152:	4b0b      	ldr	r3, [pc, #44]	; (800a180 <HAL_InitTick+0xa8>)
 800a154:	2200      	movs	r2, #0
 800a156:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800a158:	4809      	ldr	r0, [pc, #36]	; (800a180 <HAL_InitTick+0xa8>)
 800a15a:	f7f9 f82a 	bl	80031b2 <HAL_TIM_Base_Init>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d104      	bne.n	800a16e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 800a164:	4806      	ldr	r0, [pc, #24]	; (800a180 <HAL_InitTick+0xa8>)
 800a166:	f7f9 f885 	bl	8003274 <HAL_TIM_Base_Start_IT>
 800a16a:	4603      	mov	r3, r0
 800a16c:	e000      	b.n	800a170 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
}
 800a170:	4618      	mov	r0, r3
 800a172:	3730      	adds	r7, #48	; 0x30
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	40023800 	.word	0x40023800
 800a17c:	431bde83 	.word	0x431bde83
 800a180:	200051b8 	.word	0x200051b8
 800a184:	40002000 	.word	0x40002000

0800a188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a188:	b480      	push	{r7}
 800a18a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a18c:	e7fe      	b.n	800a18c <NMI_Handler+0x4>

0800a18e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a18e:	b480      	push	{r7}
 800a190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a192:	e7fe      	b.n	800a192 <HardFault_Handler+0x4>

0800a194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a194:	b480      	push	{r7}
 800a196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a198:	e7fe      	b.n	800a198 <MemManage_Handler+0x4>

0800a19a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a19a:	b480      	push	{r7}
 800a19c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a19e:	e7fe      	b.n	800a19e <BusFault_Handler+0x4>

0800a1a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a1a4:	e7fe      	b.n	800a1a4 <UsageFault_Handler+0x4>

0800a1a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a1a6:	b480      	push	{r7}
 800a1a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a1aa:	bf00      	nop
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800a1b8:	4802      	ldr	r0, [pc, #8]	; (800a1c4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800a1ba:	f7f9 f8d3 	bl	8003364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800a1be:	bf00      	nop
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	200051b8 	.word	0x200051b8

0800a1c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a1cc:	4802      	ldr	r0, [pc, #8]	; (800a1d8 <OTG_FS_IRQHandler+0x10>)
 800a1ce:	f7f6 fdf4 	bl	8000dba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a1d2:	bf00      	nop
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	200064d4 	.word	0x200064d4

0800a1dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a1e4:	4a14      	ldr	r2, [pc, #80]	; (800a238 <_sbrk+0x5c>)
 800a1e6:	4b15      	ldr	r3, [pc, #84]	; (800a23c <_sbrk+0x60>)
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a1f0:	4b13      	ldr	r3, [pc, #76]	; (800a240 <_sbrk+0x64>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d102      	bne.n	800a1fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a1f8:	4b11      	ldr	r3, [pc, #68]	; (800a240 <_sbrk+0x64>)
 800a1fa:	4a12      	ldr	r2, [pc, #72]	; (800a244 <_sbrk+0x68>)
 800a1fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a1fe:	4b10      	ldr	r3, [pc, #64]	; (800a240 <_sbrk+0x64>)
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4413      	add	r3, r2
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d207      	bcs.n	800a21c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a20c:	f000 fe88 	bl	800af20 <__errno>
 800a210:	4603      	mov	r3, r0
 800a212:	220c      	movs	r2, #12
 800a214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a21a:	e009      	b.n	800a230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a21c:	4b08      	ldr	r3, [pc, #32]	; (800a240 <_sbrk+0x64>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a222:	4b07      	ldr	r3, [pc, #28]	; (800a240 <_sbrk+0x64>)
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4413      	add	r3, r2
 800a22a:	4a05      	ldr	r2, [pc, #20]	; (800a240 <_sbrk+0x64>)
 800a22c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a22e:	68fb      	ldr	r3, [r7, #12]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3718      	adds	r7, #24
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	20050000 	.word	0x20050000
 800a23c:	00000400 	.word	0x00000400
 800a240:	20004cf0 	.word	0x20004cf0
 800a244:	20006ae0 	.word	0x20006ae0

0800a248 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a248:	b480      	push	{r7}
 800a24a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a24c:	4b06      	ldr	r3, [pc, #24]	; (800a268 <SystemInit+0x20>)
 800a24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a252:	4a05      	ldr	r2, [pc, #20]	; (800a268 <SystemInit+0x20>)
 800a254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a25c:	bf00      	nop
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	e000ed00 	.word	0xe000ed00

0800a26c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a270:	2200      	movs	r2, #0
 800a272:	4912      	ldr	r1, [pc, #72]	; (800a2bc <MX_USB_DEVICE_Init+0x50>)
 800a274:	4812      	ldr	r0, [pc, #72]	; (800a2c0 <MX_USB_DEVICE_Init+0x54>)
 800a276:	f7fb fc87 	bl	8005b88 <USBD_Init>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d001      	beq.n	800a284 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a280:	f7ff fe56 	bl	8009f30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a284:	490f      	ldr	r1, [pc, #60]	; (800a2c4 <MX_USB_DEVICE_Init+0x58>)
 800a286:	480e      	ldr	r0, [pc, #56]	; (800a2c0 <MX_USB_DEVICE_Init+0x54>)
 800a288:	f7fb fcb4 	bl	8005bf4 <USBD_RegisterClass>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a292:	f7ff fe4d 	bl	8009f30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a296:	490c      	ldr	r1, [pc, #48]	; (800a2c8 <MX_USB_DEVICE_Init+0x5c>)
 800a298:	4809      	ldr	r0, [pc, #36]	; (800a2c0 <MX_USB_DEVICE_Init+0x54>)
 800a29a:	f7fb fc09 	bl	8005ab0 <USBD_CDC_RegisterInterface>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a2a4:	f7ff fe44 	bl	8009f30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a2a8:	4805      	ldr	r0, [pc, #20]	; (800a2c0 <MX_USB_DEVICE_Init+0x54>)
 800a2aa:	f7fb fcc4 	bl	8005c36 <USBD_Start>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d001      	beq.n	800a2b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a2b4:	f7ff fe3c 	bl	8009f30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a2b8:	bf00      	nop
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	20000134 	.word	0x20000134
 800a2c0:	20005204 	.word	0x20005204
 800a2c4:	20000014 	.word	0x20000014
 800a2c8:	20000120 	.word	0x20000120

0800a2cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	4905      	ldr	r1, [pc, #20]	; (800a2e8 <CDC_Init_FS+0x1c>)
 800a2d4:	4805      	ldr	r0, [pc, #20]	; (800a2ec <CDC_Init_FS+0x20>)
 800a2d6:	f7fb fc00 	bl	8005ada <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a2da:	4905      	ldr	r1, [pc, #20]	; (800a2f0 <CDC_Init_FS+0x24>)
 800a2dc:	4803      	ldr	r0, [pc, #12]	; (800a2ec <CDC_Init_FS+0x20>)
 800a2de:	f7fb fc15 	bl	8005b0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a2e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	20005cd4 	.word	0x20005cd4
 800a2ec:	20005204 	.word	0x20005204
 800a2f0:	200054d4 	.word	0x200054d4

0800a2f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a2f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	4603      	mov	r3, r0
 800a30c:	6039      	str	r1, [r7, #0]
 800a30e:	71fb      	strb	r3, [r7, #7]
 800a310:	4613      	mov	r3, r2
 800a312:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a314:	79fb      	ldrb	r3, [r7, #7]
 800a316:	2b23      	cmp	r3, #35	; 0x23
 800a318:	d84a      	bhi.n	800a3b0 <CDC_Control_FS+0xac>
 800a31a:	a201      	add	r2, pc, #4	; (adr r2, 800a320 <CDC_Control_FS+0x1c>)
 800a31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a320:	0800a3b1 	.word	0x0800a3b1
 800a324:	0800a3b1 	.word	0x0800a3b1
 800a328:	0800a3b1 	.word	0x0800a3b1
 800a32c:	0800a3b1 	.word	0x0800a3b1
 800a330:	0800a3b1 	.word	0x0800a3b1
 800a334:	0800a3b1 	.word	0x0800a3b1
 800a338:	0800a3b1 	.word	0x0800a3b1
 800a33c:	0800a3b1 	.word	0x0800a3b1
 800a340:	0800a3b1 	.word	0x0800a3b1
 800a344:	0800a3b1 	.word	0x0800a3b1
 800a348:	0800a3b1 	.word	0x0800a3b1
 800a34c:	0800a3b1 	.word	0x0800a3b1
 800a350:	0800a3b1 	.word	0x0800a3b1
 800a354:	0800a3b1 	.word	0x0800a3b1
 800a358:	0800a3b1 	.word	0x0800a3b1
 800a35c:	0800a3b1 	.word	0x0800a3b1
 800a360:	0800a3b1 	.word	0x0800a3b1
 800a364:	0800a3b1 	.word	0x0800a3b1
 800a368:	0800a3b1 	.word	0x0800a3b1
 800a36c:	0800a3b1 	.word	0x0800a3b1
 800a370:	0800a3b1 	.word	0x0800a3b1
 800a374:	0800a3b1 	.word	0x0800a3b1
 800a378:	0800a3b1 	.word	0x0800a3b1
 800a37c:	0800a3b1 	.word	0x0800a3b1
 800a380:	0800a3b1 	.word	0x0800a3b1
 800a384:	0800a3b1 	.word	0x0800a3b1
 800a388:	0800a3b1 	.word	0x0800a3b1
 800a38c:	0800a3b1 	.word	0x0800a3b1
 800a390:	0800a3b1 	.word	0x0800a3b1
 800a394:	0800a3b1 	.word	0x0800a3b1
 800a398:	0800a3b1 	.word	0x0800a3b1
 800a39c:	0800a3b1 	.word	0x0800a3b1
 800a3a0:	0800a3b1 	.word	0x0800a3b1
 800a3a4:	0800a3b1 	.word	0x0800a3b1
 800a3a8:	0800a3b1 	.word	0x0800a3b1
 800a3ac:	0800a3b1 	.word	0x0800a3b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a3b0:	bf00      	nop
  }

  return (USBD_OK);
 800a3b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a3ca:	6879      	ldr	r1, [r7, #4]
 800a3cc:	4805      	ldr	r0, [pc, #20]	; (800a3e4 <CDC_Receive_FS+0x24>)
 800a3ce:	f7fb fb9d 	bl	8005b0c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a3d2:	4804      	ldr	r0, [pc, #16]	; (800a3e4 <CDC_Receive_FS+0x24>)
 800a3d4:	f7fb fbae 	bl	8005b34 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a3d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	20005204 	.word	0x20005204

0800a3e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a3fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	371c      	adds	r7, #28
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
	...

0800a40c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b08a      	sub	sp, #40	; 0x28
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a414:	f107 0314 	add.w	r3, r7, #20
 800a418:	2200      	movs	r2, #0
 800a41a:	601a      	str	r2, [r3, #0]
 800a41c:	605a      	str	r2, [r3, #4]
 800a41e:	609a      	str	r2, [r3, #8]
 800a420:	60da      	str	r2, [r3, #12]
 800a422:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a42c:	d149      	bne.n	800a4c2 <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a42e:	4b27      	ldr	r3, [pc, #156]	; (800a4cc <HAL_PCD_MspInit+0xc0>)
 800a430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a432:	4a26      	ldr	r2, [pc, #152]	; (800a4cc <HAL_PCD_MspInit+0xc0>)
 800a434:	f043 0301 	orr.w	r3, r3, #1
 800a438:	6313      	str	r3, [r2, #48]	; 0x30
 800a43a:	4b24      	ldr	r3, [pc, #144]	; (800a4cc <HAL_PCD_MspInit+0xc0>)
 800a43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43e:	f003 0301 	and.w	r3, r3, #1
 800a442:	613b      	str	r3, [r7, #16]
 800a444:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a446:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a44a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a44c:	2302      	movs	r3, #2
 800a44e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a450:	2300      	movs	r3, #0
 800a452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a454:	2303      	movs	r3, #3
 800a456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a458:	230a      	movs	r3, #10
 800a45a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a45c:	f107 0314 	add.w	r3, r7, #20
 800a460:	4619      	mov	r1, r3
 800a462:	481b      	ldr	r0, [pc, #108]	; (800a4d0 <HAL_PCD_MspInit+0xc4>)
 800a464:	f7f6 f984 	bl	8000770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a46c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a46e:	2300      	movs	r3, #0
 800a470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a472:	2300      	movs	r3, #0
 800a474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a476:	f107 0314 	add.w	r3, r7, #20
 800a47a:	4619      	mov	r1, r3
 800a47c:	4814      	ldr	r0, [pc, #80]	; (800a4d0 <HAL_PCD_MspInit+0xc4>)
 800a47e:	f7f6 f977 	bl	8000770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a482:	4b12      	ldr	r3, [pc, #72]	; (800a4cc <HAL_PCD_MspInit+0xc0>)
 800a484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a486:	4a11      	ldr	r2, [pc, #68]	; (800a4cc <HAL_PCD_MspInit+0xc0>)
 800a488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a48c:	6353      	str	r3, [r2, #52]	; 0x34
 800a48e:	4b0f      	ldr	r3, [pc, #60]	; (800a4cc <HAL_PCD_MspInit+0xc0>)
 800a490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a496:	60fb      	str	r3, [r7, #12]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	4b0c      	ldr	r3, [pc, #48]	; (800a4cc <HAL_PCD_MspInit+0xc0>)
 800a49c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a49e:	4a0b      	ldr	r2, [pc, #44]	; (800a4cc <HAL_PCD_MspInit+0xc0>)
 800a4a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a4a4:	6453      	str	r3, [r2, #68]	; 0x44
 800a4a6:	4b09      	ldr	r3, [pc, #36]	; (800a4cc <HAL_PCD_MspInit+0xc0>)
 800a4a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4ae:	60bb      	str	r3, [r7, #8]
 800a4b0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	2105      	movs	r1, #5
 800a4b6:	2043      	movs	r0, #67	; 0x43
 800a4b8:	f7f6 f930 	bl	800071c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a4bc:	2043      	movs	r0, #67	; 0x43
 800a4be:	f7f6 f949 	bl	8000754 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a4c2:	bf00      	nop
 800a4c4:	3728      	adds	r7, #40	; 0x28
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	40023800 	.word	0x40023800
 800a4d0:	40020000 	.word	0x40020000

0800a4d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	4610      	mov	r0, r2
 800a4ec:	f7fb fbee 	bl	8005ccc <USBD_LL_SetupStage>
}
 800a4f0:	bf00      	nop
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	460b      	mov	r3, r1
 800a502:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800a50a:	78fa      	ldrb	r2, [r7, #3]
 800a50c:	6879      	ldr	r1, [r7, #4]
 800a50e:	4613      	mov	r3, r2
 800a510:	00db      	lsls	r3, r3, #3
 800a512:	1a9b      	subs	r3, r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	440b      	add	r3, r1
 800a518:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	78fb      	ldrb	r3, [r7, #3]
 800a520:	4619      	mov	r1, r3
 800a522:	f7fb fc28 	bl	8005d76 <USBD_LL_DataOutStage>
}
 800a526:	bf00      	nop
 800a528:	3708      	adds	r7, #8
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b082      	sub	sp, #8
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	460b      	mov	r3, r1
 800a538:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800a540:	78fa      	ldrb	r2, [r7, #3]
 800a542:	6879      	ldr	r1, [r7, #4]
 800a544:	4613      	mov	r3, r2
 800a546:	00db      	lsls	r3, r3, #3
 800a548:	1a9b      	subs	r3, r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	440b      	add	r3, r1
 800a54e:	3348      	adds	r3, #72	; 0x48
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	78fb      	ldrb	r3, [r7, #3]
 800a554:	4619      	mov	r1, r3
 800a556:	f7fb fc71 	bl	8005e3c <USBD_LL_DataInStage>
}
 800a55a:	bf00      	nop
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b082      	sub	sp, #8
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a570:	4618      	mov	r0, r3
 800a572:	f7fb fd75 	bl	8006060 <USBD_LL_SOF>
}
 800a576:	bf00      	nop
 800a578:	3708      	adds	r7, #8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b084      	sub	sp, #16
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a586:	2301      	movs	r3, #1
 800a588:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d102      	bne.n	800a598 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a592:	2300      	movs	r3, #0
 800a594:	73fb      	strb	r3, [r7, #15]
 800a596:	e008      	b.n	800a5aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	d102      	bne.n	800a5a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	73fb      	strb	r3, [r7, #15]
 800a5a4:	e001      	b.n	800a5aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a5a6:	f7ff fcc3 	bl	8009f30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a5b0:	7bfa      	ldrb	r2, [r7, #15]
 800a5b2:	4611      	mov	r1, r2
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7fb fd18 	bl	8005fea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fb fcd1 	bl	8005f68 <USBD_LL_Reset>
}
 800a5c6:	bf00      	nop
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fb fd13 	bl	800600a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	6812      	ldr	r2, [r2, #0]
 800a5f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a5f6:	f043 0301 	orr.w	r3, r3, #1
 800a5fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a1b      	ldr	r3, [r3, #32]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d005      	beq.n	800a610 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a604:	4b04      	ldr	r3, [pc, #16]	; (800a618 <HAL_PCD_SuspendCallback+0x48>)
 800a606:	691b      	ldr	r3, [r3, #16]
 800a608:	4a03      	ldr	r2, [pc, #12]	; (800a618 <HAL_PCD_SuspendCallback+0x48>)
 800a60a:	f043 0306 	orr.w	r3, r3, #6
 800a60e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a610:	bf00      	nop
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	e000ed00 	.word	0xe000ed00

0800a61c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fb fd02 	bl	8006034 <USBD_LL_Resume>
}
 800a630:	bf00      	nop
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	460b      	mov	r3, r1
 800a642:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a64a:	78fa      	ldrb	r2, [r7, #3]
 800a64c:	4611      	mov	r1, r2
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fb fd2d 	bl	80060ae <USBD_LL_IsoOUTIncomplete>
}
 800a654:	bf00      	nop
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	460b      	mov	r3, r1
 800a666:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a66e:	78fa      	ldrb	r2, [r7, #3]
 800a670:	4611      	mov	r1, r2
 800a672:	4618      	mov	r0, r3
 800a674:	f7fb fd0e 	bl	8006094 <USBD_LL_IsoINIncomplete>
}
 800a678:	bf00      	nop
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a68e:	4618      	mov	r0, r3
 800a690:	f7fb fd1a 	bl	80060c8 <USBD_LL_DevConnected>
}
 800a694:	bf00      	nop
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fb fd17 	bl	80060de <USBD_LL_DevDisconnected>
}
 800a6b0:	bf00      	nop
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d13c      	bne.n	800a742 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a6c8:	4a20      	ldr	r2, [pc, #128]	; (800a74c <USBD_LL_Init+0x94>)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4a1e      	ldr	r2, [pc, #120]	; (800a74c <USBD_LL_Init+0x94>)
 800a6d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a6d8:	4b1c      	ldr	r3, [pc, #112]	; (800a74c <USBD_LL_Init+0x94>)
 800a6da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a6de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a6e0:	4b1a      	ldr	r3, [pc, #104]	; (800a74c <USBD_LL_Init+0x94>)
 800a6e2:	2206      	movs	r2, #6
 800a6e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a6e6:	4b19      	ldr	r3, [pc, #100]	; (800a74c <USBD_LL_Init+0x94>)
 800a6e8:	2202      	movs	r2, #2
 800a6ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a6ec:	4b17      	ldr	r3, [pc, #92]	; (800a74c <USBD_LL_Init+0x94>)
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a6f2:	4b16      	ldr	r3, [pc, #88]	; (800a74c <USBD_LL_Init+0x94>)
 800a6f4:	2202      	movs	r2, #2
 800a6f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a6f8:	4b14      	ldr	r3, [pc, #80]	; (800a74c <USBD_LL_Init+0x94>)
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a6fe:	4b13      	ldr	r3, [pc, #76]	; (800a74c <USBD_LL_Init+0x94>)
 800a700:	2200      	movs	r2, #0
 800a702:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a704:	4b11      	ldr	r3, [pc, #68]	; (800a74c <USBD_LL_Init+0x94>)
 800a706:	2200      	movs	r2, #0
 800a708:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a70a:	4b10      	ldr	r3, [pc, #64]	; (800a74c <USBD_LL_Init+0x94>)
 800a70c:	2201      	movs	r2, #1
 800a70e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a710:	4b0e      	ldr	r3, [pc, #56]	; (800a74c <USBD_LL_Init+0x94>)
 800a712:	2200      	movs	r2, #0
 800a714:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a716:	480d      	ldr	r0, [pc, #52]	; (800a74c <USBD_LL_Init+0x94>)
 800a718:	f7f6 fa09 	bl	8000b2e <HAL_PCD_Init>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d001      	beq.n	800a726 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a722:	f7ff fc05 	bl	8009f30 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a726:	2180      	movs	r1, #128	; 0x80
 800a728:	4808      	ldr	r0, [pc, #32]	; (800a74c <USBD_LL_Init+0x94>)
 800a72a:	f7f7 fb8a 	bl	8001e42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a72e:	2240      	movs	r2, #64	; 0x40
 800a730:	2100      	movs	r1, #0
 800a732:	4806      	ldr	r0, [pc, #24]	; (800a74c <USBD_LL_Init+0x94>)
 800a734:	f7f7 fb3e 	bl	8001db4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a738:	2280      	movs	r2, #128	; 0x80
 800a73a:	2101      	movs	r1, #1
 800a73c:	4803      	ldr	r0, [pc, #12]	; (800a74c <USBD_LL_Init+0x94>)
 800a73e:	f7f7 fb39 	bl	8001db4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	200064d4 	.word	0x200064d4

0800a750 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a758:	2300      	movs	r3, #0
 800a75a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a766:	4618      	mov	r0, r3
 800a768:	f7f6 fb05 	bl	8000d76 <HAL_PCD_Start>
 800a76c:	4603      	mov	r3, r0
 800a76e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a770:	7bfb      	ldrb	r3, [r7, #15]
 800a772:	4618      	mov	r0, r3
 800a774:	f000 f980 	bl	800aa78 <USBD_Get_USB_Status>
 800a778:	4603      	mov	r3, r0
 800a77a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b084      	sub	sp, #16
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	4608      	mov	r0, r1
 800a790:	4611      	mov	r1, r2
 800a792:	461a      	mov	r2, r3
 800a794:	4603      	mov	r3, r0
 800a796:	70fb      	strb	r3, [r7, #3]
 800a798:	460b      	mov	r3, r1
 800a79a:	70bb      	strb	r3, [r7, #2]
 800a79c:	4613      	mov	r3, r2
 800a79e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a7ae:	78bb      	ldrb	r3, [r7, #2]
 800a7b0:	883a      	ldrh	r2, [r7, #0]
 800a7b2:	78f9      	ldrb	r1, [r7, #3]
 800a7b4:	f7f6 ff05 	bl	80015c2 <HAL_PCD_EP_Open>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 f95a 	bl	800aa78 <USBD_Get_USB_Status>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b084      	sub	sp, #16
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
 800a7da:	460b      	mov	r3, r1
 800a7dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7ec:	78fa      	ldrb	r2, [r7, #3]
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7f6 ff4e 	bl	8001692 <HAL_PCD_EP_Close>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7fa:	7bfb      	ldrb	r3, [r7, #15]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f000 f93b 	bl	800aa78 <USBD_Get_USB_Status>
 800a802:	4603      	mov	r3, r0
 800a804:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a806:	7bbb      	ldrb	r3, [r7, #14]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	460b      	mov	r3, r1
 800a81a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a820:	2300      	movs	r3, #0
 800a822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a82a:	78fa      	ldrb	r2, [r7, #3]
 800a82c:	4611      	mov	r1, r2
 800a82e:	4618      	mov	r0, r3
 800a830:	f7f7 f826 	bl	8001880 <HAL_PCD_EP_SetStall>
 800a834:	4603      	mov	r3, r0
 800a836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a838:	7bfb      	ldrb	r3, [r7, #15]
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 f91c 	bl	800aa78 <USBD_Get_USB_Status>
 800a840:	4603      	mov	r3, r0
 800a842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a844:	7bbb      	ldrb	r3, [r7, #14]
}
 800a846:	4618      	mov	r0, r3
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b084      	sub	sp, #16
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	460b      	mov	r3, r1
 800a858:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a85e:	2300      	movs	r3, #0
 800a860:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a868:	78fa      	ldrb	r2, [r7, #3]
 800a86a:	4611      	mov	r1, r2
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7f7 f86b 	bl	8001948 <HAL_PCD_EP_ClrStall>
 800a872:	4603      	mov	r3, r0
 800a874:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a876:	7bfb      	ldrb	r3, [r7, #15]
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 f8fd 	bl	800aa78 <USBD_Get_USB_Status>
 800a87e:	4603      	mov	r3, r0
 800a880:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a882:	7bbb      	ldrb	r3, [r7, #14]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	460b      	mov	r3, r1
 800a896:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a89e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a8a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	da0b      	bge.n	800a8c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a8a8:	78fb      	ldrb	r3, [r7, #3]
 800a8aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8ae:	68f9      	ldr	r1, [r7, #12]
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	00db      	lsls	r3, r3, #3
 800a8b4:	1a9b      	subs	r3, r3, r2
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	440b      	add	r3, r1
 800a8ba:	333e      	adds	r3, #62	; 0x3e
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	e00b      	b.n	800a8d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a8c0:	78fb      	ldrb	r3, [r7, #3]
 800a8c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8c6:	68f9      	ldr	r1, [r7, #12]
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	00db      	lsls	r3, r3, #3
 800a8cc:	1a9b      	subs	r3, r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	440b      	add	r3, r1
 800a8d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a8d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8fe:	78fa      	ldrb	r2, [r7, #3]
 800a900:	4611      	mov	r1, r2
 800a902:	4618      	mov	r0, r3
 800a904:	f7f6 fe38 	bl	8001578 <HAL_PCD_SetAddress>
 800a908:	4603      	mov	r3, r0
 800a90a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a90c:	7bfb      	ldrb	r3, [r7, #15]
 800a90e:	4618      	mov	r0, r3
 800a910:	f000 f8b2 	bl	800aa78 <USBD_Get_USB_Status>
 800a914:	4603      	mov	r3, r0
 800a916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a918:	7bbb      	ldrb	r3, [r7, #14]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b086      	sub	sp, #24
 800a926:	af00      	add	r7, sp, #0
 800a928:	60f8      	str	r0, [r7, #12]
 800a92a:	607a      	str	r2, [r7, #4]
 800a92c:	603b      	str	r3, [r7, #0]
 800a92e:	460b      	mov	r3, r1
 800a930:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a940:	7af9      	ldrb	r1, [r7, #11]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	f7f6 ff51 	bl	80017ec <HAL_PCD_EP_Transmit>
 800a94a:	4603      	mov	r3, r0
 800a94c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a94e:	7dfb      	ldrb	r3, [r7, #23]
 800a950:	4618      	mov	r0, r3
 800a952:	f000 f891 	bl	800aa78 <USBD_Get_USB_Status>
 800a956:	4603      	mov	r3, r0
 800a958:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a95a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3718      	adds	r7, #24
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	607a      	str	r2, [r7, #4]
 800a96e:	603b      	str	r3, [r7, #0]
 800a970:	460b      	mov	r3, r1
 800a972:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a982:	7af9      	ldrb	r1, [r7, #11]
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	f7f6 fecd 	bl	8001726 <HAL_PCD_EP_Receive>
 800a98c:	4603      	mov	r3, r0
 800a98e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a990:	7dfb      	ldrb	r3, [r7, #23]
 800a992:	4618      	mov	r0, r3
 800a994:	f000 f870 	bl	800aa78 <USBD_Get_USB_Status>
 800a998:	4603      	mov	r3, r0
 800a99a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a99c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3718      	adds	r7, #24
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b082      	sub	sp, #8
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a9b8:	78fa      	ldrb	r2, [r7, #3]
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7f6 fefd 	bl	80017bc <HAL_PCD_EP_GetRxCount>
 800a9c2:	4603      	mov	r3, r0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a9d8:	78fb      	ldrb	r3, [r7, #3]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d002      	beq.n	800a9e4 <HAL_PCDEx_LPM_Callback+0x18>
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d01f      	beq.n	800aa22 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a9e2:	e03b      	b.n	800aa5c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a1b      	ldr	r3, [r3, #32]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d007      	beq.n	800a9fc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a9ec:	f000 f83c 	bl	800aa68 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a9f0:	4b1c      	ldr	r3, [pc, #112]	; (800aa64 <HAL_PCDEx_LPM_Callback+0x98>)
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	4a1b      	ldr	r2, [pc, #108]	; (800aa64 <HAL_PCDEx_LPM_Callback+0x98>)
 800a9f6:	f023 0306 	bic.w	r3, r3, #6
 800a9fa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	6812      	ldr	r2, [r2, #0]
 800aa0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa0e:	f023 0301 	bic.w	r3, r3, #1
 800aa12:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7fb fb0a 	bl	8006034 <USBD_LL_Resume>
    break;
 800aa20:	e01c      	b.n	800aa5c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	6812      	ldr	r2, [r2, #0]
 800aa30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa34:	f043 0301 	orr.w	r3, r3, #1
 800aa38:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7fb fae2 	bl	800600a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a1b      	ldr	r3, [r3, #32]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d005      	beq.n	800aa5a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa4e:	4b05      	ldr	r3, [pc, #20]	; (800aa64 <HAL_PCDEx_LPM_Callback+0x98>)
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	4a04      	ldr	r2, [pc, #16]	; (800aa64 <HAL_PCDEx_LPM_Callback+0x98>)
 800aa54:	f043 0306 	orr.w	r3, r3, #6
 800aa58:	6113      	str	r3, [r2, #16]
    break;
 800aa5a:	bf00      	nop
}
 800aa5c:	bf00      	nop
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	e000ed00 	.word	0xe000ed00

0800aa68 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	af00      	add	r7, sp, #0
	//SystemClock_Config();
}
 800aa6c:	bf00      	nop
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
	...

0800aa78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	4603      	mov	r3, r0
 800aa80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa82:	2300      	movs	r3, #0
 800aa84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa86:	79fb      	ldrb	r3, [r7, #7]
 800aa88:	2b03      	cmp	r3, #3
 800aa8a:	d817      	bhi.n	800aabc <USBD_Get_USB_Status+0x44>
 800aa8c:	a201      	add	r2, pc, #4	; (adr r2, 800aa94 <USBD_Get_USB_Status+0x1c>)
 800aa8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa92:	bf00      	nop
 800aa94:	0800aaa5 	.word	0x0800aaa5
 800aa98:	0800aaab 	.word	0x0800aaab
 800aa9c:	0800aab1 	.word	0x0800aab1
 800aaa0:	0800aab7 	.word	0x0800aab7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	73fb      	strb	r3, [r7, #15]
    break;
 800aaa8:	e00b      	b.n	800aac2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	73fb      	strb	r3, [r7, #15]
    break;
 800aaae:	e008      	b.n	800aac2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aab0:	2301      	movs	r3, #1
 800aab2:	73fb      	strb	r3, [r7, #15]
    break;
 800aab4:	e005      	b.n	800aac2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aab6:	2303      	movs	r3, #3
 800aab8:	73fb      	strb	r3, [r7, #15]
    break;
 800aaba:	e002      	b.n	800aac2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aabc:	2303      	movs	r3, #3
 800aabe:	73fb      	strb	r3, [r7, #15]
    break;
 800aac0:	bf00      	nop
  }
  return usb_status;
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	4603      	mov	r3, r0
 800aad8:	6039      	str	r1, [r7, #0]
 800aada:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	2212      	movs	r2, #18
 800aae0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aae2:	4b03      	ldr	r3, [pc, #12]	; (800aaf0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	20000154 	.word	0x20000154

0800aaf4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	4603      	mov	r3, r0
 800aafc:	6039      	str	r1, [r7, #0]
 800aafe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	2204      	movs	r2, #4
 800ab04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ab06:	4b03      	ldr	r3, [pc, #12]	; (800ab14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr
 800ab14:	20000174 	.word	0x20000174

0800ab18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	4603      	mov	r3, r0
 800ab20:	6039      	str	r1, [r7, #0]
 800ab22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab24:	79fb      	ldrb	r3, [r7, #7]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d105      	bne.n	800ab36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	4907      	ldr	r1, [pc, #28]	; (800ab4c <USBD_FS_ProductStrDescriptor+0x34>)
 800ab2e:	4808      	ldr	r0, [pc, #32]	; (800ab50 <USBD_FS_ProductStrDescriptor+0x38>)
 800ab30:	f7fc f888 	bl	8006c44 <USBD_GetString>
 800ab34:	e004      	b.n	800ab40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	4904      	ldr	r1, [pc, #16]	; (800ab4c <USBD_FS_ProductStrDescriptor+0x34>)
 800ab3a:	4805      	ldr	r0, [pc, #20]	; (800ab50 <USBD_FS_ProductStrDescriptor+0x38>)
 800ab3c:	f7fc f882 	bl	8006c44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab40:	4b02      	ldr	r3, [pc, #8]	; (800ab4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	200068d8 	.word	0x200068d8
 800ab50:	0800b268 	.word	0x0800b268

0800ab54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	6039      	str	r1, [r7, #0]
 800ab5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab60:	683a      	ldr	r2, [r7, #0]
 800ab62:	4904      	ldr	r1, [pc, #16]	; (800ab74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ab64:	4804      	ldr	r0, [pc, #16]	; (800ab78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ab66:	f7fc f86d 	bl	8006c44 <USBD_GetString>
  return USBD_StrDesc;
 800ab6a:	4b02      	ldr	r3, [pc, #8]	; (800ab74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	200068d8 	.word	0x200068d8
 800ab78:	0800b280 	.word	0x0800b280

0800ab7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	6039      	str	r1, [r7, #0]
 800ab86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	221a      	movs	r2, #26
 800ab8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab8e:	f000 f855 	bl	800ac3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ab92:	4b02      	ldr	r3, [pc, #8]	; (800ab9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	20000178 	.word	0x20000178

0800aba0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	4603      	mov	r3, r0
 800aba8:	6039      	str	r1, [r7, #0]
 800abaa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800abac:	79fb      	ldrb	r3, [r7, #7]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d105      	bne.n	800abbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800abb2:	683a      	ldr	r2, [r7, #0]
 800abb4:	4907      	ldr	r1, [pc, #28]	; (800abd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800abb6:	4808      	ldr	r0, [pc, #32]	; (800abd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800abb8:	f7fc f844 	bl	8006c44 <USBD_GetString>
 800abbc:	e004      	b.n	800abc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800abbe:	683a      	ldr	r2, [r7, #0]
 800abc0:	4904      	ldr	r1, [pc, #16]	; (800abd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800abc2:	4805      	ldr	r0, [pc, #20]	; (800abd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800abc4:	f7fc f83e 	bl	8006c44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800abc8:	4b02      	ldr	r3, [pc, #8]	; (800abd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3708      	adds	r7, #8
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	200068d8 	.word	0x200068d8
 800abd8:	0800b294 	.word	0x0800b294

0800abdc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	4603      	mov	r3, r0
 800abe4:	6039      	str	r1, [r7, #0]
 800abe6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abe8:	79fb      	ldrb	r3, [r7, #7]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d105      	bne.n	800abfa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800abee:	683a      	ldr	r2, [r7, #0]
 800abf0:	4907      	ldr	r1, [pc, #28]	; (800ac10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800abf2:	4808      	ldr	r0, [pc, #32]	; (800ac14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800abf4:	f7fc f826 	bl	8006c44 <USBD_GetString>
 800abf8:	e004      	b.n	800ac04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	4904      	ldr	r1, [pc, #16]	; (800ac10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800abfe:	4805      	ldr	r0, [pc, #20]	; (800ac14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ac00:	f7fc f820 	bl	8006c44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac04:	4b02      	ldr	r3, [pc, #8]	; (800ac10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	200068d8 	.word	0x200068d8
 800ac14:	0800b2a0 	.word	0x0800b2a0

0800ac18 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	4603      	mov	r3, r0
 800ac20:	6039      	str	r1, [r7, #0]
 800ac22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	220c      	movs	r2, #12
 800ac28:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ac2a:	4b03      	ldr	r3, [pc, #12]	; (800ac38 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	370c      	adds	r7, #12
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr
 800ac38:	20000168 	.word	0x20000168

0800ac3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ac42:	4b0f      	ldr	r3, [pc, #60]	; (800ac80 <Get_SerialNum+0x44>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ac48:	4b0e      	ldr	r3, [pc, #56]	; (800ac84 <Get_SerialNum+0x48>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ac4e:	4b0e      	ldr	r3, [pc, #56]	; (800ac88 <Get_SerialNum+0x4c>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	4413      	add	r3, r2
 800ac5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d009      	beq.n	800ac76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ac62:	2208      	movs	r2, #8
 800ac64:	4909      	ldr	r1, [pc, #36]	; (800ac8c <Get_SerialNum+0x50>)
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f000 f814 	bl	800ac94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ac6c:	2204      	movs	r2, #4
 800ac6e:	4908      	ldr	r1, [pc, #32]	; (800ac90 <Get_SerialNum+0x54>)
 800ac70:	68b8      	ldr	r0, [r7, #8]
 800ac72:	f000 f80f 	bl	800ac94 <IntToUnicode>
  }
}
 800ac76:	bf00      	nop
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	1ff0f420 	.word	0x1ff0f420
 800ac84:	1ff0f424 	.word	0x1ff0f424
 800ac88:	1ff0f428 	.word	0x1ff0f428
 800ac8c:	2000017a 	.word	0x2000017a
 800ac90:	2000018a 	.word	0x2000018a

0800ac94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b087      	sub	sp, #28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aca2:	2300      	movs	r3, #0
 800aca4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aca6:	2300      	movs	r3, #0
 800aca8:	75fb      	strb	r3, [r7, #23]
 800acaa:	e027      	b.n	800acfc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	0f1b      	lsrs	r3, r3, #28
 800acb0:	2b09      	cmp	r3, #9
 800acb2:	d80b      	bhi.n	800accc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	0f1b      	lsrs	r3, r3, #28
 800acb8:	b2da      	uxtb	r2, r3
 800acba:	7dfb      	ldrb	r3, [r7, #23]
 800acbc:	005b      	lsls	r3, r3, #1
 800acbe:	4619      	mov	r1, r3
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	440b      	add	r3, r1
 800acc4:	3230      	adds	r2, #48	; 0x30
 800acc6:	b2d2      	uxtb	r2, r2
 800acc8:	701a      	strb	r2, [r3, #0]
 800acca:	e00a      	b.n	800ace2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	0f1b      	lsrs	r3, r3, #28
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	7dfb      	ldrb	r3, [r7, #23]
 800acd4:	005b      	lsls	r3, r3, #1
 800acd6:	4619      	mov	r1, r3
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	440b      	add	r3, r1
 800acdc:	3237      	adds	r2, #55	; 0x37
 800acde:	b2d2      	uxtb	r2, r2
 800ace0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	011b      	lsls	r3, r3, #4
 800ace6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ace8:	7dfb      	ldrb	r3, [r7, #23]
 800acea:	005b      	lsls	r3, r3, #1
 800acec:	3301      	adds	r3, #1
 800acee:	68ba      	ldr	r2, [r7, #8]
 800acf0:	4413      	add	r3, r2
 800acf2:	2200      	movs	r2, #0
 800acf4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800acf6:	7dfb      	ldrb	r3, [r7, #23]
 800acf8:	3301      	adds	r3, #1
 800acfa:	75fb      	strb	r3, [r7, #23]
 800acfc:	7dfa      	ldrb	r2, [r7, #23]
 800acfe:	79fb      	ldrb	r3, [r7, #7]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d3d3      	bcc.n	800acac <IntToUnicode+0x18>
  }
}
 800ad04:	bf00      	nop
 800ad06:	bf00      	nop
 800ad08:	371c      	adds	r7, #28
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr
	...

0800ad14 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800ad1e:	4b06      	ldr	r3, [pc, #24]	; (800ad38 <USER_initialize+0x24>)
 800ad20:	2201      	movs	r2, #1
 800ad22:	701a      	strb	r2, [r3, #0]
    return Stat;
 800ad24:	4b04      	ldr	r3, [pc, #16]	; (800ad38 <USER_initialize+0x24>)
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	370c      	adds	r7, #12
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	20000192 	.word	0x20000192

0800ad3c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	4603      	mov	r3, r0
 800ad44:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800ad46:	4b06      	ldr	r3, [pc, #24]	; (800ad60 <USER_status+0x24>)
 800ad48:	2201      	movs	r2, #1
 800ad4a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800ad4c:	4b04      	ldr	r3, [pc, #16]	; (800ad60 <USER_status+0x24>)
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	370c      	adds	r7, #12
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	20000192 	.word	0x20000192

0800ad64 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60b9      	str	r1, [r7, #8]
 800ad6c:	607a      	str	r2, [r7, #4]
 800ad6e:	603b      	str	r3, [r7, #0]
 800ad70:	4603      	mov	r3, r0
 800ad72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800ad74:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3714      	adds	r7, #20
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr

0800ad82 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ad82:	b480      	push	{r7}
 800ad84:	b085      	sub	sp, #20
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
 800ad8c:	603b      	str	r3, [r7, #0]
 800ad8e:	4603      	mov	r3, r0
 800ad90:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800ad92:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3714      	adds	r7, #20
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b085      	sub	sp, #20
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	4603      	mov	r3, r0
 800ada8:	603a      	str	r2, [r7, #0]
 800adaa:	71fb      	strb	r3, [r7, #7]
 800adac:	460b      	mov	r3, r1
 800adae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	73fb      	strb	r3, [r7, #15]
    return res;
 800adb4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3714      	adds	r7, #20
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
	...

0800adc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800adc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800adfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800adc8:	480d      	ldr	r0, [pc, #52]	; (800ae00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800adca:	490e      	ldr	r1, [pc, #56]	; (800ae04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800adcc:	4a0e      	ldr	r2, [pc, #56]	; (800ae08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800adce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800add0:	e002      	b.n	800add8 <LoopCopyDataInit>

0800add2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800add2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800add4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800add6:	3304      	adds	r3, #4

0800add8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800add8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800adda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800addc:	d3f9      	bcc.n	800add2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800adde:	4a0b      	ldr	r2, [pc, #44]	; (800ae0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800ade0:	4c0b      	ldr	r4, [pc, #44]	; (800ae10 <LoopFillZerobss+0x26>)
  movs r3, #0
 800ade2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ade4:	e001      	b.n	800adea <LoopFillZerobss>

0800ade6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ade6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ade8:	3204      	adds	r2, #4

0800adea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800adea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800adec:	d3fb      	bcc.n	800ade6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800adee:	f7ff fa2b 	bl	800a248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800adf2:	f000 f89b 	bl	800af2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800adf6:	f7fe fe6b 	bl	8009ad0 <main>
  bx  lr    
 800adfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800adfc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800ae00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ae04:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800ae08:	0800b380 	.word	0x0800b380
  ldr r2, =_sbss
 800ae0c:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 800ae10:	20006adc 	.word	0x20006adc

0800ae14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ae14:	e7fe      	b.n	800ae14 <ADC_IRQHandler>

0800ae16 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b084      	sub	sp, #16
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d104      	bne.n	800ae2e <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800ae24:	b672      	cpsid	i
}
 800ae26:	bf00      	nop
 800ae28:	f7ff f882 	bl	8009f30 <Error_Handler>
 800ae2c:	e7fe      	b.n	800ae2c <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	7a1b      	ldrb	r3, [r3, #8]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d904      	bls.n	800ae40 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800ae36:	b672      	cpsid	i
}
 800ae38:	bf00      	nop
 800ae3a:	f7ff f879 	bl	8009f30 <Error_Handler>
 800ae3e:	e7fe      	b.n	800ae3e <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	7a1b      	ldrb	r3, [r3, #8]
 800ae44:	1c5a      	adds	r2, r3, #1
 800ae46:	b2d1      	uxtb	r1, r2
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	7211      	strb	r1, [r2, #8]
 800ae4c:	4619      	mov	r1, r3
	__asm volatile
 800ae4e:	f3ef 8211 	mrs	r2, BASEPRI
 800ae52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae56:	b672      	cpsid	i
 800ae58:	f383 8811 	msr	BASEPRI, r3
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	b662      	cpsie	i
 800ae66:	60fa      	str	r2, [r7, #12]
 800ae68:	60bb      	str	r3, [r7, #8]
	return ulOriginalBASEPRI;
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800ae72:	bf00      	nop
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b084      	sub	sp, #16
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d104      	bne.n	800ae92 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800ae88:	b672      	cpsid	i
}
 800ae8a:	bf00      	nop
 800ae8c:	f7ff f850 	bl	8009f30 <Error_Handler>
 800ae90:	e7fe      	b.n	800ae90 <stm32_lock_release+0x16>
  lock->nesting_level--;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	7a1b      	ldrb	r3, [r3, #8]
 800ae96:	3b01      	subs	r3, #1
 800ae98:	b2da      	uxtb	r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	7a1b      	ldrb	r3, [r3, #8]
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d904      	bls.n	800aeb0 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800aea6:	b672      	cpsid	i
}
 800aea8:	bf00      	nop
 800aeaa:	f7ff f841 	bl	8009f30 <Error_Handler>
 800aeae:	e7fe      	b.n	800aeae <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	7a1b      	ldrb	r3, [r3, #8]
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aebc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f383 8811 	msr	BASEPRI, r3
}
 800aec4:	bf00      	nop
}
 800aec6:	bf00      	nop
 800aec8:	3710      	adds	r7, #16
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b082      	sub	sp, #8
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d104      	bne.n	800aee6 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800aedc:	b672      	cpsid	i
}
 800aede:	bf00      	nop
 800aee0:	f7ff f826 	bl	8009f30 <Error_Handler>
 800aee4:	e7fe      	b.n	800aee4 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7ff ff94 	bl	800ae16 <stm32_lock_acquire>
}
 800aeee:	bf00      	nop
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b082      	sub	sp, #8
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d104      	bne.n	800af0e <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800af04:	b672      	cpsid	i
}
 800af06:	bf00      	nop
 800af08:	f7ff f812 	bl	8009f30 <Error_Handler>
 800af0c:	e7fe      	b.n	800af0c <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4618      	mov	r0, r3
 800af12:	f7ff ffb2 	bl	800ae7a <stm32_lock_release>
}
 800af16:	bf00      	nop
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
	...

0800af20 <__errno>:
 800af20:	4b01      	ldr	r3, [pc, #4]	; (800af28 <__errno+0x8>)
 800af22:	6818      	ldr	r0, [r3, #0]
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	200001a8 	.word	0x200001a8

0800af2c <__libc_init_array>:
 800af2c:	b570      	push	{r4, r5, r6, lr}
 800af2e:	4d0d      	ldr	r5, [pc, #52]	; (800af64 <__libc_init_array+0x38>)
 800af30:	4c0d      	ldr	r4, [pc, #52]	; (800af68 <__libc_init_array+0x3c>)
 800af32:	1b64      	subs	r4, r4, r5
 800af34:	10a4      	asrs	r4, r4, #2
 800af36:	2600      	movs	r6, #0
 800af38:	42a6      	cmp	r6, r4
 800af3a:	d109      	bne.n	800af50 <__libc_init_array+0x24>
 800af3c:	4d0b      	ldr	r5, [pc, #44]	; (800af6c <__libc_init_array+0x40>)
 800af3e:	4c0c      	ldr	r4, [pc, #48]	; (800af70 <__libc_init_array+0x44>)
 800af40:	f000 f96e 	bl	800b220 <_init>
 800af44:	1b64      	subs	r4, r4, r5
 800af46:	10a4      	asrs	r4, r4, #2
 800af48:	2600      	movs	r6, #0
 800af4a:	42a6      	cmp	r6, r4
 800af4c:	d105      	bne.n	800af5a <__libc_init_array+0x2e>
 800af4e:	bd70      	pop	{r4, r5, r6, pc}
 800af50:	f855 3b04 	ldr.w	r3, [r5], #4
 800af54:	4798      	blx	r3
 800af56:	3601      	adds	r6, #1
 800af58:	e7ee      	b.n	800af38 <__libc_init_array+0xc>
 800af5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800af5e:	4798      	blx	r3
 800af60:	3601      	adds	r6, #1
 800af62:	e7f2      	b.n	800af4a <__libc_init_array+0x1e>
 800af64:	0800b378 	.word	0x0800b378
 800af68:	0800b378 	.word	0x0800b378
 800af6c:	0800b378 	.word	0x0800b378
 800af70:	0800b37c 	.word	0x0800b37c

0800af74 <malloc>:
 800af74:	4b02      	ldr	r3, [pc, #8]	; (800af80 <malloc+0xc>)
 800af76:	4601      	mov	r1, r0
 800af78:	6818      	ldr	r0, [r3, #0]
 800af7a:	f000 b871 	b.w	800b060 <_malloc_r>
 800af7e:	bf00      	nop
 800af80:	200001a8 	.word	0x200001a8

0800af84 <free>:
 800af84:	4b02      	ldr	r3, [pc, #8]	; (800af90 <free+0xc>)
 800af86:	4601      	mov	r1, r0
 800af88:	6818      	ldr	r0, [r3, #0]
 800af8a:	f000 b819 	b.w	800afc0 <_free_r>
 800af8e:	bf00      	nop
 800af90:	200001a8 	.word	0x200001a8

0800af94 <memcpy>:
 800af94:	440a      	add	r2, r1
 800af96:	4291      	cmp	r1, r2
 800af98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800af9c:	d100      	bne.n	800afa0 <memcpy+0xc>
 800af9e:	4770      	bx	lr
 800afa0:	b510      	push	{r4, lr}
 800afa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afaa:	4291      	cmp	r1, r2
 800afac:	d1f9      	bne.n	800afa2 <memcpy+0xe>
 800afae:	bd10      	pop	{r4, pc}

0800afb0 <memset>:
 800afb0:	4402      	add	r2, r0
 800afb2:	4603      	mov	r3, r0
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d100      	bne.n	800afba <memset+0xa>
 800afb8:	4770      	bx	lr
 800afba:	f803 1b01 	strb.w	r1, [r3], #1
 800afbe:	e7f9      	b.n	800afb4 <memset+0x4>

0800afc0 <_free_r>:
 800afc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afc2:	2900      	cmp	r1, #0
 800afc4:	d048      	beq.n	800b058 <_free_r+0x98>
 800afc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afca:	9001      	str	r0, [sp, #4]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f1a1 0404 	sub.w	r4, r1, #4
 800afd2:	bfb8      	it	lt
 800afd4:	18e4      	addlt	r4, r4, r3
 800afd6:	f000 f917 	bl	800b208 <__malloc_lock>
 800afda:	4a20      	ldr	r2, [pc, #128]	; (800b05c <_free_r+0x9c>)
 800afdc:	9801      	ldr	r0, [sp, #4]
 800afde:	6813      	ldr	r3, [r2, #0]
 800afe0:	4615      	mov	r5, r2
 800afe2:	b933      	cbnz	r3, 800aff2 <_free_r+0x32>
 800afe4:	6063      	str	r3, [r4, #4]
 800afe6:	6014      	str	r4, [r2, #0]
 800afe8:	b003      	add	sp, #12
 800afea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afee:	f000 b911 	b.w	800b214 <__malloc_unlock>
 800aff2:	42a3      	cmp	r3, r4
 800aff4:	d90b      	bls.n	800b00e <_free_r+0x4e>
 800aff6:	6821      	ldr	r1, [r4, #0]
 800aff8:	1862      	adds	r2, r4, r1
 800affa:	4293      	cmp	r3, r2
 800affc:	bf04      	itt	eq
 800affe:	681a      	ldreq	r2, [r3, #0]
 800b000:	685b      	ldreq	r3, [r3, #4]
 800b002:	6063      	str	r3, [r4, #4]
 800b004:	bf04      	itt	eq
 800b006:	1852      	addeq	r2, r2, r1
 800b008:	6022      	streq	r2, [r4, #0]
 800b00a:	602c      	str	r4, [r5, #0]
 800b00c:	e7ec      	b.n	800afe8 <_free_r+0x28>
 800b00e:	461a      	mov	r2, r3
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	b10b      	cbz	r3, 800b018 <_free_r+0x58>
 800b014:	42a3      	cmp	r3, r4
 800b016:	d9fa      	bls.n	800b00e <_free_r+0x4e>
 800b018:	6811      	ldr	r1, [r2, #0]
 800b01a:	1855      	adds	r5, r2, r1
 800b01c:	42a5      	cmp	r5, r4
 800b01e:	d10b      	bne.n	800b038 <_free_r+0x78>
 800b020:	6824      	ldr	r4, [r4, #0]
 800b022:	4421      	add	r1, r4
 800b024:	1854      	adds	r4, r2, r1
 800b026:	42a3      	cmp	r3, r4
 800b028:	6011      	str	r1, [r2, #0]
 800b02a:	d1dd      	bne.n	800afe8 <_free_r+0x28>
 800b02c:	681c      	ldr	r4, [r3, #0]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	6053      	str	r3, [r2, #4]
 800b032:	4421      	add	r1, r4
 800b034:	6011      	str	r1, [r2, #0]
 800b036:	e7d7      	b.n	800afe8 <_free_r+0x28>
 800b038:	d902      	bls.n	800b040 <_free_r+0x80>
 800b03a:	230c      	movs	r3, #12
 800b03c:	6003      	str	r3, [r0, #0]
 800b03e:	e7d3      	b.n	800afe8 <_free_r+0x28>
 800b040:	6825      	ldr	r5, [r4, #0]
 800b042:	1961      	adds	r1, r4, r5
 800b044:	428b      	cmp	r3, r1
 800b046:	bf04      	itt	eq
 800b048:	6819      	ldreq	r1, [r3, #0]
 800b04a:	685b      	ldreq	r3, [r3, #4]
 800b04c:	6063      	str	r3, [r4, #4]
 800b04e:	bf04      	itt	eq
 800b050:	1949      	addeq	r1, r1, r5
 800b052:	6021      	streq	r1, [r4, #0]
 800b054:	6054      	str	r4, [r2, #4]
 800b056:	e7c7      	b.n	800afe8 <_free_r+0x28>
 800b058:	b003      	add	sp, #12
 800b05a:	bd30      	pop	{r4, r5, pc}
 800b05c:	20004d00 	.word	0x20004d00

0800b060 <_malloc_r>:
 800b060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b062:	1ccd      	adds	r5, r1, #3
 800b064:	f025 0503 	bic.w	r5, r5, #3
 800b068:	3508      	adds	r5, #8
 800b06a:	2d0c      	cmp	r5, #12
 800b06c:	bf38      	it	cc
 800b06e:	250c      	movcc	r5, #12
 800b070:	2d00      	cmp	r5, #0
 800b072:	4606      	mov	r6, r0
 800b074:	db01      	blt.n	800b07a <_malloc_r+0x1a>
 800b076:	42a9      	cmp	r1, r5
 800b078:	d903      	bls.n	800b082 <_malloc_r+0x22>
 800b07a:	230c      	movs	r3, #12
 800b07c:	6033      	str	r3, [r6, #0]
 800b07e:	2000      	movs	r0, #0
 800b080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b082:	f000 f8c1 	bl	800b208 <__malloc_lock>
 800b086:	4921      	ldr	r1, [pc, #132]	; (800b10c <_malloc_r+0xac>)
 800b088:	680a      	ldr	r2, [r1, #0]
 800b08a:	4614      	mov	r4, r2
 800b08c:	b99c      	cbnz	r4, 800b0b6 <_malloc_r+0x56>
 800b08e:	4f20      	ldr	r7, [pc, #128]	; (800b110 <_malloc_r+0xb0>)
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	b923      	cbnz	r3, 800b09e <_malloc_r+0x3e>
 800b094:	4621      	mov	r1, r4
 800b096:	4630      	mov	r0, r6
 800b098:	f000 f8a6 	bl	800b1e8 <_sbrk_r>
 800b09c:	6038      	str	r0, [r7, #0]
 800b09e:	4629      	mov	r1, r5
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	f000 f8a1 	bl	800b1e8 <_sbrk_r>
 800b0a6:	1c43      	adds	r3, r0, #1
 800b0a8:	d123      	bne.n	800b0f2 <_malloc_r+0x92>
 800b0aa:	230c      	movs	r3, #12
 800b0ac:	6033      	str	r3, [r6, #0]
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	f000 f8b0 	bl	800b214 <__malloc_unlock>
 800b0b4:	e7e3      	b.n	800b07e <_malloc_r+0x1e>
 800b0b6:	6823      	ldr	r3, [r4, #0]
 800b0b8:	1b5b      	subs	r3, r3, r5
 800b0ba:	d417      	bmi.n	800b0ec <_malloc_r+0x8c>
 800b0bc:	2b0b      	cmp	r3, #11
 800b0be:	d903      	bls.n	800b0c8 <_malloc_r+0x68>
 800b0c0:	6023      	str	r3, [r4, #0]
 800b0c2:	441c      	add	r4, r3
 800b0c4:	6025      	str	r5, [r4, #0]
 800b0c6:	e004      	b.n	800b0d2 <_malloc_r+0x72>
 800b0c8:	6863      	ldr	r3, [r4, #4]
 800b0ca:	42a2      	cmp	r2, r4
 800b0cc:	bf0c      	ite	eq
 800b0ce:	600b      	streq	r3, [r1, #0]
 800b0d0:	6053      	strne	r3, [r2, #4]
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	f000 f89e 	bl	800b214 <__malloc_unlock>
 800b0d8:	f104 000b 	add.w	r0, r4, #11
 800b0dc:	1d23      	adds	r3, r4, #4
 800b0de:	f020 0007 	bic.w	r0, r0, #7
 800b0e2:	1ac2      	subs	r2, r0, r3
 800b0e4:	d0cc      	beq.n	800b080 <_malloc_r+0x20>
 800b0e6:	1a1b      	subs	r3, r3, r0
 800b0e8:	50a3      	str	r3, [r4, r2]
 800b0ea:	e7c9      	b.n	800b080 <_malloc_r+0x20>
 800b0ec:	4622      	mov	r2, r4
 800b0ee:	6864      	ldr	r4, [r4, #4]
 800b0f0:	e7cc      	b.n	800b08c <_malloc_r+0x2c>
 800b0f2:	1cc4      	adds	r4, r0, #3
 800b0f4:	f024 0403 	bic.w	r4, r4, #3
 800b0f8:	42a0      	cmp	r0, r4
 800b0fa:	d0e3      	beq.n	800b0c4 <_malloc_r+0x64>
 800b0fc:	1a21      	subs	r1, r4, r0
 800b0fe:	4630      	mov	r0, r6
 800b100:	f000 f872 	bl	800b1e8 <_sbrk_r>
 800b104:	3001      	adds	r0, #1
 800b106:	d1dd      	bne.n	800b0c4 <_malloc_r+0x64>
 800b108:	e7cf      	b.n	800b0aa <_malloc_r+0x4a>
 800b10a:	bf00      	nop
 800b10c:	20004d00 	.word	0x20004d00
 800b110:	20004d04 	.word	0x20004d04

0800b114 <cleanup_glue>:
 800b114:	b538      	push	{r3, r4, r5, lr}
 800b116:	460c      	mov	r4, r1
 800b118:	6809      	ldr	r1, [r1, #0]
 800b11a:	4605      	mov	r5, r0
 800b11c:	b109      	cbz	r1, 800b122 <cleanup_glue+0xe>
 800b11e:	f7ff fff9 	bl	800b114 <cleanup_glue>
 800b122:	4621      	mov	r1, r4
 800b124:	4628      	mov	r0, r5
 800b126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b12a:	f7ff bf49 	b.w	800afc0 <_free_r>
	...

0800b130 <_reclaim_reent>:
 800b130:	4b2c      	ldr	r3, [pc, #176]	; (800b1e4 <_reclaim_reent+0xb4>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4283      	cmp	r3, r0
 800b136:	b570      	push	{r4, r5, r6, lr}
 800b138:	4604      	mov	r4, r0
 800b13a:	d051      	beq.n	800b1e0 <_reclaim_reent+0xb0>
 800b13c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b13e:	b143      	cbz	r3, 800b152 <_reclaim_reent+0x22>
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d14a      	bne.n	800b1dc <_reclaim_reent+0xac>
 800b146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b148:	6819      	ldr	r1, [r3, #0]
 800b14a:	b111      	cbz	r1, 800b152 <_reclaim_reent+0x22>
 800b14c:	4620      	mov	r0, r4
 800b14e:	f7ff ff37 	bl	800afc0 <_free_r>
 800b152:	6961      	ldr	r1, [r4, #20]
 800b154:	b111      	cbz	r1, 800b15c <_reclaim_reent+0x2c>
 800b156:	4620      	mov	r0, r4
 800b158:	f7ff ff32 	bl	800afc0 <_free_r>
 800b15c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b15e:	b111      	cbz	r1, 800b166 <_reclaim_reent+0x36>
 800b160:	4620      	mov	r0, r4
 800b162:	f7ff ff2d 	bl	800afc0 <_free_r>
 800b166:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b168:	b111      	cbz	r1, 800b170 <_reclaim_reent+0x40>
 800b16a:	4620      	mov	r0, r4
 800b16c:	f7ff ff28 	bl	800afc0 <_free_r>
 800b170:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b172:	b111      	cbz	r1, 800b17a <_reclaim_reent+0x4a>
 800b174:	4620      	mov	r0, r4
 800b176:	f7ff ff23 	bl	800afc0 <_free_r>
 800b17a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b17c:	b111      	cbz	r1, 800b184 <_reclaim_reent+0x54>
 800b17e:	4620      	mov	r0, r4
 800b180:	f7ff ff1e 	bl	800afc0 <_free_r>
 800b184:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b186:	b111      	cbz	r1, 800b18e <_reclaim_reent+0x5e>
 800b188:	4620      	mov	r0, r4
 800b18a:	f7ff ff19 	bl	800afc0 <_free_r>
 800b18e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b190:	b111      	cbz	r1, 800b198 <_reclaim_reent+0x68>
 800b192:	4620      	mov	r0, r4
 800b194:	f7ff ff14 	bl	800afc0 <_free_r>
 800b198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b19a:	b111      	cbz	r1, 800b1a2 <_reclaim_reent+0x72>
 800b19c:	4620      	mov	r0, r4
 800b19e:	f7ff ff0f 	bl	800afc0 <_free_r>
 800b1a2:	69a3      	ldr	r3, [r4, #24]
 800b1a4:	b1e3      	cbz	r3, 800b1e0 <_reclaim_reent+0xb0>
 800b1a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	4798      	blx	r3
 800b1ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b1ae:	b1b9      	cbz	r1, 800b1e0 <_reclaim_reent+0xb0>
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b1b6:	f7ff bfad 	b.w	800b114 <cleanup_glue>
 800b1ba:	5949      	ldr	r1, [r1, r5]
 800b1bc:	b941      	cbnz	r1, 800b1d0 <_reclaim_reent+0xa0>
 800b1be:	3504      	adds	r5, #4
 800b1c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1c2:	2d80      	cmp	r5, #128	; 0x80
 800b1c4:	68d9      	ldr	r1, [r3, #12]
 800b1c6:	d1f8      	bne.n	800b1ba <_reclaim_reent+0x8a>
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f7ff fef9 	bl	800afc0 <_free_r>
 800b1ce:	e7ba      	b.n	800b146 <_reclaim_reent+0x16>
 800b1d0:	680e      	ldr	r6, [r1, #0]
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f7ff fef4 	bl	800afc0 <_free_r>
 800b1d8:	4631      	mov	r1, r6
 800b1da:	e7ef      	b.n	800b1bc <_reclaim_reent+0x8c>
 800b1dc:	2500      	movs	r5, #0
 800b1de:	e7ef      	b.n	800b1c0 <_reclaim_reent+0x90>
 800b1e0:	bd70      	pop	{r4, r5, r6, pc}
 800b1e2:	bf00      	nop
 800b1e4:	200001a8 	.word	0x200001a8

0800b1e8 <_sbrk_r>:
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	4d06      	ldr	r5, [pc, #24]	; (800b204 <_sbrk_r+0x1c>)
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	4608      	mov	r0, r1
 800b1f2:	602b      	str	r3, [r5, #0]
 800b1f4:	f7fe fff2 	bl	800a1dc <_sbrk>
 800b1f8:	1c43      	adds	r3, r0, #1
 800b1fa:	d102      	bne.n	800b202 <_sbrk_r+0x1a>
 800b1fc:	682b      	ldr	r3, [r5, #0]
 800b1fe:	b103      	cbz	r3, 800b202 <_sbrk_r+0x1a>
 800b200:	6023      	str	r3, [r4, #0]
 800b202:	bd38      	pop	{r3, r4, r5, pc}
 800b204:	20006ad8 	.word	0x20006ad8

0800b208 <__malloc_lock>:
 800b208:	4801      	ldr	r0, [pc, #4]	; (800b210 <__malloc_lock+0x8>)
 800b20a:	f7ff be60 	b.w	800aece <__retarget_lock_acquire_recursive>
 800b20e:	bf00      	nop
 800b210:	20004cf4 	.word	0x20004cf4

0800b214 <__malloc_unlock>:
 800b214:	4801      	ldr	r0, [pc, #4]	; (800b21c <__malloc_unlock+0x8>)
 800b216:	f7ff be6e 	b.w	800aef6 <__retarget_lock_release_recursive>
 800b21a:	bf00      	nop
 800b21c:	20004cf4 	.word	0x20004cf4

0800b220 <_init>:
 800b220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b222:	bf00      	nop
 800b224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b226:	bc08      	pop	{r3}
 800b228:	469e      	mov	lr, r3
 800b22a:	4770      	bx	lr

0800b22c <_fini>:
 800b22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b22e:	bf00      	nop
 800b230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b232:	bc08      	pop	{r3}
 800b234:	469e      	mov	lr, r3
 800b236:	4770      	bx	lr
