
BackupPlan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800bc0c  0800bc0c  0001bc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd44  0800bd44  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd44  0800bd44  0001bd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd4c  0800bd4c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd4c  0800bd4c  0001bd4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd50  0800bd50  0001bd50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800bd54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000691c  2000020c  0800bf60  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006b28  0800bf60  00026b28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003406f  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006682  00000000  00000000  000542ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002228  00000000  00000000  0005a930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fc0  00000000  00000000  0005cb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fa4d  00000000  00000000  0005eb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a7d1  00000000  00000000  0008e565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001053d3  00000000  00000000  000b8d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001be109  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009200  00000000  00000000  001be15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bbf4 	.word	0x0800bbf4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	0800bbf4 	.word	0x0800bbf4

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f8fa 	bl	8000706 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	200f      	movs	r0, #15
 8000514:	f00a fac0 	bl	800aa98 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f00a f9a4 	bl	800a864 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000004 	.word	0x20000004
 8000548:	20004d54 	.word	0x20004d54

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20004d54 	.word	0x20004d54

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff ffee 	bl	800054c <HAL_GetTick>
 8000570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057c:	d005      	beq.n	800058a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <HAL_Delay+0x44>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800058a:	bf00      	nop
 800058c:	f7ff ffde 	bl	800054c <HAL_GetTick>
 8000590:	4602      	mov	r2, r0
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f7      	bhi.n	800058c <HAL_Delay+0x28>
  {
  }
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000004 	.word	0x20000004

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__NVIC_SetPriorityGrouping+0x40>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005d6:	4313      	orrs	r3, r2
 80005d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005da:	4a04      	ldr	r2, [pc, #16]	; (80005ec <__NVIC_SetPriorityGrouping+0x40>)
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	60d3      	str	r3, [r2, #12]
}
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000ed00 	.word	0xe000ed00
 80005f0:	05fa0000 	.word	0x05fa0000

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	2b00      	cmp	r3, #0
 8000620:	db0b      	blt.n	800063a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 021f 	and.w	r2, r3, #31
 8000628:	4907      	ldr	r1, [pc, #28]	; (8000648 <__NVIC_EnableIRQ+0x38>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	095b      	lsrs	r3, r3, #5
 8000630:	2001      	movs	r0, #1
 8000632:	fa00 f202 	lsl.w	r2, r0, r2
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000e100 	.word	0xe000e100

0800064c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db0a      	blt.n	8000676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <__NVIC_SetPriority+0x4c>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	0112      	lsls	r2, r2, #4
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	440b      	add	r3, r1
 8000670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000674:	e00a      	b.n	800068c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <__NVIC_SetPriority+0x50>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	3b04      	subs	r3, #4
 8000684:	0112      	lsls	r2, r2, #4
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	440b      	add	r3, r1
 800068a:	761a      	strb	r2, [r3, #24]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f1c3 0307 	rsb	r3, r3, #7
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	bf28      	it	cs
 80006be:	2304      	movcs	r3, #4
 80006c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3304      	adds	r3, #4
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d902      	bls.n	80006d0 <NVIC_EncodePriority+0x30>
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3b03      	subs	r3, #3
 80006ce:	e000      	b.n	80006d2 <NVIC_EncodePriority+0x32>
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43da      	mvns	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	401a      	ands	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43d9      	mvns	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff ff4c 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800072e:	f7ff ff61 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 8000732:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	68b9      	ldr	r1, [r7, #8]
 8000738:	6978      	ldr	r0, [r7, #20]
 800073a:	f7ff ffb1 	bl	80006a0 <NVIC_EncodePriority>
 800073e:	4602      	mov	r2, r0
 8000740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff80 	bl	800064c <__NVIC_SetPriority>
}
 800074c:	bf00      	nop
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff54 	bl	8000610 <__NVIC_EnableIRQ>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800077e:	f7ff fee5 	bl	800054c <HAL_GetTick>
 8000782:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b02      	cmp	r3, #2
 800078e:	d008      	beq.n	80007a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e052      	b.n	8000848 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f022 0216 	bic.w	r2, r2, #22
 80007b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	695a      	ldr	r2, [r3, #20]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d103      	bne.n	80007d2 <HAL_DMA_Abort+0x62>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d007      	beq.n	80007e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f022 0208 	bic.w	r2, r2, #8
 80007e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f022 0201 	bic.w	r2, r2, #1
 80007f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80007f2:	e013      	b.n	800081c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80007f4:	f7ff feaa 	bl	800054c <HAL_GetTick>
 80007f8:	4602      	mov	r2, r0
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	2b05      	cmp	r3, #5
 8000800:	d90c      	bls.n	800081c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2220      	movs	r2, #32
 8000806:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2203      	movs	r2, #3
 8000814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8000818:	2303      	movs	r3, #3
 800081a:	e015      	b.n	8000848 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1e4      	bne.n	80007f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800082e:	223f      	movs	r2, #63	; 0x3f
 8000830:	409a      	lsls	r2, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2200      	movs	r2, #0
 800083a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2201      	movs	r2, #1
 8000842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b02      	cmp	r3, #2
 8000862:	d004      	beq.n	800086e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e00c      	b.n	8000888 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2205      	movs	r2, #5
 8000872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f022 0201 	bic.w	r2, r2, #1
 8000884:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000894:	b480      	push	{r7}
 8000896:	b089      	sub	sp, #36	; 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
 80008b2:	e175      	b.n	8000ba0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80008b4:	2201      	movs	r2, #1
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	697a      	ldr	r2, [r7, #20]
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	f040 8164 	bne.w	8000b9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d00b      	beq.n	80008f2 <HAL_GPIO_Init+0x5e>
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d007      	beq.n	80008f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e6:	2b11      	cmp	r3, #17
 80008e8:	d003      	beq.n	80008f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b12      	cmp	r3, #18
 80008f0:	d130      	bne.n	8000954 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	2203      	movs	r2, #3
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43db      	mvns	r3, r3
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	4013      	ands	r3, r2
 8000908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	68da      	ldr	r2, [r3, #12]
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	4313      	orrs	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000928:	2201      	movs	r2, #1
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	4013      	ands	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	091b      	lsrs	r3, r3, #4
 800093e:	f003 0201 	and.w	r2, r3, #1
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	4313      	orrs	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	2203      	movs	r2, #3
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	4013      	ands	r3, r2
 800096a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	689a      	ldr	r2, [r3, #8]
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4313      	orrs	r3, r2
 800097c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	2b02      	cmp	r3, #2
 800098a:	d003      	beq.n	8000994 <HAL_GPIO_Init+0x100>
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	2b12      	cmp	r3, #18
 8000992:	d123      	bne.n	80009dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	08da      	lsrs	r2, r3, #3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3208      	adds	r2, #8
 800099c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	f003 0307 	and.w	r3, r3, #7
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	220f      	movs	r2, #15
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	4013      	ands	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	691a      	ldr	r2, [r3, #16]
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	08da      	lsrs	r2, r3, #3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3208      	adds	r2, #8
 80009d6:	69b9      	ldr	r1, [r7, #24]
 80009d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	2203      	movs	r2, #3
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4013      	ands	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f003 0203 	and.w	r2, r3, #3
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	f000 80be 	beq.w	8000b9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b66      	ldr	r3, [pc, #408]	; (8000bb8 <HAL_GPIO_Init+0x324>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a65      	ldr	r2, [pc, #404]	; (8000bb8 <HAL_GPIO_Init+0x324>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2a:	4b63      	ldr	r3, [pc, #396]	; (8000bb8 <HAL_GPIO_Init+0x324>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000a36:	4a61      	ldr	r2, [pc, #388]	; (8000bbc <HAL_GPIO_Init+0x328>)
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f003 0303 	and.w	r3, r3, #3
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	220f      	movs	r2, #15
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4013      	ands	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a58      	ldr	r2, [pc, #352]	; (8000bc0 <HAL_GPIO_Init+0x32c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d037      	beq.n	8000ad2 <HAL_GPIO_Init+0x23e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a57      	ldr	r2, [pc, #348]	; (8000bc4 <HAL_GPIO_Init+0x330>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d031      	beq.n	8000ace <HAL_GPIO_Init+0x23a>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a56      	ldr	r2, [pc, #344]	; (8000bc8 <HAL_GPIO_Init+0x334>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d02b      	beq.n	8000aca <HAL_GPIO_Init+0x236>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a55      	ldr	r2, [pc, #340]	; (8000bcc <HAL_GPIO_Init+0x338>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d025      	beq.n	8000ac6 <HAL_GPIO_Init+0x232>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a54      	ldr	r2, [pc, #336]	; (8000bd0 <HAL_GPIO_Init+0x33c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d01f      	beq.n	8000ac2 <HAL_GPIO_Init+0x22e>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a53      	ldr	r2, [pc, #332]	; (8000bd4 <HAL_GPIO_Init+0x340>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d019      	beq.n	8000abe <HAL_GPIO_Init+0x22a>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a52      	ldr	r2, [pc, #328]	; (8000bd8 <HAL_GPIO_Init+0x344>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d013      	beq.n	8000aba <HAL_GPIO_Init+0x226>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a51      	ldr	r2, [pc, #324]	; (8000bdc <HAL_GPIO_Init+0x348>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d00d      	beq.n	8000ab6 <HAL_GPIO_Init+0x222>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a50      	ldr	r2, [pc, #320]	; (8000be0 <HAL_GPIO_Init+0x34c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d007      	beq.n	8000ab2 <HAL_GPIO_Init+0x21e>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a4f      	ldr	r2, [pc, #316]	; (8000be4 <HAL_GPIO_Init+0x350>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d101      	bne.n	8000aae <HAL_GPIO_Init+0x21a>
 8000aaa:	2309      	movs	r3, #9
 8000aac:	e012      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000aae:	230a      	movs	r3, #10
 8000ab0:	e010      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	e00e      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	e00c      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000aba:	2306      	movs	r3, #6
 8000abc:	e00a      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000abe:	2305      	movs	r3, #5
 8000ac0:	e008      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	e006      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	e004      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000aca:	2302      	movs	r3, #2
 8000acc:	e002      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e000      	b.n	8000ad4 <HAL_GPIO_Init+0x240>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	69fa      	ldr	r2, [r7, #28]
 8000ad6:	f002 0203 	and.w	r2, r2, #3
 8000ada:	0092      	lsls	r2, r2, #2
 8000adc:	4093      	lsls	r3, r2
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ae4:	4935      	ldr	r1, [pc, #212]	; (8000bbc <HAL_GPIO_Init+0x328>)
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	089b      	lsrs	r3, r3, #2
 8000aea:	3302      	adds	r3, #2
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000af2:	4b3d      	ldr	r3, [pc, #244]	; (8000be8 <HAL_GPIO_Init+0x354>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	4013      	ands	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b16:	4a34      	ldr	r2, [pc, #208]	; (8000be8 <HAL_GPIO_Init+0x354>)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b1c:	4b32      	ldr	r3, [pc, #200]	; (8000be8 <HAL_GPIO_Init+0x354>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d003      	beq.n	8000b40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b40:	4a29      	ldr	r2, [pc, #164]	; (8000be8 <HAL_GPIO_Init+0x354>)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b46:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <HAL_GPIO_Init+0x354>)
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	4013      	ands	r3, r2
 8000b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b6a:	4a1f      	ldr	r2, [pc, #124]	; (8000be8 <HAL_GPIO_Init+0x354>)
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <HAL_GPIO_Init+0x354>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d003      	beq.n	8000b94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <HAL_GPIO_Init+0x354>)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	61fb      	str	r3, [r7, #28]
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	2b0f      	cmp	r3, #15
 8000ba4:	f67f ae86 	bls.w	80008b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3724      	adds	r7, #36	; 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40013800 	.word	0x40013800
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	40020400 	.word	0x40020400
 8000bc8:	40020800 	.word	0x40020800
 8000bcc:	40020c00 	.word	0x40020c00
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40021400 	.word	0x40021400
 8000bd8:	40021800 	.word	0x40021800
 8000bdc:	40021c00 	.word	0x40021c00
 8000be0:	40022000 	.word	0x40022000
 8000be4:	40022400 	.word	0x40022400
 8000be8:	40013c00 	.word	0x40013c00

08000bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	807b      	strh	r3, [r7, #2]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bfc:	787b      	ldrb	r3, [r7, #1]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c02:	887a      	ldrh	r2, [r7, #2]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000c08:	e003      	b.n	8000c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	041a      	lsls	r2, r3, #16
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	619a      	str	r2, [r3, #24]
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d101      	bne.n	8000c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e07f      	b.n	8000d32 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d106      	bne.n	8000c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f009 fe34 	bl	800a8b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2224      	movs	r2, #36	; 0x24
 8000c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f022 0201 	bic.w	r2, r2, #1
 8000c62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d107      	bne.n	8000c9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689a      	ldr	r2, [r3, #8]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	e006      	b.n	8000ca8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000ca6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d104      	bne.n	8000cba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6859      	ldr	r1, [r3, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <HAL_I2C_Init+0x11c>)
 8000cc6:	430b      	orrs	r3, r1
 8000cc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	691a      	ldr	r2, [r3, #16]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	ea42 0103 	orr.w	r1, r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	021a      	lsls	r2, r3, #8
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69d9      	ldr	r1, [r3, #28]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a1a      	ldr	r2, [r3, #32]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f042 0201 	orr.w	r2, r2, #1
 8000d12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2220      	movs	r2, #32
 8000d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	02008000 	.word	0x02008000

08000d40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b20      	cmp	r3, #32
 8000d54:	d138      	bne.n	8000dc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d101      	bne.n	8000d64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000d60:	2302      	movs	r3, #2
 8000d62:	e032      	b.n	8000dca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2201      	movs	r2, #1
 8000d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2224      	movs	r2, #36	; 0x24
 8000d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f022 0201 	bic.w	r2, r2, #1
 8000d82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6819      	ldr	r1, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0201 	orr.w	r2, r2, #1
 8000db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2220      	movs	r2, #32
 8000db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e000      	b.n	8000dca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000dc8:	2302      	movs	r3, #2
  }
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b085      	sub	sp, #20
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b20      	cmp	r3, #32
 8000dea:	d139      	bne.n	8000e60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d101      	bne.n	8000dfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e033      	b.n	8000e62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2224      	movs	r2, #36	; 0x24
 8000e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f022 0201 	bic.w	r2, r2, #1
 8000e18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f042 0201 	orr.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2220      	movs	r2, #32
 8000e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e000      	b.n	8000e62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000e60:	2302      	movs	r3, #2
  }
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e70:	b08f      	sub	sp, #60	; 0x3c
 8000e72:	af0a      	add	r7, sp, #40	; 0x28
 8000e74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e116      	b.n	80010ae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d106      	bne.n	8000ea0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f009 ffa0 	bl	800ade0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f003 fd6d 	bl	800499e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	687e      	ldr	r6, [r7, #4]
 8000ecc:	466d      	mov	r5, sp
 8000ece:	f106 0410 	add.w	r4, r6, #16
 8000ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ede:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ee2:	1d33      	adds	r3, r6, #4
 8000ee4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ee6:	6838      	ldr	r0, [r7, #0]
 8000ee8:	f003 fc4e 	bl	8004788 <USB_CoreInit>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d005      	beq.n	8000efe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e0d7      	b.n	80010ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 fd5b 	bl	80049c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	e04a      	b.n	8000fa6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	4613      	mov	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	1a9b      	subs	r3, r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	333d      	adds	r3, #61	; 0x3d
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	1a9b      	subs	r3, r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	333c      	adds	r3, #60	; 0x3c
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	b298      	uxth	r0, r3
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	4613      	mov	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	1a9b      	subs	r3, r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	440b      	add	r3, r1
 8000f4a:	3342      	adds	r3, #66	; 0x42
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	4613      	mov	r3, r2
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	1a9b      	subs	r3, r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	333f      	adds	r3, #63	; 0x3f
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	1a9b      	subs	r3, r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	3344      	adds	r3, #68	; 0x44
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	1a9b      	subs	r3, r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	440b      	add	r3, r1
 8000f86:	3348      	adds	r3, #72	; 0x48
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	4613      	mov	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	1a9b      	subs	r3, r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	440b      	add	r3, r1
 8000f9a:	3350      	adds	r3, #80	; 0x50
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d3af      	bcc.n	8000f10 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	e044      	b.n	8001040 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	1a9b      	subs	r3, r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000fde:	7bfa      	ldrb	r2, [r7, #15]
 8000fe0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	1a9b      	subs	r3, r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	1a9b      	subs	r3, r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	1a9b      	subs	r3, r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	1a9b      	subs	r3, r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	3301      	adds	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3b5      	bcc.n	8000fb6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	687e      	ldr	r6, [r7, #4]
 8001052:	466d      	mov	r5, sp
 8001054:	f106 0410 	add.w	r4, r6, #16
 8001058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800105a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800105c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800105e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001060:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001064:	e885 0003 	stmia.w	r5, {r0, r1}
 8001068:	1d33      	adds	r3, r6, #4
 800106a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800106c:	6838      	ldr	r0, [r7, #0]
 800106e:	f003 fcd1 	bl	8004a14 <USB_DevInit>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2202      	movs	r2, #2
 800107c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e014      	b.n	80010ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	2b01      	cmp	r3, #1
 800109a:	d102      	bne.n	80010a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f001 f881 	bl	80021a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f004 fd29 	bl	8005afe <USB_DevDisconnect>

  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d101      	bne.n	80010cc <HAL_PCD_Start+0x16>
 80010c8:	2302      	movs	r3, #2
 80010ca:	e012      	b.n	80010f2 <HAL_PCD_Start+0x3c>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f003 fc4f 	bl	800497c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 fcea 	bl	8005abc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010fa:	b590      	push	{r4, r7, lr}
 80010fc:	b08d      	sub	sp, #52	; 0x34
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001108:	6a3b      	ldr	r3, [r7, #32]
 800110a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f004 fda8 	bl	8005c66 <USB_GetMode>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	f040 83ca 	bne.w	80018b2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f004 fd0c 	bl	8005b40 <USB_ReadInterrupts>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 83c0 	beq.w	80018b0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f004 fd03 	bl	8005b40 <USB_ReadInterrupts>
 800113a:	4603      	mov	r3, r0
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b02      	cmp	r3, #2
 8001142:	d107      	bne.n	8001154 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	695a      	ldr	r2, [r3, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f002 0202 	and.w	r2, r2, #2
 8001152:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f004 fcf1 	bl	8005b40 <USB_ReadInterrupts>
 800115e:	4603      	mov	r3, r0
 8001160:	f003 0310 	and.w	r3, r3, #16
 8001164:	2b10      	cmp	r3, #16
 8001166:	d161      	bne.n	800122c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	699a      	ldr	r2, [r3, #24]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0210 	bic.w	r2, r2, #16
 8001176:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	f003 020f 	and.w	r2, r3, #15
 8001184:	4613      	mov	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	3304      	adds	r3, #4
 8001196:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	0c5b      	lsrs	r3, r3, #17
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d124      	bne.n	80011ee <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d035      	beq.n	800121c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011be:	b29b      	uxth	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	6a38      	ldr	r0, [r7, #32]
 80011c4:	f004 fb57 	bl	8005876 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	091b      	lsrs	r3, r3, #4
 80011d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011d4:	441a      	add	r2, r3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	699a      	ldr	r2, [r3, #24]
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011e6:	441a      	add	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	619a      	str	r2, [r3, #24]
 80011ec:	e016      	b.n	800121c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	0c5b      	lsrs	r3, r3, #17
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d110      	bne.n	800121c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001200:	2208      	movs	r2, #8
 8001202:	4619      	mov	r1, r3
 8001204:	6a38      	ldr	r0, [r7, #32]
 8001206:	f004 fb36 	bl	8005876 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	699a      	ldr	r2, [r3, #24]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001216:	441a      	add	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	699a      	ldr	r2, [r3, #24]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0210 	orr.w	r2, r2, #16
 800122a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f004 fc85 	bl	8005b40 <USB_ReadInterrupts>
 8001236:	4603      	mov	r3, r0
 8001238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800123c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001240:	d16e      	bne.n	8001320 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f004 fc8b 	bl	8005b66 <USB_ReadDevAllOutEpInterrupt>
 8001250:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001252:	e062      	b.n	800131a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d057      	beq.n	800130e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f004 fcb0 	bl	8005bce <USB_ReadDevOutEPInterrupt>
 800126e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00c      	beq.n	8001294 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	015a      	lsls	r2, r3, #5
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	4413      	add	r3, r2
 8001282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001286:	461a      	mov	r2, r3
 8001288:	2301      	movs	r3, #1
 800128a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800128c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 fdde 	bl	8001e50 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00c      	beq.n	80012b8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	015a      	lsls	r2, r3, #5
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	4413      	add	r3, r2
 80012a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012aa:	461a      	mov	r2, r3
 80012ac:	2308      	movs	r3, #8
 80012ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 fed8 	bl	8002068 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d008      	beq.n	80012d4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	015a      	lsls	r2, r3, #5
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	4413      	add	r3, r2
 80012ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012ce:	461a      	mov	r2, r3
 80012d0:	2310      	movs	r3, #16
 80012d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	f003 0320 	and.w	r3, r3, #32
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d008      	beq.n	80012f0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	015a      	lsls	r2, r3, #5
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	4413      	add	r3, r2
 80012e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012ea:	461a      	mov	r2, r3
 80012ec:	2320      	movs	r3, #32
 80012ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d009      	beq.n	800130e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	015a      	lsls	r2, r3, #5
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	4413      	add	r3, r2
 8001302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001306:	461a      	mov	r2, r3
 8001308:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800130c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	3301      	adds	r3, #1
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001316:	085b      	lsrs	r3, r3, #1
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800131a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131c:	2b00      	cmp	r3, #0
 800131e:	d199      	bne.n	8001254 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f004 fc0b 	bl	8005b40 <USB_ReadInterrupts>
 800132a:	4603      	mov	r3, r0
 800132c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001330:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001334:	f040 80c0 	bne.w	80014b8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f004 fc2c 	bl	8005b9a <USB_ReadDevAllInEpInterrupt>
 8001342:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001348:	e0b2      	b.n	80014b0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800134a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 80a7 	beq.w	80014a4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f004 fc52 	bl	8005c0a <USB_ReadDevInEPInterrupt>
 8001366:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d057      	beq.n	8001422 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	2201      	movs	r2, #1
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43db      	mvns	r3, r3
 800138c:	69f9      	ldr	r1, [r7, #28]
 800138e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001392:	4013      	ands	r3, r2
 8001394:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	015a      	lsls	r2, r3, #5
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	4413      	add	r3, r2
 800139e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013a2:	461a      	mov	r2, r3
 80013a4:	2301      	movs	r3, #1
 80013a6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d132      	bne.n	8001416 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b4:	4613      	mov	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	1a9b      	subs	r3, r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	3348      	adds	r3, #72	; 0x48
 80013c0:	6819      	ldr	r1, [r3, #0]
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4403      	add	r3, r0
 80013d0:	3344      	adds	r3, #68	; 0x44
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4419      	add	r1, r3
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4403      	add	r3, r0
 80013e4:	3348      	adds	r3, #72	; 0x48
 80013e6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d113      	bne.n	8001416 <HAL_PCD_IRQHandler+0x31c>
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	1a9b      	subs	r3, r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	3350      	adds	r3, #80	; 0x50
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d108      	bne.n	8001416 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800140e:	461a      	mov	r2, r3
 8001410:	2101      	movs	r1, #1
 8001412:	f004 fc5b 	bl	8005ccc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4619      	mov	r1, r3
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f009 fd70 	bl	800af02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	2b00      	cmp	r3, #0
 800142a:	d008      	beq.n	800143e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	015a      	lsls	r2, r3, #5
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	4413      	add	r3, r2
 8001434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001438:	461a      	mov	r2, r3
 800143a:	2308      	movs	r3, #8
 800143c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	f003 0310 	and.w	r3, r3, #16
 8001444:	2b00      	cmp	r3, #0
 8001446:	d008      	beq.n	800145a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	015a      	lsls	r2, r3, #5
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	4413      	add	r3, r2
 8001450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001454:	461a      	mov	r2, r3
 8001456:	2310      	movs	r3, #16
 8001458:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001460:	2b00      	cmp	r3, #0
 8001462:	d008      	beq.n	8001476 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	015a      	lsls	r2, r3, #5
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	4413      	add	r3, r2
 800146c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001470:	461a      	mov	r2, r3
 8001472:	2340      	movs	r3, #64	; 0x40
 8001474:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d008      	beq.n	8001492 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	015a      	lsls	r2, r3, #5
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	4413      	add	r3, r2
 8001488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800148c:	461a      	mov	r2, r3
 800148e:	2302      	movs	r3, #2
 8001490:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800149c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 fc48 	bl	8001d34 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	3301      	adds	r3, #1
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ac:	085b      	lsrs	r3, r3, #1
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f47f af49 	bne.w	800134a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f004 fb3f 	bl	8005b40 <USB_ReadInterrupts>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014cc:	d122      	bne.n	8001514 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d108      	bne.n	80014fe <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80014f4:	2100      	movs	r1, #0
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f009 ff52 	bl	800b3a0 <HAL_PCDEx_LPM_Callback>
 80014fc:	e002      	b.n	8001504 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f009 fd76 	bl	800aff0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	695a      	ldr	r2, [r3, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001512:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f004 fb11 	bl	8005b40 <USB_ReadInterrupts>
 800151e:	4603      	mov	r3, r0
 8001520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001528:	d112      	bne.n	8001550 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b01      	cmp	r3, #1
 8001538:	d102      	bne.n	8001540 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f009 fd32 	bl	800afa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800154e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f004 faf3 	bl	8005b40 <USB_ReadInterrupts>
 800155a:	4603      	mov	r3, r0
 800155c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001560:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001564:	d121      	bne.n	80015aa <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001574:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d111      	bne.n	80015a4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	f003 020f 	and.w	r2, r3, #15
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800159a:	2101      	movs	r1, #1
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f009 feff 	bl	800b3a0 <HAL_PCDEx_LPM_Callback>
 80015a2:	e002      	b.n	80015aa <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f009 fcfd 	bl	800afa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f004 fac6 	bl	8005b40 <USB_ReadInterrupts>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015be:	f040 80c7 	bne.w	8001750 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2110      	movs	r1, #16
 80015dc:	4618      	mov	r0, r3
 80015de:	f003 fb87 	bl	8004cf0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e6:	e056      	b.n	8001696 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80015e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ea:	015a      	lsls	r2, r3, #5
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	4413      	add	r3, r2
 80015f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015f4:	461a      	mov	r2, r3
 80015f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fe:	015a      	lsls	r2, r3, #5
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	4413      	add	r3, r2
 8001604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800160c:	0151      	lsls	r1, r2, #5
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	440a      	add	r2, r1
 8001612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001616:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800161a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161e:	015a      	lsls	r2, r3, #5
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	4413      	add	r3, r2
 8001624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800162c:	0151      	lsls	r1, r2, #5
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	440a      	add	r2, r1
 8001632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001636:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800163a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163e:	015a      	lsls	r2, r3, #5
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	4413      	add	r3, r2
 8001644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001648:	461a      	mov	r2, r3
 800164a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800164e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001652:	015a      	lsls	r2, r3, #5
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	4413      	add	r3, r2
 8001658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001660:	0151      	lsls	r1, r2, #5
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	440a      	add	r2, r1
 8001666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800166a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800166e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001672:	015a      	lsls	r2, r3, #5
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	4413      	add	r3, r2
 8001678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001680:	0151      	lsls	r1, r2, #5
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	440a      	add	r2, r1
 8001686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800168a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800168e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001692:	3301      	adds	r3, #1
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800169c:	429a      	cmp	r2, r3
 800169e:	d3a3      	bcc.n	80015e8 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	69fa      	ldr	r2, [r7, #28]
 80016aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80016b2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d016      	beq.n	80016ea <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016cc:	f043 030b 	orr.w	r3, r3, #11
 80016d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016dc:	69fa      	ldr	r2, [r7, #28]
 80016de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016e2:	f043 030b 	orr.w	r3, r3, #11
 80016e6:	6453      	str	r3, [r2, #68]	; 0x44
 80016e8:	e015      	b.n	8001716 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016f8:	4619      	mov	r1, r3
 80016fa:	f242 032b 	movw	r3, #8235	; 0x202b
 80016fe:	4313      	orrs	r3, r2
 8001700:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001710:	f043 030b 	orr.w	r3, r3, #11
 8001714:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001724:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001728:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800173a:	461a      	mov	r2, r3
 800173c:	f004 fac6 	bl	8005ccc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695a      	ldr	r2, [r3, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800174e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f004 f9f3 	bl	8005b40 <USB_ReadInterrupts>
 800175a:	4603      	mov	r3, r0
 800175c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001764:	d124      	bne.n	80017b0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f004 fa8a 	bl	8005c84 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f003 fb1c 	bl	8004db2 <USB_GetDevSpeed>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681c      	ldr	r4, [r3, #0]
 8001786:	f001 f9b3 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 800178a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	4620      	mov	r0, r4
 8001796:	f003 f84f 	bl	8004838 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f009 fbd9 	bl	800af52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80017ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f004 f9c3 	bl	8005b40 <USB_ReadInterrupts>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d10a      	bne.n	80017da <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f009 fbb6 	bl	800af36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	695a      	ldr	r2, [r3, #20]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f002 0208 	and.w	r2, r2, #8
 80017d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f004 f9ae 	bl	8005b40 <USB_ReadInterrupts>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017ee:	d10f      	bne.n	8001810 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	4619      	mov	r1, r3
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f009 fc18 	bl	800b030 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800180e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f004 f993 	bl	8005b40 <USB_ReadInterrupts>
 800181a:	4603      	mov	r3, r0
 800181c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001820:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001824:	d10f      	bne.n	8001846 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4619      	mov	r1, r3
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f009 fbeb 	bl	800b00c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	695a      	ldr	r2, [r3, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001844:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f004 f978 	bl	8005b40 <USB_ReadInterrupts>
 8001850:	4603      	mov	r3, r0
 8001852:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800185a:	d10a      	bne.n	8001872 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f009 fbf9 	bl	800b054 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001870:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f004 f962 	bl	8005b40 <USB_ReadInterrupts>
 800187c:	4603      	mov	r3, r0
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b04      	cmp	r3, #4
 8001884:	d115      	bne.n	80018b2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f009 fbe9 	bl	800b070 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	e000      	b.n	80018b2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80018b0:	bf00      	nop
    }
  }
}
 80018b2:	3734      	adds	r7, #52	; 0x34
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd90      	pop	{r4, r7, pc}

080018b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d101      	bne.n	80018d2 <HAL_PCD_SetAddress+0x1a>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e013      	b.n	80018fa <HAL_PCD_SetAddress+0x42>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	78fa      	ldrb	r2, [r7, #3]
 80018de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f004 f8c0 	bl	8005a70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b084      	sub	sp, #16
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	4608      	mov	r0, r1
 800190c:	4611      	mov	r1, r2
 800190e:	461a      	mov	r2, r3
 8001910:	4603      	mov	r3, r0
 8001912:	70fb      	strb	r3, [r7, #3]
 8001914:	460b      	mov	r3, r1
 8001916:	803b      	strh	r3, [r7, #0]
 8001918:	4613      	mov	r3, r2
 800191a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001920:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001924:	2b00      	cmp	r3, #0
 8001926:	da0f      	bge.n	8001948 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	f003 020f 	and.w	r2, r3, #15
 800192e:	4613      	mov	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	3338      	adds	r3, #56	; 0x38
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4413      	add	r3, r2
 800193c:	3304      	adds	r3, #4
 800193e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2201      	movs	r2, #1
 8001944:	705a      	strb	r2, [r3, #1]
 8001946:	e00f      	b.n	8001968 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	f003 020f 	and.w	r2, r3, #15
 800194e:	4613      	mov	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	3304      	adds	r3, #4
 8001960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	b2da      	uxtb	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001974:	883a      	ldrh	r2, [r7, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	78ba      	ldrb	r2, [r7, #2]
 800197e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	785b      	ldrb	r3, [r3, #1]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d004      	beq.n	8001992 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	b29a      	uxth	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001992:	78bb      	ldrb	r3, [r7, #2]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d102      	bne.n	800199e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_PCD_EP_Open+0xaa>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e00e      	b.n	80019ca <HAL_PCD_EP_Open+0xc8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68f9      	ldr	r1, [r7, #12]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 fa1e 	bl	8004dfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80019c8:	7afb      	ldrb	r3, [r7, #11]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	da0f      	bge.n	8001a06 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	f003 020f 	and.w	r2, r3, #15
 80019ec:	4613      	mov	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	1a9b      	subs	r3, r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	3338      	adds	r3, #56	; 0x38
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	3304      	adds	r3, #4
 80019fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2201      	movs	r2, #1
 8001a02:	705a      	strb	r2, [r3, #1]
 8001a04:	e00f      	b.n	8001a26 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	f003 020f 	and.w	r2, r3, #15
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	1a9b      	subs	r3, r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_PCD_EP_Close+0x6e>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e00e      	b.n	8001a5e <HAL_PCD_EP_Close+0x8c>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68f9      	ldr	r1, [r7, #12]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 fa5c 	bl	8004f0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
 8001a72:	460b      	mov	r3, r1
 8001a74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a76:	7afb      	ldrb	r3, [r7, #11]
 8001a78:	f003 020f 	and.w	r2, r3, #15
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa8:	7afb      	ldrb	r3, [r7, #11]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d102      	bne.n	8001ac2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ac2:	7afb      	ldrb	r3, [r7, #11]
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d109      	bne.n	8001ae0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	6979      	ldr	r1, [r7, #20]
 8001ada:	f003 fd3f 	bl	800555c <USB_EP0StartXfer>
 8001ade:	e008      	b.n	8001af2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	6979      	ldr	r1, [r7, #20]
 8001aee:	f003 fae9 	bl	80050c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	f003 020f 	and.w	r2, r3, #15
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	1a9b      	subs	r3, r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b3c:	7afb      	ldrb	r3, [r7, #11]
 8001b3e:	f003 020f 	and.w	r2, r3, #15
 8001b42:	4613      	mov	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	3338      	adds	r3, #56	; 0x38
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	3304      	adds	r3, #4
 8001b52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b6c:	7afb      	ldrb	r3, [r7, #11]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d102      	bne.n	8001b86 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b86:	7afb      	ldrb	r3, [r7, #11]
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d109      	bne.n	8001ba4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	6979      	ldr	r1, [r7, #20]
 8001b9e:	f003 fcdd 	bl	800555c <USB_EP0StartXfer>
 8001ba2:	e008      	b.n	8001bb6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	6979      	ldr	r1, [r7, #20]
 8001bb2:	f003 fa87 	bl	80050c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	f003 020f 	and.w	r2, r3, #15
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d901      	bls.n	8001bde <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e050      	b.n	8001c80 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	da0f      	bge.n	8001c06 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	f003 020f 	and.w	r2, r3, #15
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	3338      	adds	r3, #56	; 0x38
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	705a      	strb	r2, [r3, #1]
 8001c04:	e00d      	b.n	8001c22 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c06:	78fa      	ldrb	r2, [r7, #3]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	3304      	adds	r3, #4
 8001c1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_PCD_EP_SetStall+0x82>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e01e      	b.n	8001c80 <HAL_PCD_EP_SetStall+0xc0>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68f9      	ldr	r1, [r7, #12]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 fe39 	bl	80058c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10a      	bne.n	8001c76 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	b2d9      	uxtb	r1, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c70:	461a      	mov	r2, r3
 8001c72:	f004 f82b 	bl	8005ccc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	f003 020f 	and.w	r2, r3, #15
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d901      	bls.n	8001ca6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e042      	b.n	8001d2c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	da0f      	bge.n	8001cce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	f003 020f 	and.w	r2, r3, #15
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	1a9b      	subs	r3, r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	3338      	adds	r3, #56	; 0x38
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	705a      	strb	r2, [r3, #1]
 8001ccc:	e00f      	b.n	8001cee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	f003 020f 	and.w	r2, r3, #15
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_PCD_EP_ClrStall+0x86>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e00e      	b.n	8001d2c <HAL_PCD_EP_ClrStall+0xa4>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68f9      	ldr	r1, [r7, #12]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fe41 	bl	80059a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af02      	add	r7, sp, #8
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	3338      	adds	r3, #56	; 0x38
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	4413      	add	r3, r2
 8001d58:	3304      	adds	r3, #4
 8001d5a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	699a      	ldr	r2, [r3, #24]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d901      	bls.n	8001d6c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e06c      	b.n	8001e46 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d902      	bls.n	8001d88 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	3303      	adds	r3, #3
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d90:	e02b      	b.n	8001dea <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d902      	bls.n	8001dae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3303      	adds	r3, #3
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	68d9      	ldr	r1, [r3, #12]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6978      	ldr	r0, [r7, #20]
 8001dce:	f003 fd1d 	bl	800580c <USB_WritePacket>

    ep->xfer_buff  += len;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	441a      	add	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	699a      	ldr	r2, [r3, #24]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	441a      	add	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d809      	bhi.n	8001e14 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	699a      	ldr	r2, [r3, #24]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d203      	bcs.n	8001e14 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1be      	bne.n	8001d92 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	695a      	ldr	r2, [r3, #20]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d811      	bhi.n	8001e44 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	2201      	movs	r2, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	6939      	ldr	r1, [r7, #16]
 8001e3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e40:	4013      	ands	r3, r2
 8001e42:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3720      	adds	r7, #32
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	333c      	adds	r3, #60	; 0x3c
 8001e68:	3304      	adds	r3, #4
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	f040 80a0 	bne.w	8001fc8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d015      	beq.n	8001ebe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4a72      	ldr	r2, [pc, #456]	; (8002060 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	f240 80dd 	bls.w	8002056 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80d7 	beq.w	8002056 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eba:	6093      	str	r3, [r2, #8]
 8001ebc:	e0cb      	b.n	8002056 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f003 0320 	and.w	r3, r3, #32
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d009      	beq.n	8001edc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	015a      	lsls	r2, r3, #5
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4413      	add	r3, r2
 8001ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	6093      	str	r3, [r2, #8]
 8001eda:	e0bc      	b.n	8002056 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f040 80b7 	bne.w	8002056 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4a5d      	ldr	r2, [pc, #372]	; (8002060 <PCD_EP_OutXfrComplete_int+0x210>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d90f      	bls.n	8001f10 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00a      	beq.n	8001f10 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f06:	461a      	mov	r2, r3
 8001f08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f0c:	6093      	str	r3, [r2, #8]
 8001f0e:	e0a2      	b.n	8002056 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f22:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	0159      	lsls	r1, r3, #5
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001f36:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	1a9b      	subs	r3, r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4403      	add	r3, r0
 8001f46:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f4a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f5e:	6819      	ldr	r1, [r3, #0]
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4403      	add	r3, r0
 8001f6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4419      	add	r1, r3
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4403      	add	r3, r0
 8001f84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f88:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d114      	bne.n	8001fba <PCD_EP_OutXfrComplete_int+0x16a>
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d108      	bne.n	8001fba <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	f003 fe89 	bl	8005ccc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f008 ff83 	bl	800aecc <HAL_PCD_DataOutStageCallback>
 8001fc6:	e046      	b.n	8002056 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4a26      	ldr	r2, [pc, #152]	; (8002064 <PCD_EP_OutXfrComplete_int+0x214>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d124      	bne.n	800201a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fec:	6093      	str	r3, [r2, #8]
 8001fee:	e032      	b.n	8002056 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d008      	beq.n	800200c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4413      	add	r3, r2
 8002002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002006:	461a      	mov	r2, r3
 8002008:	2320      	movs	r3, #32
 800200a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	4619      	mov	r1, r3
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f008 ff5a 	bl	800aecc <HAL_PCD_DataOutStageCallback>
 8002018:	e01d      	b.n	8002056 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d114      	bne.n	800204a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d108      	bne.n	800204a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002042:	461a      	mov	r2, r3
 8002044:	2100      	movs	r1, #0
 8002046:	f003 fe41 	bl	8005ccc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	4619      	mov	r1, r3
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f008 ff3b 	bl	800aecc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	4f54300a 	.word	0x4f54300a
 8002064:	4f54310a 	.word	0x4f54310a

08002068 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	333c      	adds	r3, #60	; 0x3c
 8002080:	3304      	adds	r3, #4
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4a15      	ldr	r2, [pc, #84]	; (80020f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d90e      	bls.n	80020bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d009      	beq.n	80020bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b4:	461a      	mov	r2, r3
 80020b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f008 fef3 	bl	800aea8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d90c      	bls.n	80020e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d108      	bne.n	80020e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020dc:	461a      	mov	r2, r3
 80020de:	2101      	movs	r1, #1
 80020e0:	f003 fdf4 	bl	8005ccc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	4f54300a 	.word	0x4f54300a

080020f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	70fb      	strb	r3, [r7, #3]
 8002100:	4613      	mov	r3, r2
 8002102:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d107      	bne.n	8002122 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002112:	883b      	ldrh	r3, [r7, #0]
 8002114:	0419      	lsls	r1, r3, #16
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	430a      	orrs	r2, r1
 800211e:	629a      	str	r2, [r3, #40]	; 0x28
 8002120:	e028      	b.n	8002174 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	0c1b      	lsrs	r3, r3, #16
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	4413      	add	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	e00d      	b.n	8002152 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	3340      	adds	r3, #64	; 0x40
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	0c1b      	lsrs	r3, r3, #16
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	4413      	add	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	3301      	adds	r3, #1
 8002150:	73fb      	strb	r3, [r7, #15]
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	3b01      	subs	r3, #1
 8002158:	429a      	cmp	r2, r3
 800215a:	d3ec      	bcc.n	8002136 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800215c:	883b      	ldrh	r3, [r7, #0]
 800215e:	0418      	lsls	r0, r3, #16
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6819      	ldr	r1, [r3, #0]
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	3b01      	subs	r3, #1
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	4302      	orrs	r2, r0
 800216c:	3340      	adds	r3, #64	; 0x40
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	10000003 	.word	0x10000003

080021ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fa:	6013      	str	r3, [r2, #0]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40007000 	.word	0x40007000

0800220c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002214:	2300      	movs	r3, #0
 8002216:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e291      	b.n	8002746 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8087 	beq.w	800233e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002230:	4b96      	ldr	r3, [pc, #600]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b04      	cmp	r3, #4
 800223a:	d00c      	beq.n	8002256 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223c:	4b93      	ldr	r3, [pc, #588]	; (800248c <HAL_RCC_OscConfig+0x280>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b08      	cmp	r3, #8
 8002246:	d112      	bne.n	800226e <HAL_RCC_OscConfig+0x62>
 8002248:	4b90      	ldr	r3, [pc, #576]	; (800248c <HAL_RCC_OscConfig+0x280>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002250:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002254:	d10b      	bne.n	800226e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002256:	4b8d      	ldr	r3, [pc, #564]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d06c      	beq.n	800233c <HAL_RCC_OscConfig+0x130>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d168      	bne.n	800233c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e26b      	b.n	8002746 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x7a>
 8002278:	4b84      	ldr	r3, [pc, #528]	; (800248c <HAL_RCC_OscConfig+0x280>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a83      	ldr	r2, [pc, #524]	; (800248c <HAL_RCC_OscConfig+0x280>)
 800227e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	e02e      	b.n	80022e4 <HAL_RCC_OscConfig+0xd8>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x9c>
 800228e:	4b7f      	ldr	r3, [pc, #508]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a7e      	ldr	r2, [pc, #504]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b7c      	ldr	r3, [pc, #496]	; (800248c <HAL_RCC_OscConfig+0x280>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a7b      	ldr	r2, [pc, #492]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80022a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e01d      	b.n	80022e4 <HAL_RCC_OscConfig+0xd8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0xc0>
 80022b2:	4b76      	ldr	r3, [pc, #472]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a75      	ldr	r2, [pc, #468]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80022b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b73      	ldr	r3, [pc, #460]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a72      	ldr	r2, [pc, #456]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e00b      	b.n	80022e4 <HAL_RCC_OscConfig+0xd8>
 80022cc:	4b6f      	ldr	r3, [pc, #444]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a6e      	ldr	r2, [pc, #440]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80022d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4b6c      	ldr	r3, [pc, #432]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a6b      	ldr	r2, [pc, #428]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80022de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d013      	beq.n	8002314 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7fe f92e 	bl	800054c <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f4:	f7fe f92a 	bl	800054c <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e21f      	b.n	8002746 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	4b61      	ldr	r3, [pc, #388]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0xe8>
 8002312:	e014      	b.n	800233e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7fe f91a 	bl	800054c <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800231c:	f7fe f916 	bl	800054c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b64      	cmp	r3, #100	; 0x64
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e20b      	b.n	8002746 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232e:	4b57      	ldr	r3, [pc, #348]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x110>
 800233a:	e000      	b.n	800233e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d069      	beq.n	800241e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800234a:	4b50      	ldr	r3, [pc, #320]	; (800248c <HAL_RCC_OscConfig+0x280>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002356:	4b4d      	ldr	r3, [pc, #308]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b08      	cmp	r3, #8
 8002360:	d11c      	bne.n	800239c <HAL_RCC_OscConfig+0x190>
 8002362:	4b4a      	ldr	r3, [pc, #296]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d116      	bne.n	800239c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	4b47      	ldr	r3, [pc, #284]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_RCC_OscConfig+0x17a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e1df      	b.n	8002746 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002386:	4b41      	ldr	r3, [pc, #260]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	493d      	ldr	r1, [pc, #244]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239a:	e040      	b.n	800241e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d023      	beq.n	80023ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a4:	4b39      	ldr	r3, [pc, #228]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a38      	ldr	r2, [pc, #224]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7fe f8cc 	bl	800054c <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b8:	f7fe f8c8 	bl	800054c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e1bd      	b.n	8002746 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ca:	4b30      	ldr	r3, [pc, #192]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d6:	4b2d      	ldr	r3, [pc, #180]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4929      	ldr	r1, [pc, #164]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]
 80023ea:	e018      	b.n	800241e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ec:	4b27      	ldr	r3, [pc, #156]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a26      	ldr	r2, [pc, #152]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80023f2:	f023 0301 	bic.w	r3, r3, #1
 80023f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7fe f8a8 	bl	800054c <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002400:	f7fe f8a4 	bl	800054c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e199      	b.n	8002746 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002412:	4b1e      	ldr	r3, [pc, #120]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d038      	beq.n	800249c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d019      	beq.n	8002466 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002436:	4a15      	ldr	r2, [pc, #84]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243e:	f7fe f885 	bl	800054c <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002446:	f7fe f881 	bl	800054c <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e176      	b.n	8002746 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_RCC_OscConfig+0x280>)
 800245a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x23a>
 8002464:	e01a      	b.n	800249c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246a:	4a08      	ldr	r2, [pc, #32]	; (800248c <HAL_RCC_OscConfig+0x280>)
 800246c:	f023 0301 	bic.w	r3, r3, #1
 8002470:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002472:	f7fe f86b 	bl	800054c <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800247a:	f7fe f867 	bl	800054c <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d903      	bls.n	8002490 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e15c      	b.n	8002746 <HAL_RCC_OscConfig+0x53a>
 800248c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002490:	4b91      	ldr	r3, [pc, #580]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 8002492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ee      	bne.n	800247a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80a4 	beq.w	80025f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024aa:	4b8b      	ldr	r3, [pc, #556]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10d      	bne.n	80024d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	4b88      	ldr	r3, [pc, #544]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	4a87      	ldr	r2, [pc, #540]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c0:	6413      	str	r3, [r2, #64]	; 0x40
 80024c2:	4b85      	ldr	r3, [pc, #532]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ce:	2301      	movs	r3, #1
 80024d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d2:	4b82      	ldr	r3, [pc, #520]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d118      	bne.n	8002510 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024de:	4b7f      	ldr	r3, [pc, #508]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a7e      	ldr	r2, [pc, #504]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 80024e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ea:	f7fe f82f 	bl	800054c <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f2:	f7fe f82b 	bl	800054c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b64      	cmp	r3, #100	; 0x64
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e120      	b.n	8002746 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002504:	4b75      	ldr	r3, [pc, #468]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d106      	bne.n	8002526 <HAL_RCC_OscConfig+0x31a>
 8002518:	4b6f      	ldr	r3, [pc, #444]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251c:	4a6e      	ldr	r2, [pc, #440]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6713      	str	r3, [r2, #112]	; 0x70
 8002524:	e02d      	b.n	8002582 <HAL_RCC_OscConfig+0x376>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0x33c>
 800252e:	4b6a      	ldr	r3, [pc, #424]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	4a69      	ldr	r2, [pc, #420]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	6713      	str	r3, [r2, #112]	; 0x70
 800253a:	4b67      	ldr	r3, [pc, #412]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	4a66      	ldr	r2, [pc, #408]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 8002540:	f023 0304 	bic.w	r3, r3, #4
 8002544:	6713      	str	r3, [r2, #112]	; 0x70
 8002546:	e01c      	b.n	8002582 <HAL_RCC_OscConfig+0x376>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b05      	cmp	r3, #5
 800254e:	d10c      	bne.n	800256a <HAL_RCC_OscConfig+0x35e>
 8002550:	4b61      	ldr	r3, [pc, #388]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	4a60      	ldr	r2, [pc, #384]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 8002556:	f043 0304 	orr.w	r3, r3, #4
 800255a:	6713      	str	r3, [r2, #112]	; 0x70
 800255c:	4b5e      	ldr	r3, [pc, #376]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	4a5d      	ldr	r2, [pc, #372]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6713      	str	r3, [r2, #112]	; 0x70
 8002568:	e00b      	b.n	8002582 <HAL_RCC_OscConfig+0x376>
 800256a:	4b5b      	ldr	r3, [pc, #364]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	4a5a      	ldr	r2, [pc, #360]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	6713      	str	r3, [r2, #112]	; 0x70
 8002576:	4b58      	ldr	r3, [pc, #352]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	4a57      	ldr	r2, [pc, #348]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 800257c:	f023 0304 	bic.w	r3, r3, #4
 8002580:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d015      	beq.n	80025b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258a:	f7fd ffdf 	bl	800054c <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fd ffdb 	bl	800054c <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0ce      	b.n	8002746 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a8:	4b4b      	ldr	r3, [pc, #300]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ee      	beq.n	8002592 <HAL_RCC_OscConfig+0x386>
 80025b4:	e014      	b.n	80025e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b6:	f7fd ffc9 	bl	800054c <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025bc:	e00a      	b.n	80025d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025be:	f7fd ffc5 	bl	800054c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e0b8      	b.n	8002746 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d4:	4b40      	ldr	r3, [pc, #256]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ee      	bne.n	80025be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d105      	bne.n	80025f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e6:	4b3c      	ldr	r3, [pc, #240]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	4a3b      	ldr	r2, [pc, #236]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 80025ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80a4 	beq.w	8002744 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025fc:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b08      	cmp	r3, #8
 8002606:	d06b      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d149      	bne.n	80026a4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002610:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a30      	ldr	r2, [pc, #192]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 8002616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800261a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7fd ff96 	bl	800054c <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002624:	f7fd ff92 	bl	800054c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e087      	b.n	8002746 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	4b28      	ldr	r3, [pc, #160]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	019b      	lsls	r3, r3, #6
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	085b      	lsrs	r3, r3, #1
 800265a:	3b01      	subs	r3, #1
 800265c:	041b      	lsls	r3, r3, #16
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	4313      	orrs	r3, r2
 8002668:	4a1b      	ldr	r2, [pc, #108]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 800266a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800266e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a18      	ldr	r2, [pc, #96]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 8002676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800267a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7fd ff66 	bl	800054c <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002684:	f7fd ff62 	bl	800054c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e057      	b.n	8002746 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x478>
 80026a2:	e04f      	b.n	8002744 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a4:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0b      	ldr	r2, [pc, #44]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 80026aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7fd ff4c 	bl	800054c <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fd ff48 	bl	800054c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e03d      	b.n	8002746 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ca:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x4ac>
 80026d6:	e035      	b.n	8002744 <HAL_RCC_OscConfig+0x538>
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80026e0:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <HAL_RCC_OscConfig+0x544>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d028      	beq.n	8002740 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d121      	bne.n	8002740 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d11a      	bne.n	8002740 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002710:	4013      	ands	r3, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002716:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002718:	4293      	cmp	r3, r2
 800271a:	d111      	bne.n	8002740 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	085b      	lsrs	r3, r3, #1
 8002728:	3b01      	subs	r3, #1
 800272a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d107      	bne.n	8002740 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800

08002754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0d0      	b.n	800290e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800276c:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d910      	bls.n	800279c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b67      	ldr	r3, [pc, #412]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 020f 	bic.w	r2, r3, #15
 8002782:	4965      	ldr	r1, [pc, #404]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278a:	4b63      	ldr	r3, [pc, #396]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0b8      	b.n	800290e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d020      	beq.n	80027ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027b4:	4b59      	ldr	r3, [pc, #356]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4a58      	ldr	r2, [pc, #352]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 80027ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027cc:	4b53      	ldr	r3, [pc, #332]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4a52      	ldr	r2, [pc, #328]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 80027d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d8:	4b50      	ldr	r3, [pc, #320]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	494d      	ldr	r1, [pc, #308]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d040      	beq.n	8002878 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d107      	bne.n	800280e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	4b47      	ldr	r3, [pc, #284]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d115      	bne.n	8002836 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e07f      	b.n	800290e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002816:	4b41      	ldr	r3, [pc, #260]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e073      	b.n	800290e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002826:	4b3d      	ldr	r3, [pc, #244]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e06b      	b.n	800290e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002836:	4b39      	ldr	r3, [pc, #228]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f023 0203 	bic.w	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4936      	ldr	r1, [pc, #216]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 8002844:	4313      	orrs	r3, r2
 8002846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002848:	f7fd fe80 	bl	800054c <HAL_GetTick>
 800284c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	e00a      	b.n	8002866 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002850:	f7fd fe7c 	bl	800054c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	; 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e053      	b.n	800290e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	4b2d      	ldr	r3, [pc, #180]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 020c 	and.w	r2, r3, #12
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	429a      	cmp	r2, r3
 8002876:	d1eb      	bne.n	8002850 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002878:	4b27      	ldr	r3, [pc, #156]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d210      	bcs.n	80028a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b24      	ldr	r3, [pc, #144]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 020f 	bic.w	r2, r3, #15
 800288e:	4922      	ldr	r1, [pc, #136]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002896:	4b20      	ldr	r3, [pc, #128]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e032      	b.n	800290e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b4:	4b19      	ldr	r3, [pc, #100]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4916      	ldr	r1, [pc, #88]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028d2:	4b12      	ldr	r3, [pc, #72]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	490e      	ldr	r1, [pc, #56]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028e6:	f000 f821 	bl	800292c <HAL_RCC_GetSysClockFreq>
 80028ea:	4602      	mov	r2, r0
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	490a      	ldr	r1, [pc, #40]	; (8002920 <HAL_RCC_ClockConfig+0x1cc>)
 80028f8:	5ccb      	ldrb	r3, [r1, r3]
 80028fa:	fa22 f303 	lsr.w	r3, r2, r3
 80028fe:	4a09      	ldr	r2, [pc, #36]	; (8002924 <HAL_RCC_ClockConfig+0x1d0>)
 8002900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <HAL_RCC_ClockConfig+0x1d4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f008 f8c6 	bl	800aa98 <HAL_InitTick>

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40023c00 	.word	0x40023c00
 800291c:	40023800 	.word	0x40023800
 8002920:	0800bccc 	.word	0x0800bccc
 8002924:	2000011c 	.word	0x2000011c
 8002928:	20000000 	.word	0x20000000

0800292c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800292c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	2300      	movs	r3, #0
 800293e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002944:	4b67      	ldr	r3, [pc, #412]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 030c 	and.w	r3, r3, #12
 800294c:	2b08      	cmp	r3, #8
 800294e:	d00d      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0x40>
 8002950:	2b08      	cmp	r3, #8
 8002952:	f200 80bd 	bhi.w	8002ad0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0x34>
 800295a:	2b04      	cmp	r3, #4
 800295c:	d003      	beq.n	8002966 <HAL_RCC_GetSysClockFreq+0x3a>
 800295e:	e0b7      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002960:	4b61      	ldr	r3, [pc, #388]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002962:	60bb      	str	r3, [r7, #8]
      break;
 8002964:	e0b7      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002966:	4b61      	ldr	r3, [pc, #388]	; (8002aec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002968:	60bb      	str	r3, [r7, #8]
      break;
 800296a:	e0b4      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800296c:	4b5d      	ldr	r3, [pc, #372]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002974:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002976:	4b5b      	ldr	r3, [pc, #364]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d04d      	beq.n	8002a1e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002982:	4b58      	ldr	r3, [pc, #352]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	099b      	lsrs	r3, r3, #6
 8002988:	461a      	mov	r2, r3
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002992:	f04f 0100 	mov.w	r1, #0
 8002996:	ea02 0800 	and.w	r8, r2, r0
 800299a:	ea03 0901 	and.w	r9, r3, r1
 800299e:	4640      	mov	r0, r8
 80029a0:	4649      	mov	r1, r9
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	014b      	lsls	r3, r1, #5
 80029ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029b0:	0142      	lsls	r2, r0, #5
 80029b2:	4610      	mov	r0, r2
 80029b4:	4619      	mov	r1, r3
 80029b6:	ebb0 0008 	subs.w	r0, r0, r8
 80029ba:	eb61 0109 	sbc.w	r1, r1, r9
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	018b      	lsls	r3, r1, #6
 80029c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029cc:	0182      	lsls	r2, r0, #6
 80029ce:	1a12      	subs	r2, r2, r0
 80029d0:	eb63 0301 	sbc.w	r3, r3, r1
 80029d4:	f04f 0000 	mov.w	r0, #0
 80029d8:	f04f 0100 	mov.w	r1, #0
 80029dc:	00d9      	lsls	r1, r3, #3
 80029de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029e2:	00d0      	lsls	r0, r2, #3
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	eb12 0208 	adds.w	r2, r2, r8
 80029ec:	eb43 0309 	adc.w	r3, r3, r9
 80029f0:	f04f 0000 	mov.w	r0, #0
 80029f4:	f04f 0100 	mov.w	r1, #0
 80029f8:	0259      	lsls	r1, r3, #9
 80029fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80029fe:	0250      	lsls	r0, r2, #9
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	f7fd fbfe 	bl	8000210 <__aeabi_uldivmod>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	e04a      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1e:	4b31      	ldr	r3, [pc, #196]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	099b      	lsrs	r3, r3, #6
 8002a24:	461a      	mov	r2, r3
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	ea02 0400 	and.w	r4, r2, r0
 8002a36:	ea03 0501 	and.w	r5, r3, r1
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	014b      	lsls	r3, r1, #5
 8002a48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a4c:	0142      	lsls	r2, r0, #5
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4619      	mov	r1, r3
 8002a52:	1b00      	subs	r0, r0, r4
 8002a54:	eb61 0105 	sbc.w	r1, r1, r5
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	018b      	lsls	r3, r1, #6
 8002a62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a66:	0182      	lsls	r2, r0, #6
 8002a68:	1a12      	subs	r2, r2, r0
 8002a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a6e:	f04f 0000 	mov.w	r0, #0
 8002a72:	f04f 0100 	mov.w	r1, #0
 8002a76:	00d9      	lsls	r1, r3, #3
 8002a78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a7c:	00d0      	lsls	r0, r2, #3
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	1912      	adds	r2, r2, r4
 8002a84:	eb45 0303 	adc.w	r3, r5, r3
 8002a88:	f04f 0000 	mov.w	r0, #0
 8002a8c:	f04f 0100 	mov.w	r1, #0
 8002a90:	0299      	lsls	r1, r3, #10
 8002a92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a96:	0290      	lsls	r0, r2, #10
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	f7fd fbb2 	bl	8000210 <__aeabi_uldivmod>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	0c1b      	lsrs	r3, r3, #16
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002acc:	60bb      	str	r3, [r7, #8]
      break;
 8002ace:	e002      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ad2:	60bb      	str	r3, [r7, #8]
      break;
 8002ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	00f42400 	.word	0x00f42400
 8002aec:	007a1200 	.word	0x007a1200

08002af0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002af6:	681b      	ldr	r3, [r3, #0]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	2000011c 	.word	0x2000011c

08002b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b0c:	f7ff fff0 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	0a9b      	lsrs	r3, r3, #10
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4903      	ldr	r1, [pc, #12]	; (8002b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	0800bcdc 	.word	0x0800bcdc

08002b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b34:	f7ff ffdc 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	0b5b      	lsrs	r3, r3, #13
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	4903      	ldr	r1, [pc, #12]	; (8002b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b46:	5ccb      	ldrb	r3, [r1, r3]
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40023800 	.word	0x40023800
 8002b54:	0800bcdc 	.word	0x0800bcdc

08002b58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	220f      	movs	r2, #15
 8002b66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b68:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0203 	and.w	r2, r3, #3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b74:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002b8c:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	08db      	lsrs	r3, r3, #3
 8002b92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_RCC_GetClockConfig+0x60>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 020f 	and.w	r2, r3, #15
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	601a      	str	r2, [r3, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40023c00 	.word	0x40023c00

08002bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d012      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002be4:	4b69      	ldr	r3, [pc, #420]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a68      	ldr	r2, [pc, #416]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002bee:	6093      	str	r3, [r2, #8]
 8002bf0:	4b66      	ldr	r3, [pc, #408]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf8:	4964      	ldr	r1, [pc, #400]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c06:	2301      	movs	r3, #1
 8002c08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d017      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c16:	4b5d      	ldr	r3, [pc, #372]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c24:	4959      	ldr	r1, [pc, #356]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c34:	d101      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c36:	2301      	movs	r3, #1
 8002c38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c42:	2301      	movs	r3, #1
 8002c44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d017      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c52:	4b4e      	ldr	r3, [pc, #312]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	494a      	ldr	r1, [pc, #296]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c70:	d101      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c72:	2301      	movs	r3, #1
 8002c74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 808b 	beq.w	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ca0:	4b3a      	ldr	r3, [pc, #232]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	4a39      	ldr	r2, [pc, #228]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002caa:	6413      	str	r3, [r2, #64]	; 0x40
 8002cac:	4b37      	ldr	r3, [pc, #220]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cb8:	4b35      	ldr	r3, [pc, #212]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a34      	ldr	r2, [pc, #208]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc4:	f7fd fc42 	bl	800054c <HAL_GetTick>
 8002cc8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ccc:	f7fd fc3e 	bl	800054c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	; 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e357      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cde:	4b2c      	ldr	r3, [pc, #176]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cea:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d035      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d02e      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d08:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d12:	4b1e      	ldr	r3, [pc, #120]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	4a1d      	ldr	r2, [pc, #116]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d1e:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	4a1a      	ldr	r2, [pc, #104]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d2a:	4a18      	ldr	r2, [pc, #96]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d30:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d114      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fd fc06 	bl	800054c <HAL_GetTick>
 8002d40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d42:	e00a      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d44:	f7fd fc02 	bl	800054c <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e319      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0ee      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d72:	d111      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d82:	400b      	ands	r3, r1
 8002d84:	4901      	ldr	r1, [pc, #4]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
 8002d8a:	e00b      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40007000 	.word	0x40007000
 8002d94:	0ffffcff 	.word	0x0ffffcff
 8002d98:	4bb1      	ldr	r3, [pc, #708]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4ab0      	ldr	r2, [pc, #704]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002da2:	6093      	str	r3, [r2, #8]
 8002da4:	4bae      	ldr	r3, [pc, #696]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002da6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db0:	49ab      	ldr	r1, [pc, #684]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d010      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dc2:	4ba7      	ldr	r3, [pc, #668]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc8:	4aa5      	ldr	r2, [pc, #660]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002dd2:	4ba3      	ldr	r3, [pc, #652]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dd4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ddc:	49a0      	ldr	r1, [pc, #640]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002df0:	4b9b      	ldr	r3, [pc, #620]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dfe:	4998      	ldr	r1, [pc, #608]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e12:	4b93      	ldr	r3, [pc, #588]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e20:	498f      	ldr	r1, [pc, #572]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e34:	4b8a      	ldr	r3, [pc, #552]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e42:	4987      	ldr	r1, [pc, #540]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e56:	4b82      	ldr	r3, [pc, #520]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	497e      	ldr	r1, [pc, #504]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e78:	4b79      	ldr	r3, [pc, #484]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7e:	f023 0203 	bic.w	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	4976      	ldr	r1, [pc, #472]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e9a:	4b71      	ldr	r3, [pc, #452]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea0:	f023 020c 	bic.w	r2, r3, #12
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea8:	496d      	ldr	r1, [pc, #436]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ebc:	4b68      	ldr	r3, [pc, #416]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eca:	4965      	ldr	r1, [pc, #404]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ede:	4b60      	ldr	r3, [pc, #384]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eec:	495c      	ldr	r1, [pc, #368]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f00:	4b57      	ldr	r3, [pc, #348]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	4954      	ldr	r1, [pc, #336]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f22:	4b4f      	ldr	r3, [pc, #316]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	494b      	ldr	r1, [pc, #300]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f44:	4b46      	ldr	r3, [pc, #280]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f52:	4943      	ldr	r1, [pc, #268]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f66:	4b3e      	ldr	r3, [pc, #248]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f74:	493a      	ldr	r1, [pc, #232]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f88:	4b35      	ldr	r3, [pc, #212]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f96:	4932      	ldr	r1, [pc, #200]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d011      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002faa:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fb8:	4929      	ldr	r1, [pc, #164]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fc8:	d101      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff8:	4919      	ldr	r1, [pc, #100]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800300c:	4b14      	ldr	r3, [pc, #80]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003012:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800301c:	4910      	ldr	r1, [pc, #64]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d006      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 80d9 	beq.w	80031ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003038:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a08      	ldr	r2, [pc, #32]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800303e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003042:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003044:	f7fd fa82 	bl	800054c <HAL_GetTick>
 8003048:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800304a:	e00b      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800304c:	f7fd fa7e 	bl	800054c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d904      	bls.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e197      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003064:	4b6c      	ldr	r3, [pc, #432]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1ed      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d021      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003080:	2b00      	cmp	r3, #0
 8003082:	d11d      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003084:	4b64      	ldr	r3, [pc, #400]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800308a:	0c1b      	lsrs	r3, r3, #16
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003092:	4b61      	ldr	r3, [pc, #388]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003098:	0e1b      	lsrs	r3, r3, #24
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	019a      	lsls	r2, r3, #6
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	041b      	lsls	r3, r3, #16
 80030aa:	431a      	orrs	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	061b      	lsls	r3, r3, #24
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	071b      	lsls	r3, r3, #28
 80030b8:	4957      	ldr	r1, [pc, #348]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d004      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030d4:	d00a      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d02e      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ea:	d129      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030ec:	4b4a      	ldr	r3, [pc, #296]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f2:	0c1b      	lsrs	r3, r3, #16
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030fa:	4b47      	ldr	r3, [pc, #284]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003100:	0f1b      	lsrs	r3, r3, #28
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	019a      	lsls	r2, r3, #6
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	061b      	lsls	r3, r3, #24
 800311a:	431a      	orrs	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	071b      	lsls	r3, r3, #28
 8003120:	493d      	ldr	r1, [pc, #244]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003128:	4b3b      	ldr	r3, [pc, #236]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800312a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800312e:	f023 021f 	bic.w	r2, r3, #31
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	3b01      	subs	r3, #1
 8003138:	4937      	ldr	r1, [pc, #220]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d01d      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800314c:	4b32      	ldr	r3, [pc, #200]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800314e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003152:	0e1b      	lsrs	r3, r3, #24
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800315a:	4b2f      	ldr	r3, [pc, #188]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800315c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003160:	0f1b      	lsrs	r3, r3, #28
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	019a      	lsls	r2, r3, #6
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	041b      	lsls	r3, r3, #16
 8003174:	431a      	orrs	r2, r3
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	431a      	orrs	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	071b      	lsls	r3, r3, #28
 8003180:	4925      	ldr	r1, [pc, #148]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d011      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	019a      	lsls	r2, r3, #6
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	041b      	lsls	r3, r3, #16
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	061b      	lsls	r3, r3, #24
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	071b      	lsls	r3, r3, #28
 80031b0:	4919      	ldr	r1, [pc, #100]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031b8:	4b17      	ldr	r3, [pc, #92]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a16      	ldr	r2, [pc, #88]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c4:	f7fd f9c2 	bl	800054c <HAL_GetTick>
 80031c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031cc:	f7fd f9be 	bl	800054c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b64      	cmp	r3, #100	; 0x64
 80031d8:	d901      	bls.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e0d7      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031de:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	f040 80cd 	bne.w	800338c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031f2:	4b09      	ldr	r3, [pc, #36]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a08      	ldr	r2, [pc, #32]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031fe:	f7fd f9a5 	bl	800054c <HAL_GetTick>
 8003202:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003204:	e00a      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003206:	f7fd f9a1 	bl	800054c <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b64      	cmp	r3, #100	; 0x64
 8003212:	d903      	bls.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e0ba      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003218:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800321c:	4b5e      	ldr	r3, [pc, #376]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003228:	d0ed      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003246:	2b00      	cmp	r3, #0
 8003248:	d02e      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d12a      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003252:	4b51      	ldr	r3, [pc, #324]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003258:	0c1b      	lsrs	r3, r3, #16
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003260:	4b4d      	ldr	r3, [pc, #308]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	0f1b      	lsrs	r3, r3, #28
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	019a      	lsls	r2, r3, #6
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	041b      	lsls	r3, r3, #16
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	061b      	lsls	r3, r3, #24
 8003280:	431a      	orrs	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	071b      	lsls	r3, r3, #28
 8003286:	4944      	ldr	r1, [pc, #272]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800328e:	4b42      	ldr	r3, [pc, #264]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003294:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	3b01      	subs	r3, #1
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	493d      	ldr	r1, [pc, #244]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d022      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032bc:	d11d      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032be:	4b36      	ldr	r3, [pc, #216]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c4:	0e1b      	lsrs	r3, r3, #24
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032cc:	4b32      	ldr	r3, [pc, #200]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	0f1b      	lsrs	r3, r3, #28
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	019a      	lsls	r2, r3, #6
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	041b      	lsls	r3, r3, #16
 80032e6:	431a      	orrs	r2, r3
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	061b      	lsls	r3, r3, #24
 80032ec:	431a      	orrs	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	071b      	lsls	r3, r3, #28
 80032f2:	4929      	ldr	r1, [pc, #164]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d028      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003306:	4b24      	ldr	r3, [pc, #144]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330c:	0e1b      	lsrs	r3, r3, #24
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003314:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331a:	0c1b      	lsrs	r3, r3, #16
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	019a      	lsls	r2, r3, #6
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	041b      	lsls	r3, r3, #16
 800332c:	431a      	orrs	r2, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	061b      	lsls	r3, r3, #24
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	071b      	lsls	r3, r3, #28
 800333a:	4917      	ldr	r1, [pc, #92]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003342:	4b15      	ldr	r3, [pc, #84]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003348:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	4911      	ldr	r1, [pc, #68]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003358:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0e      	ldr	r2, [pc, #56]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800335e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003362:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003364:	f7fd f8f2 	bl	800054c <HAL_GetTick>
 8003368:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800336c:	f7fd f8ee 	bl	800054c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e007      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800338a:	d1ef      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800

0800339c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e09d      	b.n	80034ea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d108      	bne.n	80033c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033be:	d009      	beq.n	80033d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	61da      	str	r2, [r3, #28]
 80033c6:	e005      	b.n	80033d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f007 faa4 	bl	800a93c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800340a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003414:	d902      	bls.n	800341c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	e002      	b.n	8003422 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800341c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003420:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800342a:	d007      	beq.n	800343c <HAL_SPI_Init+0xa0>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003434:	d002      	beq.n	800343c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347e:	ea42 0103 	orr.w	r1, r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003486:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	0c1b      	lsrs	r3, r3, #16
 8003498:	f003 0204 	and.w	r2, r3, #4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80034b8:	ea42 0103 	orr.w	r1, r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69da      	ldr	r2, [r3, #28]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e049      	b.n	8003598 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d106      	bne.n	800351e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f841 	bl	80035a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2202      	movs	r2, #2
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3304      	adds	r3, #4
 800352e:	4619      	mov	r1, r3
 8003530:	4610      	mov	r0, r2
 8003532:	f000 f9ff 	bl	8003934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d001      	beq.n	80035cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e054      	b.n	8003676 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a26      	ldr	r2, [pc, #152]	; (8003684 <HAL_TIM_Base_Start_IT+0xd0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d022      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x80>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f6:	d01d      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x80>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a22      	ldr	r2, [pc, #136]	; (8003688 <HAL_TIM_Base_Start_IT+0xd4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d018      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x80>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a21      	ldr	r2, [pc, #132]	; (800368c <HAL_TIM_Base_Start_IT+0xd8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d013      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x80>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <HAL_TIM_Base_Start_IT+0xdc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00e      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x80>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1e      	ldr	r2, [pc, #120]	; (8003694 <HAL_TIM_Base_Start_IT+0xe0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d009      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x80>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1c      	ldr	r2, [pc, #112]	; (8003698 <HAL_TIM_Base_Start_IT+0xe4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d004      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x80>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1b      	ldr	r2, [pc, #108]	; (800369c <HAL_TIM_Base_Start_IT+0xe8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d115      	bne.n	8003660 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <HAL_TIM_Base_Start_IT+0xec>)
 800363c:	4013      	ands	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b06      	cmp	r3, #6
 8003644:	d015      	beq.n	8003672 <HAL_TIM_Base_Start_IT+0xbe>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364c:	d011      	beq.n	8003672 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0201 	orr.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365e:	e008      	b.n	8003672 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	e000      	b.n	8003674 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003672:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40010000 	.word	0x40010000
 8003688:	40000400 	.word	0x40000400
 800368c:	40000800 	.word	0x40000800
 8003690:	40000c00 	.word	0x40000c00
 8003694:	40010400 	.word	0x40010400
 8003698:	40014000 	.word	0x40014000
 800369c:	40001800 	.word	0x40001800
 80036a0:	00010007 	.word	0x00010007

080036a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d122      	bne.n	8003700 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d11b      	bne.n	8003700 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0202 	mvn.w	r2, #2
 80036d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f905 	bl	80038f6 <HAL_TIM_IC_CaptureCallback>
 80036ec:	e005      	b.n	80036fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8f7 	bl	80038e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f908 	bl	800390a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b04      	cmp	r3, #4
 800370c:	d122      	bne.n	8003754 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b04      	cmp	r3, #4
 800371a:	d11b      	bne.n	8003754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0204 	mvn.w	r2, #4
 8003724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2202      	movs	r2, #2
 800372a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f8db 	bl	80038f6 <HAL_TIM_IC_CaptureCallback>
 8003740:	e005      	b.n	800374e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f8cd 	bl	80038e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f8de 	bl	800390a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b08      	cmp	r3, #8
 8003760:	d122      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b08      	cmp	r3, #8
 800376e:	d11b      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0208 	mvn.w	r2, #8
 8003778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2204      	movs	r2, #4
 800377e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f8b1 	bl	80038f6 <HAL_TIM_IC_CaptureCallback>
 8003794:	e005      	b.n	80037a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f8a3 	bl	80038e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f8b4 	bl	800390a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f003 0310 	and.w	r3, r3, #16
 80037b2:	2b10      	cmp	r3, #16
 80037b4:	d122      	bne.n	80037fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b10      	cmp	r3, #16
 80037c2:	d11b      	bne.n	80037fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0210 	mvn.w	r2, #16
 80037cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2208      	movs	r2, #8
 80037d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f887 	bl	80038f6 <HAL_TIM_IC_CaptureCallback>
 80037e8:	e005      	b.n	80037f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f879 	bl	80038e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f88a 	bl	800390a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b01      	cmp	r3, #1
 8003808:	d10e      	bne.n	8003828 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b01      	cmp	r3, #1
 8003816:	d107      	bne.n	8003828 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0201 	mvn.w	r2, #1
 8003820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f007 f806 	bl	800a834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003832:	2b80      	cmp	r3, #128	; 0x80
 8003834:	d10e      	bne.n	8003854 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003840:	2b80      	cmp	r3, #128	; 0x80
 8003842:	d107      	bne.n	8003854 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800384c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f91a 	bl	8003a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003862:	d10e      	bne.n	8003882 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386e:	2b80      	cmp	r3, #128	; 0x80
 8003870:	d107      	bne.n	8003882 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800387a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f90d 	bl	8003a9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388c:	2b40      	cmp	r3, #64	; 0x40
 800388e:	d10e      	bne.n	80038ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389a:	2b40      	cmp	r3, #64	; 0x40
 800389c:	d107      	bne.n	80038ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f838 	bl	800391e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d10e      	bne.n	80038da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d107      	bne.n	80038da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f06f 0220 	mvn.w	r2, #32
 80038d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f8cd 	bl	8003a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a40      	ldr	r2, [pc, #256]	; (8003a48 <TIM_Base_SetConfig+0x114>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003952:	d00f      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a3d      	ldr	r2, [pc, #244]	; (8003a4c <TIM_Base_SetConfig+0x118>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00b      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a3c      	ldr	r2, [pc, #240]	; (8003a50 <TIM_Base_SetConfig+0x11c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d007      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a3b      	ldr	r2, [pc, #236]	; (8003a54 <TIM_Base_SetConfig+0x120>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a3a      	ldr	r2, [pc, #232]	; (8003a58 <TIM_Base_SetConfig+0x124>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d108      	bne.n	8003986 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a2f      	ldr	r2, [pc, #188]	; (8003a48 <TIM_Base_SetConfig+0x114>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d02b      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003994:	d027      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a2c      	ldr	r2, [pc, #176]	; (8003a4c <TIM_Base_SetConfig+0x118>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d023      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a2b      	ldr	r2, [pc, #172]	; (8003a50 <TIM_Base_SetConfig+0x11c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01f      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a2a      	ldr	r2, [pc, #168]	; (8003a54 <TIM_Base_SetConfig+0x120>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d01b      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a29      	ldr	r2, [pc, #164]	; (8003a58 <TIM_Base_SetConfig+0x124>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d017      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a28      	ldr	r2, [pc, #160]	; (8003a5c <TIM_Base_SetConfig+0x128>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a27      	ldr	r2, [pc, #156]	; (8003a60 <TIM_Base_SetConfig+0x12c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00f      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a26      	ldr	r2, [pc, #152]	; (8003a64 <TIM_Base_SetConfig+0x130>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00b      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a25      	ldr	r2, [pc, #148]	; (8003a68 <TIM_Base_SetConfig+0x134>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a24      	ldr	r2, [pc, #144]	; (8003a6c <TIM_Base_SetConfig+0x138>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d003      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a23      	ldr	r2, [pc, #140]	; (8003a70 <TIM_Base_SetConfig+0x13c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d108      	bne.n	80039f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <TIM_Base_SetConfig+0x114>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d003      	beq.n	8003a2c <TIM_Base_SetConfig+0xf8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a0c      	ldr	r2, [pc, #48]	; (8003a58 <TIM_Base_SetConfig+0x124>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d103      	bne.n	8003a34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	615a      	str	r2, [r3, #20]
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40000400 	.word	0x40000400
 8003a50:	40000800 	.word	0x40000800
 8003a54:	40000c00 	.word	0x40000c00
 8003a58:	40010400 	.word	0x40010400
 8003a5c:	40014000 	.word	0x40014000
 8003a60:	40014400 	.word	0x40014400
 8003a64:	40014800 	.word	0x40014800
 8003a68:	40001800 	.word	0x40001800
 8003a6c:	40001c00 	.word	0x40001c00
 8003a70:	40002000 	.word	0x40002000

08003a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e040      	b.n	8003b44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f006 ff94 	bl	800aa00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2224      	movs	r2, #36	; 0x24
 8003adc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0201 	bic.w	r2, r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fa38 	bl	8003f64 <UART_SetConfig>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e022      	b.n	8003b44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fc8e 	bl	8004428 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fd15 	bl	800456c <UART_CheckIdleState>
 8003b42:	4603      	mov	r3, r0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b6c:	69fa      	ldr	r2, [r7, #28]
 8003b6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b72:	4013      	ands	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d113      	bne.n	8003ba4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f003 0320 	and.w	r3, r3, #32
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00e      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d009      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 81b9 	beq.w	8003f0c <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
      }
      return;
 8003ba2:	e1b3      	b.n	8003f0c <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80e3 	beq.w	8003d72 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d105      	bne.n	8003bc2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4ba5      	ldr	r3, [pc, #660]	; (8003e50 <HAL_UART_IRQHandler+0x304>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80d8 	beq.w	8003d72 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d010      	beq.n	8003bee <HAL_UART_IRQHandler+0xa2>
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00b      	beq.n	8003bee <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003be4:	f043 0201 	orr.w	r2, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d010      	beq.n	8003c1a <HAL_UART_IRQHandler+0xce>
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00b      	beq.n	8003c1a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2202      	movs	r2, #2
 8003c08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c10:	f043 0204 	orr.w	r2, r3, #4
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d010      	beq.n	8003c46 <HAL_UART_IRQHandler+0xfa>
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00b      	beq.n	8003c46 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2204      	movs	r2, #4
 8003c34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c3c:	f043 0202 	orr.w	r2, r3, #2
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d015      	beq.n	8003c7c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d104      	bne.n	8003c64 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00b      	beq.n	8003c7c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2208      	movs	r2, #8
 8003c6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c72:	f043 0208 	orr.w	r2, r3, #8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d011      	beq.n	8003caa <HAL_UART_IRQHandler+0x15e>
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00c      	beq.n	8003caa <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 812d 	beq.w	8003f10 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00c      	beq.n	8003cda <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d007      	beq.n	8003cda <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ce0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cec:	2b40      	cmp	r3, #64	; 0x40
 8003cee:	d004      	beq.n	8003cfa <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d031      	beq.n	8003d5e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 fce5 	bl	80046ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0a:	2b40      	cmp	r3, #64	; 0x40
 8003d0c:	d123      	bne.n	8003d56 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d1c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d013      	beq.n	8003d4e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	4a4a      	ldr	r2, [pc, #296]	; (8003e54 <HAL_UART_IRQHandler+0x308>)
 8003d2c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fc fd8c 	bl	8000850 <HAL_DMA_Abort_IT>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d017      	beq.n	8003d6e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4c:	e00f      	b.n	8003d6e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f8f2 	bl	8003f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d54:	e00b      	b.n	8003d6e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f8ee 	bl	8003f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5c:	e007      	b.n	8003d6e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f8ea 	bl	8003f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003d6c:	e0d0      	b.n	8003f10 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6e:	bf00      	nop
    return;
 8003d70:	e0ce      	b.n	8003f10 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	f040 80a7 	bne.w	8003eca <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80a1 	beq.w	8003eca <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 809b 	beq.w	8003eca <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2210      	movs	r2, #16
 8003d9a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da6:	2b40      	cmp	r3, #64	; 0x40
 8003da8:	d156      	bne.n	8003e58 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8003db4:	893b      	ldrh	r3, [r7, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80ac 	beq.w	8003f14 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003dc2:	893a      	ldrh	r2, [r7, #8]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	f080 80a5 	bcs.w	8003f14 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	893a      	ldrh	r2, [r7, #8]
 8003dce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ddc:	d02a      	beq.n	8003e34 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0201 	bic.w	r2, r2, #1
 8003dfc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e0c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0210 	bic.w	r2, r2, #16
 8003e28:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fc fc9e 	bl	8000770 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	4619      	mov	r1, r3
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f87f 	bl	8003f4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e4e:	e061      	b.n	8003f14 <HAL_UART_IRQHandler+0x3c8>
 8003e50:	04000120 	.word	0x04000120
 8003e54:	08004729 	.word	0x08004729
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d050      	beq.n	8003f18 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8003e76:	897b      	ldrh	r3, [r7, #10]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d04d      	beq.n	8003f18 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e8a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0201 	bic.w	r2, r2, #1
 8003e9a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0210 	bic.w	r2, r2, #16
 8003ebc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ebe:	897b      	ldrh	r3, [r7, #10]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f842 	bl	8003f4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ec8:	e026      	b.n	8003f18 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00d      	beq.n	8003ef0 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01a      	beq.n	8003f1c <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	4798      	blx	r3
    }
    return;
 8003eee:	e015      	b.n	8003f1c <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d011      	beq.n	8003f1e <HAL_UART_IRQHandler+0x3d2>
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00c      	beq.n	8003f1e <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fc25 	bl	8004754 <UART_EndTransmit_IT>
    return;
 8003f0a:	e008      	b.n	8003f1e <HAL_UART_IRQHandler+0x3d2>
      return;
 8003f0c:	bf00      	nop
 8003f0e:	e006      	b.n	8003f1e <HAL_UART_IRQHandler+0x3d2>
    return;
 8003f10:	bf00      	nop
 8003f12:	e004      	b.n	8003f1e <HAL_UART_IRQHandler+0x3d2>
      return;
 8003f14:	bf00      	nop
 8003f16:	e002      	b.n	8003f1e <HAL_UART_IRQHandler+0x3d2>
      return;
 8003f18:	bf00      	nop
 8003f1a:	e000      	b.n	8003f1e <HAL_UART_IRQHandler+0x3d2>
    return;
 8003f1c:	bf00      	nop
  }

}
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4ba7      	ldr	r3, [pc, #668]	; (800422c <UART_SetConfig+0x2c8>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	6979      	ldr	r1, [r7, #20]
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a95      	ldr	r2, [pc, #596]	; (8004230 <UART_SetConfig+0x2cc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d120      	bne.n	8004022 <UART_SetConfig+0xbe>
 8003fe0:	4b94      	ldr	r3, [pc, #592]	; (8004234 <UART_SetConfig+0x2d0>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d816      	bhi.n	800401c <UART_SetConfig+0xb8>
 8003fee:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <UART_SetConfig+0x90>)
 8003ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff4:	08004005 	.word	0x08004005
 8003ff8:	08004011 	.word	0x08004011
 8003ffc:	0800400b 	.word	0x0800400b
 8004000:	08004017 	.word	0x08004017
 8004004:	2301      	movs	r3, #1
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e14f      	b.n	80042aa <UART_SetConfig+0x346>
 800400a:	2302      	movs	r3, #2
 800400c:	77fb      	strb	r3, [r7, #31]
 800400e:	e14c      	b.n	80042aa <UART_SetConfig+0x346>
 8004010:	2304      	movs	r3, #4
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	e149      	b.n	80042aa <UART_SetConfig+0x346>
 8004016:	2308      	movs	r3, #8
 8004018:	77fb      	strb	r3, [r7, #31]
 800401a:	e146      	b.n	80042aa <UART_SetConfig+0x346>
 800401c:	2310      	movs	r3, #16
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	e143      	b.n	80042aa <UART_SetConfig+0x346>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a84      	ldr	r2, [pc, #528]	; (8004238 <UART_SetConfig+0x2d4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d132      	bne.n	8004092 <UART_SetConfig+0x12e>
 800402c:	4b81      	ldr	r3, [pc, #516]	; (8004234 <UART_SetConfig+0x2d0>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b0c      	cmp	r3, #12
 8004038:	d828      	bhi.n	800408c <UART_SetConfig+0x128>
 800403a:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <UART_SetConfig+0xdc>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	08004075 	.word	0x08004075
 8004044:	0800408d 	.word	0x0800408d
 8004048:	0800408d 	.word	0x0800408d
 800404c:	0800408d 	.word	0x0800408d
 8004050:	08004081 	.word	0x08004081
 8004054:	0800408d 	.word	0x0800408d
 8004058:	0800408d 	.word	0x0800408d
 800405c:	0800408d 	.word	0x0800408d
 8004060:	0800407b 	.word	0x0800407b
 8004064:	0800408d 	.word	0x0800408d
 8004068:	0800408d 	.word	0x0800408d
 800406c:	0800408d 	.word	0x0800408d
 8004070:	08004087 	.word	0x08004087
 8004074:	2300      	movs	r3, #0
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e117      	b.n	80042aa <UART_SetConfig+0x346>
 800407a:	2302      	movs	r3, #2
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e114      	b.n	80042aa <UART_SetConfig+0x346>
 8004080:	2304      	movs	r3, #4
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e111      	b.n	80042aa <UART_SetConfig+0x346>
 8004086:	2308      	movs	r3, #8
 8004088:	77fb      	strb	r3, [r7, #31]
 800408a:	e10e      	b.n	80042aa <UART_SetConfig+0x346>
 800408c:	2310      	movs	r3, #16
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e10b      	b.n	80042aa <UART_SetConfig+0x346>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a69      	ldr	r2, [pc, #420]	; (800423c <UART_SetConfig+0x2d8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d120      	bne.n	80040de <UART_SetConfig+0x17a>
 800409c:	4b65      	ldr	r3, [pc, #404]	; (8004234 <UART_SetConfig+0x2d0>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040a6:	2b30      	cmp	r3, #48	; 0x30
 80040a8:	d013      	beq.n	80040d2 <UART_SetConfig+0x16e>
 80040aa:	2b30      	cmp	r3, #48	; 0x30
 80040ac:	d814      	bhi.n	80040d8 <UART_SetConfig+0x174>
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d009      	beq.n	80040c6 <UART_SetConfig+0x162>
 80040b2:	2b20      	cmp	r3, #32
 80040b4:	d810      	bhi.n	80040d8 <UART_SetConfig+0x174>
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <UART_SetConfig+0x15c>
 80040ba:	2b10      	cmp	r3, #16
 80040bc:	d006      	beq.n	80040cc <UART_SetConfig+0x168>
 80040be:	e00b      	b.n	80040d8 <UART_SetConfig+0x174>
 80040c0:	2300      	movs	r3, #0
 80040c2:	77fb      	strb	r3, [r7, #31]
 80040c4:	e0f1      	b.n	80042aa <UART_SetConfig+0x346>
 80040c6:	2302      	movs	r3, #2
 80040c8:	77fb      	strb	r3, [r7, #31]
 80040ca:	e0ee      	b.n	80042aa <UART_SetConfig+0x346>
 80040cc:	2304      	movs	r3, #4
 80040ce:	77fb      	strb	r3, [r7, #31]
 80040d0:	e0eb      	b.n	80042aa <UART_SetConfig+0x346>
 80040d2:	2308      	movs	r3, #8
 80040d4:	77fb      	strb	r3, [r7, #31]
 80040d6:	e0e8      	b.n	80042aa <UART_SetConfig+0x346>
 80040d8:	2310      	movs	r3, #16
 80040da:	77fb      	strb	r3, [r7, #31]
 80040dc:	e0e5      	b.n	80042aa <UART_SetConfig+0x346>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a57      	ldr	r2, [pc, #348]	; (8004240 <UART_SetConfig+0x2dc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d120      	bne.n	800412a <UART_SetConfig+0x1c6>
 80040e8:	4b52      	ldr	r3, [pc, #328]	; (8004234 <UART_SetConfig+0x2d0>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040f2:	2bc0      	cmp	r3, #192	; 0xc0
 80040f4:	d013      	beq.n	800411e <UART_SetConfig+0x1ba>
 80040f6:	2bc0      	cmp	r3, #192	; 0xc0
 80040f8:	d814      	bhi.n	8004124 <UART_SetConfig+0x1c0>
 80040fa:	2b80      	cmp	r3, #128	; 0x80
 80040fc:	d009      	beq.n	8004112 <UART_SetConfig+0x1ae>
 80040fe:	2b80      	cmp	r3, #128	; 0x80
 8004100:	d810      	bhi.n	8004124 <UART_SetConfig+0x1c0>
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <UART_SetConfig+0x1a8>
 8004106:	2b40      	cmp	r3, #64	; 0x40
 8004108:	d006      	beq.n	8004118 <UART_SetConfig+0x1b4>
 800410a:	e00b      	b.n	8004124 <UART_SetConfig+0x1c0>
 800410c:	2300      	movs	r3, #0
 800410e:	77fb      	strb	r3, [r7, #31]
 8004110:	e0cb      	b.n	80042aa <UART_SetConfig+0x346>
 8004112:	2302      	movs	r3, #2
 8004114:	77fb      	strb	r3, [r7, #31]
 8004116:	e0c8      	b.n	80042aa <UART_SetConfig+0x346>
 8004118:	2304      	movs	r3, #4
 800411a:	77fb      	strb	r3, [r7, #31]
 800411c:	e0c5      	b.n	80042aa <UART_SetConfig+0x346>
 800411e:	2308      	movs	r3, #8
 8004120:	77fb      	strb	r3, [r7, #31]
 8004122:	e0c2      	b.n	80042aa <UART_SetConfig+0x346>
 8004124:	2310      	movs	r3, #16
 8004126:	77fb      	strb	r3, [r7, #31]
 8004128:	e0bf      	b.n	80042aa <UART_SetConfig+0x346>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a45      	ldr	r2, [pc, #276]	; (8004244 <UART_SetConfig+0x2e0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d125      	bne.n	8004180 <UART_SetConfig+0x21c>
 8004134:	4b3f      	ldr	r3, [pc, #252]	; (8004234 <UART_SetConfig+0x2d0>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004142:	d017      	beq.n	8004174 <UART_SetConfig+0x210>
 8004144:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004148:	d817      	bhi.n	800417a <UART_SetConfig+0x216>
 800414a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414e:	d00b      	beq.n	8004168 <UART_SetConfig+0x204>
 8004150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004154:	d811      	bhi.n	800417a <UART_SetConfig+0x216>
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <UART_SetConfig+0x1fe>
 800415a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800415e:	d006      	beq.n	800416e <UART_SetConfig+0x20a>
 8004160:	e00b      	b.n	800417a <UART_SetConfig+0x216>
 8004162:	2300      	movs	r3, #0
 8004164:	77fb      	strb	r3, [r7, #31]
 8004166:	e0a0      	b.n	80042aa <UART_SetConfig+0x346>
 8004168:	2302      	movs	r3, #2
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e09d      	b.n	80042aa <UART_SetConfig+0x346>
 800416e:	2304      	movs	r3, #4
 8004170:	77fb      	strb	r3, [r7, #31]
 8004172:	e09a      	b.n	80042aa <UART_SetConfig+0x346>
 8004174:	2308      	movs	r3, #8
 8004176:	77fb      	strb	r3, [r7, #31]
 8004178:	e097      	b.n	80042aa <UART_SetConfig+0x346>
 800417a:	2310      	movs	r3, #16
 800417c:	77fb      	strb	r3, [r7, #31]
 800417e:	e094      	b.n	80042aa <UART_SetConfig+0x346>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a30      	ldr	r2, [pc, #192]	; (8004248 <UART_SetConfig+0x2e4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d125      	bne.n	80041d6 <UART_SetConfig+0x272>
 800418a:	4b2a      	ldr	r3, [pc, #168]	; (8004234 <UART_SetConfig+0x2d0>)
 800418c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004190:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004194:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004198:	d017      	beq.n	80041ca <UART_SetConfig+0x266>
 800419a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800419e:	d817      	bhi.n	80041d0 <UART_SetConfig+0x26c>
 80041a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a4:	d00b      	beq.n	80041be <UART_SetConfig+0x25a>
 80041a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041aa:	d811      	bhi.n	80041d0 <UART_SetConfig+0x26c>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <UART_SetConfig+0x254>
 80041b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b4:	d006      	beq.n	80041c4 <UART_SetConfig+0x260>
 80041b6:	e00b      	b.n	80041d0 <UART_SetConfig+0x26c>
 80041b8:	2301      	movs	r3, #1
 80041ba:	77fb      	strb	r3, [r7, #31]
 80041bc:	e075      	b.n	80042aa <UART_SetConfig+0x346>
 80041be:	2302      	movs	r3, #2
 80041c0:	77fb      	strb	r3, [r7, #31]
 80041c2:	e072      	b.n	80042aa <UART_SetConfig+0x346>
 80041c4:	2304      	movs	r3, #4
 80041c6:	77fb      	strb	r3, [r7, #31]
 80041c8:	e06f      	b.n	80042aa <UART_SetConfig+0x346>
 80041ca:	2308      	movs	r3, #8
 80041cc:	77fb      	strb	r3, [r7, #31]
 80041ce:	e06c      	b.n	80042aa <UART_SetConfig+0x346>
 80041d0:	2310      	movs	r3, #16
 80041d2:	77fb      	strb	r3, [r7, #31]
 80041d4:	e069      	b.n	80042aa <UART_SetConfig+0x346>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1c      	ldr	r2, [pc, #112]	; (800424c <UART_SetConfig+0x2e8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d137      	bne.n	8004250 <UART_SetConfig+0x2ec>
 80041e0:	4b14      	ldr	r3, [pc, #80]	; (8004234 <UART_SetConfig+0x2d0>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041ee:	d017      	beq.n	8004220 <UART_SetConfig+0x2bc>
 80041f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041f4:	d817      	bhi.n	8004226 <UART_SetConfig+0x2c2>
 80041f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041fa:	d00b      	beq.n	8004214 <UART_SetConfig+0x2b0>
 80041fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004200:	d811      	bhi.n	8004226 <UART_SetConfig+0x2c2>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <UART_SetConfig+0x2aa>
 8004206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420a:	d006      	beq.n	800421a <UART_SetConfig+0x2b6>
 800420c:	e00b      	b.n	8004226 <UART_SetConfig+0x2c2>
 800420e:	2300      	movs	r3, #0
 8004210:	77fb      	strb	r3, [r7, #31]
 8004212:	e04a      	b.n	80042aa <UART_SetConfig+0x346>
 8004214:	2302      	movs	r3, #2
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e047      	b.n	80042aa <UART_SetConfig+0x346>
 800421a:	2304      	movs	r3, #4
 800421c:	77fb      	strb	r3, [r7, #31]
 800421e:	e044      	b.n	80042aa <UART_SetConfig+0x346>
 8004220:	2308      	movs	r3, #8
 8004222:	77fb      	strb	r3, [r7, #31]
 8004224:	e041      	b.n	80042aa <UART_SetConfig+0x346>
 8004226:	2310      	movs	r3, #16
 8004228:	77fb      	strb	r3, [r7, #31]
 800422a:	e03e      	b.n	80042aa <UART_SetConfig+0x346>
 800422c:	efff69f3 	.word	0xefff69f3
 8004230:	40011000 	.word	0x40011000
 8004234:	40023800 	.word	0x40023800
 8004238:	40004400 	.word	0x40004400
 800423c:	40004800 	.word	0x40004800
 8004240:	40004c00 	.word	0x40004c00
 8004244:	40005000 	.word	0x40005000
 8004248:	40011400 	.word	0x40011400
 800424c:	40007800 	.word	0x40007800
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a71      	ldr	r2, [pc, #452]	; (800441c <UART_SetConfig+0x4b8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d125      	bne.n	80042a6 <UART_SetConfig+0x342>
 800425a:	4b71      	ldr	r3, [pc, #452]	; (8004420 <UART_SetConfig+0x4bc>)
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004260:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004264:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004268:	d017      	beq.n	800429a <UART_SetConfig+0x336>
 800426a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800426e:	d817      	bhi.n	80042a0 <UART_SetConfig+0x33c>
 8004270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004274:	d00b      	beq.n	800428e <UART_SetConfig+0x32a>
 8004276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427a:	d811      	bhi.n	80042a0 <UART_SetConfig+0x33c>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <UART_SetConfig+0x324>
 8004280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004284:	d006      	beq.n	8004294 <UART_SetConfig+0x330>
 8004286:	e00b      	b.n	80042a0 <UART_SetConfig+0x33c>
 8004288:	2300      	movs	r3, #0
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e00d      	b.n	80042aa <UART_SetConfig+0x346>
 800428e:	2302      	movs	r3, #2
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e00a      	b.n	80042aa <UART_SetConfig+0x346>
 8004294:	2304      	movs	r3, #4
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e007      	b.n	80042aa <UART_SetConfig+0x346>
 800429a:	2308      	movs	r3, #8
 800429c:	77fb      	strb	r3, [r7, #31]
 800429e:	e004      	b.n	80042aa <UART_SetConfig+0x346>
 80042a0:	2310      	movs	r3, #16
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e001      	b.n	80042aa <UART_SetConfig+0x346>
 80042a6:	2310      	movs	r3, #16
 80042a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b2:	d15b      	bne.n	800436c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80042b4:	7ffb      	ldrb	r3, [r7, #31]
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d827      	bhi.n	800430a <UART_SetConfig+0x3a6>
 80042ba:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <UART_SetConfig+0x35c>)
 80042bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c0:	080042e5 	.word	0x080042e5
 80042c4:	080042ed 	.word	0x080042ed
 80042c8:	080042f5 	.word	0x080042f5
 80042cc:	0800430b 	.word	0x0800430b
 80042d0:	080042fb 	.word	0x080042fb
 80042d4:	0800430b 	.word	0x0800430b
 80042d8:	0800430b 	.word	0x0800430b
 80042dc:	0800430b 	.word	0x0800430b
 80042e0:	08004303 	.word	0x08004303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e4:	f7fe fc10 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 80042e8:	61b8      	str	r0, [r7, #24]
        break;
 80042ea:	e013      	b.n	8004314 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042ec:	f7fe fc20 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 80042f0:	61b8      	str	r0, [r7, #24]
        break;
 80042f2:	e00f      	b.n	8004314 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f4:	4b4b      	ldr	r3, [pc, #300]	; (8004424 <UART_SetConfig+0x4c0>)
 80042f6:	61bb      	str	r3, [r7, #24]
        break;
 80042f8:	e00c      	b.n	8004314 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042fa:	f7fe fb17 	bl	800292c <HAL_RCC_GetSysClockFreq>
 80042fe:	61b8      	str	r0, [r7, #24]
        break;
 8004300:	e008      	b.n	8004314 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004306:	61bb      	str	r3, [r7, #24]
        break;
 8004308:	e004      	b.n	8004314 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	77bb      	strb	r3, [r7, #30]
        break;
 8004312:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d074      	beq.n	8004404 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	005a      	lsls	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	085b      	lsrs	r3, r3, #1
 8004324:	441a      	add	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	fbb2 f3f3 	udiv	r3, r2, r3
 800432e:	b29b      	uxth	r3, r3
 8004330:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	2b0f      	cmp	r3, #15
 8004336:	d916      	bls.n	8004366 <UART_SetConfig+0x402>
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433e:	d212      	bcs.n	8004366 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	b29b      	uxth	r3, r3
 8004344:	f023 030f 	bic.w	r3, r3, #15
 8004348:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	085b      	lsrs	r3, r3, #1
 800434e:	b29b      	uxth	r3, r3
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	b29a      	uxth	r2, r3
 8004356:	89fb      	ldrh	r3, [r7, #14]
 8004358:	4313      	orrs	r3, r2
 800435a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	89fa      	ldrh	r2, [r7, #14]
 8004362:	60da      	str	r2, [r3, #12]
 8004364:	e04e      	b.n	8004404 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	77bb      	strb	r3, [r7, #30]
 800436a:	e04b      	b.n	8004404 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800436c:	7ffb      	ldrb	r3, [r7, #31]
 800436e:	2b08      	cmp	r3, #8
 8004370:	d827      	bhi.n	80043c2 <UART_SetConfig+0x45e>
 8004372:	a201      	add	r2, pc, #4	; (adr r2, 8004378 <UART_SetConfig+0x414>)
 8004374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004378:	0800439d 	.word	0x0800439d
 800437c:	080043a5 	.word	0x080043a5
 8004380:	080043ad 	.word	0x080043ad
 8004384:	080043c3 	.word	0x080043c3
 8004388:	080043b3 	.word	0x080043b3
 800438c:	080043c3 	.word	0x080043c3
 8004390:	080043c3 	.word	0x080043c3
 8004394:	080043c3 	.word	0x080043c3
 8004398:	080043bb 	.word	0x080043bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800439c:	f7fe fbb4 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 80043a0:	61b8      	str	r0, [r7, #24]
        break;
 80043a2:	e013      	b.n	80043cc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043a4:	f7fe fbc4 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 80043a8:	61b8      	str	r0, [r7, #24]
        break;
 80043aa:	e00f      	b.n	80043cc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043ac:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <UART_SetConfig+0x4c0>)
 80043ae:	61bb      	str	r3, [r7, #24]
        break;
 80043b0:	e00c      	b.n	80043cc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043b2:	f7fe fabb 	bl	800292c <HAL_RCC_GetSysClockFreq>
 80043b6:	61b8      	str	r0, [r7, #24]
        break;
 80043b8:	e008      	b.n	80043cc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043be:	61bb      	str	r3, [r7, #24]
        break;
 80043c0:	e004      	b.n	80043cc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	77bb      	strb	r3, [r7, #30]
        break;
 80043ca:	bf00      	nop
    }

    if (pclk != 0U)
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d018      	beq.n	8004404 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	085a      	lsrs	r2, r3, #1
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	441a      	add	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b0f      	cmp	r3, #15
 80043ec:	d908      	bls.n	8004400 <UART_SetConfig+0x49c>
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f4:	d204      	bcs.n	8004400 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	60da      	str	r2, [r3, #12]
 80043fe:	e001      	b.n	8004404 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004410:	7fbb      	ldrb	r3, [r7, #30]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3720      	adds	r7, #32
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40007c00 	.word	0x40007c00
 8004420:	40023800 	.word	0x40023800
 8004424:	00f42400 	.word	0x00f42400

08004428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01a      	beq.n	800453e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004526:	d10a      	bne.n	800453e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	605a      	str	r2, [r3, #4]
  }
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af02      	add	r7, sp, #8
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800457c:	f7fb ffe6 	bl	800054c <HAL_GetTick>
 8004580:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b08      	cmp	r3, #8
 800458e:	d10e      	bne.n	80045ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004590:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f817 	bl	80045d2 <UART_WaitOnFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e00d      	b.n	80045ca <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	603b      	str	r3, [r7, #0]
 80045de:	4613      	mov	r3, r2
 80045e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e2:	e05e      	b.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ea:	d05a      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ec:	f7fb ffae 	bl	800054c <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d302      	bcc.n	8004602 <UART_WaitOnFlagUntilTimeout+0x30>
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d11b      	bne.n	800463a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004610:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0201 	bic.w	r2, r2, #1
 8004620:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2220      	movs	r2, #32
 8004626:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2220      	movs	r2, #32
 800462c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e043      	b.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d02c      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004656:	d124      	bne.n	80046a2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004660:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004670:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0201 	bic.w	r2, r2, #1
 8004680:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2220      	movs	r2, #32
 8004686:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2220      	movs	r2, #32
 8004692:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e00f      	b.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4013      	ands	r3, r2
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	bf0c      	ite	eq
 80046b2:	2301      	moveq	r3, #1
 80046b4:	2300      	movne	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d091      	beq.n	80045e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046e0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0201 	bic.w	r2, r2, #1
 80046f0:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d107      	bne.n	800470a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0210 	bic.w	r2, r2, #16
 8004708:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2220      	movs	r2, #32
 800470e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f7ff fbf6 	bl	8003f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800474c:	bf00      	nop
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff fbd3 	bl	8003f24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800477e:	bf00      	nop
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004788:	b084      	sub	sp, #16
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	f107 001c 	add.w	r0, r7, #28
 8004796:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	2b01      	cmp	r3, #1
 800479e:	d120      	bne.n	80047e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68da      	ldr	r2, [r3, #12]
 80047b0:	4b20      	ldr	r3, [pc, #128]	; (8004834 <USB_CoreInit+0xac>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d105      	bne.n	80047d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f001 fad6 	bl	8005d88 <USB_CoreReset>
 80047dc:	4603      	mov	r3, r0
 80047de:	73fb      	strb	r3, [r7, #15]
 80047e0:	e010      	b.n	8004804 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f001 faca 	bl	8005d88 <USB_CoreReset>
 80047f4:	4603      	mov	r3, r0
 80047f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004806:	2b01      	cmp	r3, #1
 8004808:	d10b      	bne.n	8004822 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f043 0206 	orr.w	r2, r3, #6
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f043 0220 	orr.w	r2, r3, #32
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004822:	7bfb      	ldrb	r3, [r7, #15]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800482e:	b004      	add	sp, #16
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	ffbdffbf 	.word	0xffbdffbf

08004838 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	4613      	mov	r3, r2
 8004844:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004846:	79fb      	ldrb	r3, [r7, #7]
 8004848:	2b02      	cmp	r3, #2
 800484a:	d165      	bne.n	8004918 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4a41      	ldr	r2, [pc, #260]	; (8004954 <USB_SetTurnaroundTime+0x11c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d906      	bls.n	8004862 <USB_SetTurnaroundTime+0x2a>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4a40      	ldr	r2, [pc, #256]	; (8004958 <USB_SetTurnaroundTime+0x120>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d202      	bcs.n	8004862 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800485c:	230f      	movs	r3, #15
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	e062      	b.n	8004928 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	4a3c      	ldr	r2, [pc, #240]	; (8004958 <USB_SetTurnaroundTime+0x120>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d306      	bcc.n	8004878 <USB_SetTurnaroundTime+0x40>
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4a3b      	ldr	r2, [pc, #236]	; (800495c <USB_SetTurnaroundTime+0x124>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d202      	bcs.n	8004878 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004872:	230e      	movs	r3, #14
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	e057      	b.n	8004928 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4a38      	ldr	r2, [pc, #224]	; (800495c <USB_SetTurnaroundTime+0x124>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d306      	bcc.n	800488e <USB_SetTurnaroundTime+0x56>
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4a37      	ldr	r2, [pc, #220]	; (8004960 <USB_SetTurnaroundTime+0x128>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d202      	bcs.n	800488e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004888:	230d      	movs	r3, #13
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	e04c      	b.n	8004928 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4a33      	ldr	r2, [pc, #204]	; (8004960 <USB_SetTurnaroundTime+0x128>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d306      	bcc.n	80048a4 <USB_SetTurnaroundTime+0x6c>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	4a32      	ldr	r2, [pc, #200]	; (8004964 <USB_SetTurnaroundTime+0x12c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d802      	bhi.n	80048a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800489e:	230c      	movs	r3, #12
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	e041      	b.n	8004928 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4a2f      	ldr	r2, [pc, #188]	; (8004964 <USB_SetTurnaroundTime+0x12c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d906      	bls.n	80048ba <USB_SetTurnaroundTime+0x82>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4a2e      	ldr	r2, [pc, #184]	; (8004968 <USB_SetTurnaroundTime+0x130>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d802      	bhi.n	80048ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80048b4:	230b      	movs	r3, #11
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	e036      	b.n	8004928 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	4a2a      	ldr	r2, [pc, #168]	; (8004968 <USB_SetTurnaroundTime+0x130>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d906      	bls.n	80048d0 <USB_SetTurnaroundTime+0x98>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4a29      	ldr	r2, [pc, #164]	; (800496c <USB_SetTurnaroundTime+0x134>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d802      	bhi.n	80048d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80048ca:	230a      	movs	r3, #10
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	e02b      	b.n	8004928 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4a26      	ldr	r2, [pc, #152]	; (800496c <USB_SetTurnaroundTime+0x134>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d906      	bls.n	80048e6 <USB_SetTurnaroundTime+0xae>
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4a25      	ldr	r2, [pc, #148]	; (8004970 <USB_SetTurnaroundTime+0x138>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d202      	bcs.n	80048e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80048e0:	2309      	movs	r3, #9
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	e020      	b.n	8004928 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	4a21      	ldr	r2, [pc, #132]	; (8004970 <USB_SetTurnaroundTime+0x138>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d306      	bcc.n	80048fc <USB_SetTurnaroundTime+0xc4>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	4a20      	ldr	r2, [pc, #128]	; (8004974 <USB_SetTurnaroundTime+0x13c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d802      	bhi.n	80048fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80048f6:	2308      	movs	r3, #8
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	e015      	b.n	8004928 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4a1d      	ldr	r2, [pc, #116]	; (8004974 <USB_SetTurnaroundTime+0x13c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d906      	bls.n	8004912 <USB_SetTurnaroundTime+0xda>
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4a1c      	ldr	r2, [pc, #112]	; (8004978 <USB_SetTurnaroundTime+0x140>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d202      	bcs.n	8004912 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800490c:	2307      	movs	r3, #7
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	e00a      	b.n	8004928 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004912:	2306      	movs	r3, #6
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	e007      	b.n	8004928 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d102      	bne.n	8004924 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800491e:	2309      	movs	r3, #9
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	e001      	b.n	8004928 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004924:	2309      	movs	r3, #9
 8004926:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	029b      	lsls	r3, r3, #10
 800493c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004940:	431a      	orrs	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	00d8acbf 	.word	0x00d8acbf
 8004958:	00e4e1c0 	.word	0x00e4e1c0
 800495c:	00f42400 	.word	0x00f42400
 8004960:	01067380 	.word	0x01067380
 8004964:	011a499f 	.word	0x011a499f
 8004968:	01312cff 	.word	0x01312cff
 800496c:	014ca43f 	.word	0x014ca43f
 8004970:	016e3600 	.word	0x016e3600
 8004974:	01a6ab1f 	.word	0x01a6ab1f
 8004978:	01e84800 	.word	0x01e84800

0800497c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f043 0201 	orr.w	r2, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f023 0201 	bic.w	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d106      	bne.n	80049ec <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	60da      	str	r2, [r3, #12]
 80049ea:	e00b      	b.n	8004a04 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60da      	str	r2, [r3, #12]
 80049fe:	e001      	b.n	8004a04 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e003      	b.n	8004a0c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004a04:	2032      	movs	r0, #50	; 0x32
 8004a06:	f7fb fdad 	bl	8000564 <HAL_Delay>

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a14:	b084      	sub	sp, #16
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b086      	sub	sp, #24
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a2e:	2300      	movs	r3, #0
 8004a30:	613b      	str	r3, [r7, #16]
 8004a32:	e009      	b.n	8004a48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	3340      	adds	r3, #64	; 0x40
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	2200      	movs	r2, #0
 8004a40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	3301      	adds	r3, #1
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	2b0e      	cmp	r3, #14
 8004a4c:	d9f2      	bls.n	8004a34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d11c      	bne.n	8004a8e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a62:	f043 0302 	orr.w	r3, r3, #2
 8004a66:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	e005      	b.n	8004a9a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aac:	4619      	mov	r1, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	680b      	ldr	r3, [r1, #0]
 8004ab8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d10c      	bne.n	8004ada <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d104      	bne.n	8004ad0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f959 	bl	8004d80 <USB_SetDevSpeed>
 8004ace:	e018      	b.n	8004b02 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f954 	bl	8004d80 <USB_SetDevSpeed>
 8004ad8:	e013      	b.n	8004b02 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d10c      	bne.n	8004afa <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d104      	bne.n	8004af0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f949 	bl	8004d80 <USB_SetDevSpeed>
 8004aee:	e008      	b.n	8004b02 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004af0:	2101      	movs	r1, #1
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f944 	bl	8004d80 <USB_SetDevSpeed>
 8004af8:	e003      	b.n	8004b02 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004afa:	2103      	movs	r1, #3
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f93f 	bl	8004d80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b02:	2110      	movs	r1, #16
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f8f3 	bl	8004cf0 <USB_FlushTxFifo>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f911 	bl	8004d3c <USB_FlushRxFifo>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b36:	461a      	mov	r2, r3
 8004b38:	2300      	movs	r3, #0
 8004b3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b42:	461a      	mov	r2, r3
 8004b44:	2300      	movs	r3, #0
 8004b46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b48:	2300      	movs	r3, #0
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	e043      	b.n	8004bd6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b64:	d118      	bne.n	8004b98 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b78:	461a      	mov	r2, r3
 8004b7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	e013      	b.n	8004baa <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	e008      	b.n	8004baa <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	2300      	movs	r3, #0
 8004bba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc8:	461a      	mov	r2, r3
 8004bca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d3b7      	bcc.n	8004b4e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bde:	2300      	movs	r3, #0
 8004be0:	613b      	str	r3, [r7, #16]
 8004be2:	e043      	b.n	8004c6c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bfa:	d118      	bne.n	8004c2e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10a      	bne.n	8004c18 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	e013      	b.n	8004c40 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c24:	461a      	mov	r2, r3
 8004c26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	e008      	b.n	8004c40 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	2300      	movs	r3, #0
 8004c50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d3b7      	bcc.n	8004be4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d105      	bne.n	8004ca8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	f043 0210 	orr.w	r2, r3, #16
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699a      	ldr	r2, [r3, #24]
 8004cac:	4b0e      	ldr	r3, [pc, #56]	; (8004ce8 <USB_DevInit+0x2d4>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	f043 0208 	orr.w	r2, r3, #8
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d105      	bne.n	8004cd8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699a      	ldr	r2, [r3, #24]
 8004cd0:	4b06      	ldr	r3, [pc, #24]	; (8004cec <USB_DevInit+0x2d8>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ce4:	b004      	add	sp, #16
 8004ce6:	4770      	bx	lr
 8004ce8:	803c3800 	.word	0x803c3800
 8004cec:	40000004 	.word	0x40000004

08004cf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	019b      	lsls	r3, r3, #6
 8004d02:	f043 0220 	orr.w	r2, r3, #32
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4a09      	ldr	r2, [pc, #36]	; (8004d38 <USB_FlushTxFifo+0x48>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d901      	bls.n	8004d1c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e006      	b.n	8004d2a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d0f0      	beq.n	8004d0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	00030d40 	.word	0x00030d40

08004d3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2210      	movs	r2, #16
 8004d4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3301      	adds	r3, #1
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4a09      	ldr	r2, [pc, #36]	; (8004d7c <USB_FlushRxFifo+0x40>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d901      	bls.n	8004d60 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e006      	b.n	8004d6e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b10      	cmp	r3, #16
 8004d6a:	d0f0      	beq.n	8004d4e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	00030d40 	.word	0x00030d40

08004d80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	68f9      	ldr	r1, [r7, #12]
 8004d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004da0:	4313      	orrs	r3, r2
 8004da2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b087      	sub	sp, #28
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 0306 	and.w	r3, r3, #6
 8004dca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d102      	bne.n	8004dd8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	75fb      	strb	r3, [r7, #23]
 8004dd6:	e00a      	b.n	8004dee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d002      	beq.n	8004de4 <USB_GetDevSpeed+0x32>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b06      	cmp	r3, #6
 8004de2:	d102      	bne.n	8004dea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004de4:	2302      	movs	r3, #2
 8004de6:	75fb      	strb	r3, [r7, #23]
 8004de8:	e001      	b.n	8004dee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004dea:	230f      	movs	r3, #15
 8004dec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	371c      	adds	r7, #28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	785b      	ldrb	r3, [r3, #1]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d139      	bne.n	8004e8c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	f003 030f 	and.w	r3, r3, #15
 8004e28:	2101      	movs	r1, #1
 8004e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	68f9      	ldr	r1, [r7, #12]
 8004e32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e36:	4313      	orrs	r3, r2
 8004e38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d153      	bne.n	8004ef8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	78db      	ldrb	r3, [r3, #3]
 8004e6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	059b      	lsls	r3, r3, #22
 8004e72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e74:	431a      	orrs	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	0159      	lsls	r1, r3, #5
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	440b      	add	r3, r1
 8004e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e82:	4619      	mov	r1, r3
 8004e84:	4b20      	ldr	r3, [pc, #128]	; (8004f08 <USB_ActivateEndpoint+0x10c>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	600b      	str	r3, [r1, #0]
 8004e8a:	e035      	b.n	8004ef8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea2:	041b      	lsls	r3, r3, #16
 8004ea4:	68f9      	ldr	r1, [r7, #12]
 8004ea6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d119      	bne.n	8004ef8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	78db      	ldrb	r3, [r3, #3]
 8004ede:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	0159      	lsls	r1, r3, #5
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	440b      	add	r3, r1
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <USB_ActivateEndpoint+0x10c>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	10008000 	.word	0x10008000

08004f0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	785b      	ldrb	r3, [r3, #1]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d161      	bne.n	8004fec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f3e:	d11f      	bne.n	8004f80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	0151      	lsls	r1, r2, #5
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	440a      	add	r2, r1
 8004f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	f003 030f 	and.w	r3, r3, #15
 8004f90:	2101      	movs	r1, #1
 8004f92:	fa01 f303 	lsl.w	r3, r1, r3
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	68f9      	ldr	r1, [r7, #12]
 8004f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	f003 030f 	and.w	r3, r3, #15
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	68f9      	ldr	r1, [r7, #12]
 8004fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	0159      	lsls	r1, r3, #5
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	440b      	add	r3, r1
 8004fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4b35      	ldr	r3, [pc, #212]	; (80050bc <USB_DeactivateEndpoint+0x1b0>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	600b      	str	r3, [r1, #0]
 8004fea:	e060      	b.n	80050ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005002:	d11f      	bne.n	8005044 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	0151      	lsls	r1, r2, #5
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	440a      	add	r2, r1
 800501a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800501e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005022:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	440a      	add	r2, r1
 800503a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800503e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005042:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	f003 030f 	and.w	r3, r3, #15
 8005054:	2101      	movs	r1, #1
 8005056:	fa01 f303 	lsl.w	r3, r1, r3
 800505a:	041b      	lsls	r3, r3, #16
 800505c:	43db      	mvns	r3, r3
 800505e:	68f9      	ldr	r1, [r7, #12]
 8005060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005064:	4013      	ands	r3, r2
 8005066:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506e:	69da      	ldr	r2, [r3, #28]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	f003 030f 	and.w	r3, r3, #15
 8005078:	2101      	movs	r1, #1
 800507a:	fa01 f303 	lsl.w	r3, r1, r3
 800507e:	041b      	lsls	r3, r3, #16
 8005080:	43db      	mvns	r3, r3
 8005082:	68f9      	ldr	r1, [r7, #12]
 8005084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005088:	4013      	ands	r3, r2
 800508a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	0159      	lsls	r1, r3, #5
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	440b      	add	r3, r1
 80050a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a6:	4619      	mov	r1, r3
 80050a8:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <USB_DeactivateEndpoint+0x1b4>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	ec337800 	.word	0xec337800
 80050c0:	eff37800 	.word	0xeff37800

080050c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08a      	sub	sp, #40	; 0x28
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	4613      	mov	r3, r2
 80050d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	f040 8163 	bne.w	80053ac <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d132      	bne.n	8005154 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	0159      	lsls	r1, r3, #5
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	440b      	add	r3, r1
 8005104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005108:	4619      	mov	r1, r3
 800510a:	4ba5      	ldr	r3, [pc, #660]	; (80053a0 <USB_EPStartXfer+0x2dc>)
 800510c:	4013      	ands	r3, r2
 800510e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	0151      	lsls	r1, r2, #5
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	440a      	add	r2, r1
 8005126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800512a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800512e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513c:	691a      	ldr	r2, [r3, #16]
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	0159      	lsls	r1, r3, #5
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	440b      	add	r3, r1
 8005146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514a:	4619      	mov	r1, r3
 800514c:	4b95      	ldr	r3, [pc, #596]	; (80053a4 <USB_EPStartXfer+0x2e0>)
 800514e:	4013      	ands	r3, r2
 8005150:	610b      	str	r3, [r1, #16]
 8005152:	e074      	b.n	800523e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005160:	691a      	ldr	r2, [r3, #16]
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	0159      	lsls	r1, r3, #5
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	440b      	add	r3, r1
 800516a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516e:	4619      	mov	r1, r3
 8005170:	4b8c      	ldr	r3, [pc, #560]	; (80053a4 <USB_EPStartXfer+0x2e0>)
 8005172:	4013      	ands	r3, r2
 8005174:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	0159      	lsls	r1, r3, #5
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	440b      	add	r3, r1
 800518c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005190:	4619      	mov	r1, r3
 8005192:	4b83      	ldr	r3, [pc, #524]	; (80053a0 <USB_EPStartXfer+0x2dc>)
 8005194:	4013      	ands	r3, r2
 8005196:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	6959      	ldr	r1, [r3, #20]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	440b      	add	r3, r1
 80051b0:	1e59      	subs	r1, r3, #1
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80051ba:	04d9      	lsls	r1, r3, #19
 80051bc:	4b7a      	ldr	r3, [pc, #488]	; (80053a8 <USB_EPStartXfer+0x2e4>)
 80051be:	400b      	ands	r3, r1
 80051c0:	69b9      	ldr	r1, [r7, #24]
 80051c2:	0148      	lsls	r0, r1, #5
 80051c4:	69f9      	ldr	r1, [r7, #28]
 80051c6:	4401      	add	r1, r0
 80051c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051cc:	4313      	orrs	r3, r2
 80051ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051e6:	69b9      	ldr	r1, [r7, #24]
 80051e8:	0148      	lsls	r0, r1, #5
 80051ea:	69f9      	ldr	r1, [r7, #28]
 80051ec:	4401      	add	r1, r0
 80051ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051f2:	4313      	orrs	r3, r2
 80051f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	78db      	ldrb	r3, [r3, #3]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d11f      	bne.n	800523e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	440a      	add	r2, r1
 8005214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005218:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800521c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	0151      	lsls	r1, r2, #5
 8005230:	69fa      	ldr	r2, [r7, #28]
 8005232:	440a      	add	r2, r1
 8005234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005238:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800523c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d14b      	bne.n	80052dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d009      	beq.n	8005260 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005258:	461a      	mov	r2, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	78db      	ldrb	r3, [r3, #3]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d128      	bne.n	80052ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d110      	bne.n	800529a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	0151      	lsls	r1, r2, #5
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	440a      	add	r2, r1
 800528e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005292:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	e00f      	b.n	80052ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	0151      	lsls	r1, r2, #5
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	440a      	add	r2, r1
 80052b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	0151      	lsls	r1, r2, #5
 80052cc:	69fa      	ldr	r2, [r7, #28]
 80052ce:	440a      	add	r2, r1
 80052d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	e133      	b.n	8005544 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	0151      	lsls	r1, r2, #5
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	440a      	add	r2, r1
 80052f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	78db      	ldrb	r3, [r3, #3]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d015      	beq.n	8005330 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 811b 	beq.w	8005544 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	2101      	movs	r1, #1
 8005320:	fa01 f303 	lsl.w	r3, r1, r3
 8005324:	69f9      	ldr	r1, [r7, #28]
 8005326:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800532a:	4313      	orrs	r3, r2
 800532c:	634b      	str	r3, [r1, #52]	; 0x34
 800532e:	e109      	b.n	8005544 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d110      	bne.n	8005362 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	0151      	lsls	r1, r2, #5
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	440a      	add	r2, r1
 8005356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800535a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	e00f      	b.n	8005382 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	0151      	lsls	r1, r2, #5
 8005374:	69fa      	ldr	r2, [r7, #28]
 8005376:	440a      	add	r2, r1
 8005378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005380:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	68d9      	ldr	r1, [r3, #12]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	781a      	ldrb	r2, [r3, #0]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	b298      	uxth	r0, r3
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	4603      	mov	r3, r0
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 fa38 	bl	800580c <USB_WritePacket>
 800539c:	e0d2      	b.n	8005544 <USB_EPStartXfer+0x480>
 800539e:	bf00      	nop
 80053a0:	e007ffff 	.word	0xe007ffff
 80053a4:	fff80000 	.word	0xfff80000
 80053a8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b8:	691a      	ldr	r2, [r3, #16]
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	0159      	lsls	r1, r3, #5
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	440b      	add	r3, r1
 80053c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c6:	4619      	mov	r1, r3
 80053c8:	4b61      	ldr	r3, [pc, #388]	; (8005550 <USB_EPStartXfer+0x48c>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	0159      	lsls	r1, r3, #5
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	440b      	add	r3, r1
 80053e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e8:	4619      	mov	r1, r3
 80053ea:	4b5a      	ldr	r3, [pc, #360]	; (8005554 <USB_EPStartXfer+0x490>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d123      	bne.n	8005440 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800540e:	69b9      	ldr	r1, [r7, #24]
 8005410:	0148      	lsls	r0, r1, #5
 8005412:	69f9      	ldr	r1, [r7, #28]
 8005414:	4401      	add	r1, r0
 8005416:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800541a:	4313      	orrs	r3, r2
 800541c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	0151      	lsls	r1, r2, #5
 8005430:	69fa      	ldr	r2, [r7, #28]
 8005432:	440a      	add	r2, r1
 8005434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005438:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800543c:	6113      	str	r3, [r2, #16]
 800543e:	e033      	b.n	80054a8 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	695a      	ldr	r2, [r3, #20]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	4413      	add	r3, r2
 800544a:	1e5a      	subs	r2, r3, #1
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	fbb2 f3f3 	udiv	r3, r2, r3
 8005454:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	8afb      	ldrh	r3, [r7, #22]
 8005466:	04d9      	lsls	r1, r3, #19
 8005468:	4b3b      	ldr	r3, [pc, #236]	; (8005558 <USB_EPStartXfer+0x494>)
 800546a:	400b      	ands	r3, r1
 800546c:	69b9      	ldr	r1, [r7, #24]
 800546e:	0148      	lsls	r0, r1, #5
 8005470:	69f9      	ldr	r1, [r7, #28]
 8005472:	4401      	add	r1, r0
 8005474:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005478:	4313      	orrs	r3, r2
 800547a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	8af9      	ldrh	r1, [r7, #22]
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005498:	69b9      	ldr	r1, [r7, #24]
 800549a:	0148      	lsls	r0, r1, #5
 800549c:	69f9      	ldr	r1, [r7, #28]
 800549e:	4401      	add	r1, r0
 80054a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054a4:	4313      	orrs	r3, r2
 80054a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d10d      	bne.n	80054ca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d009      	beq.n	80054ca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	68d9      	ldr	r1, [r3, #12]
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c6:	460a      	mov	r2, r1
 80054c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	78db      	ldrb	r3, [r3, #3]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d128      	bne.n	8005524 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d110      	bne.n	8005504 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	e00f      	b.n	8005524 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005522:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800553e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005542:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3720      	adds	r7, #32
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	fff80000 	.word	0xfff80000
 8005554:	e007ffff 	.word	0xe007ffff
 8005558:	1ff80000 	.word	0x1ff80000

0800555c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	4613      	mov	r3, r2
 8005568:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	785b      	ldrb	r3, [r3, #1]
 8005578:	2b01      	cmp	r3, #1
 800557a:	f040 80cd 	bne.w	8005718 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d132      	bne.n	80055ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	0159      	lsls	r1, r3, #5
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	440b      	add	r3, r1
 800559c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a0:	4619      	mov	r1, r3
 80055a2:	4b98      	ldr	r3, [pc, #608]	; (8005804 <USB_EP0StartXfer+0x2a8>)
 80055a4:	4013      	ands	r3, r2
 80055a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	0151      	lsls	r1, r2, #5
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	440a      	add	r2, r1
 80055be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d4:	691a      	ldr	r2, [r3, #16]
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	0159      	lsls	r1, r3, #5
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	440b      	add	r3, r1
 80055de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e2:	4619      	mov	r1, r3
 80055e4:	4b88      	ldr	r3, [pc, #544]	; (8005808 <USB_EP0StartXfer+0x2ac>)
 80055e6:	4013      	ands	r3, r2
 80055e8:	610b      	str	r3, [r1, #16]
 80055ea:	e04e      	b.n	800568a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	0159      	lsls	r1, r3, #5
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	440b      	add	r3, r1
 8005602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005606:	4619      	mov	r1, r3
 8005608:	4b7f      	ldr	r3, [pc, #508]	; (8005808 <USB_EP0StartXfer+0x2ac>)
 800560a:	4013      	ands	r3, r2
 800560c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	0159      	lsls	r1, r3, #5
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	440b      	add	r3, r1
 8005624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005628:	4619      	mov	r1, r3
 800562a:	4b76      	ldr	r3, [pc, #472]	; (8005804 <USB_EP0StartXfer+0x2a8>)
 800562c:	4013      	ands	r3, r2
 800562e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	429a      	cmp	r2, r3
 800563a:	d903      	bls.n	8005644 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	0151      	lsls	r1, r2, #5
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	440a      	add	r2, r1
 800565a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005662:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005670:	691a      	ldr	r2, [r3, #16]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800567a:	6939      	ldr	r1, [r7, #16]
 800567c:	0148      	lsls	r0, r1, #5
 800567e:	6979      	ldr	r1, [r7, #20]
 8005680:	4401      	add	r1, r0
 8005682:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005686:	4313      	orrs	r3, r2
 8005688:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d11e      	bne.n	80056ce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d009      	beq.n	80056ac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a4:	461a      	mov	r2, r3
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	0151      	lsls	r1, r2, #5
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	440a      	add	r2, r1
 80056c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	e092      	b.n	80057f4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	0151      	lsls	r1, r2, #5
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	440a      	add	r2, r1
 80056e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056ec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d07e      	beq.n	80057f4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	2101      	movs	r1, #1
 8005708:	fa01 f303 	lsl.w	r3, r1, r3
 800570c:	6979      	ldr	r1, [r7, #20]
 800570e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005712:	4313      	orrs	r3, r2
 8005714:	634b      	str	r3, [r1, #52]	; 0x34
 8005716:	e06d      	b.n	80057f4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005724:	691a      	ldr	r2, [r3, #16]
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	0159      	lsls	r1, r3, #5
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	440b      	add	r3, r1
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	4619      	mov	r1, r3
 8005734:	4b34      	ldr	r3, [pc, #208]	; (8005808 <USB_EP0StartXfer+0x2ac>)
 8005736:	4013      	ands	r3, r2
 8005738:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	0159      	lsls	r1, r3, #5
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	440b      	add	r3, r1
 8005750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005754:	4619      	mov	r1, r3
 8005756:	4b2b      	ldr	r3, [pc, #172]	; (8005804 <USB_EP0StartXfer+0x2a8>)
 8005758:	4013      	ands	r3, r2
 800575a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	0151      	lsls	r1, r2, #5
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	440a      	add	r2, r1
 8005782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005786:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800578a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005798:	691a      	ldr	r2, [r3, #16]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057a2:	6939      	ldr	r1, [r7, #16]
 80057a4:	0148      	lsls	r0, r1, #5
 80057a6:	6979      	ldr	r1, [r7, #20]
 80057a8:	4401      	add	r1, r0
 80057aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057ae:	4313      	orrs	r3, r2
 80057b0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d10d      	bne.n	80057d4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d009      	beq.n	80057d4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	68d9      	ldr	r1, [r3, #12]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d0:	460a      	mov	r2, r1
 80057d2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	0151      	lsls	r1, r2, #5
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	440a      	add	r2, r1
 80057ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	e007ffff 	.word	0xe007ffff
 8005808:	fff80000 	.word	0xfff80000

0800580c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800580c:	b480      	push	{r7}
 800580e:	b089      	sub	sp, #36	; 0x24
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	4611      	mov	r1, r2
 8005818:	461a      	mov	r2, r3
 800581a:	460b      	mov	r3, r1
 800581c:	71fb      	strb	r3, [r7, #7]
 800581e:	4613      	mov	r3, r2
 8005820:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800582a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800582e:	2b00      	cmp	r3, #0
 8005830:	d11a      	bne.n	8005868 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005832:	88bb      	ldrh	r3, [r7, #4]
 8005834:	3303      	adds	r3, #3
 8005836:	089b      	lsrs	r3, r3, #2
 8005838:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800583a:	2300      	movs	r3, #0
 800583c:	61bb      	str	r3, [r7, #24]
 800583e:	e00f      	b.n	8005860 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	031a      	lsls	r2, r3, #12
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	4413      	add	r3, r2
 8005848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800584c:	461a      	mov	r2, r3
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	3304      	adds	r3, #4
 8005858:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	3301      	adds	r3, #1
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	429a      	cmp	r2, r3
 8005866:	d3eb      	bcc.n	8005840 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3724      	adds	r7, #36	; 0x24
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005876:	b480      	push	{r7}
 8005878:	b089      	sub	sp, #36	; 0x24
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	4613      	mov	r3, r2
 8005882:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800588c:	88fb      	ldrh	r3, [r7, #6]
 800588e:	3303      	adds	r3, #3
 8005890:	089b      	lsrs	r3, r3, #2
 8005892:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005894:	2300      	movs	r3, #0
 8005896:	61bb      	str	r3, [r7, #24]
 8005898:	e00b      	b.n	80058b2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	601a      	str	r2, [r3, #0]
    pDest++;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	3304      	adds	r3, #4
 80058aa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	3301      	adds	r3, #1
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d3ef      	bcc.n	800589a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80058ba:	69fb      	ldr	r3, [r7, #28]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3724      	adds	r7, #36	; 0x24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	785b      	ldrb	r3, [r3, #1]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d12c      	bne.n	800593e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	db12      	blt.n	800591c <USB_EPSetStall+0x54>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00f      	beq.n	800591c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	0151      	lsls	r1, r2, #5
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	440a      	add	r2, r1
 8005912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005916:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800591a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	0151      	lsls	r1, r2, #5
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	440a      	add	r2, r1
 8005932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005936:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	e02b      	b.n	8005996 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	db12      	blt.n	8005976 <USB_EPSetStall+0xae>
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00f      	beq.n	8005976 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	0151      	lsls	r1, r2, #5
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	440a      	add	r2, r1
 800596c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005970:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005974:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	0151      	lsls	r1, r2, #5
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	440a      	add	r2, r1
 800598c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005990:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005994:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d128      	bne.n	8005a12 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	0151      	lsls	r1, r2, #5
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	440a      	add	r2, r1
 80059d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	78db      	ldrb	r3, [r3, #3]
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d003      	beq.n	80059f0 <USB_EPClearStall+0x4c>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	78db      	ldrb	r3, [r3, #3]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d138      	bne.n	8005a62 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	e027      	b.n	8005a62 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	0151      	lsls	r1, r2, #5
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	440a      	add	r2, r1
 8005a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	78db      	ldrb	r3, [r3, #3]
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d003      	beq.n	8005a42 <USB_EPClearStall+0x9e>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	78db      	ldrb	r3, [r3, #3]
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d10f      	bne.n	8005a62 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	0151      	lsls	r1, r2, #5
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	440a      	add	r2, r1
 8005a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a60:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a92:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	78fb      	ldrb	r3, [r7, #3]
 8005a9e:	011b      	lsls	r3, r3, #4
 8005aa0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005aa4:	68f9      	ldr	r1, [r7, #12]
 8005aa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ad6:	f023 0303 	bic.w	r3, r3, #3
 8005ada:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aea:	f023 0302 	bic.w	r3, r3, #2
 8005aee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b18:	f023 0303 	bic.w	r3, r3, #3
 8005b1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b2c:	f043 0302 	orr.w	r3, r3, #2
 8005b30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4013      	ands	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b58:	68fb      	ldr	r3, [r7, #12]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b085      	sub	sp, #20
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	4013      	ands	r3, r2
 8005b88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	0c1b      	lsrs	r3, r3, #16
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	b29b      	uxth	r3, r3
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b087      	sub	sp, #28
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	460b      	mov	r3, r1
 8005c14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3a:	01db      	lsls	r3, r3, #7
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c44:	78fb      	ldrb	r3, [r7, #3]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4013      	ands	r3, r2
 8005c56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c58:	68bb      	ldr	r3, [r7, #8]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	371c      	adds	r7, #28
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	f003 0301 	and.w	r3, r3, #1
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
	...

08005c84 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4b09      	ldr	r3, [pc, #36]	; (8005cc8 <USB_ActivateSetup+0x44>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	fffff800 	.word	0xfffff800

08005ccc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	333c      	adds	r3, #60	; 0x3c
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4a26      	ldr	r2, [pc, #152]	; (8005d84 <USB_EP0_OutStart+0xb8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d90a      	bls.n	8005d06 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d00:	d101      	bne.n	8005d06 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e037      	b.n	8005d76 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d34:	f043 0318 	orr.w	r3, r3, #24
 8005d38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d48:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005d4c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d4e:	7afb      	ldrb	r3, [r7, #11]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d10f      	bne.n	8005d74 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d6e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005d72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	4f54300a 	.word	0x4f54300a

08005d88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3301      	adds	r3, #1
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4a13      	ldr	r2, [pc, #76]	; (8005dec <USB_CoreReset+0x64>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d901      	bls.n	8005da6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e01b      	b.n	8005dde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	daf2      	bge.n	8005d94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f043 0201 	orr.w	r2, r3, #1
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4a09      	ldr	r2, [pc, #36]	; (8005dec <USB_CoreReset+0x64>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d901      	bls.n	8005dd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e006      	b.n	8005dde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d0f0      	beq.n	8005dbe <USB_CoreReset+0x36>

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	00030d40 	.word	0x00030d40

08005df0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005dfc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005e00:	f005 fda2 	bl	800b948 <malloc>
 8005e04:	4603      	mov	r3, r0
 8005e06:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d105      	bne.n	8005e1a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005e16:	2302      	movs	r3, #2
 8005e18:	e066      	b.n	8005ee8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	7c1b      	ldrb	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d119      	bne.n	8005e5e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e2e:	2202      	movs	r2, #2
 8005e30:	2181      	movs	r1, #129	; 0x81
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f005 f991 	bl	800b15a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e42:	2202      	movs	r2, #2
 8005e44:	2101      	movs	r1, #1
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f005 f987 	bl	800b15a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2210      	movs	r2, #16
 8005e58:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005e5c:	e016      	b.n	8005e8c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e5e:	2340      	movs	r3, #64	; 0x40
 8005e60:	2202      	movs	r2, #2
 8005e62:	2181      	movs	r1, #129	; 0x81
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f005 f978 	bl	800b15a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e70:	2340      	movs	r3, #64	; 0x40
 8005e72:	2202      	movs	r2, #2
 8005e74:	2101      	movs	r1, #1
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f005 f96f 	bl	800b15a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2210      	movs	r2, #16
 8005e88:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	2203      	movs	r2, #3
 8005e90:	2182      	movs	r1, #130	; 0x82
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f005 f961 	bl	800b15a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	7c1b      	ldrb	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d109      	bne.n	8005ed6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ecc:	2101      	movs	r1, #1
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f005 fa32 	bl	800b338 <USBD_LL_PrepareReceive>
 8005ed4:	e007      	b.n	8005ee6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005edc:	2340      	movs	r3, #64	; 0x40
 8005ede:	2101      	movs	r1, #1
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f005 fa29 	bl	800b338 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f00:	2181      	movs	r1, #129	; 0x81
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f005 f94f 	bl	800b1a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005f0e:	2101      	movs	r1, #1
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f005 f948 	bl	800b1a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005f1e:	2182      	movs	r1, #130	; 0x82
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f005 f940 	bl	800b1a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00e      	beq.n	8005f5e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f50:	4618      	mov	r0, r3
 8005f52:	f005 fd01 	bl	800b958 <free>
    pdev->pClassData = NULL;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f78:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d03a      	beq.n	8006008 <USBD_CDC_Setup+0xa0>
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	f040 8097 	bne.w	80060c6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	88db      	ldrh	r3, [r3, #6]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d029      	beq.n	8005ff4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	b25b      	sxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	da11      	bge.n	8005fce <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005fb6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	88d2      	ldrh	r2, [r2, #6]
 8005fbc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005fbe:	6939      	ldr	r1, [r7, #16]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	88db      	ldrh	r3, [r3, #6]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f001 faa6 	bl	8007518 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005fcc:	e082      	b.n	80060d4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	785a      	ldrb	r2, [r3, #1]
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	88db      	ldrh	r3, [r3, #6]
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005fe4:	6939      	ldr	r1, [r7, #16]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	88db      	ldrh	r3, [r3, #6]
 8005fea:	461a      	mov	r2, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f001 fabf 	bl	8007570 <USBD_CtlPrepareRx>
    break;
 8005ff2:	e06f      	b.n	80060d4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	7850      	ldrb	r0, [r2, #1]
 8006000:	2200      	movs	r2, #0
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	4798      	blx	r3
    break;
 8006006:	e065      	b.n	80060d4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	785b      	ldrb	r3, [r3, #1]
 800600c:	2b0b      	cmp	r3, #11
 800600e:	d84f      	bhi.n	80060b0 <USBD_CDC_Setup+0x148>
 8006010:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <USBD_CDC_Setup+0xb0>)
 8006012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006016:	bf00      	nop
 8006018:	08006049 	.word	0x08006049
 800601c:	080060bf 	.word	0x080060bf
 8006020:	080060b1 	.word	0x080060b1
 8006024:	080060b1 	.word	0x080060b1
 8006028:	080060b1 	.word	0x080060b1
 800602c:	080060b1 	.word	0x080060b1
 8006030:	080060b1 	.word	0x080060b1
 8006034:	080060b1 	.word	0x080060b1
 8006038:	080060b1 	.word	0x080060b1
 800603c:	080060b1 	.word	0x080060b1
 8006040:	08006071 	.word	0x08006071
 8006044:	08006099 	.word	0x08006099
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800604e:	2b03      	cmp	r3, #3
 8006050:	d107      	bne.n	8006062 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006052:	f107 030c 	add.w	r3, r7, #12
 8006056:	2202      	movs	r2, #2
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f001 fa5c 	bl	8007518 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006060:	e030      	b.n	80060c4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f001 f9e6 	bl	8007436 <USBD_CtlError>
        ret = USBD_FAIL;
 800606a:	2303      	movs	r3, #3
 800606c:	75fb      	strb	r3, [r7, #23]
      break;
 800606e:	e029      	b.n	80060c4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006076:	2b03      	cmp	r3, #3
 8006078:	d107      	bne.n	800608a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800607a:	f107 030f 	add.w	r3, r7, #15
 800607e:	2201      	movs	r2, #1
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f001 fa48 	bl	8007518 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006088:	e01c      	b.n	80060c4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f001 f9d2 	bl	8007436 <USBD_CtlError>
        ret = USBD_FAIL;
 8006092:	2303      	movs	r3, #3
 8006094:	75fb      	strb	r3, [r7, #23]
      break;
 8006096:	e015      	b.n	80060c4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d00f      	beq.n	80060c2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f001 f9c6 	bl	8007436 <USBD_CtlError>
        ret = USBD_FAIL;
 80060aa:	2303      	movs	r3, #3
 80060ac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80060ae:	e008      	b.n	80060c2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f001 f9bf 	bl	8007436 <USBD_CtlError>
      ret = USBD_FAIL;
 80060b8:	2303      	movs	r3, #3
 80060ba:	75fb      	strb	r3, [r7, #23]
      break;
 80060bc:	e002      	b.n	80060c4 <USBD_CDC_Setup+0x15c>
      break;
 80060be:	bf00      	nop
 80060c0:	e008      	b.n	80060d4 <USBD_CDC_Setup+0x16c>
      break;
 80060c2:	bf00      	nop
    }
    break;
 80060c4:	e006      	b.n	80060d4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f001 f9b4 	bl	8007436 <USBD_CtlError>
    ret = USBD_FAIL;
 80060ce:	2303      	movs	r3, #3
 80060d0:	75fb      	strb	r3, [r7, #23]
    break;
 80060d2:	bf00      	nop
  }

  return (uint8_t)ret;
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop

080060e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80060f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80060fe:	2303      	movs	r3, #3
 8006100:	e049      	b.n	8006196 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006108:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800610a:	78fa      	ldrb	r2, [r7, #3]
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	440b      	add	r3, r1
 8006118:	3318      	adds	r3, #24
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d029      	beq.n	8006174 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006120:	78fa      	ldrb	r2, [r7, #3]
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	440b      	add	r3, r1
 800612e:	3318      	adds	r3, #24
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	78f9      	ldrb	r1, [r7, #3]
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	460b      	mov	r3, r1
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	1a5b      	subs	r3, r3, r1
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4403      	add	r3, r0
 8006140:	3344      	adds	r3, #68	; 0x44
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	fbb2 f1f3 	udiv	r1, r2, r3
 8006148:	fb03 f301 	mul.w	r3, r3, r1
 800614c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800614e:	2b00      	cmp	r3, #0
 8006150:	d110      	bne.n	8006174 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006152:	78fa      	ldrb	r2, [r7, #3]
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	3318      	adds	r3, #24
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006166:	78f9      	ldrb	r1, [r7, #3]
 8006168:	2300      	movs	r3, #0
 800616a:	2200      	movs	r2, #0
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f005 f8c2 	bl	800b2f6 <USBD_LL_Transmit>
 8006172:	e00f      	b.n	8006194 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2200      	movs	r2, #0
 8006178:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006190:	78fa      	ldrb	r2, [r7, #3]
 8006192:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b084      	sub	sp, #16
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	460b      	mov	r3, r1
 80061a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80061bc:	2303      	movs	r3, #3
 80061be:	e015      	b.n	80061ec <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80061c0:	78fb      	ldrb	r3, [r7, #3]
 80061c2:	4619      	mov	r1, r3
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f005 f8d8 	bl	800b37a <USBD_LL_GetRxDataSize>
 80061ca:	4602      	mov	r2, r0
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80061e6:	4611      	mov	r1, r2
 80061e8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006202:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d015      	beq.n	800623a <USBD_CDC_EP0_RxReady+0x46>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006214:	2bff      	cmp	r3, #255	; 0xff
 8006216:	d010      	beq.n	800623a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006226:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800622e:	b292      	uxth	r2, r2
 8006230:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	22ff      	movs	r2, #255	; 0xff
 8006236:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2243      	movs	r2, #67	; 0x43
 8006250:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006252:	4b03      	ldr	r3, [pc, #12]	; (8006260 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006254:	4618      	mov	r0, r3
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	20000090 	.word	0x20000090

08006264 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2243      	movs	r2, #67	; 0x43
 8006270:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006272:	4b03      	ldr	r3, [pc, #12]	; (8006280 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	2000004c 	.word	0x2000004c

08006284 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2243      	movs	r2, #67	; 0x43
 8006290:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006292:	4b03      	ldr	r3, [pc, #12]	; (80062a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	200000d4 	.word	0x200000d4

080062a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	220a      	movs	r2, #10
 80062b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80062b2:	4b03      	ldr	r3, [pc, #12]	; (80062c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	20000008 	.word	0x20000008

080062c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e004      	b.n	80062e2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b087      	sub	sp, #28
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006300:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006330:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006356:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006362:	2303      	movs	r3, #3
 8006364:	e016      	b.n	8006394 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	7c1b      	ldrb	r3, [r3, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d109      	bne.n	8006382 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006378:	2101      	movs	r1, #1
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f004 ffdc 	bl	800b338 <USBD_LL_PrepareReceive>
 8006380:	e007      	b.n	8006392 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006388:	2340      	movs	r3, #64	; 0x40
 800638a:	2101      	movs	r1, #1
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f004 ffd3 	bl	800b338 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	4613      	mov	r3, r2
 80063a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e025      	b.n	8006400 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	79fa      	ldrb	r2, [r7, #7]
 80063f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f004 fe49 	bl	800b08c <USBD_LL_Init>
 80063fa:	4603      	mov	r3, r0
 80063fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80063fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3718      	adds	r7, #24
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800641c:	2303      	movs	r3, #3
 800641e:	e010      	b.n	8006442 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800642e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006430:	f107 020e 	add.w	r2, r7, #14
 8006434:	4610      	mov	r0, r2
 8006436:	4798      	blx	r3
 8006438:	4602      	mov	r2, r0
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f004 fe66 	bl	800b124 <USBD_LL_Start>
 8006458:	4603      	mov	r3, r0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006484:	2303      	movs	r3, #3
 8006486:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d009      	beq.n	80064a6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	78fa      	ldrb	r2, [r7, #3]
 800649c:	4611      	mov	r1, r2
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	4798      	blx	r3
 80064a2:	4603      	mov	r3, r0
 80064a4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	460b      	mov	r3, r1
 80064ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d007      	beq.n	80064d6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	78fa      	ldrb	r2, [r7, #3]
 80064d0:	4611      	mov	r1, r2
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	4798      	blx	r3
  }

  return USBD_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 ff65 	bl	80073c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006506:	461a      	mov	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006514:	f003 031f 	and.w	r3, r3, #31
 8006518:	2b02      	cmp	r3, #2
 800651a:	d01a      	beq.n	8006552 <USBD_LL_SetupStage+0x72>
 800651c:	2b02      	cmp	r3, #2
 800651e:	d822      	bhi.n	8006566 <USBD_LL_SetupStage+0x86>
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <USBD_LL_SetupStage+0x4a>
 8006524:	2b01      	cmp	r3, #1
 8006526:	d00a      	beq.n	800653e <USBD_LL_SetupStage+0x5e>
 8006528:	e01d      	b.n	8006566 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fa18 	bl	8006968 <USBD_StdDevReq>
 8006538:	4603      	mov	r3, r0
 800653a:	73fb      	strb	r3, [r7, #15]
      break;
 800653c:	e020      	b.n	8006580 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fa7c 	bl	8006a44 <USBD_StdItfReq>
 800654c:	4603      	mov	r3, r0
 800654e:	73fb      	strb	r3, [r7, #15]
      break;
 8006550:	e016      	b.n	8006580 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 faba 	bl	8006ad4 <USBD_StdEPReq>
 8006560:	4603      	mov	r3, r0
 8006562:	73fb      	strb	r3, [r7, #15]
      break;
 8006564:	e00c      	b.n	8006580 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800656c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006570:	b2db      	uxtb	r3, r3
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f004 fe35 	bl	800b1e4 <USBD_LL_StallEP>
 800657a:	4603      	mov	r3, r0
 800657c:	73fb      	strb	r3, [r7, #15]
      break;
 800657e:	bf00      	nop
  }

  return ret;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b086      	sub	sp, #24
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	460b      	mov	r3, r1
 8006594:	607a      	str	r2, [r7, #4]
 8006596:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006598:	7afb      	ldrb	r3, [r7, #11]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d137      	bne.n	800660e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80065a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d14a      	bne.n	8006646 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d913      	bls.n	80065e4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	1ad2      	subs	r2, r2, r3
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	4293      	cmp	r3, r2
 80065d4:	bf28      	it	cs
 80065d6:	4613      	movcs	r3, r2
 80065d8:	461a      	mov	r2, r3
 80065da:	6879      	ldr	r1, [r7, #4]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 ffe4 	bl	80075aa <USBD_CtlContinueRx>
 80065e2:	e030      	b.n	8006646 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00a      	beq.n	8006606 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d105      	bne.n	8006606 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 ffe0 	bl	80075cc <USBD_CtlSendStatus>
 800660c:	e01b      	b.n	8006646 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d013      	beq.n	8006642 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006620:	2b03      	cmp	r3, #3
 8006622:	d10e      	bne.n	8006642 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	7afa      	ldrb	r2, [r7, #11]
 800662e:	4611      	mov	r1, r2
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	4798      	blx	r3
 8006634:	4603      	mov	r3, r0
 8006636:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006638:	7dfb      	ldrb	r3, [r7, #23]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800663e:	7dfb      	ldrb	r3, [r7, #23]
 8006640:	e002      	b.n	8006648 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006642:	2303      	movs	r3, #3
 8006644:	e000      	b.n	8006648 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	460b      	mov	r3, r1
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800665e:	7afb      	ldrb	r3, [r7, #11]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d16a      	bne.n	800673a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3314      	adds	r3, #20
 8006668:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006670:	2b02      	cmp	r3, #2
 8006672:	d155      	bne.n	8006720 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	429a      	cmp	r2, r3
 800667e:	d914      	bls.n	80066aa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	1ad2      	subs	r2, r2, r3
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	461a      	mov	r2, r3
 8006694:	6879      	ldr	r1, [r7, #4]
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 ff59 	bl	800754e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800669c:	2300      	movs	r3, #0
 800669e:	2200      	movs	r2, #0
 80066a0:	2100      	movs	r1, #0
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f004 fe48 	bl	800b338 <USBD_LL_PrepareReceive>
 80066a8:	e03a      	b.n	8006720 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d11c      	bne.n	80066f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80066be:	429a      	cmp	r2, r3
 80066c0:	d316      	bcc.n	80066f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d20f      	bcs.n	80066f0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066d0:	2200      	movs	r2, #0
 80066d2:	2100      	movs	r1, #0
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 ff3a 	bl	800754e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066e2:	2300      	movs	r3, #0
 80066e4:	2200      	movs	r2, #0
 80066e6:	2100      	movs	r1, #0
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f004 fe25 	bl	800b338 <USBD_LL_PrepareReceive>
 80066ee:	e017      	b.n	8006720 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00a      	beq.n	8006712 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006702:	2b03      	cmp	r3, #3
 8006704:	d105      	bne.n	8006712 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006712:	2180      	movs	r1, #128	; 0x80
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f004 fd65 	bl	800b1e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 ff69 	bl	80075f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006726:	2b01      	cmp	r3, #1
 8006728:	d123      	bne.n	8006772 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f7ff fe99 	bl	8006462 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006738:	e01b      	b.n	8006772 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d013      	beq.n	800676e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800674c:	2b03      	cmp	r3, #3
 800674e:	d10e      	bne.n	800676e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	7afa      	ldrb	r2, [r7, #11]
 800675a:	4611      	mov	r1, r2
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	4798      	blx	r3
 8006760:	4603      	mov	r3, r0
 8006762:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006764:	7dfb      	ldrb	r3, [r7, #23]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	e002      	b.n	8006774 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800676e:	2303      	movs	r3, #3
 8006770:	e000      	b.n	8006774 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d009      	beq.n	80067c0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	6852      	ldr	r2, [r2, #4]
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	4611      	mov	r1, r2
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067c0:	2340      	movs	r3, #64	; 0x40
 80067c2:	2200      	movs	r2, #0
 80067c4:	2100      	movs	r1, #0
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f004 fcc7 	bl	800b15a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2240      	movs	r2, #64	; 0x40
 80067d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067dc:	2340      	movs	r3, #64	; 0x40
 80067de:	2200      	movs	r2, #0
 80067e0:	2180      	movs	r1, #128	; 0x80
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f004 fcb9 	bl	800b15a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2240      	movs	r2, #64	; 0x40
 80067f2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	460b      	mov	r3, r1
 8006808:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	78fa      	ldrb	r2, [r7, #3]
 800680e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800681e:	b480      	push	{r7}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2204      	movs	r2, #4
 8006836:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006856:	2b04      	cmp	r3, #4
 8006858:	d105      	bne.n	8006866 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006882:	2b03      	cmp	r3, #3
 8006884:	d10b      	bne.n	800689e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d005      	beq.n	800689e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	460b      	mov	r3, r1
 80068b2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	460b      	mov	r3, r1
 80068cc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006908:	2b00      	cmp	r3, #0
 800690a:	d009      	beq.n	8006920 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6852      	ldr	r2, [r2, #4]
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	4611      	mov	r1, r2
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	4798      	blx	r3
  }

  return USBD_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800692a:	b480      	push	{r7}
 800692c:	b087      	sub	sp, #28
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	3301      	adds	r3, #1
 8006940:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006948:	8a3b      	ldrh	r3, [r7, #16]
 800694a:	021b      	lsls	r3, r3, #8
 800694c:	b21a      	sxth	r2, r3
 800694e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006952:	4313      	orrs	r3, r2
 8006954:	b21b      	sxth	r3, r3
 8006956:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006958:	89fb      	ldrh	r3, [r7, #14]
}
 800695a:	4618      	mov	r0, r3
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
	...

08006968 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800697e:	2b40      	cmp	r3, #64	; 0x40
 8006980:	d005      	beq.n	800698e <USBD_StdDevReq+0x26>
 8006982:	2b40      	cmp	r3, #64	; 0x40
 8006984:	d853      	bhi.n	8006a2e <USBD_StdDevReq+0xc6>
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00b      	beq.n	80069a2 <USBD_StdDevReq+0x3a>
 800698a:	2b20      	cmp	r3, #32
 800698c:	d14f      	bne.n	8006a2e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	4798      	blx	r3
 800699c:	4603      	mov	r3, r0
 800699e:	73fb      	strb	r3, [r7, #15]
    break;
 80069a0:	e04a      	b.n	8006a38 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	785b      	ldrb	r3, [r3, #1]
 80069a6:	2b09      	cmp	r3, #9
 80069a8:	d83b      	bhi.n	8006a22 <USBD_StdDevReq+0xba>
 80069aa:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <USBD_StdDevReq+0x48>)
 80069ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b0:	08006a05 	.word	0x08006a05
 80069b4:	08006a19 	.word	0x08006a19
 80069b8:	08006a23 	.word	0x08006a23
 80069bc:	08006a0f 	.word	0x08006a0f
 80069c0:	08006a23 	.word	0x08006a23
 80069c4:	080069e3 	.word	0x080069e3
 80069c8:	080069d9 	.word	0x080069d9
 80069cc:	08006a23 	.word	0x08006a23
 80069d0:	080069fb 	.word	0x080069fb
 80069d4:	080069ed 	.word	0x080069ed
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f9d8 	bl	8006d90 <USBD_GetDescriptor>
      break;
 80069e0:	e024      	b.n	8006a2c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fb67 	bl	80070b8 <USBD_SetAddress>
      break;
 80069ea:	e01f      	b.n	8006a2c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fba6 	bl	8007140 <USBD_SetConfig>
 80069f4:	4603      	mov	r3, r0
 80069f6:	73fb      	strb	r3, [r7, #15]
      break;
 80069f8:	e018      	b.n	8006a2c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fc43 	bl	8007288 <USBD_GetConfig>
      break;
 8006a02:	e013      	b.n	8006a2c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fc73 	bl	80072f2 <USBD_GetStatus>
      break;
 8006a0c:	e00e      	b.n	8006a2c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fca1 	bl	8007358 <USBD_SetFeature>
      break;
 8006a16:	e009      	b.n	8006a2c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fcb0 	bl	8007380 <USBD_ClrFeature>
      break;
 8006a20:	e004      	b.n	8006a2c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fd06 	bl	8007436 <USBD_CtlError>
      break;
 8006a2a:	bf00      	nop
    }
    break;
 8006a2c:	e004      	b.n	8006a38 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fd00 	bl	8007436 <USBD_CtlError>
    break;
 8006a36:	bf00      	nop
  }

  return ret;
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop

08006a44 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a5a:	2b40      	cmp	r3, #64	; 0x40
 8006a5c:	d005      	beq.n	8006a6a <USBD_StdItfReq+0x26>
 8006a5e:	2b40      	cmp	r3, #64	; 0x40
 8006a60:	d82e      	bhi.n	8006ac0 <USBD_StdItfReq+0x7c>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <USBD_StdItfReq+0x26>
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d12a      	bne.n	8006ac0 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a70:	3b01      	subs	r3, #1
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d81d      	bhi.n	8006ab2 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	889b      	ldrh	r3, [r3, #4]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d813      	bhi.n	8006aa8 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
 8006a8e:	4603      	mov	r3, r0
 8006a90:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	88db      	ldrh	r3, [r3, #6]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d110      	bne.n	8006abc <USBD_StdItfReq+0x78>
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10d      	bne.n	8006abc <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fd93 	bl	80075cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006aa6:	e009      	b.n	8006abc <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fcc3 	bl	8007436 <USBD_CtlError>
      break;
 8006ab0:	e004      	b.n	8006abc <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fcbe 	bl	8007436 <USBD_CtlError>
      break;
 8006aba:	e000      	b.n	8006abe <USBD_StdItfReq+0x7a>
      break;
 8006abc:	bf00      	nop
    }
    break;
 8006abe:	e004      	b.n	8006aca <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fcb7 	bl	8007436 <USBD_CtlError>
    break;
 8006ac8:	bf00      	nop
  }

  return ret;
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	889b      	ldrh	r3, [r3, #4]
 8006ae6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006af0:	2b40      	cmp	r3, #64	; 0x40
 8006af2:	d007      	beq.n	8006b04 <USBD_StdEPReq+0x30>
 8006af4:	2b40      	cmp	r3, #64	; 0x40
 8006af6:	f200 8140 	bhi.w	8006d7a <USBD_StdEPReq+0x2a6>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00c      	beq.n	8006b18 <USBD_StdEPReq+0x44>
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	f040 813b 	bne.w	8006d7a <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	4798      	blx	r3
 8006b12:	4603      	mov	r3, r0
 8006b14:	73fb      	strb	r3, [r7, #15]
    break;
 8006b16:	e135      	b.n	8006d84 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	785b      	ldrb	r3, [r3, #1]
 8006b1c:	2b03      	cmp	r3, #3
 8006b1e:	d007      	beq.n	8006b30 <USBD_StdEPReq+0x5c>
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	f300 8124 	bgt.w	8006d6e <USBD_StdEPReq+0x29a>
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d07b      	beq.n	8006c22 <USBD_StdEPReq+0x14e>
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d03b      	beq.n	8006ba6 <USBD_StdEPReq+0xd2>
 8006b2e:	e11e      	b.n	8006d6e <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d002      	beq.n	8006b40 <USBD_StdEPReq+0x6c>
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d016      	beq.n	8006b6c <USBD_StdEPReq+0x98>
 8006b3e:	e02c      	b.n	8006b9a <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00d      	beq.n	8006b62 <USBD_StdEPReq+0x8e>
 8006b46:	7bbb      	ldrb	r3, [r7, #14]
 8006b48:	2b80      	cmp	r3, #128	; 0x80
 8006b4a:	d00a      	beq.n	8006b62 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f004 fb47 	bl	800b1e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b56:	2180      	movs	r1, #128	; 0x80
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f004 fb43 	bl	800b1e4 <USBD_LL_StallEP>
 8006b5e:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006b60:	e020      	b.n	8006ba4 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fc66 	bl	8007436 <USBD_CtlError>
        break;
 8006b6a:	e01b      	b.n	8006ba4 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	885b      	ldrh	r3, [r3, #2]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10e      	bne.n	8006b92 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00b      	beq.n	8006b92 <USBD_StdEPReq+0xbe>
 8006b7a:	7bbb      	ldrb	r3, [r7, #14]
 8006b7c:	2b80      	cmp	r3, #128	; 0x80
 8006b7e:	d008      	beq.n	8006b92 <USBD_StdEPReq+0xbe>
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	88db      	ldrh	r3, [r3, #6]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d104      	bne.n	8006b92 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f004 fb29 	bl	800b1e4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fd1a 	bl	80075cc <USBD_CtlSendStatus>

        break;
 8006b98:	e004      	b.n	8006ba4 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fc4a 	bl	8007436 <USBD_CtlError>
        break;
 8006ba2:	bf00      	nop
      }
      break;
 8006ba4:	e0e8      	b.n	8006d78 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d002      	beq.n	8006bb6 <USBD_StdEPReq+0xe2>
 8006bb0:	2b03      	cmp	r3, #3
 8006bb2:	d016      	beq.n	8006be2 <USBD_StdEPReq+0x10e>
 8006bb4:	e02e      	b.n	8006c14 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bb6:	7bbb      	ldrb	r3, [r7, #14]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00d      	beq.n	8006bd8 <USBD_StdEPReq+0x104>
 8006bbc:	7bbb      	ldrb	r3, [r7, #14]
 8006bbe:	2b80      	cmp	r3, #128	; 0x80
 8006bc0:	d00a      	beq.n	8006bd8 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bc2:	7bbb      	ldrb	r3, [r7, #14]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f004 fb0c 	bl	800b1e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bcc:	2180      	movs	r1, #128	; 0x80
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f004 fb08 	bl	800b1e4 <USBD_LL_StallEP>
 8006bd4:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006bd6:	e023      	b.n	8006c20 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fc2b 	bl	8007436 <USBD_CtlError>
        break;
 8006be0:	e01e      	b.n	8006c20 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	885b      	ldrh	r3, [r3, #2]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d119      	bne.n	8006c1e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006bea:	7bbb      	ldrb	r3, [r7, #14]
 8006bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d004      	beq.n	8006bfe <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006bf4:	7bbb      	ldrb	r3, [r7, #14]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f004 fb12 	bl	800b222 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fce4 	bl	80075cc <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	4798      	blx	r3
        }
        break;
 8006c12:	e004      	b.n	8006c1e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fc0d 	bl	8007436 <USBD_CtlError>
        break;
 8006c1c:	e000      	b.n	8006c20 <USBD_StdEPReq+0x14c>
        break;
 8006c1e:	bf00      	nop
      }
      break;
 8006c20:	e0aa      	b.n	8006d78 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d002      	beq.n	8006c32 <USBD_StdEPReq+0x15e>
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d032      	beq.n	8006c96 <USBD_StdEPReq+0x1c2>
 8006c30:	e097      	b.n	8006d62 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c32:	7bbb      	ldrb	r3, [r7, #14]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d007      	beq.n	8006c48 <USBD_StdEPReq+0x174>
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	2b80      	cmp	r3, #128	; 0x80
 8006c3c:	d004      	beq.n	8006c48 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fbf8 	bl	8007436 <USBD_CtlError>
          break;
 8006c46:	e091      	b.n	8006d6c <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	da0b      	bge.n	8006c68 <USBD_StdEPReq+0x194>
 8006c50:	7bbb      	ldrb	r3, [r7, #14]
 8006c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c56:	4613      	mov	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	3310      	adds	r3, #16
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	4413      	add	r3, r2
 8006c64:	3304      	adds	r3, #4
 8006c66:	e00b      	b.n	8006c80 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	3304      	adds	r3, #4
 8006c80:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fc42 	bl	8007518 <USBD_CtlSendData>
        break;
 8006c94:	e06a      	b.n	8006d6c <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006c96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	da11      	bge.n	8006cc2 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ca0:	f003 020f 	and.w	r2, r3, #15
 8006ca4:	6879      	ldr	r1, [r7, #4]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	440b      	add	r3, r1
 8006cb0:	3324      	adds	r3, #36	; 0x24
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d117      	bne.n	8006ce8 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fbbb 	bl	8007436 <USBD_CtlError>
            break;
 8006cc0:	e054      	b.n	8006d6c <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	f003 020f 	and.w	r2, r3, #15
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	440b      	add	r3, r1
 8006cd4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d104      	bne.n	8006ce8 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fba8 	bl	8007436 <USBD_CtlError>
            break;
 8006ce6:	e041      	b.n	8006d6c <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ce8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	da0b      	bge.n	8006d08 <USBD_StdEPReq+0x234>
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	3310      	adds	r3, #16
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	4413      	add	r3, r2
 8006d04:	3304      	adds	r3, #4
 8006d06:	e00b      	b.n	8006d20 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d0e:	4613      	mov	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	3304      	adds	r3, #4
 8006d20:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d002      	beq.n	8006d2e <USBD_StdEPReq+0x25a>
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	2b80      	cmp	r3, #128	; 0x80
 8006d2c:	d103      	bne.n	8006d36 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2200      	movs	r2, #0
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	e00e      	b.n	8006d54 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f004 fa90 	bl	800b260 <USBD_LL_IsStallEP>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	e002      	b.n	8006d54 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2200      	movs	r2, #0
 8006d52:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	2202      	movs	r2, #2
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fbdc 	bl	8007518 <USBD_CtlSendData>
          break;
 8006d60:	e004      	b.n	8006d6c <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fb66 	bl	8007436 <USBD_CtlError>
        break;
 8006d6a:	bf00      	nop
      }
      break;
 8006d6c:	e004      	b.n	8006d78 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fb60 	bl	8007436 <USBD_CtlError>
      break;
 8006d76:	bf00      	nop
    }
    break;
 8006d78:	e004      	b.n	8006d84 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fb5a 	bl	8007436 <USBD_CtlError>
    break;
 8006d82:	bf00      	nop
  }

  return ret;
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
	...

08006d90 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	885b      	ldrh	r3, [r3, #2]
 8006daa:	0a1b      	lsrs	r3, r3, #8
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	3b01      	subs	r3, #1
 8006db0:	2b0e      	cmp	r3, #14
 8006db2:	f200 8152 	bhi.w	800705a <USBD_GetDescriptor+0x2ca>
 8006db6:	a201      	add	r2, pc, #4	; (adr r2, 8006dbc <USBD_GetDescriptor+0x2c>)
 8006db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbc:	08006e2d 	.word	0x08006e2d
 8006dc0:	08006e45 	.word	0x08006e45
 8006dc4:	08006e85 	.word	0x08006e85
 8006dc8:	0800705b 	.word	0x0800705b
 8006dcc:	0800705b 	.word	0x0800705b
 8006dd0:	08006ffb 	.word	0x08006ffb
 8006dd4:	08007027 	.word	0x08007027
 8006dd8:	0800705b 	.word	0x0800705b
 8006ddc:	0800705b 	.word	0x0800705b
 8006de0:	0800705b 	.word	0x0800705b
 8006de4:	0800705b 	.word	0x0800705b
 8006de8:	0800705b 	.word	0x0800705b
 8006dec:	0800705b 	.word	0x0800705b
 8006df0:	0800705b 	.word	0x0800705b
 8006df4:	08006df9 	.word	0x08006df9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00b      	beq.n	8006e1c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	7c12      	ldrb	r2, [r2, #16]
 8006e10:	f107 0108 	add.w	r1, r7, #8
 8006e14:	4610      	mov	r0, r2
 8006e16:	4798      	blx	r3
 8006e18:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006e1a:	e126      	b.n	800706a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fb09 	bl	8007436 <USBD_CtlError>
      err++;
 8006e24:	7afb      	ldrb	r3, [r7, #11]
 8006e26:	3301      	adds	r3, #1
 8006e28:	72fb      	strb	r3, [r7, #11]
    break;
 8006e2a:	e11e      	b.n	800706a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	7c12      	ldrb	r2, [r2, #16]
 8006e38:	f107 0108 	add.w	r1, r7, #8
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	4798      	blx	r3
 8006e40:	60f8      	str	r0, [r7, #12]
    break;
 8006e42:	e112      	b.n	800706a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	7c1b      	ldrb	r3, [r3, #16]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10d      	bne.n	8006e68 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e54:	f107 0208 	add.w	r2, r7, #8
 8006e58:	4610      	mov	r0, r2
 8006e5a:	4798      	blx	r3
 8006e5c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3301      	adds	r3, #1
 8006e62:	2202      	movs	r2, #2
 8006e64:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006e66:	e100      	b.n	800706a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	f107 0208 	add.w	r2, r7, #8
 8006e74:	4610      	mov	r0, r2
 8006e76:	4798      	blx	r3
 8006e78:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	2202      	movs	r2, #2
 8006e80:	701a      	strb	r2, [r3, #0]
    break;
 8006e82:	e0f2      	b.n	800706a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	885b      	ldrh	r3, [r3, #2]
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b05      	cmp	r3, #5
 8006e8c:	f200 80ac 	bhi.w	8006fe8 <USBD_GetDescriptor+0x258>
 8006e90:	a201      	add	r2, pc, #4	; (adr r2, 8006e98 <USBD_GetDescriptor+0x108>)
 8006e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e96:	bf00      	nop
 8006e98:	08006eb1 	.word	0x08006eb1
 8006e9c:	08006ee5 	.word	0x08006ee5
 8006ea0:	08006f19 	.word	0x08006f19
 8006ea4:	08006f4d 	.word	0x08006f4d
 8006ea8:	08006f81 	.word	0x08006f81
 8006eac:	08006fb5 	.word	0x08006fb5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00b      	beq.n	8006ed4 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	7c12      	ldrb	r2, [r2, #16]
 8006ec8:	f107 0108 	add.w	r1, r7, #8
 8006ecc:	4610      	mov	r0, r2
 8006ece:	4798      	blx	r3
 8006ed0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ed2:	e091      	b.n	8006ff8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 faad 	bl	8007436 <USBD_CtlError>
        err++;
 8006edc:	7afb      	ldrb	r3, [r7, #11]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	72fb      	strb	r3, [r7, #11]
      break;
 8006ee2:	e089      	b.n	8006ff8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00b      	beq.n	8006f08 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	7c12      	ldrb	r2, [r2, #16]
 8006efc:	f107 0108 	add.w	r1, r7, #8
 8006f00:	4610      	mov	r0, r2
 8006f02:	4798      	blx	r3
 8006f04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f06:	e077      	b.n	8006ff8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fa93 	bl	8007436 <USBD_CtlError>
        err++;
 8006f10:	7afb      	ldrb	r3, [r7, #11]
 8006f12:	3301      	adds	r3, #1
 8006f14:	72fb      	strb	r3, [r7, #11]
      break;
 8006f16:	e06f      	b.n	8006ff8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00b      	beq.n	8006f3c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	7c12      	ldrb	r2, [r2, #16]
 8006f30:	f107 0108 	add.w	r1, r7, #8
 8006f34:	4610      	mov	r0, r2
 8006f36:	4798      	blx	r3
 8006f38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f3a:	e05d      	b.n	8006ff8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fa79 	bl	8007436 <USBD_CtlError>
        err++;
 8006f44:	7afb      	ldrb	r3, [r7, #11]
 8006f46:	3301      	adds	r3, #1
 8006f48:	72fb      	strb	r3, [r7, #11]
      break;
 8006f4a:	e055      	b.n	8006ff8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00b      	beq.n	8006f70 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	7c12      	ldrb	r2, [r2, #16]
 8006f64:	f107 0108 	add.w	r1, r7, #8
 8006f68:	4610      	mov	r0, r2
 8006f6a:	4798      	blx	r3
 8006f6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f6e:	e043      	b.n	8006ff8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fa5f 	bl	8007436 <USBD_CtlError>
        err++;
 8006f78:	7afb      	ldrb	r3, [r7, #11]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	72fb      	strb	r3, [r7, #11]
      break;
 8006f7e:	e03b      	b.n	8006ff8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	7c12      	ldrb	r2, [r2, #16]
 8006f98:	f107 0108 	add.w	r1, r7, #8
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	4798      	blx	r3
 8006fa0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fa2:	e029      	b.n	8006ff8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fa45 	bl	8007436 <USBD_CtlError>
        err++;
 8006fac:	7afb      	ldrb	r3, [r7, #11]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	72fb      	strb	r3, [r7, #11]
      break;
 8006fb2:	e021      	b.n	8006ff8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00b      	beq.n	8006fd8 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	7c12      	ldrb	r2, [r2, #16]
 8006fcc:	f107 0108 	add.w	r1, r7, #8
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4798      	blx	r3
 8006fd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fd6:	e00f      	b.n	8006ff8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fa2b 	bl	8007436 <USBD_CtlError>
        err++;
 8006fe0:	7afb      	ldrb	r3, [r7, #11]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	72fb      	strb	r3, [r7, #11]
      break;
 8006fe6:	e007      	b.n	8006ff8 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fa23 	bl	8007436 <USBD_CtlError>
      err++;
 8006ff0:	7afb      	ldrb	r3, [r7, #11]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006ff6:	bf00      	nop
    }
    break;
 8006ff8:	e037      	b.n	800706a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	7c1b      	ldrb	r3, [r3, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d109      	bne.n	8007016 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800700a:	f107 0208 	add.w	r2, r7, #8
 800700e:	4610      	mov	r0, r2
 8007010:	4798      	blx	r3
 8007012:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007014:	e029      	b.n	800706a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fa0c 	bl	8007436 <USBD_CtlError>
      err++;
 800701e:	7afb      	ldrb	r3, [r7, #11]
 8007020:	3301      	adds	r3, #1
 8007022:	72fb      	strb	r3, [r7, #11]
    break;
 8007024:	e021      	b.n	800706a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	7c1b      	ldrb	r3, [r3, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10d      	bne.n	800704a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007036:	f107 0208 	add.w	r2, r7, #8
 800703a:	4610      	mov	r0, r2
 800703c:	4798      	blx	r3
 800703e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	3301      	adds	r3, #1
 8007044:	2207      	movs	r2, #7
 8007046:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007048:	e00f      	b.n	800706a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f9f2 	bl	8007436 <USBD_CtlError>
      err++;
 8007052:	7afb      	ldrb	r3, [r7, #11]
 8007054:	3301      	adds	r3, #1
 8007056:	72fb      	strb	r3, [r7, #11]
    break;
 8007058:	e007      	b.n	800706a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f9ea 	bl	8007436 <USBD_CtlError>
    err++;
 8007062:	7afb      	ldrb	r3, [r7, #11]
 8007064:	3301      	adds	r3, #1
 8007066:	72fb      	strb	r3, [r7, #11]
    break;
 8007068:	bf00      	nop
  }

  if (err != 0U)
 800706a:	7afb      	ldrb	r3, [r7, #11]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d11e      	bne.n	80070ae <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	88db      	ldrh	r3, [r3, #6]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d016      	beq.n	80070a6 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007078:	893b      	ldrh	r3, [r7, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00e      	beq.n	800709c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	88da      	ldrh	r2, [r3, #6]
 8007082:	893b      	ldrh	r3, [r7, #8]
 8007084:	4293      	cmp	r3, r2
 8007086:	bf28      	it	cs
 8007088:	4613      	movcs	r3, r2
 800708a:	b29b      	uxth	r3, r3
 800708c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800708e:	893b      	ldrh	r3, [r7, #8]
 8007090:	461a      	mov	r2, r3
 8007092:	68f9      	ldr	r1, [r7, #12]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fa3f 	bl	8007518 <USBD_CtlSendData>
 800709a:	e009      	b.n	80070b0 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f9c9 	bl	8007436 <USBD_CtlError>
 80070a4:	e004      	b.n	80070b0 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa90 	bl	80075cc <USBD_CtlSendStatus>
 80070ac:	e000      	b.n	80070b0 <USBD_GetDescriptor+0x320>
    return;
 80070ae:	bf00      	nop
    }
  }
}
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop

080070b8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	889b      	ldrh	r3, [r3, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d130      	bne.n	800712c <USBD_SetAddress+0x74>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	88db      	ldrh	r3, [r3, #6]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d12c      	bne.n	800712c <USBD_SetAddress+0x74>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	885b      	ldrh	r3, [r3, #2]
 80070d6:	2b7f      	cmp	r3, #127	; 0x7f
 80070d8:	d828      	bhi.n	800712c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	885b      	ldrh	r3, [r3, #2]
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d104      	bne.n	80070fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f99f 	bl	8007436 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f8:	e01d      	b.n	8007136 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	7bfa      	ldrb	r2, [r7, #15]
 80070fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007102:	7bfb      	ldrb	r3, [r7, #15]
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f004 f8d6 	bl	800b2b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fa5d 	bl	80075cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007112:	7bfb      	ldrb	r3, [r7, #15]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d004      	beq.n	8007122 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007120:	e009      	b.n	8007136 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800712a:	e004      	b.n	8007136 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f981 	bl	8007436 <USBD_CtlError>
  }
}
 8007134:	bf00      	nop
 8007136:	bf00      	nop
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
	...

08007140 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	885b      	ldrh	r3, [r3, #2]
 8007152:	b2da      	uxtb	r2, r3
 8007154:	4b4b      	ldr	r3, [pc, #300]	; (8007284 <USBD_SetConfig+0x144>)
 8007156:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007158:	4b4a      	ldr	r3, [pc, #296]	; (8007284 <USBD_SetConfig+0x144>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d905      	bls.n	800716c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f967 	bl	8007436 <USBD_CtlError>
    return USBD_FAIL;
 8007168:	2303      	movs	r3, #3
 800716a:	e087      	b.n	800727c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007172:	2b02      	cmp	r3, #2
 8007174:	d002      	beq.n	800717c <USBD_SetConfig+0x3c>
 8007176:	2b03      	cmp	r3, #3
 8007178:	d025      	beq.n	80071c6 <USBD_SetConfig+0x86>
 800717a:	e071      	b.n	8007260 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800717c:	4b41      	ldr	r3, [pc, #260]	; (8007284 <USBD_SetConfig+0x144>)
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d01c      	beq.n	80071be <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007184:	4b3f      	ldr	r3, [pc, #252]	; (8007284 <USBD_SetConfig+0x144>)
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800718e:	4b3d      	ldr	r3, [pc, #244]	; (8007284 <USBD_SetConfig+0x144>)
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff f96f 	bl	8006478 <USBD_SetClassConfig>
 800719a:	4603      	mov	r3, r0
 800719c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d004      	beq.n	80071ae <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f945 	bl	8007436 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80071ac:	e065      	b.n	800727a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fa0c 	bl	80075cc <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2203      	movs	r2, #3
 80071b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80071bc:	e05d      	b.n	800727a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa04 	bl	80075cc <USBD_CtlSendStatus>
    break;
 80071c4:	e059      	b.n	800727a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80071c6:	4b2f      	ldr	r3, [pc, #188]	; (8007284 <USBD_SetConfig+0x144>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d112      	bne.n	80071f4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2202      	movs	r2, #2
 80071d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80071d6:	4b2b      	ldr	r3, [pc, #172]	; (8007284 <USBD_SetConfig+0x144>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071e0:	4b28      	ldr	r3, [pc, #160]	; (8007284 <USBD_SetConfig+0x144>)
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff f962 	bl	80064b0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f9ed 	bl	80075cc <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80071f2:	e042      	b.n	800727a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80071f4:	4b23      	ldr	r3, [pc, #140]	; (8007284 <USBD_SetConfig+0x144>)
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d02a      	beq.n	8007258 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	4619      	mov	r1, r3
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff f950 	bl	80064b0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007210:	4b1c      	ldr	r3, [pc, #112]	; (8007284 <USBD_SetConfig+0x144>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	461a      	mov	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800721a:	4b1a      	ldr	r3, [pc, #104]	; (8007284 <USBD_SetConfig+0x144>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7ff f929 	bl	8006478 <USBD_SetClassConfig>
 8007226:	4603      	mov	r3, r0
 8007228:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00f      	beq.n	8007250 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f8ff 	bl	8007436 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	b2db      	uxtb	r3, r3
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7ff f935 	bl	80064b0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2202      	movs	r2, #2
 800724a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800724e:	e014      	b.n	800727a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f9bb 	bl	80075cc <USBD_CtlSendStatus>
    break;
 8007256:	e010      	b.n	800727a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f9b7 	bl	80075cc <USBD_CtlSendStatus>
    break;
 800725e:	e00c      	b.n	800727a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f8e7 	bl	8007436 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007268:	4b06      	ldr	r3, [pc, #24]	; (8007284 <USBD_SetConfig+0x144>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff f91e 	bl	80064b0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007274:	2303      	movs	r3, #3
 8007276:	73fb      	strb	r3, [r7, #15]
    break;
 8007278:	bf00      	nop
  }

  return ret;
 800727a:	7bfb      	ldrb	r3, [r7, #15]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	20000228 	.word	0x20000228

08007288 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	88db      	ldrh	r3, [r3, #6]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d004      	beq.n	80072a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f8ca 	bl	8007436 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80072a2:	e022      	b.n	80072ea <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	dc02      	bgt.n	80072b4 <USBD_GetConfig+0x2c>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	dc03      	bgt.n	80072ba <USBD_GetConfig+0x32>
 80072b2:	e015      	b.n	80072e0 <USBD_GetConfig+0x58>
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	d00b      	beq.n	80072d0 <USBD_GetConfig+0x48>
 80072b8:	e012      	b.n	80072e0 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3308      	adds	r3, #8
 80072c4:	2201      	movs	r2, #1
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f925 	bl	8007518 <USBD_CtlSendData>
      break;
 80072ce:	e00c      	b.n	80072ea <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3304      	adds	r3, #4
 80072d4:	2201      	movs	r2, #1
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f91d 	bl	8007518 <USBD_CtlSendData>
      break;
 80072de:	e004      	b.n	80072ea <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f8a7 	bl	8007436 <USBD_CtlError>
      break;
 80072e8:	bf00      	nop
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b082      	sub	sp, #8
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007302:	3b01      	subs	r3, #1
 8007304:	2b02      	cmp	r3, #2
 8007306:	d81e      	bhi.n	8007346 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	88db      	ldrh	r3, [r3, #6]
 800730c:	2b02      	cmp	r3, #2
 800730e:	d004      	beq.n	800731a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f88f 	bl	8007436 <USBD_CtlError>
      break;
 8007318:	e01a      	b.n	8007350 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007326:	2b00      	cmp	r3, #0
 8007328:	d005      	beq.n	8007336 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f043 0202 	orr.w	r2, r3, #2
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	330c      	adds	r3, #12
 800733a:	2202      	movs	r2, #2
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f8ea 	bl	8007518 <USBD_CtlSendData>
    break;
 8007344:	e004      	b.n	8007350 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f874 	bl	8007436 <USBD_CtlError>
    break;
 800734e:	bf00      	nop
  }
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	885b      	ldrh	r3, [r3, #2]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d106      	bne.n	8007378 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f92a 	bl	80075cc <USBD_CtlSendStatus>
  }
}
 8007378:	bf00      	nop
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007390:	3b01      	subs	r3, #1
 8007392:	2b02      	cmp	r3, #2
 8007394:	d80b      	bhi.n	80073ae <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	885b      	ldrh	r3, [r3, #2]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d10c      	bne.n	80073b8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f910 	bl	80075cc <USBD_CtlSendStatus>
      }
      break;
 80073ac:	e004      	b.n	80073b8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f840 	bl	8007436 <USBD_CtlError>
      break;
 80073b6:	e000      	b.n	80073ba <USBD_ClrFeature+0x3a>
      break;
 80073b8:	bf00      	nop
  }
}
 80073ba:	bf00      	nop
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b084      	sub	sp, #16
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	781a      	ldrb	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3301      	adds	r3, #1
 80073dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	781a      	ldrb	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3301      	adds	r3, #1
 80073ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f7ff fa9c 	bl	800692a <SWAPBYTE>
 80073f2:	4603      	mov	r3, r0
 80073f4:	461a      	mov	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3301      	adds	r3, #1
 80073fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	3301      	adds	r3, #1
 8007404:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f7ff fa8f 	bl	800692a <SWAPBYTE>
 800740c:	4603      	mov	r3, r0
 800740e:	461a      	mov	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3301      	adds	r3, #1
 8007418:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3301      	adds	r3, #1
 800741e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f7ff fa82 	bl	800692a <SWAPBYTE>
 8007426:	4603      	mov	r3, r0
 8007428:	461a      	mov	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	80da      	strh	r2, [r3, #6]
}
 800742e:	bf00      	nop
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b082      	sub	sp, #8
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007440:	2180      	movs	r1, #128	; 0x80
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f003 fece 	bl	800b1e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007448:	2100      	movs	r1, #0
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f003 feca 	bl	800b1e4 <USBD_LL_StallEP>
}
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007464:	2300      	movs	r3, #0
 8007466:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d036      	beq.n	80074dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007472:	6938      	ldr	r0, [r7, #16]
 8007474:	f000 f836 	bl	80074e4 <USBD_GetLen>
 8007478:	4603      	mov	r3, r0
 800747a:	3301      	adds	r3, #1
 800747c:	b29b      	uxth	r3, r3
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	b29a      	uxth	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007486:	7dfb      	ldrb	r3, [r7, #23]
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	4413      	add	r3, r2
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	7812      	ldrb	r2, [r2, #0]
 8007490:	701a      	strb	r2, [r3, #0]
  idx++;
 8007492:	7dfb      	ldrb	r3, [r7, #23]
 8007494:	3301      	adds	r3, #1
 8007496:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007498:	7dfb      	ldrb	r3, [r7, #23]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	4413      	add	r3, r2
 800749e:	2203      	movs	r2, #3
 80074a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
 80074a4:	3301      	adds	r3, #1
 80074a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80074a8:	e013      	b.n	80074d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	4413      	add	r3, r2
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	7812      	ldrb	r2, [r2, #0]
 80074b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	3301      	adds	r3, #1
 80074ba:	613b      	str	r3, [r7, #16]
    idx++;
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	3301      	adds	r3, #1
 80074c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	4413      	add	r3, r2
 80074c8:	2200      	movs	r2, #0
 80074ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80074cc:	7dfb      	ldrb	r3, [r7, #23]
 80074ce:	3301      	adds	r3, #1
 80074d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1e7      	bne.n	80074aa <USBD_GetString+0x52>
 80074da:	e000      	b.n	80074de <USBD_GetString+0x86>
    return;
 80074dc:	bf00      	nop
  }
}
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80074f4:	e005      	b.n	8007502 <USBD_GetLen+0x1e>
  {
    len++;
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	3301      	adds	r3, #1
 80074fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	3301      	adds	r3, #1
 8007500:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1f5      	bne.n	80074f6 <USBD_GetLen+0x12>
  }

  return len;
 800750a:	7bfb      	ldrb	r3, [r7, #15]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2202      	movs	r2, #2
 8007528:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	2100      	movs	r1, #0
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f003 fed9 	bl	800b2f6 <USBD_LL_Transmit>

  return USBD_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	60f8      	str	r0, [r7, #12]
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	2100      	movs	r1, #0
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f003 fec8 	bl	800b2f6 <USBD_LL_Transmit>

  return USBD_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2203      	movs	r2, #3
 8007580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	2100      	movs	r1, #0
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f003 fecc 	bl	800b338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	2100      	movs	r1, #0
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f003 febb 	bl	800b338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2204      	movs	r2, #4
 80075d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075dc:	2300      	movs	r3, #0
 80075de:	2200      	movs	r2, #0
 80075e0:	2100      	movs	r1, #0
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f003 fe87 	bl	800b2f6 <USBD_LL_Transmit>

  return USBD_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b082      	sub	sp, #8
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2205      	movs	r2, #5
 80075fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007602:	2300      	movs	r3, #0
 8007604:	2200      	movs	r2, #0
 8007606:	2100      	movs	r1, #0
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f003 fe95 	bl	800b338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	4613      	mov	r3, r2
 8007624:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007626:	2301      	movs	r3, #1
 8007628:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800762a:	2300      	movs	r3, #0
 800762c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800762e:	4b1f      	ldr	r3, [pc, #124]	; (80076ac <FATFS_LinkDriverEx+0x94>)
 8007630:	7a5b      	ldrb	r3, [r3, #9]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	d131      	bne.n	800769c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007638:	4b1c      	ldr	r3, [pc, #112]	; (80076ac <FATFS_LinkDriverEx+0x94>)
 800763a:	7a5b      	ldrb	r3, [r3, #9]
 800763c:	b2db      	uxtb	r3, r3
 800763e:	461a      	mov	r2, r3
 8007640:	4b1a      	ldr	r3, [pc, #104]	; (80076ac <FATFS_LinkDriverEx+0x94>)
 8007642:	2100      	movs	r1, #0
 8007644:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007646:	4b19      	ldr	r3, [pc, #100]	; (80076ac <FATFS_LinkDriverEx+0x94>)
 8007648:	7a5b      	ldrb	r3, [r3, #9]
 800764a:	b2db      	uxtb	r3, r3
 800764c:	4a17      	ldr	r2, [pc, #92]	; (80076ac <FATFS_LinkDriverEx+0x94>)
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007656:	4b15      	ldr	r3, [pc, #84]	; (80076ac <FATFS_LinkDriverEx+0x94>)
 8007658:	7a5b      	ldrb	r3, [r3, #9]
 800765a:	b2db      	uxtb	r3, r3
 800765c:	461a      	mov	r2, r3
 800765e:	4b13      	ldr	r3, [pc, #76]	; (80076ac <FATFS_LinkDriverEx+0x94>)
 8007660:	4413      	add	r3, r2
 8007662:	79fa      	ldrb	r2, [r7, #7]
 8007664:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007666:	4b11      	ldr	r3, [pc, #68]	; (80076ac <FATFS_LinkDriverEx+0x94>)
 8007668:	7a5b      	ldrb	r3, [r3, #9]
 800766a:	b2db      	uxtb	r3, r3
 800766c:	1c5a      	adds	r2, r3, #1
 800766e:	b2d1      	uxtb	r1, r2
 8007670:	4a0e      	ldr	r2, [pc, #56]	; (80076ac <FATFS_LinkDriverEx+0x94>)
 8007672:	7251      	strb	r1, [r2, #9]
 8007674:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007676:	7dbb      	ldrb	r3, [r7, #22]
 8007678:	3330      	adds	r3, #48	; 0x30
 800767a:	b2da      	uxtb	r2, r3
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	3301      	adds	r3, #1
 8007684:	223a      	movs	r2, #58	; 0x3a
 8007686:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	3302      	adds	r3, #2
 800768c:	222f      	movs	r2, #47	; 0x2f
 800768e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	3303      	adds	r3, #3
 8007694:	2200      	movs	r2, #0
 8007696:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007698:	2300      	movs	r3, #0
 800769a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800769c:	7dfb      	ldrb	r3, [r7, #23]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	371c      	adds	r7, #28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	2000022c 	.word	0x2000022c

080076b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80076ba:	2200      	movs	r2, #0
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff ffaa 	bl	8007618 <FATFS_LinkDriverEx>
 80076c4:	4603      	mov	r3, r0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80076ce:	b480      	push	{r7}
 80076d0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80076d2:	bf00      	nop
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076e2:	f3ef 8305 	mrs	r3, IPSR
 80076e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80076e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10f      	bne.n	800770e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076ee:	f3ef 8310 	mrs	r3, PRIMASK
 80076f2:	607b      	str	r3, [r7, #4]
  return(result);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d105      	bne.n	8007706 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076fa:	f3ef 8311 	mrs	r3, BASEPRI
 80076fe:	603b      	str	r3, [r7, #0]
  return(result);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d007      	beq.n	8007716 <osKernelInitialize+0x3a>
 8007706:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <osKernelInitialize+0x64>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b02      	cmp	r3, #2
 800770c:	d103      	bne.n	8007716 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800770e:	f06f 0305 	mvn.w	r3, #5
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	e00c      	b.n	8007730 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007716:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <osKernelInitialize+0x64>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d105      	bne.n	800772a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800771e:	4b08      	ldr	r3, [pc, #32]	; (8007740 <osKernelInitialize+0x64>)
 8007720:	2201      	movs	r2, #1
 8007722:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007724:	2300      	movs	r3, #0
 8007726:	60fb      	str	r3, [r7, #12]
 8007728:	e002      	b.n	8007730 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800772a:	f04f 33ff 	mov.w	r3, #4294967295
 800772e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007730:	68fb      	ldr	r3, [r7, #12]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	20000238 	.word	0x20000238

08007744 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800774a:	f3ef 8305 	mrs	r3, IPSR
 800774e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007750:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10f      	bne.n	8007776 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007756:	f3ef 8310 	mrs	r3, PRIMASK
 800775a:	607b      	str	r3, [r7, #4]
  return(result);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d105      	bne.n	800776e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007762:	f3ef 8311 	mrs	r3, BASEPRI
 8007766:	603b      	str	r3, [r7, #0]
  return(result);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d007      	beq.n	800777e <osKernelStart+0x3a>
 800776e:	4b0f      	ldr	r3, [pc, #60]	; (80077ac <osKernelStart+0x68>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b02      	cmp	r3, #2
 8007774:	d103      	bne.n	800777e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007776:	f06f 0305 	mvn.w	r3, #5
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	e010      	b.n	80077a0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800777e:	4b0b      	ldr	r3, [pc, #44]	; (80077ac <osKernelStart+0x68>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d109      	bne.n	800779a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007786:	f7ff ffa2 	bl	80076ce <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800778a:	4b08      	ldr	r3, [pc, #32]	; (80077ac <osKernelStart+0x68>)
 800778c:	2202      	movs	r2, #2
 800778e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007790:	f001 f8ca 	bl	8008928 <vTaskStartScheduler>
      stat = osOK;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	e002      	b.n	80077a0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800779a:	f04f 33ff 	mov.w	r3, #4294967295
 800779e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80077a0:	68fb      	ldr	r3, [r7, #12]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20000238 	.word	0x20000238

080077b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b090      	sub	sp, #64	; 0x40
 80077b4:	af04      	add	r7, sp, #16
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80077bc:	2300      	movs	r3, #0
 80077be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077c0:	f3ef 8305 	mrs	r3, IPSR
 80077c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80077c6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f040 808f 	bne.w	80078ec <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077ce:	f3ef 8310 	mrs	r3, PRIMASK
 80077d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d105      	bne.n	80077e6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077da:	f3ef 8311 	mrs	r3, BASEPRI
 80077de:	617b      	str	r3, [r7, #20]
  return(result);
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <osThreadNew+0x3e>
 80077e6:	4b44      	ldr	r3, [pc, #272]	; (80078f8 <osThreadNew+0x148>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d07e      	beq.n	80078ec <osThreadNew+0x13c>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d07b      	beq.n	80078ec <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80077f4:	2380      	movs	r3, #128	; 0x80
 80077f6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80077f8:	2318      	movs	r3, #24
 80077fa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80077fc:	2300      	movs	r3, #0
 80077fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007800:	f04f 33ff 	mov.w	r3, #4294967295
 8007804:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d045      	beq.n	8007898 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d002      	beq.n	800781a <osThreadNew+0x6a>
        name = attr->name;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d002      	beq.n	8007828 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	2b00      	cmp	r3, #0
 800782c:	d008      	beq.n	8007840 <osThreadNew+0x90>
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	2b38      	cmp	r3, #56	; 0x38
 8007832:	d805      	bhi.n	8007840 <osThreadNew+0x90>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <osThreadNew+0x94>
        return (NULL);
 8007840:	2300      	movs	r3, #0
 8007842:	e054      	b.n	80078ee <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d003      	beq.n	8007854 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	089b      	lsrs	r3, r3, #2
 8007852:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00e      	beq.n	800787a <osThreadNew+0xca>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	2bbb      	cmp	r3, #187	; 0xbb
 8007862:	d90a      	bls.n	800787a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007868:	2b00      	cmp	r3, #0
 800786a:	d006      	beq.n	800787a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <osThreadNew+0xca>
        mem = 1;
 8007874:	2301      	movs	r3, #1
 8007876:	623b      	str	r3, [r7, #32]
 8007878:	e010      	b.n	800789c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10c      	bne.n	800789c <osThreadNew+0xec>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d108      	bne.n	800789c <osThreadNew+0xec>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d104      	bne.n	800789c <osThreadNew+0xec>
          mem = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	623b      	str	r3, [r7, #32]
 8007896:	e001      	b.n	800789c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d110      	bne.n	80078c4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078aa:	9202      	str	r2, [sp, #8]
 80078ac:	9301      	str	r3, [sp, #4]
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 fe3f 	bl	800853c <xTaskCreateStatic>
 80078be:	4603      	mov	r3, r0
 80078c0:	613b      	str	r3, [r7, #16]
 80078c2:	e013      	b.n	80078ec <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d110      	bne.n	80078ec <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	f107 0310 	add.w	r3, r7, #16
 80078d2:	9301      	str	r3, [sp, #4]
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 fe90 	bl	8008602 <xTaskCreate>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d001      	beq.n	80078ec <osThreadNew+0x13c>
          hTask = NULL;
 80078e8:	2300      	movs	r3, #0
 80078ea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80078ec:	693b      	ldr	r3, [r7, #16]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3730      	adds	r7, #48	; 0x30
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20000238 	.word	0x20000238

080078fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007904:	f3ef 8305 	mrs	r3, IPSR
 8007908:	613b      	str	r3, [r7, #16]
  return(result);
 800790a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10f      	bne.n	8007930 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007910:	f3ef 8310 	mrs	r3, PRIMASK
 8007914:	60fb      	str	r3, [r7, #12]
  return(result);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d105      	bne.n	8007928 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800791c:	f3ef 8311 	mrs	r3, BASEPRI
 8007920:	60bb      	str	r3, [r7, #8]
  return(result);
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <osDelay+0x3c>
 8007928:	4b0a      	ldr	r3, [pc, #40]	; (8007954 <osDelay+0x58>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b02      	cmp	r3, #2
 800792e:	d103      	bne.n	8007938 <osDelay+0x3c>
    stat = osErrorISR;
 8007930:	f06f 0305 	mvn.w	r3, #5
 8007934:	617b      	str	r3, [r7, #20]
 8007936:	e007      	b.n	8007948 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007938:	2300      	movs	r3, #0
 800793a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d002      	beq.n	8007948 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 ffba 	bl	80088bc <vTaskDelay>
    }
  }

  return (stat);
 8007948:	697b      	ldr	r3, [r7, #20]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20000238 	.word	0x20000238

08007958 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4a07      	ldr	r2, [pc, #28]	; (8007984 <vApplicationGetIdleTaskMemory+0x2c>)
 8007968:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	4a06      	ldr	r2, [pc, #24]	; (8007988 <vApplicationGetIdleTaskMemory+0x30>)
 800796e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2280      	movs	r2, #128	; 0x80
 8007974:	601a      	str	r2, [r3, #0]
}
 8007976:	bf00      	nop
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	2000023c 	.word	0x2000023c
 8007988:	200002f8 	.word	0x200002f8

0800798c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4a07      	ldr	r2, [pc, #28]	; (80079b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800799c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	4a06      	ldr	r2, [pc, #24]	; (80079bc <vApplicationGetTimerTaskMemory+0x30>)
 80079a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079aa:	601a      	str	r2, [r3, #0]
}
 80079ac:	bf00      	nop
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	200004f8 	.word	0x200004f8
 80079bc:	200005b4 	.word	0x200005b4

080079c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f103 0208 	add.w	r2, r3, #8
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f04f 32ff 	mov.w	r2, #4294967295
 80079d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f103 0208 	add.w	r2, r3, #8
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f103 0208 	add.w	r2, r3, #8
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a0e:	bf00      	nop
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b085      	sub	sp, #20
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	601a      	str	r2, [r3, #0]
}
 8007a56:	bf00      	nop
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a62:	b480      	push	{r7}
 8007a64:	b085      	sub	sp, #20
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a78:	d103      	bne.n	8007a82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	e00c      	b.n	8007a9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	3308      	adds	r3, #8
 8007a86:	60fb      	str	r3, [r7, #12]
 8007a88:	e002      	b.n	8007a90 <vListInsert+0x2e>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d2f6      	bcs.n	8007a8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	601a      	str	r2, [r3, #0]
}
 8007ac8:	bf00      	nop
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	6892      	ldr	r2, [r2, #8]
 8007aea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6852      	ldr	r2, [r2, #4]
 8007af4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d103      	bne.n	8007b08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	1e5a      	subs	r2, r3, #1
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10c      	bne.n	8007b56 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b40:	b672      	cpsid	i
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	b662      	cpsie	i
 8007b50:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b52:	bf00      	nop
 8007b54:	e7fe      	b.n	8007b54 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007b56:	f002 f8a9 	bl	8009cac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b62:	68f9      	ldr	r1, [r7, #12]
 8007b64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b66:	fb01 f303 	mul.w	r3, r1, r3
 8007b6a:	441a      	add	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b86:	3b01      	subs	r3, #1
 8007b88:	68f9      	ldr	r1, [r7, #12]
 8007b8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b8c:	fb01 f303 	mul.w	r3, r1, r3
 8007b90:	441a      	add	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	22ff      	movs	r2, #255	; 0xff
 8007b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	22ff      	movs	r2, #255	; 0xff
 8007ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d114      	bne.n	8007bd6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d01a      	beq.n	8007bea <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	3310      	adds	r3, #16
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f001 f95d 	bl	8008e78 <xTaskRemoveFromEventList>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d012      	beq.n	8007bea <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <xQueueGenericReset+0xd0>)
 8007bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	e009      	b.n	8007bea <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	3310      	adds	r3, #16
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7ff fef0 	bl	80079c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3324      	adds	r3, #36	; 0x24
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7ff feeb 	bl	80079c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007bea:	f002 f893 	bl	8009d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007bee:	2301      	movs	r3, #1
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	e000ed04 	.word	0xe000ed04

08007bfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08e      	sub	sp, #56	; 0x38
 8007c00:	af02      	add	r7, sp, #8
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10c      	bne.n	8007c2a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c14:	b672      	cpsid	i
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	b662      	cpsie	i
 8007c24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c26:	bf00      	nop
 8007c28:	e7fe      	b.n	8007c28 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10c      	bne.n	8007c4a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	b672      	cpsid	i
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	b662      	cpsie	i
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c46:	bf00      	nop
 8007c48:	e7fe      	b.n	8007c48 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <xQueueGenericCreateStatic+0x5a>
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <xQueueGenericCreateStatic+0x5e>
 8007c56:	2301      	movs	r3, #1
 8007c58:	e000      	b.n	8007c5c <xQueueGenericCreateStatic+0x60>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10c      	bne.n	8007c7a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	b672      	cpsid	i
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	b662      	cpsie	i
 8007c74:	623b      	str	r3, [r7, #32]
}
 8007c76:	bf00      	nop
 8007c78:	e7fe      	b.n	8007c78 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <xQueueGenericCreateStatic+0x8a>
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <xQueueGenericCreateStatic+0x8e>
 8007c86:	2301      	movs	r3, #1
 8007c88:	e000      	b.n	8007c8c <xQueueGenericCreateStatic+0x90>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10c      	bne.n	8007caa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	b672      	cpsid	i
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	b662      	cpsie	i
 8007ca4:	61fb      	str	r3, [r7, #28]
}
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007caa:	2350      	movs	r3, #80	; 0x50
 8007cac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2b50      	cmp	r3, #80	; 0x50
 8007cb2:	d00c      	beq.n	8007cce <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	b672      	cpsid	i
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	b662      	cpsie	i
 8007cc8:	61bb      	str	r3, [r7, #24]
}
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007cce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00d      	beq.n	8007cf6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ce2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	4613      	mov	r3, r2
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	68b9      	ldr	r1, [r7, #8]
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 f805 	bl	8007d00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3730      	adds	r7, #48	; 0x30
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
 8007d0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d103      	bne.n	8007d1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	e002      	b.n	8007d22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d2e:	2101      	movs	r1, #1
 8007d30:	69b8      	ldr	r0, [r7, #24]
 8007d32:	f7ff fef9 	bl	8007b28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	78fa      	ldrb	r2, [r7, #3]
 8007d3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d3e:	bf00      	nop
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08e      	sub	sp, #56	; 0x38
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d56:	2300      	movs	r3, #0
 8007d58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10c      	bne.n	8007d7e <xQueueGenericSend+0x36>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	b672      	cpsid	i
 8007d6a:	f383 8811 	msr	BASEPRI, r3
 8007d6e:	f3bf 8f6f 	isb	sy
 8007d72:	f3bf 8f4f 	dsb	sy
 8007d76:	b662      	cpsie	i
 8007d78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d7a:	bf00      	nop
 8007d7c:	e7fe      	b.n	8007d7c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d103      	bne.n	8007d8c <xQueueGenericSend+0x44>
 8007d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d101      	bne.n	8007d90 <xQueueGenericSend+0x48>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e000      	b.n	8007d92 <xQueueGenericSend+0x4a>
 8007d90:	2300      	movs	r3, #0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10c      	bne.n	8007db0 <xQueueGenericSend+0x68>
	__asm volatile
 8007d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9a:	b672      	cpsid	i
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	b662      	cpsie	i
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dac:	bf00      	nop
 8007dae:	e7fe      	b.n	8007dae <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d103      	bne.n	8007dbe <xQueueGenericSend+0x76>
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d101      	bne.n	8007dc2 <xQueueGenericSend+0x7a>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e000      	b.n	8007dc4 <xQueueGenericSend+0x7c>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10c      	bne.n	8007de2 <xQueueGenericSend+0x9a>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	b672      	cpsid	i
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	b662      	cpsie	i
 8007ddc:	623b      	str	r3, [r7, #32]
}
 8007dde:	bf00      	nop
 8007de0:	e7fe      	b.n	8007de0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007de2:	f001 fa13 	bl	800920c <xTaskGetSchedulerState>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d102      	bne.n	8007df2 <xQueueGenericSend+0xaa>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <xQueueGenericSend+0xae>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e000      	b.n	8007df8 <xQueueGenericSend+0xb0>
 8007df6:	2300      	movs	r3, #0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10c      	bne.n	8007e16 <xQueueGenericSend+0xce>
	__asm volatile
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	b672      	cpsid	i
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	b662      	cpsie	i
 8007e10:	61fb      	str	r3, [r7, #28]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e16:	f001 ff49 	bl	8009cac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d302      	bcc.n	8007e2c <xQueueGenericSend+0xe4>
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d129      	bne.n	8007e80 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	68b9      	ldr	r1, [r7, #8]
 8007e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e32:	f000 fa15 	bl	8008260 <prvCopyDataToQueue>
 8007e36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d010      	beq.n	8007e62 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e42:	3324      	adds	r3, #36	; 0x24
 8007e44:	4618      	mov	r0, r3
 8007e46:	f001 f817 	bl	8008e78 <xTaskRemoveFromEventList>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d013      	beq.n	8007e78 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e50:	4b3f      	ldr	r3, [pc, #252]	; (8007f50 <xQueueGenericSend+0x208>)
 8007e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e56:	601a      	str	r2, [r3, #0]
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	e00a      	b.n	8007e78 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d007      	beq.n	8007e78 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e68:	4b39      	ldr	r3, [pc, #228]	; (8007f50 <xQueueGenericSend+0x208>)
 8007e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e78:	f001 ff4c 	bl	8009d14 <vPortExitCritical>
				return pdPASS;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e063      	b.n	8007f48 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d103      	bne.n	8007e8e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e86:	f001 ff45 	bl	8009d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	e05c      	b.n	8007f48 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d106      	bne.n	8007ea2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e94:	f107 0314 	add.w	r3, r7, #20
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f001 f853 	bl	8008f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ea2:	f001 ff37 	bl	8009d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ea6:	f000 fdb3 	bl	8008a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007eaa:	f001 feff 	bl	8009cac <vPortEnterCritical>
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007eb4:	b25b      	sxtb	r3, r3
 8007eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eba:	d103      	bne.n	8007ec4 <xQueueGenericSend+0x17c>
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eca:	b25b      	sxtb	r3, r3
 8007ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed0:	d103      	bne.n	8007eda <xQueueGenericSend+0x192>
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007eda:	f001 ff1b 	bl	8009d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ede:	1d3a      	adds	r2, r7, #4
 8007ee0:	f107 0314 	add.w	r3, r7, #20
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f001 f842 	bl	8008f70 <xTaskCheckForTimeOut>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d124      	bne.n	8007f3c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ef4:	f000 faac 	bl	8008450 <prvIsQueueFull>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d018      	beq.n	8007f30 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f00:	3310      	adds	r3, #16
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	4611      	mov	r1, r2
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 ff62 	bl	8008dd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f0e:	f000 fa37 	bl	8008380 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f12:	f000 fd8b 	bl	8008a2c <xTaskResumeAll>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f47f af7c 	bne.w	8007e16 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007f1e:	4b0c      	ldr	r3, [pc, #48]	; (8007f50 <xQueueGenericSend+0x208>)
 8007f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f24:	601a      	str	r2, [r3, #0]
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	e772      	b.n	8007e16 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f32:	f000 fa25 	bl	8008380 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f36:	f000 fd79 	bl	8008a2c <xTaskResumeAll>
 8007f3a:	e76c      	b.n	8007e16 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f3e:	f000 fa1f 	bl	8008380 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f42:	f000 fd73 	bl	8008a2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3738      	adds	r7, #56	; 0x38
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	e000ed04 	.word	0xe000ed04

08007f54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08e      	sub	sp, #56	; 0x38
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
 8007f60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10c      	bne.n	8007f86 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	b672      	cpsid	i
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	b662      	cpsie	i
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f82:	bf00      	nop
 8007f84:	e7fe      	b.n	8007f84 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d103      	bne.n	8007f94 <xQueueGenericSendFromISR+0x40>
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <xQueueGenericSendFromISR+0x44>
 8007f94:	2301      	movs	r3, #1
 8007f96:	e000      	b.n	8007f9a <xQueueGenericSendFromISR+0x46>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10c      	bne.n	8007fb8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	b672      	cpsid	i
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	b662      	cpsie	i
 8007fb2:	623b      	str	r3, [r7, #32]
}
 8007fb4:	bf00      	nop
 8007fb6:	e7fe      	b.n	8007fb6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d103      	bne.n	8007fc6 <xQueueGenericSendFromISR+0x72>
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d101      	bne.n	8007fca <xQueueGenericSendFromISR+0x76>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e000      	b.n	8007fcc <xQueueGenericSendFromISR+0x78>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10c      	bne.n	8007fea <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	b672      	cpsid	i
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	b662      	cpsie	i
 8007fe4:	61fb      	str	r3, [r7, #28]
}
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fea:	f001 ff47 	bl	8009e7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007fee:	f3ef 8211 	mrs	r2, BASEPRI
 8007ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff6:	b672      	cpsid	i
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	b662      	cpsie	i
 8008006:	61ba      	str	r2, [r7, #24]
 8008008:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800800a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800800c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008016:	429a      	cmp	r2, r3
 8008018:	d302      	bcc.n	8008020 <xQueueGenericSendFromISR+0xcc>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d12c      	bne.n	800807a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	68b9      	ldr	r1, [r7, #8]
 800802e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008030:	f000 f916 	bl	8008260 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008034:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803c:	d112      	bne.n	8008064 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008042:	2b00      	cmp	r3, #0
 8008044:	d016      	beq.n	8008074 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008048:	3324      	adds	r3, #36	; 0x24
 800804a:	4618      	mov	r0, r3
 800804c:	f000 ff14 	bl	8008e78 <xTaskRemoveFromEventList>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00e      	beq.n	8008074 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00b      	beq.n	8008074 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	e007      	b.n	8008074 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008064:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008068:	3301      	adds	r3, #1
 800806a:	b2db      	uxtb	r3, r3
 800806c:	b25a      	sxtb	r2, r3
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008074:	2301      	movs	r3, #1
 8008076:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008078:	e001      	b.n	800807e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800807a:	2300      	movs	r3, #0
 800807c:	637b      	str	r3, [r7, #52]	; 0x34
 800807e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008080:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008088:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800808a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800808c:	4618      	mov	r0, r3
 800808e:	3738      	adds	r7, #56	; 0x38
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08c      	sub	sp, #48	; 0x30
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80080a0:	2300      	movs	r3, #0
 80080a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10c      	bne.n	80080c8 <xQueueReceive+0x34>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	b672      	cpsid	i
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	b662      	cpsie	i
 80080c2:	623b      	str	r3, [r7, #32]
}
 80080c4:	bf00      	nop
 80080c6:	e7fe      	b.n	80080c6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d103      	bne.n	80080d6 <xQueueReceive+0x42>
 80080ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <xQueueReceive+0x46>
 80080d6:	2301      	movs	r3, #1
 80080d8:	e000      	b.n	80080dc <xQueueReceive+0x48>
 80080da:	2300      	movs	r3, #0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10c      	bne.n	80080fa <xQueueReceive+0x66>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	b672      	cpsid	i
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	b662      	cpsie	i
 80080f4:	61fb      	str	r3, [r7, #28]
}
 80080f6:	bf00      	nop
 80080f8:	e7fe      	b.n	80080f8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080fa:	f001 f887 	bl	800920c <xTaskGetSchedulerState>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d102      	bne.n	800810a <xQueueReceive+0x76>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <xQueueReceive+0x7a>
 800810a:	2301      	movs	r3, #1
 800810c:	e000      	b.n	8008110 <xQueueReceive+0x7c>
 800810e:	2300      	movs	r3, #0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10c      	bne.n	800812e <xQueueReceive+0x9a>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	b672      	cpsid	i
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	b662      	cpsie	i
 8008128:	61bb      	str	r3, [r7, #24]
}
 800812a:	bf00      	nop
 800812c:	e7fe      	b.n	800812c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800812e:	f001 fdbd 	bl	8009cac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008136:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	2b00      	cmp	r3, #0
 800813c:	d01f      	beq.n	800817e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800813e:	68b9      	ldr	r1, [r7, #8]
 8008140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008142:	f000 f8f7 	bl	8008334 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	1e5a      	subs	r2, r3, #1
 800814a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800814e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00f      	beq.n	8008176 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008158:	3310      	adds	r3, #16
 800815a:	4618      	mov	r0, r3
 800815c:	f000 fe8c 	bl	8008e78 <xTaskRemoveFromEventList>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008166:	4b3d      	ldr	r3, [pc, #244]	; (800825c <xQueueReceive+0x1c8>)
 8008168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008176:	f001 fdcd 	bl	8009d14 <vPortExitCritical>
				return pdPASS;
 800817a:	2301      	movs	r3, #1
 800817c:	e069      	b.n	8008252 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d103      	bne.n	800818c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008184:	f001 fdc6 	bl	8009d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008188:	2300      	movs	r3, #0
 800818a:	e062      	b.n	8008252 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800818c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d106      	bne.n	80081a0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008192:	f107 0310 	add.w	r3, r7, #16
 8008196:	4618      	mov	r0, r3
 8008198:	f000 fed4 	bl	8008f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800819c:	2301      	movs	r3, #1
 800819e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081a0:	f001 fdb8 	bl	8009d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081a4:	f000 fc34 	bl	8008a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081a8:	f001 fd80 	bl	8009cac <vPortEnterCritical>
 80081ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081b2:	b25b      	sxtb	r3, r3
 80081b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b8:	d103      	bne.n	80081c2 <xQueueReceive+0x12e>
 80081ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081c8:	b25b      	sxtb	r3, r3
 80081ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ce:	d103      	bne.n	80081d8 <xQueueReceive+0x144>
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081d8:	f001 fd9c 	bl	8009d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081dc:	1d3a      	adds	r2, r7, #4
 80081de:	f107 0310 	add.w	r3, r7, #16
 80081e2:	4611      	mov	r1, r2
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 fec3 	bl	8008f70 <xTaskCheckForTimeOut>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d123      	bne.n	8008238 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081f2:	f000 f917 	bl	8008424 <prvIsQueueEmpty>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d017      	beq.n	800822c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fe:	3324      	adds	r3, #36	; 0x24
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	4611      	mov	r1, r2
 8008204:	4618      	mov	r0, r3
 8008206:	f000 fde3 	bl	8008dd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800820a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800820c:	f000 f8b8 	bl	8008380 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008210:	f000 fc0c 	bl	8008a2c <xTaskResumeAll>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d189      	bne.n	800812e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800821a:	4b10      	ldr	r3, [pc, #64]	; (800825c <xQueueReceive+0x1c8>)
 800821c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	e780      	b.n	800812e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800822c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800822e:	f000 f8a7 	bl	8008380 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008232:	f000 fbfb 	bl	8008a2c <xTaskResumeAll>
 8008236:	e77a      	b.n	800812e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800823a:	f000 f8a1 	bl	8008380 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800823e:	f000 fbf5 	bl	8008a2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008244:	f000 f8ee 	bl	8008424 <prvIsQueueEmpty>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	f43f af6f 	beq.w	800812e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008250:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008252:	4618      	mov	r0, r3
 8008254:	3730      	adds	r7, #48	; 0x30
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	e000ed04 	.word	0xe000ed04

08008260 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800826c:	2300      	movs	r3, #0
 800826e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008274:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10d      	bne.n	800829a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d14d      	bne.n	8008322 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	4618      	mov	r0, r3
 800828c:	f000 ffdc 	bl	8009248 <xTaskPriorityDisinherit>
 8008290:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	609a      	str	r2, [r3, #8]
 8008298:	e043      	b.n	8008322 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d119      	bne.n	80082d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6858      	ldr	r0, [r3, #4]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a8:	461a      	mov	r2, r3
 80082aa:	68b9      	ldr	r1, [r7, #8]
 80082ac:	f003 fb5c 	bl	800b968 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b8:	441a      	add	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	685a      	ldr	r2, [r3, #4]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d32b      	bcc.n	8008322 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	605a      	str	r2, [r3, #4]
 80082d2:	e026      	b.n	8008322 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	68d8      	ldr	r0, [r3, #12]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082dc:	461a      	mov	r2, r3
 80082de:	68b9      	ldr	r1, [r7, #8]
 80082e0:	f003 fb42 	bl	800b968 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	68da      	ldr	r2, [r3, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ec:	425b      	negs	r3, r3
 80082ee:	441a      	add	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	68da      	ldr	r2, [r3, #12]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d207      	bcs.n	8008310 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008308:	425b      	negs	r3, r3
 800830a:	441a      	add	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b02      	cmp	r3, #2
 8008314:	d105      	bne.n	8008322 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d002      	beq.n	8008322 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	3b01      	subs	r3, #1
 8008320:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	1c5a      	adds	r2, r3, #1
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800832a:	697b      	ldr	r3, [r7, #20]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3718      	adds	r7, #24
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008342:	2b00      	cmp	r3, #0
 8008344:	d018      	beq.n	8008378 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68da      	ldr	r2, [r3, #12]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834e:	441a      	add	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68da      	ldr	r2, [r3, #12]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	429a      	cmp	r2, r3
 800835e:	d303      	bcc.n	8008368 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	68d9      	ldr	r1, [r3, #12]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008370:	461a      	mov	r2, r3
 8008372:	6838      	ldr	r0, [r7, #0]
 8008374:	f003 faf8 	bl	800b968 <memcpy>
	}
}
 8008378:	bf00      	nop
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008388:	f001 fc90 	bl	8009cac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008392:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008394:	e011      	b.n	80083ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	2b00      	cmp	r3, #0
 800839c:	d012      	beq.n	80083c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	3324      	adds	r3, #36	; 0x24
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fd68 	bl	8008e78 <xTaskRemoveFromEventList>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80083ae:	f000 fe45 	bl	800903c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	dce9      	bgt.n	8008396 <prvUnlockQueue+0x16>
 80083c2:	e000      	b.n	80083c6 <prvUnlockQueue+0x46>
					break;
 80083c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	22ff      	movs	r2, #255	; 0xff
 80083ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80083ce:	f001 fca1 	bl	8009d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80083d2:	f001 fc6b 	bl	8009cac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083de:	e011      	b.n	8008404 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d012      	beq.n	800840e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3310      	adds	r3, #16
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 fd43 	bl	8008e78 <xTaskRemoveFromEventList>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d001      	beq.n	80083fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80083f8:	f000 fe20 	bl	800903c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	3b01      	subs	r3, #1
 8008400:	b2db      	uxtb	r3, r3
 8008402:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008404:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008408:	2b00      	cmp	r3, #0
 800840a:	dce9      	bgt.n	80083e0 <prvUnlockQueue+0x60>
 800840c:	e000      	b.n	8008410 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800840e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	22ff      	movs	r2, #255	; 0xff
 8008414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008418:	f001 fc7c 	bl	8009d14 <vPortExitCritical>
}
 800841c:	bf00      	nop
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800842c:	f001 fc3e 	bl	8009cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008434:	2b00      	cmp	r3, #0
 8008436:	d102      	bne.n	800843e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008438:	2301      	movs	r3, #1
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	e001      	b.n	8008442 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800843e:	2300      	movs	r3, #0
 8008440:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008442:	f001 fc67 	bl	8009d14 <vPortExitCritical>

	return xReturn;
 8008446:	68fb      	ldr	r3, [r7, #12]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008458:	f001 fc28 	bl	8009cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008464:	429a      	cmp	r2, r3
 8008466:	d102      	bne.n	800846e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008468:	2301      	movs	r3, #1
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	e001      	b.n	8008472 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800846e:	2300      	movs	r3, #0
 8008470:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008472:	f001 fc4f 	bl	8009d14 <vPortExitCritical>

	return xReturn;
 8008476:	68fb      	ldr	r3, [r7, #12]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800848a:	2300      	movs	r3, #0
 800848c:	60fb      	str	r3, [r7, #12]
 800848e:	e014      	b.n	80084ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008490:	4a0f      	ldr	r2, [pc, #60]	; (80084d0 <vQueueAddToRegistry+0x50>)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10b      	bne.n	80084b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800849c:	490c      	ldr	r1, [pc, #48]	; (80084d0 <vQueueAddToRegistry+0x50>)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	683a      	ldr	r2, [r7, #0]
 80084a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80084a6:	4a0a      	ldr	r2, [pc, #40]	; (80084d0 <vQueueAddToRegistry+0x50>)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	00db      	lsls	r3, r3, #3
 80084ac:	4413      	add	r3, r2
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80084b2:	e006      	b.n	80084c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	3301      	adds	r3, #1
 80084b8:	60fb      	str	r3, [r7, #12]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2b07      	cmp	r3, #7
 80084be:	d9e7      	bls.n	8008490 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80084c0:	bf00      	nop
 80084c2:	bf00      	nop
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	20004d58 	.word	0x20004d58

080084d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80084e4:	f001 fbe2 	bl	8009cac <vPortEnterCritical>
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084ee:	b25b      	sxtb	r3, r3
 80084f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f4:	d103      	bne.n	80084fe <vQueueWaitForMessageRestricted+0x2a>
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008504:	b25b      	sxtb	r3, r3
 8008506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850a:	d103      	bne.n	8008514 <vQueueWaitForMessageRestricted+0x40>
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008514:	f001 fbfe 	bl	8009d14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851c:	2b00      	cmp	r3, #0
 800851e:	d106      	bne.n	800852e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	3324      	adds	r3, #36	; 0x24
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	68b9      	ldr	r1, [r7, #8]
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fc77 	bl	8008e1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800852e:	6978      	ldr	r0, [r7, #20]
 8008530:	f7ff ff26 	bl	8008380 <prvUnlockQueue>
	}
 8008534:	bf00      	nop
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800853c:	b580      	push	{r7, lr}
 800853e:	b08e      	sub	sp, #56	; 0x38
 8008540:	af04      	add	r7, sp, #16
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800854a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10c      	bne.n	800856a <xTaskCreateStatic+0x2e>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008554:	b672      	cpsid	i
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	b662      	cpsie	i
 8008564:	623b      	str	r3, [r7, #32]
}
 8008566:	bf00      	nop
 8008568:	e7fe      	b.n	8008568 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800856a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10c      	bne.n	800858a <xTaskCreateStatic+0x4e>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	b672      	cpsid	i
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	b662      	cpsie	i
 8008584:	61fb      	str	r3, [r7, #28]
}
 8008586:	bf00      	nop
 8008588:	e7fe      	b.n	8008588 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800858a:	23bc      	movs	r3, #188	; 0xbc
 800858c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	2bbc      	cmp	r3, #188	; 0xbc
 8008592:	d00c      	beq.n	80085ae <xTaskCreateStatic+0x72>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	b672      	cpsid	i
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	b662      	cpsie	i
 80085a8:	61bb      	str	r3, [r7, #24]
}
 80085aa:	bf00      	nop
 80085ac:	e7fe      	b.n	80085ac <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80085ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80085b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d01e      	beq.n	80085f4 <xTaskCreateStatic+0xb8>
 80085b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d01b      	beq.n	80085f4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c8:	2202      	movs	r2, #2
 80085ca:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085ce:	2300      	movs	r3, #0
 80085d0:	9303      	str	r3, [sp, #12]
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	9302      	str	r3, [sp, #8]
 80085d6:	f107 0314 	add.w	r3, r7, #20
 80085da:	9301      	str	r3, [sp, #4]
 80085dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	68b9      	ldr	r1, [r7, #8]
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f000 f850 	bl	800868c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085ee:	f000 f8f5 	bl	80087dc <prvAddNewTaskToReadyList>
 80085f2:	e001      	b.n	80085f8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80085f4:	2300      	movs	r3, #0
 80085f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80085f8:	697b      	ldr	r3, [r7, #20]
	}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3728      	adds	r7, #40	; 0x28
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008602:	b580      	push	{r7, lr}
 8008604:	b08c      	sub	sp, #48	; 0x30
 8008606:	af04      	add	r7, sp, #16
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	603b      	str	r3, [r7, #0]
 800860e:	4613      	mov	r3, r2
 8008610:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008612:	88fb      	ldrh	r3, [r7, #6]
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4618      	mov	r0, r3
 8008618:	f001 fc74 	bl	8009f04 <pvPortMalloc>
 800861c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00e      	beq.n	8008642 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008624:	20bc      	movs	r0, #188	; 0xbc
 8008626:	f001 fc6d 	bl	8009f04 <pvPortMalloc>
 800862a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d003      	beq.n	800863a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	631a      	str	r2, [r3, #48]	; 0x30
 8008638:	e005      	b.n	8008646 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800863a:	6978      	ldr	r0, [r7, #20]
 800863c:	f001 fd2c 	bl	800a098 <vPortFree>
 8008640:	e001      	b.n	8008646 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d017      	beq.n	800867c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008654:	88fa      	ldrh	r2, [r7, #6]
 8008656:	2300      	movs	r3, #0
 8008658:	9303      	str	r3, [sp, #12]
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	9302      	str	r3, [sp, #8]
 800865e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	68b9      	ldr	r1, [r7, #8]
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 f80e 	bl	800868c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008670:	69f8      	ldr	r0, [r7, #28]
 8008672:	f000 f8b3 	bl	80087dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008676:	2301      	movs	r3, #1
 8008678:	61bb      	str	r3, [r7, #24]
 800867a:	e002      	b.n	8008682 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800867c:	f04f 33ff 	mov.w	r3, #4294967295
 8008680:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008682:	69bb      	ldr	r3, [r7, #24]
	}
 8008684:	4618      	mov	r0, r3
 8008686:	3720      	adds	r7, #32
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
 8008698:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	461a      	mov	r2, r3
 80086a4:	21a5      	movs	r1, #165	; 0xa5
 80086a6:	f003 f96d 	bl	800b984 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80086b4:	440b      	add	r3, r1
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	f023 0307 	bic.w	r3, r3, #7
 80086c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00c      	beq.n	80086e8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	b672      	cpsid	i
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	b662      	cpsie	i
 80086e2:	617b      	str	r3, [r7, #20]
}
 80086e4:	bf00      	nop
 80086e6:	e7fe      	b.n	80086e6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d01f      	beq.n	800872e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086ee:	2300      	movs	r3, #0
 80086f0:	61fb      	str	r3, [r7, #28]
 80086f2:	e012      	b.n	800871a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	4413      	add	r3, r2
 80086fa:	7819      	ldrb	r1, [r3, #0]
 80086fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	4413      	add	r3, r2
 8008702:	3334      	adds	r3, #52	; 0x34
 8008704:	460a      	mov	r2, r1
 8008706:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	4413      	add	r3, r2
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d006      	beq.n	8008722 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	3301      	adds	r3, #1
 8008718:	61fb      	str	r3, [r7, #28]
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	2b0f      	cmp	r3, #15
 800871e:	d9e9      	bls.n	80086f4 <prvInitialiseNewTask+0x68>
 8008720:	e000      	b.n	8008724 <prvInitialiseNewTask+0x98>
			{
				break;
 8008722:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008726:	2200      	movs	r2, #0
 8008728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800872c:	e003      	b.n	8008736 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800872e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008738:	2b37      	cmp	r3, #55	; 0x37
 800873a:	d901      	bls.n	8008740 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800873c:	2337      	movs	r3, #55	; 0x37
 800873e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008744:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800874a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800874c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874e:	2200      	movs	r2, #0
 8008750:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008754:	3304      	adds	r3, #4
 8008756:	4618      	mov	r0, r3
 8008758:	f7ff f952 	bl	8007a00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800875c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875e:	3318      	adds	r3, #24
 8008760:	4618      	mov	r0, r3
 8008762:	f7ff f94d 	bl	8007a00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800876a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008774:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800877a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800877c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877e:	2200      	movs	r2, #0
 8008780:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008786:	2200      	movs	r2, #0
 8008788:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800878c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878e:	3354      	adds	r3, #84	; 0x54
 8008790:	2260      	movs	r2, #96	; 0x60
 8008792:	2100      	movs	r1, #0
 8008794:	4618      	mov	r0, r3
 8008796:	f003 f8f5 	bl	800b984 <memset>
 800879a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879c:	4a0c      	ldr	r2, [pc, #48]	; (80087d0 <prvInitialiseNewTask+0x144>)
 800879e:	659a      	str	r2, [r3, #88]	; 0x58
 80087a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a2:	4a0c      	ldr	r2, [pc, #48]	; (80087d4 <prvInitialiseNewTask+0x148>)
 80087a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	4a0b      	ldr	r2, [pc, #44]	; (80087d8 <prvInitialiseNewTask+0x14c>)
 80087aa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	68f9      	ldr	r1, [r7, #12]
 80087b0:	69b8      	ldr	r0, [r7, #24]
 80087b2:	f001 f96b 	bl	8009a8c <pxPortInitialiseStack>
 80087b6:	4602      	mov	r2, r0
 80087b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80087bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d002      	beq.n	80087c8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80087c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087c8:	bf00      	nop
 80087ca:	3720      	adds	r7, #32
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	0800bd04 	.word	0x0800bd04
 80087d4:	0800bd24 	.word	0x0800bd24
 80087d8:	0800bce4 	.word	0x0800bce4

080087dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80087e4:	f001 fa62 	bl	8009cac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80087e8:	4b2d      	ldr	r3, [pc, #180]	; (80088a0 <prvAddNewTaskToReadyList+0xc4>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3301      	adds	r3, #1
 80087ee:	4a2c      	ldr	r2, [pc, #176]	; (80088a0 <prvAddNewTaskToReadyList+0xc4>)
 80087f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80087f2:	4b2c      	ldr	r3, [pc, #176]	; (80088a4 <prvAddNewTaskToReadyList+0xc8>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d109      	bne.n	800880e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80087fa:	4a2a      	ldr	r2, [pc, #168]	; (80088a4 <prvAddNewTaskToReadyList+0xc8>)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008800:	4b27      	ldr	r3, [pc, #156]	; (80088a0 <prvAddNewTaskToReadyList+0xc4>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d110      	bne.n	800882a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008808:	f000 fc3c 	bl	8009084 <prvInitialiseTaskLists>
 800880c:	e00d      	b.n	800882a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800880e:	4b26      	ldr	r3, [pc, #152]	; (80088a8 <prvAddNewTaskToReadyList+0xcc>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d109      	bne.n	800882a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008816:	4b23      	ldr	r3, [pc, #140]	; (80088a4 <prvAddNewTaskToReadyList+0xc8>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008820:	429a      	cmp	r2, r3
 8008822:	d802      	bhi.n	800882a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008824:	4a1f      	ldr	r2, [pc, #124]	; (80088a4 <prvAddNewTaskToReadyList+0xc8>)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800882a:	4b20      	ldr	r3, [pc, #128]	; (80088ac <prvAddNewTaskToReadyList+0xd0>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3301      	adds	r3, #1
 8008830:	4a1e      	ldr	r2, [pc, #120]	; (80088ac <prvAddNewTaskToReadyList+0xd0>)
 8008832:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008834:	4b1d      	ldr	r3, [pc, #116]	; (80088ac <prvAddNewTaskToReadyList+0xd0>)
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008840:	4b1b      	ldr	r3, [pc, #108]	; (80088b0 <prvAddNewTaskToReadyList+0xd4>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	429a      	cmp	r2, r3
 8008846:	d903      	bls.n	8008850 <prvAddNewTaskToReadyList+0x74>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884c:	4a18      	ldr	r2, [pc, #96]	; (80088b0 <prvAddNewTaskToReadyList+0xd4>)
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008854:	4613      	mov	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4a15      	ldr	r2, [pc, #84]	; (80088b4 <prvAddNewTaskToReadyList+0xd8>)
 800885e:	441a      	add	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	3304      	adds	r3, #4
 8008864:	4619      	mov	r1, r3
 8008866:	4610      	mov	r0, r2
 8008868:	f7ff f8d7 	bl	8007a1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800886c:	f001 fa52 	bl	8009d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008870:	4b0d      	ldr	r3, [pc, #52]	; (80088a8 <prvAddNewTaskToReadyList+0xcc>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00e      	beq.n	8008896 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008878:	4b0a      	ldr	r3, [pc, #40]	; (80088a4 <prvAddNewTaskToReadyList+0xc8>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008882:	429a      	cmp	r2, r3
 8008884:	d207      	bcs.n	8008896 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008886:	4b0c      	ldr	r3, [pc, #48]	; (80088b8 <prvAddNewTaskToReadyList+0xdc>)
 8008888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008896:	bf00      	nop
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	20000e88 	.word	0x20000e88
 80088a4:	200009b4 	.word	0x200009b4
 80088a8:	20000e94 	.word	0x20000e94
 80088ac:	20000ea4 	.word	0x20000ea4
 80088b0:	20000e90 	.word	0x20000e90
 80088b4:	200009b8 	.word	0x200009b8
 80088b8:	e000ed04 	.word	0xe000ed04

080088bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d019      	beq.n	8008902 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80088ce:	4b14      	ldr	r3, [pc, #80]	; (8008920 <vTaskDelay+0x64>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00c      	beq.n	80088f0 <vTaskDelay+0x34>
	__asm volatile
 80088d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088da:	b672      	cpsid	i
 80088dc:	f383 8811 	msr	BASEPRI, r3
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	b662      	cpsie	i
 80088ea:	60bb      	str	r3, [r7, #8]
}
 80088ec:	bf00      	nop
 80088ee:	e7fe      	b.n	80088ee <vTaskDelay+0x32>
			vTaskSuspendAll();
 80088f0:	f000 f88e 	bl	8008a10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088f4:	2100      	movs	r1, #0
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fd18 	bl	800932c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80088fc:	f000 f896 	bl	8008a2c <xTaskResumeAll>
 8008900:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d107      	bne.n	8008918 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008908:	4b06      	ldr	r3, [pc, #24]	; (8008924 <vTaskDelay+0x68>)
 800890a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008918:	bf00      	nop
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	20000eb0 	.word	0x20000eb0
 8008924:	e000ed04 	.word	0xe000ed04

08008928 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b08a      	sub	sp, #40	; 0x28
 800892c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800892e:	2300      	movs	r3, #0
 8008930:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008932:	2300      	movs	r3, #0
 8008934:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008936:	463a      	mov	r2, r7
 8008938:	1d39      	adds	r1, r7, #4
 800893a:	f107 0308 	add.w	r3, r7, #8
 800893e:	4618      	mov	r0, r3
 8008940:	f7ff f80a 	bl	8007958 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	9202      	str	r2, [sp, #8]
 800894c:	9301      	str	r3, [sp, #4]
 800894e:	2300      	movs	r3, #0
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	2300      	movs	r3, #0
 8008954:	460a      	mov	r2, r1
 8008956:	4926      	ldr	r1, [pc, #152]	; (80089f0 <vTaskStartScheduler+0xc8>)
 8008958:	4826      	ldr	r0, [pc, #152]	; (80089f4 <vTaskStartScheduler+0xcc>)
 800895a:	f7ff fdef 	bl	800853c <xTaskCreateStatic>
 800895e:	4603      	mov	r3, r0
 8008960:	4a25      	ldr	r2, [pc, #148]	; (80089f8 <vTaskStartScheduler+0xd0>)
 8008962:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008964:	4b24      	ldr	r3, [pc, #144]	; (80089f8 <vTaskStartScheduler+0xd0>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d002      	beq.n	8008972 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800896c:	2301      	movs	r3, #1
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	e001      	b.n	8008976 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008972:	2300      	movs	r3, #0
 8008974:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d102      	bne.n	8008982 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800897c:	f000 fd2a 	bl	80093d4 <xTimerCreateTimerTask>
 8008980:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d11d      	bne.n	80089c4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	b672      	cpsid	i
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	b662      	cpsie	i
 800899c:	613b      	str	r3, [r7, #16]
}
 800899e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089a0:	4b16      	ldr	r3, [pc, #88]	; (80089fc <vTaskStartScheduler+0xd4>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3354      	adds	r3, #84	; 0x54
 80089a6:	4a16      	ldr	r2, [pc, #88]	; (8008a00 <vTaskStartScheduler+0xd8>)
 80089a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80089aa:	4b16      	ldr	r3, [pc, #88]	; (8008a04 <vTaskStartScheduler+0xdc>)
 80089ac:	f04f 32ff 	mov.w	r2, #4294967295
 80089b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80089b2:	4b15      	ldr	r3, [pc, #84]	; (8008a08 <vTaskStartScheduler+0xe0>)
 80089b4:	2201      	movs	r2, #1
 80089b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80089b8:	4b14      	ldr	r3, [pc, #80]	; (8008a0c <vTaskStartScheduler+0xe4>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80089be:	f001 f8f7 	bl	8009bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80089c2:	e010      	b.n	80089e6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ca:	d10c      	bne.n	80089e6 <vTaskStartScheduler+0xbe>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d0:	b672      	cpsid	i
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	b662      	cpsie	i
 80089e0:	60fb      	str	r3, [r7, #12]
}
 80089e2:	bf00      	nop
 80089e4:	e7fe      	b.n	80089e4 <vTaskStartScheduler+0xbc>
}
 80089e6:	bf00      	nop
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	0800bc0c 	.word	0x0800bc0c
 80089f4:	08009055 	.word	0x08009055
 80089f8:	20000eac 	.word	0x20000eac
 80089fc:	200009b4 	.word	0x200009b4
 8008a00:	200001a8 	.word	0x200001a8
 8008a04:	20000ea8 	.word	0x20000ea8
 8008a08:	20000e94 	.word	0x20000e94
 8008a0c:	20000e8c 	.word	0x20000e8c

08008a10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a10:	b480      	push	{r7}
 8008a12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008a14:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <vTaskSuspendAll+0x18>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	4a03      	ldr	r2, [pc, #12]	; (8008a28 <vTaskSuspendAll+0x18>)
 8008a1c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008a1e:	bf00      	nop
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	20000eb0 	.word	0x20000eb0

08008a2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a36:	2300      	movs	r3, #0
 8008a38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a3a:	4b43      	ldr	r3, [pc, #268]	; (8008b48 <xTaskResumeAll+0x11c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10c      	bne.n	8008a5c <xTaskResumeAll+0x30>
	__asm volatile
 8008a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a46:	b672      	cpsid	i
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	b662      	cpsie	i
 8008a56:	603b      	str	r3, [r7, #0]
}
 8008a58:	bf00      	nop
 8008a5a:	e7fe      	b.n	8008a5a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a5c:	f001 f926 	bl	8009cac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a60:	4b39      	ldr	r3, [pc, #228]	; (8008b48 <xTaskResumeAll+0x11c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	3b01      	subs	r3, #1
 8008a66:	4a38      	ldr	r2, [pc, #224]	; (8008b48 <xTaskResumeAll+0x11c>)
 8008a68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a6a:	4b37      	ldr	r3, [pc, #220]	; (8008b48 <xTaskResumeAll+0x11c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d162      	bne.n	8008b38 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a72:	4b36      	ldr	r3, [pc, #216]	; (8008b4c <xTaskResumeAll+0x120>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d05e      	beq.n	8008b38 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a7a:	e02f      	b.n	8008adc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a7c:	4b34      	ldr	r3, [pc, #208]	; (8008b50 <xTaskResumeAll+0x124>)
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	3318      	adds	r3, #24
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7ff f823 	bl	8007ad4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3304      	adds	r3, #4
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7ff f81e 	bl	8007ad4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9c:	4b2d      	ldr	r3, [pc, #180]	; (8008b54 <xTaskResumeAll+0x128>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d903      	bls.n	8008aac <xTaskResumeAll+0x80>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa8:	4a2a      	ldr	r2, [pc, #168]	; (8008b54 <xTaskResumeAll+0x128>)
 8008aaa:	6013      	str	r3, [r2, #0]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4413      	add	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4a27      	ldr	r2, [pc, #156]	; (8008b58 <xTaskResumeAll+0x12c>)
 8008aba:	441a      	add	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	3304      	adds	r3, #4
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4610      	mov	r0, r2
 8008ac4:	f7fe ffa9 	bl	8007a1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008acc:	4b23      	ldr	r3, [pc, #140]	; (8008b5c <xTaskResumeAll+0x130>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d302      	bcc.n	8008adc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008ad6:	4b22      	ldr	r3, [pc, #136]	; (8008b60 <xTaskResumeAll+0x134>)
 8008ad8:	2201      	movs	r2, #1
 8008ada:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008adc:	4b1c      	ldr	r3, [pc, #112]	; (8008b50 <xTaskResumeAll+0x124>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1cb      	bne.n	8008a7c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008aea:	f000 fb6f 	bl	80091cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008aee:	4b1d      	ldr	r3, [pc, #116]	; (8008b64 <xTaskResumeAll+0x138>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d010      	beq.n	8008b1c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008afa:	f000 f847 	bl	8008b8c <xTaskIncrementTick>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008b04:	4b16      	ldr	r3, [pc, #88]	; (8008b60 <xTaskResumeAll+0x134>)
 8008b06:	2201      	movs	r2, #1
 8008b08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1f1      	bne.n	8008afa <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008b16:	4b13      	ldr	r3, [pc, #76]	; (8008b64 <xTaskResumeAll+0x138>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b1c:	4b10      	ldr	r3, [pc, #64]	; (8008b60 <xTaskResumeAll+0x134>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d009      	beq.n	8008b38 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b24:	2301      	movs	r3, #1
 8008b26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b28:	4b0f      	ldr	r3, [pc, #60]	; (8008b68 <xTaskResumeAll+0x13c>)
 8008b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b2e:	601a      	str	r2, [r3, #0]
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b38:	f001 f8ec 	bl	8009d14 <vPortExitCritical>

	return xAlreadyYielded;
 8008b3c:	68bb      	ldr	r3, [r7, #8]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20000eb0 	.word	0x20000eb0
 8008b4c:	20000e88 	.word	0x20000e88
 8008b50:	20000e48 	.word	0x20000e48
 8008b54:	20000e90 	.word	0x20000e90
 8008b58:	200009b8 	.word	0x200009b8
 8008b5c:	200009b4 	.word	0x200009b4
 8008b60:	20000e9c 	.word	0x20000e9c
 8008b64:	20000e98 	.word	0x20000e98
 8008b68:	e000ed04 	.word	0xe000ed04

08008b6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b72:	4b05      	ldr	r3, [pc, #20]	; (8008b88 <xTaskGetTickCount+0x1c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b78:	687b      	ldr	r3, [r7, #4]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	20000e8c 	.word	0x20000e8c

08008b8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b92:	2300      	movs	r3, #0
 8008b94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b96:	4b50      	ldr	r3, [pc, #320]	; (8008cd8 <xTaskIncrementTick+0x14c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f040 808b 	bne.w	8008cb6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ba0:	4b4e      	ldr	r3, [pc, #312]	; (8008cdc <xTaskIncrementTick+0x150>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ba8:	4a4c      	ldr	r2, [pc, #304]	; (8008cdc <xTaskIncrementTick+0x150>)
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d122      	bne.n	8008bfa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008bb4:	4b4a      	ldr	r3, [pc, #296]	; (8008ce0 <xTaskIncrementTick+0x154>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00c      	beq.n	8008bd8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc2:	b672      	cpsid	i
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	b662      	cpsie	i
 8008bd2:	603b      	str	r3, [r7, #0]
}
 8008bd4:	bf00      	nop
 8008bd6:	e7fe      	b.n	8008bd6 <xTaskIncrementTick+0x4a>
 8008bd8:	4b41      	ldr	r3, [pc, #260]	; (8008ce0 <xTaskIncrementTick+0x154>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	60fb      	str	r3, [r7, #12]
 8008bde:	4b41      	ldr	r3, [pc, #260]	; (8008ce4 <xTaskIncrementTick+0x158>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a3f      	ldr	r2, [pc, #252]	; (8008ce0 <xTaskIncrementTick+0x154>)
 8008be4:	6013      	str	r3, [r2, #0]
 8008be6:	4a3f      	ldr	r2, [pc, #252]	; (8008ce4 <xTaskIncrementTick+0x158>)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6013      	str	r3, [r2, #0]
 8008bec:	4b3e      	ldr	r3, [pc, #248]	; (8008ce8 <xTaskIncrementTick+0x15c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	4a3d      	ldr	r2, [pc, #244]	; (8008ce8 <xTaskIncrementTick+0x15c>)
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	f000 fae9 	bl	80091cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008bfa:	4b3c      	ldr	r3, [pc, #240]	; (8008cec <xTaskIncrementTick+0x160>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d349      	bcc.n	8008c98 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c04:	4b36      	ldr	r3, [pc, #216]	; (8008ce0 <xTaskIncrementTick+0x154>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d104      	bne.n	8008c18 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c0e:	4b37      	ldr	r3, [pc, #220]	; (8008cec <xTaskIncrementTick+0x160>)
 8008c10:	f04f 32ff 	mov.w	r2, #4294967295
 8008c14:	601a      	str	r2, [r3, #0]
					break;
 8008c16:	e03f      	b.n	8008c98 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c18:	4b31      	ldr	r3, [pc, #196]	; (8008ce0 <xTaskIncrementTick+0x154>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c28:	693a      	ldr	r2, [r7, #16]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d203      	bcs.n	8008c38 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c30:	4a2e      	ldr	r2, [pc, #184]	; (8008cec <xTaskIncrementTick+0x160>)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c36:	e02f      	b.n	8008c98 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	3304      	adds	r3, #4
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fe ff49 	bl	8007ad4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d004      	beq.n	8008c54 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	3318      	adds	r3, #24
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fe ff40 	bl	8007ad4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c58:	4b25      	ldr	r3, [pc, #148]	; (8008cf0 <xTaskIncrementTick+0x164>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d903      	bls.n	8008c68 <xTaskIncrementTick+0xdc>
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c64:	4a22      	ldr	r2, [pc, #136]	; (8008cf0 <xTaskIncrementTick+0x164>)
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4a1f      	ldr	r2, [pc, #124]	; (8008cf4 <xTaskIncrementTick+0x168>)
 8008c76:	441a      	add	r2, r3
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4610      	mov	r0, r2
 8008c80:	f7fe fecb 	bl	8007a1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c88:	4b1b      	ldr	r3, [pc, #108]	; (8008cf8 <xTaskIncrementTick+0x16c>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d3b8      	bcc.n	8008c04 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008c92:	2301      	movs	r3, #1
 8008c94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c96:	e7b5      	b.n	8008c04 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c98:	4b17      	ldr	r3, [pc, #92]	; (8008cf8 <xTaskIncrementTick+0x16c>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9e:	4915      	ldr	r1, [pc, #84]	; (8008cf4 <xTaskIncrementTick+0x168>)
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	440b      	add	r3, r1
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d907      	bls.n	8008cc0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	617b      	str	r3, [r7, #20]
 8008cb4:	e004      	b.n	8008cc0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008cb6:	4b11      	ldr	r3, [pc, #68]	; (8008cfc <xTaskIncrementTick+0x170>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	4a0f      	ldr	r2, [pc, #60]	; (8008cfc <xTaskIncrementTick+0x170>)
 8008cbe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008cc0:	4b0f      	ldr	r3, [pc, #60]	; (8008d00 <xTaskIncrementTick+0x174>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008ccc:	697b      	ldr	r3, [r7, #20]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	20000eb0 	.word	0x20000eb0
 8008cdc:	20000e8c 	.word	0x20000e8c
 8008ce0:	20000e40 	.word	0x20000e40
 8008ce4:	20000e44 	.word	0x20000e44
 8008ce8:	20000ea0 	.word	0x20000ea0
 8008cec:	20000ea8 	.word	0x20000ea8
 8008cf0:	20000e90 	.word	0x20000e90
 8008cf4:	200009b8 	.word	0x200009b8
 8008cf8:	200009b4 	.word	0x200009b4
 8008cfc:	20000e98 	.word	0x20000e98
 8008d00:	20000e9c 	.word	0x20000e9c

08008d04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d0a:	4b2b      	ldr	r3, [pc, #172]	; (8008db8 <vTaskSwitchContext+0xb4>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d003      	beq.n	8008d1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d12:	4b2a      	ldr	r3, [pc, #168]	; (8008dbc <vTaskSwitchContext+0xb8>)
 8008d14:	2201      	movs	r2, #1
 8008d16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d18:	e048      	b.n	8008dac <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008d1a:	4b28      	ldr	r3, [pc, #160]	; (8008dbc <vTaskSwitchContext+0xb8>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d20:	4b27      	ldr	r3, [pc, #156]	; (8008dc0 <vTaskSwitchContext+0xbc>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	60fb      	str	r3, [r7, #12]
 8008d26:	e012      	b.n	8008d4e <vTaskSwitchContext+0x4a>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10c      	bne.n	8008d48 <vTaskSwitchContext+0x44>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d32:	b672      	cpsid	i
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	b662      	cpsie	i
 8008d42:	607b      	str	r3, [r7, #4]
}
 8008d44:	bf00      	nop
 8008d46:	e7fe      	b.n	8008d46 <vTaskSwitchContext+0x42>
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	60fb      	str	r3, [r7, #12]
 8008d4e:	491d      	ldr	r1, [pc, #116]	; (8008dc4 <vTaskSwitchContext+0xc0>)
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	4613      	mov	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4413      	add	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	440b      	add	r3, r1
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0e2      	beq.n	8008d28 <vTaskSwitchContext+0x24>
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	4613      	mov	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4a15      	ldr	r2, [pc, #84]	; (8008dc4 <vTaskSwitchContext+0xc0>)
 8008d6e:	4413      	add	r3, r2
 8008d70:	60bb      	str	r3, [r7, #8]
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	605a      	str	r2, [r3, #4]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	685a      	ldr	r2, [r3, #4]
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	3308      	adds	r3, #8
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d104      	bne.n	8008d92 <vTaskSwitchContext+0x8e>
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	685a      	ldr	r2, [r3, #4]
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	605a      	str	r2, [r3, #4]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	4a0b      	ldr	r2, [pc, #44]	; (8008dc8 <vTaskSwitchContext+0xc4>)
 8008d9a:	6013      	str	r3, [r2, #0]
 8008d9c:	4a08      	ldr	r2, [pc, #32]	; (8008dc0 <vTaskSwitchContext+0xbc>)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008da2:	4b09      	ldr	r3, [pc, #36]	; (8008dc8 <vTaskSwitchContext+0xc4>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3354      	adds	r3, #84	; 0x54
 8008da8:	4a08      	ldr	r2, [pc, #32]	; (8008dcc <vTaskSwitchContext+0xc8>)
 8008daa:	6013      	str	r3, [r2, #0]
}
 8008dac:	bf00      	nop
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	20000eb0 	.word	0x20000eb0
 8008dbc:	20000e9c 	.word	0x20000e9c
 8008dc0:	20000e90 	.word	0x20000e90
 8008dc4:	200009b8 	.word	0x200009b8
 8008dc8:	200009b4 	.word	0x200009b4
 8008dcc:	200001a8 	.word	0x200001a8

08008dd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10c      	bne.n	8008dfa <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	b672      	cpsid	i
 8008de6:	f383 8811 	msr	BASEPRI, r3
 8008dea:	f3bf 8f6f 	isb	sy
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	b662      	cpsie	i
 8008df4:	60fb      	str	r3, [r7, #12]
}
 8008df6:	bf00      	nop
 8008df8:	e7fe      	b.n	8008df8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008dfa:	4b07      	ldr	r3, [pc, #28]	; (8008e18 <vTaskPlaceOnEventList+0x48>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	3318      	adds	r3, #24
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7fe fe2d 	bl	8007a62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e08:	2101      	movs	r1, #1
 8008e0a:	6838      	ldr	r0, [r7, #0]
 8008e0c:	f000 fa8e 	bl	800932c <prvAddCurrentTaskToDelayedList>
}
 8008e10:	bf00      	nop
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	200009b4 	.word	0x200009b4

08008e1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10c      	bne.n	8008e48 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	b672      	cpsid	i
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	b662      	cpsie	i
 8008e42:	617b      	str	r3, [r7, #20]
}
 8008e44:	bf00      	nop
 8008e46:	e7fe      	b.n	8008e46 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e48:	4b0a      	ldr	r3, [pc, #40]	; (8008e74 <vTaskPlaceOnEventListRestricted+0x58>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	3318      	adds	r3, #24
 8008e4e:	4619      	mov	r1, r3
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f7fe fde2 	bl	8007a1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e60:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e62:	6879      	ldr	r1, [r7, #4]
 8008e64:	68b8      	ldr	r0, [r7, #8]
 8008e66:	f000 fa61 	bl	800932c <prvAddCurrentTaskToDelayedList>
	}
 8008e6a:	bf00      	nop
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	200009b4 	.word	0x200009b4

08008e78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10c      	bne.n	8008ea8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	b672      	cpsid	i
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	b662      	cpsie	i
 8008ea2:	60fb      	str	r3, [r7, #12]
}
 8008ea4:	bf00      	nop
 8008ea6:	e7fe      	b.n	8008ea6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	3318      	adds	r3, #24
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7fe fe11 	bl	8007ad4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eb2:	4b1e      	ldr	r3, [pc, #120]	; (8008f2c <xTaskRemoveFromEventList+0xb4>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d11d      	bne.n	8008ef6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	3304      	adds	r3, #4
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fe fe08 	bl	8007ad4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec8:	4b19      	ldr	r3, [pc, #100]	; (8008f30 <xTaskRemoveFromEventList+0xb8>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d903      	bls.n	8008ed8 <xTaskRemoveFromEventList+0x60>
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	4a16      	ldr	r2, [pc, #88]	; (8008f30 <xTaskRemoveFromEventList+0xb8>)
 8008ed6:	6013      	str	r3, [r2, #0]
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008edc:	4613      	mov	r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4413      	add	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4a13      	ldr	r2, [pc, #76]	; (8008f34 <xTaskRemoveFromEventList+0xbc>)
 8008ee6:	441a      	add	r2, r3
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	3304      	adds	r3, #4
 8008eec:	4619      	mov	r1, r3
 8008eee:	4610      	mov	r0, r2
 8008ef0:	f7fe fd93 	bl	8007a1a <vListInsertEnd>
 8008ef4:	e005      	b.n	8008f02 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	3318      	adds	r3, #24
 8008efa:	4619      	mov	r1, r3
 8008efc:	480e      	ldr	r0, [pc, #56]	; (8008f38 <xTaskRemoveFromEventList+0xc0>)
 8008efe:	f7fe fd8c 	bl	8007a1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f06:	4b0d      	ldr	r3, [pc, #52]	; (8008f3c <xTaskRemoveFromEventList+0xc4>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d905      	bls.n	8008f1c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f10:	2301      	movs	r3, #1
 8008f12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f14:	4b0a      	ldr	r3, [pc, #40]	; (8008f40 <xTaskRemoveFromEventList+0xc8>)
 8008f16:	2201      	movs	r2, #1
 8008f18:	601a      	str	r2, [r3, #0]
 8008f1a:	e001      	b.n	8008f20 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f20:	697b      	ldr	r3, [r7, #20]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3718      	adds	r7, #24
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	20000eb0 	.word	0x20000eb0
 8008f30:	20000e90 	.word	0x20000e90
 8008f34:	200009b8 	.word	0x200009b8
 8008f38:	20000e48 	.word	0x20000e48
 8008f3c:	200009b4 	.word	0x200009b4
 8008f40:	20000e9c 	.word	0x20000e9c

08008f44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f4c:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <vTaskInternalSetTimeOutState+0x24>)
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f54:	4b05      	ldr	r3, [pc, #20]	; (8008f6c <vTaskInternalSetTimeOutState+0x28>)
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	605a      	str	r2, [r3, #4]
}
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	20000ea0 	.word	0x20000ea0
 8008f6c:	20000e8c 	.word	0x20000e8c

08008f70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b088      	sub	sp, #32
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10c      	bne.n	8008f9a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f84:	b672      	cpsid	i
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	b662      	cpsie	i
 8008f94:	613b      	str	r3, [r7, #16]
}
 8008f96:	bf00      	nop
 8008f98:	e7fe      	b.n	8008f98 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10c      	bne.n	8008fba <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa4:	b672      	cpsid	i
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	b662      	cpsie	i
 8008fb4:	60fb      	str	r3, [r7, #12]
}
 8008fb6:	bf00      	nop
 8008fb8:	e7fe      	b.n	8008fb8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008fba:	f000 fe77 	bl	8009cac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008fbe:	4b1d      	ldr	r3, [pc, #116]	; (8009034 <xTaskCheckForTimeOut+0xc4>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	69ba      	ldr	r2, [r7, #24]
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd6:	d102      	bne.n	8008fde <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	61fb      	str	r3, [r7, #28]
 8008fdc:	e023      	b.n	8009026 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <xTaskCheckForTimeOut+0xc8>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d007      	beq.n	8008ffa <xTaskCheckForTimeOut+0x8a>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d302      	bcc.n	8008ffa <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	61fb      	str	r3, [r7, #28]
 8008ff8:	e015      	b.n	8009026 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	429a      	cmp	r2, r3
 8009002:	d20b      	bcs.n	800901c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	1ad2      	subs	r2, r2, r3
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff ff97 	bl	8008f44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009016:	2300      	movs	r3, #0
 8009018:	61fb      	str	r3, [r7, #28]
 800901a:	e004      	b.n	8009026 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	2200      	movs	r2, #0
 8009020:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009022:	2301      	movs	r3, #1
 8009024:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009026:	f000 fe75 	bl	8009d14 <vPortExitCritical>

	return xReturn;
 800902a:	69fb      	ldr	r3, [r7, #28]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3720      	adds	r7, #32
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	20000e8c 	.word	0x20000e8c
 8009038:	20000ea0 	.word	0x20000ea0

0800903c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800903c:	b480      	push	{r7}
 800903e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009040:	4b03      	ldr	r3, [pc, #12]	; (8009050 <vTaskMissedYield+0x14>)
 8009042:	2201      	movs	r2, #1
 8009044:	601a      	str	r2, [r3, #0]
}
 8009046:	bf00      	nop
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	20000e9c 	.word	0x20000e9c

08009054 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800905c:	f000 f852 	bl	8009104 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009060:	4b06      	ldr	r3, [pc, #24]	; (800907c <prvIdleTask+0x28>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d9f9      	bls.n	800905c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009068:	4b05      	ldr	r3, [pc, #20]	; (8009080 <prvIdleTask+0x2c>)
 800906a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009078:	e7f0      	b.n	800905c <prvIdleTask+0x8>
 800907a:	bf00      	nop
 800907c:	200009b8 	.word	0x200009b8
 8009080:	e000ed04 	.word	0xe000ed04

08009084 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800908a:	2300      	movs	r3, #0
 800908c:	607b      	str	r3, [r7, #4]
 800908e:	e00c      	b.n	80090aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	4613      	mov	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4a12      	ldr	r2, [pc, #72]	; (80090e4 <prvInitialiseTaskLists+0x60>)
 800909c:	4413      	add	r3, r2
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fe fc8e 	bl	80079c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3301      	adds	r3, #1
 80090a8:	607b      	str	r3, [r7, #4]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b37      	cmp	r3, #55	; 0x37
 80090ae:	d9ef      	bls.n	8009090 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090b0:	480d      	ldr	r0, [pc, #52]	; (80090e8 <prvInitialiseTaskLists+0x64>)
 80090b2:	f7fe fc85 	bl	80079c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090b6:	480d      	ldr	r0, [pc, #52]	; (80090ec <prvInitialiseTaskLists+0x68>)
 80090b8:	f7fe fc82 	bl	80079c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090bc:	480c      	ldr	r0, [pc, #48]	; (80090f0 <prvInitialiseTaskLists+0x6c>)
 80090be:	f7fe fc7f 	bl	80079c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090c2:	480c      	ldr	r0, [pc, #48]	; (80090f4 <prvInitialiseTaskLists+0x70>)
 80090c4:	f7fe fc7c 	bl	80079c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090c8:	480b      	ldr	r0, [pc, #44]	; (80090f8 <prvInitialiseTaskLists+0x74>)
 80090ca:	f7fe fc79 	bl	80079c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090ce:	4b0b      	ldr	r3, [pc, #44]	; (80090fc <prvInitialiseTaskLists+0x78>)
 80090d0:	4a05      	ldr	r2, [pc, #20]	; (80090e8 <prvInitialiseTaskLists+0x64>)
 80090d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090d4:	4b0a      	ldr	r3, [pc, #40]	; (8009100 <prvInitialiseTaskLists+0x7c>)
 80090d6:	4a05      	ldr	r2, [pc, #20]	; (80090ec <prvInitialiseTaskLists+0x68>)
 80090d8:	601a      	str	r2, [r3, #0]
}
 80090da:	bf00      	nop
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	200009b8 	.word	0x200009b8
 80090e8:	20000e18 	.word	0x20000e18
 80090ec:	20000e2c 	.word	0x20000e2c
 80090f0:	20000e48 	.word	0x20000e48
 80090f4:	20000e5c 	.word	0x20000e5c
 80090f8:	20000e74 	.word	0x20000e74
 80090fc:	20000e40 	.word	0x20000e40
 8009100:	20000e44 	.word	0x20000e44

08009104 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800910a:	e019      	b.n	8009140 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800910c:	f000 fdce 	bl	8009cac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009110:	4b10      	ldr	r3, [pc, #64]	; (8009154 <prvCheckTasksWaitingTermination+0x50>)
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	3304      	adds	r3, #4
 800911c:	4618      	mov	r0, r3
 800911e:	f7fe fcd9 	bl	8007ad4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009122:	4b0d      	ldr	r3, [pc, #52]	; (8009158 <prvCheckTasksWaitingTermination+0x54>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3b01      	subs	r3, #1
 8009128:	4a0b      	ldr	r2, [pc, #44]	; (8009158 <prvCheckTasksWaitingTermination+0x54>)
 800912a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800912c:	4b0b      	ldr	r3, [pc, #44]	; (800915c <prvCheckTasksWaitingTermination+0x58>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3b01      	subs	r3, #1
 8009132:	4a0a      	ldr	r2, [pc, #40]	; (800915c <prvCheckTasksWaitingTermination+0x58>)
 8009134:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009136:	f000 fded 	bl	8009d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f810 	bl	8009160 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009140:	4b06      	ldr	r3, [pc, #24]	; (800915c <prvCheckTasksWaitingTermination+0x58>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e1      	bne.n	800910c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009148:	bf00      	nop
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20000e5c 	.word	0x20000e5c
 8009158:	20000e88 	.word	0x20000e88
 800915c:	20000e70 	.word	0x20000e70

08009160 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	3354      	adds	r3, #84	; 0x54
 800916c:	4618      	mov	r0, r3
 800916e:	f002 fcc9 	bl	800bb04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009178:	2b00      	cmp	r3, #0
 800917a:	d108      	bne.n	800918e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009180:	4618      	mov	r0, r3
 8009182:	f000 ff89 	bl	800a098 <vPortFree>
				vPortFree( pxTCB );
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 ff86 	bl	800a098 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800918c:	e01a      	b.n	80091c4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009194:	2b01      	cmp	r3, #1
 8009196:	d103      	bne.n	80091a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 ff7d 	bl	800a098 <vPortFree>
	}
 800919e:	e011      	b.n	80091c4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d00c      	beq.n	80091c4 <prvDeleteTCB+0x64>
	__asm volatile
 80091aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ae:	b672      	cpsid	i
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	b662      	cpsie	i
 80091be:	60fb      	str	r3, [r7, #12]
}
 80091c0:	bf00      	nop
 80091c2:	e7fe      	b.n	80091c2 <prvDeleteTCB+0x62>
	}
 80091c4:	bf00      	nop
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091d2:	4b0c      	ldr	r3, [pc, #48]	; (8009204 <prvResetNextTaskUnblockTime+0x38>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d104      	bne.n	80091e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091dc:	4b0a      	ldr	r3, [pc, #40]	; (8009208 <prvResetNextTaskUnblockTime+0x3c>)
 80091de:	f04f 32ff 	mov.w	r2, #4294967295
 80091e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091e4:	e008      	b.n	80091f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091e6:	4b07      	ldr	r3, [pc, #28]	; (8009204 <prvResetNextTaskUnblockTime+0x38>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	4a04      	ldr	r2, [pc, #16]	; (8009208 <prvResetNextTaskUnblockTime+0x3c>)
 80091f6:	6013      	str	r3, [r2, #0]
}
 80091f8:	bf00      	nop
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	20000e40 	.word	0x20000e40
 8009208:	20000ea8 	.word	0x20000ea8

0800920c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009212:	4b0b      	ldr	r3, [pc, #44]	; (8009240 <xTaskGetSchedulerState+0x34>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d102      	bne.n	8009220 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800921a:	2301      	movs	r3, #1
 800921c:	607b      	str	r3, [r7, #4]
 800921e:	e008      	b.n	8009232 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009220:	4b08      	ldr	r3, [pc, #32]	; (8009244 <xTaskGetSchedulerState+0x38>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d102      	bne.n	800922e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009228:	2302      	movs	r3, #2
 800922a:	607b      	str	r3, [r7, #4]
 800922c:	e001      	b.n	8009232 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800922e:	2300      	movs	r3, #0
 8009230:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009232:	687b      	ldr	r3, [r7, #4]
	}
 8009234:	4618      	mov	r0, r3
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	20000e94 	.word	0x20000e94
 8009244:	20000eb0 	.word	0x20000eb0

08009248 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009254:	2300      	movs	r3, #0
 8009256:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d05a      	beq.n	8009314 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800925e:	4b30      	ldr	r3, [pc, #192]	; (8009320 <xTaskPriorityDisinherit+0xd8>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	693a      	ldr	r2, [r7, #16]
 8009264:	429a      	cmp	r2, r3
 8009266:	d00c      	beq.n	8009282 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926c:	b672      	cpsid	i
 800926e:	f383 8811 	msr	BASEPRI, r3
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	b662      	cpsie	i
 800927c:	60fb      	str	r3, [r7, #12]
}
 800927e:	bf00      	nop
 8009280:	e7fe      	b.n	8009280 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10c      	bne.n	80092a4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800928a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928e:	b672      	cpsid	i
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	b662      	cpsie	i
 800929e:	60bb      	str	r3, [r7, #8]
}
 80092a0:	bf00      	nop
 80092a2:	e7fe      	b.n	80092a2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092a8:	1e5a      	subs	r2, r3, #1
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d02c      	beq.n	8009314 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d128      	bne.n	8009314 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	3304      	adds	r3, #4
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fe fc04 	bl	8007ad4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e4:	4b0f      	ldr	r3, [pc, #60]	; (8009324 <xTaskPriorityDisinherit+0xdc>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d903      	bls.n	80092f4 <xTaskPriorityDisinherit+0xac>
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f0:	4a0c      	ldr	r2, [pc, #48]	; (8009324 <xTaskPriorityDisinherit+0xdc>)
 80092f2:	6013      	str	r3, [r2, #0]
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f8:	4613      	mov	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4413      	add	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	4a09      	ldr	r2, [pc, #36]	; (8009328 <xTaskPriorityDisinherit+0xe0>)
 8009302:	441a      	add	r2, r3
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	3304      	adds	r3, #4
 8009308:	4619      	mov	r1, r3
 800930a:	4610      	mov	r0, r2
 800930c:	f7fe fb85 	bl	8007a1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009310:	2301      	movs	r3, #1
 8009312:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009314:	697b      	ldr	r3, [r7, #20]
	}
 8009316:	4618      	mov	r0, r3
 8009318:	3718      	adds	r7, #24
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	200009b4 	.word	0x200009b4
 8009324:	20000e90 	.word	0x20000e90
 8009328:	200009b8 	.word	0x200009b8

0800932c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009336:	4b21      	ldr	r3, [pc, #132]	; (80093bc <prvAddCurrentTaskToDelayedList+0x90>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800933c:	4b20      	ldr	r3, [pc, #128]	; (80093c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3304      	adds	r3, #4
 8009342:	4618      	mov	r0, r3
 8009344:	f7fe fbc6 	bl	8007ad4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934e:	d10a      	bne.n	8009366 <prvAddCurrentTaskToDelayedList+0x3a>
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d007      	beq.n	8009366 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009356:	4b1a      	ldr	r3, [pc, #104]	; (80093c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	3304      	adds	r3, #4
 800935c:	4619      	mov	r1, r3
 800935e:	4819      	ldr	r0, [pc, #100]	; (80093c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009360:	f7fe fb5b 	bl	8007a1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009364:	e026      	b.n	80093b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4413      	add	r3, r2
 800936c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800936e:	4b14      	ldr	r3, [pc, #80]	; (80093c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	429a      	cmp	r2, r3
 800937c:	d209      	bcs.n	8009392 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800937e:	4b12      	ldr	r3, [pc, #72]	; (80093c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	4b0f      	ldr	r3, [pc, #60]	; (80093c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3304      	adds	r3, #4
 8009388:	4619      	mov	r1, r3
 800938a:	4610      	mov	r0, r2
 800938c:	f7fe fb69 	bl	8007a62 <vListInsert>
}
 8009390:	e010      	b.n	80093b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009392:	4b0e      	ldr	r3, [pc, #56]	; (80093cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	4b0a      	ldr	r3, [pc, #40]	; (80093c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3304      	adds	r3, #4
 800939c:	4619      	mov	r1, r3
 800939e:	4610      	mov	r0, r2
 80093a0:	f7fe fb5f 	bl	8007a62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80093a4:	4b0a      	ldr	r3, [pc, #40]	; (80093d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d202      	bcs.n	80093b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80093ae:	4a08      	ldr	r2, [pc, #32]	; (80093d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	6013      	str	r3, [r2, #0]
}
 80093b4:	bf00      	nop
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	20000e8c 	.word	0x20000e8c
 80093c0:	200009b4 	.word	0x200009b4
 80093c4:	20000e74 	.word	0x20000e74
 80093c8:	20000e44 	.word	0x20000e44
 80093cc:	20000e40 	.word	0x20000e40
 80093d0:	20000ea8 	.word	0x20000ea8

080093d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b08a      	sub	sp, #40	; 0x28
 80093d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80093da:	2300      	movs	r3, #0
 80093dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80093de:	f000 fb15 	bl	8009a0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80093e2:	4b1d      	ldr	r3, [pc, #116]	; (8009458 <xTimerCreateTimerTask+0x84>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d021      	beq.n	800942e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80093ea:	2300      	movs	r3, #0
 80093ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80093ee:	2300      	movs	r3, #0
 80093f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80093f2:	1d3a      	adds	r2, r7, #4
 80093f4:	f107 0108 	add.w	r1, r7, #8
 80093f8:	f107 030c 	add.w	r3, r7, #12
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fe fac5 	bl	800798c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009402:	6879      	ldr	r1, [r7, #4]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	9202      	str	r2, [sp, #8]
 800940a:	9301      	str	r3, [sp, #4]
 800940c:	2302      	movs	r3, #2
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	2300      	movs	r3, #0
 8009412:	460a      	mov	r2, r1
 8009414:	4911      	ldr	r1, [pc, #68]	; (800945c <xTimerCreateTimerTask+0x88>)
 8009416:	4812      	ldr	r0, [pc, #72]	; (8009460 <xTimerCreateTimerTask+0x8c>)
 8009418:	f7ff f890 	bl	800853c <xTaskCreateStatic>
 800941c:	4603      	mov	r3, r0
 800941e:	4a11      	ldr	r2, [pc, #68]	; (8009464 <xTimerCreateTimerTask+0x90>)
 8009420:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009422:	4b10      	ldr	r3, [pc, #64]	; (8009464 <xTimerCreateTimerTask+0x90>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d001      	beq.n	800942e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800942a:	2301      	movs	r3, #1
 800942c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10c      	bne.n	800944e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009438:	b672      	cpsid	i
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	b662      	cpsie	i
 8009448:	613b      	str	r3, [r7, #16]
}
 800944a:	bf00      	nop
 800944c:	e7fe      	b.n	800944c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800944e:	697b      	ldr	r3, [r7, #20]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	20000ee4 	.word	0x20000ee4
 800945c:	0800bc14 	.word	0x0800bc14
 8009460:	080095a5 	.word	0x080095a5
 8009464:	20000ee8 	.word	0x20000ee8

08009468 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b08a      	sub	sp, #40	; 0x28
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
 8009474:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009476:	2300      	movs	r3, #0
 8009478:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10c      	bne.n	800949a <xTimerGenericCommand+0x32>
	__asm volatile
 8009480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009484:	b672      	cpsid	i
 8009486:	f383 8811 	msr	BASEPRI, r3
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	f3bf 8f4f 	dsb	sy
 8009492:	b662      	cpsie	i
 8009494:	623b      	str	r3, [r7, #32]
}
 8009496:	bf00      	nop
 8009498:	e7fe      	b.n	8009498 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800949a:	4b1a      	ldr	r3, [pc, #104]	; (8009504 <xTimerGenericCommand+0x9c>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d02a      	beq.n	80094f8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2b05      	cmp	r3, #5
 80094b2:	dc18      	bgt.n	80094e6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80094b4:	f7ff feaa 	bl	800920c <xTaskGetSchedulerState>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d109      	bne.n	80094d2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80094be:	4b11      	ldr	r3, [pc, #68]	; (8009504 <xTimerGenericCommand+0x9c>)
 80094c0:	6818      	ldr	r0, [r3, #0]
 80094c2:	f107 0110 	add.w	r1, r7, #16
 80094c6:	2300      	movs	r3, #0
 80094c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ca:	f7fe fc3d 	bl	8007d48 <xQueueGenericSend>
 80094ce:	6278      	str	r0, [r7, #36]	; 0x24
 80094d0:	e012      	b.n	80094f8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80094d2:	4b0c      	ldr	r3, [pc, #48]	; (8009504 <xTimerGenericCommand+0x9c>)
 80094d4:	6818      	ldr	r0, [r3, #0]
 80094d6:	f107 0110 	add.w	r1, r7, #16
 80094da:	2300      	movs	r3, #0
 80094dc:	2200      	movs	r2, #0
 80094de:	f7fe fc33 	bl	8007d48 <xQueueGenericSend>
 80094e2:	6278      	str	r0, [r7, #36]	; 0x24
 80094e4:	e008      	b.n	80094f8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80094e6:	4b07      	ldr	r3, [pc, #28]	; (8009504 <xTimerGenericCommand+0x9c>)
 80094e8:	6818      	ldr	r0, [r3, #0]
 80094ea:	f107 0110 	add.w	r1, r7, #16
 80094ee:	2300      	movs	r3, #0
 80094f0:	683a      	ldr	r2, [r7, #0]
 80094f2:	f7fe fd2f 	bl	8007f54 <xQueueGenericSendFromISR>
 80094f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80094f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3728      	adds	r7, #40	; 0x28
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	20000ee4 	.word	0x20000ee4

08009508 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b088      	sub	sp, #32
 800950c:	af02      	add	r7, sp, #8
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009512:	4b23      	ldr	r3, [pc, #140]	; (80095a0 <prvProcessExpiredTimer+0x98>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	3304      	adds	r3, #4
 8009520:	4618      	mov	r0, r3
 8009522:	f7fe fad7 	bl	8007ad4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800952c:	f003 0304 	and.w	r3, r3, #4
 8009530:	2b00      	cmp	r3, #0
 8009532:	d024      	beq.n	800957e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	699a      	ldr	r2, [r3, #24]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	18d1      	adds	r1, r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	6978      	ldr	r0, [r7, #20]
 8009542:	f000 f8d3 	bl	80096ec <prvInsertTimerInActiveList>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d021      	beq.n	8009590 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800954c:	2300      	movs	r3, #0
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	2300      	movs	r3, #0
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	2100      	movs	r1, #0
 8009556:	6978      	ldr	r0, [r7, #20]
 8009558:	f7ff ff86 	bl	8009468 <xTimerGenericCommand>
 800955c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d115      	bne.n	8009590 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009568:	b672      	cpsid	i
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	b662      	cpsie	i
 8009578:	60fb      	str	r3, [r7, #12]
}
 800957a:	bf00      	nop
 800957c:	e7fe      	b.n	800957c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009584:	f023 0301 	bic.w	r3, r3, #1
 8009588:	b2da      	uxtb	r2, r3
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	6a1b      	ldr	r3, [r3, #32]
 8009594:	6978      	ldr	r0, [r7, #20]
 8009596:	4798      	blx	r3
}
 8009598:	bf00      	nop
 800959a:	3718      	adds	r7, #24
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	20000edc 	.word	0x20000edc

080095a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80095ac:	f107 0308 	add.w	r3, r7, #8
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 f857 	bl	8009664 <prvGetNextExpireTime>
 80095b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	4619      	mov	r1, r3
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 f803 	bl	80095c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80095c2:	f000 f8d5 	bl	8009770 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80095c6:	e7f1      	b.n	80095ac <prvTimerTask+0x8>

080095c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80095d2:	f7ff fa1d 	bl	8008a10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095d6:	f107 0308 	add.w	r3, r7, #8
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 f866 	bl	80096ac <prvSampleTimeNow>
 80095e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d130      	bne.n	800964a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10a      	bne.n	8009604 <prvProcessTimerOrBlockTask+0x3c>
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d806      	bhi.n	8009604 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80095f6:	f7ff fa19 	bl	8008a2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80095fa:	68f9      	ldr	r1, [r7, #12]
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7ff ff83 	bl	8009508 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009602:	e024      	b.n	800964e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d008      	beq.n	800961c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800960a:	4b13      	ldr	r3, [pc, #76]	; (8009658 <prvProcessTimerOrBlockTask+0x90>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d101      	bne.n	8009618 <prvProcessTimerOrBlockTask+0x50>
 8009614:	2301      	movs	r3, #1
 8009616:	e000      	b.n	800961a <prvProcessTimerOrBlockTask+0x52>
 8009618:	2300      	movs	r3, #0
 800961a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800961c:	4b0f      	ldr	r3, [pc, #60]	; (800965c <prvProcessTimerOrBlockTask+0x94>)
 800961e:	6818      	ldr	r0, [r3, #0]
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	1ad3      	subs	r3, r2, r3
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	4619      	mov	r1, r3
 800962a:	f7fe ff53 	bl	80084d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800962e:	f7ff f9fd 	bl	8008a2c <xTaskResumeAll>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10a      	bne.n	800964e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009638:	4b09      	ldr	r3, [pc, #36]	; (8009660 <prvProcessTimerOrBlockTask+0x98>)
 800963a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800963e:	601a      	str	r2, [r3, #0]
 8009640:	f3bf 8f4f 	dsb	sy
 8009644:	f3bf 8f6f 	isb	sy
}
 8009648:	e001      	b.n	800964e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800964a:	f7ff f9ef 	bl	8008a2c <xTaskResumeAll>
}
 800964e:	bf00      	nop
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	20000ee0 	.word	0x20000ee0
 800965c:	20000ee4 	.word	0x20000ee4
 8009660:	e000ed04 	.word	0xe000ed04

08009664 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800966c:	4b0e      	ldr	r3, [pc, #56]	; (80096a8 <prvGetNextExpireTime+0x44>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d101      	bne.n	800967a <prvGetNextExpireTime+0x16>
 8009676:	2201      	movs	r2, #1
 8009678:	e000      	b.n	800967c <prvGetNextExpireTime+0x18>
 800967a:	2200      	movs	r2, #0
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d105      	bne.n	8009694 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009688:	4b07      	ldr	r3, [pc, #28]	; (80096a8 <prvGetNextExpireTime+0x44>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	60fb      	str	r3, [r7, #12]
 8009692:	e001      	b.n	8009698 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009694:	2300      	movs	r3, #0
 8009696:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009698:	68fb      	ldr	r3, [r7, #12]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3714      	adds	r7, #20
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	20000edc 	.word	0x20000edc

080096ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80096b4:	f7ff fa5a 	bl	8008b6c <xTaskGetTickCount>
 80096b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80096ba:	4b0b      	ldr	r3, [pc, #44]	; (80096e8 <prvSampleTimeNow+0x3c>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d205      	bcs.n	80096d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80096c4:	f000 f93c 	bl	8009940 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	601a      	str	r2, [r3, #0]
 80096ce:	e002      	b.n	80096d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80096d6:	4a04      	ldr	r2, [pc, #16]	; (80096e8 <prvSampleTimeNow+0x3c>)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80096dc:	68fb      	ldr	r3, [r7, #12]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	20000eec 	.word	0x20000eec

080096ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b086      	sub	sp, #24
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80096fa:	2300      	movs	r3, #0
 80096fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	429a      	cmp	r2, r3
 8009710:	d812      	bhi.n	8009738 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	1ad2      	subs	r2, r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	429a      	cmp	r2, r3
 800971e:	d302      	bcc.n	8009726 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009720:	2301      	movs	r3, #1
 8009722:	617b      	str	r3, [r7, #20]
 8009724:	e01b      	b.n	800975e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009726:	4b10      	ldr	r3, [pc, #64]	; (8009768 <prvInsertTimerInActiveList+0x7c>)
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	3304      	adds	r3, #4
 800972e:	4619      	mov	r1, r3
 8009730:	4610      	mov	r0, r2
 8009732:	f7fe f996 	bl	8007a62 <vListInsert>
 8009736:	e012      	b.n	800975e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	429a      	cmp	r2, r3
 800973e:	d206      	bcs.n	800974e <prvInsertTimerInActiveList+0x62>
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	429a      	cmp	r2, r3
 8009746:	d302      	bcc.n	800974e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009748:	2301      	movs	r3, #1
 800974a:	617b      	str	r3, [r7, #20]
 800974c:	e007      	b.n	800975e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800974e:	4b07      	ldr	r3, [pc, #28]	; (800976c <prvInsertTimerInActiveList+0x80>)
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	3304      	adds	r3, #4
 8009756:	4619      	mov	r1, r3
 8009758:	4610      	mov	r0, r2
 800975a:	f7fe f982 	bl	8007a62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800975e:	697b      	ldr	r3, [r7, #20]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3718      	adds	r7, #24
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	20000ee0 	.word	0x20000ee0
 800976c:	20000edc 	.word	0x20000edc

08009770 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b08e      	sub	sp, #56	; 0x38
 8009774:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009776:	e0d0      	b.n	800991a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	da1a      	bge.n	80097b4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800977e:	1d3b      	adds	r3, r7, #4
 8009780:	3304      	adds	r3, #4
 8009782:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10c      	bne.n	80097a4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800978a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978e:	b672      	cpsid	i
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	b662      	cpsie	i
 800979e:	61fb      	str	r3, [r7, #28]
}
 80097a0:	bf00      	nop
 80097a2:	e7fe      	b.n	80097a2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80097a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097aa:	6850      	ldr	r0, [r2, #4]
 80097ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097ae:	6892      	ldr	r2, [r2, #8]
 80097b0:	4611      	mov	r1, r2
 80097b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f2c0 80ae 	blt.w	8009918 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80097c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d004      	beq.n	80097d2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ca:	3304      	adds	r3, #4
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fe f981 	bl	8007ad4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097d2:	463b      	mov	r3, r7
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7ff ff69 	bl	80096ac <prvSampleTimeNow>
 80097da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b09      	cmp	r3, #9
 80097e0:	f200 809b 	bhi.w	800991a <prvProcessReceivedCommands+0x1aa>
 80097e4:	a201      	add	r2, pc, #4	; (adr r2, 80097ec <prvProcessReceivedCommands+0x7c>)
 80097e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ea:	bf00      	nop
 80097ec:	08009815 	.word	0x08009815
 80097f0:	08009815 	.word	0x08009815
 80097f4:	08009815 	.word	0x08009815
 80097f8:	0800988d 	.word	0x0800988d
 80097fc:	080098a1 	.word	0x080098a1
 8009800:	080098ef 	.word	0x080098ef
 8009804:	08009815 	.word	0x08009815
 8009808:	08009815 	.word	0x08009815
 800980c:	0800988d 	.word	0x0800988d
 8009810:	080098a1 	.word	0x080098a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800981a:	f043 0301 	orr.w	r3, r3, #1
 800981e:	b2da      	uxtb	r2, r3
 8009820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	18d1      	adds	r1, r2, r3
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009834:	f7ff ff5a 	bl	80096ec <prvInsertTimerInActiveList>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d06d      	beq.n	800991a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800983e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009840:	6a1b      	ldr	r3, [r3, #32]
 8009842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009844:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009848:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800984c:	f003 0304 	and.w	r3, r3, #4
 8009850:	2b00      	cmp	r3, #0
 8009852:	d062      	beq.n	800991a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009858:	699b      	ldr	r3, [r3, #24]
 800985a:	441a      	add	r2, r3
 800985c:	2300      	movs	r3, #0
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	2300      	movs	r3, #0
 8009862:	2100      	movs	r1, #0
 8009864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009866:	f7ff fdff 	bl	8009468 <xTimerGenericCommand>
 800986a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800986c:	6a3b      	ldr	r3, [r7, #32]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d153      	bne.n	800991a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009876:	b672      	cpsid	i
 8009878:	f383 8811 	msr	BASEPRI, r3
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	b662      	cpsie	i
 8009886:	61bb      	str	r3, [r7, #24]
}
 8009888:	bf00      	nop
 800988a:	e7fe      	b.n	800988a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009892:	f023 0301 	bic.w	r3, r3, #1
 8009896:	b2da      	uxtb	r2, r3
 8009898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800989e:	e03c      	b.n	800991a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098a6:	f043 0301 	orr.w	r3, r3, #1
 80098aa:	b2da      	uxtb	r2, r3
 80098ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10c      	bne.n	80098da <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80098c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c4:	b672      	cpsid	i
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	b662      	cpsie	i
 80098d4:	617b      	str	r3, [r7, #20]
}
 80098d6:	bf00      	nop
 80098d8:	e7fe      	b.n	80098d8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80098da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098dc:	699a      	ldr	r2, [r3, #24]
 80098de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e0:	18d1      	adds	r1, r2, r3
 80098e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098e8:	f7ff ff00 	bl	80096ec <prvInsertTimerInActiveList>
					break;
 80098ec:	e015      	b.n	800991a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80098ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098f4:	f003 0302 	and.w	r3, r3, #2
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d103      	bne.n	8009904 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80098fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098fe:	f000 fbcb 	bl	800a098 <vPortFree>
 8009902:	e00a      	b.n	800991a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009906:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800990a:	f023 0301 	bic.w	r3, r3, #1
 800990e:	b2da      	uxtb	r2, r3
 8009910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009916:	e000      	b.n	800991a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009918:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800991a:	4b08      	ldr	r3, [pc, #32]	; (800993c <prvProcessReceivedCommands+0x1cc>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	1d39      	adds	r1, r7, #4
 8009920:	2200      	movs	r2, #0
 8009922:	4618      	mov	r0, r3
 8009924:	f7fe fbb6 	bl	8008094 <xQueueReceive>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	f47f af24 	bne.w	8009778 <prvProcessReceivedCommands+0x8>
	}
}
 8009930:	bf00      	nop
 8009932:	bf00      	nop
 8009934:	3730      	adds	r7, #48	; 0x30
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	20000ee4 	.word	0x20000ee4

08009940 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b088      	sub	sp, #32
 8009944:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009946:	e04a      	b.n	80099de <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009948:	4b2e      	ldr	r3, [pc, #184]	; (8009a04 <prvSwitchTimerLists+0xc4>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009952:	4b2c      	ldr	r3, [pc, #176]	; (8009a04 <prvSwitchTimerLists+0xc4>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	3304      	adds	r3, #4
 8009960:	4618      	mov	r0, r3
 8009962:	f7fe f8b7 	bl	8007ad4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009974:	f003 0304 	and.w	r3, r3, #4
 8009978:	2b00      	cmp	r3, #0
 800997a:	d030      	beq.n	80099de <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	693a      	ldr	r2, [r7, #16]
 8009982:	4413      	add	r3, r2
 8009984:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009986:	68ba      	ldr	r2, [r7, #8]
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	429a      	cmp	r2, r3
 800998c:	d90e      	bls.n	80099ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800999a:	4b1a      	ldr	r3, [pc, #104]	; (8009a04 <prvSwitchTimerLists+0xc4>)
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3304      	adds	r3, #4
 80099a2:	4619      	mov	r1, r3
 80099a4:	4610      	mov	r0, r2
 80099a6:	f7fe f85c 	bl	8007a62 <vListInsert>
 80099aa:	e018      	b.n	80099de <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099ac:	2300      	movs	r3, #0
 80099ae:	9300      	str	r3, [sp, #0]
 80099b0:	2300      	movs	r3, #0
 80099b2:	693a      	ldr	r2, [r7, #16]
 80099b4:	2100      	movs	r1, #0
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f7ff fd56 	bl	8009468 <xTimerGenericCommand>
 80099bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10c      	bne.n	80099de <prvSwitchTimerLists+0x9e>
	__asm volatile
 80099c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c8:	b672      	cpsid	i
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	b662      	cpsie	i
 80099d8:	603b      	str	r3, [r7, #0]
}
 80099da:	bf00      	nop
 80099dc:	e7fe      	b.n	80099dc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099de:	4b09      	ldr	r3, [pc, #36]	; (8009a04 <prvSwitchTimerLists+0xc4>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1af      	bne.n	8009948 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80099e8:	4b06      	ldr	r3, [pc, #24]	; (8009a04 <prvSwitchTimerLists+0xc4>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80099ee:	4b06      	ldr	r3, [pc, #24]	; (8009a08 <prvSwitchTimerLists+0xc8>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a04      	ldr	r2, [pc, #16]	; (8009a04 <prvSwitchTimerLists+0xc4>)
 80099f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80099f6:	4a04      	ldr	r2, [pc, #16]	; (8009a08 <prvSwitchTimerLists+0xc8>)
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	6013      	str	r3, [r2, #0]
}
 80099fc:	bf00      	nop
 80099fe:	3718      	adds	r7, #24
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	20000edc 	.word	0x20000edc
 8009a08:	20000ee0 	.word	0x20000ee0

08009a0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a12:	f000 f94b 	bl	8009cac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a16:	4b15      	ldr	r3, [pc, #84]	; (8009a6c <prvCheckForValidListAndQueue+0x60>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d120      	bne.n	8009a60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009a1e:	4814      	ldr	r0, [pc, #80]	; (8009a70 <prvCheckForValidListAndQueue+0x64>)
 8009a20:	f7fd ffce 	bl	80079c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009a24:	4813      	ldr	r0, [pc, #76]	; (8009a74 <prvCheckForValidListAndQueue+0x68>)
 8009a26:	f7fd ffcb 	bl	80079c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009a2a:	4b13      	ldr	r3, [pc, #76]	; (8009a78 <prvCheckForValidListAndQueue+0x6c>)
 8009a2c:	4a10      	ldr	r2, [pc, #64]	; (8009a70 <prvCheckForValidListAndQueue+0x64>)
 8009a2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009a30:	4b12      	ldr	r3, [pc, #72]	; (8009a7c <prvCheckForValidListAndQueue+0x70>)
 8009a32:	4a10      	ldr	r2, [pc, #64]	; (8009a74 <prvCheckForValidListAndQueue+0x68>)
 8009a34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009a36:	2300      	movs	r3, #0
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	4b11      	ldr	r3, [pc, #68]	; (8009a80 <prvCheckForValidListAndQueue+0x74>)
 8009a3c:	4a11      	ldr	r2, [pc, #68]	; (8009a84 <prvCheckForValidListAndQueue+0x78>)
 8009a3e:	2110      	movs	r1, #16
 8009a40:	200a      	movs	r0, #10
 8009a42:	f7fe f8db 	bl	8007bfc <xQueueGenericCreateStatic>
 8009a46:	4603      	mov	r3, r0
 8009a48:	4a08      	ldr	r2, [pc, #32]	; (8009a6c <prvCheckForValidListAndQueue+0x60>)
 8009a4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009a4c:	4b07      	ldr	r3, [pc, #28]	; (8009a6c <prvCheckForValidListAndQueue+0x60>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d005      	beq.n	8009a60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a54:	4b05      	ldr	r3, [pc, #20]	; (8009a6c <prvCheckForValidListAndQueue+0x60>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	490b      	ldr	r1, [pc, #44]	; (8009a88 <prvCheckForValidListAndQueue+0x7c>)
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe fd10 	bl	8008480 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a60:	f000 f958 	bl	8009d14 <vPortExitCritical>
}
 8009a64:	bf00      	nop
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	20000ee4 	.word	0x20000ee4
 8009a70:	20000eb4 	.word	0x20000eb4
 8009a74:	20000ec8 	.word	0x20000ec8
 8009a78:	20000edc 	.word	0x20000edc
 8009a7c:	20000ee0 	.word	0x20000ee0
 8009a80:	20000f90 	.word	0x20000f90
 8009a84:	20000ef0 	.word	0x20000ef0
 8009a88:	0800bc1c 	.word	0x0800bc1c

08009a8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	3b04      	subs	r3, #4
 8009a9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009aa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3b04      	subs	r3, #4
 8009aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	f023 0201 	bic.w	r2, r3, #1
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	3b04      	subs	r3, #4
 8009aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009abc:	4a0c      	ldr	r2, [pc, #48]	; (8009af0 <pxPortInitialiseStack+0x64>)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	3b14      	subs	r3, #20
 8009ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	3b04      	subs	r3, #4
 8009ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f06f 0202 	mvn.w	r2, #2
 8009ada:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	3b20      	subs	r3, #32
 8009ae0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr
 8009af0:	08009af5 	.word	0x08009af5

08009af4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009afa:	2300      	movs	r3, #0
 8009afc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009afe:	4b14      	ldr	r3, [pc, #80]	; (8009b50 <prvTaskExitError+0x5c>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b06:	d00c      	beq.n	8009b22 <prvTaskExitError+0x2e>
	__asm volatile
 8009b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0c:	b672      	cpsid	i
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	b662      	cpsie	i
 8009b1c:	60fb      	str	r3, [r7, #12]
}
 8009b1e:	bf00      	nop
 8009b20:	e7fe      	b.n	8009b20 <prvTaskExitError+0x2c>
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b26:	b672      	cpsid	i
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	b662      	cpsie	i
 8009b36:	60bb      	str	r3, [r7, #8]
}
 8009b38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b3a:	bf00      	nop
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d0fc      	beq.n	8009b3c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b42:	bf00      	nop
 8009b44:	bf00      	nop
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	20000118 	.word	0x20000118
	...

08009b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b60:	4b07      	ldr	r3, [pc, #28]	; (8009b80 <pxCurrentTCBConst2>)
 8009b62:	6819      	ldr	r1, [r3, #0]
 8009b64:	6808      	ldr	r0, [r1, #0]
 8009b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6a:	f380 8809 	msr	PSP, r0
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f04f 0000 	mov.w	r0, #0
 8009b76:	f380 8811 	msr	BASEPRI, r0
 8009b7a:	4770      	bx	lr
 8009b7c:	f3af 8000 	nop.w

08009b80 <pxCurrentTCBConst2>:
 8009b80:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b84:	bf00      	nop
 8009b86:	bf00      	nop

08009b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b88:	4808      	ldr	r0, [pc, #32]	; (8009bac <prvPortStartFirstTask+0x24>)
 8009b8a:	6800      	ldr	r0, [r0, #0]
 8009b8c:	6800      	ldr	r0, [r0, #0]
 8009b8e:	f380 8808 	msr	MSP, r0
 8009b92:	f04f 0000 	mov.w	r0, #0
 8009b96:	f380 8814 	msr	CONTROL, r0
 8009b9a:	b662      	cpsie	i
 8009b9c:	b661      	cpsie	f
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	df00      	svc	0
 8009ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009baa:	bf00      	nop
 8009bac:	e000ed08 	.word	0xe000ed08

08009bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009bb6:	4b37      	ldr	r3, [pc, #220]	; (8009c94 <xPortStartScheduler+0xe4>)
 8009bb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	22ff      	movs	r2, #255	; 0xff
 8009bc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009bd0:	78fb      	ldrb	r3, [r7, #3]
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009bd8:	b2da      	uxtb	r2, r3
 8009bda:	4b2f      	ldr	r3, [pc, #188]	; (8009c98 <xPortStartScheduler+0xe8>)
 8009bdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009bde:	4b2f      	ldr	r3, [pc, #188]	; (8009c9c <xPortStartScheduler+0xec>)
 8009be0:	2207      	movs	r2, #7
 8009be2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009be4:	e009      	b.n	8009bfa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009be6:	4b2d      	ldr	r3, [pc, #180]	; (8009c9c <xPortStartScheduler+0xec>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	3b01      	subs	r3, #1
 8009bec:	4a2b      	ldr	r2, [pc, #172]	; (8009c9c <xPortStartScheduler+0xec>)
 8009bee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009bf0:	78fb      	ldrb	r3, [r7, #3]
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	005b      	lsls	r3, r3, #1
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bfa:	78fb      	ldrb	r3, [r7, #3]
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c02:	2b80      	cmp	r3, #128	; 0x80
 8009c04:	d0ef      	beq.n	8009be6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c06:	4b25      	ldr	r3, [pc, #148]	; (8009c9c <xPortStartScheduler+0xec>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f1c3 0307 	rsb	r3, r3, #7
 8009c0e:	2b04      	cmp	r3, #4
 8009c10:	d00c      	beq.n	8009c2c <xPortStartScheduler+0x7c>
	__asm volatile
 8009c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c16:	b672      	cpsid	i
 8009c18:	f383 8811 	msr	BASEPRI, r3
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	b662      	cpsie	i
 8009c26:	60bb      	str	r3, [r7, #8]
}
 8009c28:	bf00      	nop
 8009c2a:	e7fe      	b.n	8009c2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c2c:	4b1b      	ldr	r3, [pc, #108]	; (8009c9c <xPortStartScheduler+0xec>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	021b      	lsls	r3, r3, #8
 8009c32:	4a1a      	ldr	r2, [pc, #104]	; (8009c9c <xPortStartScheduler+0xec>)
 8009c34:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c36:	4b19      	ldr	r3, [pc, #100]	; (8009c9c <xPortStartScheduler+0xec>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c3e:	4a17      	ldr	r2, [pc, #92]	; (8009c9c <xPortStartScheduler+0xec>)
 8009c40:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	b2da      	uxtb	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c4a:	4b15      	ldr	r3, [pc, #84]	; (8009ca0 <xPortStartScheduler+0xf0>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a14      	ldr	r2, [pc, #80]	; (8009ca0 <xPortStartScheduler+0xf0>)
 8009c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c56:	4b12      	ldr	r3, [pc, #72]	; (8009ca0 <xPortStartScheduler+0xf0>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a11      	ldr	r2, [pc, #68]	; (8009ca0 <xPortStartScheduler+0xf0>)
 8009c5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c60:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c62:	f000 f8dd 	bl	8009e20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c66:	4b0f      	ldr	r3, [pc, #60]	; (8009ca4 <xPortStartScheduler+0xf4>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c6c:	f000 f8fc 	bl	8009e68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c70:	4b0d      	ldr	r3, [pc, #52]	; (8009ca8 <xPortStartScheduler+0xf8>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a0c      	ldr	r2, [pc, #48]	; (8009ca8 <xPortStartScheduler+0xf8>)
 8009c76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c7a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c7c:	f7ff ff84 	bl	8009b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c80:	f7ff f840 	bl	8008d04 <vTaskSwitchContext>
	prvTaskExitError();
 8009c84:	f7ff ff36 	bl	8009af4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	e000e400 	.word	0xe000e400
 8009c98:	20000fe0 	.word	0x20000fe0
 8009c9c:	20000fe4 	.word	0x20000fe4
 8009ca0:	e000ed20 	.word	0xe000ed20
 8009ca4:	20000118 	.word	0x20000118
 8009ca8:	e000ef34 	.word	0xe000ef34

08009cac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
	__asm volatile
 8009cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb6:	b672      	cpsid	i
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	b662      	cpsie	i
 8009cc6:	607b      	str	r3, [r7, #4]
}
 8009cc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009cca:	4b10      	ldr	r3, [pc, #64]	; (8009d0c <vPortEnterCritical+0x60>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	4a0e      	ldr	r2, [pc, #56]	; (8009d0c <vPortEnterCritical+0x60>)
 8009cd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009cd4:	4b0d      	ldr	r3, [pc, #52]	; (8009d0c <vPortEnterCritical+0x60>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d111      	bne.n	8009d00 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009cdc:	4b0c      	ldr	r3, [pc, #48]	; (8009d10 <vPortEnterCritical+0x64>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00c      	beq.n	8009d00 <vPortEnterCritical+0x54>
	__asm volatile
 8009ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cea:	b672      	cpsid	i
 8009cec:	f383 8811 	msr	BASEPRI, r3
 8009cf0:	f3bf 8f6f 	isb	sy
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	b662      	cpsie	i
 8009cfa:	603b      	str	r3, [r7, #0]
}
 8009cfc:	bf00      	nop
 8009cfe:	e7fe      	b.n	8009cfe <vPortEnterCritical+0x52>
	}
}
 8009d00:	bf00      	nop
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr
 8009d0c:	20000118 	.word	0x20000118
 8009d10:	e000ed04 	.word	0xe000ed04

08009d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d1a:	4b13      	ldr	r3, [pc, #76]	; (8009d68 <vPortExitCritical+0x54>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10c      	bne.n	8009d3c <vPortExitCritical+0x28>
	__asm volatile
 8009d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d26:	b672      	cpsid	i
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	b662      	cpsie	i
 8009d36:	607b      	str	r3, [r7, #4]
}
 8009d38:	bf00      	nop
 8009d3a:	e7fe      	b.n	8009d3a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009d3c:	4b0a      	ldr	r3, [pc, #40]	; (8009d68 <vPortExitCritical+0x54>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	3b01      	subs	r3, #1
 8009d42:	4a09      	ldr	r2, [pc, #36]	; (8009d68 <vPortExitCritical+0x54>)
 8009d44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d46:	4b08      	ldr	r3, [pc, #32]	; (8009d68 <vPortExitCritical+0x54>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d105      	bne.n	8009d5a <vPortExitCritical+0x46>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	f383 8811 	msr	BASEPRI, r3
}
 8009d58:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d5a:	bf00      	nop
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	20000118 	.word	0x20000118
 8009d6c:	00000000 	.word	0x00000000

08009d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d70:	f3ef 8009 	mrs	r0, PSP
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	4b15      	ldr	r3, [pc, #84]	; (8009dd0 <pxCurrentTCBConst>)
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	f01e 0f10 	tst.w	lr, #16
 8009d80:	bf08      	it	eq
 8009d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8a:	6010      	str	r0, [r2, #0]
 8009d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d94:	b672      	cpsid	i
 8009d96:	f380 8811 	msr	BASEPRI, r0
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	b662      	cpsie	i
 8009da4:	f7fe ffae 	bl	8008d04 <vTaskSwitchContext>
 8009da8:	f04f 0000 	mov.w	r0, #0
 8009dac:	f380 8811 	msr	BASEPRI, r0
 8009db0:	bc09      	pop	{r0, r3}
 8009db2:	6819      	ldr	r1, [r3, #0]
 8009db4:	6808      	ldr	r0, [r1, #0]
 8009db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dba:	f01e 0f10 	tst.w	lr, #16
 8009dbe:	bf08      	it	eq
 8009dc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009dc4:	f380 8809 	msr	PSP, r0
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop

08009dd0 <pxCurrentTCBConst>:
 8009dd0:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop

08009dd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de2:	b672      	cpsid	i
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	b662      	cpsie	i
 8009df2:	607b      	str	r3, [r7, #4]
}
 8009df4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009df6:	f7fe fec9 	bl	8008b8c <xTaskIncrementTick>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d003      	beq.n	8009e08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e00:	4b06      	ldr	r3, [pc, #24]	; (8009e1c <SysTick_Handler+0x44>)
 8009e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	2300      	movs	r3, #0
 8009e0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	f383 8811 	msr	BASEPRI, r3
}
 8009e12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e14:	bf00      	nop
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	e000ed04 	.word	0xe000ed04

08009e20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e20:	b480      	push	{r7}
 8009e22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e24:	4b0b      	ldr	r3, [pc, #44]	; (8009e54 <vPortSetupTimerInterrupt+0x34>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e2a:	4b0b      	ldr	r3, [pc, #44]	; (8009e58 <vPortSetupTimerInterrupt+0x38>)
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e30:	4b0a      	ldr	r3, [pc, #40]	; (8009e5c <vPortSetupTimerInterrupt+0x3c>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a0a      	ldr	r2, [pc, #40]	; (8009e60 <vPortSetupTimerInterrupt+0x40>)
 8009e36:	fba2 2303 	umull	r2, r3, r2, r3
 8009e3a:	099b      	lsrs	r3, r3, #6
 8009e3c:	4a09      	ldr	r2, [pc, #36]	; (8009e64 <vPortSetupTimerInterrupt+0x44>)
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e42:	4b04      	ldr	r3, [pc, #16]	; (8009e54 <vPortSetupTimerInterrupt+0x34>)
 8009e44:	2207      	movs	r2, #7
 8009e46:	601a      	str	r2, [r3, #0]
}
 8009e48:	bf00      	nop
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	e000e010 	.word	0xe000e010
 8009e58:	e000e018 	.word	0xe000e018
 8009e5c:	2000011c 	.word	0x2000011c
 8009e60:	10624dd3 	.word	0x10624dd3
 8009e64:	e000e014 	.word	0xe000e014

08009e68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e68:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e78 <vPortEnableVFP+0x10>
 8009e6c:	6801      	ldr	r1, [r0, #0]
 8009e6e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e72:	6001      	str	r1, [r0, #0]
 8009e74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e76:	bf00      	nop
 8009e78:	e000ed88 	.word	0xe000ed88

08009e7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e82:	f3ef 8305 	mrs	r3, IPSR
 8009e86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2b0f      	cmp	r3, #15
 8009e8c:	d916      	bls.n	8009ebc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e8e:	4a19      	ldr	r2, [pc, #100]	; (8009ef4 <vPortValidateInterruptPriority+0x78>)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4413      	add	r3, r2
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e98:	4b17      	ldr	r3, [pc, #92]	; (8009ef8 <vPortValidateInterruptPriority+0x7c>)
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	7afa      	ldrb	r2, [r7, #11]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d20c      	bcs.n	8009ebc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea6:	b672      	cpsid	i
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	b662      	cpsie	i
 8009eb6:	607b      	str	r3, [r7, #4]
}
 8009eb8:	bf00      	nop
 8009eba:	e7fe      	b.n	8009eba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ebc:	4b0f      	ldr	r3, [pc, #60]	; (8009efc <vPortValidateInterruptPriority+0x80>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ec4:	4b0e      	ldr	r3, [pc, #56]	; (8009f00 <vPortValidateInterruptPriority+0x84>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d90c      	bls.n	8009ee6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed0:	b672      	cpsid	i
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	b662      	cpsie	i
 8009ee0:	603b      	str	r3, [r7, #0]
}
 8009ee2:	bf00      	nop
 8009ee4:	e7fe      	b.n	8009ee4 <vPortValidateInterruptPriority+0x68>
	}
 8009ee6:	bf00      	nop
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	e000e3f0 	.word	0xe000e3f0
 8009ef8:	20000fe0 	.word	0x20000fe0
 8009efc:	e000ed0c 	.word	0xe000ed0c
 8009f00:	20000fe4 	.word	0x20000fe4

08009f04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b08a      	sub	sp, #40	; 0x28
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009f10:	f7fe fd7e 	bl	8008a10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009f14:	4b5b      	ldr	r3, [pc, #364]	; (800a084 <pvPortMalloc+0x180>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d101      	bne.n	8009f20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f1c:	f000 f91a 	bl	800a154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f20:	4b59      	ldr	r3, [pc, #356]	; (800a088 <pvPortMalloc+0x184>)
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4013      	ands	r3, r2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f040 8092 	bne.w	800a052 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d01f      	beq.n	8009f74 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009f34:	2208      	movs	r2, #8
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4413      	add	r3, r2
 8009f3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f003 0307 	and.w	r3, r3, #7
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d016      	beq.n	8009f74 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f023 0307 	bic.w	r3, r3, #7
 8009f4c:	3308      	adds	r3, #8
 8009f4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f003 0307 	and.w	r3, r3, #7
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00c      	beq.n	8009f74 <pvPortMalloc+0x70>
	__asm volatile
 8009f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5e:	b672      	cpsid	i
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	b662      	cpsie	i
 8009f6e:	617b      	str	r3, [r7, #20]
}
 8009f70:	bf00      	nop
 8009f72:	e7fe      	b.n	8009f72 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d06b      	beq.n	800a052 <pvPortMalloc+0x14e>
 8009f7a:	4b44      	ldr	r3, [pc, #272]	; (800a08c <pvPortMalloc+0x188>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d866      	bhi.n	800a052 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f84:	4b42      	ldr	r3, [pc, #264]	; (800a090 <pvPortMalloc+0x18c>)
 8009f86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f88:	4b41      	ldr	r3, [pc, #260]	; (800a090 <pvPortMalloc+0x18c>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f8e:	e004      	b.n	8009f9a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d903      	bls.n	8009fac <pvPortMalloc+0xa8>
 8009fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1f1      	bne.n	8009f90 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009fac:	4b35      	ldr	r3, [pc, #212]	; (800a084 <pvPortMalloc+0x180>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d04d      	beq.n	800a052 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009fb6:	6a3b      	ldr	r3, [r7, #32]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2208      	movs	r2, #8
 8009fbc:	4413      	add	r3, r2
 8009fbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	1ad2      	subs	r2, r2, r3
 8009fd0:	2308      	movs	r3, #8
 8009fd2:	005b      	lsls	r3, r3, #1
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d921      	bls.n	800a01c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4413      	add	r3, r2
 8009fde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	f003 0307 	and.w	r3, r3, #7
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00c      	beq.n	800a004 <pvPortMalloc+0x100>
	__asm volatile
 8009fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fee:	b672      	cpsid	i
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	b662      	cpsie	i
 8009ffe:	613b      	str	r3, [r7, #16]
}
 800a000:	bf00      	nop
 800a002:	e7fe      	b.n	800a002 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a006:	685a      	ldr	r2, [r3, #4]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	1ad2      	subs	r2, r2, r3
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a016:	69b8      	ldr	r0, [r7, #24]
 800a018:	f000 f8fe 	bl	800a218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a01c:	4b1b      	ldr	r3, [pc, #108]	; (800a08c <pvPortMalloc+0x188>)
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	4a19      	ldr	r2, [pc, #100]	; (800a08c <pvPortMalloc+0x188>)
 800a028:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a02a:	4b18      	ldr	r3, [pc, #96]	; (800a08c <pvPortMalloc+0x188>)
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	4b19      	ldr	r3, [pc, #100]	; (800a094 <pvPortMalloc+0x190>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	429a      	cmp	r2, r3
 800a034:	d203      	bcs.n	800a03e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a036:	4b15      	ldr	r3, [pc, #84]	; (800a08c <pvPortMalloc+0x188>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a16      	ldr	r2, [pc, #88]	; (800a094 <pvPortMalloc+0x190>)
 800a03c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	4b11      	ldr	r3, [pc, #68]	; (800a088 <pvPortMalloc+0x184>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	431a      	orrs	r2, r3
 800a048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04e:	2200      	movs	r2, #0
 800a050:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a052:	f7fe fceb 	bl	8008a2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	f003 0307 	and.w	r3, r3, #7
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00c      	beq.n	800a07a <pvPortMalloc+0x176>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	b672      	cpsid	i
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	b662      	cpsie	i
 800a074:	60fb      	str	r3, [r7, #12]
}
 800a076:	bf00      	nop
 800a078:	e7fe      	b.n	800a078 <pvPortMalloc+0x174>
	return pvReturn;
 800a07a:	69fb      	ldr	r3, [r7, #28]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3728      	adds	r7, #40	; 0x28
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	20004bf0 	.word	0x20004bf0
 800a088:	20004bfc 	.word	0x20004bfc
 800a08c:	20004bf4 	.word	0x20004bf4
 800a090:	20004be8 	.word	0x20004be8
 800a094:	20004bf8 	.word	0x20004bf8

0800a098 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d04c      	beq.n	800a144 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a0aa:	2308      	movs	r3, #8
 800a0ac:	425b      	negs	r3, r3
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	4b23      	ldr	r3, [pc, #140]	; (800a14c <vPortFree+0xb4>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10c      	bne.n	800a0e0 <vPortFree+0x48>
	__asm volatile
 800a0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ca:	b672      	cpsid	i
 800a0cc:	f383 8811 	msr	BASEPRI, r3
 800a0d0:	f3bf 8f6f 	isb	sy
 800a0d4:	f3bf 8f4f 	dsb	sy
 800a0d8:	b662      	cpsie	i
 800a0da:	60fb      	str	r3, [r7, #12]
}
 800a0dc:	bf00      	nop
 800a0de:	e7fe      	b.n	800a0de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00c      	beq.n	800a102 <vPortFree+0x6a>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ec:	b672      	cpsid	i
 800a0ee:	f383 8811 	msr	BASEPRI, r3
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	b662      	cpsie	i
 800a0fc:	60bb      	str	r3, [r7, #8]
}
 800a0fe:	bf00      	nop
 800a100:	e7fe      	b.n	800a100 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	4b11      	ldr	r3, [pc, #68]	; (800a14c <vPortFree+0xb4>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4013      	ands	r3, r2
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d019      	beq.n	800a144 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d115      	bne.n	800a144 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	685a      	ldr	r2, [r3, #4]
 800a11c:	4b0b      	ldr	r3, [pc, #44]	; (800a14c <vPortFree+0xb4>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	43db      	mvns	r3, r3
 800a122:	401a      	ands	r2, r3
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a128:	f7fe fc72 	bl	8008a10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	4b07      	ldr	r3, [pc, #28]	; (800a150 <vPortFree+0xb8>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4413      	add	r3, r2
 800a136:	4a06      	ldr	r2, [pc, #24]	; (800a150 <vPortFree+0xb8>)
 800a138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a13a:	6938      	ldr	r0, [r7, #16]
 800a13c:	f000 f86c 	bl	800a218 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a140:	f7fe fc74 	bl	8008a2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a144:	bf00      	nop
 800a146:	3718      	adds	r7, #24
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	20004bfc 	.word	0x20004bfc
 800a150:	20004bf4 	.word	0x20004bf4

0800a154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a15a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a15e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a160:	4b27      	ldr	r3, [pc, #156]	; (800a200 <prvHeapInit+0xac>)
 800a162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00c      	beq.n	800a188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	3307      	adds	r3, #7
 800a172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f023 0307 	bic.w	r3, r3, #7
 800a17a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	4a1f      	ldr	r2, [pc, #124]	; (800a200 <prvHeapInit+0xac>)
 800a184:	4413      	add	r3, r2
 800a186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a18c:	4a1d      	ldr	r2, [pc, #116]	; (800a204 <prvHeapInit+0xb0>)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a192:	4b1c      	ldr	r3, [pc, #112]	; (800a204 <prvHeapInit+0xb0>)
 800a194:	2200      	movs	r2, #0
 800a196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	4413      	add	r3, r2
 800a19e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a1a0:	2208      	movs	r2, #8
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	1a9b      	subs	r3, r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f023 0307 	bic.w	r3, r3, #7
 800a1ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	4a15      	ldr	r2, [pc, #84]	; (800a208 <prvHeapInit+0xb4>)
 800a1b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a1b6:	4b14      	ldr	r3, [pc, #80]	; (800a208 <prvHeapInit+0xb4>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a1be:	4b12      	ldr	r3, [pc, #72]	; (800a208 <prvHeapInit+0xb4>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	1ad2      	subs	r2, r2, r3
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a1d4:	4b0c      	ldr	r3, [pc, #48]	; (800a208 <prvHeapInit+0xb4>)
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	4a0a      	ldr	r2, [pc, #40]	; (800a20c <prvHeapInit+0xb8>)
 800a1e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	4a09      	ldr	r2, [pc, #36]	; (800a210 <prvHeapInit+0xbc>)
 800a1ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1ec:	4b09      	ldr	r3, [pc, #36]	; (800a214 <prvHeapInit+0xc0>)
 800a1ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1f2:	601a      	str	r2, [r3, #0]
}
 800a1f4:	bf00      	nop
 800a1f6:	3714      	adds	r7, #20
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr
 800a200:	20000fe8 	.word	0x20000fe8
 800a204:	20004be8 	.word	0x20004be8
 800a208:	20004bf0 	.word	0x20004bf0
 800a20c:	20004bf8 	.word	0x20004bf8
 800a210:	20004bf4 	.word	0x20004bf4
 800a214:	20004bfc 	.word	0x20004bfc

0800a218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a220:	4b28      	ldr	r3, [pc, #160]	; (800a2c4 <prvInsertBlockIntoFreeList+0xac>)
 800a222:	60fb      	str	r3, [r7, #12]
 800a224:	e002      	b.n	800a22c <prvInsertBlockIntoFreeList+0x14>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	60fb      	str	r3, [r7, #12]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	429a      	cmp	r2, r3
 800a234:	d8f7      	bhi.n	800a226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	4413      	add	r3, r2
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	429a      	cmp	r2, r3
 800a246:	d108      	bne.n	800a25a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	685a      	ldr	r2, [r3, #4]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	441a      	add	r2, r3
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	441a      	add	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d118      	bne.n	800a2a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	4b15      	ldr	r3, [pc, #84]	; (800a2c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	429a      	cmp	r2, r3
 800a278:	d00d      	beq.n	800a296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	441a      	add	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	e008      	b.n	800a2a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a296:	4b0c      	ldr	r3, [pc, #48]	; (800a2c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	601a      	str	r2, [r3, #0]
 800a29e:	e003      	b.n	800a2a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d002      	beq.n	800a2b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2b6:	bf00      	nop
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	20004be8 	.word	0x20004be8
 800a2c8:	20004bf0 	.word	0x20004bf0

0800a2cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a2d0:	4904      	ldr	r1, [pc, #16]	; (800a2e4 <MX_FATFS_Init+0x18>)
 800a2d2:	4805      	ldr	r0, [pc, #20]	; (800a2e8 <MX_FATFS_Init+0x1c>)
 800a2d4:	f7fd f9ec 	bl	80076b0 <FATFS_LinkDriver>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	461a      	mov	r2, r3
 800a2dc:	4b03      	ldr	r3, [pc, #12]	; (800a2ec <MX_FATFS_Init+0x20>)
 800a2de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a2e0:	bf00      	nop
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	20004d98 	.word	0x20004d98
 800a2e8:	20000194 	.word	0x20000194
 800a2ec:	20004d9c 	.word	0x20004d9c

0800a2f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a2f4:	f7f6 f908 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a2f8:	f000 f82c 	bl	800a354 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a2fc:	f000 f98e 	bl	800a61c <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 800a300:	f000 f958 	bl	800a5b4 <_ZL19MX_USART3_UART_Initv>
  MX_FATFS_Init();
 800a304:	f7ff ffe2 	bl	800a2cc <MX_FATFS_Init>
  MX_SPI1_Init();
 800a308:	f000 f912 	bl	800a530 <_ZL12MX_SPI1_Initv>
  MX_I2C1_Init();
 800a30c:	f000 f8c2 	bl	800a494 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800a310:	f7fd f9e4 	bl	80076dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkLED01 */
  blinkLED01Handle = osThreadNew(StartDefaultTask, NULL, &blinkLED01_attributes);
 800a314:	4a09      	ldr	r2, [pc, #36]	; (800a33c <main+0x4c>)
 800a316:	2100      	movs	r1, #0
 800a318:	4809      	ldr	r0, [pc, #36]	; (800a340 <main+0x50>)
 800a31a:	f7fd fa49 	bl	80077b0 <osThreadNew>
 800a31e:	4603      	mov	r3, r0
 800a320:	4a08      	ldr	r2, [pc, #32]	; (800a344 <main+0x54>)
 800a322:	6013      	str	r3, [r2, #0]

  /* creation of blinkLED02 */
  blinkLED02Handle = osThreadNew(StartTask02, NULL, &blinkLED02_attributes);
 800a324:	4a08      	ldr	r2, [pc, #32]	; (800a348 <main+0x58>)
 800a326:	2100      	movs	r1, #0
 800a328:	4808      	ldr	r0, [pc, #32]	; (800a34c <main+0x5c>)
 800a32a:	f7fd fa41 	bl	80077b0 <osThreadNew>
 800a32e:	4603      	mov	r3, r0
 800a330:	4a07      	ldr	r2, [pc, #28]	; (800a350 <main+0x60>)
 800a332:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800a334:	f7fd fa06 	bl	8007744 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a338:	e7fe      	b.n	800a338 <main+0x48>
 800a33a:	bf00      	nop
 800a33c:	0800bc84 	.word	0x0800bc84
 800a340:	0800a811 	.word	0x0800a811
 800a344:	20004d34 	.word	0x20004d34
 800a348:	0800bca8 	.word	0x0800bca8
 800a34c:	0800a825 	.word	0x0800a825
 800a350:	20004d38 	.word	0x20004d38

0800a354 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b0b4      	sub	sp, #208	; 0xd0
 800a358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a35a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a35e:	2230      	movs	r2, #48	; 0x30
 800a360:	2100      	movs	r1, #0
 800a362:	4618      	mov	r0, r3
 800a364:	f001 fb0e 	bl	800b984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a368:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a36c:	2200      	movs	r2, #0
 800a36e:	601a      	str	r2, [r3, #0]
 800a370:	605a      	str	r2, [r3, #4]
 800a372:	609a      	str	r2, [r3, #8]
 800a374:	60da      	str	r2, [r3, #12]
 800a376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a378:	f107 0308 	add.w	r3, r7, #8
 800a37c:	2284      	movs	r2, #132	; 0x84
 800a37e:	2100      	movs	r1, #0
 800a380:	4618      	mov	r0, r3
 800a382:	f001 faff 	bl	800b984 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800a386:	f7f7 ff31 	bl	80021ec <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a38a:	4b3f      	ldr	r3, [pc, #252]	; (800a488 <_Z18SystemClock_Configv+0x134>)
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	4a3e      	ldr	r2, [pc, #248]	; (800a488 <_Z18SystemClock_Configv+0x134>)
 800a390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a394:	6413      	str	r3, [r2, #64]	; 0x40
 800a396:	4b3c      	ldr	r3, [pc, #240]	; (800a488 <_Z18SystemClock_Configv+0x134>)
 800a398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a39e:	607b      	str	r3, [r7, #4]
 800a3a0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800a3a2:	4b3a      	ldr	r3, [pc, #232]	; (800a48c <_Z18SystemClock_Configv+0x138>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a3aa:	4a38      	ldr	r2, [pc, #224]	; (800a48c <_Z18SystemClock_Configv+0x138>)
 800a3ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a3b0:	6013      	str	r3, [r2, #0]
 800a3b2:	4b36      	ldr	r3, [pc, #216]	; (800a48c <_Z18SystemClock_Configv+0x138>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a3ba:	603b      	str	r3, [r7, #0]
 800a3bc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800a3c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800a3c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a3d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a3d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800a3da:	2304      	movs	r3, #4
 800a3dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 800a3e0:	2348      	movs	r3, #72	; 0x48
 800a3e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a3f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7f7 ff08 	bl	800220c <HAL_RCC_OscConfig>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	bf14      	ite	ne
 800a402:	2301      	movne	r3, #1
 800a404:	2300      	moveq	r3, #0
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d001      	beq.n	800a410 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 800a40c:	f000 fa24 	bl	800a858 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a410:	230f      	movs	r3, #15
 800a412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a416:	2302      	movs	r3, #2
 800a418:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a41c:	2300      	movs	r3, #0
 800a41e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a426:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a42a:	2300      	movs	r3, #0
 800a42c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a430:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a434:	2102      	movs	r1, #2
 800a436:	4618      	mov	r0, r3
 800a438:	f7f8 f98c 	bl	8002754 <HAL_RCC_ClockConfig>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	bf14      	ite	ne
 800a442:	2301      	movne	r3, #1
 800a444:	2300      	moveq	r3, #0
 800a446:	b2db      	uxtb	r3, r3
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d001      	beq.n	800a450 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 800a44c:	f000 fa04 	bl	800a858 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 800a450:	4b0f      	ldr	r3, [pc, #60]	; (800a490 <_Z18SystemClock_Configv+0x13c>)
 800a452:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a454:	2300      	movs	r3, #0
 800a456:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800a458:	2300      	movs	r3, #0
 800a45a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800a45c:	2300      	movs	r3, #0
 800a45e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a462:	f107 0308 	add.w	r3, r7, #8
 800a466:	4618      	mov	r0, r3
 800a468:	f7f8 fba8 	bl	8002bbc <HAL_RCCEx_PeriphCLKConfig>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	bf14      	ite	ne
 800a472:	2301      	movne	r3, #1
 800a474:	2300      	moveq	r3, #0
 800a476:	b2db      	uxtb	r3, r3
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d001      	beq.n	800a480 <_Z18SystemClock_Configv+0x12c>
  {
    Error_Handler();
 800a47c:	f000 f9ec 	bl	800a858 <Error_Handler>
  }
}
 800a480:	bf00      	nop
 800a482:	37d0      	adds	r7, #208	; 0xd0
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	40023800 	.word	0x40023800
 800a48c:	40007000 	.word	0x40007000
 800a490:	00204100 	.word	0x00204100

0800a494 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a498:	4b22      	ldr	r3, [pc, #136]	; (800a524 <_ZL12MX_I2C1_Initv+0x90>)
 800a49a:	4a23      	ldr	r2, [pc, #140]	; (800a528 <_ZL12MX_I2C1_Initv+0x94>)
 800a49c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800a49e:	4b21      	ldr	r3, [pc, #132]	; (800a524 <_ZL12MX_I2C1_Initv+0x90>)
 800a4a0:	4a22      	ldr	r2, [pc, #136]	; (800a52c <_ZL12MX_I2C1_Initv+0x98>)
 800a4a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800a4a4:	4b1f      	ldr	r3, [pc, #124]	; (800a524 <_ZL12MX_I2C1_Initv+0x90>)
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a4aa:	4b1e      	ldr	r3, [pc, #120]	; (800a524 <_ZL12MX_I2C1_Initv+0x90>)
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a4b0:	4b1c      	ldr	r3, [pc, #112]	; (800a524 <_ZL12MX_I2C1_Initv+0x90>)
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800a4b6:	4b1b      	ldr	r3, [pc, #108]	; (800a524 <_ZL12MX_I2C1_Initv+0x90>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a4bc:	4b19      	ldr	r3, [pc, #100]	; (800a524 <_ZL12MX_I2C1_Initv+0x90>)
 800a4be:	2200      	movs	r2, #0
 800a4c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a4c2:	4b18      	ldr	r3, [pc, #96]	; (800a524 <_ZL12MX_I2C1_Initv+0x90>)
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a4c8:	4b16      	ldr	r3, [pc, #88]	; (800a524 <_ZL12MX_I2C1_Initv+0x90>)
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a4ce:	4815      	ldr	r0, [pc, #84]	; (800a524 <_ZL12MX_I2C1_Initv+0x90>)
 800a4d0:	f7f6 fba6 	bl	8000c20 <HAL_I2C_Init>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	bf14      	ite	ne
 800a4da:	2301      	movne	r3, #1
 800a4dc:	2300      	moveq	r3, #0
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 800a4e4:	f000 f9b8 	bl	800a858 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	480e      	ldr	r0, [pc, #56]	; (800a524 <_ZL12MX_I2C1_Initv+0x90>)
 800a4ec:	f7f6 fc28 	bl	8000d40 <HAL_I2CEx_ConfigAnalogFilter>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	bf14      	ite	ne
 800a4f6:	2301      	movne	r3, #1
 800a4f8:	2300      	moveq	r3, #0
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d001      	beq.n	800a504 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 800a500:	f000 f9aa 	bl	800a858 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a504:	2100      	movs	r1, #0
 800a506:	4807      	ldr	r0, [pc, #28]	; (800a524 <_ZL12MX_I2C1_Initv+0x90>)
 800a508:	f7f6 fc65 	bl	8000dd6 <HAL_I2CEx_ConfigDigitalFilter>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	bf14      	ite	ne
 800a512:	2301      	movne	r3, #1
 800a514:	2300      	moveq	r3, #0
 800a516:	b2db      	uxtb	r3, r3
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d001      	beq.n	800a520 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 800a51c:	f000 f99c 	bl	800a858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a520:	bf00      	nop
 800a522:	bd80      	pop	{r7, pc}
 800a524:	20004c00 	.word	0x20004c00
 800a528:	40005400 	.word	0x40005400
 800a52c:	00808cd2 	.word	0x00808cd2

0800a530 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a534:	4b1d      	ldr	r3, [pc, #116]	; (800a5ac <_ZL12MX_SPI1_Initv+0x7c>)
 800a536:	4a1e      	ldr	r2, [pc, #120]	; (800a5b0 <_ZL12MX_SPI1_Initv+0x80>)
 800a538:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a53a:	4b1c      	ldr	r3, [pc, #112]	; (800a5ac <_ZL12MX_SPI1_Initv+0x7c>)
 800a53c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a540:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a542:	4b1a      	ldr	r3, [pc, #104]	; (800a5ac <_ZL12MX_SPI1_Initv+0x7c>)
 800a544:	2200      	movs	r2, #0
 800a546:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a548:	4b18      	ldr	r3, [pc, #96]	; (800a5ac <_ZL12MX_SPI1_Initv+0x7c>)
 800a54a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a54e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a550:	4b16      	ldr	r3, [pc, #88]	; (800a5ac <_ZL12MX_SPI1_Initv+0x7c>)
 800a552:	2200      	movs	r2, #0
 800a554:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a556:	4b15      	ldr	r3, [pc, #84]	; (800a5ac <_ZL12MX_SPI1_Initv+0x7c>)
 800a558:	2200      	movs	r2, #0
 800a55a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a55c:	4b13      	ldr	r3, [pc, #76]	; (800a5ac <_ZL12MX_SPI1_Initv+0x7c>)
 800a55e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a562:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800a564:	4b11      	ldr	r3, [pc, #68]	; (800a5ac <_ZL12MX_SPI1_Initv+0x7c>)
 800a566:	2228      	movs	r2, #40	; 0x28
 800a568:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a56a:	4b10      	ldr	r3, [pc, #64]	; (800a5ac <_ZL12MX_SPI1_Initv+0x7c>)
 800a56c:	2200      	movs	r2, #0
 800a56e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a570:	4b0e      	ldr	r3, [pc, #56]	; (800a5ac <_ZL12MX_SPI1_Initv+0x7c>)
 800a572:	2200      	movs	r2, #0
 800a574:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a576:	4b0d      	ldr	r3, [pc, #52]	; (800a5ac <_ZL12MX_SPI1_Initv+0x7c>)
 800a578:	2200      	movs	r2, #0
 800a57a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800a57c:	4b0b      	ldr	r3, [pc, #44]	; (800a5ac <_ZL12MX_SPI1_Initv+0x7c>)
 800a57e:	2207      	movs	r2, #7
 800a580:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a582:	4b0a      	ldr	r3, [pc, #40]	; (800a5ac <_ZL12MX_SPI1_Initv+0x7c>)
 800a584:	2200      	movs	r2, #0
 800a586:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800a588:	4b08      	ldr	r3, [pc, #32]	; (800a5ac <_ZL12MX_SPI1_Initv+0x7c>)
 800a58a:	2200      	movs	r2, #0
 800a58c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a58e:	4807      	ldr	r0, [pc, #28]	; (800a5ac <_ZL12MX_SPI1_Initv+0x7c>)
 800a590:	f7f8 ff04 	bl	800339c <HAL_SPI_Init>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	bf14      	ite	ne
 800a59a:	2301      	movne	r3, #1
 800a59c:	2300      	moveq	r3, #0
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 800a5a4:	f000 f958 	bl	800a858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a5a8:	bf00      	nop
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	20004c4c 	.word	0x20004c4c
 800a5b0:	40013000 	.word	0x40013000

0800a5b4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a5b8:	4b16      	ldr	r3, [pc, #88]	; (800a614 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a5ba:	4a17      	ldr	r2, [pc, #92]	; (800a618 <_ZL19MX_USART3_UART_Initv+0x64>)
 800a5bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800a5be:	4b15      	ldr	r3, [pc, #84]	; (800a614 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a5c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a5c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a5c6:	4b13      	ldr	r3, [pc, #76]	; (800a614 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a5cc:	4b11      	ldr	r3, [pc, #68]	; (800a614 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a5d2:	4b10      	ldr	r3, [pc, #64]	; (800a614 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a5d8:	4b0e      	ldr	r3, [pc, #56]	; (800a614 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a5da:	220c      	movs	r2, #12
 800a5dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a5de:	4b0d      	ldr	r3, [pc, #52]	; (800a614 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a5e4:	4b0b      	ldr	r3, [pc, #44]	; (800a614 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a5ea:	4b0a      	ldr	r3, [pc, #40]	; (800a614 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a5f0:	4b08      	ldr	r3, [pc, #32]	; (800a614 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a5f6:	4807      	ldr	r0, [pc, #28]	; (800a614 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a5f8:	f7f9 fa5a 	bl	8003ab0 <HAL_UART_Init>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	bf14      	ite	ne
 800a602:	2301      	movne	r3, #1
 800a604:	2300      	moveq	r3, #0
 800a606:	b2db      	uxtb	r3, r3
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d001      	beq.n	800a610 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 800a60c:	f000 f924 	bl	800a858 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a610:	bf00      	nop
 800a612:	bd80      	pop	{r7, pc}
 800a614:	20004cb0 	.word	0x20004cb0
 800a618:	40004800 	.word	0x40004800

0800a61c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b08c      	sub	sp, #48	; 0x30
 800a620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a622:	f107 031c 	add.w	r3, r7, #28
 800a626:	2200      	movs	r2, #0
 800a628:	601a      	str	r2, [r3, #0]
 800a62a:	605a      	str	r2, [r3, #4]
 800a62c:	609a      	str	r2, [r3, #8]
 800a62e:	60da      	str	r2, [r3, #12]
 800a630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a632:	4b71      	ldr	r3, [pc, #452]	; (800a7f8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a636:	4a70      	ldr	r2, [pc, #448]	; (800a7f8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a638:	f043 0304 	orr.w	r3, r3, #4
 800a63c:	6313      	str	r3, [r2, #48]	; 0x30
 800a63e:	4b6e      	ldr	r3, [pc, #440]	; (800a7f8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a642:	f003 0304 	and.w	r3, r3, #4
 800a646:	61bb      	str	r3, [r7, #24]
 800a648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a64a:	4b6b      	ldr	r3, [pc, #428]	; (800a7f8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a64e:	4a6a      	ldr	r2, [pc, #424]	; (800a7f8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a654:	6313      	str	r3, [r2, #48]	; 0x30
 800a656:	4b68      	ldr	r3, [pc, #416]	; (800a7f8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a65e:	617b      	str	r3, [r7, #20]
 800a660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a662:	4b65      	ldr	r3, [pc, #404]	; (800a7f8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a666:	4a64      	ldr	r2, [pc, #400]	; (800a7f8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a668:	f043 0301 	orr.w	r3, r3, #1
 800a66c:	6313      	str	r3, [r2, #48]	; 0x30
 800a66e:	4b62      	ldr	r3, [pc, #392]	; (800a7f8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	613b      	str	r3, [r7, #16]
 800a678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a67a:	4b5f      	ldr	r3, [pc, #380]	; (800a7f8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67e:	4a5e      	ldr	r2, [pc, #376]	; (800a7f8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a680:	f043 0302 	orr.w	r3, r3, #2
 800a684:	6313      	str	r3, [r2, #48]	; 0x30
 800a686:	4b5c      	ldr	r3, [pc, #368]	; (800a7f8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68a:	f003 0302 	and.w	r3, r3, #2
 800a68e:	60fb      	str	r3, [r7, #12]
 800a690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a692:	4b59      	ldr	r3, [pc, #356]	; (800a7f8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a696:	4a58      	ldr	r2, [pc, #352]	; (800a7f8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a698:	f043 0308 	orr.w	r3, r3, #8
 800a69c:	6313      	str	r3, [r2, #48]	; 0x30
 800a69e:	4b56      	ldr	r3, [pc, #344]	; (800a7f8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a2:	f003 0308 	and.w	r3, r3, #8
 800a6a6:	60bb      	str	r3, [r7, #8]
 800a6a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a6aa:	4b53      	ldr	r3, [pc, #332]	; (800a7f8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ae:	4a52      	ldr	r2, [pc, #328]	; (800a7f8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a6b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6b4:	6313      	str	r3, [r2, #48]	; 0x30
 800a6b6:	4b50      	ldr	r3, [pc, #320]	; (800a7f8 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a6b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6be:	607b      	str	r3, [r7, #4]
 800a6c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	2110      	movs	r1, #16
 800a6c6:	484d      	ldr	r0, [pc, #308]	; (800a7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800a6c8:	f7f6 fa90 	bl	8000bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f244 0181 	movw	r1, #16513	; 0x4081
 800a6d2:	484b      	ldr	r0, [pc, #300]	; (800a800 <_ZL12MX_GPIO_Initv+0x1e4>)
 800a6d4:	f7f6 fa8a 	bl	8000bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800a6d8:	2200      	movs	r2, #0
 800a6da:	2140      	movs	r1, #64	; 0x40
 800a6dc:	4849      	ldr	r0, [pc, #292]	; (800a804 <_ZL12MX_GPIO_Initv+0x1e8>)
 800a6de:	f7f6 fa85 	bl	8000bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800a6e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a6e8:	4b47      	ldr	r3, [pc, #284]	; (800a808 <_ZL12MX_GPIO_Initv+0x1ec>)
 800a6ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800a6f0:	f107 031c 	add.w	r3, r7, #28
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	4845      	ldr	r0, [pc, #276]	; (800a80c <_ZL12MX_GPIO_Initv+0x1f0>)
 800a6f8:	f7f6 f8cc 	bl	8000894 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a6fc:	2332      	movs	r3, #50	; 0x32
 800a6fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a700:	2302      	movs	r3, #2
 800a702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a704:	2300      	movs	r3, #0
 800a706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a708:	2303      	movs	r3, #3
 800a70a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a70c:	230b      	movs	r3, #11
 800a70e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a710:	f107 031c 	add.w	r3, r7, #28
 800a714:	4619      	mov	r1, r3
 800a716:	483d      	ldr	r0, [pc, #244]	; (800a80c <_ZL12MX_GPIO_Initv+0x1f0>)
 800a718:	f7f6 f8bc 	bl	8000894 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a71c:	2386      	movs	r3, #134	; 0x86
 800a71e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a720:	2302      	movs	r3, #2
 800a722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a724:	2300      	movs	r3, #0
 800a726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a728:	2303      	movs	r3, #3
 800a72a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a72c:	230b      	movs	r3, #11
 800a72e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a730:	f107 031c 	add.w	r3, r7, #28
 800a734:	4619      	mov	r1, r3
 800a736:	4831      	ldr	r0, [pc, #196]	; (800a7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800a738:	f7f6 f8ac 	bl	8000894 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800a73c:	2310      	movs	r3, #16
 800a73e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a740:	2301      	movs	r3, #1
 800a742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a744:	2300      	movs	r3, #0
 800a746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a748:	2300      	movs	r3, #0
 800a74a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800a74c:	f107 031c 	add.w	r3, r7, #28
 800a750:	4619      	mov	r1, r3
 800a752:	482a      	ldr	r0, [pc, #168]	; (800a7fc <_ZL12MX_GPIO_Initv+0x1e0>)
 800a754:	f7f6 f89e 	bl	8000894 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800a758:	f244 0381 	movw	r3, #16513	; 0x4081
 800a75c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a75e:	2301      	movs	r3, #1
 800a760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a762:	2300      	movs	r3, #0
 800a764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a766:	2300      	movs	r3, #0
 800a768:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a76a:	f107 031c 	add.w	r3, r7, #28
 800a76e:	4619      	mov	r1, r3
 800a770:	4823      	ldr	r0, [pc, #140]	; (800a800 <_ZL12MX_GPIO_Initv+0x1e4>)
 800a772:	f7f6 f88f 	bl	8000894 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a77a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a77c:	2302      	movs	r3, #2
 800a77e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a780:	2300      	movs	r3, #0
 800a782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a784:	2303      	movs	r3, #3
 800a786:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a788:	230b      	movs	r3, #11
 800a78a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a78c:	f107 031c 	add.w	r3, r7, #28
 800a790:	4619      	mov	r1, r3
 800a792:	481b      	ldr	r0, [pc, #108]	; (800a800 <_ZL12MX_GPIO_Initv+0x1e4>)
 800a794:	f7f6 f87e 	bl	8000894 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800a798:	2340      	movs	r3, #64	; 0x40
 800a79a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a79c:	2301      	movs	r3, #1
 800a79e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800a7a8:	f107 031c 	add.w	r3, r7, #28
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	4815      	ldr	r0, [pc, #84]	; (800a804 <_ZL12MX_GPIO_Initv+0x1e8>)
 800a7b0:	f7f6 f870 	bl	8000894 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800a7b4:	2380      	movs	r3, #128	; 0x80
 800a7b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a7c0:	f107 031c 	add.w	r3, r7, #28
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	480f      	ldr	r0, [pc, #60]	; (800a804 <_ZL12MX_GPIO_Initv+0x1e8>)
 800a7c8:	f7f6 f864 	bl	8000894 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a7cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a7d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7d2:	2302      	movs	r3, #2
 800a7d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7da:	2303      	movs	r3, #3
 800a7dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a7de:	230b      	movs	r3, #11
 800a7e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a7e2:	f107 031c 	add.w	r3, r7, #28
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	4806      	ldr	r0, [pc, #24]	; (800a804 <_ZL12MX_GPIO_Initv+0x1e8>)
 800a7ea:	f7f6 f853 	bl	8000894 <HAL_GPIO_Init>

}
 800a7ee:	bf00      	nop
 800a7f0:	3730      	adds	r7, #48	; 0x30
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	40023800 	.word	0x40023800
 800a7fc:	40020000 	.word	0x40020000
 800a800:	40020400 	.word	0x40020400
 800a804:	40021800 	.word	0x40021800
 800a808:	10110000 	.word	0x10110000
 800a80c:	40020800 	.word	0x40020800

0800a810 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800a818:	f000 fa12 	bl	800ac40 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800a81c:	2001      	movs	r0, #1
 800a81e:	f7fd f86d 	bl	80078fc <osDelay>
 800a822:	e7fb      	b.n	800a81c <_Z16StartDefaultTaskPv+0xc>

0800a824 <_Z11StartTask02Pv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800a82c:	2001      	movs	r0, #1
 800a82e:	f7fd f865 	bl	80078fc <osDelay>
 800a832:	e7fb      	b.n	800a82c <_Z11StartTask02Pv+0x8>

0800a834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a04      	ldr	r2, [pc, #16]	; (800a854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d101      	bne.n	800a84a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a846:	f7f5 fe6d 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a84a:	bf00      	nop
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	40002000 	.word	0x40002000

0800a858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a858:	b480      	push	{r7}
 800a85a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a85c:	b672      	cpsid	i
}
 800a85e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a860:	e7fe      	b.n	800a860 <Error_Handler+0x8>
	...

0800a864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a86a:	4b11      	ldr	r3, [pc, #68]	; (800a8b0 <HAL_MspInit+0x4c>)
 800a86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86e:	4a10      	ldr	r2, [pc, #64]	; (800a8b0 <HAL_MspInit+0x4c>)
 800a870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a874:	6413      	str	r3, [r2, #64]	; 0x40
 800a876:	4b0e      	ldr	r3, [pc, #56]	; (800a8b0 <HAL_MspInit+0x4c>)
 800a878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a87e:	607b      	str	r3, [r7, #4]
 800a880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a882:	4b0b      	ldr	r3, [pc, #44]	; (800a8b0 <HAL_MspInit+0x4c>)
 800a884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a886:	4a0a      	ldr	r2, [pc, #40]	; (800a8b0 <HAL_MspInit+0x4c>)
 800a888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a88c:	6453      	str	r3, [r2, #68]	; 0x44
 800a88e:	4b08      	ldr	r3, [pc, #32]	; (800a8b0 <HAL_MspInit+0x4c>)
 800a890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a896:	603b      	str	r3, [r7, #0]
 800a898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a89a:	2200      	movs	r2, #0
 800a89c:	210f      	movs	r1, #15
 800a89e:	f06f 0001 	mvn.w	r0, #1
 800a8a2:	f7f5 ff3b 	bl	800071c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a8a6:	bf00      	nop
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	40023800 	.word	0x40023800

0800a8b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b08a      	sub	sp, #40	; 0x28
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8bc:	f107 0314 	add.w	r3, r7, #20
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	601a      	str	r2, [r3, #0]
 800a8c4:	605a      	str	r2, [r3, #4]
 800a8c6:	609a      	str	r2, [r3, #8]
 800a8c8:	60da      	str	r2, [r3, #12]
 800a8ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a17      	ldr	r2, [pc, #92]	; (800a930 <HAL_I2C_MspInit+0x7c>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d128      	bne.n	800a928 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a8d6:	4b17      	ldr	r3, [pc, #92]	; (800a934 <HAL_I2C_MspInit+0x80>)
 800a8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8da:	4a16      	ldr	r2, [pc, #88]	; (800a934 <HAL_I2C_MspInit+0x80>)
 800a8dc:	f043 0302 	orr.w	r3, r3, #2
 800a8e0:	6313      	str	r3, [r2, #48]	; 0x30
 800a8e2:	4b14      	ldr	r3, [pc, #80]	; (800a934 <HAL_I2C_MspInit+0x80>)
 800a8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e6:	f003 0302 	and.w	r3, r3, #2
 800a8ea:	613b      	str	r3, [r7, #16]
 800a8ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800a8ee:	f44f 7310 	mov.w	r3, #576	; 0x240
 800a8f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a8f4:	2312      	movs	r3, #18
 800a8f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8fc:	2303      	movs	r3, #3
 800a8fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a900:	2304      	movs	r3, #4
 800a902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a904:	f107 0314 	add.w	r3, r7, #20
 800a908:	4619      	mov	r1, r3
 800a90a:	480b      	ldr	r0, [pc, #44]	; (800a938 <HAL_I2C_MspInit+0x84>)
 800a90c:	f7f5 ffc2 	bl	8000894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a910:	4b08      	ldr	r3, [pc, #32]	; (800a934 <HAL_I2C_MspInit+0x80>)
 800a912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a914:	4a07      	ldr	r2, [pc, #28]	; (800a934 <HAL_I2C_MspInit+0x80>)
 800a916:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a91a:	6413      	str	r3, [r2, #64]	; 0x40
 800a91c:	4b05      	ldr	r3, [pc, #20]	; (800a934 <HAL_I2C_MspInit+0x80>)
 800a91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a924:	60fb      	str	r3, [r7, #12]
 800a926:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a928:	bf00      	nop
 800a92a:	3728      	adds	r7, #40	; 0x28
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	40005400 	.word	0x40005400
 800a934:	40023800 	.word	0x40023800
 800a938:	40020400 	.word	0x40020400

0800a93c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b08a      	sub	sp, #40	; 0x28
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a944:	f107 0314 	add.w	r3, r7, #20
 800a948:	2200      	movs	r2, #0
 800a94a:	601a      	str	r2, [r3, #0]
 800a94c:	605a      	str	r2, [r3, #4]
 800a94e:	609a      	str	r2, [r3, #8]
 800a950:	60da      	str	r2, [r3, #12]
 800a952:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a25      	ldr	r2, [pc, #148]	; (800a9f0 <HAL_SPI_MspInit+0xb4>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d143      	bne.n	800a9e6 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a95e:	4b25      	ldr	r3, [pc, #148]	; (800a9f4 <HAL_SPI_MspInit+0xb8>)
 800a960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a962:	4a24      	ldr	r2, [pc, #144]	; (800a9f4 <HAL_SPI_MspInit+0xb8>)
 800a964:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a968:	6453      	str	r3, [r2, #68]	; 0x44
 800a96a:	4b22      	ldr	r3, [pc, #136]	; (800a9f4 <HAL_SPI_MspInit+0xb8>)
 800a96c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a96e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a972:	613b      	str	r3, [r7, #16]
 800a974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a976:	4b1f      	ldr	r3, [pc, #124]	; (800a9f4 <HAL_SPI_MspInit+0xb8>)
 800a978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97a:	4a1e      	ldr	r2, [pc, #120]	; (800a9f4 <HAL_SPI_MspInit+0xb8>)
 800a97c:	f043 0301 	orr.w	r3, r3, #1
 800a980:	6313      	str	r3, [r2, #48]	; 0x30
 800a982:	4b1c      	ldr	r3, [pc, #112]	; (800a9f4 <HAL_SPI_MspInit+0xb8>)
 800a984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a986:	f003 0301 	and.w	r3, r3, #1
 800a98a:	60fb      	str	r3, [r7, #12]
 800a98c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a98e:	4b19      	ldr	r3, [pc, #100]	; (800a9f4 <HAL_SPI_MspInit+0xb8>)
 800a990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a992:	4a18      	ldr	r2, [pc, #96]	; (800a9f4 <HAL_SPI_MspInit+0xb8>)
 800a994:	f043 0302 	orr.w	r3, r3, #2
 800a998:	6313      	str	r3, [r2, #48]	; 0x30
 800a99a:	4b16      	ldr	r3, [pc, #88]	; (800a9f4 <HAL_SPI_MspInit+0xb8>)
 800a99c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a99e:	f003 0302 	and.w	r3, r3, #2
 800a9a2:	60bb      	str	r3, [r7, #8]
 800a9a4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800a9a6:	2360      	movs	r3, #96	; 0x60
 800a9a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9aa:	2302      	movs	r3, #2
 800a9ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a9b6:	2305      	movs	r3, #5
 800a9b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9ba:	f107 0314 	add.w	r3, r7, #20
 800a9be:	4619      	mov	r1, r3
 800a9c0:	480d      	ldr	r0, [pc, #52]	; (800a9f8 <HAL_SPI_MspInit+0xbc>)
 800a9c2:	f7f5 ff67 	bl	8000894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800a9c6:	2320      	movs	r3, #32
 800a9c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a9d6:	2305      	movs	r3, #5
 800a9d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a9da:	f107 0314 	add.w	r3, r7, #20
 800a9de:	4619      	mov	r1, r3
 800a9e0:	4806      	ldr	r0, [pc, #24]	; (800a9fc <HAL_SPI_MspInit+0xc0>)
 800a9e2:	f7f5 ff57 	bl	8000894 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800a9e6:	bf00      	nop
 800a9e8:	3728      	adds	r7, #40	; 0x28
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	40013000 	.word	0x40013000
 800a9f4:	40023800 	.word	0x40023800
 800a9f8:	40020000 	.word	0x40020000
 800a9fc:	40020400 	.word	0x40020400

0800aa00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b08a      	sub	sp, #40	; 0x28
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa08:	f107 0314 	add.w	r3, r7, #20
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	601a      	str	r2, [r3, #0]
 800aa10:	605a      	str	r2, [r3, #4]
 800aa12:	609a      	str	r2, [r3, #8]
 800aa14:	60da      	str	r2, [r3, #12]
 800aa16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a1b      	ldr	r2, [pc, #108]	; (800aa8c <HAL_UART_MspInit+0x8c>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d130      	bne.n	800aa84 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800aa22:	4b1b      	ldr	r3, [pc, #108]	; (800aa90 <HAL_UART_MspInit+0x90>)
 800aa24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa26:	4a1a      	ldr	r2, [pc, #104]	; (800aa90 <HAL_UART_MspInit+0x90>)
 800aa28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa2c:	6413      	str	r3, [r2, #64]	; 0x40
 800aa2e:	4b18      	ldr	r3, [pc, #96]	; (800aa90 <HAL_UART_MspInit+0x90>)
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa36:	613b      	str	r3, [r7, #16]
 800aa38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800aa3a:	4b15      	ldr	r3, [pc, #84]	; (800aa90 <HAL_UART_MspInit+0x90>)
 800aa3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa3e:	4a14      	ldr	r2, [pc, #80]	; (800aa90 <HAL_UART_MspInit+0x90>)
 800aa40:	f043 0308 	orr.w	r3, r3, #8
 800aa44:	6313      	str	r3, [r2, #48]	; 0x30
 800aa46:	4b12      	ldr	r3, [pc, #72]	; (800aa90 <HAL_UART_MspInit+0x90>)
 800aa48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa4a:	f003 0308 	and.w	r3, r3, #8
 800aa4e:	60fb      	str	r3, [r7, #12]
 800aa50:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800aa52:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aa56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa58:	2302      	movs	r3, #2
 800aa5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa60:	2303      	movs	r3, #3
 800aa62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800aa64:	2307      	movs	r3, #7
 800aa66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800aa68:	f107 0314 	add.w	r3, r7, #20
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	4809      	ldr	r0, [pc, #36]	; (800aa94 <HAL_UART_MspInit+0x94>)
 800aa70:	f7f5 ff10 	bl	8000894 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800aa74:	2200      	movs	r2, #0
 800aa76:	2105      	movs	r1, #5
 800aa78:	2027      	movs	r0, #39	; 0x27
 800aa7a:	f7f5 fe4f 	bl	800071c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800aa7e:	2027      	movs	r0, #39	; 0x27
 800aa80:	f7f5 fe68 	bl	8000754 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800aa84:	bf00      	nop
 800aa86:	3728      	adds	r7, #40	; 0x28
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	40004800 	.word	0x40004800
 800aa90:	40023800 	.word	0x40023800
 800aa94:	40020c00 	.word	0x40020c00

0800aa98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b08c      	sub	sp, #48	; 0x30
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	6879      	ldr	r1, [r7, #4]
 800aaac:	202d      	movs	r0, #45	; 0x2d
 800aaae:	f7f5 fe35 	bl	800071c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800aab2:	202d      	movs	r0, #45	; 0x2d
 800aab4:	f7f5 fe4e 	bl	8000754 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800aab8:	4b1f      	ldr	r3, [pc, #124]	; (800ab38 <HAL_InitTick+0xa0>)
 800aaba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aabc:	4a1e      	ldr	r2, [pc, #120]	; (800ab38 <HAL_InitTick+0xa0>)
 800aabe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aac2:	6413      	str	r3, [r2, #64]	; 0x40
 800aac4:	4b1c      	ldr	r3, [pc, #112]	; (800ab38 <HAL_InitTick+0xa0>)
 800aac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aacc:	60fb      	str	r3, [r7, #12]
 800aace:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800aad0:	f107 0210 	add.w	r2, r7, #16
 800aad4:	f107 0314 	add.w	r3, r7, #20
 800aad8:	4611      	mov	r1, r2
 800aada:	4618      	mov	r0, r3
 800aadc:	f7f8 f83c 	bl	8002b58 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800aae0:	f7f8 f812 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 800aae4:	4603      	mov	r3, r0
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800aaea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaec:	4a13      	ldr	r2, [pc, #76]	; (800ab3c <HAL_InitTick+0xa4>)
 800aaee:	fba2 2303 	umull	r2, r3, r2, r3
 800aaf2:	0c9b      	lsrs	r3, r3, #18
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800aaf8:	4b11      	ldr	r3, [pc, #68]	; (800ab40 <HAL_InitTick+0xa8>)
 800aafa:	4a12      	ldr	r2, [pc, #72]	; (800ab44 <HAL_InitTick+0xac>)
 800aafc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800aafe:	4b10      	ldr	r3, [pc, #64]	; (800ab40 <HAL_InitTick+0xa8>)
 800ab00:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ab04:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800ab06:	4a0e      	ldr	r2, [pc, #56]	; (800ab40 <HAL_InitTick+0xa8>)
 800ab08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800ab0c:	4b0c      	ldr	r3, [pc, #48]	; (800ab40 <HAL_InitTick+0xa8>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab12:	4b0b      	ldr	r3, [pc, #44]	; (800ab40 <HAL_InitTick+0xa8>)
 800ab14:	2200      	movs	r2, #0
 800ab16:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800ab18:	4809      	ldr	r0, [pc, #36]	; (800ab40 <HAL_InitTick+0xa8>)
 800ab1a:	f7f8 fcea 	bl	80034f2 <HAL_TIM_Base_Init>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d104      	bne.n	800ab2e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 800ab24:	4806      	ldr	r0, [pc, #24]	; (800ab40 <HAL_InitTick+0xa8>)
 800ab26:	f7f8 fd45 	bl	80035b4 <HAL_TIM_Base_Start_IT>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	e000      	b.n	800ab30 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3730      	adds	r7, #48	; 0x30
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	40023800 	.word	0x40023800
 800ab3c:	431bde83 	.word	0x431bde83
 800ab40:	20005204 	.word	0x20005204
 800ab44:	40002000 	.word	0x40002000

0800ab48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ab4c:	e7fe      	b.n	800ab4c <NMI_Handler+0x4>

0800ab4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ab4e:	b480      	push	{r7}
 800ab50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ab52:	e7fe      	b.n	800ab52 <HardFault_Handler+0x4>

0800ab54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ab54:	b480      	push	{r7}
 800ab56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ab58:	e7fe      	b.n	800ab58 <MemManage_Handler+0x4>

0800ab5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ab5e:	e7fe      	b.n	800ab5e <BusFault_Handler+0x4>

0800ab60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ab60:	b480      	push	{r7}
 800ab62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ab64:	e7fe      	b.n	800ab64 <UsageFault_Handler+0x4>

0800ab66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ab66:	b480      	push	{r7}
 800ab68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ab6a:	bf00      	nop
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800ab78:	4802      	ldr	r0, [pc, #8]	; (800ab84 <USART3_IRQHandler+0x10>)
 800ab7a:	f7f8 ffe7 	bl	8003b4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800ab7e:	bf00      	nop
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20004cb0 	.word	0x20004cb0

0800ab88 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800ab8c:	4802      	ldr	r0, [pc, #8]	; (800ab98 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800ab8e:	f7f8 fd89 	bl	80036a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800ab92:	bf00      	nop
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20005204 	.word	0x20005204

0800ab9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800aba0:	4802      	ldr	r0, [pc, #8]	; (800abac <OTG_FS_IRQHandler+0x10>)
 800aba2:	f7f6 faaa 	bl	80010fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800aba6:	bf00      	nop
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	20006520 	.word	0x20006520

0800abb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800abb8:	4a14      	ldr	r2, [pc, #80]	; (800ac0c <_sbrk+0x5c>)
 800abba:	4b15      	ldr	r3, [pc, #84]	; (800ac10 <_sbrk+0x60>)
 800abbc:	1ad3      	subs	r3, r2, r3
 800abbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800abc4:	4b13      	ldr	r3, [pc, #76]	; (800ac14 <_sbrk+0x64>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d102      	bne.n	800abd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800abcc:	4b11      	ldr	r3, [pc, #68]	; (800ac14 <_sbrk+0x64>)
 800abce:	4a12      	ldr	r2, [pc, #72]	; (800ac18 <_sbrk+0x68>)
 800abd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800abd2:	4b10      	ldr	r3, [pc, #64]	; (800ac14 <_sbrk+0x64>)
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4413      	add	r3, r2
 800abda:	693a      	ldr	r2, [r7, #16]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d207      	bcs.n	800abf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800abe0:	f000 fe88 	bl	800b8f4 <__errno>
 800abe4:	4603      	mov	r3, r0
 800abe6:	220c      	movs	r2, #12
 800abe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800abea:	f04f 33ff 	mov.w	r3, #4294967295
 800abee:	e009      	b.n	800ac04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800abf0:	4b08      	ldr	r3, [pc, #32]	; (800ac14 <_sbrk+0x64>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800abf6:	4b07      	ldr	r3, [pc, #28]	; (800ac14 <_sbrk+0x64>)
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4413      	add	r3, r2
 800abfe:	4a05      	ldr	r2, [pc, #20]	; (800ac14 <_sbrk+0x64>)
 800ac00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ac02:	68fb      	ldr	r3, [r7, #12]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3718      	adds	r7, #24
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	20050000 	.word	0x20050000
 800ac10:	00000400 	.word	0x00000400
 800ac14:	20004d3c 	.word	0x20004d3c
 800ac18:	20006b28 	.word	0x20006b28

0800ac1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ac20:	4b06      	ldr	r3, [pc, #24]	; (800ac3c <SystemInit+0x20>)
 800ac22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac26:	4a05      	ldr	r2, [pc, #20]	; (800ac3c <SystemInit+0x20>)
 800ac28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ac30:	bf00      	nop
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	e000ed00 	.word	0xe000ed00

0800ac40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ac44:	2200      	movs	r2, #0
 800ac46:	4912      	ldr	r1, [pc, #72]	; (800ac90 <MX_USB_DEVICE_Init+0x50>)
 800ac48:	4812      	ldr	r0, [pc, #72]	; (800ac94 <MX_USB_DEVICE_Init+0x54>)
 800ac4a:	f7fb fba7 	bl	800639c <USBD_Init>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d001      	beq.n	800ac58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ac54:	f7ff fe00 	bl	800a858 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ac58:	490f      	ldr	r1, [pc, #60]	; (800ac98 <MX_USB_DEVICE_Init+0x58>)
 800ac5a:	480e      	ldr	r0, [pc, #56]	; (800ac94 <MX_USB_DEVICE_Init+0x54>)
 800ac5c:	f7fb fbd4 	bl	8006408 <USBD_RegisterClass>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d001      	beq.n	800ac6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ac66:	f7ff fdf7 	bl	800a858 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ac6a:	490c      	ldr	r1, [pc, #48]	; (800ac9c <MX_USB_DEVICE_Init+0x5c>)
 800ac6c:	4809      	ldr	r0, [pc, #36]	; (800ac94 <MX_USB_DEVICE_Init+0x54>)
 800ac6e:	f7fb fb29 	bl	80062c4 <USBD_CDC_RegisterInterface>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d001      	beq.n	800ac7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ac78:	f7ff fdee 	bl	800a858 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ac7c:	4805      	ldr	r0, [pc, #20]	; (800ac94 <MX_USB_DEVICE_Init+0x54>)
 800ac7e:	f7fb fbe4 	bl	800644a <USBD_Start>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d001      	beq.n	800ac8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ac88:	f7ff fde6 	bl	800a858 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ac8c:	bf00      	nop
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	20000134 	.word	0x20000134
 800ac94:	20005250 	.word	0x20005250
 800ac98:	20000014 	.word	0x20000014
 800ac9c:	20000120 	.word	0x20000120

0800aca0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aca4:	2200      	movs	r2, #0
 800aca6:	4905      	ldr	r1, [pc, #20]	; (800acbc <CDC_Init_FS+0x1c>)
 800aca8:	4805      	ldr	r0, [pc, #20]	; (800acc0 <CDC_Init_FS+0x20>)
 800acaa:	f7fb fb20 	bl	80062ee <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800acae:	4905      	ldr	r1, [pc, #20]	; (800acc4 <CDC_Init_FS+0x24>)
 800acb0:	4803      	ldr	r0, [pc, #12]	; (800acc0 <CDC_Init_FS+0x20>)
 800acb2:	f7fb fb35 	bl	8006320 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800acb6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800acb8:	4618      	mov	r0, r3
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	20005d20 	.word	0x20005d20
 800acc0:	20005250 	.word	0x20005250
 800acc4:	20005520 	.word	0x20005520

0800acc8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800acc8:	b480      	push	{r7}
 800acca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800accc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800acce:	4618      	mov	r0, r3
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	4603      	mov	r3, r0
 800ace0:	6039      	str	r1, [r7, #0]
 800ace2:	71fb      	strb	r3, [r7, #7]
 800ace4:	4613      	mov	r3, r2
 800ace6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ace8:	79fb      	ldrb	r3, [r7, #7]
 800acea:	2b23      	cmp	r3, #35	; 0x23
 800acec:	d84a      	bhi.n	800ad84 <CDC_Control_FS+0xac>
 800acee:	a201      	add	r2, pc, #4	; (adr r2, 800acf4 <CDC_Control_FS+0x1c>)
 800acf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf4:	0800ad85 	.word	0x0800ad85
 800acf8:	0800ad85 	.word	0x0800ad85
 800acfc:	0800ad85 	.word	0x0800ad85
 800ad00:	0800ad85 	.word	0x0800ad85
 800ad04:	0800ad85 	.word	0x0800ad85
 800ad08:	0800ad85 	.word	0x0800ad85
 800ad0c:	0800ad85 	.word	0x0800ad85
 800ad10:	0800ad85 	.word	0x0800ad85
 800ad14:	0800ad85 	.word	0x0800ad85
 800ad18:	0800ad85 	.word	0x0800ad85
 800ad1c:	0800ad85 	.word	0x0800ad85
 800ad20:	0800ad85 	.word	0x0800ad85
 800ad24:	0800ad85 	.word	0x0800ad85
 800ad28:	0800ad85 	.word	0x0800ad85
 800ad2c:	0800ad85 	.word	0x0800ad85
 800ad30:	0800ad85 	.word	0x0800ad85
 800ad34:	0800ad85 	.word	0x0800ad85
 800ad38:	0800ad85 	.word	0x0800ad85
 800ad3c:	0800ad85 	.word	0x0800ad85
 800ad40:	0800ad85 	.word	0x0800ad85
 800ad44:	0800ad85 	.word	0x0800ad85
 800ad48:	0800ad85 	.word	0x0800ad85
 800ad4c:	0800ad85 	.word	0x0800ad85
 800ad50:	0800ad85 	.word	0x0800ad85
 800ad54:	0800ad85 	.word	0x0800ad85
 800ad58:	0800ad85 	.word	0x0800ad85
 800ad5c:	0800ad85 	.word	0x0800ad85
 800ad60:	0800ad85 	.word	0x0800ad85
 800ad64:	0800ad85 	.word	0x0800ad85
 800ad68:	0800ad85 	.word	0x0800ad85
 800ad6c:	0800ad85 	.word	0x0800ad85
 800ad70:	0800ad85 	.word	0x0800ad85
 800ad74:	0800ad85 	.word	0x0800ad85
 800ad78:	0800ad85 	.word	0x0800ad85
 800ad7c:	0800ad85 	.word	0x0800ad85
 800ad80:	0800ad85 	.word	0x0800ad85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ad84:	bf00      	nop
  }

  return (USBD_OK);
 800ad86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ad9e:	6879      	ldr	r1, [r7, #4]
 800ada0:	4805      	ldr	r0, [pc, #20]	; (800adb8 <CDC_Receive_FS+0x24>)
 800ada2:	f7fb fabd 	bl	8006320 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ada6:	4804      	ldr	r0, [pc, #16]	; (800adb8 <CDC_Receive_FS+0x24>)
 800ada8:	f7fb face 	bl	8006348 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800adac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	20005250 	.word	0x20005250

0800adbc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b087      	sub	sp, #28
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	4613      	mov	r3, r2
 800adc8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800adca:	2300      	movs	r3, #0
 800adcc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800adce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800add2:	4618      	mov	r0, r3
 800add4:	371c      	adds	r7, #28
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
	...

0800ade0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08a      	sub	sp, #40	; 0x28
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ade8:	f107 0314 	add.w	r3, r7, #20
 800adec:	2200      	movs	r2, #0
 800adee:	601a      	str	r2, [r3, #0]
 800adf0:	605a      	str	r2, [r3, #4]
 800adf2:	609a      	str	r2, [r3, #8]
 800adf4:	60da      	str	r2, [r3, #12]
 800adf6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae00:	d149      	bne.n	800ae96 <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae02:	4b27      	ldr	r3, [pc, #156]	; (800aea0 <HAL_PCD_MspInit+0xc0>)
 800ae04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae06:	4a26      	ldr	r2, [pc, #152]	; (800aea0 <HAL_PCD_MspInit+0xc0>)
 800ae08:	f043 0301 	orr.w	r3, r3, #1
 800ae0c:	6313      	str	r3, [r2, #48]	; 0x30
 800ae0e:	4b24      	ldr	r3, [pc, #144]	; (800aea0 <HAL_PCD_MspInit+0xc0>)
 800ae10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae12:	f003 0301 	and.w	r3, r3, #1
 800ae16:	613b      	str	r3, [r7, #16]
 800ae18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800ae1a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800ae1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae20:	2302      	movs	r3, #2
 800ae22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae24:	2300      	movs	r3, #0
 800ae26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae28:	2303      	movs	r3, #3
 800ae2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ae2c:	230a      	movs	r3, #10
 800ae2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae30:	f107 0314 	add.w	r3, r7, #20
 800ae34:	4619      	mov	r1, r3
 800ae36:	481b      	ldr	r0, [pc, #108]	; (800aea4 <HAL_PCD_MspInit+0xc4>)
 800ae38:	f7f5 fd2c 	bl	8000894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800ae3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ae42:	2300      	movs	r3, #0
 800ae44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae46:	2300      	movs	r3, #0
 800ae48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ae4a:	f107 0314 	add.w	r3, r7, #20
 800ae4e:	4619      	mov	r1, r3
 800ae50:	4814      	ldr	r0, [pc, #80]	; (800aea4 <HAL_PCD_MspInit+0xc4>)
 800ae52:	f7f5 fd1f 	bl	8000894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ae56:	4b12      	ldr	r3, [pc, #72]	; (800aea0 <HAL_PCD_MspInit+0xc0>)
 800ae58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae5a:	4a11      	ldr	r2, [pc, #68]	; (800aea0 <HAL_PCD_MspInit+0xc0>)
 800ae5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae60:	6353      	str	r3, [r2, #52]	; 0x34
 800ae62:	4b0f      	ldr	r3, [pc, #60]	; (800aea0 <HAL_PCD_MspInit+0xc0>)
 800ae64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae6a:	60fb      	str	r3, [r7, #12]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	4b0c      	ldr	r3, [pc, #48]	; (800aea0 <HAL_PCD_MspInit+0xc0>)
 800ae70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae72:	4a0b      	ldr	r2, [pc, #44]	; (800aea0 <HAL_PCD_MspInit+0xc0>)
 800ae74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae78:	6453      	str	r3, [r2, #68]	; 0x44
 800ae7a:	4b09      	ldr	r3, [pc, #36]	; (800aea0 <HAL_PCD_MspInit+0xc0>)
 800ae7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae82:	60bb      	str	r3, [r7, #8]
 800ae84:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ae86:	2200      	movs	r2, #0
 800ae88:	2105      	movs	r1, #5
 800ae8a:	2043      	movs	r0, #67	; 0x43
 800ae8c:	f7f5 fc46 	bl	800071c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ae90:	2043      	movs	r0, #67	; 0x43
 800ae92:	f7f5 fc5f 	bl	8000754 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ae96:	bf00      	nop
 800ae98:	3728      	adds	r7, #40	; 0x28
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	40023800 	.word	0x40023800
 800aea4:	40020000 	.word	0x40020000

0800aea8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aebc:	4619      	mov	r1, r3
 800aebe:	4610      	mov	r0, r2
 800aec0:	f7fb fb0e 	bl	80064e0 <USBD_LL_SetupStage>
}
 800aec4:	bf00      	nop
 800aec6:	3708      	adds	r7, #8
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	460b      	mov	r3, r1
 800aed6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800aede:	78fa      	ldrb	r2, [r7, #3]
 800aee0:	6879      	ldr	r1, [r7, #4]
 800aee2:	4613      	mov	r3, r2
 800aee4:	00db      	lsls	r3, r3, #3
 800aee6:	1a9b      	subs	r3, r3, r2
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	440b      	add	r3, r1
 800aeec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	78fb      	ldrb	r3, [r7, #3]
 800aef4:	4619      	mov	r1, r3
 800aef6:	f7fb fb48 	bl	800658a <USBD_LL_DataOutStage>
}
 800aefa:	bf00      	nop
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af02:	b580      	push	{r7, lr}
 800af04:	b082      	sub	sp, #8
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
 800af0a:	460b      	mov	r3, r1
 800af0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800af14:	78fa      	ldrb	r2, [r7, #3]
 800af16:	6879      	ldr	r1, [r7, #4]
 800af18:	4613      	mov	r3, r2
 800af1a:	00db      	lsls	r3, r3, #3
 800af1c:	1a9b      	subs	r3, r3, r2
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	440b      	add	r3, r1
 800af22:	3348      	adds	r3, #72	; 0x48
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	78fb      	ldrb	r3, [r7, #3]
 800af28:	4619      	mov	r1, r3
 800af2a:	f7fb fb91 	bl	8006650 <USBD_LL_DataInStage>
}
 800af2e:	bf00      	nop
 800af30:	3708      	adds	r7, #8
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b082      	sub	sp, #8
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800af44:	4618      	mov	r0, r3
 800af46:	f7fb fc95 	bl	8006874 <USBD_LL_SOF>
}
 800af4a:	bf00      	nop
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b084      	sub	sp, #16
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800af5a:	2301      	movs	r3, #1
 800af5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d102      	bne.n	800af6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800af66:	2300      	movs	r3, #0
 800af68:	73fb      	strb	r3, [r7, #15]
 800af6a:	e008      	b.n	800af7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	2b02      	cmp	r3, #2
 800af72:	d102      	bne.n	800af7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800af74:	2301      	movs	r3, #1
 800af76:	73fb      	strb	r3, [r7, #15]
 800af78:	e001      	b.n	800af7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800af7a:	f7ff fc6d 	bl	800a858 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800af84:	7bfa      	ldrb	r2, [r7, #15]
 800af86:	4611      	mov	r1, r2
 800af88:	4618      	mov	r0, r3
 800af8a:	f7fb fc38 	bl	80067fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800af94:	4618      	mov	r0, r3
 800af96:	f7fb fbf1 	bl	800677c <USBD_LL_Reset>
}
 800af9a:	bf00      	nop
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
	...

0800afa4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fb fc33 	bl	800681e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	6812      	ldr	r2, [r2, #0]
 800afc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800afca:	f043 0301 	orr.w	r3, r3, #1
 800afce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a1b      	ldr	r3, [r3, #32]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d005      	beq.n	800afe4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800afd8:	4b04      	ldr	r3, [pc, #16]	; (800afec <HAL_PCD_SuspendCallback+0x48>)
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	4a03      	ldr	r2, [pc, #12]	; (800afec <HAL_PCD_SuspendCallback+0x48>)
 800afde:	f043 0306 	orr.w	r3, r3, #6
 800afe2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800afe4:	bf00      	nop
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	e000ed00 	.word	0xe000ed00

0800aff0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800affe:	4618      	mov	r0, r3
 800b000:	f7fb fc22 	bl	8006848 <USBD_LL_Resume>
}
 800b004:	bf00      	nop
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	460b      	mov	r3, r1
 800b016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b01e:	78fa      	ldrb	r2, [r7, #3]
 800b020:	4611      	mov	r1, r2
 800b022:	4618      	mov	r0, r3
 800b024:	f7fb fc4d 	bl	80068c2 <USBD_LL_IsoOUTIncomplete>
}
 800b028:	bf00      	nop
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	460b      	mov	r3, r1
 800b03a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b042:	78fa      	ldrb	r2, [r7, #3]
 800b044:	4611      	mov	r1, r2
 800b046:	4618      	mov	r0, r3
 800b048:	f7fb fc2e 	bl	80068a8 <USBD_LL_IsoINIncomplete>
}
 800b04c:	bf00      	nop
 800b04e:	3708      	adds	r7, #8
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b062:	4618      	mov	r0, r3
 800b064:	f7fb fc3a 	bl	80068dc <USBD_LL_DevConnected>
}
 800b068:	bf00      	nop
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fb fc37 	bl	80068f2 <USBD_LL_DevDisconnected>
}
 800b084:	bf00      	nop
 800b086:	3708      	adds	r7, #8
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d13c      	bne.n	800b116 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b09c:	4a20      	ldr	r2, [pc, #128]	; (800b120 <USBD_LL_Init+0x94>)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4a1e      	ldr	r2, [pc, #120]	; (800b120 <USBD_LL_Init+0x94>)
 800b0a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b0ac:	4b1c      	ldr	r3, [pc, #112]	; (800b120 <USBD_LL_Init+0x94>)
 800b0ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b0b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b0b4:	4b1a      	ldr	r3, [pc, #104]	; (800b120 <USBD_LL_Init+0x94>)
 800b0b6:	2206      	movs	r2, #6
 800b0b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b0ba:	4b19      	ldr	r3, [pc, #100]	; (800b120 <USBD_LL_Init+0x94>)
 800b0bc:	2202      	movs	r2, #2
 800b0be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b0c0:	4b17      	ldr	r3, [pc, #92]	; (800b120 <USBD_LL_Init+0x94>)
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b0c6:	4b16      	ldr	r3, [pc, #88]	; (800b120 <USBD_LL_Init+0x94>)
 800b0c8:	2202      	movs	r2, #2
 800b0ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800b0cc:	4b14      	ldr	r3, [pc, #80]	; (800b120 <USBD_LL_Init+0x94>)
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b0d2:	4b13      	ldr	r3, [pc, #76]	; (800b120 <USBD_LL_Init+0x94>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b0d8:	4b11      	ldr	r3, [pc, #68]	; (800b120 <USBD_LL_Init+0x94>)
 800b0da:	2200      	movs	r2, #0
 800b0dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b0de:	4b10      	ldr	r3, [pc, #64]	; (800b120 <USBD_LL_Init+0x94>)
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b0e4:	4b0e      	ldr	r3, [pc, #56]	; (800b120 <USBD_LL_Init+0x94>)
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b0ea:	480d      	ldr	r0, [pc, #52]	; (800b120 <USBD_LL_Init+0x94>)
 800b0ec:	f7f5 febf 	bl	8000e6e <HAL_PCD_Init>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d001      	beq.n	800b0fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b0f6:	f7ff fbaf 	bl	800a858 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b0fa:	2180      	movs	r1, #128	; 0x80
 800b0fc:	4808      	ldr	r0, [pc, #32]	; (800b120 <USBD_LL_Init+0x94>)
 800b0fe:	f7f7 f840 	bl	8002182 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b102:	2240      	movs	r2, #64	; 0x40
 800b104:	2100      	movs	r1, #0
 800b106:	4806      	ldr	r0, [pc, #24]	; (800b120 <USBD_LL_Init+0x94>)
 800b108:	f7f6 fff4 	bl	80020f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b10c:	2280      	movs	r2, #128	; 0x80
 800b10e:	2101      	movs	r1, #1
 800b110:	4803      	ldr	r0, [pc, #12]	; (800b120 <USBD_LL_Init+0x94>)
 800b112:	f7f6 ffef 	bl	80020f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b116:	2300      	movs	r3, #0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	20006520 	.word	0x20006520

0800b124 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b12c:	2300      	movs	r3, #0
 800b12e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b130:	2300      	movs	r3, #0
 800b132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7f5 ffbb 	bl	80010b6 <HAL_PCD_Start>
 800b140:	4603      	mov	r3, r0
 800b142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b144:	7bfb      	ldrb	r3, [r7, #15]
 800b146:	4618      	mov	r0, r3
 800b148:	f000 f980 	bl	800b44c <USBD_Get_USB_Status>
 800b14c:	4603      	mov	r3, r0
 800b14e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b150:	7bbb      	ldrb	r3, [r7, #14]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b084      	sub	sp, #16
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
 800b162:	4608      	mov	r0, r1
 800b164:	4611      	mov	r1, r2
 800b166:	461a      	mov	r2, r3
 800b168:	4603      	mov	r3, r0
 800b16a:	70fb      	strb	r3, [r7, #3]
 800b16c:	460b      	mov	r3, r1
 800b16e:	70bb      	strb	r3, [r7, #2]
 800b170:	4613      	mov	r3, r2
 800b172:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b174:	2300      	movs	r3, #0
 800b176:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b178:	2300      	movs	r3, #0
 800b17a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b182:	78bb      	ldrb	r3, [r7, #2]
 800b184:	883a      	ldrh	r2, [r7, #0]
 800b186:	78f9      	ldrb	r1, [r7, #3]
 800b188:	f7f6 fbbb 	bl	8001902 <HAL_PCD_EP_Open>
 800b18c:	4603      	mov	r3, r0
 800b18e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b190:	7bfb      	ldrb	r3, [r7, #15]
 800b192:	4618      	mov	r0, r3
 800b194:	f000 f95a 	bl	800b44c <USBD_Get_USB_Status>
 800b198:	4603      	mov	r3, r0
 800b19a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b19c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b084      	sub	sp, #16
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b1c0:	78fa      	ldrb	r2, [r7, #3]
 800b1c2:	4611      	mov	r1, r2
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7f6 fc04 	bl	80019d2 <HAL_PCD_EP_Close>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f000 f93b 	bl	800b44c <USBD_Get_USB_Status>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b1fe:	78fa      	ldrb	r2, [r7, #3]
 800b200:	4611      	mov	r1, r2
 800b202:	4618      	mov	r0, r3
 800b204:	f7f6 fcdc 	bl	8001bc0 <HAL_PCD_EP_SetStall>
 800b208:	4603      	mov	r3, r0
 800b20a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b20c:	7bfb      	ldrb	r3, [r7, #15]
 800b20e:	4618      	mov	r0, r3
 800b210:	f000 f91c 	bl	800b44c <USBD_Get_USB_Status>
 800b214:	4603      	mov	r3, r0
 800b216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b218:	7bbb      	ldrb	r3, [r7, #14]
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b084      	sub	sp, #16
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
 800b22a:	460b      	mov	r3, r1
 800b22c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b22e:	2300      	movs	r3, #0
 800b230:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b232:	2300      	movs	r3, #0
 800b234:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b23c:	78fa      	ldrb	r2, [r7, #3]
 800b23e:	4611      	mov	r1, r2
 800b240:	4618      	mov	r0, r3
 800b242:	f7f6 fd21 	bl	8001c88 <HAL_PCD_EP_ClrStall>
 800b246:	4603      	mov	r3, r0
 800b248:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b24a:	7bfb      	ldrb	r3, [r7, #15]
 800b24c:	4618      	mov	r0, r3
 800b24e:	f000 f8fd 	bl	800b44c <USBD_Get_USB_Status>
 800b252:	4603      	mov	r3, r0
 800b254:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b256:	7bbb      	ldrb	r3, [r7, #14]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b260:	b480      	push	{r7}
 800b262:	b085      	sub	sp, #20
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	460b      	mov	r3, r1
 800b26a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b272:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b274:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	da0b      	bge.n	800b294 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b27c:	78fb      	ldrb	r3, [r7, #3]
 800b27e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b282:	68f9      	ldr	r1, [r7, #12]
 800b284:	4613      	mov	r3, r2
 800b286:	00db      	lsls	r3, r3, #3
 800b288:	1a9b      	subs	r3, r3, r2
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	440b      	add	r3, r1
 800b28e:	333e      	adds	r3, #62	; 0x3e
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	e00b      	b.n	800b2ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b294:	78fb      	ldrb	r3, [r7, #3]
 800b296:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b29a:	68f9      	ldr	r1, [r7, #12]
 800b29c:	4613      	mov	r3, r2
 800b29e:	00db      	lsls	r3, r3, #3
 800b2a0:	1a9b      	subs	r3, r3, r2
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	440b      	add	r3, r1
 800b2a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b2aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3714      	adds	r7, #20
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2d2:	78fa      	ldrb	r2, [r7, #3]
 800b2d4:	4611      	mov	r1, r2
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7f6 faee 	bl	80018b8 <HAL_PCD_SetAddress>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f000 f8b2 	bl	800b44c <USBD_Get_USB_Status>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b086      	sub	sp, #24
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	60f8      	str	r0, [r7, #12]
 800b2fe:	607a      	str	r2, [r7, #4]
 800b300:	603b      	str	r3, [r7, #0]
 800b302:	460b      	mov	r3, r1
 800b304:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b306:	2300      	movs	r3, #0
 800b308:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b30a:	2300      	movs	r3, #0
 800b30c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b314:	7af9      	ldrb	r1, [r7, #11]
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	f7f6 fc07 	bl	8001b2c <HAL_PCD_EP_Transmit>
 800b31e:	4603      	mov	r3, r0
 800b320:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b322:	7dfb      	ldrb	r3, [r7, #23]
 800b324:	4618      	mov	r0, r3
 800b326:	f000 f891 	bl	800b44c <USBD_Get_USB_Status>
 800b32a:	4603      	mov	r3, r0
 800b32c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b32e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3718      	adds	r7, #24
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	607a      	str	r2, [r7, #4]
 800b342:	603b      	str	r3, [r7, #0]
 800b344:	460b      	mov	r3, r1
 800b346:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b348:	2300      	movs	r3, #0
 800b34a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b34c:	2300      	movs	r3, #0
 800b34e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b356:	7af9      	ldrb	r1, [r7, #11]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	f7f6 fb83 	bl	8001a66 <HAL_PCD_EP_Receive>
 800b360:	4603      	mov	r3, r0
 800b362:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b364:	7dfb      	ldrb	r3, [r7, #23]
 800b366:	4618      	mov	r0, r3
 800b368:	f000 f870 	bl	800b44c <USBD_Get_USB_Status>
 800b36c:	4603      	mov	r3, r0
 800b36e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b370:	7dbb      	ldrb	r3, [r7, #22]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3718      	adds	r7, #24
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b082      	sub	sp, #8
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
 800b382:	460b      	mov	r3, r1
 800b384:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b38c:	78fa      	ldrb	r2, [r7, #3]
 800b38e:	4611      	mov	r1, r2
 800b390:	4618      	mov	r0, r3
 800b392:	f7f6 fbb3 	bl	8001afc <HAL_PCD_EP_GetRxCount>
 800b396:	4603      	mov	r3, r0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b3ac:	78fb      	ldrb	r3, [r7, #3]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d002      	beq.n	800b3b8 <HAL_PCDEx_LPM_Callback+0x18>
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d01f      	beq.n	800b3f6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b3b6:	e03b      	b.n	800b430 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6a1b      	ldr	r3, [r3, #32]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d007      	beq.n	800b3d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b3c0:	f000 f83c 	bl	800b43c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b3c4:	4b1c      	ldr	r3, [pc, #112]	; (800b438 <HAL_PCDEx_LPM_Callback+0x98>)
 800b3c6:	691b      	ldr	r3, [r3, #16]
 800b3c8:	4a1b      	ldr	r2, [pc, #108]	; (800b438 <HAL_PCDEx_LPM_Callback+0x98>)
 800b3ca:	f023 0306 	bic.w	r3, r3, #6
 800b3ce:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	6812      	ldr	r2, [r2, #0]
 800b3de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b3e2:	f023 0301 	bic.w	r3, r3, #1
 800b3e6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7fb fa2a 	bl	8006848 <USBD_LL_Resume>
    break;
 800b3f4:	e01c      	b.n	800b430 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	6812      	ldr	r2, [r2, #0]
 800b404:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b408:	f043 0301 	orr.w	r3, r3, #1
 800b40c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b414:	4618      	mov	r0, r3
 800b416:	f7fb fa02 	bl	800681e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d005      	beq.n	800b42e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b422:	4b05      	ldr	r3, [pc, #20]	; (800b438 <HAL_PCDEx_LPM_Callback+0x98>)
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	4a04      	ldr	r2, [pc, #16]	; (800b438 <HAL_PCDEx_LPM_Callback+0x98>)
 800b428:	f043 0306 	orr.w	r3, r3, #6
 800b42c:	6113      	str	r3, [r2, #16]
    break;
 800b42e:	bf00      	nop
}
 800b430:	bf00      	nop
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	e000ed00 	.word	0xe000ed00

0800b43c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b43c:	b480      	push	{r7}
 800b43e:	af00      	add	r7, sp, #0
	//SystemClock_Config();
}
 800b440:	bf00      	nop
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr
	...

0800b44c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	4603      	mov	r3, r0
 800b454:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b456:	2300      	movs	r3, #0
 800b458:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b45a:	79fb      	ldrb	r3, [r7, #7]
 800b45c:	2b03      	cmp	r3, #3
 800b45e:	d817      	bhi.n	800b490 <USBD_Get_USB_Status+0x44>
 800b460:	a201      	add	r2, pc, #4	; (adr r2, 800b468 <USBD_Get_USB_Status+0x1c>)
 800b462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b466:	bf00      	nop
 800b468:	0800b479 	.word	0x0800b479
 800b46c:	0800b47f 	.word	0x0800b47f
 800b470:	0800b485 	.word	0x0800b485
 800b474:	0800b48b 	.word	0x0800b48b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b478:	2300      	movs	r3, #0
 800b47a:	73fb      	strb	r3, [r7, #15]
    break;
 800b47c:	e00b      	b.n	800b496 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b47e:	2303      	movs	r3, #3
 800b480:	73fb      	strb	r3, [r7, #15]
    break;
 800b482:	e008      	b.n	800b496 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b484:	2301      	movs	r3, #1
 800b486:	73fb      	strb	r3, [r7, #15]
    break;
 800b488:	e005      	b.n	800b496 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b48a:	2303      	movs	r3, #3
 800b48c:	73fb      	strb	r3, [r7, #15]
    break;
 800b48e:	e002      	b.n	800b496 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b490:	2303      	movs	r3, #3
 800b492:	73fb      	strb	r3, [r7, #15]
    break;
 800b494:	bf00      	nop
  }
  return usb_status;
 800b496:	7bfb      	ldrb	r3, [r7, #15]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3714      	adds	r7, #20
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	6039      	str	r1, [r7, #0]
 800b4ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	2212      	movs	r2, #18
 800b4b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b4b6:	4b03      	ldr	r3, [pc, #12]	; (800b4c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	370c      	adds	r7, #12
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr
 800b4c4:	20000154 	.word	0x20000154

0800b4c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	6039      	str	r1, [r7, #0]
 800b4d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	2204      	movs	r2, #4
 800b4d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b4da:	4b03      	ldr	r3, [pc, #12]	; (800b4e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	370c      	adds	r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr
 800b4e8:	20000174 	.word	0x20000174

0800b4ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	6039      	str	r1, [r7, #0]
 800b4f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b4f8:	79fb      	ldrb	r3, [r7, #7]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d105      	bne.n	800b50a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	4907      	ldr	r1, [pc, #28]	; (800b520 <USBD_FS_ProductStrDescriptor+0x34>)
 800b502:	4808      	ldr	r0, [pc, #32]	; (800b524 <USBD_FS_ProductStrDescriptor+0x38>)
 800b504:	f7fb ffa8 	bl	8007458 <USBD_GetString>
 800b508:	e004      	b.n	800b514 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	4904      	ldr	r1, [pc, #16]	; (800b520 <USBD_FS_ProductStrDescriptor+0x34>)
 800b50e:	4805      	ldr	r0, [pc, #20]	; (800b524 <USBD_FS_ProductStrDescriptor+0x38>)
 800b510:	f7fb ffa2 	bl	8007458 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b514:	4b02      	ldr	r3, [pc, #8]	; (800b520 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b516:	4618      	mov	r0, r3
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	20006924 	.word	0x20006924
 800b524:	0800bc3c 	.word	0x0800bc3c

0800b528 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	4603      	mov	r3, r0
 800b530:	6039      	str	r1, [r7, #0]
 800b532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b534:	683a      	ldr	r2, [r7, #0]
 800b536:	4904      	ldr	r1, [pc, #16]	; (800b548 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b538:	4804      	ldr	r0, [pc, #16]	; (800b54c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b53a:	f7fb ff8d 	bl	8007458 <USBD_GetString>
  return USBD_StrDesc;
 800b53e:	4b02      	ldr	r3, [pc, #8]	; (800b548 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b540:	4618      	mov	r0, r3
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	20006924 	.word	0x20006924
 800b54c:	0800bc54 	.word	0x0800bc54

0800b550 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	4603      	mov	r3, r0
 800b558:	6039      	str	r1, [r7, #0]
 800b55a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	221a      	movs	r2, #26
 800b560:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b562:	f000 f855 	bl	800b610 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b566:	4b02      	ldr	r3, [pc, #8]	; (800b570 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3708      	adds	r7, #8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	20000178 	.word	0x20000178

0800b574 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	4603      	mov	r3, r0
 800b57c:	6039      	str	r1, [r7, #0]
 800b57e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b580:	79fb      	ldrb	r3, [r7, #7]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d105      	bne.n	800b592 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b586:	683a      	ldr	r2, [r7, #0]
 800b588:	4907      	ldr	r1, [pc, #28]	; (800b5a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b58a:	4808      	ldr	r0, [pc, #32]	; (800b5ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800b58c:	f7fb ff64 	bl	8007458 <USBD_GetString>
 800b590:	e004      	b.n	800b59c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b592:	683a      	ldr	r2, [r7, #0]
 800b594:	4904      	ldr	r1, [pc, #16]	; (800b5a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b596:	4805      	ldr	r0, [pc, #20]	; (800b5ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800b598:	f7fb ff5e 	bl	8007458 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b59c:	4b02      	ldr	r3, [pc, #8]	; (800b5a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3708      	adds	r7, #8
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	20006924 	.word	0x20006924
 800b5ac:	0800bc68 	.word	0x0800bc68

0800b5b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	6039      	str	r1, [r7, #0]
 800b5ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5bc:	79fb      	ldrb	r3, [r7, #7]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d105      	bne.n	800b5ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5c2:	683a      	ldr	r2, [r7, #0]
 800b5c4:	4907      	ldr	r1, [pc, #28]	; (800b5e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5c6:	4808      	ldr	r0, [pc, #32]	; (800b5e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b5c8:	f7fb ff46 	bl	8007458 <USBD_GetString>
 800b5cc:	e004      	b.n	800b5d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5ce:	683a      	ldr	r2, [r7, #0]
 800b5d0:	4904      	ldr	r1, [pc, #16]	; (800b5e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5d2:	4805      	ldr	r0, [pc, #20]	; (800b5e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b5d4:	f7fb ff40 	bl	8007458 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5d8:	4b02      	ldr	r3, [pc, #8]	; (800b5e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3708      	adds	r7, #8
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	20006924 	.word	0x20006924
 800b5e8:	0800bc74 	.word	0x0800bc74

0800b5ec <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	6039      	str	r1, [r7, #0]
 800b5f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	220c      	movs	r2, #12
 800b5fc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b5fe:	4b03      	ldr	r3, [pc, #12]	; (800b60c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b600:	4618      	mov	r0, r3
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	20000168 	.word	0x20000168

0800b610 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b616:	4b0f      	ldr	r3, [pc, #60]	; (800b654 <Get_SerialNum+0x44>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b61c:	4b0e      	ldr	r3, [pc, #56]	; (800b658 <Get_SerialNum+0x48>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b622:	4b0e      	ldr	r3, [pc, #56]	; (800b65c <Get_SerialNum+0x4c>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4413      	add	r3, r2
 800b62e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d009      	beq.n	800b64a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b636:	2208      	movs	r2, #8
 800b638:	4909      	ldr	r1, [pc, #36]	; (800b660 <Get_SerialNum+0x50>)
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f000 f814 	bl	800b668 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b640:	2204      	movs	r2, #4
 800b642:	4908      	ldr	r1, [pc, #32]	; (800b664 <Get_SerialNum+0x54>)
 800b644:	68b8      	ldr	r0, [r7, #8]
 800b646:	f000 f80f 	bl	800b668 <IntToUnicode>
  }
}
 800b64a:	bf00      	nop
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	1ff0f420 	.word	0x1ff0f420
 800b658:	1ff0f424 	.word	0x1ff0f424
 800b65c:	1ff0f428 	.word	0x1ff0f428
 800b660:	2000017a 	.word	0x2000017a
 800b664:	2000018a 	.word	0x2000018a

0800b668 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b668:	b480      	push	{r7}
 800b66a:	b087      	sub	sp, #28
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	4613      	mov	r3, r2
 800b674:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b676:	2300      	movs	r3, #0
 800b678:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b67a:	2300      	movs	r3, #0
 800b67c:	75fb      	strb	r3, [r7, #23]
 800b67e:	e027      	b.n	800b6d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	0f1b      	lsrs	r3, r3, #28
 800b684:	2b09      	cmp	r3, #9
 800b686:	d80b      	bhi.n	800b6a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	0f1b      	lsrs	r3, r3, #28
 800b68c:	b2da      	uxtb	r2, r3
 800b68e:	7dfb      	ldrb	r3, [r7, #23]
 800b690:	005b      	lsls	r3, r3, #1
 800b692:	4619      	mov	r1, r3
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	440b      	add	r3, r1
 800b698:	3230      	adds	r2, #48	; 0x30
 800b69a:	b2d2      	uxtb	r2, r2
 800b69c:	701a      	strb	r2, [r3, #0]
 800b69e:	e00a      	b.n	800b6b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	0f1b      	lsrs	r3, r3, #28
 800b6a4:	b2da      	uxtb	r2, r3
 800b6a6:	7dfb      	ldrb	r3, [r7, #23]
 800b6a8:	005b      	lsls	r3, r3, #1
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	440b      	add	r3, r1
 800b6b0:	3237      	adds	r2, #55	; 0x37
 800b6b2:	b2d2      	uxtb	r2, r2
 800b6b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	011b      	lsls	r3, r3, #4
 800b6ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b6bc:	7dfb      	ldrb	r3, [r7, #23]
 800b6be:	005b      	lsls	r3, r3, #1
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	68ba      	ldr	r2, [r7, #8]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b6ca:	7dfb      	ldrb	r3, [r7, #23]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	75fb      	strb	r3, [r7, #23]
 800b6d0:	7dfa      	ldrb	r2, [r7, #23]
 800b6d2:	79fb      	ldrb	r3, [r7, #7]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d3d3      	bcc.n	800b680 <IntToUnicode+0x18>
  }
}
 800b6d8:	bf00      	nop
 800b6da:	bf00      	nop
 800b6dc:	371c      	adds	r7, #28
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
	...

0800b6e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b6f2:	4b06      	ldr	r3, [pc, #24]	; (800b70c <USER_initialize+0x24>)
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b6f8:	4b04      	ldr	r3, [pc, #16]	; (800b70c <USER_initialize+0x24>)
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	370c      	adds	r7, #12
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	20000192 	.word	0x20000192

0800b710 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	4603      	mov	r3, r0
 800b718:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b71a:	4b06      	ldr	r3, [pc, #24]	; (800b734 <USER_status+0x24>)
 800b71c:	2201      	movs	r2, #1
 800b71e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b720:	4b04      	ldr	r3, [pc, #16]	; (800b734 <USER_status+0x24>)
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b726:	4618      	mov	r0, r3
 800b728:	370c      	adds	r7, #12
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	20000192 	.word	0x20000192

0800b738 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b738:	b480      	push	{r7}
 800b73a:	b085      	sub	sp, #20
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60b9      	str	r1, [r7, #8]
 800b740:	607a      	str	r2, [r7, #4]
 800b742:	603b      	str	r3, [r7, #0]
 800b744:	4603      	mov	r3, r0
 800b746:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b748:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b756:	b480      	push	{r7}
 800b758:	b085      	sub	sp, #20
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	607a      	str	r2, [r7, #4]
 800b760:	603b      	str	r3, [r7, #0]
 800b762:	4603      	mov	r3, r0
 800b764:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b766:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3714      	adds	r7, #20
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	4603      	mov	r3, r0
 800b77c:	603a      	str	r2, [r7, #0]
 800b77e:	71fb      	strb	r3, [r7, #7]
 800b780:	460b      	mov	r3, r1
 800b782:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	73fb      	strb	r3, [r7, #15]
    return res;
 800b788:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3714      	adds	r7, #20
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr
	...

0800b798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b798:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b7d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b79c:	480d      	ldr	r0, [pc, #52]	; (800b7d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b79e:	490e      	ldr	r1, [pc, #56]	; (800b7d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b7a0:	4a0e      	ldr	r2, [pc, #56]	; (800b7dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b7a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b7a4:	e002      	b.n	800b7ac <LoopCopyDataInit>

0800b7a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b7a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b7a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b7aa:	3304      	adds	r3, #4

0800b7ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b7ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b7ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b7b0:	d3f9      	bcc.n	800b7a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b7b2:	4a0b      	ldr	r2, [pc, #44]	; (800b7e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b7b4:	4c0b      	ldr	r4, [pc, #44]	; (800b7e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 800b7b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b7b8:	e001      	b.n	800b7be <LoopFillZerobss>

0800b7ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b7ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b7bc:	3204      	adds	r2, #4

0800b7be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b7be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b7c0:	d3fb      	bcc.n	800b7ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b7c2:	f7ff fa2b 	bl	800ac1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b7c6:	f000 f89b 	bl	800b900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b7ca:	f7fe fd91 	bl	800a2f0 <main>
  bx  lr    
 800b7ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b7d0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800b7d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b7d8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800b7dc:	0800bd54 	.word	0x0800bd54
  ldr r2, =_sbss
 800b7e0:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 800b7e4:	20006b28 	.word	0x20006b28

0800b7e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b7e8:	e7fe      	b.n	800b7e8 <ADC_IRQHandler>

0800b7ea <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b084      	sub	sp, #16
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d104      	bne.n	800b802 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800b7f8:	b672      	cpsid	i
}
 800b7fa:	bf00      	nop
 800b7fc:	f7ff f82c 	bl	800a858 <Error_Handler>
 800b800:	e7fe      	b.n	800b800 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	7a1b      	ldrb	r3, [r3, #8]
 800b806:	2b01      	cmp	r3, #1
 800b808:	d904      	bls.n	800b814 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800b80a:	b672      	cpsid	i
}
 800b80c:	bf00      	nop
 800b80e:	f7ff f823 	bl	800a858 <Error_Handler>
 800b812:	e7fe      	b.n	800b812 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	7a1b      	ldrb	r3, [r3, #8]
 800b818:	1c5a      	adds	r2, r3, #1
 800b81a:	b2d1      	uxtb	r1, r2
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	7211      	strb	r1, [r2, #8]
 800b820:	4619      	mov	r1, r3
	__asm volatile
 800b822:	f3ef 8211 	mrs	r2, BASEPRI
 800b826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82a:	b672      	cpsid	i
 800b82c:	f383 8811 	msr	BASEPRI, r3
 800b830:	f3bf 8f6f 	isb	sy
 800b834:	f3bf 8f4f 	dsb	sy
 800b838:	b662      	cpsie	i
 800b83a:	60fa      	str	r2, [r7, #12]
 800b83c:	60bb      	str	r3, [r7, #8]
	return ulOriginalBASEPRI;
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800b846:	bf00      	nop
 800b848:	3710      	adds	r7, #16
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800b84e:	b580      	push	{r7, lr}
 800b850:	b084      	sub	sp, #16
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d104      	bne.n	800b866 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800b85c:	b672      	cpsid	i
}
 800b85e:	bf00      	nop
 800b860:	f7fe fffa 	bl	800a858 <Error_Handler>
 800b864:	e7fe      	b.n	800b864 <stm32_lock_release+0x16>
  lock->nesting_level--;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	7a1b      	ldrb	r3, [r3, #8]
 800b86a:	3b01      	subs	r3, #1
 800b86c:	b2da      	uxtb	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	7a1b      	ldrb	r3, [r3, #8]
 800b876:	2b01      	cmp	r3, #1
 800b878:	d904      	bls.n	800b884 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800b87a:	b672      	cpsid	i
}
 800b87c:	bf00      	nop
 800b87e:	f7fe ffeb 	bl	800a858 <Error_Handler>
 800b882:	e7fe      	b.n	800b882 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	7a1b      	ldrb	r3, [r3, #8]
 800b888:	461a      	mov	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b890:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f383 8811 	msr	BASEPRI, r3
}
 800b898:	bf00      	nop
}
 800b89a:	bf00      	nop
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b082      	sub	sp, #8
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d104      	bne.n	800b8ba <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800b8b0:	b672      	cpsid	i
}
 800b8b2:	bf00      	nop
 800b8b4:	f7fe ffd0 	bl	800a858 <Error_Handler>
 800b8b8:	e7fe      	b.n	800b8b8 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7ff ff94 	bl	800b7ea <stm32_lock_acquire>
}
 800b8c2:	bf00      	nop
 800b8c4:	3708      	adds	r7, #8
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b082      	sub	sp, #8
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d104      	bne.n	800b8e2 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800b8d8:	b672      	cpsid	i
}
 800b8da:	bf00      	nop
 800b8dc:	f7fe ffbc 	bl	800a858 <Error_Handler>
 800b8e0:	e7fe      	b.n	800b8e0 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7ff ffb2 	bl	800b84e <stm32_lock_release>
}
 800b8ea:	bf00      	nop
 800b8ec:	3708      	adds	r7, #8
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
	...

0800b8f4 <__errno>:
 800b8f4:	4b01      	ldr	r3, [pc, #4]	; (800b8fc <__errno+0x8>)
 800b8f6:	6818      	ldr	r0, [r3, #0]
 800b8f8:	4770      	bx	lr
 800b8fa:	bf00      	nop
 800b8fc:	200001a8 	.word	0x200001a8

0800b900 <__libc_init_array>:
 800b900:	b570      	push	{r4, r5, r6, lr}
 800b902:	4d0d      	ldr	r5, [pc, #52]	; (800b938 <__libc_init_array+0x38>)
 800b904:	4c0d      	ldr	r4, [pc, #52]	; (800b93c <__libc_init_array+0x3c>)
 800b906:	1b64      	subs	r4, r4, r5
 800b908:	10a4      	asrs	r4, r4, #2
 800b90a:	2600      	movs	r6, #0
 800b90c:	42a6      	cmp	r6, r4
 800b90e:	d109      	bne.n	800b924 <__libc_init_array+0x24>
 800b910:	4d0b      	ldr	r5, [pc, #44]	; (800b940 <__libc_init_array+0x40>)
 800b912:	4c0c      	ldr	r4, [pc, #48]	; (800b944 <__libc_init_array+0x44>)
 800b914:	f000 f96e 	bl	800bbf4 <_init>
 800b918:	1b64      	subs	r4, r4, r5
 800b91a:	10a4      	asrs	r4, r4, #2
 800b91c:	2600      	movs	r6, #0
 800b91e:	42a6      	cmp	r6, r4
 800b920:	d105      	bne.n	800b92e <__libc_init_array+0x2e>
 800b922:	bd70      	pop	{r4, r5, r6, pc}
 800b924:	f855 3b04 	ldr.w	r3, [r5], #4
 800b928:	4798      	blx	r3
 800b92a:	3601      	adds	r6, #1
 800b92c:	e7ee      	b.n	800b90c <__libc_init_array+0xc>
 800b92e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b932:	4798      	blx	r3
 800b934:	3601      	adds	r6, #1
 800b936:	e7f2      	b.n	800b91e <__libc_init_array+0x1e>
 800b938:	0800bd4c 	.word	0x0800bd4c
 800b93c:	0800bd4c 	.word	0x0800bd4c
 800b940:	0800bd4c 	.word	0x0800bd4c
 800b944:	0800bd50 	.word	0x0800bd50

0800b948 <malloc>:
 800b948:	4b02      	ldr	r3, [pc, #8]	; (800b954 <malloc+0xc>)
 800b94a:	4601      	mov	r1, r0
 800b94c:	6818      	ldr	r0, [r3, #0]
 800b94e:	f000 b871 	b.w	800ba34 <_malloc_r>
 800b952:	bf00      	nop
 800b954:	200001a8 	.word	0x200001a8

0800b958 <free>:
 800b958:	4b02      	ldr	r3, [pc, #8]	; (800b964 <free+0xc>)
 800b95a:	4601      	mov	r1, r0
 800b95c:	6818      	ldr	r0, [r3, #0]
 800b95e:	f000 b819 	b.w	800b994 <_free_r>
 800b962:	bf00      	nop
 800b964:	200001a8 	.word	0x200001a8

0800b968 <memcpy>:
 800b968:	440a      	add	r2, r1
 800b96a:	4291      	cmp	r1, r2
 800b96c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b970:	d100      	bne.n	800b974 <memcpy+0xc>
 800b972:	4770      	bx	lr
 800b974:	b510      	push	{r4, lr}
 800b976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b97a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b97e:	4291      	cmp	r1, r2
 800b980:	d1f9      	bne.n	800b976 <memcpy+0xe>
 800b982:	bd10      	pop	{r4, pc}

0800b984 <memset>:
 800b984:	4402      	add	r2, r0
 800b986:	4603      	mov	r3, r0
 800b988:	4293      	cmp	r3, r2
 800b98a:	d100      	bne.n	800b98e <memset+0xa>
 800b98c:	4770      	bx	lr
 800b98e:	f803 1b01 	strb.w	r1, [r3], #1
 800b992:	e7f9      	b.n	800b988 <memset+0x4>

0800b994 <_free_r>:
 800b994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b996:	2900      	cmp	r1, #0
 800b998:	d048      	beq.n	800ba2c <_free_r+0x98>
 800b99a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b99e:	9001      	str	r0, [sp, #4]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f1a1 0404 	sub.w	r4, r1, #4
 800b9a6:	bfb8      	it	lt
 800b9a8:	18e4      	addlt	r4, r4, r3
 800b9aa:	f000 f917 	bl	800bbdc <__malloc_lock>
 800b9ae:	4a20      	ldr	r2, [pc, #128]	; (800ba30 <_free_r+0x9c>)
 800b9b0:	9801      	ldr	r0, [sp, #4]
 800b9b2:	6813      	ldr	r3, [r2, #0]
 800b9b4:	4615      	mov	r5, r2
 800b9b6:	b933      	cbnz	r3, 800b9c6 <_free_r+0x32>
 800b9b8:	6063      	str	r3, [r4, #4]
 800b9ba:	6014      	str	r4, [r2, #0]
 800b9bc:	b003      	add	sp, #12
 800b9be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9c2:	f000 b911 	b.w	800bbe8 <__malloc_unlock>
 800b9c6:	42a3      	cmp	r3, r4
 800b9c8:	d90b      	bls.n	800b9e2 <_free_r+0x4e>
 800b9ca:	6821      	ldr	r1, [r4, #0]
 800b9cc:	1862      	adds	r2, r4, r1
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	bf04      	itt	eq
 800b9d2:	681a      	ldreq	r2, [r3, #0]
 800b9d4:	685b      	ldreq	r3, [r3, #4]
 800b9d6:	6063      	str	r3, [r4, #4]
 800b9d8:	bf04      	itt	eq
 800b9da:	1852      	addeq	r2, r2, r1
 800b9dc:	6022      	streq	r2, [r4, #0]
 800b9de:	602c      	str	r4, [r5, #0]
 800b9e0:	e7ec      	b.n	800b9bc <_free_r+0x28>
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	b10b      	cbz	r3, 800b9ec <_free_r+0x58>
 800b9e8:	42a3      	cmp	r3, r4
 800b9ea:	d9fa      	bls.n	800b9e2 <_free_r+0x4e>
 800b9ec:	6811      	ldr	r1, [r2, #0]
 800b9ee:	1855      	adds	r5, r2, r1
 800b9f0:	42a5      	cmp	r5, r4
 800b9f2:	d10b      	bne.n	800ba0c <_free_r+0x78>
 800b9f4:	6824      	ldr	r4, [r4, #0]
 800b9f6:	4421      	add	r1, r4
 800b9f8:	1854      	adds	r4, r2, r1
 800b9fa:	42a3      	cmp	r3, r4
 800b9fc:	6011      	str	r1, [r2, #0]
 800b9fe:	d1dd      	bne.n	800b9bc <_free_r+0x28>
 800ba00:	681c      	ldr	r4, [r3, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	6053      	str	r3, [r2, #4]
 800ba06:	4421      	add	r1, r4
 800ba08:	6011      	str	r1, [r2, #0]
 800ba0a:	e7d7      	b.n	800b9bc <_free_r+0x28>
 800ba0c:	d902      	bls.n	800ba14 <_free_r+0x80>
 800ba0e:	230c      	movs	r3, #12
 800ba10:	6003      	str	r3, [r0, #0]
 800ba12:	e7d3      	b.n	800b9bc <_free_r+0x28>
 800ba14:	6825      	ldr	r5, [r4, #0]
 800ba16:	1961      	adds	r1, r4, r5
 800ba18:	428b      	cmp	r3, r1
 800ba1a:	bf04      	itt	eq
 800ba1c:	6819      	ldreq	r1, [r3, #0]
 800ba1e:	685b      	ldreq	r3, [r3, #4]
 800ba20:	6063      	str	r3, [r4, #4]
 800ba22:	bf04      	itt	eq
 800ba24:	1949      	addeq	r1, r1, r5
 800ba26:	6021      	streq	r1, [r4, #0]
 800ba28:	6054      	str	r4, [r2, #4]
 800ba2a:	e7c7      	b.n	800b9bc <_free_r+0x28>
 800ba2c:	b003      	add	sp, #12
 800ba2e:	bd30      	pop	{r4, r5, pc}
 800ba30:	20004d4c 	.word	0x20004d4c

0800ba34 <_malloc_r>:
 800ba34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba36:	1ccd      	adds	r5, r1, #3
 800ba38:	f025 0503 	bic.w	r5, r5, #3
 800ba3c:	3508      	adds	r5, #8
 800ba3e:	2d0c      	cmp	r5, #12
 800ba40:	bf38      	it	cc
 800ba42:	250c      	movcc	r5, #12
 800ba44:	2d00      	cmp	r5, #0
 800ba46:	4606      	mov	r6, r0
 800ba48:	db01      	blt.n	800ba4e <_malloc_r+0x1a>
 800ba4a:	42a9      	cmp	r1, r5
 800ba4c:	d903      	bls.n	800ba56 <_malloc_r+0x22>
 800ba4e:	230c      	movs	r3, #12
 800ba50:	6033      	str	r3, [r6, #0]
 800ba52:	2000      	movs	r0, #0
 800ba54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba56:	f000 f8c1 	bl	800bbdc <__malloc_lock>
 800ba5a:	4921      	ldr	r1, [pc, #132]	; (800bae0 <_malloc_r+0xac>)
 800ba5c:	680a      	ldr	r2, [r1, #0]
 800ba5e:	4614      	mov	r4, r2
 800ba60:	b99c      	cbnz	r4, 800ba8a <_malloc_r+0x56>
 800ba62:	4f20      	ldr	r7, [pc, #128]	; (800bae4 <_malloc_r+0xb0>)
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	b923      	cbnz	r3, 800ba72 <_malloc_r+0x3e>
 800ba68:	4621      	mov	r1, r4
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f000 f8a6 	bl	800bbbc <_sbrk_r>
 800ba70:	6038      	str	r0, [r7, #0]
 800ba72:	4629      	mov	r1, r5
 800ba74:	4630      	mov	r0, r6
 800ba76:	f000 f8a1 	bl	800bbbc <_sbrk_r>
 800ba7a:	1c43      	adds	r3, r0, #1
 800ba7c:	d123      	bne.n	800bac6 <_malloc_r+0x92>
 800ba7e:	230c      	movs	r3, #12
 800ba80:	6033      	str	r3, [r6, #0]
 800ba82:	4630      	mov	r0, r6
 800ba84:	f000 f8b0 	bl	800bbe8 <__malloc_unlock>
 800ba88:	e7e3      	b.n	800ba52 <_malloc_r+0x1e>
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	1b5b      	subs	r3, r3, r5
 800ba8e:	d417      	bmi.n	800bac0 <_malloc_r+0x8c>
 800ba90:	2b0b      	cmp	r3, #11
 800ba92:	d903      	bls.n	800ba9c <_malloc_r+0x68>
 800ba94:	6023      	str	r3, [r4, #0]
 800ba96:	441c      	add	r4, r3
 800ba98:	6025      	str	r5, [r4, #0]
 800ba9a:	e004      	b.n	800baa6 <_malloc_r+0x72>
 800ba9c:	6863      	ldr	r3, [r4, #4]
 800ba9e:	42a2      	cmp	r2, r4
 800baa0:	bf0c      	ite	eq
 800baa2:	600b      	streq	r3, [r1, #0]
 800baa4:	6053      	strne	r3, [r2, #4]
 800baa6:	4630      	mov	r0, r6
 800baa8:	f000 f89e 	bl	800bbe8 <__malloc_unlock>
 800baac:	f104 000b 	add.w	r0, r4, #11
 800bab0:	1d23      	adds	r3, r4, #4
 800bab2:	f020 0007 	bic.w	r0, r0, #7
 800bab6:	1ac2      	subs	r2, r0, r3
 800bab8:	d0cc      	beq.n	800ba54 <_malloc_r+0x20>
 800baba:	1a1b      	subs	r3, r3, r0
 800babc:	50a3      	str	r3, [r4, r2]
 800babe:	e7c9      	b.n	800ba54 <_malloc_r+0x20>
 800bac0:	4622      	mov	r2, r4
 800bac2:	6864      	ldr	r4, [r4, #4]
 800bac4:	e7cc      	b.n	800ba60 <_malloc_r+0x2c>
 800bac6:	1cc4      	adds	r4, r0, #3
 800bac8:	f024 0403 	bic.w	r4, r4, #3
 800bacc:	42a0      	cmp	r0, r4
 800bace:	d0e3      	beq.n	800ba98 <_malloc_r+0x64>
 800bad0:	1a21      	subs	r1, r4, r0
 800bad2:	4630      	mov	r0, r6
 800bad4:	f000 f872 	bl	800bbbc <_sbrk_r>
 800bad8:	3001      	adds	r0, #1
 800bada:	d1dd      	bne.n	800ba98 <_malloc_r+0x64>
 800badc:	e7cf      	b.n	800ba7e <_malloc_r+0x4a>
 800bade:	bf00      	nop
 800bae0:	20004d4c 	.word	0x20004d4c
 800bae4:	20004d50 	.word	0x20004d50

0800bae8 <cleanup_glue>:
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	460c      	mov	r4, r1
 800baec:	6809      	ldr	r1, [r1, #0]
 800baee:	4605      	mov	r5, r0
 800baf0:	b109      	cbz	r1, 800baf6 <cleanup_glue+0xe>
 800baf2:	f7ff fff9 	bl	800bae8 <cleanup_glue>
 800baf6:	4621      	mov	r1, r4
 800baf8:	4628      	mov	r0, r5
 800bafa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bafe:	f7ff bf49 	b.w	800b994 <_free_r>
	...

0800bb04 <_reclaim_reent>:
 800bb04:	4b2c      	ldr	r3, [pc, #176]	; (800bbb8 <_reclaim_reent+0xb4>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4283      	cmp	r3, r0
 800bb0a:	b570      	push	{r4, r5, r6, lr}
 800bb0c:	4604      	mov	r4, r0
 800bb0e:	d051      	beq.n	800bbb4 <_reclaim_reent+0xb0>
 800bb10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bb12:	b143      	cbz	r3, 800bb26 <_reclaim_reent+0x22>
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d14a      	bne.n	800bbb0 <_reclaim_reent+0xac>
 800bb1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb1c:	6819      	ldr	r1, [r3, #0]
 800bb1e:	b111      	cbz	r1, 800bb26 <_reclaim_reent+0x22>
 800bb20:	4620      	mov	r0, r4
 800bb22:	f7ff ff37 	bl	800b994 <_free_r>
 800bb26:	6961      	ldr	r1, [r4, #20]
 800bb28:	b111      	cbz	r1, 800bb30 <_reclaim_reent+0x2c>
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	f7ff ff32 	bl	800b994 <_free_r>
 800bb30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bb32:	b111      	cbz	r1, 800bb3a <_reclaim_reent+0x36>
 800bb34:	4620      	mov	r0, r4
 800bb36:	f7ff ff2d 	bl	800b994 <_free_r>
 800bb3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bb3c:	b111      	cbz	r1, 800bb44 <_reclaim_reent+0x40>
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f7ff ff28 	bl	800b994 <_free_r>
 800bb44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bb46:	b111      	cbz	r1, 800bb4e <_reclaim_reent+0x4a>
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f7ff ff23 	bl	800b994 <_free_r>
 800bb4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bb50:	b111      	cbz	r1, 800bb58 <_reclaim_reent+0x54>
 800bb52:	4620      	mov	r0, r4
 800bb54:	f7ff ff1e 	bl	800b994 <_free_r>
 800bb58:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bb5a:	b111      	cbz	r1, 800bb62 <_reclaim_reent+0x5e>
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	f7ff ff19 	bl	800b994 <_free_r>
 800bb62:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bb64:	b111      	cbz	r1, 800bb6c <_reclaim_reent+0x68>
 800bb66:	4620      	mov	r0, r4
 800bb68:	f7ff ff14 	bl	800b994 <_free_r>
 800bb6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb6e:	b111      	cbz	r1, 800bb76 <_reclaim_reent+0x72>
 800bb70:	4620      	mov	r0, r4
 800bb72:	f7ff ff0f 	bl	800b994 <_free_r>
 800bb76:	69a3      	ldr	r3, [r4, #24]
 800bb78:	b1e3      	cbz	r3, 800bbb4 <_reclaim_reent+0xb0>
 800bb7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	4798      	blx	r3
 800bb80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bb82:	b1b9      	cbz	r1, 800bbb4 <_reclaim_reent+0xb0>
 800bb84:	4620      	mov	r0, r4
 800bb86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb8a:	f7ff bfad 	b.w	800bae8 <cleanup_glue>
 800bb8e:	5949      	ldr	r1, [r1, r5]
 800bb90:	b941      	cbnz	r1, 800bba4 <_reclaim_reent+0xa0>
 800bb92:	3504      	adds	r5, #4
 800bb94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb96:	2d80      	cmp	r5, #128	; 0x80
 800bb98:	68d9      	ldr	r1, [r3, #12]
 800bb9a:	d1f8      	bne.n	800bb8e <_reclaim_reent+0x8a>
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	f7ff fef9 	bl	800b994 <_free_r>
 800bba2:	e7ba      	b.n	800bb1a <_reclaim_reent+0x16>
 800bba4:	680e      	ldr	r6, [r1, #0]
 800bba6:	4620      	mov	r0, r4
 800bba8:	f7ff fef4 	bl	800b994 <_free_r>
 800bbac:	4631      	mov	r1, r6
 800bbae:	e7ef      	b.n	800bb90 <_reclaim_reent+0x8c>
 800bbb0:	2500      	movs	r5, #0
 800bbb2:	e7ef      	b.n	800bb94 <_reclaim_reent+0x90>
 800bbb4:	bd70      	pop	{r4, r5, r6, pc}
 800bbb6:	bf00      	nop
 800bbb8:	200001a8 	.word	0x200001a8

0800bbbc <_sbrk_r>:
 800bbbc:	b538      	push	{r3, r4, r5, lr}
 800bbbe:	4d06      	ldr	r5, [pc, #24]	; (800bbd8 <_sbrk_r+0x1c>)
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	4604      	mov	r4, r0
 800bbc4:	4608      	mov	r0, r1
 800bbc6:	602b      	str	r3, [r5, #0]
 800bbc8:	f7fe fff2 	bl	800abb0 <_sbrk>
 800bbcc:	1c43      	adds	r3, r0, #1
 800bbce:	d102      	bne.n	800bbd6 <_sbrk_r+0x1a>
 800bbd0:	682b      	ldr	r3, [r5, #0]
 800bbd2:	b103      	cbz	r3, 800bbd6 <_sbrk_r+0x1a>
 800bbd4:	6023      	str	r3, [r4, #0]
 800bbd6:	bd38      	pop	{r3, r4, r5, pc}
 800bbd8:	20006b24 	.word	0x20006b24

0800bbdc <__malloc_lock>:
 800bbdc:	4801      	ldr	r0, [pc, #4]	; (800bbe4 <__malloc_lock+0x8>)
 800bbde:	f7ff be60 	b.w	800b8a2 <__retarget_lock_acquire_recursive>
 800bbe2:	bf00      	nop
 800bbe4:	20004d40 	.word	0x20004d40

0800bbe8 <__malloc_unlock>:
 800bbe8:	4801      	ldr	r0, [pc, #4]	; (800bbf0 <__malloc_unlock+0x8>)
 800bbea:	f7ff be6e 	b.w	800b8ca <__retarget_lock_release_recursive>
 800bbee:	bf00      	nop
 800bbf0:	20004d40 	.word	0x20004d40

0800bbf4 <_init>:
 800bbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf6:	bf00      	nop
 800bbf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbfa:	bc08      	pop	{r3}
 800bbfc:	469e      	mov	lr, r3
 800bbfe:	4770      	bx	lr

0800bc00 <_fini>:
 800bc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc02:	bf00      	nop
 800bc04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc06:	bc08      	pop	{r3}
 800bc08:	469e      	mov	lr, r3
 800bc0a:	4770      	bx	lr
