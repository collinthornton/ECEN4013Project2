
BackupPlan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b468  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800b638  0800b638  0001b638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b770  0800b770  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b770  0800b770  0001b770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b778  0800b778  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b778  0800b778  0001b778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b77c  0800b77c  0001b77c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800b780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000691c  2000020c  0800b98c  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006b28  0800b98c  00026b28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033342  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006429  00000000  00000000  0005357e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002190  00000000  00000000  000599a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f38  00000000  00000000  0005bb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f82b  00000000  00000000  0005da70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029809  00000000  00000000  0008d29b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001050b3  00000000  00000000  000b6aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bbb57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f94  00000000  00000000  001bbbac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b620 	.word	0x0800b620

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	0800b620 	.word	0x0800b620

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f8fa 	bl	8000706 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	200f      	movs	r0, #15
 8000514:	f009 ffe0 	bl	800a4d8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f009 fecc 	bl	800a2b4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000004 	.word	0x20000004
 8000548:	20004d54 	.word	0x20004d54

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20004d54 	.word	0x20004d54

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff ffee 	bl	800054c <HAL_GetTick>
 8000570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057c:	d005      	beq.n	800058a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <HAL_Delay+0x44>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800058a:	bf00      	nop
 800058c:	f7ff ffde 	bl	800054c <HAL_GetTick>
 8000590:	4602      	mov	r2, r0
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f7      	bhi.n	800058c <HAL_Delay+0x28>
  {
  }
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000004 	.word	0x20000004

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__NVIC_SetPriorityGrouping+0x40>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005d6:	4313      	orrs	r3, r2
 80005d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005da:	4a04      	ldr	r2, [pc, #16]	; (80005ec <__NVIC_SetPriorityGrouping+0x40>)
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	60d3      	str	r3, [r2, #12]
}
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000ed00 	.word	0xe000ed00
 80005f0:	05fa0000 	.word	0x05fa0000

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	2b00      	cmp	r3, #0
 8000620:	db0b      	blt.n	800063a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 021f 	and.w	r2, r3, #31
 8000628:	4907      	ldr	r1, [pc, #28]	; (8000648 <__NVIC_EnableIRQ+0x38>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	095b      	lsrs	r3, r3, #5
 8000630:	2001      	movs	r0, #1
 8000632:	fa00 f202 	lsl.w	r2, r0, r2
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000e100 	.word	0xe000e100

0800064c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db0a      	blt.n	8000676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <__NVIC_SetPriority+0x4c>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	0112      	lsls	r2, r2, #4
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	440b      	add	r3, r1
 8000670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000674:	e00a      	b.n	800068c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <__NVIC_SetPriority+0x50>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	3b04      	subs	r3, #4
 8000684:	0112      	lsls	r2, r2, #4
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	440b      	add	r3, r1
 800068a:	761a      	strb	r2, [r3, #24]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f1c3 0307 	rsb	r3, r3, #7
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	bf28      	it	cs
 80006be:	2304      	movcs	r3, #4
 80006c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3304      	adds	r3, #4
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d902      	bls.n	80006d0 <NVIC_EncodePriority+0x30>
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3b03      	subs	r3, #3
 80006ce:	e000      	b.n	80006d2 <NVIC_EncodePriority+0x32>
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43da      	mvns	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	401a      	ands	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43d9      	mvns	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff ff4c 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800072e:	f7ff ff61 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 8000732:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	68b9      	ldr	r1, [r7, #8]
 8000738:	6978      	ldr	r0, [r7, #20]
 800073a:	f7ff ffb1 	bl	80006a0 <NVIC_EncodePriority>
 800073e:	4602      	mov	r2, r0
 8000740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff80 	bl	800064c <__NVIC_SetPriority>
}
 800074c:	bf00      	nop
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff54 	bl	8000610 <__NVIC_EnableIRQ>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	; 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
 800078e:	e175      	b.n	8000a7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000790:	2201      	movs	r2, #1
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	697a      	ldr	r2, [r7, #20]
 80007a0:	4013      	ands	r3, r2
 80007a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007a4:	693a      	ldr	r2, [r7, #16]
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	f040 8164 	bne.w	8000a76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d00b      	beq.n	80007ce <HAL_GPIO_Init+0x5e>
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d007      	beq.n	80007ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c2:	2b11      	cmp	r3, #17
 80007c4:	d003      	beq.n	80007ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	2b12      	cmp	r3, #18
 80007cc:	d130      	bne.n	8000830 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	689b      	ldr	r3, [r3, #8]
 80007d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	2203      	movs	r2, #3
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43db      	mvns	r3, r3
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	4013      	ands	r3, r2
 80007e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	68da      	ldr	r2, [r3, #12]
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	69ba      	ldr	r2, [r7, #24]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	69ba      	ldr	r2, [r7, #24]
 80007fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000804:	2201      	movs	r2, #1
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	fa02 f303 	lsl.w	r3, r2, r3
 800080c:	43db      	mvns	r3, r3
 800080e:	69ba      	ldr	r2, [r7, #24]
 8000810:	4013      	ands	r3, r2
 8000812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	091b      	lsrs	r3, r3, #4
 800081a:	f003 0201 	and.w	r2, r3, #1
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	4313      	orrs	r3, r2
 8000828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	69ba      	ldr	r2, [r7, #24]
 800082e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	2203      	movs	r2, #3
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	69ba      	ldr	r2, [r7, #24]
 8000844:	4013      	ands	r3, r2
 8000846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	689a      	ldr	r2, [r3, #8]
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	4313      	orrs	r3, r2
 8000858:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	69ba      	ldr	r2, [r7, #24]
 800085e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	2b02      	cmp	r3, #2
 8000866:	d003      	beq.n	8000870 <HAL_GPIO_Init+0x100>
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	2b12      	cmp	r3, #18
 800086e:	d123      	bne.n	80008b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	08da      	lsrs	r2, r3, #3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3208      	adds	r2, #8
 8000878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800087c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	f003 0307 	and.w	r3, r3, #7
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	220f      	movs	r2, #15
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4013      	ands	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	691a      	ldr	r2, [r3, #16]
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	08da      	lsrs	r2, r3, #3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3208      	adds	r2, #8
 80008b2:	69b9      	ldr	r1, [r7, #24]
 80008b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	2203      	movs	r2, #3
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	4013      	ands	r3, r2
 80008ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f003 0203 	and.w	r2, r3, #3
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f000 80be 	beq.w	8000a76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b66      	ldr	r3, [pc, #408]	; (8000a94 <HAL_GPIO_Init+0x324>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	4a65      	ldr	r2, [pc, #404]	; (8000a94 <HAL_GPIO_Init+0x324>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000904:	6453      	str	r3, [r2, #68]	; 0x44
 8000906:	4b63      	ldr	r3, [pc, #396]	; (8000a94 <HAL_GPIO_Init+0x324>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000912:	4a61      	ldr	r2, [pc, #388]	; (8000a98 <HAL_GPIO_Init+0x328>)
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	089b      	lsrs	r3, r3, #2
 8000918:	3302      	adds	r3, #2
 800091a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f003 0303 	and.w	r3, r3, #3
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	220f      	movs	r2, #15
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	4013      	ands	r3, r2
 8000934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a58      	ldr	r2, [pc, #352]	; (8000a9c <HAL_GPIO_Init+0x32c>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d037      	beq.n	80009ae <HAL_GPIO_Init+0x23e>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a57      	ldr	r2, [pc, #348]	; (8000aa0 <HAL_GPIO_Init+0x330>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d031      	beq.n	80009aa <HAL_GPIO_Init+0x23a>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a56      	ldr	r2, [pc, #344]	; (8000aa4 <HAL_GPIO_Init+0x334>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d02b      	beq.n	80009a6 <HAL_GPIO_Init+0x236>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a55      	ldr	r2, [pc, #340]	; (8000aa8 <HAL_GPIO_Init+0x338>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d025      	beq.n	80009a2 <HAL_GPIO_Init+0x232>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a54      	ldr	r2, [pc, #336]	; (8000aac <HAL_GPIO_Init+0x33c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d01f      	beq.n	800099e <HAL_GPIO_Init+0x22e>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a53      	ldr	r2, [pc, #332]	; (8000ab0 <HAL_GPIO_Init+0x340>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d019      	beq.n	800099a <HAL_GPIO_Init+0x22a>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a52      	ldr	r2, [pc, #328]	; (8000ab4 <HAL_GPIO_Init+0x344>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d013      	beq.n	8000996 <HAL_GPIO_Init+0x226>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a51      	ldr	r2, [pc, #324]	; (8000ab8 <HAL_GPIO_Init+0x348>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d00d      	beq.n	8000992 <HAL_GPIO_Init+0x222>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a50      	ldr	r2, [pc, #320]	; (8000abc <HAL_GPIO_Init+0x34c>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d007      	beq.n	800098e <HAL_GPIO_Init+0x21e>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a4f      	ldr	r2, [pc, #316]	; (8000ac0 <HAL_GPIO_Init+0x350>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d101      	bne.n	800098a <HAL_GPIO_Init+0x21a>
 8000986:	2309      	movs	r3, #9
 8000988:	e012      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 800098a:	230a      	movs	r3, #10
 800098c:	e010      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 800098e:	2308      	movs	r3, #8
 8000990:	e00e      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 8000992:	2307      	movs	r3, #7
 8000994:	e00c      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 8000996:	2306      	movs	r3, #6
 8000998:	e00a      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 800099a:	2305      	movs	r3, #5
 800099c:	e008      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 800099e:	2304      	movs	r3, #4
 80009a0:	e006      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 80009a2:	2303      	movs	r3, #3
 80009a4:	e004      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 80009a6:	2302      	movs	r3, #2
 80009a8:	e002      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 80009aa:	2301      	movs	r3, #1
 80009ac:	e000      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 80009ae:	2300      	movs	r3, #0
 80009b0:	69fa      	ldr	r2, [r7, #28]
 80009b2:	f002 0203 	and.w	r2, r2, #3
 80009b6:	0092      	lsls	r2, r2, #2
 80009b8:	4093      	lsls	r3, r2
 80009ba:	69ba      	ldr	r2, [r7, #24]
 80009bc:	4313      	orrs	r3, r2
 80009be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80009c0:	4935      	ldr	r1, [pc, #212]	; (8000a98 <HAL_GPIO_Init+0x328>)
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	089b      	lsrs	r3, r3, #2
 80009c6:	3302      	adds	r3, #2
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009ce:	4b3d      	ldr	r3, [pc, #244]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	43db      	mvns	r3, r3
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	4013      	ands	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009f2:	4a34      	ldr	r2, [pc, #208]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009f8:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	43db      	mvns	r3, r3
 8000a02:	69ba      	ldr	r2, [r7, #24]
 8000a04:	4013      	ands	r3, r2
 8000a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d003      	beq.n	8000a1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a1c:	4a29      	ldr	r2, [pc, #164]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a22:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a46:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a70:	4a14      	ldr	r2, [pc, #80]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	61fb      	str	r3, [r7, #28]
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	2b0f      	cmp	r3, #15
 8000a80:	f67f ae86 	bls.w	8000790 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3724      	adds	r7, #36	; 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40013800 	.word	0x40013800
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40020400 	.word	0x40020400
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40021400 	.word	0x40021400
 8000ab4:	40021800 	.word	0x40021800
 8000ab8:	40021c00 	.word	0x40021c00
 8000abc:	40022000 	.word	0x40022000
 8000ac0:	40022400 	.word	0x40022400
 8000ac4:	40013c00 	.word	0x40013c00

08000ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	807b      	strh	r3, [r7, #2]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ad8:	787b      	ldrb	r3, [r7, #1]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ade:	887a      	ldrh	r2, [r7, #2]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000ae4:	e003      	b.n	8000aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000ae6:	887b      	ldrh	r3, [r7, #2]
 8000ae8:	041a      	lsls	r2, r3, #16
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	619a      	str	r2, [r3, #24]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b085      	sub	sp, #20
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b0c:	887a      	ldrh	r2, [r7, #2]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4013      	ands	r3, r2
 8000b12:	041a      	lsls	r2, r3, #16
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	400b      	ands	r3, r1
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	619a      	str	r2, [r3, #24]
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e07f      	b.n	8000c42 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d106      	bne.n	8000b5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f009 fbd4 	bl	800a304 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2224      	movs	r2, #36	; 0x24
 8000b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f022 0201 	bic.w	r2, r2, #1
 8000b72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685a      	ldr	r2, [r3, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	689a      	ldr	r2, [r3, #8]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d107      	bne.n	8000baa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	e006      	b.n	8000bb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000bb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d104      	bne.n	8000bca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	6859      	ldr	r1, [r3, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_I2C_Init+0x11c>)
 8000bd6:	430b      	orrs	r3, r1
 8000bd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000be8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	691a      	ldr	r2, [r3, #16]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	ea42 0103 	orr.w	r1, r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	021a      	lsls	r2, r3, #8
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	430a      	orrs	r2, r1
 8000c02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69d9      	ldr	r1, [r3, #28]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a1a      	ldr	r2, [r3, #32]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	430a      	orrs	r2, r1
 8000c12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f042 0201 	orr.w	r2, r2, #1
 8000c22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2220      	movs	r2, #32
 8000c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	02008000 	.word	0x02008000

08000c50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b20      	cmp	r3, #32
 8000c64:	d138      	bne.n	8000cd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d101      	bne.n	8000c74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000c70:	2302      	movs	r3, #2
 8000c72:	e032      	b.n	8000cda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2224      	movs	r2, #36	; 0x24
 8000c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 0201 	bic.w	r2, r2, #1
 8000c92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ca2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6819      	ldr	r1, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f042 0201 	orr.w	r2, r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e000      	b.n	8000cda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000cd8:	2302      	movs	r3, #2
  }
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b085      	sub	sp, #20
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b20      	cmp	r3, #32
 8000cfa:	d139      	bne.n	8000d70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d101      	bne.n	8000d0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000d06:	2302      	movs	r3, #2
 8000d08:	e033      	b.n	8000d72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2224      	movs	r2, #36	; 0x24
 8000d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f022 0201 	bic.w	r2, r2, #1
 8000d28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f042 0201 	orr.w	r2, r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2220      	movs	r2, #32
 8000d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	e000      	b.n	8000d72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000d70:	2302      	movs	r3, #2
  }
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d80:	b08f      	sub	sp, #60	; 0x3c
 8000d82:	af0a      	add	r7, sp, #40	; 0x28
 8000d84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d101      	bne.n	8000d90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e116      	b.n	8000fbe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d106      	bne.n	8000db0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f009 fd2e 	bl	800a80c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2203      	movs	r2, #3
 8000db4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f003 fb03 	bl	80043da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	687e      	ldr	r6, [r7, #4]
 8000ddc:	466d      	mov	r5, sp
 8000dde:	f106 0410 	add.w	r4, r6, #16
 8000de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dee:	e885 0003 	stmia.w	r5, {r0, r1}
 8000df2:	1d33      	adds	r3, r6, #4
 8000df4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000df6:	6838      	ldr	r0, [r7, #0]
 8000df8:	f003 f9e4 	bl	80041c4 <USB_CoreInit>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d005      	beq.n	8000e0e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2202      	movs	r2, #2
 8000e06:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e0d7      	b.n	8000fbe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 faf1 	bl	80043fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	73fb      	strb	r3, [r7, #15]
 8000e1e:	e04a      	b.n	8000eb6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	4613      	mov	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	1a9b      	subs	r3, r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	333d      	adds	r3, #61	; 0x3d
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e34:	7bfa      	ldrb	r2, [r7, #15]
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	1a9b      	subs	r3, r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	440b      	add	r3, r1
 8000e42:	333c      	adds	r3, #60	; 0x3c
 8000e44:	7bfa      	ldrb	r2, [r7, #15]
 8000e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e48:	7bfa      	ldrb	r2, [r7, #15]
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	b298      	uxth	r0, r3
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	4613      	mov	r3, r2
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	1a9b      	subs	r3, r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	440b      	add	r3, r1
 8000e5a:	3342      	adds	r3, #66	; 0x42
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e60:	7bfa      	ldrb	r2, [r7, #15]
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	4613      	mov	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	1a9b      	subs	r3, r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	333f      	adds	r3, #63	; 0x3f
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e74:	7bfa      	ldrb	r2, [r7, #15]
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	1a9b      	subs	r3, r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	440b      	add	r3, r1
 8000e82:	3344      	adds	r3, #68	; 0x44
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e88:	7bfa      	ldrb	r2, [r7, #15]
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	1a9b      	subs	r3, r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	440b      	add	r3, r1
 8000e96:	3348      	adds	r3, #72	; 0x48
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e9c:	7bfa      	ldrb	r2, [r7, #15]
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	1a9b      	subs	r3, r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	3350      	adds	r3, #80	; 0x50
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d3af      	bcc.n	8000e20 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	e044      	b.n	8000f50 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ec6:	7bfa      	ldrb	r2, [r7, #15]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	1a9b      	subs	r3, r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000edc:	7bfa      	ldrb	r2, [r7, #15]
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	1a9b      	subs	r3, r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000eee:	7bfa      	ldrb	r2, [r7, #15]
 8000ef0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f08:	7bfa      	ldrb	r2, [r7, #15]
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	1a9b      	subs	r3, r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	4613      	mov	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	1a9b      	subs	r3, r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	1a9b      	subs	r3, r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	440b      	add	r3, r1
 8000f42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d3b5      	bcc.n	8000ec6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	687e      	ldr	r6, [r7, #4]
 8000f62:	466d      	mov	r5, sp
 8000f64:	f106 0410 	add.w	r4, r6, #16
 8000f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f74:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f78:	1d33      	adds	r3, r6, #4
 8000f7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f7c:	6838      	ldr	r0, [r7, #0]
 8000f7e:	f003 fa67 	bl	8004450 <USB_DevInit>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e014      	b.n	8000fbe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d102      	bne.n	8000fb2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f001 f881 	bl	80020b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f004 fabf 	bl	800553a <USB_DevDisconnect>

  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fc6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d101      	bne.n	8000fdc <HAL_PCD_Start+0x16>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	e012      	b.n	8001002 <HAL_PCD_Start+0x3c>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f003 f9e5 	bl	80043b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f004 fa80 	bl	80054f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800100a:	b590      	push	{r4, r7, lr}
 800100c:	b08d      	sub	sp, #52	; 0x34
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001018:	6a3b      	ldr	r3, [r7, #32]
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f004 fb3e 	bl	80056a2 <USB_GetMode>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	f040 83ca 	bne.w	80017c2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f004 faa2 	bl	800557c <USB_ReadInterrupts>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 83c0 	beq.w	80017c0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f004 fa99 	bl	800557c <USB_ReadInterrupts>
 800104a:	4603      	mov	r3, r0
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b02      	cmp	r3, #2
 8001052:	d107      	bne.n	8001064 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f002 0202 	and.w	r2, r2, #2
 8001062:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f004 fa87 	bl	800557c <USB_ReadInterrupts>
 800106e:	4603      	mov	r3, r0
 8001070:	f003 0310 	and.w	r3, r3, #16
 8001074:	2b10      	cmp	r3, #16
 8001076:	d161      	bne.n	800113c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	699a      	ldr	r2, [r3, #24]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0210 	bic.w	r2, r2, #16
 8001086:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	f003 020f 	and.w	r2, r3, #15
 8001094:	4613      	mov	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	1a9b      	subs	r3, r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	3304      	adds	r3, #4
 80010a6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	0c5b      	lsrs	r3, r3, #17
 80010ac:	f003 030f 	and.w	r3, r3, #15
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d124      	bne.n	80010fe <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d035      	beq.n	800112c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	091b      	lsrs	r3, r3, #4
 80010c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80010ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	6a38      	ldr	r0, [r7, #32]
 80010d4:	f004 f8ed 	bl	80052b2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	091b      	lsrs	r3, r3, #4
 80010e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010e4:	441a      	add	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	699a      	ldr	r2, [r3, #24]
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010f6:	441a      	add	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	619a      	str	r2, [r3, #24]
 80010fc:	e016      	b.n	800112c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	0c5b      	lsrs	r3, r3, #17
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	2b06      	cmp	r3, #6
 8001108:	d110      	bne.n	800112c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001110:	2208      	movs	r2, #8
 8001112:	4619      	mov	r1, r3
 8001114:	6a38      	ldr	r0, [r7, #32]
 8001116:	f004 f8cc 	bl	80052b2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	699a      	ldr	r2, [r3, #24]
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001126:	441a      	add	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	699a      	ldr	r2, [r3, #24]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0210 	orr.w	r2, r2, #16
 800113a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f004 fa1b 	bl	800557c <USB_ReadInterrupts>
 8001146:	4603      	mov	r3, r0
 8001148:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800114c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001150:	d16e      	bne.n	8001230 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f004 fa21 	bl	80055a2 <USB_ReadDevAllOutEpInterrupt>
 8001160:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001162:	e062      	b.n	800122a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d057      	beq.n	800121e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f004 fa46 	bl	800560a <USB_ReadDevOutEPInterrupt>
 800117e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00c      	beq.n	80011a4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	015a      	lsls	r2, r3, #5
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	4413      	add	r3, r2
 8001192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001196:	461a      	mov	r2, r3
 8001198:	2301      	movs	r3, #1
 800119a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800119c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 fdde 	bl	8001d60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00c      	beq.n	80011c8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	015a      	lsls	r2, r3, #5
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	4413      	add	r3, r2
 80011b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011ba:	461a      	mov	r2, r3
 80011bc:	2308      	movs	r3, #8
 80011be:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80011c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 fed8 	bl	8001f78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d008      	beq.n	80011e4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	015a      	lsls	r2, r3, #5
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	4413      	add	r3, r2
 80011da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011de:	461a      	mov	r2, r3
 80011e0:	2310      	movs	r3, #16
 80011e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	f003 0320 	and.w	r3, r3, #32
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d008      	beq.n	8001200 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	015a      	lsls	r2, r3, #5
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	4413      	add	r3, r2
 80011f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011fa:	461a      	mov	r2, r3
 80011fc:	2320      	movs	r3, #32
 80011fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d009      	beq.n	800121e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	015a      	lsls	r2, r3, #5
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	4413      	add	r3, r2
 8001212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001216:	461a      	mov	r2, r3
 8001218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	3301      	adds	r3, #1
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001226:	085b      	lsrs	r3, r3, #1
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122c:	2b00      	cmp	r3, #0
 800122e:	d199      	bne.n	8001164 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f004 f9a1 	bl	800557c <USB_ReadInterrupts>
 800123a:	4603      	mov	r3, r0
 800123c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001240:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001244:	f040 80c0 	bne.w	80013c8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f004 f9c2 	bl	80055d6 <USB_ReadDevAllInEpInterrupt>
 8001252:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001258:	e0b2      	b.n	80013c0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800125a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80a7 	beq.w	80013b4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f004 f9e8 	bl	8005646 <USB_ReadDevInEPInterrupt>
 8001276:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d057      	beq.n	8001332 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	f003 030f 	and.w	r3, r3, #15
 8001288:	2201      	movs	r2, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43db      	mvns	r3, r3
 800129c:	69f9      	ldr	r1, [r7, #28]
 800129e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80012a2:	4013      	ands	r3, r2
 80012a4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	015a      	lsls	r2, r3, #5
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	4413      	add	r3, r2
 80012ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012b2:	461a      	mov	r2, r3
 80012b4:	2301      	movs	r3, #1
 80012b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d132      	bne.n	8001326 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c4:	4613      	mov	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	1a9b      	subs	r3, r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	3348      	adds	r3, #72	; 0x48
 80012d0:	6819      	ldr	r1, [r3, #0]
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012d6:	4613      	mov	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4403      	add	r3, r0
 80012e0:	3344      	adds	r3, #68	; 0x44
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4419      	add	r1, r3
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ea:	4613      	mov	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	1a9b      	subs	r3, r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4403      	add	r3, r0
 80012f4:	3348      	adds	r3, #72	; 0x48
 80012f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d113      	bne.n	8001326 <HAL_PCD_IRQHandler+0x31c>
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001302:	4613      	mov	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	1a9b      	subs	r3, r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	3350      	adds	r3, #80	; 0x50
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d108      	bne.n	8001326 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800131e:	461a      	mov	r2, r3
 8001320:	2101      	movs	r1, #1
 8001322:	f004 f9f1 	bl	8005708 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4619      	mov	r1, r3
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f009 fafe 	bl	800a92e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	2b00      	cmp	r3, #0
 800133a:	d008      	beq.n	800134e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	015a      	lsls	r2, r3, #5
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	4413      	add	r3, r2
 8001344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001348:	461a      	mov	r2, r3
 800134a:	2308      	movs	r3, #8
 800134c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	2b00      	cmp	r3, #0
 8001356:	d008      	beq.n	800136a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	015a      	lsls	r2, r3, #5
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	4413      	add	r3, r2
 8001360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001364:	461a      	mov	r2, r3
 8001366:	2310      	movs	r3, #16
 8001368:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	015a      	lsls	r2, r3, #5
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	4413      	add	r3, r2
 800137c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001380:	461a      	mov	r2, r3
 8001382:	2340      	movs	r3, #64	; 0x40
 8001384:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d008      	beq.n	80013a2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	015a      	lsls	r2, r3, #5
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	4413      	add	r3, r2
 8001398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800139c:	461a      	mov	r2, r3
 800139e:	2302      	movs	r3, #2
 80013a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80013ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 fc48 	bl	8001c44 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	3301      	adds	r3, #1
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013bc:	085b      	lsrs	r3, r3, #1
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f47f af49 	bne.w	800125a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f004 f8d5 	bl	800557c <USB_ReadInterrupts>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80013d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013dc:	d122      	bne.n	8001424 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013ec:	f023 0301 	bic.w	r3, r3, #1
 80013f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d108      	bne.n	800140e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001404:	2100      	movs	r1, #0
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f009 fce0 	bl	800adcc <HAL_PCDEx_LPM_Callback>
 800140c:	e002      	b.n	8001414 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f009 fb04 	bl	800aa1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	695a      	ldr	r2, [r3, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001422:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f004 f8a7 	bl	800557c <USB_ReadInterrupts>
 800142e:	4603      	mov	r3, r0
 8001430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001438:	d112      	bne.n	8001460 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b01      	cmp	r3, #1
 8001448:	d102      	bne.n	8001450 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f009 fac0 	bl	800a9d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800145e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f004 f889 	bl	800557c <USB_ReadInterrupts>
 800146a:	4603      	mov	r3, r0
 800146c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001474:	d121      	bne.n	80014ba <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	695a      	ldr	r2, [r3, #20]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001484:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d111      	bne.n	80014b4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	f003 020f 	and.w	r2, r3, #15
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80014aa:	2101      	movs	r1, #1
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f009 fc8d 	bl	800adcc <HAL_PCDEx_LPM_Callback>
 80014b2:	e002      	b.n	80014ba <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f009 fa8b 	bl	800a9d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f004 f85c 	bl	800557c <USB_ReadInterrupts>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ce:	f040 80c7 	bne.w	8001660 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014e0:	f023 0301 	bic.w	r3, r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2110      	movs	r1, #16
 80014ec:	4618      	mov	r0, r3
 80014ee:	f003 f91d 	bl	800472c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014f6:	e056      	b.n	80015a6 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80014f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fa:	015a      	lsls	r2, r3, #5
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	4413      	add	r3, r2
 8001500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001504:	461a      	mov	r2, r3
 8001506:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800150a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	015a      	lsls	r2, r3, #5
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	4413      	add	r3, r2
 8001514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800151c:	0151      	lsls	r1, r2, #5
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	440a      	add	r2, r1
 8001522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001526:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800152a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152e:	015a      	lsls	r2, r3, #5
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	4413      	add	r3, r2
 8001534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800153c:	0151      	lsls	r1, r2, #5
 800153e:	69fa      	ldr	r2, [r7, #28]
 8001540:	440a      	add	r2, r1
 8001542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001546:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800154a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800154c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154e:	015a      	lsls	r2, r3, #5
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	4413      	add	r3, r2
 8001554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001558:	461a      	mov	r2, r3
 800155a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800155e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001562:	015a      	lsls	r2, r3, #5
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	4413      	add	r3, r2
 8001568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001570:	0151      	lsls	r1, r2, #5
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	440a      	add	r2, r1
 8001576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800157a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800157e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001582:	015a      	lsls	r2, r3, #5
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	4413      	add	r3, r2
 8001588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001590:	0151      	lsls	r1, r2, #5
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	440a      	add	r2, r1
 8001596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800159a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800159e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a2:	3301      	adds	r3, #1
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d3a3      	bcc.n	80014f8 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	69fa      	ldr	r2, [r7, #28]
 80015ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015be:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80015c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d016      	beq.n	80015fa <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015dc:	f043 030b 	orr.w	r3, r3, #11
 80015e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	69fa      	ldr	r2, [r7, #28]
 80015ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015f2:	f043 030b 	orr.w	r3, r3, #11
 80015f6:	6453      	str	r3, [r2, #68]	; 0x44
 80015f8:	e015      	b.n	8001626 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001600:	695a      	ldr	r2, [r3, #20]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001608:	4619      	mov	r1, r3
 800160a:	f242 032b 	movw	r3, #8235	; 0x202b
 800160e:	4313      	orrs	r3, r2
 8001610:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001620:	f043 030b 	orr.w	r3, r3, #11
 8001624:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001634:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001638:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800164a:	461a      	mov	r2, r3
 800164c:	f004 f85c 	bl	8005708 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800165e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f003 ff89 	bl	800557c <USB_ReadInterrupts>
 800166a:	4603      	mov	r3, r0
 800166c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001674:	d124      	bne.n	80016c0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f004 f820 	bl	80056c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f003 f8b2 	bl	80047ee <USB_GetDevSpeed>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681c      	ldr	r4, [r3, #0]
 8001696:	f001 f9b3 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 800169a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	461a      	mov	r2, r3
 80016a4:	4620      	mov	r0, r4
 80016a6:	f002 fde5 	bl	8004274 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f009 f967 	bl	800a97e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80016be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 ff59 	bl	800557c <USB_ReadInterrupts>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d10a      	bne.n	80016ea <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f009 f944 	bl	800a962 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f002 0208 	and.w	r2, r2, #8
 80016e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 ff44 	bl	800557c <USB_ReadInterrupts>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016fe:	d10f      	bne.n	8001720 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	b2db      	uxtb	r3, r3
 8001708:	4619      	mov	r1, r3
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f009 f9a6 	bl	800aa5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800171e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f003 ff29 	bl	800557c <USB_ReadInterrupts>
 800172a:	4603      	mov	r3, r0
 800172c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001730:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001734:	d10f      	bne.n	8001756 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	b2db      	uxtb	r3, r3
 800173e:	4619      	mov	r1, r3
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f009 f979 	bl	800aa38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	695a      	ldr	r2, [r3, #20]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f003 ff0e 	bl	800557c <USB_ReadInterrupts>
 8001760:	4603      	mov	r3, r0
 8001762:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800176a:	d10a      	bne.n	8001782 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f009 f987 	bl	800aa80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f003 fef8 	bl	800557c <USB_ReadInterrupts>
 800178c:	4603      	mov	r3, r0
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b04      	cmp	r3, #4
 8001794:	d115      	bne.n	80017c2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f009 f977 	bl	800aa9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	e000      	b.n	80017c2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80017c0:	bf00      	nop
    }
  }
}
 80017c2:	3734      	adds	r7, #52	; 0x34
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd90      	pop	{r4, r7, pc}

080017c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d101      	bne.n	80017e2 <HAL_PCD_SetAddress+0x1a>
 80017de:	2302      	movs	r3, #2
 80017e0:	e013      	b.n	800180a <HAL_PCD_SetAddress+0x42>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 fe56 	bl	80054ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	4608      	mov	r0, r1
 800181c:	4611      	mov	r1, r2
 800181e:	461a      	mov	r2, r3
 8001820:	4603      	mov	r3, r0
 8001822:	70fb      	strb	r3, [r7, #3]
 8001824:	460b      	mov	r3, r1
 8001826:	803b      	strh	r3, [r7, #0]
 8001828:	4613      	mov	r3, r2
 800182a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001834:	2b00      	cmp	r3, #0
 8001836:	da0f      	bge.n	8001858 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	f003 020f 	and.w	r2, r3, #15
 800183e:	4613      	mov	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	1a9b      	subs	r3, r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	3338      	adds	r3, #56	; 0x38
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	3304      	adds	r3, #4
 800184e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2201      	movs	r2, #1
 8001854:	705a      	strb	r2, [r3, #1]
 8001856:	e00f      	b.n	8001878 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	f003 020f 	and.w	r2, r3, #15
 800185e:	4613      	mov	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	1a9b      	subs	r3, r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	3304      	adds	r3, #4
 8001870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	b2da      	uxtb	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001884:	883a      	ldrh	r2, [r7, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	78ba      	ldrb	r2, [r7, #2]
 800188e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	785b      	ldrb	r3, [r3, #1]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018a2:	78bb      	ldrb	r3, [r7, #2]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d102      	bne.n	80018ae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_PCD_EP_Open+0xaa>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e00e      	b.n	80018da <HAL_PCD_EP_Open+0xc8>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68f9      	ldr	r1, [r7, #12]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f002 ffb4 	bl	8004838 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80018d8:	7afb      	ldrb	r3, [r7, #11]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b084      	sub	sp, #16
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	460b      	mov	r3, r1
 80018ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	da0f      	bge.n	8001916 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	f003 020f 	and.w	r2, r3, #15
 80018fc:	4613      	mov	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	3338      	adds	r3, #56	; 0x38
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	3304      	adds	r3, #4
 800190c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2201      	movs	r2, #1
 8001912:	705a      	strb	r2, [r3, #1]
 8001914:	e00f      	b.n	8001936 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	f003 020f 	and.w	r2, r3, #15
 800191c:	4613      	mov	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	4413      	add	r3, r2
 800192c:	3304      	adds	r3, #4
 800192e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	b2da      	uxtb	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_PCD_EP_Close+0x6e>
 800194c:	2302      	movs	r3, #2
 800194e:	e00e      	b.n	800196e <HAL_PCD_EP_Close+0x8c>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68f9      	ldr	r1, [r7, #12]
 800195e:	4618      	mov	r0, r3
 8001960:	f002 fff2 	bl	8004948 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	460b      	mov	r3, r1
 8001984:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001986:	7afb      	ldrb	r3, [r7, #11]
 8001988:	f003 020f 	and.w	r2, r3, #15
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	3304      	adds	r3, #4
 800199e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2200      	movs	r2, #0
 80019b0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2200      	movs	r2, #0
 80019b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b8:	7afb      	ldrb	r3, [r7, #11]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d102      	bne.n	80019d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019d2:	7afb      	ldrb	r3, [r7, #11]
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d109      	bne.n	80019f0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	461a      	mov	r2, r3
 80019e8:	6979      	ldr	r1, [r7, #20]
 80019ea:	f003 fad5 	bl	8004f98 <USB_EP0StartXfer>
 80019ee:	e008      	b.n	8001a02 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	6979      	ldr	r1, [r7, #20]
 80019fe:	f003 f87f 	bl	8004b00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	f003 020f 	and.w	r2, r3, #15
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a4c:	7afb      	ldrb	r3, [r7, #11]
 8001a4e:	f003 020f 	and.w	r2, r3, #15
 8001a52:	4613      	mov	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	1a9b      	subs	r3, r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	3338      	adds	r3, #56	; 0x38
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	3304      	adds	r3, #4
 8001a62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2200      	movs	r2, #0
 8001a74:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a7c:	7afb      	ldrb	r3, [r7, #11]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d102      	bne.n	8001a96 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a96:	7afb      	ldrb	r3, [r7, #11]
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d109      	bne.n	8001ab4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	6979      	ldr	r1, [r7, #20]
 8001aae:	f003 fa73 	bl	8004f98 <USB_EP0StartXfer>
 8001ab2:	e008      	b.n	8001ac6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	6979      	ldr	r1, [r7, #20]
 8001ac2:	f003 f81d 	bl	8004b00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	f003 020f 	and.w	r2, r3, #15
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d901      	bls.n	8001aee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e050      	b.n	8001b90 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001aee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	da0f      	bge.n	8001b16 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	f003 020f 	and.w	r2, r3, #15
 8001afc:	4613      	mov	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	3338      	adds	r3, #56	; 0x38
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2201      	movs	r2, #1
 8001b12:	705a      	strb	r2, [r3, #1]
 8001b14:	e00d      	b.n	8001b32 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	4413      	add	r3, r2
 8001b28:	3304      	adds	r3, #4
 8001b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2201      	movs	r2, #1
 8001b36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_PCD_EP_SetStall+0x82>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e01e      	b.n	8001b90 <HAL_PCD_EP_SetStall+0xc0>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68f9      	ldr	r1, [r7, #12]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 fbcf 	bl	8005304 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10a      	bne.n	8001b86 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	b2d9      	uxtb	r1, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b80:	461a      	mov	r2, r3
 8001b82:	f003 fdc1 	bl	8005708 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	f003 020f 	and.w	r2, r3, #15
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d901      	bls.n	8001bb6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e042      	b.n	8001c3c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	da0f      	bge.n	8001bde <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bbe:	78fb      	ldrb	r3, [r7, #3]
 8001bc0:	f003 020f 	and.w	r2, r3, #15
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	3338      	adds	r3, #56	; 0x38
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	705a      	strb	r2, [r3, #1]
 8001bdc:	e00f      	b.n	8001bfe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	f003 020f 	and.w	r2, r3, #15
 8001be4:	4613      	mov	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_PCD_EP_ClrStall+0x86>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e00e      	b.n	8001c3c <HAL_PCD_EP_ClrStall+0xa4>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68f9      	ldr	r1, [r7, #12]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f003 fbd7 	bl	80053e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af02      	add	r7, sp, #8
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	1a9b      	subs	r3, r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	3338      	adds	r3, #56	; 0x38
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	4413      	add	r3, r2
 8001c68:	3304      	adds	r3, #4
 8001c6a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	699a      	ldr	r2, [r3, #24]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d901      	bls.n	8001c7c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e06c      	b.n	8001d56 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d902      	bls.n	8001c98 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	3303      	adds	r3, #3
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ca0:	e02b      	b.n	8001cfa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	695a      	ldr	r2, [r3, #20]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d902      	bls.n	8001cbe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3303      	adds	r3, #3
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	68d9      	ldr	r1, [r3, #12]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6978      	ldr	r0, [r7, #20]
 8001cde:	f003 fab3 	bl	8005248 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	441a      	add	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	441a      	add	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d809      	bhi.n	8001d24 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	699a      	ldr	r2, [r3, #24]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d203      	bcs.n	8001d24 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1be      	bne.n	8001ca2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d811      	bhi.n	8001d54 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	2201      	movs	r2, #1
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	6939      	ldr	r1, [r7, #16]
 8001d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d50:	4013      	ands	r3, r2
 8001d52:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3720      	adds	r7, #32
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	333c      	adds	r3, #60	; 0x3c
 8001d78:	3304      	adds	r3, #4
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	f040 80a0 	bne.w	8001ed8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d015      	beq.n	8001dce <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4a72      	ldr	r2, [pc, #456]	; (8001f70 <PCD_EP_OutXfrComplete_int+0x210>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	f240 80dd 	bls.w	8001f66 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 80d7 	beq.w	8001f66 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dca:	6093      	str	r3, [r2, #8]
 8001dcc:	e0cb      	b.n	8001f66 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	f003 0320 	and.w	r3, r3, #32
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d009      	beq.n	8001dec <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	015a      	lsls	r2, r3, #5
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4413      	add	r3, r2
 8001de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de4:	461a      	mov	r2, r3
 8001de6:	2320      	movs	r3, #32
 8001de8:	6093      	str	r3, [r2, #8]
 8001dea:	e0bc      	b.n	8001f66 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f040 80b7 	bne.w	8001f66 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4a5d      	ldr	r2, [pc, #372]	; (8001f70 <PCD_EP_OutXfrComplete_int+0x210>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d90f      	bls.n	8001e20 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00a      	beq.n	8001e20 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	015a      	lsls	r2, r3, #5
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e16:	461a      	mov	r2, r3
 8001e18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e1c:	6093      	str	r3, [r2, #8]
 8001e1e:	e0a2      	b.n	8001f66 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e32:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	0159      	lsls	r1, r3, #5
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001e46:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4403      	add	r3, r0
 8001e56:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e5a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e6e:	6819      	ldr	r1, [r3, #0]
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4403      	add	r3, r0
 8001e7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4419      	add	r1, r3
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	1a9b      	subs	r3, r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4403      	add	r3, r0
 8001e94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e98:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d114      	bne.n	8001eca <PCD_EP_OutXfrComplete_int+0x16a>
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d108      	bne.n	8001eca <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	f003 fc1f 	bl	8005708 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f008 fd11 	bl	800a8f8 <HAL_PCD_DataOutStageCallback>
 8001ed6:	e046      	b.n	8001f66 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <PCD_EP_OutXfrComplete_int+0x214>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d124      	bne.n	8001f2a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001efc:	6093      	str	r3, [r2, #8]
 8001efe:	e032      	b.n	8001f66 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d008      	beq.n	8001f1c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f16:	461a      	mov	r2, r3
 8001f18:	2320      	movs	r3, #32
 8001f1a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	4619      	mov	r1, r3
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f008 fce8 	bl	800a8f8 <HAL_PCD_DataOutStageCallback>
 8001f28:	e01d      	b.n	8001f66 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d114      	bne.n	8001f5a <PCD_EP_OutXfrComplete_int+0x1fa>
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d108      	bne.n	8001f5a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f52:	461a      	mov	r2, r3
 8001f54:	2100      	movs	r1, #0
 8001f56:	f003 fbd7 	bl	8005708 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	4619      	mov	r1, r3
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f008 fcc9 	bl	800a8f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	4f54300a 	.word	0x4f54300a
 8001f74:	4f54310a 	.word	0x4f54310a

08001f78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	333c      	adds	r3, #60	; 0x3c
 8001f90:	3304      	adds	r3, #4
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4a15      	ldr	r2, [pc, #84]	; (8002000 <PCD_EP_OutSetupPacket_int+0x88>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d90e      	bls.n	8001fcc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d009      	beq.n	8001fcc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	015a      	lsls	r2, r3, #5
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f008 fc81 	bl	800a8d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <PCD_EP_OutSetupPacket_int+0x88>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d90c      	bls.n	8001ff4 <PCD_EP_OutSetupPacket_int+0x7c>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d108      	bne.n	8001ff4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fec:	461a      	mov	r2, r3
 8001fee:	2101      	movs	r1, #1
 8001ff0:	f003 fb8a 	bl	8005708 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	4f54300a 	.word	0x4f54300a

08002004 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	70fb      	strb	r3, [r7, #3]
 8002010:	4613      	mov	r3, r2
 8002012:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d107      	bne.n	8002032 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002022:	883b      	ldrh	r3, [r7, #0]
 8002024:	0419      	lsls	r1, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	430a      	orrs	r2, r1
 800202e:	629a      	str	r2, [r3, #40]	; 0x28
 8002030:	e028      	b.n	8002084 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	0c1b      	lsrs	r3, r3, #16
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	4413      	add	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002040:	2300      	movs	r3, #0
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	e00d      	b.n	8002062 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	3340      	adds	r3, #64	; 0x40
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	0c1b      	lsrs	r3, r3, #16
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	4413      	add	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	3301      	adds	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	3b01      	subs	r3, #1
 8002068:	429a      	cmp	r2, r3
 800206a:	d3ec      	bcc.n	8002046 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800206c:	883b      	ldrh	r3, [r7, #0]
 800206e:	0418      	lsls	r0, r3, #16
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6819      	ldr	r1, [r3, #0]
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	3b01      	subs	r3, #1
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	4302      	orrs	r2, r0
 800207c:	3340      	adds	r3, #64	; 0x40
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	460b      	mov	r3, r1
 800209c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	887a      	ldrh	r2, [r7, #2]
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	10000003 	.word	0x10000003

080020fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210a:	6013      	str	r3, [r2, #0]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40007000 	.word	0x40007000

0800211c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002124:	2300      	movs	r3, #0
 8002126:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e291      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8087 	beq.w	800224e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002140:	4b96      	ldr	r3, [pc, #600]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b04      	cmp	r3, #4
 800214a:	d00c      	beq.n	8002166 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800214c:	4b93      	ldr	r3, [pc, #588]	; (800239c <HAL_RCC_OscConfig+0x280>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d112      	bne.n	800217e <HAL_RCC_OscConfig+0x62>
 8002158:	4b90      	ldr	r3, [pc, #576]	; (800239c <HAL_RCC_OscConfig+0x280>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002164:	d10b      	bne.n	800217e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002166:	4b8d      	ldr	r3, [pc, #564]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d06c      	beq.n	800224c <HAL_RCC_OscConfig+0x130>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d168      	bne.n	800224c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e26b      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002186:	d106      	bne.n	8002196 <HAL_RCC_OscConfig+0x7a>
 8002188:	4b84      	ldr	r3, [pc, #528]	; (800239c <HAL_RCC_OscConfig+0x280>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a83      	ldr	r2, [pc, #524]	; (800239c <HAL_RCC_OscConfig+0x280>)
 800218e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	e02e      	b.n	80021f4 <HAL_RCC_OscConfig+0xd8>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x9c>
 800219e:	4b7f      	ldr	r3, [pc, #508]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a7e      	ldr	r2, [pc, #504]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	4b7c      	ldr	r3, [pc, #496]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7b      	ldr	r2, [pc, #492]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e01d      	b.n	80021f4 <HAL_RCC_OscConfig+0xd8>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0xc0>
 80021c2:	4b76      	ldr	r3, [pc, #472]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a75      	ldr	r2, [pc, #468]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b73      	ldr	r3, [pc, #460]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a72      	ldr	r2, [pc, #456]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e00b      	b.n	80021f4 <HAL_RCC_OscConfig+0xd8>
 80021dc:	4b6f      	ldr	r3, [pc, #444]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a6e      	ldr	r2, [pc, #440]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b6c      	ldr	r3, [pc, #432]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a6b      	ldr	r2, [pc, #428]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe f9a6 	bl	800054c <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002204:	f7fe f9a2 	bl	800054c <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e21f      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	4b61      	ldr	r3, [pc, #388]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0xe8>
 8002222:	e014      	b.n	800224e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7fe f992 	bl	800054c <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800222c:	f7fe f98e 	bl	800054c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	; 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e20b      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	4b57      	ldr	r3, [pc, #348]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x110>
 800224a:	e000      	b.n	800224e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d069      	beq.n	800232e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800225a:	4b50      	ldr	r3, [pc, #320]	; (800239c <HAL_RCC_OscConfig+0x280>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00b      	beq.n	800227e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002266:	4b4d      	ldr	r3, [pc, #308]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b08      	cmp	r3, #8
 8002270:	d11c      	bne.n	80022ac <HAL_RCC_OscConfig+0x190>
 8002272:	4b4a      	ldr	r3, [pc, #296]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d116      	bne.n	80022ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227e:	4b47      	ldr	r3, [pc, #284]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_RCC_OscConfig+0x17a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e1df      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002296:	4b41      	ldr	r3, [pc, #260]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	493d      	ldr	r1, [pc, #244]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022aa:	e040      	b.n	800232e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d023      	beq.n	80022fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b4:	4b39      	ldr	r3, [pc, #228]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a38      	ldr	r2, [pc, #224]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe f944 	bl	800054c <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c8:	f7fe f940 	bl	800054c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e1bd      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022da:	4b30      	ldr	r3, [pc, #192]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e6:	4b2d      	ldr	r3, [pc, #180]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4929      	ldr	r1, [pc, #164]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
 80022fa:	e018      	b.n	800232e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022fc:	4b27      	ldr	r3, [pc, #156]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a26      	ldr	r2, [pc, #152]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7fe f920 	bl	800054c <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002310:	f7fe f91c 	bl	800054c <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e199      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	4b1e      	ldr	r3, [pc, #120]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d038      	beq.n	80023ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d019      	beq.n	8002376 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002346:	4a15      	ldr	r2, [pc, #84]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fe f8fd 	bl	800054c <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002356:	f7fe f8f9 	bl	800054c <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e176      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <HAL_RCC_OscConfig+0x280>)
 800236a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x23a>
 8002374:	e01a      	b.n	80023ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <HAL_RCC_OscConfig+0x280>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002382:	f7fe f8e3 	bl	800054c <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002388:	e00a      	b.n	80023a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800238a:	f7fe f8df 	bl	800054c <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d903      	bls.n	80023a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e15c      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
 800239c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a0:	4b91      	ldr	r3, [pc, #580]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80023a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1ee      	bne.n	800238a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80a4 	beq.w	8002502 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ba:	4b8b      	ldr	r3, [pc, #556]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10d      	bne.n	80023e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c6:	4b88      	ldr	r3, [pc, #544]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a87      	ldr	r2, [pc, #540]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80023cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b85      	ldr	r3, [pc, #532]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023de:	2301      	movs	r3, #1
 80023e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023e2:	4b82      	ldr	r3, [pc, #520]	; (80025ec <HAL_RCC_OscConfig+0x4d0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d118      	bne.n	8002420 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80023ee:	4b7f      	ldr	r3, [pc, #508]	; (80025ec <HAL_RCC_OscConfig+0x4d0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a7e      	ldr	r2, [pc, #504]	; (80025ec <HAL_RCC_OscConfig+0x4d0>)
 80023f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023fa:	f7fe f8a7 	bl	800054c <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002402:	f7fe f8a3 	bl	800054c <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b64      	cmp	r3, #100	; 0x64
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e120      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002414:	4b75      	ldr	r3, [pc, #468]	; (80025ec <HAL_RCC_OscConfig+0x4d0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d106      	bne.n	8002436 <HAL_RCC_OscConfig+0x31a>
 8002428:	4b6f      	ldr	r3, [pc, #444]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242c:	4a6e      	ldr	r2, [pc, #440]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6713      	str	r3, [r2, #112]	; 0x70
 8002434:	e02d      	b.n	8002492 <HAL_RCC_OscConfig+0x376>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0x33c>
 800243e:	4b6a      	ldr	r3, [pc, #424]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002442:	4a69      	ldr	r2, [pc, #420]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	6713      	str	r3, [r2, #112]	; 0x70
 800244a:	4b67      	ldr	r3, [pc, #412]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	4a66      	ldr	r2, [pc, #408]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002450:	f023 0304 	bic.w	r3, r3, #4
 8002454:	6713      	str	r3, [r2, #112]	; 0x70
 8002456:	e01c      	b.n	8002492 <HAL_RCC_OscConfig+0x376>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b05      	cmp	r3, #5
 800245e:	d10c      	bne.n	800247a <HAL_RCC_OscConfig+0x35e>
 8002460:	4b61      	ldr	r3, [pc, #388]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002464:	4a60      	ldr	r2, [pc, #384]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002466:	f043 0304 	orr.w	r3, r3, #4
 800246a:	6713      	str	r3, [r2, #112]	; 0x70
 800246c:	4b5e      	ldr	r3, [pc, #376]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	4a5d      	ldr	r2, [pc, #372]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6713      	str	r3, [r2, #112]	; 0x70
 8002478:	e00b      	b.n	8002492 <HAL_RCC_OscConfig+0x376>
 800247a:	4b5b      	ldr	r3, [pc, #364]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247e:	4a5a      	ldr	r2, [pc, #360]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	6713      	str	r3, [r2, #112]	; 0x70
 8002486:	4b58      	ldr	r3, [pc, #352]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248a:	4a57      	ldr	r2, [pc, #348]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 800248c:	f023 0304 	bic.w	r3, r3, #4
 8002490:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d015      	beq.n	80024c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249a:	f7fe f857 	bl	800054c <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7fe f853 	bl	800054c <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e0ce      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b8:	4b4b      	ldr	r3, [pc, #300]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0ee      	beq.n	80024a2 <HAL_RCC_OscConfig+0x386>
 80024c4:	e014      	b.n	80024f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7fe f841 	bl	800054c <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ce:	f7fe f83d 	bl	800054c <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024dc:	4293      	cmp	r3, r2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e0b8      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e4:	4b40      	ldr	r3, [pc, #256]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1ee      	bne.n	80024ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024f0:	7dfb      	ldrb	r3, [r7, #23]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4b3c      	ldr	r3, [pc, #240]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	4a3b      	ldr	r2, [pc, #236]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 80a4 	beq.w	8002654 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800250c:	4b36      	ldr	r3, [pc, #216]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b08      	cmp	r3, #8
 8002516:	d06b      	beq.n	80025f0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d149      	bne.n	80025b4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002520:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a30      	ldr	r2, [pc, #192]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800252a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe f80e 	bl	800054c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002534:	f7fe f80a 	bl	800054c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e087      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002546:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	019b      	lsls	r3, r3, #6
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	085b      	lsrs	r3, r3, #1
 800256a:	3b01      	subs	r3, #1
 800256c:	041b      	lsls	r3, r3, #16
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	061b      	lsls	r3, r3, #24
 8002576:	4313      	orrs	r3, r2
 8002578:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 800257a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800257e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a18      	ldr	r2, [pc, #96]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800258a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fd ffde 	bl	800054c <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7fd ffda 	bl	800054c <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e057      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x478>
 80025b2:	e04f      	b.n	8002654 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fd ffc4 	bl	800054c <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fd ffc0 	bl	800054c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e03d      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x4ac>
 80025e6:	e035      	b.n	8002654 <HAL_RCC_OscConfig+0x538>
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_RCC_OscConfig+0x544>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d028      	beq.n	8002650 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d121      	bne.n	8002650 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d11a      	bne.n	8002650 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002620:	4013      	ands	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002626:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002628:	4293      	cmp	r3, r2
 800262a:	d111      	bne.n	8002650 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	3b01      	subs	r3, #1
 800263a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800263c:	429a      	cmp	r2, r3
 800263e:	d107      	bne.n	8002650 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800

08002664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0d0      	b.n	800281e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800267c:	4b6a      	ldr	r3, [pc, #424]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d910      	bls.n	80026ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b67      	ldr	r3, [pc, #412]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 020f 	bic.w	r2, r3, #15
 8002692:	4965      	ldr	r1, [pc, #404]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b63      	ldr	r3, [pc, #396]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0b8      	b.n	800281e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d020      	beq.n	80026fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c4:	4b59      	ldr	r3, [pc, #356]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4a58      	ldr	r2, [pc, #352]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80026ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026dc:	4b53      	ldr	r3, [pc, #332]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	4a52      	ldr	r2, [pc, #328]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80026e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e8:	4b50      	ldr	r3, [pc, #320]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	494d      	ldr	r1, [pc, #308]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d040      	beq.n	8002788 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b47      	ldr	r3, [pc, #284]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d115      	bne.n	8002746 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e07f      	b.n	800281e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	4b41      	ldr	r3, [pc, #260]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e073      	b.n	800281e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002736:	4b3d      	ldr	r3, [pc, #244]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e06b      	b.n	800281e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002746:	4b39      	ldr	r3, [pc, #228]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f023 0203 	bic.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4936      	ldr	r1, [pc, #216]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 8002754:	4313      	orrs	r3, r2
 8002756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002758:	f7fd fef8 	bl	800054c <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	e00a      	b.n	8002776 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002760:	f7fd fef4 	bl	800054c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e053      	b.n	800281e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	4b2d      	ldr	r3, [pc, #180]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 020c 	and.w	r2, r3, #12
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	429a      	cmp	r2, r3
 8002786:	d1eb      	bne.n	8002760 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002788:	4b27      	ldr	r3, [pc, #156]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d210      	bcs.n	80027b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b24      	ldr	r3, [pc, #144]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 020f 	bic.w	r2, r3, #15
 800279e:	4922      	ldr	r1, [pc, #136]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b20      	ldr	r3, [pc, #128]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e032      	b.n	800281e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4916      	ldr	r1, [pc, #88]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027e2:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	490e      	ldr	r1, [pc, #56]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027f6:	f000 f821 	bl	800283c <HAL_RCC_GetSysClockFreq>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	490a      	ldr	r1, [pc, #40]	; (8002830 <HAL_RCC_ClockConfig+0x1cc>)
 8002808:	5ccb      	ldrb	r3, [r1, r3]
 800280a:	fa22 f303 	lsr.w	r3, r2, r3
 800280e:	4a09      	ldr	r2, [pc, #36]	; (8002834 <HAL_RCC_ClockConfig+0x1d0>)
 8002810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002812:	4b09      	ldr	r3, [pc, #36]	; (8002838 <HAL_RCC_ClockConfig+0x1d4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f007 fe5e 	bl	800a4d8 <HAL_InitTick>

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40023c00 	.word	0x40023c00
 800282c:	40023800 	.word	0x40023800
 8002830:	0800b6f8 	.word	0x0800b6f8
 8002834:	2000011c 	.word	0x2000011c
 8002838:	20000000 	.word	0x20000000

0800283c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800283c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	2300      	movs	r3, #0
 800284e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002854:	4b67      	ldr	r3, [pc, #412]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b08      	cmp	r3, #8
 800285e:	d00d      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0x40>
 8002860:	2b08      	cmp	r3, #8
 8002862:	f200 80bd 	bhi.w	80029e0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x34>
 800286a:	2b04      	cmp	r3, #4
 800286c:	d003      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0x3a>
 800286e:	e0b7      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002870:	4b61      	ldr	r3, [pc, #388]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002872:	60bb      	str	r3, [r7, #8]
      break;
 8002874:	e0b7      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002876:	4b61      	ldr	r3, [pc, #388]	; (80029fc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002878:	60bb      	str	r3, [r7, #8]
      break;
 800287a:	e0b4      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800287c:	4b5d      	ldr	r3, [pc, #372]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002884:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002886:	4b5b      	ldr	r3, [pc, #364]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d04d      	beq.n	800292e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002892:	4b58      	ldr	r3, [pc, #352]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	099b      	lsrs	r3, r3, #6
 8002898:	461a      	mov	r2, r3
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028a2:	f04f 0100 	mov.w	r1, #0
 80028a6:	ea02 0800 	and.w	r8, r2, r0
 80028aa:	ea03 0901 	and.w	r9, r3, r1
 80028ae:	4640      	mov	r0, r8
 80028b0:	4649      	mov	r1, r9
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	014b      	lsls	r3, r1, #5
 80028bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028c0:	0142      	lsls	r2, r0, #5
 80028c2:	4610      	mov	r0, r2
 80028c4:	4619      	mov	r1, r3
 80028c6:	ebb0 0008 	subs.w	r0, r0, r8
 80028ca:	eb61 0109 	sbc.w	r1, r1, r9
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	018b      	lsls	r3, r1, #6
 80028d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028dc:	0182      	lsls	r2, r0, #6
 80028de:	1a12      	subs	r2, r2, r0
 80028e0:	eb63 0301 	sbc.w	r3, r3, r1
 80028e4:	f04f 0000 	mov.w	r0, #0
 80028e8:	f04f 0100 	mov.w	r1, #0
 80028ec:	00d9      	lsls	r1, r3, #3
 80028ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028f2:	00d0      	lsls	r0, r2, #3
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	eb12 0208 	adds.w	r2, r2, r8
 80028fc:	eb43 0309 	adc.w	r3, r3, r9
 8002900:	f04f 0000 	mov.w	r0, #0
 8002904:	f04f 0100 	mov.w	r1, #0
 8002908:	0259      	lsls	r1, r3, #9
 800290a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800290e:	0250      	lsls	r0, r2, #9
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	461a      	mov	r2, r3
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	f7fd fc76 	bl	8000210 <__aeabi_uldivmod>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4613      	mov	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	e04a      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292e:	4b31      	ldr	r3, [pc, #196]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	099b      	lsrs	r3, r3, #6
 8002934:	461a      	mov	r2, r3
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800293e:	f04f 0100 	mov.w	r1, #0
 8002942:	ea02 0400 	and.w	r4, r2, r0
 8002946:	ea03 0501 	and.w	r5, r3, r1
 800294a:	4620      	mov	r0, r4
 800294c:	4629      	mov	r1, r5
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	014b      	lsls	r3, r1, #5
 8002958:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800295c:	0142      	lsls	r2, r0, #5
 800295e:	4610      	mov	r0, r2
 8002960:	4619      	mov	r1, r3
 8002962:	1b00      	subs	r0, r0, r4
 8002964:	eb61 0105 	sbc.w	r1, r1, r5
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	018b      	lsls	r3, r1, #6
 8002972:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002976:	0182      	lsls	r2, r0, #6
 8002978:	1a12      	subs	r2, r2, r0
 800297a:	eb63 0301 	sbc.w	r3, r3, r1
 800297e:	f04f 0000 	mov.w	r0, #0
 8002982:	f04f 0100 	mov.w	r1, #0
 8002986:	00d9      	lsls	r1, r3, #3
 8002988:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800298c:	00d0      	lsls	r0, r2, #3
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	1912      	adds	r2, r2, r4
 8002994:	eb45 0303 	adc.w	r3, r5, r3
 8002998:	f04f 0000 	mov.w	r0, #0
 800299c:	f04f 0100 	mov.w	r1, #0
 80029a0:	0299      	lsls	r1, r3, #10
 80029a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80029a6:	0290      	lsls	r0, r2, #10
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	f7fd fc2a 	bl	8000210 <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4613      	mov	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	0c1b      	lsrs	r3, r3, #16
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	3301      	adds	r3, #1
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	60bb      	str	r3, [r7, #8]
      break;
 80029de:	e002      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029e2:	60bb      	str	r3, [r7, #8]
      break;
 80029e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e6:	68bb      	ldr	r3, [r7, #8]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800
 80029f8:	00f42400 	.word	0x00f42400
 80029fc:	007a1200 	.word	0x007a1200

08002a00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	2000011c 	.word	0x2000011c

08002a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a1c:	f7ff fff0 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	0a9b      	lsrs	r3, r3, #10
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	4903      	ldr	r1, [pc, #12]	; (8002a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a2e:	5ccb      	ldrb	r3, [r1, r3]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	0800b708 	.word	0x0800b708

08002a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a44:	f7ff ffdc 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	0b5b      	lsrs	r3, r3, #13
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	4903      	ldr	r1, [pc, #12]	; (8002a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40023800 	.word	0x40023800
 8002a64:	0800b708 	.word	0x0800b708

08002a68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	220f      	movs	r2, #15
 8002a76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a78:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0203 	and.w	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a84:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	08db      	lsrs	r3, r3, #3
 8002aa2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002aaa:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <HAL_RCC_GetClockConfig+0x60>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 020f 	and.w	r2, r3, #15
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	601a      	str	r2, [r3, #0]
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40023c00 	.word	0x40023c00

08002acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d012      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002af4:	4b69      	ldr	r3, [pc, #420]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4a68      	ldr	r2, [pc, #416]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002afe:	6093      	str	r3, [r2, #8]
 8002b00:	4b66      	ldr	r3, [pc, #408]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b08:	4964      	ldr	r1, [pc, #400]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b16:	2301      	movs	r3, #1
 8002b18:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d017      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b26:	4b5d      	ldr	r3, [pc, #372]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b34:	4959      	ldr	r1, [pc, #356]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b44:	d101      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b52:	2301      	movs	r3, #1
 8002b54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d017      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b62:	4b4e      	ldr	r3, [pc, #312]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	494a      	ldr	r1, [pc, #296]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b80:	d101      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 808b 	beq.w	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	4b3a      	ldr	r3, [pc, #232]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	4a39      	ldr	r2, [pc, #228]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bba:	6413      	str	r3, [r2, #64]	; 0x40
 8002bbc:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bc8:	4b35      	ldr	r3, [pc, #212]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a34      	ldr	r2, [pc, #208]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd4:	f7fd fcba 	bl	800054c <HAL_GetTick>
 8002bd8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bdc:	f7fd fcb6 	bl	800054c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e357      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bee:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bfa:	4b28      	ldr	r3, [pc, #160]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c02:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d035      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d02e      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c18:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c20:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c22:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4a1d      	ldr	r2, [pc, #116]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c2e:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c32:	4a1a      	ldr	r2, [pc, #104]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c3a:	4a18      	ldr	r2, [pc, #96]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c40:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d114      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fd fc7e 	bl	800054c <HAL_GetTick>
 8002c50:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	e00a      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c54:	f7fd fc7a 	bl	800054c <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e319      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0ee      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c82:	d111      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c92:	400b      	ands	r3, r1
 8002c94:	4901      	ldr	r1, [pc, #4]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	0ffffcff 	.word	0x0ffffcff
 8002ca8:	4bb1      	ldr	r3, [pc, #708]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4ab0      	ldr	r2, [pc, #704]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cb2:	6093      	str	r3, [r2, #8]
 8002cb4:	4bae      	ldr	r3, [pc, #696]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc0:	49ab      	ldr	r1, [pc, #684]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d010      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cd2:	4ba7      	ldr	r3, [pc, #668]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd8:	4aa5      	ldr	r2, [pc, #660]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ce2:	4ba3      	ldr	r3, [pc, #652]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ce4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cec:	49a0      	ldr	r1, [pc, #640]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d00:	4b9b      	ldr	r3, [pc, #620]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d0e:	4998      	ldr	r1, [pc, #608]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d22:	4b93      	ldr	r3, [pc, #588]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d30:	498f      	ldr	r1, [pc, #572]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d44:	4b8a      	ldr	r3, [pc, #552]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d52:	4987      	ldr	r1, [pc, #540]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d66:	4b82      	ldr	r3, [pc, #520]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	497e      	ldr	r1, [pc, #504]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d88:	4b79      	ldr	r3, [pc, #484]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8e:	f023 0203 	bic.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	4976      	ldr	r1, [pc, #472]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002daa:	4b71      	ldr	r3, [pc, #452]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db0:	f023 020c 	bic.w	r2, r3, #12
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db8:	496d      	ldr	r1, [pc, #436]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dcc:	4b68      	ldr	r3, [pc, #416]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dda:	4965      	ldr	r1, [pc, #404]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dee:	4b60      	ldr	r3, [pc, #384]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfc:	495c      	ldr	r1, [pc, #368]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e10:	4b57      	ldr	r3, [pc, #348]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1e:	4954      	ldr	r1, [pc, #336]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e32:	4b4f      	ldr	r3, [pc, #316]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	494b      	ldr	r1, [pc, #300]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e54:	4b46      	ldr	r3, [pc, #280]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e62:	4943      	ldr	r1, [pc, #268]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e76:	4b3e      	ldr	r3, [pc, #248]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e84:	493a      	ldr	r1, [pc, #232]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e98:	4b35      	ldr	r3, [pc, #212]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ea6:	4932      	ldr	r1, [pc, #200]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d011      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002eba:	4b2d      	ldr	r3, [pc, #180]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec8:	4929      	ldr	r1, [pc, #164]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ed8:	d101      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002eea:	2301      	movs	r3, #1
 8002eec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002efa:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f08:	4919      	ldr	r1, [pc, #100]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00b      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f1c:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f2c:	4910      	ldr	r1, [pc, #64]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d006      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80d9 	beq.w	80030fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f48:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a08      	ldr	r2, [pc, #32]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f54:	f7fd fafa 	bl	800054c <HAL_GetTick>
 8002f58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f5a:	e00b      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f5c:	f7fd faf6 	bl	800054c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	; 0x64
 8002f68:	d904      	bls.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e197      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f74:	4b6c      	ldr	r3, [pc, #432]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1ed      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d021      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d11d      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f94:	4b64      	ldr	r3, [pc, #400]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f9a:	0c1b      	lsrs	r3, r3, #16
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fa2:	4b61      	ldr	r3, [pc, #388]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa8:	0e1b      	lsrs	r3, r3, #24
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	019a      	lsls	r2, r3, #6
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	041b      	lsls	r3, r3, #16
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	061b      	lsls	r3, r3, #24
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	071b      	lsls	r3, r3, #28
 8002fc8:	4957      	ldr	r1, [pc, #348]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d02e      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ffa:	d129      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ffc:	4b4a      	ldr	r3, [pc, #296]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003002:	0c1b      	lsrs	r3, r3, #16
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800300a:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800300c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003010:	0f1b      	lsrs	r3, r3, #28
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	019a      	lsls	r2, r3, #6
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	431a      	orrs	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	071b      	lsls	r3, r3, #28
 8003030:	493d      	ldr	r1, [pc, #244]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003038:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800303a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800303e:	f023 021f 	bic.w	r2, r3, #31
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	3b01      	subs	r3, #1
 8003048:	4937      	ldr	r1, [pc, #220]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01d      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800305c:	4b32      	ldr	r3, [pc, #200]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800305e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003062:	0e1b      	lsrs	r3, r3, #24
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800306a:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800306c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003070:	0f1b      	lsrs	r3, r3, #28
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	019a      	lsls	r2, r3, #6
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	041b      	lsls	r3, r3, #16
 8003084:	431a      	orrs	r2, r3
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	061b      	lsls	r3, r3, #24
 800308a:	431a      	orrs	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	071b      	lsls	r3, r3, #28
 8003090:	4925      	ldr	r1, [pc, #148]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d011      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	019a      	lsls	r2, r3, #6
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	041b      	lsls	r3, r3, #16
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	061b      	lsls	r3, r3, #24
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	071b      	lsls	r3, r3, #28
 80030c0:	4919      	ldr	r1, [pc, #100]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030c8:	4b17      	ldr	r3, [pc, #92]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a16      	ldr	r2, [pc, #88]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d4:	f7fd fa3a 	bl	800054c <HAL_GetTick>
 80030d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030dc:	f7fd fa36 	bl	800054c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0d7      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030ee:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	f040 80cd 	bne.w	800329c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003102:	4b09      	ldr	r3, [pc, #36]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a08      	ldr	r2, [pc, #32]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310e:	f7fd fa1d 	bl	800054c <HAL_GetTick>
 8003112:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003114:	e00a      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003116:	f7fd fa19 	bl	800054c <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b64      	cmp	r3, #100	; 0x64
 8003122:	d903      	bls.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e0ba      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003128:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800312c:	4b5e      	ldr	r3, [pc, #376]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003138:	d0ed      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d009      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003156:	2b00      	cmp	r3, #0
 8003158:	d02e      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d12a      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003162:	4b51      	ldr	r3, [pc, #324]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003170:	4b4d      	ldr	r3, [pc, #308]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	0f1b      	lsrs	r3, r3, #28
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	019a      	lsls	r2, r3, #6
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	041b      	lsls	r3, r3, #16
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	061b      	lsls	r3, r3, #24
 8003190:	431a      	orrs	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	071b      	lsls	r3, r3, #28
 8003196:	4944      	ldr	r1, [pc, #272]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800319e:	4b42      	ldr	r3, [pc, #264]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	3b01      	subs	r3, #1
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	493d      	ldr	r1, [pc, #244]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d022      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031cc:	d11d      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031ce:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	0e1b      	lsrs	r3, r3, #24
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031dc:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	0f1b      	lsrs	r3, r3, #28
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	019a      	lsls	r2, r3, #6
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	041b      	lsls	r3, r3, #16
 80031f6:	431a      	orrs	r2, r3
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	061b      	lsls	r3, r3, #24
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	071b      	lsls	r3, r3, #28
 8003202:	4929      	ldr	r1, [pc, #164]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d028      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321c:	0e1b      	lsrs	r3, r3, #24
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003224:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	0c1b      	lsrs	r3, r3, #16
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	019a      	lsls	r2, r3, #6
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	041b      	lsls	r3, r3, #16
 800323c:	431a      	orrs	r2, r3
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	061b      	lsls	r3, r3, #24
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	071b      	lsls	r3, r3, #28
 800324a:	4917      	ldr	r1, [pc, #92]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003252:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003258:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	4911      	ldr	r1, [pc, #68]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0e      	ldr	r2, [pc, #56]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800326e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003274:	f7fd f96a 	bl	800054c <HAL_GetTick>
 8003278:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800327c:	f7fd f966 	bl	800054c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e007      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800329a:	d1ef      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800

080032ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e09d      	b.n	80033fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d108      	bne.n	80032d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ce:	d009      	beq.n	80032e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	61da      	str	r2, [r3, #28]
 80032d6:	e005      	b.n	80032e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f007 f844 	bl	800a38c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003324:	d902      	bls.n	800332c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	e002      	b.n	8003332 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800332c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003330:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800333a:	d007      	beq.n	800334c <HAL_SPI_Init+0xa0>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003344:	d002      	beq.n	800334c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	ea42 0103 	orr.w	r1, r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	0c1b      	lsrs	r3, r3, #16
 80033a8:	f003 0204 	and.w	r2, r3, #4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033c8:	ea42 0103 	orr.w	r1, r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69da      	ldr	r2, [r3, #28]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e049      	b.n	80034a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d106      	bne.n	800342e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f841 	bl	80034b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2202      	movs	r2, #2
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3304      	adds	r3, #4
 800343e:	4619      	mov	r1, r3
 8003440:	4610      	mov	r0, r2
 8003442:	f000 f9ff 	bl	8003844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d001      	beq.n	80034dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e054      	b.n	8003586 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a26      	ldr	r2, [pc, #152]	; (8003594 <HAL_TIM_Base_Start_IT+0xd0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d022      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003506:	d01d      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a22      	ldr	r2, [pc, #136]	; (8003598 <HAL_TIM_Base_Start_IT+0xd4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d018      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a21      	ldr	r2, [pc, #132]	; (800359c <HAL_TIM_Base_Start_IT+0xd8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d013      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1f      	ldr	r2, [pc, #124]	; (80035a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00e      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1e      	ldr	r2, [pc, #120]	; (80035a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d009      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1c      	ldr	r2, [pc, #112]	; (80035a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d004      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1b      	ldr	r2, [pc, #108]	; (80035ac <HAL_TIM_Base_Start_IT+0xe8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d115      	bne.n	8003570 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <HAL_TIM_Base_Start_IT+0xec>)
 800354c:	4013      	ands	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b06      	cmp	r3, #6
 8003554:	d015      	beq.n	8003582 <HAL_TIM_Base_Start_IT+0xbe>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355c:	d011      	beq.n	8003582 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356e:	e008      	b.n	8003582 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	e000      	b.n	8003584 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003582:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40010000 	.word	0x40010000
 8003598:	40000400 	.word	0x40000400
 800359c:	40000800 	.word	0x40000800
 80035a0:	40000c00 	.word	0x40000c00
 80035a4:	40010400 	.word	0x40010400
 80035a8:	40014000 	.word	0x40014000
 80035ac:	40001800 	.word	0x40001800
 80035b0:	00010007 	.word	0x00010007

080035b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d122      	bne.n	8003610 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d11b      	bne.n	8003610 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0202 	mvn.w	r2, #2
 80035e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f905 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 80035fc:	e005      	b.n	800360a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f8f7 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f908 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b04      	cmp	r3, #4
 800361c:	d122      	bne.n	8003664 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b04      	cmp	r3, #4
 800362a:	d11b      	bne.n	8003664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0204 	mvn.w	r2, #4
 8003634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2202      	movs	r2, #2
 800363a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f8db 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 8003650:	e005      	b.n	800365e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f8cd 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f8de 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b08      	cmp	r3, #8
 8003670:	d122      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b08      	cmp	r3, #8
 800367e:	d11b      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0208 	mvn.w	r2, #8
 8003688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2204      	movs	r2, #4
 800368e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f8b1 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 80036a4:	e005      	b.n	80036b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f8a3 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f8b4 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b10      	cmp	r3, #16
 80036c4:	d122      	bne.n	800370c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b10      	cmp	r3, #16
 80036d2:	d11b      	bne.n	800370c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0210 	mvn.w	r2, #16
 80036dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2208      	movs	r2, #8
 80036e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f887 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f879 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f88a 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b01      	cmp	r3, #1
 8003718:	d10e      	bne.n	8003738 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b01      	cmp	r3, #1
 8003726:	d107      	bne.n	8003738 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0201 	mvn.w	r2, #1
 8003730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f006 fda6 	bl	800a284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003742:	2b80      	cmp	r3, #128	; 0x80
 8003744:	d10e      	bne.n	8003764 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003750:	2b80      	cmp	r3, #128	; 0x80
 8003752:	d107      	bne.n	8003764 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800375c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f91a 	bl	8003998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003772:	d10e      	bne.n	8003792 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	2b80      	cmp	r3, #128	; 0x80
 8003780:	d107      	bne.n	8003792 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800378a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f90d 	bl	80039ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d10e      	bne.n	80037be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b40      	cmp	r3, #64	; 0x40
 80037ac:	d107      	bne.n	80037be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f838 	bl	800382e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d10e      	bne.n	80037ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d107      	bne.n	80037ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f06f 0220 	mvn.w	r2, #32
 80037e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f8cd 	bl	8003984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a40      	ldr	r2, [pc, #256]	; (8003958 <TIM_Base_SetConfig+0x114>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003862:	d00f      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a3d      	ldr	r2, [pc, #244]	; (800395c <TIM_Base_SetConfig+0x118>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00b      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a3c      	ldr	r2, [pc, #240]	; (8003960 <TIM_Base_SetConfig+0x11c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d007      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a3b      	ldr	r2, [pc, #236]	; (8003964 <TIM_Base_SetConfig+0x120>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a3a      	ldr	r2, [pc, #232]	; (8003968 <TIM_Base_SetConfig+0x124>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d108      	bne.n	8003896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a2f      	ldr	r2, [pc, #188]	; (8003958 <TIM_Base_SetConfig+0x114>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a4:	d027      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2c      	ldr	r2, [pc, #176]	; (800395c <TIM_Base_SetConfig+0x118>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d023      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a2b      	ldr	r2, [pc, #172]	; (8003960 <TIM_Base_SetConfig+0x11c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01f      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a2a      	ldr	r2, [pc, #168]	; (8003964 <TIM_Base_SetConfig+0x120>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a29      	ldr	r2, [pc, #164]	; (8003968 <TIM_Base_SetConfig+0x124>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d017      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a28      	ldr	r2, [pc, #160]	; (800396c <TIM_Base_SetConfig+0x128>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a27      	ldr	r2, [pc, #156]	; (8003970 <TIM_Base_SetConfig+0x12c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00f      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a26      	ldr	r2, [pc, #152]	; (8003974 <TIM_Base_SetConfig+0x130>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a25      	ldr	r2, [pc, #148]	; (8003978 <TIM_Base_SetConfig+0x134>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a24      	ldr	r2, [pc, #144]	; (800397c <TIM_Base_SetConfig+0x138>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d003      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a23      	ldr	r2, [pc, #140]	; (8003980 <TIM_Base_SetConfig+0x13c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d108      	bne.n	8003908 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <TIM_Base_SetConfig+0x114>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <TIM_Base_SetConfig+0xf8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a0c      	ldr	r2, [pc, #48]	; (8003968 <TIM_Base_SetConfig+0x124>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d103      	bne.n	8003944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	615a      	str	r2, [r3, #20]
}
 800394a:	bf00      	nop
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40010000 	.word	0x40010000
 800395c:	40000400 	.word	0x40000400
 8003960:	40000800 	.word	0x40000800
 8003964:	40000c00 	.word	0x40000c00
 8003968:	40010400 	.word	0x40010400
 800396c:	40014000 	.word	0x40014000
 8003970:	40014400 	.word	0x40014400
 8003974:	40014800 	.word	0x40014800
 8003978:	40001800 	.word	0x40001800
 800397c:	40001c00 	.word	0x40001c00
 8003980:	40002000 	.word	0x40002000

08003984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e040      	b.n	8003a54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f006 fd34 	bl	800a450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2224      	movs	r2, #36	; 0x24
 80039ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0201 	bic.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f82c 	bl	8003a5c <UART_SetConfig>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e022      	b.n	8003a54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fa82 	bl	8003f20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fb09 	bl	8004064 <UART_CheckIdleState>
 8003a52:	4603      	mov	r3, r0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4ba7      	ldr	r3, [pc, #668]	; (8003d24 <UART_SetConfig+0x2c8>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6812      	ldr	r2, [r2, #0]
 8003a8e:	6979      	ldr	r1, [r7, #20]
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a95      	ldr	r2, [pc, #596]	; (8003d28 <UART_SetConfig+0x2cc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d120      	bne.n	8003b1a <UART_SetConfig+0xbe>
 8003ad8:	4b94      	ldr	r3, [pc, #592]	; (8003d2c <UART_SetConfig+0x2d0>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d816      	bhi.n	8003b14 <UART_SetConfig+0xb8>
 8003ae6:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <UART_SetConfig+0x90>)
 8003ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aec:	08003afd 	.word	0x08003afd
 8003af0:	08003b09 	.word	0x08003b09
 8003af4:	08003b03 	.word	0x08003b03
 8003af8:	08003b0f 	.word	0x08003b0f
 8003afc:	2301      	movs	r3, #1
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e14f      	b.n	8003da2 <UART_SetConfig+0x346>
 8003b02:	2302      	movs	r3, #2
 8003b04:	77fb      	strb	r3, [r7, #31]
 8003b06:	e14c      	b.n	8003da2 <UART_SetConfig+0x346>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	77fb      	strb	r3, [r7, #31]
 8003b0c:	e149      	b.n	8003da2 <UART_SetConfig+0x346>
 8003b0e:	2308      	movs	r3, #8
 8003b10:	77fb      	strb	r3, [r7, #31]
 8003b12:	e146      	b.n	8003da2 <UART_SetConfig+0x346>
 8003b14:	2310      	movs	r3, #16
 8003b16:	77fb      	strb	r3, [r7, #31]
 8003b18:	e143      	b.n	8003da2 <UART_SetConfig+0x346>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a84      	ldr	r2, [pc, #528]	; (8003d30 <UART_SetConfig+0x2d4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d132      	bne.n	8003b8a <UART_SetConfig+0x12e>
 8003b24:	4b81      	ldr	r3, [pc, #516]	; (8003d2c <UART_SetConfig+0x2d0>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	d828      	bhi.n	8003b84 <UART_SetConfig+0x128>
 8003b32:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <UART_SetConfig+0xdc>)
 8003b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b38:	08003b6d 	.word	0x08003b6d
 8003b3c:	08003b85 	.word	0x08003b85
 8003b40:	08003b85 	.word	0x08003b85
 8003b44:	08003b85 	.word	0x08003b85
 8003b48:	08003b79 	.word	0x08003b79
 8003b4c:	08003b85 	.word	0x08003b85
 8003b50:	08003b85 	.word	0x08003b85
 8003b54:	08003b85 	.word	0x08003b85
 8003b58:	08003b73 	.word	0x08003b73
 8003b5c:	08003b85 	.word	0x08003b85
 8003b60:	08003b85 	.word	0x08003b85
 8003b64:	08003b85 	.word	0x08003b85
 8003b68:	08003b7f 	.word	0x08003b7f
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	77fb      	strb	r3, [r7, #31]
 8003b70:	e117      	b.n	8003da2 <UART_SetConfig+0x346>
 8003b72:	2302      	movs	r3, #2
 8003b74:	77fb      	strb	r3, [r7, #31]
 8003b76:	e114      	b.n	8003da2 <UART_SetConfig+0x346>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	77fb      	strb	r3, [r7, #31]
 8003b7c:	e111      	b.n	8003da2 <UART_SetConfig+0x346>
 8003b7e:	2308      	movs	r3, #8
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	e10e      	b.n	8003da2 <UART_SetConfig+0x346>
 8003b84:	2310      	movs	r3, #16
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	e10b      	b.n	8003da2 <UART_SetConfig+0x346>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a69      	ldr	r2, [pc, #420]	; (8003d34 <UART_SetConfig+0x2d8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d120      	bne.n	8003bd6 <UART_SetConfig+0x17a>
 8003b94:	4b65      	ldr	r3, [pc, #404]	; (8003d2c <UART_SetConfig+0x2d0>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b9e:	2b30      	cmp	r3, #48	; 0x30
 8003ba0:	d013      	beq.n	8003bca <UART_SetConfig+0x16e>
 8003ba2:	2b30      	cmp	r3, #48	; 0x30
 8003ba4:	d814      	bhi.n	8003bd0 <UART_SetConfig+0x174>
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d009      	beq.n	8003bbe <UART_SetConfig+0x162>
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d810      	bhi.n	8003bd0 <UART_SetConfig+0x174>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <UART_SetConfig+0x15c>
 8003bb2:	2b10      	cmp	r3, #16
 8003bb4:	d006      	beq.n	8003bc4 <UART_SetConfig+0x168>
 8003bb6:	e00b      	b.n	8003bd0 <UART_SetConfig+0x174>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	e0f1      	b.n	8003da2 <UART_SetConfig+0x346>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	77fb      	strb	r3, [r7, #31]
 8003bc2:	e0ee      	b.n	8003da2 <UART_SetConfig+0x346>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	77fb      	strb	r3, [r7, #31]
 8003bc8:	e0eb      	b.n	8003da2 <UART_SetConfig+0x346>
 8003bca:	2308      	movs	r3, #8
 8003bcc:	77fb      	strb	r3, [r7, #31]
 8003bce:	e0e8      	b.n	8003da2 <UART_SetConfig+0x346>
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	77fb      	strb	r3, [r7, #31]
 8003bd4:	e0e5      	b.n	8003da2 <UART_SetConfig+0x346>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a57      	ldr	r2, [pc, #348]	; (8003d38 <UART_SetConfig+0x2dc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d120      	bne.n	8003c22 <UART_SetConfig+0x1c6>
 8003be0:	4b52      	ldr	r3, [pc, #328]	; (8003d2c <UART_SetConfig+0x2d0>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bea:	2bc0      	cmp	r3, #192	; 0xc0
 8003bec:	d013      	beq.n	8003c16 <UART_SetConfig+0x1ba>
 8003bee:	2bc0      	cmp	r3, #192	; 0xc0
 8003bf0:	d814      	bhi.n	8003c1c <UART_SetConfig+0x1c0>
 8003bf2:	2b80      	cmp	r3, #128	; 0x80
 8003bf4:	d009      	beq.n	8003c0a <UART_SetConfig+0x1ae>
 8003bf6:	2b80      	cmp	r3, #128	; 0x80
 8003bf8:	d810      	bhi.n	8003c1c <UART_SetConfig+0x1c0>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <UART_SetConfig+0x1a8>
 8003bfe:	2b40      	cmp	r3, #64	; 0x40
 8003c00:	d006      	beq.n	8003c10 <UART_SetConfig+0x1b4>
 8003c02:	e00b      	b.n	8003c1c <UART_SetConfig+0x1c0>
 8003c04:	2300      	movs	r3, #0
 8003c06:	77fb      	strb	r3, [r7, #31]
 8003c08:	e0cb      	b.n	8003da2 <UART_SetConfig+0x346>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	77fb      	strb	r3, [r7, #31]
 8003c0e:	e0c8      	b.n	8003da2 <UART_SetConfig+0x346>
 8003c10:	2304      	movs	r3, #4
 8003c12:	77fb      	strb	r3, [r7, #31]
 8003c14:	e0c5      	b.n	8003da2 <UART_SetConfig+0x346>
 8003c16:	2308      	movs	r3, #8
 8003c18:	77fb      	strb	r3, [r7, #31]
 8003c1a:	e0c2      	b.n	8003da2 <UART_SetConfig+0x346>
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	77fb      	strb	r3, [r7, #31]
 8003c20:	e0bf      	b.n	8003da2 <UART_SetConfig+0x346>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a45      	ldr	r2, [pc, #276]	; (8003d3c <UART_SetConfig+0x2e0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d125      	bne.n	8003c78 <UART_SetConfig+0x21c>
 8003c2c:	4b3f      	ldr	r3, [pc, #252]	; (8003d2c <UART_SetConfig+0x2d0>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c3a:	d017      	beq.n	8003c6c <UART_SetConfig+0x210>
 8003c3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c40:	d817      	bhi.n	8003c72 <UART_SetConfig+0x216>
 8003c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c46:	d00b      	beq.n	8003c60 <UART_SetConfig+0x204>
 8003c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c4c:	d811      	bhi.n	8003c72 <UART_SetConfig+0x216>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <UART_SetConfig+0x1fe>
 8003c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c56:	d006      	beq.n	8003c66 <UART_SetConfig+0x20a>
 8003c58:	e00b      	b.n	8003c72 <UART_SetConfig+0x216>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	77fb      	strb	r3, [r7, #31]
 8003c5e:	e0a0      	b.n	8003da2 <UART_SetConfig+0x346>
 8003c60:	2302      	movs	r3, #2
 8003c62:	77fb      	strb	r3, [r7, #31]
 8003c64:	e09d      	b.n	8003da2 <UART_SetConfig+0x346>
 8003c66:	2304      	movs	r3, #4
 8003c68:	77fb      	strb	r3, [r7, #31]
 8003c6a:	e09a      	b.n	8003da2 <UART_SetConfig+0x346>
 8003c6c:	2308      	movs	r3, #8
 8003c6e:	77fb      	strb	r3, [r7, #31]
 8003c70:	e097      	b.n	8003da2 <UART_SetConfig+0x346>
 8003c72:	2310      	movs	r3, #16
 8003c74:	77fb      	strb	r3, [r7, #31]
 8003c76:	e094      	b.n	8003da2 <UART_SetConfig+0x346>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a30      	ldr	r2, [pc, #192]	; (8003d40 <UART_SetConfig+0x2e4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d125      	bne.n	8003cce <UART_SetConfig+0x272>
 8003c82:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <UART_SetConfig+0x2d0>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c90:	d017      	beq.n	8003cc2 <UART_SetConfig+0x266>
 8003c92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c96:	d817      	bhi.n	8003cc8 <UART_SetConfig+0x26c>
 8003c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c9c:	d00b      	beq.n	8003cb6 <UART_SetConfig+0x25a>
 8003c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca2:	d811      	bhi.n	8003cc8 <UART_SetConfig+0x26c>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <UART_SetConfig+0x254>
 8003ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cac:	d006      	beq.n	8003cbc <UART_SetConfig+0x260>
 8003cae:	e00b      	b.n	8003cc8 <UART_SetConfig+0x26c>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	77fb      	strb	r3, [r7, #31]
 8003cb4:	e075      	b.n	8003da2 <UART_SetConfig+0x346>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	77fb      	strb	r3, [r7, #31]
 8003cba:	e072      	b.n	8003da2 <UART_SetConfig+0x346>
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	77fb      	strb	r3, [r7, #31]
 8003cc0:	e06f      	b.n	8003da2 <UART_SetConfig+0x346>
 8003cc2:	2308      	movs	r3, #8
 8003cc4:	77fb      	strb	r3, [r7, #31]
 8003cc6:	e06c      	b.n	8003da2 <UART_SetConfig+0x346>
 8003cc8:	2310      	movs	r3, #16
 8003cca:	77fb      	strb	r3, [r7, #31]
 8003ccc:	e069      	b.n	8003da2 <UART_SetConfig+0x346>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <UART_SetConfig+0x2e8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d137      	bne.n	8003d48 <UART_SetConfig+0x2ec>
 8003cd8:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <UART_SetConfig+0x2d0>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cde:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003ce2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ce6:	d017      	beq.n	8003d18 <UART_SetConfig+0x2bc>
 8003ce8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cec:	d817      	bhi.n	8003d1e <UART_SetConfig+0x2c2>
 8003cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf2:	d00b      	beq.n	8003d0c <UART_SetConfig+0x2b0>
 8003cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf8:	d811      	bhi.n	8003d1e <UART_SetConfig+0x2c2>
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <UART_SetConfig+0x2aa>
 8003cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d02:	d006      	beq.n	8003d12 <UART_SetConfig+0x2b6>
 8003d04:	e00b      	b.n	8003d1e <UART_SetConfig+0x2c2>
 8003d06:	2300      	movs	r3, #0
 8003d08:	77fb      	strb	r3, [r7, #31]
 8003d0a:	e04a      	b.n	8003da2 <UART_SetConfig+0x346>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	77fb      	strb	r3, [r7, #31]
 8003d10:	e047      	b.n	8003da2 <UART_SetConfig+0x346>
 8003d12:	2304      	movs	r3, #4
 8003d14:	77fb      	strb	r3, [r7, #31]
 8003d16:	e044      	b.n	8003da2 <UART_SetConfig+0x346>
 8003d18:	2308      	movs	r3, #8
 8003d1a:	77fb      	strb	r3, [r7, #31]
 8003d1c:	e041      	b.n	8003da2 <UART_SetConfig+0x346>
 8003d1e:	2310      	movs	r3, #16
 8003d20:	77fb      	strb	r3, [r7, #31]
 8003d22:	e03e      	b.n	8003da2 <UART_SetConfig+0x346>
 8003d24:	efff69f3 	.word	0xefff69f3
 8003d28:	40011000 	.word	0x40011000
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40004400 	.word	0x40004400
 8003d34:	40004800 	.word	0x40004800
 8003d38:	40004c00 	.word	0x40004c00
 8003d3c:	40005000 	.word	0x40005000
 8003d40:	40011400 	.word	0x40011400
 8003d44:	40007800 	.word	0x40007800
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a71      	ldr	r2, [pc, #452]	; (8003f14 <UART_SetConfig+0x4b8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d125      	bne.n	8003d9e <UART_SetConfig+0x342>
 8003d52:	4b71      	ldr	r3, [pc, #452]	; (8003f18 <UART_SetConfig+0x4bc>)
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d60:	d017      	beq.n	8003d92 <UART_SetConfig+0x336>
 8003d62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d66:	d817      	bhi.n	8003d98 <UART_SetConfig+0x33c>
 8003d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d6c:	d00b      	beq.n	8003d86 <UART_SetConfig+0x32a>
 8003d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d72:	d811      	bhi.n	8003d98 <UART_SetConfig+0x33c>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <UART_SetConfig+0x324>
 8003d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d7c:	d006      	beq.n	8003d8c <UART_SetConfig+0x330>
 8003d7e:	e00b      	b.n	8003d98 <UART_SetConfig+0x33c>
 8003d80:	2300      	movs	r3, #0
 8003d82:	77fb      	strb	r3, [r7, #31]
 8003d84:	e00d      	b.n	8003da2 <UART_SetConfig+0x346>
 8003d86:	2302      	movs	r3, #2
 8003d88:	77fb      	strb	r3, [r7, #31]
 8003d8a:	e00a      	b.n	8003da2 <UART_SetConfig+0x346>
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	77fb      	strb	r3, [r7, #31]
 8003d90:	e007      	b.n	8003da2 <UART_SetConfig+0x346>
 8003d92:	2308      	movs	r3, #8
 8003d94:	77fb      	strb	r3, [r7, #31]
 8003d96:	e004      	b.n	8003da2 <UART_SetConfig+0x346>
 8003d98:	2310      	movs	r3, #16
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e001      	b.n	8003da2 <UART_SetConfig+0x346>
 8003d9e:	2310      	movs	r3, #16
 8003da0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003daa:	d15b      	bne.n	8003e64 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003dac:	7ffb      	ldrb	r3, [r7, #31]
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d827      	bhi.n	8003e02 <UART_SetConfig+0x3a6>
 8003db2:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <UART_SetConfig+0x35c>)
 8003db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db8:	08003ddd 	.word	0x08003ddd
 8003dbc:	08003de5 	.word	0x08003de5
 8003dc0:	08003ded 	.word	0x08003ded
 8003dc4:	08003e03 	.word	0x08003e03
 8003dc8:	08003df3 	.word	0x08003df3
 8003dcc:	08003e03 	.word	0x08003e03
 8003dd0:	08003e03 	.word	0x08003e03
 8003dd4:	08003e03 	.word	0x08003e03
 8003dd8:	08003dfb 	.word	0x08003dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ddc:	f7fe fe1c 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8003de0:	61b8      	str	r0, [r7, #24]
        break;
 8003de2:	e013      	b.n	8003e0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003de4:	f7fe fe2c 	bl	8002a40 <HAL_RCC_GetPCLK2Freq>
 8003de8:	61b8      	str	r0, [r7, #24]
        break;
 8003dea:	e00f      	b.n	8003e0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dec:	4b4b      	ldr	r3, [pc, #300]	; (8003f1c <UART_SetConfig+0x4c0>)
 8003dee:	61bb      	str	r3, [r7, #24]
        break;
 8003df0:	e00c      	b.n	8003e0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df2:	f7fe fd23 	bl	800283c <HAL_RCC_GetSysClockFreq>
 8003df6:	61b8      	str	r0, [r7, #24]
        break;
 8003df8:	e008      	b.n	8003e0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dfe:	61bb      	str	r3, [r7, #24]
        break;
 8003e00:	e004      	b.n	8003e0c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	77bb      	strb	r3, [r7, #30]
        break;
 8003e0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d074      	beq.n	8003efc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	005a      	lsls	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	085b      	lsrs	r3, r3, #1
 8003e1c:	441a      	add	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b0f      	cmp	r3, #15
 8003e2e:	d916      	bls.n	8003e5e <UART_SetConfig+0x402>
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e36:	d212      	bcs.n	8003e5e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f023 030f 	bic.w	r3, r3, #15
 8003e40:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	89fb      	ldrh	r3, [r7, #14]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	89fa      	ldrh	r2, [r7, #14]
 8003e5a:	60da      	str	r2, [r3, #12]
 8003e5c:	e04e      	b.n	8003efc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	77bb      	strb	r3, [r7, #30]
 8003e62:	e04b      	b.n	8003efc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e64:	7ffb      	ldrb	r3, [r7, #31]
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d827      	bhi.n	8003eba <UART_SetConfig+0x45e>
 8003e6a:	a201      	add	r2, pc, #4	; (adr r2, 8003e70 <UART_SetConfig+0x414>)
 8003e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e70:	08003e95 	.word	0x08003e95
 8003e74:	08003e9d 	.word	0x08003e9d
 8003e78:	08003ea5 	.word	0x08003ea5
 8003e7c:	08003ebb 	.word	0x08003ebb
 8003e80:	08003eab 	.word	0x08003eab
 8003e84:	08003ebb 	.word	0x08003ebb
 8003e88:	08003ebb 	.word	0x08003ebb
 8003e8c:	08003ebb 	.word	0x08003ebb
 8003e90:	08003eb3 	.word	0x08003eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e94:	f7fe fdc0 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8003e98:	61b8      	str	r0, [r7, #24]
        break;
 8003e9a:	e013      	b.n	8003ec4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e9c:	f7fe fdd0 	bl	8002a40 <HAL_RCC_GetPCLK2Freq>
 8003ea0:	61b8      	str	r0, [r7, #24]
        break;
 8003ea2:	e00f      	b.n	8003ec4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea4:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <UART_SetConfig+0x4c0>)
 8003ea6:	61bb      	str	r3, [r7, #24]
        break;
 8003ea8:	e00c      	b.n	8003ec4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eaa:	f7fe fcc7 	bl	800283c <HAL_RCC_GetSysClockFreq>
 8003eae:	61b8      	str	r0, [r7, #24]
        break;
 8003eb0:	e008      	b.n	8003ec4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb6:	61bb      	str	r3, [r7, #24]
        break;
 8003eb8:	e004      	b.n	8003ec4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ec2:	bf00      	nop
    }

    if (pclk != 0U)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d018      	beq.n	8003efc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	085a      	lsrs	r2, r3, #1
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	441a      	add	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	2b0f      	cmp	r3, #15
 8003ee4:	d908      	bls.n	8003ef8 <UART_SetConfig+0x49c>
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eec:	d204      	bcs.n	8003ef8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	60da      	str	r2, [r3, #12]
 8003ef6:	e001      	b.n	8003efc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f08:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3720      	adds	r7, #32
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	40007c00 	.word	0x40007c00
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	00f42400 	.word	0x00f42400

08003f20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01a      	beq.n	8004036 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800401e:	d10a      	bne.n	8004036 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	605a      	str	r2, [r3, #4]
  }
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af02      	add	r7, sp, #8
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004074:	f7fc fa6a 	bl	800054c <HAL_GetTick>
 8004078:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b08      	cmp	r3, #8
 8004086:	d10e      	bne.n	80040a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004088:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f817 	bl	80040ca <UART_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e00d      	b.n	80040c2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2220      	movs	r2, #32
 80040aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	603b      	str	r3, [r7, #0]
 80040d6:	4613      	mov	r3, r2
 80040d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040da:	e05e      	b.n	800419a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e2:	d05a      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e4:	f7fc fa32 	bl	800054c <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d302      	bcc.n	80040fa <UART_WaitOnFlagUntilTimeout+0x30>
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d11b      	bne.n	8004132 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004108:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0201 	bic.w	r2, r2, #1
 8004118:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2220      	movs	r2, #32
 800411e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e043      	b.n	80041ba <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d02c      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800414e:	d124      	bne.n	800419a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004158:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004168:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0201 	bic.w	r2, r2, #1
 8004178:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2220      	movs	r2, #32
 800417e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e00f      	b.n	80041ba <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4013      	ands	r3, r2
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	bf0c      	ite	eq
 80041aa:	2301      	moveq	r3, #1
 80041ac:	2300      	movne	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d091      	beq.n	80040dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041c4:	b084      	sub	sp, #16
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	f107 001c 	add.w	r0, r7, #28
 80041d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d120      	bne.n	800421e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	4b20      	ldr	r3, [pc, #128]	; (8004270 <USB_CoreInit+0xac>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004202:	2b01      	cmp	r3, #1
 8004204:	d105      	bne.n	8004212 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f001 fad6 	bl	80057c4 <USB_CoreReset>
 8004218:	4603      	mov	r3, r0
 800421a:	73fb      	strb	r3, [r7, #15]
 800421c:	e010      	b.n	8004240 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f001 faca 	bl	80057c4 <USB_CoreReset>
 8004230:	4603      	mov	r3, r0
 8004232:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	2b01      	cmp	r3, #1
 8004244:	d10b      	bne.n	800425e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f043 0206 	orr.w	r2, r3, #6
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f043 0220 	orr.w	r2, r3, #32
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800425e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800426a:	b004      	add	sp, #16
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	ffbdffbf 	.word	0xffbdffbf

08004274 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	4613      	mov	r3, r2
 8004280:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d165      	bne.n	8004354 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4a41      	ldr	r2, [pc, #260]	; (8004390 <USB_SetTurnaroundTime+0x11c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d906      	bls.n	800429e <USB_SetTurnaroundTime+0x2a>
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4a40      	ldr	r2, [pc, #256]	; (8004394 <USB_SetTurnaroundTime+0x120>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d202      	bcs.n	800429e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004298:	230f      	movs	r3, #15
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	e062      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	4a3c      	ldr	r2, [pc, #240]	; (8004394 <USB_SetTurnaroundTime+0x120>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d306      	bcc.n	80042b4 <USB_SetTurnaroundTime+0x40>
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4a3b      	ldr	r2, [pc, #236]	; (8004398 <USB_SetTurnaroundTime+0x124>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d202      	bcs.n	80042b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80042ae:	230e      	movs	r3, #14
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	e057      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4a38      	ldr	r2, [pc, #224]	; (8004398 <USB_SetTurnaroundTime+0x124>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d306      	bcc.n	80042ca <USB_SetTurnaroundTime+0x56>
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4a37      	ldr	r2, [pc, #220]	; (800439c <USB_SetTurnaroundTime+0x128>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d202      	bcs.n	80042ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80042c4:	230d      	movs	r3, #13
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	e04c      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	4a33      	ldr	r2, [pc, #204]	; (800439c <USB_SetTurnaroundTime+0x128>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d306      	bcc.n	80042e0 <USB_SetTurnaroundTime+0x6c>
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4a32      	ldr	r2, [pc, #200]	; (80043a0 <USB_SetTurnaroundTime+0x12c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d802      	bhi.n	80042e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80042da:	230c      	movs	r3, #12
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	e041      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4a2f      	ldr	r2, [pc, #188]	; (80043a0 <USB_SetTurnaroundTime+0x12c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d906      	bls.n	80042f6 <USB_SetTurnaroundTime+0x82>
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4a2e      	ldr	r2, [pc, #184]	; (80043a4 <USB_SetTurnaroundTime+0x130>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d802      	bhi.n	80042f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80042f0:	230b      	movs	r3, #11
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	e036      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	4a2a      	ldr	r2, [pc, #168]	; (80043a4 <USB_SetTurnaroundTime+0x130>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d906      	bls.n	800430c <USB_SetTurnaroundTime+0x98>
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4a29      	ldr	r2, [pc, #164]	; (80043a8 <USB_SetTurnaroundTime+0x134>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d802      	bhi.n	800430c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004306:	230a      	movs	r3, #10
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	e02b      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4a26      	ldr	r2, [pc, #152]	; (80043a8 <USB_SetTurnaroundTime+0x134>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d906      	bls.n	8004322 <USB_SetTurnaroundTime+0xae>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4a25      	ldr	r2, [pc, #148]	; (80043ac <USB_SetTurnaroundTime+0x138>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d202      	bcs.n	8004322 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800431c:	2309      	movs	r3, #9
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	e020      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4a21      	ldr	r2, [pc, #132]	; (80043ac <USB_SetTurnaroundTime+0x138>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d306      	bcc.n	8004338 <USB_SetTurnaroundTime+0xc4>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4a20      	ldr	r2, [pc, #128]	; (80043b0 <USB_SetTurnaroundTime+0x13c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d802      	bhi.n	8004338 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004332:	2308      	movs	r3, #8
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	e015      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <USB_SetTurnaroundTime+0x13c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d906      	bls.n	800434e <USB_SetTurnaroundTime+0xda>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4a1c      	ldr	r2, [pc, #112]	; (80043b4 <USB_SetTurnaroundTime+0x140>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d202      	bcs.n	800434e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004348:	2307      	movs	r3, #7
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	e00a      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800434e:	2306      	movs	r3, #6
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	e007      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004354:	79fb      	ldrb	r3, [r7, #7]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d102      	bne.n	8004360 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800435a:	2309      	movs	r3, #9
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	e001      	b.n	8004364 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004360:	2309      	movs	r3, #9
 8004362:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	029b      	lsls	r3, r3, #10
 8004378:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800437c:	431a      	orrs	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	371c      	adds	r7, #28
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	00d8acbf 	.word	0x00d8acbf
 8004394:	00e4e1c0 	.word	0x00e4e1c0
 8004398:	00f42400 	.word	0x00f42400
 800439c:	01067380 	.word	0x01067380
 80043a0:	011a499f 	.word	0x011a499f
 80043a4:	01312cff 	.word	0x01312cff
 80043a8:	014ca43f 	.word	0x014ca43f
 80043ac:	016e3600 	.word	0x016e3600
 80043b0:	01a6ab1f 	.word	0x01a6ab1f
 80043b4:	01e84800 	.word	0x01e84800

080043b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f043 0201 	orr.w	r2, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f023 0201 	bic.w	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d106      	bne.n	8004428 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	60da      	str	r2, [r3, #12]
 8004426:	e00b      	b.n	8004440 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	60da      	str	r2, [r3, #12]
 800443a:	e001      	b.n	8004440 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e003      	b.n	8004448 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004440:	2032      	movs	r0, #50	; 0x32
 8004442:	f7fc f88f 	bl	8000564 <HAL_Delay>

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004450:	b084      	sub	sp, #16
 8004452:	b580      	push	{r7, lr}
 8004454:	b086      	sub	sp, #24
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800445e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800446a:	2300      	movs	r3, #0
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	e009      	b.n	8004484 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	3340      	adds	r3, #64	; 0x40
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	2200      	movs	r2, #0
 800447c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	3301      	adds	r3, #1
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	2b0e      	cmp	r3, #14
 8004488:	d9f2      	bls.n	8004470 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800448a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800448c:	2b00      	cmp	r3, #0
 800448e:	d11c      	bne.n	80044ca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800449e:	f043 0302 	orr.w	r3, r3, #2
 80044a2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	e005      	b.n	80044d6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044dc:	461a      	mov	r2, r3
 80044de:	2300      	movs	r3, #0
 80044e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e8:	4619      	mov	r1, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f0:	461a      	mov	r2, r3
 80044f2:	680b      	ldr	r3, [r1, #0]
 80044f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d10c      	bne.n	8004516 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d104      	bne.n	800450c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004502:	2100      	movs	r1, #0
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f959 	bl	80047bc <USB_SetDevSpeed>
 800450a:	e018      	b.n	800453e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800450c:	2101      	movs	r1, #1
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f954 	bl	80047bc <USB_SetDevSpeed>
 8004514:	e013      	b.n	800453e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004518:	2b03      	cmp	r3, #3
 800451a:	d10c      	bne.n	8004536 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451e:	2b00      	cmp	r3, #0
 8004520:	d104      	bne.n	800452c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004522:	2100      	movs	r1, #0
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f949 	bl	80047bc <USB_SetDevSpeed>
 800452a:	e008      	b.n	800453e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800452c:	2101      	movs	r1, #1
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f944 	bl	80047bc <USB_SetDevSpeed>
 8004534:	e003      	b.n	800453e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004536:	2103      	movs	r1, #3
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f93f 	bl	80047bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800453e:	2110      	movs	r1, #16
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f8f3 	bl	800472c <USB_FlushTxFifo>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f911 	bl	8004778 <USB_FlushRxFifo>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004566:	461a      	mov	r2, r3
 8004568:	2300      	movs	r3, #0
 800456a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004572:	461a      	mov	r2, r3
 8004574:	2300      	movs	r3, #0
 8004576:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457e:	461a      	mov	r2, r3
 8004580:	2300      	movs	r3, #0
 8004582:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004584:	2300      	movs	r3, #0
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	e043      	b.n	8004612 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800459c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045a0:	d118      	bne.n	80045d4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10a      	bne.n	80045be <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b4:	461a      	mov	r2, r3
 80045b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	e013      	b.n	80045e6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ca:	461a      	mov	r2, r3
 80045cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	e008      	b.n	80045e6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e0:	461a      	mov	r2, r3
 80045e2:	2300      	movs	r3, #0
 80045e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f2:	461a      	mov	r2, r3
 80045f4:	2300      	movs	r3, #0
 80045f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004604:	461a      	mov	r2, r3
 8004606:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800460a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	3301      	adds	r3, #1
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	429a      	cmp	r2, r3
 8004618:	d3b7      	bcc.n	800458a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800461a:	2300      	movs	r3, #0
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	e043      	b.n	80046a8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004636:	d118      	bne.n	800466a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10a      	bne.n	8004654 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464a:	461a      	mov	r2, r3
 800464c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	e013      	b.n	800467c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004660:	461a      	mov	r2, r3
 8004662:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	e008      	b.n	800467c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004676:	461a      	mov	r2, r3
 8004678:	2300      	movs	r3, #0
 800467a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004688:	461a      	mov	r2, r3
 800468a:	2300      	movs	r3, #0
 800468c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469a:	461a      	mov	r2, r3
 800469c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	3301      	adds	r3, #1
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d3b7      	bcc.n	8004620 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d105      	bne.n	80046e4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	f043 0210 	orr.w	r2, r3, #16
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699a      	ldr	r2, [r3, #24]
 80046e8:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <USB_DevInit+0x2d4>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f043 0208 	orr.w	r2, r3, #8
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d105      	bne.n	8004714 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699a      	ldr	r2, [r3, #24]
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <USB_DevInit+0x2d8>)
 800470e:	4313      	orrs	r3, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004714:	7dfb      	ldrb	r3, [r7, #23]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004720:	b004      	add	sp, #16
 8004722:	4770      	bx	lr
 8004724:	803c3800 	.word	0x803c3800
 8004728:	40000004 	.word	0x40000004

0800472c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	019b      	lsls	r3, r3, #6
 800473e:	f043 0220 	orr.w	r2, r3, #32
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3301      	adds	r3, #1
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4a09      	ldr	r2, [pc, #36]	; (8004774 <USB_FlushTxFifo+0x48>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d901      	bls.n	8004758 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e006      	b.n	8004766 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b20      	cmp	r3, #32
 8004762:	d0f0      	beq.n	8004746 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	00030d40 	.word	0x00030d40

08004778 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2210      	movs	r2, #16
 8004788:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3301      	adds	r3, #1
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4a09      	ldr	r2, [pc, #36]	; (80047b8 <USB_FlushRxFifo+0x40>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d901      	bls.n	800479c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e006      	b.n	80047aa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b10      	cmp	r3, #16
 80047a6:	d0f0      	beq.n	800478a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	00030d40 	.word	0x00030d40

080047bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	68f9      	ldr	r1, [r7, #12]
 80047d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047dc:	4313      	orrs	r3, r2
 80047de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b087      	sub	sp, #28
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 0306 	and.w	r3, r3, #6
 8004806:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d102      	bne.n	8004814 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800480e:	2300      	movs	r3, #0
 8004810:	75fb      	strb	r3, [r7, #23]
 8004812:	e00a      	b.n	800482a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b02      	cmp	r3, #2
 8004818:	d002      	beq.n	8004820 <USB_GetDevSpeed+0x32>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b06      	cmp	r3, #6
 800481e:	d102      	bne.n	8004826 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004820:	2302      	movs	r3, #2
 8004822:	75fb      	strb	r3, [r7, #23]
 8004824:	e001      	b.n	800482a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004826:	230f      	movs	r3, #15
 8004828:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800482a:	7dfb      	ldrb	r3, [r7, #23]
}
 800482c:	4618      	mov	r0, r3
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	785b      	ldrb	r3, [r3, #1]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d139      	bne.n	80048c8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485a:	69da      	ldr	r2, [r3, #28]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	2101      	movs	r1, #1
 8004866:	fa01 f303 	lsl.w	r3, r1, r3
 800486a:	b29b      	uxth	r3, r3
 800486c:	68f9      	ldr	r1, [r7, #12]
 800486e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004872:	4313      	orrs	r3, r2
 8004874:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d153      	bne.n	8004934 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	78db      	ldrb	r3, [r3, #3]
 80048a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	059b      	lsls	r3, r3, #22
 80048ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048b0:	431a      	orrs	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	0159      	lsls	r1, r3, #5
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	440b      	add	r3, r1
 80048ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048be:	4619      	mov	r1, r3
 80048c0:	4b20      	ldr	r3, [pc, #128]	; (8004944 <USB_ActivateEndpoint+0x10c>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	600b      	str	r3, [r1, #0]
 80048c6:	e035      	b.n	8004934 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ce:	69da      	ldr	r2, [r3, #28]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	2101      	movs	r1, #1
 80048da:	fa01 f303 	lsl.w	r3, r1, r3
 80048de:	041b      	lsls	r3, r3, #16
 80048e0:	68f9      	ldr	r1, [r7, #12]
 80048e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d119      	bne.n	8004934 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	78db      	ldrb	r3, [r3, #3]
 800491a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800491c:	430b      	orrs	r3, r1
 800491e:	431a      	orrs	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	0159      	lsls	r1, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	440b      	add	r3, r1
 8004928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492c:	4619      	mov	r1, r3
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <USB_ActivateEndpoint+0x10c>)
 8004930:	4313      	orrs	r3, r2
 8004932:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	10008000 	.word	0x10008000

08004948 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	785b      	ldrb	r3, [r3, #1]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d161      	bne.n	8004a28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004976:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800497a:	d11f      	bne.n	80049bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	0151      	lsls	r1, r2, #5
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	440a      	add	r2, r1
 8004992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004996:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800499a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	0151      	lsls	r1, r2, #5
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	440a      	add	r2, r1
 80049b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	2101      	movs	r1, #1
 80049ce:	fa01 f303 	lsl.w	r3, r1, r3
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	43db      	mvns	r3, r3
 80049d6:	68f9      	ldr	r1, [r7, #12]
 80049d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049dc:	4013      	ands	r3, r2
 80049de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e6:	69da      	ldr	r2, [r3, #28]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	2101      	movs	r1, #1
 80049f2:	fa01 f303 	lsl.w	r3, r1, r3
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	43db      	mvns	r3, r3
 80049fa:	68f9      	ldr	r1, [r7, #12]
 80049fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a00:	4013      	ands	r3, r2
 8004a02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	0159      	lsls	r1, r3, #5
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	440b      	add	r3, r1
 8004a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4b35      	ldr	r3, [pc, #212]	; (8004af8 <USB_DeactivateEndpoint+0x1b0>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]
 8004a26:	e060      	b.n	8004aea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a3e:	d11f      	bne.n	8004a80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	0151      	lsls	r1, r2, #5
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	440a      	add	r2, r1
 8004a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	0151      	lsls	r1, r2, #5
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	440a      	add	r2, r1
 8004a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	2101      	movs	r1, #1
 8004a92:	fa01 f303 	lsl.w	r3, r1, r3
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	68f9      	ldr	r1, [r7, #12]
 8004a9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aaa:	69da      	ldr	r2, [r3, #28]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aba:	041b      	lsls	r3, r3, #16
 8004abc:	43db      	mvns	r3, r3
 8004abe:	68f9      	ldr	r1, [r7, #12]
 8004ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	0159      	lsls	r1, r3, #5
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	440b      	add	r3, r1
 8004ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <USB_DeactivateEndpoint+0x1b4>)
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	ec337800 	.word	0xec337800
 8004afc:	eff37800 	.word	0xeff37800

08004b00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b08a      	sub	sp, #40	; 0x28
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	785b      	ldrb	r3, [r3, #1]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	f040 8163 	bne.w	8004de8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d132      	bne.n	8004b90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	0159      	lsls	r1, r3, #5
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	440b      	add	r3, r1
 8004b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b44:	4619      	mov	r1, r3
 8004b46:	4ba5      	ldr	r3, [pc, #660]	; (8004ddc <USB_EPStartXfer+0x2dc>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	0151      	lsls	r1, r2, #5
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	440a      	add	r2, r1
 8004b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b78:	691a      	ldr	r2, [r3, #16]
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	0159      	lsls	r1, r3, #5
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	440b      	add	r3, r1
 8004b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b86:	4619      	mov	r1, r3
 8004b88:	4b95      	ldr	r3, [pc, #596]	; (8004de0 <USB_EPStartXfer+0x2e0>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	610b      	str	r3, [r1, #16]
 8004b8e:	e074      	b.n	8004c7a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	0159      	lsls	r1, r3, #5
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	440b      	add	r3, r1
 8004ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004baa:	4619      	mov	r1, r3
 8004bac:	4b8c      	ldr	r3, [pc, #560]	; (8004de0 <USB_EPStartXfer+0x2e0>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	0159      	lsls	r1, r3, #5
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	440b      	add	r3, r1
 8004bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4b83      	ldr	r3, [pc, #524]	; (8004ddc <USB_EPStartXfer+0x2dc>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6959      	ldr	r1, [r3, #20]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	440b      	add	r3, r1
 8004bec:	1e59      	subs	r1, r3, #1
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bf6:	04d9      	lsls	r1, r3, #19
 8004bf8:	4b7a      	ldr	r3, [pc, #488]	; (8004de4 <USB_EPStartXfer+0x2e4>)
 8004bfa:	400b      	ands	r3, r1
 8004bfc:	69b9      	ldr	r1, [r7, #24]
 8004bfe:	0148      	lsls	r0, r1, #5
 8004c00:	69f9      	ldr	r1, [r7, #28]
 8004c02:	4401      	add	r1, r0
 8004c04:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c18:	691a      	ldr	r2, [r3, #16]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c22:	69b9      	ldr	r1, [r7, #24]
 8004c24:	0148      	lsls	r0, r1, #5
 8004c26:	69f9      	ldr	r1, [r7, #28]
 8004c28:	4401      	add	r1, r0
 8004c2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	78db      	ldrb	r3, [r3, #3]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d11f      	bne.n	8004c7a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	0151      	lsls	r1, r2, #5
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	440a      	add	r2, r1
 8004c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c54:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c58:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	0151      	lsls	r1, r2, #5
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	440a      	add	r2, r1
 8004c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c78:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004c7a:	79fb      	ldrb	r3, [r7, #7]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d14b      	bne.n	8004d18 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d009      	beq.n	8004c9c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c94:	461a      	mov	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	78db      	ldrb	r3, [r3, #3]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d128      	bne.n	8004cf6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d110      	bne.n	8004cd6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	0151      	lsls	r1, r2, #5
 8004cc6:	69fa      	ldr	r2, [r7, #28]
 8004cc8:	440a      	add	r2, r1
 8004cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	e00f      	b.n	8004cf6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	0151      	lsls	r1, r2, #5
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	440a      	add	r2, r1
 8004cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	e133      	b.n	8004f80 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	0151      	lsls	r1, r2, #5
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	440a      	add	r2, r1
 8004d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d36:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	78db      	ldrb	r3, [r3, #3]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d015      	beq.n	8004d6c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 811b 	beq.w	8004f80 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d60:	69f9      	ldr	r1, [r7, #28]
 8004d62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d66:	4313      	orrs	r3, r2
 8004d68:	634b      	str	r3, [r1, #52]	; 0x34
 8004d6a:	e109      	b.n	8004f80 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d110      	bne.n	8004d9e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	0151      	lsls	r1, r2, #5
 8004d8e:	69fa      	ldr	r2, [r7, #28]
 8004d90:	440a      	add	r2, r1
 8004d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	e00f      	b.n	8004dbe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	0151      	lsls	r1, r2, #5
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	440a      	add	r2, r1
 8004db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dbc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	68d9      	ldr	r1, [r3, #12]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	781a      	ldrb	r2, [r3, #0]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	b298      	uxth	r0, r3
 8004dcc:	79fb      	ldrb	r3, [r7, #7]
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 fa38 	bl	8005248 <USB_WritePacket>
 8004dd8:	e0d2      	b.n	8004f80 <USB_EPStartXfer+0x480>
 8004dda:	bf00      	nop
 8004ddc:	e007ffff 	.word	0xe007ffff
 8004de0:	fff80000 	.word	0xfff80000
 8004de4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	0159      	lsls	r1, r3, #5
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	440b      	add	r3, r1
 8004dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e02:	4619      	mov	r1, r3
 8004e04:	4b61      	ldr	r3, [pc, #388]	; (8004f8c <USB_EPStartXfer+0x48c>)
 8004e06:	4013      	ands	r3, r2
 8004e08:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	0159      	lsls	r1, r3, #5
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	440b      	add	r3, r1
 8004e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e24:	4619      	mov	r1, r3
 8004e26:	4b5a      	ldr	r3, [pc, #360]	; (8004f90 <USB_EPStartXfer+0x490>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d123      	bne.n	8004e7c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e40:	691a      	ldr	r2, [r3, #16]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e4a:	69b9      	ldr	r1, [r7, #24]
 8004e4c:	0148      	lsls	r0, r1, #5
 8004e4e:	69f9      	ldr	r1, [r7, #28]
 8004e50:	4401      	add	r1, r0
 8004e52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e56:	4313      	orrs	r3, r2
 8004e58:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	0151      	lsls	r1, r2, #5
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	440a      	add	r2, r1
 8004e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e78:	6113      	str	r3, [r2, #16]
 8004e7a:	e033      	b.n	8004ee4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	4413      	add	r3, r2
 8004e86:	1e5a      	subs	r2, r3, #1
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	8afb      	ldrh	r3, [r7, #22]
 8004ea2:	04d9      	lsls	r1, r3, #19
 8004ea4:	4b3b      	ldr	r3, [pc, #236]	; (8004f94 <USB_EPStartXfer+0x494>)
 8004ea6:	400b      	ands	r3, r1
 8004ea8:	69b9      	ldr	r1, [r7, #24]
 8004eaa:	0148      	lsls	r0, r1, #5
 8004eac:	69f9      	ldr	r1, [r7, #28]
 8004eae:	4401      	add	r1, r0
 8004eb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	8af9      	ldrh	r1, [r7, #22]
 8004ecc:	fb01 f303 	mul.w	r3, r1, r3
 8004ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed4:	69b9      	ldr	r1, [r7, #24]
 8004ed6:	0148      	lsls	r0, r1, #5
 8004ed8:	69f9      	ldr	r1, [r7, #28]
 8004eda:	4401      	add	r1, r0
 8004edc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d10d      	bne.n	8004f06 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d009      	beq.n	8004f06 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	68d9      	ldr	r1, [r3, #12]
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f02:	460a      	mov	r2, r1
 8004f04:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	78db      	ldrb	r3, [r3, #3]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d128      	bne.n	8004f60 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d110      	bne.n	8004f40 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	0151      	lsls	r1, r2, #5
 8004f30:	69fa      	ldr	r2, [r7, #28]
 8004f32:	440a      	add	r2, r1
 8004f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	e00f      	b.n	8004f60 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	0151      	lsls	r1, r2, #5
 8004f52:	69fa      	ldr	r2, [r7, #28]
 8004f54:	440a      	add	r2, r1
 8004f56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f5e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3720      	adds	r7, #32
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	fff80000 	.word	0xfff80000
 8004f90:	e007ffff 	.word	0xe007ffff
 8004f94:	1ff80000 	.word	0x1ff80000

08004f98 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	785b      	ldrb	r3, [r3, #1]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	f040 80cd 	bne.w	8005154 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d132      	bne.n	8005028 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	0159      	lsls	r1, r3, #5
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	440b      	add	r3, r1
 8004fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4b98      	ldr	r3, [pc, #608]	; (8005240 <USB_EP0StartXfer+0x2a8>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	0151      	lsls	r1, r2, #5
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005002:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	0159      	lsls	r1, r3, #5
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	440b      	add	r3, r1
 800501a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501e:	4619      	mov	r1, r3
 8005020:	4b88      	ldr	r3, [pc, #544]	; (8005244 <USB_EP0StartXfer+0x2ac>)
 8005022:	4013      	ands	r3, r2
 8005024:	610b      	str	r3, [r1, #16]
 8005026:	e04e      	b.n	80050c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	0159      	lsls	r1, r3, #5
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	440b      	add	r3, r1
 800503e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005042:	4619      	mov	r1, r3
 8005044:	4b7f      	ldr	r3, [pc, #508]	; (8005244 <USB_EP0StartXfer+0x2ac>)
 8005046:	4013      	ands	r3, r2
 8005048:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	0159      	lsls	r1, r3, #5
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	440b      	add	r3, r1
 8005060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005064:	4619      	mov	r1, r3
 8005066:	4b76      	ldr	r3, [pc, #472]	; (8005240 <USB_EP0StartXfer+0x2a8>)
 8005068:	4013      	ands	r3, r2
 800506a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	695a      	ldr	r2, [r3, #20]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	429a      	cmp	r2, r3
 8005076:	d903      	bls.n	8005080 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	440a      	add	r2, r1
 8005096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800509a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800509e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b6:	6939      	ldr	r1, [r7, #16]
 80050b8:	0148      	lsls	r0, r1, #5
 80050ba:	6979      	ldr	r1, [r7, #20]
 80050bc:	4401      	add	r1, r0
 80050be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050c2:	4313      	orrs	r3, r2
 80050c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050c6:	79fb      	ldrb	r3, [r7, #7]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d11e      	bne.n	800510a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d009      	beq.n	80050e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e0:	461a      	mov	r2, r3
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005102:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	e092      	b.n	8005230 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005124:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005128:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d07e      	beq.n	8005230 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	2101      	movs	r1, #1
 8005144:	fa01 f303 	lsl.w	r3, r1, r3
 8005148:	6979      	ldr	r1, [r7, #20]
 800514a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800514e:	4313      	orrs	r3, r2
 8005150:	634b      	str	r3, [r1, #52]	; 0x34
 8005152:	e06d      	b.n	8005230 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005160:	691a      	ldr	r2, [r3, #16]
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	0159      	lsls	r1, r3, #5
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	440b      	add	r3, r1
 800516a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516e:	4619      	mov	r1, r3
 8005170:	4b34      	ldr	r3, [pc, #208]	; (8005244 <USB_EP0StartXfer+0x2ac>)
 8005172:	4013      	ands	r3, r2
 8005174:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	0159      	lsls	r1, r3, #5
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	440b      	add	r3, r1
 800518c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005190:	4619      	mov	r1, r3
 8005192:	4b2b      	ldr	r3, [pc, #172]	; (8005240 <USB_EP0StartXfer+0x2a8>)
 8005194:	4013      	ands	r3, r2
 8005196:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	0151      	lsls	r1, r2, #5
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	440a      	add	r2, r1
 80051be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051de:	6939      	ldr	r1, [r7, #16]
 80051e0:	0148      	lsls	r0, r1, #5
 80051e2:	6979      	ldr	r1, [r7, #20]
 80051e4:	4401      	add	r1, r0
 80051e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051ea:	4313      	orrs	r3, r2
 80051ec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80051ee:	79fb      	ldrb	r3, [r7, #7]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d10d      	bne.n	8005210 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d009      	beq.n	8005210 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	68d9      	ldr	r1, [r3, #12]
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520c:	460a      	mov	r2, r1
 800520e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	0151      	lsls	r1, r2, #5
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	440a      	add	r2, r1
 8005226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800522a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800522e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	e007ffff 	.word	0xe007ffff
 8005244:	fff80000 	.word	0xfff80000

08005248 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005248:	b480      	push	{r7}
 800524a:	b089      	sub	sp, #36	; 0x24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	4611      	mov	r1, r2
 8005254:	461a      	mov	r2, r3
 8005256:	460b      	mov	r3, r1
 8005258:	71fb      	strb	r3, [r7, #7]
 800525a:	4613      	mov	r3, r2
 800525c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005266:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800526a:	2b00      	cmp	r3, #0
 800526c:	d11a      	bne.n	80052a4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800526e:	88bb      	ldrh	r3, [r7, #4]
 8005270:	3303      	adds	r3, #3
 8005272:	089b      	lsrs	r3, r3, #2
 8005274:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005276:	2300      	movs	r3, #0
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	e00f      	b.n	800529c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	031a      	lsls	r2, r3, #12
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	4413      	add	r3, r2
 8005284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005288:	461a      	mov	r2, r3
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	3304      	adds	r3, #4
 8005294:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	3301      	adds	r3, #1
 800529a:	61bb      	str	r3, [r7, #24]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d3eb      	bcc.n	800527c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3724      	adds	r7, #36	; 0x24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b089      	sub	sp, #36	; 0x24
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	4613      	mov	r3, r2
 80052be:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80052c8:	88fb      	ldrh	r3, [r7, #6]
 80052ca:	3303      	adds	r3, #3
 80052cc:	089b      	lsrs	r3, r3, #2
 80052ce:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80052d0:	2300      	movs	r3, #0
 80052d2:	61bb      	str	r3, [r7, #24]
 80052d4:	e00b      	b.n	80052ee <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	601a      	str	r2, [r3, #0]
    pDest++;
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	3304      	adds	r3, #4
 80052e6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	3301      	adds	r3, #1
 80052ec:	61bb      	str	r3, [r7, #24]
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d3ef      	bcc.n	80052d6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80052f6:	69fb      	ldr	r3, [r7, #28]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3724      	adds	r7, #36	; 0x24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	785b      	ldrb	r3, [r3, #1]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d12c      	bne.n	800537a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	db12      	blt.n	8005358 <USB_EPSetStall+0x54>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00f      	beq.n	8005358 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	0151      	lsls	r1, r2, #5
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	440a      	add	r2, r1
 800534e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005352:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005356:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	0151      	lsls	r1, r2, #5
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	440a      	add	r2, r1
 800536e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005372:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	e02b      	b.n	80053d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	db12      	blt.n	80053b2 <USB_EPSetStall+0xae>
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00f      	beq.n	80053b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	0151      	lsls	r1, r2, #5
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	440a      	add	r2, r1
 80053a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	0151      	lsls	r1, r2, #5
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	440a      	add	r2, r1
 80053c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	785b      	ldrb	r3, [r3, #1]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d128      	bne.n	800544e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	440a      	add	r2, r1
 8005412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005416:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800541a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	78db      	ldrb	r3, [r3, #3]
 8005420:	2b03      	cmp	r3, #3
 8005422:	d003      	beq.n	800542c <USB_EPClearStall+0x4c>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	78db      	ldrb	r3, [r3, #3]
 8005428:	2b02      	cmp	r3, #2
 800542a:	d138      	bne.n	800549e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	0151      	lsls	r1, r2, #5
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	440a      	add	r2, r1
 8005442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	e027      	b.n	800549e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	0151      	lsls	r1, r2, #5
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	440a      	add	r2, r1
 8005464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005468:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800546c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	78db      	ldrb	r3, [r3, #3]
 8005472:	2b03      	cmp	r3, #3
 8005474:	d003      	beq.n	800547e <USB_EPClearStall+0x9e>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	78db      	ldrb	r3, [r3, #3]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d10f      	bne.n	800549e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	0151      	lsls	r1, r2, #5
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	440a      	add	r2, r1
 8005494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	460b      	mov	r3, r1
 80054b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80054ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80054e0:	68f9      	ldr	r1, [r7, #12]
 80054e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e6:	4313      	orrs	r3, r2
 80054e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005512:	f023 0303 	bic.w	r3, r3, #3
 8005516:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005526:	f023 0302 	bic.w	r3, r3, #2
 800552a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005554:	f023 0303 	bic.w	r3, r3, #3
 8005558:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005568:	f043 0302 	orr.w	r3, r3, #2
 800556c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4013      	ands	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005594:	68fb      	ldr	r3, [r7, #12]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b085      	sub	sp, #20
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	4013      	ands	r3, r2
 80055c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	0c1b      	lsrs	r3, r3, #16
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	4013      	ands	r3, r2
 80055f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	b29b      	uxth	r3, r3
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800560a:	b480      	push	{r7}
 800560c:	b085      	sub	sp, #20
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	460b      	mov	r3, r1
 8005614:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	4013      	ands	r3, r2
 8005636:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005638:	68bb      	ldr	r3, [r7, #8]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005646:	b480      	push	{r7}
 8005648:	b087      	sub	sp, #28
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	460b      	mov	r3, r1
 8005650:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005668:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800566a:	78fb      	ldrb	r3, [r7, #3]
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	fa22 f303 	lsr.w	r3, r2, r3
 8005676:	01db      	lsls	r3, r3, #7
 8005678:	b2db      	uxtb	r3, r3
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4013      	ands	r3, r2
 8005692:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005694:	68bb      	ldr	r3, [r7, #8]
}
 8005696:	4618      	mov	r0, r3
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f003 0301 	and.w	r3, r3, #1
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056da:	4619      	mov	r1, r3
 80056dc:	4b09      	ldr	r3, [pc, #36]	; (8005704 <USB_ActivateSetup+0x44>)
 80056de:	4013      	ands	r3, r2
 80056e0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	fffff800 	.word	0xfffff800

08005708 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	460b      	mov	r3, r1
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	333c      	adds	r3, #60	; 0x3c
 800571e:	3304      	adds	r3, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4a26      	ldr	r2, [pc, #152]	; (80057c0 <USB_EP0_OutStart+0xb8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d90a      	bls.n	8005742 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800573c:	d101      	bne.n	8005742 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	e037      	b.n	80057b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005748:	461a      	mov	r2, r3
 800574a:	2300      	movs	r3, #0
 800574c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005760:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005770:	f043 0318 	orr.w	r3, r3, #24
 8005774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005784:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005788:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800578a:	7afb      	ldrb	r3, [r7, #11]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d10f      	bne.n	80057b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005796:	461a      	mov	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80057ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	4f54300a 	.word	0x4f54300a

080057c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3301      	adds	r3, #1
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4a13      	ldr	r2, [pc, #76]	; (8005828 <USB_CoreReset+0x64>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d901      	bls.n	80057e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e01b      	b.n	800581a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	daf2      	bge.n	80057d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f043 0201 	orr.w	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	3301      	adds	r3, #1
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4a09      	ldr	r2, [pc, #36]	; (8005828 <USB_CoreReset+0x64>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d901      	bls.n	800580c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e006      	b.n	800581a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b01      	cmp	r3, #1
 8005816:	d0f0      	beq.n	80057fa <USB_CoreReset+0x36>

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	00030d40 	.word	0x00030d40

0800582c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005838:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800583c:	f005 fd9a 	bl	800b374 <malloc>
 8005840:	4603      	mov	r3, r0
 8005842:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d105      	bne.n	8005856 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005852:	2302      	movs	r3, #2
 8005854:	e066      	b.n	8005924 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	7c1b      	ldrb	r3, [r3, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d119      	bne.n	800589a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800586a:	2202      	movs	r2, #2
 800586c:	2181      	movs	r1, #129	; 0x81
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f005 f989 	bl	800ab86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800587a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800587e:	2202      	movs	r2, #2
 8005880:	2101      	movs	r1, #1
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f005 f97f 	bl	800ab86 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2210      	movs	r2, #16
 8005894:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005898:	e016      	b.n	80058c8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800589a:	2340      	movs	r3, #64	; 0x40
 800589c:	2202      	movs	r2, #2
 800589e:	2181      	movs	r1, #129	; 0x81
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f005 f970 	bl	800ab86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80058ac:	2340      	movs	r3, #64	; 0x40
 80058ae:	2202      	movs	r2, #2
 80058b0:	2101      	movs	r1, #1
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f005 f967 	bl	800ab86 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2210      	movs	r2, #16
 80058c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80058c8:	2308      	movs	r3, #8
 80058ca:	2203      	movs	r2, #3
 80058cc:	2182      	movs	r1, #130	; 0x82
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f005 f959 	bl	800ab86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	7c1b      	ldrb	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d109      	bne.n	8005912 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005908:	2101      	movs	r1, #1
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f005 fa2a 	bl	800ad64 <USBD_LL_PrepareReceive>
 8005910:	e007      	b.n	8005922 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005918:	2340      	movs	r3, #64	; 0x40
 800591a:	2101      	movs	r1, #1
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f005 fa21 	bl	800ad64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800593c:	2181      	movs	r1, #129	; 0x81
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f005 f947 	bl	800abd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800594a:	2101      	movs	r1, #1
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f005 f940 	bl	800abd2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800595a:	2182      	movs	r1, #130	; 0x82
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f005 f938 	bl	800abd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00e      	beq.n	800599a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800598c:	4618      	mov	r0, r3
 800598e:	f005 fcf9 	bl	800b384 <free>
    pdev->pClassData = NULL;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800599a:	7bfb      	ldrb	r3, [r7, #15]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059b4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d03a      	beq.n	8005a44 <USBD_CDC_Setup+0xa0>
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	f040 8097 	bne.w	8005b02 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	88db      	ldrh	r3, [r3, #6]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d029      	beq.n	8005a30 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	b25b      	sxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	da11      	bge.n	8005a0a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80059f2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	88d2      	ldrh	r2, [r2, #6]
 80059f8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80059fa:	6939      	ldr	r1, [r7, #16]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	88db      	ldrh	r3, [r3, #6]
 8005a00:	461a      	mov	r2, r3
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f001 faa6 	bl	8006f54 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005a08:	e082      	b.n	8005b10 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	785a      	ldrb	r2, [r3, #1]
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	88db      	ldrh	r3, [r3, #6]
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005a20:	6939      	ldr	r1, [r7, #16]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	88db      	ldrh	r3, [r3, #6]
 8005a26:	461a      	mov	r2, r3
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f001 fabf 	bl	8006fac <USBD_CtlPrepareRx>
    break;
 8005a2e:	e06f      	b.n	8005b10 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	7850      	ldrb	r0, [r2, #1]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	6839      	ldr	r1, [r7, #0]
 8005a40:	4798      	blx	r3
    break;
 8005a42:	e065      	b.n	8005b10 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	785b      	ldrb	r3, [r3, #1]
 8005a48:	2b0b      	cmp	r3, #11
 8005a4a:	d84f      	bhi.n	8005aec <USBD_CDC_Setup+0x148>
 8005a4c:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <USBD_CDC_Setup+0xb0>)
 8005a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a52:	bf00      	nop
 8005a54:	08005a85 	.word	0x08005a85
 8005a58:	08005afb 	.word	0x08005afb
 8005a5c:	08005aed 	.word	0x08005aed
 8005a60:	08005aed 	.word	0x08005aed
 8005a64:	08005aed 	.word	0x08005aed
 8005a68:	08005aed 	.word	0x08005aed
 8005a6c:	08005aed 	.word	0x08005aed
 8005a70:	08005aed 	.word	0x08005aed
 8005a74:	08005aed 	.word	0x08005aed
 8005a78:	08005aed 	.word	0x08005aed
 8005a7c:	08005aad 	.word	0x08005aad
 8005a80:	08005ad5 	.word	0x08005ad5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a8a:	2b03      	cmp	r3, #3
 8005a8c:	d107      	bne.n	8005a9e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a8e:	f107 030c 	add.w	r3, r7, #12
 8005a92:	2202      	movs	r2, #2
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f001 fa5c 	bl	8006f54 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005a9c:	e030      	b.n	8005b00 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005a9e:	6839      	ldr	r1, [r7, #0]
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f001 f9e6 	bl	8006e72 <USBD_CtlError>
        ret = USBD_FAIL;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8005aaa:	e029      	b.n	8005b00 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d107      	bne.n	8005ac6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005ab6:	f107 030f 	add.w	r3, r7, #15
 8005aba:	2201      	movs	r2, #1
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f001 fa48 	bl	8006f54 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005ac4:	e01c      	b.n	8005b00 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005ac6:	6839      	ldr	r1, [r7, #0]
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f001 f9d2 	bl	8006e72 <USBD_CtlError>
        ret = USBD_FAIL;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ad2:	e015      	b.n	8005b00 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d00f      	beq.n	8005afe <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005ade:	6839      	ldr	r1, [r7, #0]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f001 f9c6 	bl	8006e72 <USBD_CtlError>
        ret = USBD_FAIL;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005aea:	e008      	b.n	8005afe <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f001 f9bf 	bl	8006e72 <USBD_CtlError>
      ret = USBD_FAIL;
 8005af4:	2303      	movs	r3, #3
 8005af6:	75fb      	strb	r3, [r7, #23]
      break;
 8005af8:	e002      	b.n	8005b00 <USBD_CDC_Setup+0x15c>
      break;
 8005afa:	bf00      	nop
 8005afc:	e008      	b.n	8005b10 <USBD_CDC_Setup+0x16c>
      break;
 8005afe:	bf00      	nop
    }
    break;
 8005b00:	e006      	b.n	8005b10 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005b02:	6839      	ldr	r1, [r7, #0]
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f001 f9b4 	bl	8006e72 <USBD_CtlError>
    ret = USBD_FAIL;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	75fb      	strb	r3, [r7, #23]
    break;
 8005b0e:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop

08005b1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005b2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e049      	b.n	8005bd2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005b46:	78fa      	ldrb	r2, [r7, #3]
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	440b      	add	r3, r1
 8005b54:	3318      	adds	r3, #24
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d029      	beq.n	8005bb0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005b5c:	78fa      	ldrb	r2, [r7, #3]
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	3318      	adds	r3, #24
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	78f9      	ldrb	r1, [r7, #3]
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	460b      	mov	r3, r1
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	1a5b      	subs	r3, r3, r1
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4403      	add	r3, r0
 8005b7c:	3344      	adds	r3, #68	; 0x44
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b84:	fb03 f301 	mul.w	r3, r3, r1
 8005b88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d110      	bne.n	8005bb0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005b8e:	78fa      	ldrb	r2, [r7, #3]
 8005b90:	6879      	ldr	r1, [r7, #4]
 8005b92:	4613      	mov	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	440b      	add	r3, r1
 8005b9c:	3318      	adds	r3, #24
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005ba2:	78f9      	ldrb	r1, [r7, #3]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f005 f8ba 	bl	800ad22 <USBD_LL_Transmit>
 8005bae:	e00f      	b.n	8005bd0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005bcc:	78fa      	ldrb	r2, [r7, #3]
 8005bce:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	460b      	mov	r3, r1
 8005be4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e015      	b.n	8005c28 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f005 f8d0 	bl	800ada6 <USBD_LL_GetRxDataSize>
 8005c06:	4602      	mov	r2, r0
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005c22:	4611      	mov	r1, r2
 8005c24:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c3e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d015      	beq.n	8005c76 <USBD_CDC_EP0_RxReady+0x46>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005c50:	2bff      	cmp	r3, #255	; 0xff
 8005c52:	d010      	beq.n	8005c76 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005c62:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005c6a:	b292      	uxth	r2, r2
 8005c6c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	22ff      	movs	r2, #255	; 0xff
 8005c72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2243      	movs	r2, #67	; 0x43
 8005c8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005c8e:	4b03      	ldr	r3, [pc, #12]	; (8005c9c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	20000090 	.word	0x20000090

08005ca0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2243      	movs	r2, #67	; 0x43
 8005cac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005cae:	4b03      	ldr	r3, [pc, #12]	; (8005cbc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	2000004c 	.word	0x2000004c

08005cc0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2243      	movs	r2, #67	; 0x43
 8005ccc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005cce:	4b03      	ldr	r3, [pc, #12]	; (8005cdc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	200000d4 	.word	0x200000d4

08005ce0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	220a      	movs	r2, #10
 8005cec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005cee:	4b03      	ldr	r3, [pc, #12]	; (8005cfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	20000008 	.word	0x20000008

08005d00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e004      	b.n	8005d1e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b087      	sub	sp, #28
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d3c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	371c      	adds	r7, #28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d6c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e016      	b.n	8005dd0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	7c1b      	ldrb	r3, [r3, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d109      	bne.n	8005dbe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005db4:	2101      	movs	r1, #1
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f004 ffd4 	bl	800ad64 <USBD_LL_PrepareReceive>
 8005dbc:	e007      	b.n	8005dce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005dc4:	2340      	movs	r3, #64	; 0x40
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f004 ffcb 	bl	800ad64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	4613      	mov	r3, r2
 8005de4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e025      	b.n	8005e3c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	79fa      	ldrb	r2, [r7, #7]
 8005e2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f004 fe41 	bl	800aab8 <USBD_LL_Init>
 8005e36:	4603      	mov	r3, r0
 8005e38:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e010      	b.n	8005e7e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6c:	f107 020e 	add.w	r2, r7, #14
 8005e70:	4610      	mov	r0, r2
 8005e72:	4798      	blx	r3
 8005e74:	4602      	mov	r2, r0
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b082      	sub	sp, #8
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f004 fe5e 	bl	800ab50 <USBD_LL_Start>
 8005e94:	4603      	mov	r3, r0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	78fa      	ldrb	r2, [r7, #3]
 8005ed8:	4611      	mov	r1, r2
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	4798      	blx	r3
 8005ede:	4603      	mov	r3, r0
 8005ee0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d007      	beq.n	8005f12 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	78fa      	ldrb	r2, [r7, #3]
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	4798      	blx	r3
  }

  return USBD_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 ff65 	bl	8006dfe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005f42:	461a      	mov	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d01a      	beq.n	8005f8e <USBD_LL_SetupStage+0x72>
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d822      	bhi.n	8005fa2 <USBD_LL_SetupStage+0x86>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <USBD_LL_SetupStage+0x4a>
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d00a      	beq.n	8005f7a <USBD_LL_SetupStage+0x5e>
 8005f64:	e01d      	b.n	8005fa2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fa18 	bl	80063a4 <USBD_StdDevReq>
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]
      break;
 8005f78:	e020      	b.n	8005fbc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f80:	4619      	mov	r1, r3
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fa7c 	bl	8006480 <USBD_StdItfReq>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f8c:	e016      	b.n	8005fbc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f94:	4619      	mov	r1, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 faba 	bl	8006510 <USBD_StdEPReq>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa0:	e00c      	b.n	8005fbc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fa8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f004 fe2d 	bl	800ac10 <USBD_LL_StallEP>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8005fba:	bf00      	nop
  }

  return ret;
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b086      	sub	sp, #24
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	460b      	mov	r3, r1
 8005fd0:	607a      	str	r2, [r7, #4]
 8005fd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005fd4:	7afb      	ldrb	r3, [r7, #11]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d137      	bne.n	800604a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005fe0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fe8:	2b03      	cmp	r3, #3
 8005fea:	d14a      	bne.n	8006082 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d913      	bls.n	8006020 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	1ad2      	subs	r2, r2, r3
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	4293      	cmp	r3, r2
 8006010:	bf28      	it	cs
 8006012:	4613      	movcs	r3, r2
 8006014:	461a      	mov	r2, r3
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 ffe4 	bl	8006fe6 <USBD_CtlContinueRx>
 800601e:	e030      	b.n	8006082 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006032:	2b03      	cmp	r3, #3
 8006034:	d105      	bne.n	8006042 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 ffe0 	bl	8007008 <USBD_CtlSendStatus>
 8006048:	e01b      	b.n	8006082 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d013      	beq.n	800607e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800605c:	2b03      	cmp	r3, #3
 800605e:	d10e      	bne.n	800607e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	7afa      	ldrb	r2, [r7, #11]
 800606a:	4611      	mov	r1, r2
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	4798      	blx	r3
 8006070:	4603      	mov	r3, r0
 8006072:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006074:	7dfb      	ldrb	r3, [r7, #23]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800607a:	7dfb      	ldrb	r3, [r7, #23]
 800607c:	e002      	b.n	8006084 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800607e:	2303      	movs	r3, #3
 8006080:	e000      	b.n	8006084 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	460b      	mov	r3, r1
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800609a:	7afb      	ldrb	r3, [r7, #11]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d16a      	bne.n	8006176 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3314      	adds	r3, #20
 80060a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d155      	bne.n	800615c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d914      	bls.n	80060e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	1ad2      	subs	r2, r2, r3
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	461a      	mov	r2, r3
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 ff59 	bl	8006f8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060d8:	2300      	movs	r3, #0
 80060da:	2200      	movs	r2, #0
 80060dc:	2100      	movs	r1, #0
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f004 fe40 	bl	800ad64 <USBD_LL_PrepareReceive>
 80060e4:	e03a      	b.n	800615c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d11c      	bne.n	800612c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d316      	bcc.n	800612c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006108:	429a      	cmp	r2, r3
 800610a:	d20f      	bcs.n	800612c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800610c:	2200      	movs	r2, #0
 800610e:	2100      	movs	r1, #0
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 ff3a 	bl	8006f8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800611e:	2300      	movs	r3, #0
 8006120:	2200      	movs	r2, #0
 8006122:	2100      	movs	r1, #0
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f004 fe1d 	bl	800ad64 <USBD_LL_PrepareReceive>
 800612a:	e017      	b.n	800615c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800613e:	2b03      	cmp	r3, #3
 8006140:	d105      	bne.n	800614e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800614e:	2180      	movs	r1, #128	; 0x80
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f004 fd5d 	bl	800ac10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 ff69 	bl	800702e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006162:	2b01      	cmp	r3, #1
 8006164:	d123      	bne.n	80061ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7ff fe99 	bl	8005e9e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006174:	e01b      	b.n	80061ae <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d013      	beq.n	80061aa <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006188:	2b03      	cmp	r3, #3
 800618a:	d10e      	bne.n	80061aa <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	7afa      	ldrb	r2, [r7, #11]
 8006196:	4611      	mov	r1, r2
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	4798      	blx	r3
 800619c:	4603      	mov	r3, r0
 800619e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80061a0:	7dfb      	ldrb	r3, [r7, #23]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80061a6:	7dfb      	ldrb	r3, [r7, #23]
 80061a8:	e002      	b.n	80061b0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e000      	b.n	80061b0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d009      	beq.n	80061fc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6852      	ldr	r2, [r2, #4]
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	4611      	mov	r1, r2
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061fc:	2340      	movs	r3, #64	; 0x40
 80061fe:	2200      	movs	r2, #0
 8006200:	2100      	movs	r1, #0
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f004 fcbf 	bl	800ab86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2240      	movs	r2, #64	; 0x40
 8006214:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006218:	2340      	movs	r3, #64	; 0x40
 800621a:	2200      	movs	r2, #0
 800621c:	2180      	movs	r1, #128	; 0x80
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f004 fcb1 	bl	800ab86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2240      	movs	r2, #64	; 0x40
 800622e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	460b      	mov	r3, r1
 8006244:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	78fa      	ldrb	r2, [r7, #3]
 800624a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2204      	movs	r2, #4
 8006272:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006292:	2b04      	cmp	r3, #4
 8006294:	d105      	bne.n	80062a2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d10b      	bne.n	80062da <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	460b      	mov	r3, r1
 8006308:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b082      	sub	sp, #8
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006344:	2b00      	cmp	r3, #0
 8006346:	d009      	beq.n	800635c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6852      	ldr	r2, [r2, #4]
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	4611      	mov	r1, r2
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
  }

  return USBD_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006366:	b480      	push	{r7}
 8006368:	b087      	sub	sp, #28
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	3301      	adds	r3, #1
 800637c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006384:	8a3b      	ldrh	r3, [r7, #16]
 8006386:	021b      	lsls	r3, r3, #8
 8006388:	b21a      	sxth	r2, r3
 800638a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800638e:	4313      	orrs	r3, r2
 8006390:	b21b      	sxth	r3, r3
 8006392:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006394:	89fb      	ldrh	r3, [r7, #14]
}
 8006396:	4618      	mov	r0, r3
 8006398:	371c      	adds	r7, #28
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
	...

080063a4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063ba:	2b40      	cmp	r3, #64	; 0x40
 80063bc:	d005      	beq.n	80063ca <USBD_StdDevReq+0x26>
 80063be:	2b40      	cmp	r3, #64	; 0x40
 80063c0:	d853      	bhi.n	800646a <USBD_StdDevReq+0xc6>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00b      	beq.n	80063de <USBD_StdDevReq+0x3a>
 80063c6:	2b20      	cmp	r3, #32
 80063c8:	d14f      	bne.n	800646a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
 80063d8:	4603      	mov	r3, r0
 80063da:	73fb      	strb	r3, [r7, #15]
    break;
 80063dc:	e04a      	b.n	8006474 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	785b      	ldrb	r3, [r3, #1]
 80063e2:	2b09      	cmp	r3, #9
 80063e4:	d83b      	bhi.n	800645e <USBD_StdDevReq+0xba>
 80063e6:	a201      	add	r2, pc, #4	; (adr r2, 80063ec <USBD_StdDevReq+0x48>)
 80063e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ec:	08006441 	.word	0x08006441
 80063f0:	08006455 	.word	0x08006455
 80063f4:	0800645f 	.word	0x0800645f
 80063f8:	0800644b 	.word	0x0800644b
 80063fc:	0800645f 	.word	0x0800645f
 8006400:	0800641f 	.word	0x0800641f
 8006404:	08006415 	.word	0x08006415
 8006408:	0800645f 	.word	0x0800645f
 800640c:	08006437 	.word	0x08006437
 8006410:	08006429 	.word	0x08006429
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f9d8 	bl	80067cc <USBD_GetDescriptor>
      break;
 800641c:	e024      	b.n	8006468 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fb67 	bl	8006af4 <USBD_SetAddress>
      break;
 8006426:	e01f      	b.n	8006468 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 fba6 	bl	8006b7c <USBD_SetConfig>
 8006430:	4603      	mov	r3, r0
 8006432:	73fb      	strb	r3, [r7, #15]
      break;
 8006434:	e018      	b.n	8006468 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006436:	6839      	ldr	r1, [r7, #0]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fc43 	bl	8006cc4 <USBD_GetConfig>
      break;
 800643e:	e013      	b.n	8006468 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fc73 	bl	8006d2e <USBD_GetStatus>
      break;
 8006448:	e00e      	b.n	8006468 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fca1 	bl	8006d94 <USBD_SetFeature>
      break;
 8006452:	e009      	b.n	8006468 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006454:	6839      	ldr	r1, [r7, #0]
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fcb0 	bl	8006dbc <USBD_ClrFeature>
      break;
 800645c:	e004      	b.n	8006468 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fd06 	bl	8006e72 <USBD_CtlError>
      break;
 8006466:	bf00      	nop
    }
    break;
 8006468:	e004      	b.n	8006474 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fd00 	bl	8006e72 <USBD_CtlError>
    break;
 8006472:	bf00      	nop
  }

  return ret;
 8006474:	7bfb      	ldrb	r3, [r7, #15]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop

08006480 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006496:	2b40      	cmp	r3, #64	; 0x40
 8006498:	d005      	beq.n	80064a6 <USBD_StdItfReq+0x26>
 800649a:	2b40      	cmp	r3, #64	; 0x40
 800649c:	d82e      	bhi.n	80064fc <USBD_StdItfReq+0x7c>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <USBD_StdItfReq+0x26>
 80064a2:	2b20      	cmp	r3, #32
 80064a4:	d12a      	bne.n	80064fc <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ac:	3b01      	subs	r3, #1
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d81d      	bhi.n	80064ee <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	889b      	ldrh	r3, [r3, #4]
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d813      	bhi.n	80064e4 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	4798      	blx	r3
 80064ca:	4603      	mov	r3, r0
 80064cc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	88db      	ldrh	r3, [r3, #6]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d110      	bne.n	80064f8 <USBD_StdItfReq+0x78>
 80064d6:	7bfb      	ldrb	r3, [r7, #15]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10d      	bne.n	80064f8 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fd93 	bl	8007008 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80064e2:	e009      	b.n	80064f8 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fcc3 	bl	8006e72 <USBD_CtlError>
      break;
 80064ec:	e004      	b.n	80064f8 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fcbe 	bl	8006e72 <USBD_CtlError>
      break;
 80064f6:	e000      	b.n	80064fa <USBD_StdItfReq+0x7a>
      break;
 80064f8:	bf00      	nop
    }
    break;
 80064fa:	e004      	b.n	8006506 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fcb7 	bl	8006e72 <USBD_CtlError>
    break;
 8006504:	bf00      	nop
  }

  return ret;
 8006506:	7bfb      	ldrb	r3, [r7, #15]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	889b      	ldrh	r3, [r3, #4]
 8006522:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800652c:	2b40      	cmp	r3, #64	; 0x40
 800652e:	d007      	beq.n	8006540 <USBD_StdEPReq+0x30>
 8006530:	2b40      	cmp	r3, #64	; 0x40
 8006532:	f200 8140 	bhi.w	80067b6 <USBD_StdEPReq+0x2a6>
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00c      	beq.n	8006554 <USBD_StdEPReq+0x44>
 800653a:	2b20      	cmp	r3, #32
 800653c:	f040 813b 	bne.w	80067b6 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	4798      	blx	r3
 800654e:	4603      	mov	r3, r0
 8006550:	73fb      	strb	r3, [r7, #15]
    break;
 8006552:	e135      	b.n	80067c0 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	785b      	ldrb	r3, [r3, #1]
 8006558:	2b03      	cmp	r3, #3
 800655a:	d007      	beq.n	800656c <USBD_StdEPReq+0x5c>
 800655c:	2b03      	cmp	r3, #3
 800655e:	f300 8124 	bgt.w	80067aa <USBD_StdEPReq+0x29a>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d07b      	beq.n	800665e <USBD_StdEPReq+0x14e>
 8006566:	2b01      	cmp	r3, #1
 8006568:	d03b      	beq.n	80065e2 <USBD_StdEPReq+0xd2>
 800656a:	e11e      	b.n	80067aa <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006572:	2b02      	cmp	r3, #2
 8006574:	d002      	beq.n	800657c <USBD_StdEPReq+0x6c>
 8006576:	2b03      	cmp	r3, #3
 8006578:	d016      	beq.n	80065a8 <USBD_StdEPReq+0x98>
 800657a:	e02c      	b.n	80065d6 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800657c:	7bbb      	ldrb	r3, [r7, #14]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00d      	beq.n	800659e <USBD_StdEPReq+0x8e>
 8006582:	7bbb      	ldrb	r3, [r7, #14]
 8006584:	2b80      	cmp	r3, #128	; 0x80
 8006586:	d00a      	beq.n	800659e <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f004 fb3f 	bl	800ac10 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006592:	2180      	movs	r1, #128	; 0x80
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f004 fb3b 	bl	800ac10 <USBD_LL_StallEP>
 800659a:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800659c:	e020      	b.n	80065e0 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800659e:	6839      	ldr	r1, [r7, #0]
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fc66 	bl	8006e72 <USBD_CtlError>
        break;
 80065a6:	e01b      	b.n	80065e0 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	885b      	ldrh	r3, [r3, #2]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10e      	bne.n	80065ce <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80065b0:	7bbb      	ldrb	r3, [r7, #14]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00b      	beq.n	80065ce <USBD_StdEPReq+0xbe>
 80065b6:	7bbb      	ldrb	r3, [r7, #14]
 80065b8:	2b80      	cmp	r3, #128	; 0x80
 80065ba:	d008      	beq.n	80065ce <USBD_StdEPReq+0xbe>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	88db      	ldrh	r3, [r3, #6]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d104      	bne.n	80065ce <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80065c4:	7bbb      	ldrb	r3, [r7, #14]
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f004 fb21 	bl	800ac10 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fd1a 	bl	8007008 <USBD_CtlSendStatus>

        break;
 80065d4:	e004      	b.n	80065e0 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fc4a 	bl	8006e72 <USBD_CtlError>
        break;
 80065de:	bf00      	nop
      }
      break;
 80065e0:	e0e8      	b.n	80067b4 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d002      	beq.n	80065f2 <USBD_StdEPReq+0xe2>
 80065ec:	2b03      	cmp	r3, #3
 80065ee:	d016      	beq.n	800661e <USBD_StdEPReq+0x10e>
 80065f0:	e02e      	b.n	8006650 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065f2:	7bbb      	ldrb	r3, [r7, #14]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00d      	beq.n	8006614 <USBD_StdEPReq+0x104>
 80065f8:	7bbb      	ldrb	r3, [r7, #14]
 80065fa:	2b80      	cmp	r3, #128	; 0x80
 80065fc:	d00a      	beq.n	8006614 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80065fe:	7bbb      	ldrb	r3, [r7, #14]
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f004 fb04 	bl	800ac10 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006608:	2180      	movs	r1, #128	; 0x80
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f004 fb00 	bl	800ac10 <USBD_LL_StallEP>
 8006610:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006612:	e023      	b.n	800665c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fc2b 	bl	8006e72 <USBD_CtlError>
        break;
 800661c:	e01e      	b.n	800665c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	885b      	ldrh	r3, [r3, #2]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d119      	bne.n	800665a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006626:	7bbb      	ldrb	r3, [r7, #14]
 8006628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006630:	7bbb      	ldrb	r3, [r7, #14]
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f004 fb0a 	bl	800ac4e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fce4 	bl	8007008 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	4798      	blx	r3
        }
        break;
 800664e:	e004      	b.n	800665a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fc0d 	bl	8006e72 <USBD_CtlError>
        break;
 8006658:	e000      	b.n	800665c <USBD_StdEPReq+0x14c>
        break;
 800665a:	bf00      	nop
      }
      break;
 800665c:	e0aa      	b.n	80067b4 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006664:	2b02      	cmp	r3, #2
 8006666:	d002      	beq.n	800666e <USBD_StdEPReq+0x15e>
 8006668:	2b03      	cmp	r3, #3
 800666a:	d032      	beq.n	80066d2 <USBD_StdEPReq+0x1c2>
 800666c:	e097      	b.n	800679e <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800666e:	7bbb      	ldrb	r3, [r7, #14]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d007      	beq.n	8006684 <USBD_StdEPReq+0x174>
 8006674:	7bbb      	ldrb	r3, [r7, #14]
 8006676:	2b80      	cmp	r3, #128	; 0x80
 8006678:	d004      	beq.n	8006684 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fbf8 	bl	8006e72 <USBD_CtlError>
          break;
 8006682:	e091      	b.n	80067a8 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006688:	2b00      	cmp	r3, #0
 800668a:	da0b      	bge.n	80066a4 <USBD_StdEPReq+0x194>
 800668c:	7bbb      	ldrb	r3, [r7, #14]
 800668e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	3310      	adds	r3, #16
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	4413      	add	r3, r2
 80066a0:	3304      	adds	r3, #4
 80066a2:	e00b      	b.n	80066bc <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 80066a4:	7bbb      	ldrb	r3, [r7, #14]
 80066a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	4413      	add	r3, r2
 80066ba:	3304      	adds	r3, #4
 80066bc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2202      	movs	r2, #2
 80066c8:	4619      	mov	r1, r3
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fc42 	bl	8006f54 <USBD_CtlSendData>
        break;
 80066d0:	e06a      	b.n	80067a8 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80066d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	da11      	bge.n	80066fe <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	f003 020f 	and.w	r2, r3, #15
 80066e0:	6879      	ldr	r1, [r7, #4]
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	440b      	add	r3, r1
 80066ec:	3324      	adds	r3, #36	; 0x24
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d117      	bne.n	8006724 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fbbb 	bl	8006e72 <USBD_CtlError>
            break;
 80066fc:	e054      	b.n	80067a8 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	f003 020f 	and.w	r2, r3, #15
 8006704:	6879      	ldr	r1, [r7, #4]
 8006706:	4613      	mov	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	440b      	add	r3, r1
 8006710:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d104      	bne.n	8006724 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800671a:	6839      	ldr	r1, [r7, #0]
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fba8 	bl	8006e72 <USBD_CtlError>
            break;
 8006722:	e041      	b.n	80067a8 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006728:	2b00      	cmp	r3, #0
 800672a:	da0b      	bge.n	8006744 <USBD_StdEPReq+0x234>
 800672c:	7bbb      	ldrb	r3, [r7, #14]
 800672e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	3310      	adds	r3, #16
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	4413      	add	r3, r2
 8006740:	3304      	adds	r3, #4
 8006742:	e00b      	b.n	800675c <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006744:	7bbb      	ldrb	r3, [r7, #14]
 8006746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800674a:	4613      	mov	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	4413      	add	r3, r2
 800675a:	3304      	adds	r3, #4
 800675c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800675e:	7bbb      	ldrb	r3, [r7, #14]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <USBD_StdEPReq+0x25a>
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	2b80      	cmp	r3, #128	; 0x80
 8006768:	d103      	bne.n	8006772 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	e00e      	b.n	8006790 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f004 fa88 	bl	800ac8c <USBD_LL_IsStallEP>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2201      	movs	r2, #1
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	e002      	b.n	8006790 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2200      	movs	r2, #0
 800678e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2202      	movs	r2, #2
 8006794:	4619      	mov	r1, r3
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fbdc 	bl	8006f54 <USBD_CtlSendData>
          break;
 800679c:	e004      	b.n	80067a8 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fb66 	bl	8006e72 <USBD_CtlError>
        break;
 80067a6:	bf00      	nop
      }
      break;
 80067a8:	e004      	b.n	80067b4 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fb60 	bl	8006e72 <USBD_CtlError>
      break;
 80067b2:	bf00      	nop
    }
    break;
 80067b4:	e004      	b.n	80067c0 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fb5a 	bl	8006e72 <USBD_CtlError>
    break;
 80067be:	bf00      	nop
  }

  return ret;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	885b      	ldrh	r3, [r3, #2]
 80067e6:	0a1b      	lsrs	r3, r3, #8
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	3b01      	subs	r3, #1
 80067ec:	2b0e      	cmp	r3, #14
 80067ee:	f200 8152 	bhi.w	8006a96 <USBD_GetDescriptor+0x2ca>
 80067f2:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <USBD_GetDescriptor+0x2c>)
 80067f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f8:	08006869 	.word	0x08006869
 80067fc:	08006881 	.word	0x08006881
 8006800:	080068c1 	.word	0x080068c1
 8006804:	08006a97 	.word	0x08006a97
 8006808:	08006a97 	.word	0x08006a97
 800680c:	08006a37 	.word	0x08006a37
 8006810:	08006a63 	.word	0x08006a63
 8006814:	08006a97 	.word	0x08006a97
 8006818:	08006a97 	.word	0x08006a97
 800681c:	08006a97 	.word	0x08006a97
 8006820:	08006a97 	.word	0x08006a97
 8006824:	08006a97 	.word	0x08006a97
 8006828:	08006a97 	.word	0x08006a97
 800682c:	08006a97 	.word	0x08006a97
 8006830:	08006835 	.word	0x08006835
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00b      	beq.n	8006858 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	7c12      	ldrb	r2, [r2, #16]
 800684c:	f107 0108 	add.w	r1, r7, #8
 8006850:	4610      	mov	r0, r2
 8006852:	4798      	blx	r3
 8006854:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006856:	e126      	b.n	8006aa6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006858:	6839      	ldr	r1, [r7, #0]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fb09 	bl	8006e72 <USBD_CtlError>
      err++;
 8006860:	7afb      	ldrb	r3, [r7, #11]
 8006862:	3301      	adds	r3, #1
 8006864:	72fb      	strb	r3, [r7, #11]
    break;
 8006866:	e11e      	b.n	8006aa6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	7c12      	ldrb	r2, [r2, #16]
 8006874:	f107 0108 	add.w	r1, r7, #8
 8006878:	4610      	mov	r0, r2
 800687a:	4798      	blx	r3
 800687c:	60f8      	str	r0, [r7, #12]
    break;
 800687e:	e112      	b.n	8006aa6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	7c1b      	ldrb	r3, [r3, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10d      	bne.n	80068a4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006890:	f107 0208 	add.w	r2, r7, #8
 8006894:	4610      	mov	r0, r2
 8006896:	4798      	blx	r3
 8006898:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3301      	adds	r3, #1
 800689e:	2202      	movs	r2, #2
 80068a0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80068a2:	e100      	b.n	8006aa6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	f107 0208 	add.w	r2, r7, #8
 80068b0:	4610      	mov	r0, r2
 80068b2:	4798      	blx	r3
 80068b4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3301      	adds	r3, #1
 80068ba:	2202      	movs	r2, #2
 80068bc:	701a      	strb	r2, [r3, #0]
    break;
 80068be:	e0f2      	b.n	8006aa6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	885b      	ldrh	r3, [r3, #2]
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b05      	cmp	r3, #5
 80068c8:	f200 80ac 	bhi.w	8006a24 <USBD_GetDescriptor+0x258>
 80068cc:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <USBD_GetDescriptor+0x108>)
 80068ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d2:	bf00      	nop
 80068d4:	080068ed 	.word	0x080068ed
 80068d8:	08006921 	.word	0x08006921
 80068dc:	08006955 	.word	0x08006955
 80068e0:	08006989 	.word	0x08006989
 80068e4:	080069bd 	.word	0x080069bd
 80068e8:	080069f1 	.word	0x080069f1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00b      	beq.n	8006910 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	7c12      	ldrb	r2, [r2, #16]
 8006904:	f107 0108 	add.w	r1, r7, #8
 8006908:	4610      	mov	r0, r2
 800690a:	4798      	blx	r3
 800690c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800690e:	e091      	b.n	8006a34 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 faad 	bl	8006e72 <USBD_CtlError>
        err++;
 8006918:	7afb      	ldrb	r3, [r7, #11]
 800691a:	3301      	adds	r3, #1
 800691c:	72fb      	strb	r3, [r7, #11]
      break;
 800691e:	e089      	b.n	8006a34 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00b      	beq.n	8006944 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	7c12      	ldrb	r2, [r2, #16]
 8006938:	f107 0108 	add.w	r1, r7, #8
 800693c:	4610      	mov	r0, r2
 800693e:	4798      	blx	r3
 8006940:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006942:	e077      	b.n	8006a34 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fa93 	bl	8006e72 <USBD_CtlError>
        err++;
 800694c:	7afb      	ldrb	r3, [r7, #11]
 800694e:	3301      	adds	r3, #1
 8006950:	72fb      	strb	r3, [r7, #11]
      break;
 8006952:	e06f      	b.n	8006a34 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00b      	beq.n	8006978 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	7c12      	ldrb	r2, [r2, #16]
 800696c:	f107 0108 	add.w	r1, r7, #8
 8006970:	4610      	mov	r0, r2
 8006972:	4798      	blx	r3
 8006974:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006976:	e05d      	b.n	8006a34 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa79 	bl	8006e72 <USBD_CtlError>
        err++;
 8006980:	7afb      	ldrb	r3, [r7, #11]
 8006982:	3301      	adds	r3, #1
 8006984:	72fb      	strb	r3, [r7, #11]
      break;
 8006986:	e055      	b.n	8006a34 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00b      	beq.n	80069ac <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	7c12      	ldrb	r2, [r2, #16]
 80069a0:	f107 0108 	add.w	r1, r7, #8
 80069a4:	4610      	mov	r0, r2
 80069a6:	4798      	blx	r3
 80069a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069aa:	e043      	b.n	8006a34 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fa5f 	bl	8006e72 <USBD_CtlError>
        err++;
 80069b4:	7afb      	ldrb	r3, [r7, #11]
 80069b6:	3301      	adds	r3, #1
 80069b8:	72fb      	strb	r3, [r7, #11]
      break;
 80069ba:	e03b      	b.n	8006a34 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00b      	beq.n	80069e0 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	7c12      	ldrb	r2, [r2, #16]
 80069d4:	f107 0108 	add.w	r1, r7, #8
 80069d8:	4610      	mov	r0, r2
 80069da:	4798      	blx	r3
 80069dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069de:	e029      	b.n	8006a34 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fa45 	bl	8006e72 <USBD_CtlError>
        err++;
 80069e8:	7afb      	ldrb	r3, [r7, #11]
 80069ea:	3301      	adds	r3, #1
 80069ec:	72fb      	strb	r3, [r7, #11]
      break;
 80069ee:	e021      	b.n	8006a34 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00b      	beq.n	8006a14 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	7c12      	ldrb	r2, [r2, #16]
 8006a08:	f107 0108 	add.w	r1, r7, #8
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	4798      	blx	r3
 8006a10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a12:	e00f      	b.n	8006a34 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fa2b 	bl	8006e72 <USBD_CtlError>
        err++;
 8006a1c:	7afb      	ldrb	r3, [r7, #11]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	72fb      	strb	r3, [r7, #11]
      break;
 8006a22:	e007      	b.n	8006a34 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fa23 	bl	8006e72 <USBD_CtlError>
      err++;
 8006a2c:	7afb      	ldrb	r3, [r7, #11]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006a32:	bf00      	nop
    }
    break;
 8006a34:	e037      	b.n	8006aa6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	7c1b      	ldrb	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d109      	bne.n	8006a52 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a46:	f107 0208 	add.w	r2, r7, #8
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	4798      	blx	r3
 8006a4e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006a50:	e029      	b.n	8006aa6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fa0c 	bl	8006e72 <USBD_CtlError>
      err++;
 8006a5a:	7afb      	ldrb	r3, [r7, #11]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	72fb      	strb	r3, [r7, #11]
    break;
 8006a60:	e021      	b.n	8006aa6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	7c1b      	ldrb	r3, [r3, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10d      	bne.n	8006a86 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a72:	f107 0208 	add.w	r2, r7, #8
 8006a76:	4610      	mov	r0, r2
 8006a78:	4798      	blx	r3
 8006a7a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	2207      	movs	r2, #7
 8006a82:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006a84:	e00f      	b.n	8006aa6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f9f2 	bl	8006e72 <USBD_CtlError>
      err++;
 8006a8e:	7afb      	ldrb	r3, [r7, #11]
 8006a90:	3301      	adds	r3, #1
 8006a92:	72fb      	strb	r3, [r7, #11]
    break;
 8006a94:	e007      	b.n	8006aa6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f9ea 	bl	8006e72 <USBD_CtlError>
    err++;
 8006a9e:	7afb      	ldrb	r3, [r7, #11]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	72fb      	strb	r3, [r7, #11]
    break;
 8006aa4:	bf00      	nop
  }

  if (err != 0U)
 8006aa6:	7afb      	ldrb	r3, [r7, #11]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d11e      	bne.n	8006aea <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	88db      	ldrh	r3, [r3, #6]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d016      	beq.n	8006ae2 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8006ab4:	893b      	ldrh	r3, [r7, #8]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00e      	beq.n	8006ad8 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	88da      	ldrh	r2, [r3, #6]
 8006abe:	893b      	ldrh	r3, [r7, #8]
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	bf28      	it	cs
 8006ac4:	4613      	movcs	r3, r2
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006aca:	893b      	ldrh	r3, [r7, #8]
 8006acc:	461a      	mov	r2, r3
 8006ace:	68f9      	ldr	r1, [r7, #12]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fa3f 	bl	8006f54 <USBD_CtlSendData>
 8006ad6:	e009      	b.n	8006aec <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f9c9 	bl	8006e72 <USBD_CtlError>
 8006ae0:	e004      	b.n	8006aec <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fa90 	bl	8007008 <USBD_CtlSendStatus>
 8006ae8:	e000      	b.n	8006aec <USBD_GetDescriptor+0x320>
    return;
 8006aea:	bf00      	nop
    }
  }
}
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop

08006af4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	889b      	ldrh	r3, [r3, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d130      	bne.n	8006b68 <USBD_SetAddress+0x74>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	88db      	ldrh	r3, [r3, #6]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d12c      	bne.n	8006b68 <USBD_SetAddress+0x74>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	885b      	ldrh	r3, [r3, #2]
 8006b12:	2b7f      	cmp	r3, #127	; 0x7f
 8006b14:	d828      	bhi.n	8006b68 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	885b      	ldrh	r3, [r3, #2]
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d104      	bne.n	8006b36 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f99f 	bl	8006e72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b34:	e01d      	b.n	8006b72 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	7bfa      	ldrb	r2, [r7, #15]
 8006b3a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f004 f8ce 	bl	800ace4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fa5d 	bl	8007008 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d004      	beq.n	8006b5e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b5c:	e009      	b.n	8006b72 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b66:	e004      	b.n	8006b72 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f981 	bl	8006e72 <USBD_CtlError>
  }
}
 8006b70:	bf00      	nop
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	885b      	ldrh	r3, [r3, #2]
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	4b4b      	ldr	r3, [pc, #300]	; (8006cc0 <USBD_SetConfig+0x144>)
 8006b92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b94:	4b4a      	ldr	r3, [pc, #296]	; (8006cc0 <USBD_SetConfig+0x144>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d905      	bls.n	8006ba8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f967 	bl	8006e72 <USBD_CtlError>
    return USBD_FAIL;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e087      	b.n	8006cb8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d002      	beq.n	8006bb8 <USBD_SetConfig+0x3c>
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d025      	beq.n	8006c02 <USBD_SetConfig+0x86>
 8006bb6:	e071      	b.n	8006c9c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006bb8:	4b41      	ldr	r3, [pc, #260]	; (8006cc0 <USBD_SetConfig+0x144>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01c      	beq.n	8006bfa <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006bc0:	4b3f      	ldr	r3, [pc, #252]	; (8006cc0 <USBD_SetConfig+0x144>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006bca:	4b3d      	ldr	r3, [pc, #244]	; (8006cc0 <USBD_SetConfig+0x144>)
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff f96f 	bl	8005eb4 <USBD_SetClassConfig>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d004      	beq.n	8006bea <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f945 	bl	8006e72 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006be8:	e065      	b.n	8006cb6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fa0c 	bl	8007008 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2203      	movs	r2, #3
 8006bf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006bf8:	e05d      	b.n	8006cb6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fa04 	bl	8007008 <USBD_CtlSendStatus>
    break;
 8006c00:	e059      	b.n	8006cb6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006c02:	4b2f      	ldr	r3, [pc, #188]	; (8006cc0 <USBD_SetConfig+0x144>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d112      	bne.n	8006c30 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006c12:	4b2b      	ldr	r3, [pc, #172]	; (8006cc0 <USBD_SetConfig+0x144>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c1c:	4b28      	ldr	r3, [pc, #160]	; (8006cc0 <USBD_SetConfig+0x144>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff f962 	bl	8005eec <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f9ed 	bl	8007008 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006c2e:	e042      	b.n	8006cb6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006c30:	4b23      	ldr	r3, [pc, #140]	; (8006cc0 <USBD_SetConfig+0x144>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d02a      	beq.n	8006c94 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7ff f950 	bl	8005eec <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006c4c:	4b1c      	ldr	r3, [pc, #112]	; (8006cc0 <USBD_SetConfig+0x144>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c56:	4b1a      	ldr	r3, [pc, #104]	; (8006cc0 <USBD_SetConfig+0x144>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff f929 	bl	8005eb4 <USBD_SetClassConfig>
 8006c62:	4603      	mov	r3, r0
 8006c64:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00f      	beq.n	8006c8c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f8ff 	bl	8006e72 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7ff f935 	bl	8005eec <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2202      	movs	r2, #2
 8006c86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006c8a:	e014      	b.n	8006cb6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f9bb 	bl	8007008 <USBD_CtlSendStatus>
    break;
 8006c92:	e010      	b.n	8006cb6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f9b7 	bl	8007008 <USBD_CtlSendStatus>
    break;
 8006c9a:	e00c      	b.n	8006cb6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f8e7 	bl	8006e72 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ca4:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <USBD_SetConfig+0x144>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7ff f91e 	bl	8005eec <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8006cb4:	bf00      	nop
  }

  return ret;
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20000228 	.word	0x20000228

08006cc4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	88db      	ldrh	r3, [r3, #6]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d004      	beq.n	8006ce0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f8ca 	bl	8006e72 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006cde:	e022      	b.n	8006d26 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	dc02      	bgt.n	8006cf0 <USBD_GetConfig+0x2c>
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	dc03      	bgt.n	8006cf6 <USBD_GetConfig+0x32>
 8006cee:	e015      	b.n	8006d1c <USBD_GetConfig+0x58>
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	d00b      	beq.n	8006d0c <USBD_GetConfig+0x48>
 8006cf4:	e012      	b.n	8006d1c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3308      	adds	r3, #8
 8006d00:	2201      	movs	r2, #1
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f925 	bl	8006f54 <USBD_CtlSendData>
      break;
 8006d0a:	e00c      	b.n	8006d26 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3304      	adds	r3, #4
 8006d10:	2201      	movs	r2, #1
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f91d 	bl	8006f54 <USBD_CtlSendData>
      break;
 8006d1a:	e004      	b.n	8006d26 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f8a7 	bl	8006e72 <USBD_CtlError>
      break;
 8006d24:	bf00      	nop
}
 8006d26:	bf00      	nop
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b082      	sub	sp, #8
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d81e      	bhi.n	8006d82 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	88db      	ldrh	r3, [r3, #6]
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d004      	beq.n	8006d56 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f88f 	bl	8006e72 <USBD_CtlError>
      break;
 8006d54:	e01a      	b.n	8006d8c <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d005      	beq.n	8006d72 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f043 0202 	orr.w	r2, r3, #2
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	330c      	adds	r3, #12
 8006d76:	2202      	movs	r2, #2
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f8ea 	bl	8006f54 <USBD_CtlSendData>
    break;
 8006d80:	e004      	b.n	8006d8c <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f874 	bl	8006e72 <USBD_CtlError>
    break;
 8006d8a:	bf00      	nop
  }
}
 8006d8c:	bf00      	nop
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	885b      	ldrh	r3, [r3, #2]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d106      	bne.n	8006db4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f92a 	bl	8007008 <USBD_CtlSendStatus>
  }
}
 8006db4:	bf00      	nop
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d80b      	bhi.n	8006dea <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	885b      	ldrh	r3, [r3, #2]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d10c      	bne.n	8006df4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f910 	bl	8007008 <USBD_CtlSendStatus>
      }
      break;
 8006de8:	e004      	b.n	8006df4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f840 	bl	8006e72 <USBD_CtlError>
      break;
 8006df2:	e000      	b.n	8006df6 <USBD_ClrFeature+0x3a>
      break;
 8006df4:	bf00      	nop
  }
}
 8006df6:	bf00      	nop
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	781a      	ldrb	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	781a      	ldrb	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3301      	adds	r3, #1
 8006e26:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f7ff fa9c 	bl	8006366 <SWAPBYTE>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	461a      	mov	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7ff fa8f 	bl	8006366 <SWAPBYTE>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3301      	adds	r3, #1
 8006e54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f7ff fa82 	bl	8006366 <SWAPBYTE>
 8006e62:	4603      	mov	r3, r0
 8006e64:	461a      	mov	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	80da      	strh	r2, [r3, #6]
}
 8006e6a:	bf00      	nop
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e7c:	2180      	movs	r1, #128	; 0x80
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f003 fec6 	bl	800ac10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e84:	2100      	movs	r1, #0
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f003 fec2 	bl	800ac10 <USBD_LL_StallEP>
}
 8006e8c:	bf00      	nop
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d036      	beq.n	8006f18 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006eae:	6938      	ldr	r0, [r7, #16]
 8006eb0:	f000 f836 	bl	8006f20 <USBD_GetLen>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ec2:	7dfb      	ldrb	r3, [r7, #23]
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	7812      	ldrb	r2, [r2, #0]
 8006ecc:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	4413      	add	r3, r2
 8006eda:	2203      	movs	r2, #3
 8006edc:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ee4:	e013      	b.n	8006f0e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	4413      	add	r3, r2
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	7812      	ldrb	r2, [r2, #0]
 8006ef0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	613b      	str	r3, [r7, #16]
    idx++;
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	3301      	adds	r3, #1
 8006efc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	4413      	add	r3, r2
 8006f04:	2200      	movs	r2, #0
 8006f06:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f08:	7dfb      	ldrb	r3, [r7, #23]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e7      	bne.n	8006ee6 <USBD_GetString+0x52>
 8006f16:	e000      	b.n	8006f1a <USBD_GetString+0x86>
    return;
 8006f18:	bf00      	nop
  }
}
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f30:	e005      	b.n	8006f3e <USBD_GetLen+0x1e>
  {
    len++;
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
 8006f34:	3301      	adds	r3, #1
 8006f36:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f5      	bne.n	8006f32 <USBD_GetLen+0x12>
  }

  return len;
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	2100      	movs	r1, #0
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f003 fed1 	bl	800ad22 <USBD_LL_Transmit>

  return USBD_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	60f8      	str	r0, [r7, #12]
 8006f92:	60b9      	str	r1, [r7, #8]
 8006f94:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f003 fec0 	bl	800ad22 <USBD_LL_Transmit>

  return USBD_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2203      	movs	r2, #3
 8006fbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f003 fec4 	bl	800ad64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f003 feb3 	bl	800ad64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2204      	movs	r2, #4
 8007014:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007018:	2300      	movs	r3, #0
 800701a:	2200      	movs	r2, #0
 800701c:	2100      	movs	r1, #0
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f003 fe7f 	bl	800ad22 <USBD_LL_Transmit>

  return USBD_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b082      	sub	sp, #8
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2205      	movs	r2, #5
 800703a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800703e:	2300      	movs	r3, #0
 8007040:	2200      	movs	r2, #0
 8007042:	2100      	movs	r1, #0
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f003 fe8d 	bl	800ad64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	4613      	mov	r3, r2
 8007060:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007062:	2301      	movs	r3, #1
 8007064:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007066:	2300      	movs	r3, #0
 8007068:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800706a:	4b1f      	ldr	r3, [pc, #124]	; (80070e8 <FATFS_LinkDriverEx+0x94>)
 800706c:	7a5b      	ldrb	r3, [r3, #9]
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d131      	bne.n	80070d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007074:	4b1c      	ldr	r3, [pc, #112]	; (80070e8 <FATFS_LinkDriverEx+0x94>)
 8007076:	7a5b      	ldrb	r3, [r3, #9]
 8007078:	b2db      	uxtb	r3, r3
 800707a:	461a      	mov	r2, r3
 800707c:	4b1a      	ldr	r3, [pc, #104]	; (80070e8 <FATFS_LinkDriverEx+0x94>)
 800707e:	2100      	movs	r1, #0
 8007080:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007082:	4b19      	ldr	r3, [pc, #100]	; (80070e8 <FATFS_LinkDriverEx+0x94>)
 8007084:	7a5b      	ldrb	r3, [r3, #9]
 8007086:	b2db      	uxtb	r3, r3
 8007088:	4a17      	ldr	r2, [pc, #92]	; (80070e8 <FATFS_LinkDriverEx+0x94>)
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007092:	4b15      	ldr	r3, [pc, #84]	; (80070e8 <FATFS_LinkDriverEx+0x94>)
 8007094:	7a5b      	ldrb	r3, [r3, #9]
 8007096:	b2db      	uxtb	r3, r3
 8007098:	461a      	mov	r2, r3
 800709a:	4b13      	ldr	r3, [pc, #76]	; (80070e8 <FATFS_LinkDriverEx+0x94>)
 800709c:	4413      	add	r3, r2
 800709e:	79fa      	ldrb	r2, [r7, #7]
 80070a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80070a2:	4b11      	ldr	r3, [pc, #68]	; (80070e8 <FATFS_LinkDriverEx+0x94>)
 80070a4:	7a5b      	ldrb	r3, [r3, #9]
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	b2d1      	uxtb	r1, r2
 80070ac:	4a0e      	ldr	r2, [pc, #56]	; (80070e8 <FATFS_LinkDriverEx+0x94>)
 80070ae:	7251      	strb	r1, [r2, #9]
 80070b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80070b2:	7dbb      	ldrb	r3, [r7, #22]
 80070b4:	3330      	adds	r3, #48	; 0x30
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	3301      	adds	r3, #1
 80070c0:	223a      	movs	r2, #58	; 0x3a
 80070c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	3302      	adds	r3, #2
 80070c8:	222f      	movs	r2, #47	; 0x2f
 80070ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	3303      	adds	r3, #3
 80070d0:	2200      	movs	r2, #0
 80070d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	2000022c 	.word	0x2000022c

080070ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80070f6:	2200      	movs	r2, #0
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff ffaa 	bl	8007054 <FATFS_LinkDriverEx>
 8007100:	4603      	mov	r3, r0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800710a:	b480      	push	{r7}
 800710c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800710e:	bf00      	nop
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800711e:	f3ef 8305 	mrs	r3, IPSR
 8007122:	60bb      	str	r3, [r7, #8]
  return(result);
 8007124:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10f      	bne.n	800714a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800712a:	f3ef 8310 	mrs	r3, PRIMASK
 800712e:	607b      	str	r3, [r7, #4]
  return(result);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d105      	bne.n	8007142 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007136:	f3ef 8311 	mrs	r3, BASEPRI
 800713a:	603b      	str	r3, [r7, #0]
  return(result);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d007      	beq.n	8007152 <osKernelInitialize+0x3a>
 8007142:	4b0e      	ldr	r3, [pc, #56]	; (800717c <osKernelInitialize+0x64>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b02      	cmp	r3, #2
 8007148:	d103      	bne.n	8007152 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800714a:	f06f 0305 	mvn.w	r3, #5
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	e00c      	b.n	800716c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007152:	4b0a      	ldr	r3, [pc, #40]	; (800717c <osKernelInitialize+0x64>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d105      	bne.n	8007166 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800715a:	4b08      	ldr	r3, [pc, #32]	; (800717c <osKernelInitialize+0x64>)
 800715c:	2201      	movs	r2, #1
 800715e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	e002      	b.n	800716c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007166:	f04f 33ff 	mov.w	r3, #4294967295
 800716a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800716c:	68fb      	ldr	r3, [r7, #12]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	20000238 	.word	0x20000238

08007180 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007186:	f3ef 8305 	mrs	r3, IPSR
 800718a:	60bb      	str	r3, [r7, #8]
  return(result);
 800718c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10f      	bne.n	80071b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007192:	f3ef 8310 	mrs	r3, PRIMASK
 8007196:	607b      	str	r3, [r7, #4]
  return(result);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d105      	bne.n	80071aa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800719e:	f3ef 8311 	mrs	r3, BASEPRI
 80071a2:	603b      	str	r3, [r7, #0]
  return(result);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d007      	beq.n	80071ba <osKernelStart+0x3a>
 80071aa:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <osKernelStart+0x68>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d103      	bne.n	80071ba <osKernelStart+0x3a>
    stat = osErrorISR;
 80071b2:	f06f 0305 	mvn.w	r3, #5
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	e010      	b.n	80071dc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80071ba:	4b0b      	ldr	r3, [pc, #44]	; (80071e8 <osKernelStart+0x68>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d109      	bne.n	80071d6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80071c2:	f7ff ffa2 	bl	800710a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80071c6:	4b08      	ldr	r3, [pc, #32]	; (80071e8 <osKernelStart+0x68>)
 80071c8:	2202      	movs	r2, #2
 80071ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80071cc:	f001 f8ca 	bl	8008364 <vTaskStartScheduler>
      stat = osOK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	e002      	b.n	80071dc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80071d6:	f04f 33ff 	mov.w	r3, #4294967295
 80071da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80071dc:	68fb      	ldr	r3, [r7, #12]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20000238 	.word	0x20000238

080071ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b090      	sub	sp, #64	; 0x40
 80071f0:	af04      	add	r7, sp, #16
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80071f8:	2300      	movs	r3, #0
 80071fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071fc:	f3ef 8305 	mrs	r3, IPSR
 8007200:	61fb      	str	r3, [r7, #28]
  return(result);
 8007202:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007204:	2b00      	cmp	r3, #0
 8007206:	f040 808f 	bne.w	8007328 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800720a:	f3ef 8310 	mrs	r3, PRIMASK
 800720e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d105      	bne.n	8007222 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007216:	f3ef 8311 	mrs	r3, BASEPRI
 800721a:	617b      	str	r3, [r7, #20]
  return(result);
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <osThreadNew+0x3e>
 8007222:	4b44      	ldr	r3, [pc, #272]	; (8007334 <osThreadNew+0x148>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b02      	cmp	r3, #2
 8007228:	d07e      	beq.n	8007328 <osThreadNew+0x13c>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d07b      	beq.n	8007328 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007230:	2380      	movs	r3, #128	; 0x80
 8007232:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007234:	2318      	movs	r3, #24
 8007236:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007238:	2300      	movs	r3, #0
 800723a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800723c:	f04f 33ff 	mov.w	r3, #4294967295
 8007240:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d045      	beq.n	80072d4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <osThreadNew+0x6a>
        name = attr->name;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	2b00      	cmp	r3, #0
 8007268:	d008      	beq.n	800727c <osThreadNew+0x90>
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	2b38      	cmp	r3, #56	; 0x38
 800726e:	d805      	bhi.n	800727c <osThreadNew+0x90>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <osThreadNew+0x94>
        return (NULL);
 800727c:	2300      	movs	r3, #0
 800727e:	e054      	b.n	800732a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	695b      	ldr	r3, [r3, #20]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d003      	beq.n	8007290 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	089b      	lsrs	r3, r3, #2
 800728e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00e      	beq.n	80072b6 <osThreadNew+0xca>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	2bbb      	cmp	r3, #187	; 0xbb
 800729e:	d90a      	bls.n	80072b6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d006      	beq.n	80072b6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <osThreadNew+0xca>
        mem = 1;
 80072b0:	2301      	movs	r3, #1
 80072b2:	623b      	str	r3, [r7, #32]
 80072b4:	e010      	b.n	80072d8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10c      	bne.n	80072d8 <osThreadNew+0xec>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d108      	bne.n	80072d8 <osThreadNew+0xec>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d104      	bne.n	80072d8 <osThreadNew+0xec>
          mem = 0;
 80072ce:	2300      	movs	r3, #0
 80072d0:	623b      	str	r3, [r7, #32]
 80072d2:	e001      	b.n	80072d8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80072d4:	2300      	movs	r3, #0
 80072d6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d110      	bne.n	8007300 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072e6:	9202      	str	r2, [sp, #8]
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 fe3f 	bl	8007f78 <xTaskCreateStatic>
 80072fa:	4603      	mov	r3, r0
 80072fc:	613b      	str	r3, [r7, #16]
 80072fe:	e013      	b.n	8007328 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d110      	bne.n	8007328 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	b29a      	uxth	r2, r3
 800730a:	f107 0310 	add.w	r3, r7, #16
 800730e:	9301      	str	r3, [sp, #4]
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 fe90 	bl	800803e <xTaskCreate>
 800731e:	4603      	mov	r3, r0
 8007320:	2b01      	cmp	r3, #1
 8007322:	d001      	beq.n	8007328 <osThreadNew+0x13c>
          hTask = NULL;
 8007324:	2300      	movs	r3, #0
 8007326:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007328:	693b      	ldr	r3, [r7, #16]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3730      	adds	r7, #48	; 0x30
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20000238 	.word	0x20000238

08007338 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007340:	f3ef 8305 	mrs	r3, IPSR
 8007344:	613b      	str	r3, [r7, #16]
  return(result);
 8007346:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10f      	bne.n	800736c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800734c:	f3ef 8310 	mrs	r3, PRIMASK
 8007350:	60fb      	str	r3, [r7, #12]
  return(result);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d105      	bne.n	8007364 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007358:	f3ef 8311 	mrs	r3, BASEPRI
 800735c:	60bb      	str	r3, [r7, #8]
  return(result);
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d007      	beq.n	8007374 <osDelay+0x3c>
 8007364:	4b0a      	ldr	r3, [pc, #40]	; (8007390 <osDelay+0x58>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b02      	cmp	r3, #2
 800736a:	d103      	bne.n	8007374 <osDelay+0x3c>
    stat = osErrorISR;
 800736c:	f06f 0305 	mvn.w	r3, #5
 8007370:	617b      	str	r3, [r7, #20]
 8007372:	e007      	b.n	8007384 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007374:	2300      	movs	r3, #0
 8007376:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <osDelay+0x4c>
      vTaskDelay(ticks);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 ffba 	bl	80082f8 <vTaskDelay>
    }
  }

  return (stat);
 8007384:	697b      	ldr	r3, [r7, #20]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20000238 	.word	0x20000238

08007394 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4a07      	ldr	r2, [pc, #28]	; (80073c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80073a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	4a06      	ldr	r2, [pc, #24]	; (80073c4 <vApplicationGetIdleTaskMemory+0x30>)
 80073aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2280      	movs	r2, #128	; 0x80
 80073b0:	601a      	str	r2, [r3, #0]
}
 80073b2:	bf00      	nop
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	2000023c 	.word	0x2000023c
 80073c4:	200002f8 	.word	0x200002f8

080073c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4a07      	ldr	r2, [pc, #28]	; (80073f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80073d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	4a06      	ldr	r2, [pc, #24]	; (80073f8 <vApplicationGetTimerTaskMemory+0x30>)
 80073de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073e6:	601a      	str	r2, [r3, #0]
}
 80073e8:	bf00      	nop
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	200004f8 	.word	0x200004f8
 80073f8:	200005b4 	.word	0x200005b4

080073fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f103 0208 	add.w	r2, r3, #8
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f04f 32ff 	mov.w	r2, #4294967295
 8007414:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f103 0208 	add.w	r2, r3, #8
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f103 0208 	add.w	r2, r3, #8
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007456:	b480      	push	{r7}
 8007458:	b085      	sub	sp, #20
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	601a      	str	r2, [r3, #0]
}
 8007492:	bf00      	nop
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800749e:	b480      	push	{r7}
 80074a0:	b085      	sub	sp, #20
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b4:	d103      	bne.n	80074be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	e00c      	b.n	80074d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3308      	adds	r3, #8
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	e002      	b.n	80074cc <vListInsert+0x2e>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d2f6      	bcs.n	80074c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	601a      	str	r2, [r3, #0]
}
 8007504:	bf00      	nop
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	6892      	ldr	r2, [r2, #8]
 8007526:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	6852      	ldr	r2, [r2, #4]
 8007530:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	429a      	cmp	r2, r3
 800753a:	d103      	bne.n	8007544 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689a      	ldr	r2, [r3, #8]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	1e5a      	subs	r2, r3, #1
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10c      	bne.n	8007592 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	b672      	cpsid	i
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	b662      	cpsie	i
 800758c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800758e:	bf00      	nop
 8007590:	e7fe      	b.n	8007590 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007592:	f002 f8a3 	bl	80096dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759e:	68f9      	ldr	r1, [r7, #12]
 80075a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075a2:	fb01 f303 	mul.w	r3, r1, r3
 80075a6:	441a      	add	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c2:	3b01      	subs	r3, #1
 80075c4:	68f9      	ldr	r1, [r7, #12]
 80075c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075c8:	fb01 f303 	mul.w	r3, r1, r3
 80075cc:	441a      	add	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	22ff      	movs	r2, #255	; 0xff
 80075d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	22ff      	movs	r2, #255	; 0xff
 80075de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d114      	bne.n	8007612 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01a      	beq.n	8007626 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3310      	adds	r3, #16
 80075f4:	4618      	mov	r0, r3
 80075f6:	f001 f95d 	bl	80088b4 <xTaskRemoveFromEventList>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d012      	beq.n	8007626 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007600:	4b0c      	ldr	r3, [pc, #48]	; (8007634 <xQueueGenericReset+0xd0>)
 8007602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007606:	601a      	str	r2, [r3, #0]
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	e009      	b.n	8007626 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3310      	adds	r3, #16
 8007616:	4618      	mov	r0, r3
 8007618:	f7ff fef0 	bl	80073fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	3324      	adds	r3, #36	; 0x24
 8007620:	4618      	mov	r0, r3
 8007622:	f7ff feeb 	bl	80073fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007626:	f002 f88d 	bl	8009744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800762a:	2301      	movs	r3, #1
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	e000ed04 	.word	0xe000ed04

08007638 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007638:	b580      	push	{r7, lr}
 800763a:	b08e      	sub	sp, #56	; 0x38
 800763c:	af02      	add	r7, sp, #8
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
 8007644:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10c      	bne.n	8007666 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	b672      	cpsid	i
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	b662      	cpsie	i
 8007660:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007662:	bf00      	nop
 8007664:	e7fe      	b.n	8007664 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d10c      	bne.n	8007686 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800766c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007670:	b672      	cpsid	i
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	b662      	cpsie	i
 8007680:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007682:	bf00      	nop
 8007684:	e7fe      	b.n	8007684 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <xQueueGenericCreateStatic+0x5a>
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <xQueueGenericCreateStatic+0x5e>
 8007692:	2301      	movs	r3, #1
 8007694:	e000      	b.n	8007698 <xQueueGenericCreateStatic+0x60>
 8007696:	2300      	movs	r3, #0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10c      	bne.n	80076b6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a0:	b672      	cpsid	i
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	b662      	cpsie	i
 80076b0:	623b      	str	r3, [r7, #32]
}
 80076b2:	bf00      	nop
 80076b4:	e7fe      	b.n	80076b4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d102      	bne.n	80076c2 <xQueueGenericCreateStatic+0x8a>
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <xQueueGenericCreateStatic+0x8e>
 80076c2:	2301      	movs	r3, #1
 80076c4:	e000      	b.n	80076c8 <xQueueGenericCreateStatic+0x90>
 80076c6:	2300      	movs	r3, #0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10c      	bne.n	80076e6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	b672      	cpsid	i
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	b662      	cpsie	i
 80076e0:	61fb      	str	r3, [r7, #28]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80076e6:	2350      	movs	r3, #80	; 0x50
 80076e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b50      	cmp	r3, #80	; 0x50
 80076ee:	d00c      	beq.n	800770a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	b672      	cpsid	i
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	b662      	cpsie	i
 8007704:	61bb      	str	r3, [r7, #24]
}
 8007706:	bf00      	nop
 8007708:	e7fe      	b.n	8007708 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800770a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00d      	beq.n	8007732 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800771e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	4613      	mov	r3, r2
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	68b9      	ldr	r1, [r7, #8]
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 f805 	bl	800773c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007734:	4618      	mov	r0, r3
 8007736:	3730      	adds	r7, #48	; 0x30
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
 8007748:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d103      	bne.n	8007758 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	e002      	b.n	800775e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800776a:	2101      	movs	r1, #1
 800776c:	69b8      	ldr	r0, [r7, #24]
 800776e:	f7ff fef9 	bl	8007564 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	78fa      	ldrb	r2, [r7, #3]
 8007776:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
	...

08007784 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b08e      	sub	sp, #56	; 0x38
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
 8007790:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007792:	2300      	movs	r3, #0
 8007794:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10c      	bne.n	80077ba <xQueueGenericSend+0x36>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	b672      	cpsid	i
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	b662      	cpsie	i
 80077b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077b6:	bf00      	nop
 80077b8:	e7fe      	b.n	80077b8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d103      	bne.n	80077c8 <xQueueGenericSend+0x44>
 80077c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <xQueueGenericSend+0x48>
 80077c8:	2301      	movs	r3, #1
 80077ca:	e000      	b.n	80077ce <xQueueGenericSend+0x4a>
 80077cc:	2300      	movs	r3, #0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10c      	bne.n	80077ec <xQueueGenericSend+0x68>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	b672      	cpsid	i
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	b662      	cpsie	i
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077e8:	bf00      	nop
 80077ea:	e7fe      	b.n	80077ea <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d103      	bne.n	80077fa <xQueueGenericSend+0x76>
 80077f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d101      	bne.n	80077fe <xQueueGenericSend+0x7a>
 80077fa:	2301      	movs	r3, #1
 80077fc:	e000      	b.n	8007800 <xQueueGenericSend+0x7c>
 80077fe:	2300      	movs	r3, #0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10c      	bne.n	800781e <xQueueGenericSend+0x9a>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	b672      	cpsid	i
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	b662      	cpsie	i
 8007818:	623b      	str	r3, [r7, #32]
}
 800781a:	bf00      	nop
 800781c:	e7fe      	b.n	800781c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800781e:	f001 fa13 	bl	8008c48 <xTaskGetSchedulerState>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d102      	bne.n	800782e <xQueueGenericSend+0xaa>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <xQueueGenericSend+0xae>
 800782e:	2301      	movs	r3, #1
 8007830:	e000      	b.n	8007834 <xQueueGenericSend+0xb0>
 8007832:	2300      	movs	r3, #0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10c      	bne.n	8007852 <xQueueGenericSend+0xce>
	__asm volatile
 8007838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783c:	b672      	cpsid	i
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	b662      	cpsie	i
 800784c:	61fb      	str	r3, [r7, #28]
}
 800784e:	bf00      	nop
 8007850:	e7fe      	b.n	8007850 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007852:	f001 ff43 	bl	80096dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785e:	429a      	cmp	r2, r3
 8007860:	d302      	bcc.n	8007868 <xQueueGenericSend+0xe4>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b02      	cmp	r3, #2
 8007866:	d129      	bne.n	80078bc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	68b9      	ldr	r1, [r7, #8]
 800786c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800786e:	f000 fa15 	bl	8007c9c <prvCopyDataToQueue>
 8007872:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	2b00      	cmp	r3, #0
 800787a:	d010      	beq.n	800789e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	3324      	adds	r3, #36	; 0x24
 8007880:	4618      	mov	r0, r3
 8007882:	f001 f817 	bl	80088b4 <xTaskRemoveFromEventList>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d013      	beq.n	80078b4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800788c:	4b3f      	ldr	r3, [pc, #252]	; (800798c <xQueueGenericSend+0x208>)
 800788e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	e00a      	b.n	80078b4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d007      	beq.n	80078b4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80078a4:	4b39      	ldr	r3, [pc, #228]	; (800798c <xQueueGenericSend+0x208>)
 80078a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80078b4:	f001 ff46 	bl	8009744 <vPortExitCritical>
				return pdPASS;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e063      	b.n	8007984 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d103      	bne.n	80078ca <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078c2:	f001 ff3f 	bl	8009744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	e05c      	b.n	8007984 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d106      	bne.n	80078de <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078d0:	f107 0314 	add.w	r3, r7, #20
 80078d4:	4618      	mov	r0, r3
 80078d6:	f001 f853 	bl	8008980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078da:	2301      	movs	r3, #1
 80078dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078de:	f001 ff31 	bl	8009744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078e2:	f000 fdb3 	bl	800844c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078e6:	f001 fef9 	bl	80096dc <vPortEnterCritical>
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078f0:	b25b      	sxtb	r3, r3
 80078f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f6:	d103      	bne.n	8007900 <xQueueGenericSend+0x17c>
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007902:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007906:	b25b      	sxtb	r3, r3
 8007908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790c:	d103      	bne.n	8007916 <xQueueGenericSend+0x192>
 800790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007910:	2200      	movs	r2, #0
 8007912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007916:	f001 ff15 	bl	8009744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800791a:	1d3a      	adds	r2, r7, #4
 800791c:	f107 0314 	add.w	r3, r7, #20
 8007920:	4611      	mov	r1, r2
 8007922:	4618      	mov	r0, r3
 8007924:	f001 f842 	bl	80089ac <xTaskCheckForTimeOut>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d124      	bne.n	8007978 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800792e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007930:	f000 faac 	bl	8007e8c <prvIsQueueFull>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d018      	beq.n	800796c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800793a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793c:	3310      	adds	r3, #16
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	4611      	mov	r1, r2
 8007942:	4618      	mov	r0, r3
 8007944:	f000 ff62 	bl	800880c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800794a:	f000 fa37 	bl	8007dbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800794e:	f000 fd8b 	bl	8008468 <xTaskResumeAll>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	f47f af7c 	bne.w	8007852 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800795a:	4b0c      	ldr	r3, [pc, #48]	; (800798c <xQueueGenericSend+0x208>)
 800795c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	e772      	b.n	8007852 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800796c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800796e:	f000 fa25 	bl	8007dbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007972:	f000 fd79 	bl	8008468 <xTaskResumeAll>
 8007976:	e76c      	b.n	8007852 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800797a:	f000 fa1f 	bl	8007dbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800797e:	f000 fd73 	bl	8008468 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007982:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007984:	4618      	mov	r0, r3
 8007986:	3738      	adds	r7, #56	; 0x38
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	e000ed04 	.word	0xe000ed04

08007990 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b08e      	sub	sp, #56	; 0x38
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10c      	bne.n	80079c2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ac:	b672      	cpsid	i
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	b662      	cpsie	i
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80079be:	bf00      	nop
 80079c0:	e7fe      	b.n	80079c0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d103      	bne.n	80079d0 <xQueueGenericSendFromISR+0x40>
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <xQueueGenericSendFromISR+0x44>
 80079d0:	2301      	movs	r3, #1
 80079d2:	e000      	b.n	80079d6 <xQueueGenericSendFromISR+0x46>
 80079d4:	2300      	movs	r3, #0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10c      	bne.n	80079f4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079de:	b672      	cpsid	i
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	b662      	cpsie	i
 80079ee:	623b      	str	r3, [r7, #32]
}
 80079f0:	bf00      	nop
 80079f2:	e7fe      	b.n	80079f2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d103      	bne.n	8007a02 <xQueueGenericSendFromISR+0x72>
 80079fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d101      	bne.n	8007a06 <xQueueGenericSendFromISR+0x76>
 8007a02:	2301      	movs	r3, #1
 8007a04:	e000      	b.n	8007a08 <xQueueGenericSendFromISR+0x78>
 8007a06:	2300      	movs	r3, #0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10c      	bne.n	8007a26 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a10:	b672      	cpsid	i
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	b662      	cpsie	i
 8007a20:	61fb      	str	r3, [r7, #28]
}
 8007a22:	bf00      	nop
 8007a24:	e7fe      	b.n	8007a24 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a26:	f001 ff41 	bl	80098ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a2a:	f3ef 8211 	mrs	r2, BASEPRI
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	b672      	cpsid	i
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	b662      	cpsie	i
 8007a42:	61ba      	str	r2, [r7, #24]
 8007a44:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a46:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d302      	bcc.n	8007a5c <xQueueGenericSendFromISR+0xcc>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d12c      	bne.n	8007ab6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a6c:	f000 f916 	bl	8007c9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a70:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a78:	d112      	bne.n	8007aa0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d016      	beq.n	8007ab0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	3324      	adds	r3, #36	; 0x24
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 ff14 	bl	80088b4 <xTaskRemoveFromEventList>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00e      	beq.n	8007ab0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00b      	beq.n	8007ab0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	e007      	b.n	8007ab0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007aa0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	b25a      	sxtb	r2, r3
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007ab4:	e001      	b.n	8007aba <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8007aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ac4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3738      	adds	r7, #56	; 0x38
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08c      	sub	sp, #48	; 0x30
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007adc:	2300      	movs	r3, #0
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d10c      	bne.n	8007b04 <xQueueReceive+0x34>
	__asm volatile
 8007aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aee:	b672      	cpsid	i
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	b662      	cpsie	i
 8007afe:	623b      	str	r3, [r7, #32]
}
 8007b00:	bf00      	nop
 8007b02:	e7fe      	b.n	8007b02 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d103      	bne.n	8007b12 <xQueueReceive+0x42>
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d101      	bne.n	8007b16 <xQueueReceive+0x46>
 8007b12:	2301      	movs	r3, #1
 8007b14:	e000      	b.n	8007b18 <xQueueReceive+0x48>
 8007b16:	2300      	movs	r3, #0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10c      	bne.n	8007b36 <xQueueReceive+0x66>
	__asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b20:	b672      	cpsid	i
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	b662      	cpsie	i
 8007b30:	61fb      	str	r3, [r7, #28]
}
 8007b32:	bf00      	nop
 8007b34:	e7fe      	b.n	8007b34 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b36:	f001 f887 	bl	8008c48 <xTaskGetSchedulerState>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d102      	bne.n	8007b46 <xQueueReceive+0x76>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <xQueueReceive+0x7a>
 8007b46:	2301      	movs	r3, #1
 8007b48:	e000      	b.n	8007b4c <xQueueReceive+0x7c>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10c      	bne.n	8007b6a <xQueueReceive+0x9a>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	b672      	cpsid	i
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	b662      	cpsie	i
 8007b64:	61bb      	str	r3, [r7, #24]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b6a:	f001 fdb7 	bl	80096dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d01f      	beq.n	8007bba <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b7a:	68b9      	ldr	r1, [r7, #8]
 8007b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b7e:	f000 f8f7 	bl	8007d70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	1e5a      	subs	r2, r3, #1
 8007b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00f      	beq.n	8007bb2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b94:	3310      	adds	r3, #16
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 fe8c 	bl	80088b4 <xTaskRemoveFromEventList>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d007      	beq.n	8007bb2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ba2:	4b3d      	ldr	r3, [pc, #244]	; (8007c98 <xQueueReceive+0x1c8>)
 8007ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ba8:	601a      	str	r2, [r3, #0]
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007bb2:	f001 fdc7 	bl	8009744 <vPortExitCritical>
				return pdPASS;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e069      	b.n	8007c8e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d103      	bne.n	8007bc8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007bc0:	f001 fdc0 	bl	8009744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	e062      	b.n	8007c8e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d106      	bne.n	8007bdc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bce:	f107 0310 	add.w	r3, r7, #16
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fed4 	bl	8008980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bdc:	f001 fdb2 	bl	8009744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007be0:	f000 fc34 	bl	800844c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007be4:	f001 fd7a 	bl	80096dc <vPortEnterCritical>
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bee:	b25b      	sxtb	r3, r3
 8007bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf4:	d103      	bne.n	8007bfe <xQueueReceive+0x12e>
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c04:	b25b      	sxtb	r3, r3
 8007c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0a:	d103      	bne.n	8007c14 <xQueueReceive+0x144>
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c14:	f001 fd96 	bl	8009744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c18:	1d3a      	adds	r2, r7, #4
 8007c1a:	f107 0310 	add.w	r3, r7, #16
 8007c1e:	4611      	mov	r1, r2
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 fec3 	bl	80089ac <xTaskCheckForTimeOut>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d123      	bne.n	8007c74 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c2e:	f000 f917 	bl	8007e60 <prvIsQueueEmpty>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d017      	beq.n	8007c68 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	3324      	adds	r3, #36	; 0x24
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 fde3 	bl	800880c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c48:	f000 f8b8 	bl	8007dbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c4c:	f000 fc0c 	bl	8008468 <xTaskResumeAll>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d189      	bne.n	8007b6a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007c56:	4b10      	ldr	r3, [pc, #64]	; (8007c98 <xQueueReceive+0x1c8>)
 8007c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	e780      	b.n	8007b6a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c6a:	f000 f8a7 	bl	8007dbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c6e:	f000 fbfb 	bl	8008468 <xTaskResumeAll>
 8007c72:	e77a      	b.n	8007b6a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c76:	f000 f8a1 	bl	8007dbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c7a:	f000 fbf5 	bl	8008468 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c80:	f000 f8ee 	bl	8007e60 <prvIsQueueEmpty>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f43f af6f 	beq.w	8007b6a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3730      	adds	r7, #48	; 0x30
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	e000ed04 	.word	0xe000ed04

08007c9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10d      	bne.n	8007cd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d14d      	bne.n	8007d5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 ffdc 	bl	8008c84 <xTaskPriorityDisinherit>
 8007ccc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	609a      	str	r2, [r3, #8]
 8007cd4:	e043      	b.n	8007d5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d119      	bne.n	8007d10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6858      	ldr	r0, [r3, #4]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	68b9      	ldr	r1, [r7, #8]
 8007ce8:	f003 fb54 	bl	800b394 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf4:	441a      	add	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d32b      	bcc.n	8007d5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	605a      	str	r2, [r3, #4]
 8007d0e:	e026      	b.n	8007d5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	68d8      	ldr	r0, [r3, #12]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d18:	461a      	mov	r2, r3
 8007d1a:	68b9      	ldr	r1, [r7, #8]
 8007d1c:	f003 fb3a 	bl	800b394 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	68da      	ldr	r2, [r3, #12]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d28:	425b      	negs	r3, r3
 8007d2a:	441a      	add	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	68da      	ldr	r2, [r3, #12]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d207      	bcs.n	8007d4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	689a      	ldr	r2, [r3, #8]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d44:	425b      	negs	r3, r3
 8007d46:	441a      	add	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d105      	bne.n	8007d5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d66:	697b      	ldr	r3, [r7, #20]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d018      	beq.n	8007db4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8a:	441a      	add	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d303      	bcc.n	8007da4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68d9      	ldr	r1, [r3, #12]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dac:	461a      	mov	r2, r3
 8007dae:	6838      	ldr	r0, [r7, #0]
 8007db0:	f003 faf0 	bl	800b394 <memcpy>
	}
}
 8007db4:	bf00      	nop
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007dc4:	f001 fc8a 	bl	80096dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dd0:	e011      	b.n	8007df6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d012      	beq.n	8007e00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	3324      	adds	r3, #36	; 0x24
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 fd68 	bl	80088b4 <xTaskRemoveFromEventList>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007dea:	f000 fe45 	bl	8008a78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
 8007df0:	3b01      	subs	r3, #1
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	dce9      	bgt.n	8007dd2 <prvUnlockQueue+0x16>
 8007dfe:	e000      	b.n	8007e02 <prvUnlockQueue+0x46>
					break;
 8007e00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	22ff      	movs	r2, #255	; 0xff
 8007e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e0a:	f001 fc9b 	bl	8009744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e0e:	f001 fc65 	bl	80096dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e1a:	e011      	b.n	8007e40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d012      	beq.n	8007e4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3310      	adds	r3, #16
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 fd43 	bl	80088b4 <xTaskRemoveFromEventList>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e34:	f000 fe20 	bl	8008a78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e38:	7bbb      	ldrb	r3, [r7, #14]
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	dce9      	bgt.n	8007e1c <prvUnlockQueue+0x60>
 8007e48:	e000      	b.n	8007e4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	22ff      	movs	r2, #255	; 0xff
 8007e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e54:	f001 fc76 	bl	8009744 <vPortExitCritical>
}
 8007e58:	bf00      	nop
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e68:	f001 fc38 	bl	80096dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d102      	bne.n	8007e7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e74:	2301      	movs	r3, #1
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	e001      	b.n	8007e7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e7e:	f001 fc61 	bl	8009744 <vPortExitCritical>

	return xReturn;
 8007e82:	68fb      	ldr	r3, [r7, #12]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e94:	f001 fc22 	bl	80096dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d102      	bne.n	8007eaa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	e001      	b.n	8007eae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007eae:	f001 fc49 	bl	8009744 <vPortExitCritical>

	return xReturn;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	e014      	b.n	8007ef6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ecc:	4a0f      	ldr	r2, [pc, #60]	; (8007f0c <vQueueAddToRegistry+0x50>)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10b      	bne.n	8007ef0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ed8:	490c      	ldr	r1, [pc, #48]	; (8007f0c <vQueueAddToRegistry+0x50>)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ee2:	4a0a      	ldr	r2, [pc, #40]	; (8007f0c <vQueueAddToRegistry+0x50>)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	00db      	lsls	r3, r3, #3
 8007ee8:	4413      	add	r3, r2
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007eee:	e006      	b.n	8007efe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	60fb      	str	r3, [r7, #12]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2b07      	cmp	r3, #7
 8007efa:	d9e7      	bls.n	8007ecc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007efc:	bf00      	nop
 8007efe:	bf00      	nop
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	20004d58 	.word	0x20004d58

08007f10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f20:	f001 fbdc 	bl	80096dc <vPortEnterCritical>
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f2a:	b25b      	sxtb	r3, r3
 8007f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f30:	d103      	bne.n	8007f3a <vQueueWaitForMessageRestricted+0x2a>
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f40:	b25b      	sxtb	r3, r3
 8007f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f46:	d103      	bne.n	8007f50 <vQueueWaitForMessageRestricted+0x40>
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f50:	f001 fbf8 	bl	8009744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d106      	bne.n	8007f6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	3324      	adds	r3, #36	; 0x24
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	68b9      	ldr	r1, [r7, #8]
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 fc77 	bl	8008858 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f6a:	6978      	ldr	r0, [r7, #20]
 8007f6c:	f7ff ff26 	bl	8007dbc <prvUnlockQueue>
	}
 8007f70:	bf00      	nop
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08e      	sub	sp, #56	; 0x38
 8007f7c:	af04      	add	r7, sp, #16
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10c      	bne.n	8007fa6 <xTaskCreateStatic+0x2e>
	__asm volatile
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	b672      	cpsid	i
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	b662      	cpsie	i
 8007fa0:	623b      	str	r3, [r7, #32]
}
 8007fa2:	bf00      	nop
 8007fa4:	e7fe      	b.n	8007fa4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10c      	bne.n	8007fc6 <xTaskCreateStatic+0x4e>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb0:	b672      	cpsid	i
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	b662      	cpsie	i
 8007fc0:	61fb      	str	r3, [r7, #28]
}
 8007fc2:	bf00      	nop
 8007fc4:	e7fe      	b.n	8007fc4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007fc6:	23bc      	movs	r3, #188	; 0xbc
 8007fc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	2bbc      	cmp	r3, #188	; 0xbc
 8007fce:	d00c      	beq.n	8007fea <xTaskCreateStatic+0x72>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	b672      	cpsid	i
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	b662      	cpsie	i
 8007fe4:	61bb      	str	r3, [r7, #24]
}
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007fea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d01e      	beq.n	8008030 <xTaskCreateStatic+0xb8>
 8007ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d01b      	beq.n	8008030 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008000:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	2202      	movs	r2, #2
 8008006:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800800a:	2300      	movs	r3, #0
 800800c:	9303      	str	r3, [sp, #12]
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	9302      	str	r3, [sp, #8]
 8008012:	f107 0314 	add.w	r3, r7, #20
 8008016:	9301      	str	r3, [sp, #4]
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	68b9      	ldr	r1, [r7, #8]
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 f850 	bl	80080c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800802a:	f000 f8f5 	bl	8008218 <prvAddNewTaskToReadyList>
 800802e:	e001      	b.n	8008034 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008030:	2300      	movs	r3, #0
 8008032:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008034:	697b      	ldr	r3, [r7, #20]
	}
 8008036:	4618      	mov	r0, r3
 8008038:	3728      	adds	r7, #40	; 0x28
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800803e:	b580      	push	{r7, lr}
 8008040:	b08c      	sub	sp, #48	; 0x30
 8008042:	af04      	add	r7, sp, #16
 8008044:	60f8      	str	r0, [r7, #12]
 8008046:	60b9      	str	r1, [r7, #8]
 8008048:	603b      	str	r3, [r7, #0]
 800804a:	4613      	mov	r3, r2
 800804c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800804e:	88fb      	ldrh	r3, [r7, #6]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4618      	mov	r0, r3
 8008054:	f001 fc6e 	bl	8009934 <pvPortMalloc>
 8008058:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00e      	beq.n	800807e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008060:	20bc      	movs	r0, #188	; 0xbc
 8008062:	f001 fc67 	bl	8009934 <pvPortMalloc>
 8008066:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	631a      	str	r2, [r3, #48]	; 0x30
 8008074:	e005      	b.n	8008082 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008076:	6978      	ldr	r0, [r7, #20]
 8008078:	f001 fd26 	bl	8009ac8 <vPortFree>
 800807c:	e001      	b.n	8008082 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d017      	beq.n	80080b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008090:	88fa      	ldrh	r2, [r7, #6]
 8008092:	2300      	movs	r3, #0
 8008094:	9303      	str	r3, [sp, #12]
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	9302      	str	r3, [sp, #8]
 800809a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809c:	9301      	str	r3, [sp, #4]
 800809e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	68b9      	ldr	r1, [r7, #8]
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 f80e 	bl	80080c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080ac:	69f8      	ldr	r0, [r7, #28]
 80080ae:	f000 f8b3 	bl	8008218 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080b2:	2301      	movs	r3, #1
 80080b4:	61bb      	str	r3, [r7, #24]
 80080b6:	e002      	b.n	80080be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80080b8:	f04f 33ff 	mov.w	r3, #4294967295
 80080bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80080be:	69bb      	ldr	r3, [r7, #24]
	}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3720      	adds	r7, #32
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b088      	sub	sp, #32
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	461a      	mov	r2, r3
 80080e0:	21a5      	movs	r1, #165	; 0xa5
 80080e2:	f003 f965 	bl	800b3b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080ea:	6879      	ldr	r1, [r7, #4]
 80080ec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80080f0:	440b      	add	r3, r1
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	f023 0307 	bic.w	r3, r3, #7
 80080fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	f003 0307 	and.w	r3, r3, #7
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00c      	beq.n	8008124 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	b672      	cpsid	i
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	b662      	cpsie	i
 800811e:	617b      	str	r3, [r7, #20]
}
 8008120:	bf00      	nop
 8008122:	e7fe      	b.n	8008122 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d01f      	beq.n	800816a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800812a:	2300      	movs	r3, #0
 800812c:	61fb      	str	r3, [r7, #28]
 800812e:	e012      	b.n	8008156 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	4413      	add	r3, r2
 8008136:	7819      	ldrb	r1, [r3, #0]
 8008138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	4413      	add	r3, r2
 800813e:	3334      	adds	r3, #52	; 0x34
 8008140:	460a      	mov	r2, r1
 8008142:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	4413      	add	r3, r2
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d006      	beq.n	800815e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	3301      	adds	r3, #1
 8008154:	61fb      	str	r3, [r7, #28]
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	2b0f      	cmp	r3, #15
 800815a:	d9e9      	bls.n	8008130 <prvInitialiseNewTask+0x68>
 800815c:	e000      	b.n	8008160 <prvInitialiseNewTask+0x98>
			{
				break;
 800815e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008168:	e003      	b.n	8008172 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	2b37      	cmp	r3, #55	; 0x37
 8008176:	d901      	bls.n	800817c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008178:	2337      	movs	r3, #55	; 0x37
 800817a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800817c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008180:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008186:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818a:	2200      	movs	r2, #0
 800818c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	3304      	adds	r3, #4
 8008192:	4618      	mov	r0, r3
 8008194:	f7ff f952 	bl	800743c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819a:	3318      	adds	r3, #24
 800819c:	4618      	mov	r0, r3
 800819e:	f7ff f94d 	bl	800743c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	2200      	movs	r2, #0
 80081bc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	3354      	adds	r3, #84	; 0x54
 80081cc:	2260      	movs	r2, #96	; 0x60
 80081ce:	2100      	movs	r1, #0
 80081d0:	4618      	mov	r0, r3
 80081d2:	f003 f8ed 	bl	800b3b0 <memset>
 80081d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d8:	4a0c      	ldr	r2, [pc, #48]	; (800820c <prvInitialiseNewTask+0x144>)
 80081da:	659a      	str	r2, [r3, #88]	; 0x58
 80081dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081de:	4a0c      	ldr	r2, [pc, #48]	; (8008210 <prvInitialiseNewTask+0x148>)
 80081e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	4a0b      	ldr	r2, [pc, #44]	; (8008214 <prvInitialiseNewTask+0x14c>)
 80081e6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	68f9      	ldr	r1, [r7, #12]
 80081ec:	69b8      	ldr	r0, [r7, #24]
 80081ee:	f001 f96b 	bl	80094c8 <pxPortInitialiseStack>
 80081f2:	4602      	mov	r2, r0
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80081f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80081fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008202:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008204:	bf00      	nop
 8008206:	3720      	adds	r7, #32
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	0800b730 	.word	0x0800b730
 8008210:	0800b750 	.word	0x0800b750
 8008214:	0800b710 	.word	0x0800b710

08008218 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008220:	f001 fa5c 	bl	80096dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008224:	4b2d      	ldr	r3, [pc, #180]	; (80082dc <prvAddNewTaskToReadyList+0xc4>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3301      	adds	r3, #1
 800822a:	4a2c      	ldr	r2, [pc, #176]	; (80082dc <prvAddNewTaskToReadyList+0xc4>)
 800822c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800822e:	4b2c      	ldr	r3, [pc, #176]	; (80082e0 <prvAddNewTaskToReadyList+0xc8>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d109      	bne.n	800824a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008236:	4a2a      	ldr	r2, [pc, #168]	; (80082e0 <prvAddNewTaskToReadyList+0xc8>)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800823c:	4b27      	ldr	r3, [pc, #156]	; (80082dc <prvAddNewTaskToReadyList+0xc4>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d110      	bne.n	8008266 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008244:	f000 fc3c 	bl	8008ac0 <prvInitialiseTaskLists>
 8008248:	e00d      	b.n	8008266 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800824a:	4b26      	ldr	r3, [pc, #152]	; (80082e4 <prvAddNewTaskToReadyList+0xcc>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d109      	bne.n	8008266 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008252:	4b23      	ldr	r3, [pc, #140]	; (80082e0 <prvAddNewTaskToReadyList+0xc8>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	429a      	cmp	r2, r3
 800825e:	d802      	bhi.n	8008266 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008260:	4a1f      	ldr	r2, [pc, #124]	; (80082e0 <prvAddNewTaskToReadyList+0xc8>)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008266:	4b20      	ldr	r3, [pc, #128]	; (80082e8 <prvAddNewTaskToReadyList+0xd0>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3301      	adds	r3, #1
 800826c:	4a1e      	ldr	r2, [pc, #120]	; (80082e8 <prvAddNewTaskToReadyList+0xd0>)
 800826e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008270:	4b1d      	ldr	r3, [pc, #116]	; (80082e8 <prvAddNewTaskToReadyList+0xd0>)
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800827c:	4b1b      	ldr	r3, [pc, #108]	; (80082ec <prvAddNewTaskToReadyList+0xd4>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	429a      	cmp	r2, r3
 8008282:	d903      	bls.n	800828c <prvAddNewTaskToReadyList+0x74>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008288:	4a18      	ldr	r2, [pc, #96]	; (80082ec <prvAddNewTaskToReadyList+0xd4>)
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008290:	4613      	mov	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4a15      	ldr	r2, [pc, #84]	; (80082f0 <prvAddNewTaskToReadyList+0xd8>)
 800829a:	441a      	add	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3304      	adds	r3, #4
 80082a0:	4619      	mov	r1, r3
 80082a2:	4610      	mov	r0, r2
 80082a4:	f7ff f8d7 	bl	8007456 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082a8:	f001 fa4c 	bl	8009744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082ac:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <prvAddNewTaskToReadyList+0xcc>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00e      	beq.n	80082d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082b4:	4b0a      	ldr	r3, [pc, #40]	; (80082e0 <prvAddNewTaskToReadyList+0xc8>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082be:	429a      	cmp	r2, r3
 80082c0:	d207      	bcs.n	80082d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80082c2:	4b0c      	ldr	r3, [pc, #48]	; (80082f4 <prvAddNewTaskToReadyList+0xdc>)
 80082c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c8:	601a      	str	r2, [r3, #0]
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082d2:	bf00      	nop
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	20000e88 	.word	0x20000e88
 80082e0:	200009b4 	.word	0x200009b4
 80082e4:	20000e94 	.word	0x20000e94
 80082e8:	20000ea4 	.word	0x20000ea4
 80082ec:	20000e90 	.word	0x20000e90
 80082f0:	200009b8 	.word	0x200009b8
 80082f4:	e000ed04 	.word	0xe000ed04

080082f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008300:	2300      	movs	r3, #0
 8008302:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d019      	beq.n	800833e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800830a:	4b14      	ldr	r3, [pc, #80]	; (800835c <vTaskDelay+0x64>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00c      	beq.n	800832c <vTaskDelay+0x34>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	b672      	cpsid	i
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	b662      	cpsie	i
 8008326:	60bb      	str	r3, [r7, #8]
}
 8008328:	bf00      	nop
 800832a:	e7fe      	b.n	800832a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800832c:	f000 f88e 	bl	800844c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008330:	2100      	movs	r1, #0
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fd18 	bl	8008d68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008338:	f000 f896 	bl	8008468 <xTaskResumeAll>
 800833c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d107      	bne.n	8008354 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008344:	4b06      	ldr	r3, [pc, #24]	; (8008360 <vTaskDelay+0x68>)
 8008346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008354:	bf00      	nop
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	20000eb0 	.word	0x20000eb0
 8008360:	e000ed04 	.word	0xe000ed04

08008364 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b08a      	sub	sp, #40	; 0x28
 8008368:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800836e:	2300      	movs	r3, #0
 8008370:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008372:	463a      	mov	r2, r7
 8008374:	1d39      	adds	r1, r7, #4
 8008376:	f107 0308 	add.w	r3, r7, #8
 800837a:	4618      	mov	r0, r3
 800837c:	f7ff f80a 	bl	8007394 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	9202      	str	r2, [sp, #8]
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	2300      	movs	r3, #0
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	2300      	movs	r3, #0
 8008390:	460a      	mov	r2, r1
 8008392:	4926      	ldr	r1, [pc, #152]	; (800842c <vTaskStartScheduler+0xc8>)
 8008394:	4826      	ldr	r0, [pc, #152]	; (8008430 <vTaskStartScheduler+0xcc>)
 8008396:	f7ff fdef 	bl	8007f78 <xTaskCreateStatic>
 800839a:	4603      	mov	r3, r0
 800839c:	4a25      	ldr	r2, [pc, #148]	; (8008434 <vTaskStartScheduler+0xd0>)
 800839e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80083a0:	4b24      	ldr	r3, [pc, #144]	; (8008434 <vTaskStartScheduler+0xd0>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80083a8:	2301      	movs	r3, #1
 80083aa:	617b      	str	r3, [r7, #20]
 80083ac:	e001      	b.n	80083b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d102      	bne.n	80083be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80083b8:	f000 fd2a 	bl	8008e10 <xTimerCreateTimerTask>
 80083bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d11d      	bne.n	8008400 <vTaskStartScheduler+0x9c>
	__asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c8:	b672      	cpsid	i
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	b662      	cpsie	i
 80083d8:	613b      	str	r3, [r7, #16]
}
 80083da:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083dc:	4b16      	ldr	r3, [pc, #88]	; (8008438 <vTaskStartScheduler+0xd4>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3354      	adds	r3, #84	; 0x54
 80083e2:	4a16      	ldr	r2, [pc, #88]	; (800843c <vTaskStartScheduler+0xd8>)
 80083e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083e6:	4b16      	ldr	r3, [pc, #88]	; (8008440 <vTaskStartScheduler+0xdc>)
 80083e8:	f04f 32ff 	mov.w	r2, #4294967295
 80083ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083ee:	4b15      	ldr	r3, [pc, #84]	; (8008444 <vTaskStartScheduler+0xe0>)
 80083f0:	2201      	movs	r2, #1
 80083f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80083f4:	4b14      	ldr	r3, [pc, #80]	; (8008448 <vTaskStartScheduler+0xe4>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80083fa:	f001 f8f1 	bl	80095e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80083fe:	e010      	b.n	8008422 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008406:	d10c      	bne.n	8008422 <vTaskStartScheduler+0xbe>
	__asm volatile
 8008408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840c:	b672      	cpsid	i
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	b662      	cpsie	i
 800841c:	60fb      	str	r3, [r7, #12]
}
 800841e:	bf00      	nop
 8008420:	e7fe      	b.n	8008420 <vTaskStartScheduler+0xbc>
}
 8008422:	bf00      	nop
 8008424:	3718      	adds	r7, #24
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	0800b638 	.word	0x0800b638
 8008430:	08008a91 	.word	0x08008a91
 8008434:	20000eac 	.word	0x20000eac
 8008438:	200009b4 	.word	0x200009b4
 800843c:	200001a8 	.word	0x200001a8
 8008440:	20000ea8 	.word	0x20000ea8
 8008444:	20000e94 	.word	0x20000e94
 8008448:	20000e8c 	.word	0x20000e8c

0800844c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800844c:	b480      	push	{r7}
 800844e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008450:	4b04      	ldr	r3, [pc, #16]	; (8008464 <vTaskSuspendAll+0x18>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3301      	adds	r3, #1
 8008456:	4a03      	ldr	r2, [pc, #12]	; (8008464 <vTaskSuspendAll+0x18>)
 8008458:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800845a:	bf00      	nop
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	20000eb0 	.word	0x20000eb0

08008468 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800846e:	2300      	movs	r3, #0
 8008470:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008472:	2300      	movs	r3, #0
 8008474:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008476:	4b43      	ldr	r3, [pc, #268]	; (8008584 <xTaskResumeAll+0x11c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10c      	bne.n	8008498 <xTaskResumeAll+0x30>
	__asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008482:	b672      	cpsid	i
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	b662      	cpsie	i
 8008492:	603b      	str	r3, [r7, #0]
}
 8008494:	bf00      	nop
 8008496:	e7fe      	b.n	8008496 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008498:	f001 f920 	bl	80096dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800849c:	4b39      	ldr	r3, [pc, #228]	; (8008584 <xTaskResumeAll+0x11c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3b01      	subs	r3, #1
 80084a2:	4a38      	ldr	r2, [pc, #224]	; (8008584 <xTaskResumeAll+0x11c>)
 80084a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084a6:	4b37      	ldr	r3, [pc, #220]	; (8008584 <xTaskResumeAll+0x11c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d162      	bne.n	8008574 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80084ae:	4b36      	ldr	r3, [pc, #216]	; (8008588 <xTaskResumeAll+0x120>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d05e      	beq.n	8008574 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084b6:	e02f      	b.n	8008518 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084b8:	4b34      	ldr	r3, [pc, #208]	; (800858c <xTaskResumeAll+0x124>)
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	3318      	adds	r3, #24
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7ff f823 	bl	8007510 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3304      	adds	r3, #4
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7ff f81e 	bl	8007510 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d8:	4b2d      	ldr	r3, [pc, #180]	; (8008590 <xTaskResumeAll+0x128>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d903      	bls.n	80084e8 <xTaskResumeAll+0x80>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e4:	4a2a      	ldr	r2, [pc, #168]	; (8008590 <xTaskResumeAll+0x128>)
 80084e6:	6013      	str	r3, [r2, #0]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ec:	4613      	mov	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4a27      	ldr	r2, [pc, #156]	; (8008594 <xTaskResumeAll+0x12c>)
 80084f6:	441a      	add	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	3304      	adds	r3, #4
 80084fc:	4619      	mov	r1, r3
 80084fe:	4610      	mov	r0, r2
 8008500:	f7fe ffa9 	bl	8007456 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008508:	4b23      	ldr	r3, [pc, #140]	; (8008598 <xTaskResumeAll+0x130>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850e:	429a      	cmp	r2, r3
 8008510:	d302      	bcc.n	8008518 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008512:	4b22      	ldr	r3, [pc, #136]	; (800859c <xTaskResumeAll+0x134>)
 8008514:	2201      	movs	r2, #1
 8008516:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008518:	4b1c      	ldr	r3, [pc, #112]	; (800858c <xTaskResumeAll+0x124>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1cb      	bne.n	80084b8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008526:	f000 fb6f 	bl	8008c08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800852a:	4b1d      	ldr	r3, [pc, #116]	; (80085a0 <xTaskResumeAll+0x138>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d010      	beq.n	8008558 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008536:	f000 f847 	bl	80085c8 <xTaskIncrementTick>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008540:	4b16      	ldr	r3, [pc, #88]	; (800859c <xTaskResumeAll+0x134>)
 8008542:	2201      	movs	r2, #1
 8008544:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	3b01      	subs	r3, #1
 800854a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1f1      	bne.n	8008536 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008552:	4b13      	ldr	r3, [pc, #76]	; (80085a0 <xTaskResumeAll+0x138>)
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008558:	4b10      	ldr	r3, [pc, #64]	; (800859c <xTaskResumeAll+0x134>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d009      	beq.n	8008574 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008560:	2301      	movs	r3, #1
 8008562:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008564:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <xTaskResumeAll+0x13c>)
 8008566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008574:	f001 f8e6 	bl	8009744 <vPortExitCritical>

	return xAlreadyYielded;
 8008578:	68bb      	ldr	r3, [r7, #8]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	20000eb0 	.word	0x20000eb0
 8008588:	20000e88 	.word	0x20000e88
 800858c:	20000e48 	.word	0x20000e48
 8008590:	20000e90 	.word	0x20000e90
 8008594:	200009b8 	.word	0x200009b8
 8008598:	200009b4 	.word	0x200009b4
 800859c:	20000e9c 	.word	0x20000e9c
 80085a0:	20000e98 	.word	0x20000e98
 80085a4:	e000ed04 	.word	0xe000ed04

080085a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80085ae:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <xTaskGetTickCount+0x1c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80085b4:	687b      	ldr	r3, [r7, #4]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	20000e8c 	.word	0x20000e8c

080085c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085ce:	2300      	movs	r3, #0
 80085d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085d2:	4b50      	ldr	r3, [pc, #320]	; (8008714 <xTaskIncrementTick+0x14c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f040 808b 	bne.w	80086f2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085dc:	4b4e      	ldr	r3, [pc, #312]	; (8008718 <xTaskIncrementTick+0x150>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3301      	adds	r3, #1
 80085e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085e4:	4a4c      	ldr	r2, [pc, #304]	; (8008718 <xTaskIncrementTick+0x150>)
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d122      	bne.n	8008636 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80085f0:	4b4a      	ldr	r3, [pc, #296]	; (800871c <xTaskIncrementTick+0x154>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00c      	beq.n	8008614 <xTaskIncrementTick+0x4c>
	__asm volatile
 80085fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fe:	b672      	cpsid	i
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	b662      	cpsie	i
 800860e:	603b      	str	r3, [r7, #0]
}
 8008610:	bf00      	nop
 8008612:	e7fe      	b.n	8008612 <xTaskIncrementTick+0x4a>
 8008614:	4b41      	ldr	r3, [pc, #260]	; (800871c <xTaskIncrementTick+0x154>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	60fb      	str	r3, [r7, #12]
 800861a:	4b41      	ldr	r3, [pc, #260]	; (8008720 <xTaskIncrementTick+0x158>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a3f      	ldr	r2, [pc, #252]	; (800871c <xTaskIncrementTick+0x154>)
 8008620:	6013      	str	r3, [r2, #0]
 8008622:	4a3f      	ldr	r2, [pc, #252]	; (8008720 <xTaskIncrementTick+0x158>)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	4b3e      	ldr	r3, [pc, #248]	; (8008724 <xTaskIncrementTick+0x15c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3301      	adds	r3, #1
 800862e:	4a3d      	ldr	r2, [pc, #244]	; (8008724 <xTaskIncrementTick+0x15c>)
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	f000 fae9 	bl	8008c08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008636:	4b3c      	ldr	r3, [pc, #240]	; (8008728 <xTaskIncrementTick+0x160>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	429a      	cmp	r2, r3
 800863e:	d349      	bcc.n	80086d4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008640:	4b36      	ldr	r3, [pc, #216]	; (800871c <xTaskIncrementTick+0x154>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d104      	bne.n	8008654 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800864a:	4b37      	ldr	r3, [pc, #220]	; (8008728 <xTaskIncrementTick+0x160>)
 800864c:	f04f 32ff 	mov.w	r2, #4294967295
 8008650:	601a      	str	r2, [r3, #0]
					break;
 8008652:	e03f      	b.n	80086d4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008654:	4b31      	ldr	r3, [pc, #196]	; (800871c <xTaskIncrementTick+0x154>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	429a      	cmp	r2, r3
 800866a:	d203      	bcs.n	8008674 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800866c:	4a2e      	ldr	r2, [pc, #184]	; (8008728 <xTaskIncrementTick+0x160>)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008672:	e02f      	b.n	80086d4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	3304      	adds	r3, #4
 8008678:	4618      	mov	r0, r3
 800867a:	f7fe ff49 	bl	8007510 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008682:	2b00      	cmp	r3, #0
 8008684:	d004      	beq.n	8008690 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	3318      	adds	r3, #24
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe ff40 	bl	8007510 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008694:	4b25      	ldr	r3, [pc, #148]	; (800872c <xTaskIncrementTick+0x164>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	429a      	cmp	r2, r3
 800869a:	d903      	bls.n	80086a4 <xTaskIncrementTick+0xdc>
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	4a22      	ldr	r2, [pc, #136]	; (800872c <xTaskIncrementTick+0x164>)
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4a1f      	ldr	r2, [pc, #124]	; (8008730 <xTaskIncrementTick+0x168>)
 80086b2:	441a      	add	r2, r3
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	3304      	adds	r3, #4
 80086b8:	4619      	mov	r1, r3
 80086ba:	4610      	mov	r0, r2
 80086bc:	f7fe fecb 	bl	8007456 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c4:	4b1b      	ldr	r3, [pc, #108]	; (8008734 <xTaskIncrementTick+0x16c>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d3b8      	bcc.n	8008640 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80086ce:	2301      	movs	r3, #1
 80086d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086d2:	e7b5      	b.n	8008640 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086d4:	4b17      	ldr	r3, [pc, #92]	; (8008734 <xTaskIncrementTick+0x16c>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086da:	4915      	ldr	r1, [pc, #84]	; (8008730 <xTaskIncrementTick+0x168>)
 80086dc:	4613      	mov	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	440b      	add	r3, r1
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d907      	bls.n	80086fc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80086ec:	2301      	movs	r3, #1
 80086ee:	617b      	str	r3, [r7, #20]
 80086f0:	e004      	b.n	80086fc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80086f2:	4b11      	ldr	r3, [pc, #68]	; (8008738 <xTaskIncrementTick+0x170>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3301      	adds	r3, #1
 80086f8:	4a0f      	ldr	r2, [pc, #60]	; (8008738 <xTaskIncrementTick+0x170>)
 80086fa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80086fc:	4b0f      	ldr	r3, [pc, #60]	; (800873c <xTaskIncrementTick+0x174>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d001      	beq.n	8008708 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008704:	2301      	movs	r3, #1
 8008706:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008708:	697b      	ldr	r3, [r7, #20]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3718      	adds	r7, #24
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	20000eb0 	.word	0x20000eb0
 8008718:	20000e8c 	.word	0x20000e8c
 800871c:	20000e40 	.word	0x20000e40
 8008720:	20000e44 	.word	0x20000e44
 8008724:	20000ea0 	.word	0x20000ea0
 8008728:	20000ea8 	.word	0x20000ea8
 800872c:	20000e90 	.word	0x20000e90
 8008730:	200009b8 	.word	0x200009b8
 8008734:	200009b4 	.word	0x200009b4
 8008738:	20000e98 	.word	0x20000e98
 800873c:	20000e9c 	.word	0x20000e9c

08008740 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008746:	4b2b      	ldr	r3, [pc, #172]	; (80087f4 <vTaskSwitchContext+0xb4>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800874e:	4b2a      	ldr	r3, [pc, #168]	; (80087f8 <vTaskSwitchContext+0xb8>)
 8008750:	2201      	movs	r2, #1
 8008752:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008754:	e048      	b.n	80087e8 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008756:	4b28      	ldr	r3, [pc, #160]	; (80087f8 <vTaskSwitchContext+0xb8>)
 8008758:	2200      	movs	r2, #0
 800875a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800875c:	4b27      	ldr	r3, [pc, #156]	; (80087fc <vTaskSwitchContext+0xbc>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	60fb      	str	r3, [r7, #12]
 8008762:	e012      	b.n	800878a <vTaskSwitchContext+0x4a>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10c      	bne.n	8008784 <vTaskSwitchContext+0x44>
	__asm volatile
 800876a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876e:	b672      	cpsid	i
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	b662      	cpsie	i
 800877e:	607b      	str	r3, [r7, #4]
}
 8008780:	bf00      	nop
 8008782:	e7fe      	b.n	8008782 <vTaskSwitchContext+0x42>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	3b01      	subs	r3, #1
 8008788:	60fb      	str	r3, [r7, #12]
 800878a:	491d      	ldr	r1, [pc, #116]	; (8008800 <vTaskSwitchContext+0xc0>)
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	4613      	mov	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	440b      	add	r3, r1
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0e2      	beq.n	8008764 <vTaskSwitchContext+0x24>
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	4613      	mov	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4a15      	ldr	r2, [pc, #84]	; (8008800 <vTaskSwitchContext+0xc0>)
 80087aa:	4413      	add	r3, r2
 80087ac:	60bb      	str	r3, [r7, #8]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	685a      	ldr	r2, [r3, #4]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	605a      	str	r2, [r3, #4]
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	3308      	adds	r3, #8
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d104      	bne.n	80087ce <vTaskSwitchContext+0x8e>
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	605a      	str	r2, [r3, #4]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	4a0b      	ldr	r2, [pc, #44]	; (8008804 <vTaskSwitchContext+0xc4>)
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	4a08      	ldr	r2, [pc, #32]	; (80087fc <vTaskSwitchContext+0xbc>)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087de:	4b09      	ldr	r3, [pc, #36]	; (8008804 <vTaskSwitchContext+0xc4>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	3354      	adds	r3, #84	; 0x54
 80087e4:	4a08      	ldr	r2, [pc, #32]	; (8008808 <vTaskSwitchContext+0xc8>)
 80087e6:	6013      	str	r3, [r2, #0]
}
 80087e8:	bf00      	nop
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	20000eb0 	.word	0x20000eb0
 80087f8:	20000e9c 	.word	0x20000e9c
 80087fc:	20000e90 	.word	0x20000e90
 8008800:	200009b8 	.word	0x200009b8
 8008804:	200009b4 	.word	0x200009b4
 8008808:	200001a8 	.word	0x200001a8

0800880c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10c      	bne.n	8008836 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008820:	b672      	cpsid	i
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	b662      	cpsie	i
 8008830:	60fb      	str	r3, [r7, #12]
}
 8008832:	bf00      	nop
 8008834:	e7fe      	b.n	8008834 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008836:	4b07      	ldr	r3, [pc, #28]	; (8008854 <vTaskPlaceOnEventList+0x48>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3318      	adds	r3, #24
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7fe fe2d 	bl	800749e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008844:	2101      	movs	r1, #1
 8008846:	6838      	ldr	r0, [r7, #0]
 8008848:	f000 fa8e 	bl	8008d68 <prvAddCurrentTaskToDelayedList>
}
 800884c:	bf00      	nop
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	200009b4 	.word	0x200009b4

08008858 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10c      	bne.n	8008884 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800886a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886e:	b672      	cpsid	i
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	b662      	cpsie	i
 800887e:	617b      	str	r3, [r7, #20]
}
 8008880:	bf00      	nop
 8008882:	e7fe      	b.n	8008882 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008884:	4b0a      	ldr	r3, [pc, #40]	; (80088b0 <vTaskPlaceOnEventListRestricted+0x58>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3318      	adds	r3, #24
 800888a:	4619      	mov	r1, r3
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f7fe fde2 	bl	8007456 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d002      	beq.n	800889e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008898:	f04f 33ff 	mov.w	r3, #4294967295
 800889c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800889e:	6879      	ldr	r1, [r7, #4]
 80088a0:	68b8      	ldr	r0, [r7, #8]
 80088a2:	f000 fa61 	bl	8008d68 <prvAddCurrentTaskToDelayedList>
	}
 80088a6:	bf00      	nop
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	200009b4 	.word	0x200009b4

080088b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10c      	bne.n	80088e4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80088ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ce:	b672      	cpsid	i
 80088d0:	f383 8811 	msr	BASEPRI, r3
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	b662      	cpsie	i
 80088de:	60fb      	str	r3, [r7, #12]
}
 80088e0:	bf00      	nop
 80088e2:	e7fe      	b.n	80088e2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	3318      	adds	r3, #24
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fe fe11 	bl	8007510 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088ee:	4b1e      	ldr	r3, [pc, #120]	; (8008968 <xTaskRemoveFromEventList+0xb4>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d11d      	bne.n	8008932 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	3304      	adds	r3, #4
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fe fe08 	bl	8007510 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008904:	4b19      	ldr	r3, [pc, #100]	; (800896c <xTaskRemoveFromEventList+0xb8>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	429a      	cmp	r2, r3
 800890a:	d903      	bls.n	8008914 <xTaskRemoveFromEventList+0x60>
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	4a16      	ldr	r2, [pc, #88]	; (800896c <xTaskRemoveFromEventList+0xb8>)
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008918:	4613      	mov	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4413      	add	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4a13      	ldr	r2, [pc, #76]	; (8008970 <xTaskRemoveFromEventList+0xbc>)
 8008922:	441a      	add	r2, r3
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	3304      	adds	r3, #4
 8008928:	4619      	mov	r1, r3
 800892a:	4610      	mov	r0, r2
 800892c:	f7fe fd93 	bl	8007456 <vListInsertEnd>
 8008930:	e005      	b.n	800893e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	3318      	adds	r3, #24
 8008936:	4619      	mov	r1, r3
 8008938:	480e      	ldr	r0, [pc, #56]	; (8008974 <xTaskRemoveFromEventList+0xc0>)
 800893a:	f7fe fd8c 	bl	8007456 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008942:	4b0d      	ldr	r3, [pc, #52]	; (8008978 <xTaskRemoveFromEventList+0xc4>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	429a      	cmp	r2, r3
 800894a:	d905      	bls.n	8008958 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800894c:	2301      	movs	r3, #1
 800894e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008950:	4b0a      	ldr	r3, [pc, #40]	; (800897c <xTaskRemoveFromEventList+0xc8>)
 8008952:	2201      	movs	r2, #1
 8008954:	601a      	str	r2, [r3, #0]
 8008956:	e001      	b.n	800895c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008958:	2300      	movs	r3, #0
 800895a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800895c:	697b      	ldr	r3, [r7, #20]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	20000eb0 	.word	0x20000eb0
 800896c:	20000e90 	.word	0x20000e90
 8008970:	200009b8 	.word	0x200009b8
 8008974:	20000e48 	.word	0x20000e48
 8008978:	200009b4 	.word	0x200009b4
 800897c:	20000e9c 	.word	0x20000e9c

08008980 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008988:	4b06      	ldr	r3, [pc, #24]	; (80089a4 <vTaskInternalSetTimeOutState+0x24>)
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008990:	4b05      	ldr	r3, [pc, #20]	; (80089a8 <vTaskInternalSetTimeOutState+0x28>)
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	605a      	str	r2, [r3, #4]
}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr
 80089a4:	20000ea0 	.word	0x20000ea0
 80089a8:	20000e8c 	.word	0x20000e8c

080089ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10c      	bne.n	80089d6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	b672      	cpsid	i
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	b662      	cpsie	i
 80089d0:	613b      	str	r3, [r7, #16]
}
 80089d2:	bf00      	nop
 80089d4:	e7fe      	b.n	80089d4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10c      	bne.n	80089f6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80089dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e0:	b672      	cpsid	i
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	b662      	cpsie	i
 80089f0:	60fb      	str	r3, [r7, #12]
}
 80089f2:	bf00      	nop
 80089f4:	e7fe      	b.n	80089f4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80089f6:	f000 fe71 	bl	80096dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80089fa:	4b1d      	ldr	r3, [pc, #116]	; (8008a70 <xTaskCheckForTimeOut+0xc4>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a12:	d102      	bne.n	8008a1a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a14:	2300      	movs	r3, #0
 8008a16:	61fb      	str	r3, [r7, #28]
 8008a18:	e023      	b.n	8008a62 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	4b15      	ldr	r3, [pc, #84]	; (8008a74 <xTaskCheckForTimeOut+0xc8>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d007      	beq.n	8008a36 <xTaskCheckForTimeOut+0x8a>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	69ba      	ldr	r2, [r7, #24]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d302      	bcc.n	8008a36 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a30:	2301      	movs	r3, #1
 8008a32:	61fb      	str	r3, [r7, #28]
 8008a34:	e015      	b.n	8008a62 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d20b      	bcs.n	8008a58 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	1ad2      	subs	r2, r2, r3
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff ff97 	bl	8008980 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a52:	2300      	movs	r3, #0
 8008a54:	61fb      	str	r3, [r7, #28]
 8008a56:	e004      	b.n	8008a62 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a62:	f000 fe6f 	bl	8009744 <vPortExitCritical>

	return xReturn;
 8008a66:	69fb      	ldr	r3, [r7, #28]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3720      	adds	r7, #32
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	20000e8c 	.word	0x20000e8c
 8008a74:	20000ea0 	.word	0x20000ea0

08008a78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a7c:	4b03      	ldr	r3, [pc, #12]	; (8008a8c <vTaskMissedYield+0x14>)
 8008a7e:	2201      	movs	r2, #1
 8008a80:	601a      	str	r2, [r3, #0]
}
 8008a82:	bf00      	nop
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	20000e9c 	.word	0x20000e9c

08008a90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a98:	f000 f852 	bl	8008b40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a9c:	4b06      	ldr	r3, [pc, #24]	; (8008ab8 <prvIdleTask+0x28>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d9f9      	bls.n	8008a98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008aa4:	4b05      	ldr	r3, [pc, #20]	; (8008abc <prvIdleTask+0x2c>)
 8008aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ab4:	e7f0      	b.n	8008a98 <prvIdleTask+0x8>
 8008ab6:	bf00      	nop
 8008ab8:	200009b8 	.word	0x200009b8
 8008abc:	e000ed04 	.word	0xe000ed04

08008ac0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	607b      	str	r3, [r7, #4]
 8008aca:	e00c      	b.n	8008ae6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4a12      	ldr	r2, [pc, #72]	; (8008b20 <prvInitialiseTaskLists+0x60>)
 8008ad8:	4413      	add	r3, r2
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe fc8e 	bl	80073fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	607b      	str	r3, [r7, #4]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b37      	cmp	r3, #55	; 0x37
 8008aea:	d9ef      	bls.n	8008acc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008aec:	480d      	ldr	r0, [pc, #52]	; (8008b24 <prvInitialiseTaskLists+0x64>)
 8008aee:	f7fe fc85 	bl	80073fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008af2:	480d      	ldr	r0, [pc, #52]	; (8008b28 <prvInitialiseTaskLists+0x68>)
 8008af4:	f7fe fc82 	bl	80073fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008af8:	480c      	ldr	r0, [pc, #48]	; (8008b2c <prvInitialiseTaskLists+0x6c>)
 8008afa:	f7fe fc7f 	bl	80073fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008afe:	480c      	ldr	r0, [pc, #48]	; (8008b30 <prvInitialiseTaskLists+0x70>)
 8008b00:	f7fe fc7c 	bl	80073fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b04:	480b      	ldr	r0, [pc, #44]	; (8008b34 <prvInitialiseTaskLists+0x74>)
 8008b06:	f7fe fc79 	bl	80073fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b0a:	4b0b      	ldr	r3, [pc, #44]	; (8008b38 <prvInitialiseTaskLists+0x78>)
 8008b0c:	4a05      	ldr	r2, [pc, #20]	; (8008b24 <prvInitialiseTaskLists+0x64>)
 8008b0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b10:	4b0a      	ldr	r3, [pc, #40]	; (8008b3c <prvInitialiseTaskLists+0x7c>)
 8008b12:	4a05      	ldr	r2, [pc, #20]	; (8008b28 <prvInitialiseTaskLists+0x68>)
 8008b14:	601a      	str	r2, [r3, #0]
}
 8008b16:	bf00      	nop
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	200009b8 	.word	0x200009b8
 8008b24:	20000e18 	.word	0x20000e18
 8008b28:	20000e2c 	.word	0x20000e2c
 8008b2c:	20000e48 	.word	0x20000e48
 8008b30:	20000e5c 	.word	0x20000e5c
 8008b34:	20000e74 	.word	0x20000e74
 8008b38:	20000e40 	.word	0x20000e40
 8008b3c:	20000e44 	.word	0x20000e44

08008b40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b46:	e019      	b.n	8008b7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b48:	f000 fdc8 	bl	80096dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b4c:	4b10      	ldr	r3, [pc, #64]	; (8008b90 <prvCheckTasksWaitingTermination+0x50>)
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	3304      	adds	r3, #4
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7fe fcd9 	bl	8007510 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b5e:	4b0d      	ldr	r3, [pc, #52]	; (8008b94 <prvCheckTasksWaitingTermination+0x54>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	4a0b      	ldr	r2, [pc, #44]	; (8008b94 <prvCheckTasksWaitingTermination+0x54>)
 8008b66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b68:	4b0b      	ldr	r3, [pc, #44]	; (8008b98 <prvCheckTasksWaitingTermination+0x58>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	4a0a      	ldr	r2, [pc, #40]	; (8008b98 <prvCheckTasksWaitingTermination+0x58>)
 8008b70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b72:	f000 fde7 	bl	8009744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f810 	bl	8008b9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b7c:	4b06      	ldr	r3, [pc, #24]	; (8008b98 <prvCheckTasksWaitingTermination+0x58>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e1      	bne.n	8008b48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20000e5c 	.word	0x20000e5c
 8008b94:	20000e88 	.word	0x20000e88
 8008b98:	20000e70 	.word	0x20000e70

08008b9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3354      	adds	r3, #84	; 0x54
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f002 fcc1 	bl	800b530 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d108      	bne.n	8008bca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 ff83 	bl	8009ac8 <vPortFree>
				vPortFree( pxTCB );
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 ff80 	bl	8009ac8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008bc8:	e01a      	b.n	8008c00 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d103      	bne.n	8008bdc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 ff77 	bl	8009ac8 <vPortFree>
	}
 8008bda:	e011      	b.n	8008c00 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d00c      	beq.n	8008c00 <prvDeleteTCB+0x64>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	b672      	cpsid	i
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	b662      	cpsie	i
 8008bfa:	60fb      	str	r3, [r7, #12]
}
 8008bfc:	bf00      	nop
 8008bfe:	e7fe      	b.n	8008bfe <prvDeleteTCB+0x62>
	}
 8008c00:	bf00      	nop
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c0e:	4b0c      	ldr	r3, [pc, #48]	; (8008c40 <prvResetNextTaskUnblockTime+0x38>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d104      	bne.n	8008c22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c18:	4b0a      	ldr	r3, [pc, #40]	; (8008c44 <prvResetNextTaskUnblockTime+0x3c>)
 8008c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c20:	e008      	b.n	8008c34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c22:	4b07      	ldr	r3, [pc, #28]	; (8008c40 <prvResetNextTaskUnblockTime+0x38>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	4a04      	ldr	r2, [pc, #16]	; (8008c44 <prvResetNextTaskUnblockTime+0x3c>)
 8008c32:	6013      	str	r3, [r2, #0]
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	20000e40 	.word	0x20000e40
 8008c44:	20000ea8 	.word	0x20000ea8

08008c48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c4e:	4b0b      	ldr	r3, [pc, #44]	; (8008c7c <xTaskGetSchedulerState+0x34>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d102      	bne.n	8008c5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c56:	2301      	movs	r3, #1
 8008c58:	607b      	str	r3, [r7, #4]
 8008c5a:	e008      	b.n	8008c6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c5c:	4b08      	ldr	r3, [pc, #32]	; (8008c80 <xTaskGetSchedulerState+0x38>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d102      	bne.n	8008c6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c64:	2302      	movs	r3, #2
 8008c66:	607b      	str	r3, [r7, #4]
 8008c68:	e001      	b.n	8008c6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c6e:	687b      	ldr	r3, [r7, #4]
	}
 8008c70:	4618      	mov	r0, r3
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr
 8008c7c:	20000e94 	.word	0x20000e94
 8008c80:	20000eb0 	.word	0x20000eb0

08008c84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c90:	2300      	movs	r3, #0
 8008c92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d05a      	beq.n	8008d50 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c9a:	4b30      	ldr	r3, [pc, #192]	; (8008d5c <xTaskPriorityDisinherit+0xd8>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d00c      	beq.n	8008cbe <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca8:	b672      	cpsid	i
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	b662      	cpsie	i
 8008cb8:	60fb      	str	r3, [r7, #12]
}
 8008cba:	bf00      	nop
 8008cbc:	e7fe      	b.n	8008cbc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10c      	bne.n	8008ce0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cca:	b672      	cpsid	i
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	b662      	cpsie	i
 8008cda:	60bb      	str	r3, [r7, #8]
}
 8008cdc:	bf00      	nop
 8008cde:	e7fe      	b.n	8008cde <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce4:	1e5a      	subs	r2, r3, #1
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d02c      	beq.n	8008d50 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d128      	bne.n	8008d50 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	3304      	adds	r3, #4
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fe fc04 	bl	8007510 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d20:	4b0f      	ldr	r3, [pc, #60]	; (8008d60 <xTaskPriorityDisinherit+0xdc>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d903      	bls.n	8008d30 <xTaskPriorityDisinherit+0xac>
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2c:	4a0c      	ldr	r2, [pc, #48]	; (8008d60 <xTaskPriorityDisinherit+0xdc>)
 8008d2e:	6013      	str	r3, [r2, #0]
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d34:	4613      	mov	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4a09      	ldr	r2, [pc, #36]	; (8008d64 <xTaskPriorityDisinherit+0xe0>)
 8008d3e:	441a      	add	r2, r3
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	3304      	adds	r3, #4
 8008d44:	4619      	mov	r1, r3
 8008d46:	4610      	mov	r0, r2
 8008d48:	f7fe fb85 	bl	8007456 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d50:	697b      	ldr	r3, [r7, #20]
	}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	200009b4 	.word	0x200009b4
 8008d60:	20000e90 	.word	0x20000e90
 8008d64:	200009b8 	.word	0x200009b8

08008d68 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d72:	4b21      	ldr	r3, [pc, #132]	; (8008df8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d78:	4b20      	ldr	r3, [pc, #128]	; (8008dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	3304      	adds	r3, #4
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fe fbc6 	bl	8007510 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8a:	d10a      	bne.n	8008da2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d007      	beq.n	8008da2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d92:	4b1a      	ldr	r3, [pc, #104]	; (8008dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3304      	adds	r3, #4
 8008d98:	4619      	mov	r1, r3
 8008d9a:	4819      	ldr	r0, [pc, #100]	; (8008e00 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d9c:	f7fe fb5b 	bl	8007456 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008da0:	e026      	b.n	8008df0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4413      	add	r3, r2
 8008da8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008daa:	4b14      	ldr	r3, [pc, #80]	; (8008dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d209      	bcs.n	8008dce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dba:	4b12      	ldr	r3, [pc, #72]	; (8008e04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	4b0f      	ldr	r3, [pc, #60]	; (8008dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	f7fe fb69 	bl	800749e <vListInsert>
}
 8008dcc:	e010      	b.n	8008df0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dce:	4b0e      	ldr	r3, [pc, #56]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	4b0a      	ldr	r3, [pc, #40]	; (8008dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3304      	adds	r3, #4
 8008dd8:	4619      	mov	r1, r3
 8008dda:	4610      	mov	r0, r2
 8008ddc:	f7fe fb5f 	bl	800749e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008de0:	4b0a      	ldr	r3, [pc, #40]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d202      	bcs.n	8008df0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008dea:	4a08      	ldr	r2, [pc, #32]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	6013      	str	r3, [r2, #0]
}
 8008df0:	bf00      	nop
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	20000e8c 	.word	0x20000e8c
 8008dfc:	200009b4 	.word	0x200009b4
 8008e00:	20000e74 	.word	0x20000e74
 8008e04:	20000e44 	.word	0x20000e44
 8008e08:	20000e40 	.word	0x20000e40
 8008e0c:	20000ea8 	.word	0x20000ea8

08008e10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b08a      	sub	sp, #40	; 0x28
 8008e14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e16:	2300      	movs	r3, #0
 8008e18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e1a:	f000 fb15 	bl	8009448 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e1e:	4b1d      	ldr	r3, [pc, #116]	; (8008e94 <xTimerCreateTimerTask+0x84>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d021      	beq.n	8008e6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e26:	2300      	movs	r3, #0
 8008e28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e2e:	1d3a      	adds	r2, r7, #4
 8008e30:	f107 0108 	add.w	r1, r7, #8
 8008e34:	f107 030c 	add.w	r3, r7, #12
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7fe fac5 	bl	80073c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e3e:	6879      	ldr	r1, [r7, #4]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	9202      	str	r2, [sp, #8]
 8008e46:	9301      	str	r3, [sp, #4]
 8008e48:	2302      	movs	r3, #2
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	460a      	mov	r2, r1
 8008e50:	4911      	ldr	r1, [pc, #68]	; (8008e98 <xTimerCreateTimerTask+0x88>)
 8008e52:	4812      	ldr	r0, [pc, #72]	; (8008e9c <xTimerCreateTimerTask+0x8c>)
 8008e54:	f7ff f890 	bl	8007f78 <xTaskCreateStatic>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	4a11      	ldr	r2, [pc, #68]	; (8008ea0 <xTimerCreateTimerTask+0x90>)
 8008e5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e5e:	4b10      	ldr	r3, [pc, #64]	; (8008ea0 <xTimerCreateTimerTask+0x90>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e66:	2301      	movs	r3, #1
 8008e68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10c      	bne.n	8008e8a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e74:	b672      	cpsid	i
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	b662      	cpsie	i
 8008e84:	613b      	str	r3, [r7, #16]
}
 8008e86:	bf00      	nop
 8008e88:	e7fe      	b.n	8008e88 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008e8a:	697b      	ldr	r3, [r7, #20]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	20000ee4 	.word	0x20000ee4
 8008e98:	0800b640 	.word	0x0800b640
 8008e9c:	08008fe1 	.word	0x08008fe1
 8008ea0:	20000ee8 	.word	0x20000ee8

08008ea4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b08a      	sub	sp, #40	; 0x28
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
 8008eb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10c      	bne.n	8008ed6 <xTimerGenericCommand+0x32>
	__asm volatile
 8008ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec0:	b672      	cpsid	i
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	b662      	cpsie	i
 8008ed0:	623b      	str	r3, [r7, #32]
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ed6:	4b1a      	ldr	r3, [pc, #104]	; (8008f40 <xTimerGenericCommand+0x9c>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d02a      	beq.n	8008f34 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	2b05      	cmp	r3, #5
 8008eee:	dc18      	bgt.n	8008f22 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ef0:	f7ff feaa 	bl	8008c48 <xTaskGetSchedulerState>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d109      	bne.n	8008f0e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008efa:	4b11      	ldr	r3, [pc, #68]	; (8008f40 <xTimerGenericCommand+0x9c>)
 8008efc:	6818      	ldr	r0, [r3, #0]
 8008efe:	f107 0110 	add.w	r1, r7, #16
 8008f02:	2300      	movs	r3, #0
 8008f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f06:	f7fe fc3d 	bl	8007784 <xQueueGenericSend>
 8008f0a:	6278      	str	r0, [r7, #36]	; 0x24
 8008f0c:	e012      	b.n	8008f34 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f0e:	4b0c      	ldr	r3, [pc, #48]	; (8008f40 <xTimerGenericCommand+0x9c>)
 8008f10:	6818      	ldr	r0, [r3, #0]
 8008f12:	f107 0110 	add.w	r1, r7, #16
 8008f16:	2300      	movs	r3, #0
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f7fe fc33 	bl	8007784 <xQueueGenericSend>
 8008f1e:	6278      	str	r0, [r7, #36]	; 0x24
 8008f20:	e008      	b.n	8008f34 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f22:	4b07      	ldr	r3, [pc, #28]	; (8008f40 <xTimerGenericCommand+0x9c>)
 8008f24:	6818      	ldr	r0, [r3, #0]
 8008f26:	f107 0110 	add.w	r1, r7, #16
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	683a      	ldr	r2, [r7, #0]
 8008f2e:	f7fe fd2f 	bl	8007990 <xQueueGenericSendFromISR>
 8008f32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3728      	adds	r7, #40	; 0x28
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	20000ee4 	.word	0x20000ee4

08008f44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b088      	sub	sp, #32
 8008f48:	af02      	add	r7, sp, #8
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f4e:	4b23      	ldr	r3, [pc, #140]	; (8008fdc <prvProcessExpiredTimer+0x98>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	3304      	adds	r3, #4
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fe fad7 	bl	8007510 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f68:	f003 0304 	and.w	r3, r3, #4
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d024      	beq.n	8008fba <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	699a      	ldr	r2, [r3, #24]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	18d1      	adds	r1, r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	6978      	ldr	r0, [r7, #20]
 8008f7e:	f000 f8d3 	bl	8009128 <prvInsertTimerInActiveList>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d021      	beq.n	8008fcc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f88:	2300      	movs	r3, #0
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	2100      	movs	r1, #0
 8008f92:	6978      	ldr	r0, [r7, #20]
 8008f94:	f7ff ff86 	bl	8008ea4 <xTimerGenericCommand>
 8008f98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d115      	bne.n	8008fcc <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa4:	b672      	cpsid	i
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	b662      	cpsie	i
 8008fb4:	60fb      	str	r3, [r7, #12]
}
 8008fb6:	bf00      	nop
 8008fb8:	e7fe      	b.n	8008fb8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fc0:	f023 0301 	bic.w	r3, r3, #1
 8008fc4:	b2da      	uxtb	r2, r3
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	6a1b      	ldr	r3, [r3, #32]
 8008fd0:	6978      	ldr	r0, [r7, #20]
 8008fd2:	4798      	blx	r3
}
 8008fd4:	bf00      	nop
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	20000edc 	.word	0x20000edc

08008fe0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fe8:	f107 0308 	add.w	r3, r7, #8
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 f857 	bl	80090a0 <prvGetNextExpireTime>
 8008ff2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f000 f803 	bl	8009004 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008ffe:	f000 f8d5 	bl	80091ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009002:	e7f1      	b.n	8008fe8 <prvTimerTask+0x8>

08009004 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800900e:	f7ff fa1d 	bl	800844c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009012:	f107 0308 	add.w	r3, r7, #8
 8009016:	4618      	mov	r0, r3
 8009018:	f000 f866 	bl	80090e8 <prvSampleTimeNow>
 800901c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d130      	bne.n	8009086 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10a      	bne.n	8009040 <prvProcessTimerOrBlockTask+0x3c>
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	429a      	cmp	r2, r3
 8009030:	d806      	bhi.n	8009040 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009032:	f7ff fa19 	bl	8008468 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009036:	68f9      	ldr	r1, [r7, #12]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f7ff ff83 	bl	8008f44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800903e:	e024      	b.n	800908a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d008      	beq.n	8009058 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009046:	4b13      	ldr	r3, [pc, #76]	; (8009094 <prvProcessTimerOrBlockTask+0x90>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <prvProcessTimerOrBlockTask+0x50>
 8009050:	2301      	movs	r3, #1
 8009052:	e000      	b.n	8009056 <prvProcessTimerOrBlockTask+0x52>
 8009054:	2300      	movs	r3, #0
 8009056:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009058:	4b0f      	ldr	r3, [pc, #60]	; (8009098 <prvProcessTimerOrBlockTask+0x94>)
 800905a:	6818      	ldr	r0, [r3, #0]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	4619      	mov	r1, r3
 8009066:	f7fe ff53 	bl	8007f10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800906a:	f7ff f9fd 	bl	8008468 <xTaskResumeAll>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10a      	bne.n	800908a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009074:	4b09      	ldr	r3, [pc, #36]	; (800909c <prvProcessTimerOrBlockTask+0x98>)
 8009076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800907a:	601a      	str	r2, [r3, #0]
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	f3bf 8f6f 	isb	sy
}
 8009084:	e001      	b.n	800908a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009086:	f7ff f9ef 	bl	8008468 <xTaskResumeAll>
}
 800908a:	bf00      	nop
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	20000ee0 	.word	0x20000ee0
 8009098:	20000ee4 	.word	0x20000ee4
 800909c:	e000ed04 	.word	0xe000ed04

080090a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80090a8:	4b0e      	ldr	r3, [pc, #56]	; (80090e4 <prvGetNextExpireTime+0x44>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d101      	bne.n	80090b6 <prvGetNextExpireTime+0x16>
 80090b2:	2201      	movs	r2, #1
 80090b4:	e000      	b.n	80090b8 <prvGetNextExpireTime+0x18>
 80090b6:	2200      	movs	r2, #0
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d105      	bne.n	80090d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090c4:	4b07      	ldr	r3, [pc, #28]	; (80090e4 <prvGetNextExpireTime+0x44>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	60fb      	str	r3, [r7, #12]
 80090ce:	e001      	b.n	80090d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80090d0:	2300      	movs	r3, #0
 80090d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80090d4:	68fb      	ldr	r3, [r7, #12]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	20000edc 	.word	0x20000edc

080090e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80090f0:	f7ff fa5a 	bl	80085a8 <xTaskGetTickCount>
 80090f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80090f6:	4b0b      	ldr	r3, [pc, #44]	; (8009124 <prvSampleTimeNow+0x3c>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d205      	bcs.n	800910c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009100:	f000 f93c 	bl	800937c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	e002      	b.n	8009112 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009112:	4a04      	ldr	r2, [pc, #16]	; (8009124 <prvSampleTimeNow+0x3c>)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009118:	68fb      	ldr	r3, [r7, #12]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	20000eec 	.word	0x20000eec

08009128 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
 8009134:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009136:	2300      	movs	r3, #0
 8009138:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	429a      	cmp	r2, r3
 800914c:	d812      	bhi.n	8009174 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	1ad2      	subs	r2, r2, r3
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	429a      	cmp	r2, r3
 800915a:	d302      	bcc.n	8009162 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800915c:	2301      	movs	r3, #1
 800915e:	617b      	str	r3, [r7, #20]
 8009160:	e01b      	b.n	800919a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009162:	4b10      	ldr	r3, [pc, #64]	; (80091a4 <prvInsertTimerInActiveList+0x7c>)
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	3304      	adds	r3, #4
 800916a:	4619      	mov	r1, r3
 800916c:	4610      	mov	r0, r2
 800916e:	f7fe f996 	bl	800749e <vListInsert>
 8009172:	e012      	b.n	800919a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	429a      	cmp	r2, r3
 800917a:	d206      	bcs.n	800918a <prvInsertTimerInActiveList+0x62>
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	429a      	cmp	r2, r3
 8009182:	d302      	bcc.n	800918a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009184:	2301      	movs	r3, #1
 8009186:	617b      	str	r3, [r7, #20]
 8009188:	e007      	b.n	800919a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800918a:	4b07      	ldr	r3, [pc, #28]	; (80091a8 <prvInsertTimerInActiveList+0x80>)
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3304      	adds	r3, #4
 8009192:	4619      	mov	r1, r3
 8009194:	4610      	mov	r0, r2
 8009196:	f7fe f982 	bl	800749e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800919a:	697b      	ldr	r3, [r7, #20]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	20000ee0 	.word	0x20000ee0
 80091a8:	20000edc 	.word	0x20000edc

080091ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b08e      	sub	sp, #56	; 0x38
 80091b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091b2:	e0d0      	b.n	8009356 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	da1a      	bge.n	80091f0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80091ba:	1d3b      	adds	r3, r7, #4
 80091bc:	3304      	adds	r3, #4
 80091be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80091c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10c      	bne.n	80091e0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ca:	b672      	cpsid	i
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	b662      	cpsie	i
 80091da:	61fb      	str	r3, [r7, #28]
}
 80091dc:	bf00      	nop
 80091de:	e7fe      	b.n	80091de <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80091e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091e6:	6850      	ldr	r0, [r2, #4]
 80091e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ea:	6892      	ldr	r2, [r2, #8]
 80091ec:	4611      	mov	r1, r2
 80091ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f2c0 80ae 	blt.w	8009354 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80091fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fe:	695b      	ldr	r3, [r3, #20]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d004      	beq.n	800920e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009206:	3304      	adds	r3, #4
 8009208:	4618      	mov	r0, r3
 800920a:	f7fe f981 	bl	8007510 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800920e:	463b      	mov	r3, r7
 8009210:	4618      	mov	r0, r3
 8009212:	f7ff ff69 	bl	80090e8 <prvSampleTimeNow>
 8009216:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b09      	cmp	r3, #9
 800921c:	f200 809b 	bhi.w	8009356 <prvProcessReceivedCommands+0x1aa>
 8009220:	a201      	add	r2, pc, #4	; (adr r2, 8009228 <prvProcessReceivedCommands+0x7c>)
 8009222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009226:	bf00      	nop
 8009228:	08009251 	.word	0x08009251
 800922c:	08009251 	.word	0x08009251
 8009230:	08009251 	.word	0x08009251
 8009234:	080092c9 	.word	0x080092c9
 8009238:	080092dd 	.word	0x080092dd
 800923c:	0800932b 	.word	0x0800932b
 8009240:	08009251 	.word	0x08009251
 8009244:	08009251 	.word	0x08009251
 8009248:	080092c9 	.word	0x080092c9
 800924c:	080092dd 	.word	0x080092dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009256:	f043 0301 	orr.w	r3, r3, #1
 800925a:	b2da      	uxtb	r2, r3
 800925c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	18d1      	adds	r1, r2, r3
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800926e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009270:	f7ff ff5a 	bl	8009128 <prvInsertTimerInActiveList>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d06d      	beq.n	8009356 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800927a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009280:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009288:	f003 0304 	and.w	r3, r3, #4
 800928c:	2b00      	cmp	r3, #0
 800928e:	d062      	beq.n	8009356 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	441a      	add	r2, r3
 8009298:	2300      	movs	r3, #0
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	2300      	movs	r3, #0
 800929e:	2100      	movs	r1, #0
 80092a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092a2:	f7ff fdff 	bl	8008ea4 <xTimerGenericCommand>
 80092a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d153      	bne.n	8009356 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b2:	b672      	cpsid	i
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	b662      	cpsie	i
 80092c2:	61bb      	str	r3, [r7, #24]
}
 80092c4:	bf00      	nop
 80092c6:	e7fe      	b.n	80092c6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092ce:	f023 0301 	bic.w	r3, r3, #1
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80092da:	e03c      	b.n	8009356 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092e2:	f043 0301 	orr.w	r3, r3, #1
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80092f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10c      	bne.n	8009316 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80092fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009300:	b672      	cpsid	i
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	b662      	cpsie	i
 8009310:	617b      	str	r3, [r7, #20]
}
 8009312:	bf00      	nop
 8009314:	e7fe      	b.n	8009314 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009318:	699a      	ldr	r2, [r3, #24]
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	18d1      	adds	r1, r2, r3
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009324:	f7ff ff00 	bl	8009128 <prvInsertTimerInActiveList>
					break;
 8009328:	e015      	b.n	8009356 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800932a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b00      	cmp	r3, #0
 8009336:	d103      	bne.n	8009340 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800933a:	f000 fbc5 	bl	8009ac8 <vPortFree>
 800933e:	e00a      	b.n	8009356 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009342:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009346:	f023 0301 	bic.w	r3, r3, #1
 800934a:	b2da      	uxtb	r2, r3
 800934c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009352:	e000      	b.n	8009356 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009354:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009356:	4b08      	ldr	r3, [pc, #32]	; (8009378 <prvProcessReceivedCommands+0x1cc>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	1d39      	adds	r1, r7, #4
 800935c:	2200      	movs	r2, #0
 800935e:	4618      	mov	r0, r3
 8009360:	f7fe fbb6 	bl	8007ad0 <xQueueReceive>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	f47f af24 	bne.w	80091b4 <prvProcessReceivedCommands+0x8>
	}
}
 800936c:	bf00      	nop
 800936e:	bf00      	nop
 8009370:	3730      	adds	r7, #48	; 0x30
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	20000ee4 	.word	0x20000ee4

0800937c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b088      	sub	sp, #32
 8009380:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009382:	e04a      	b.n	800941a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009384:	4b2e      	ldr	r3, [pc, #184]	; (8009440 <prvSwitchTimerLists+0xc4>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800938e:	4b2c      	ldr	r3, [pc, #176]	; (8009440 <prvSwitchTimerLists+0xc4>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	3304      	adds	r3, #4
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe f8b7 	bl	8007510 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6a1b      	ldr	r3, [r3, #32]
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093b0:	f003 0304 	and.w	r3, r3, #4
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d030      	beq.n	800941a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	4413      	add	r3, r2
 80093c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d90e      	bls.n	80093e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093d6:	4b1a      	ldr	r3, [pc, #104]	; (8009440 <prvSwitchTimerLists+0xc4>)
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3304      	adds	r3, #4
 80093de:	4619      	mov	r1, r3
 80093e0:	4610      	mov	r0, r2
 80093e2:	f7fe f85c 	bl	800749e <vListInsert>
 80093e6:	e018      	b.n	800941a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093e8:	2300      	movs	r3, #0
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	2300      	movs	r3, #0
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	2100      	movs	r1, #0
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f7ff fd56 	bl	8008ea4 <xTimerGenericCommand>
 80093f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10c      	bne.n	800941a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009404:	b672      	cpsid	i
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	b662      	cpsie	i
 8009414:	603b      	str	r3, [r7, #0]
}
 8009416:	bf00      	nop
 8009418:	e7fe      	b.n	8009418 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800941a:	4b09      	ldr	r3, [pc, #36]	; (8009440 <prvSwitchTimerLists+0xc4>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1af      	bne.n	8009384 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009424:	4b06      	ldr	r3, [pc, #24]	; (8009440 <prvSwitchTimerLists+0xc4>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800942a:	4b06      	ldr	r3, [pc, #24]	; (8009444 <prvSwitchTimerLists+0xc8>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a04      	ldr	r2, [pc, #16]	; (8009440 <prvSwitchTimerLists+0xc4>)
 8009430:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009432:	4a04      	ldr	r2, [pc, #16]	; (8009444 <prvSwitchTimerLists+0xc8>)
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	6013      	str	r3, [r2, #0]
}
 8009438:	bf00      	nop
 800943a:	3718      	adds	r7, #24
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	20000edc 	.word	0x20000edc
 8009444:	20000ee0 	.word	0x20000ee0

08009448 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800944e:	f000 f945 	bl	80096dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009452:	4b15      	ldr	r3, [pc, #84]	; (80094a8 <prvCheckForValidListAndQueue+0x60>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d120      	bne.n	800949c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800945a:	4814      	ldr	r0, [pc, #80]	; (80094ac <prvCheckForValidListAndQueue+0x64>)
 800945c:	f7fd ffce 	bl	80073fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009460:	4813      	ldr	r0, [pc, #76]	; (80094b0 <prvCheckForValidListAndQueue+0x68>)
 8009462:	f7fd ffcb 	bl	80073fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009466:	4b13      	ldr	r3, [pc, #76]	; (80094b4 <prvCheckForValidListAndQueue+0x6c>)
 8009468:	4a10      	ldr	r2, [pc, #64]	; (80094ac <prvCheckForValidListAndQueue+0x64>)
 800946a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800946c:	4b12      	ldr	r3, [pc, #72]	; (80094b8 <prvCheckForValidListAndQueue+0x70>)
 800946e:	4a10      	ldr	r2, [pc, #64]	; (80094b0 <prvCheckForValidListAndQueue+0x68>)
 8009470:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009472:	2300      	movs	r3, #0
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	4b11      	ldr	r3, [pc, #68]	; (80094bc <prvCheckForValidListAndQueue+0x74>)
 8009478:	4a11      	ldr	r2, [pc, #68]	; (80094c0 <prvCheckForValidListAndQueue+0x78>)
 800947a:	2110      	movs	r1, #16
 800947c:	200a      	movs	r0, #10
 800947e:	f7fe f8db 	bl	8007638 <xQueueGenericCreateStatic>
 8009482:	4603      	mov	r3, r0
 8009484:	4a08      	ldr	r2, [pc, #32]	; (80094a8 <prvCheckForValidListAndQueue+0x60>)
 8009486:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009488:	4b07      	ldr	r3, [pc, #28]	; (80094a8 <prvCheckForValidListAndQueue+0x60>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d005      	beq.n	800949c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009490:	4b05      	ldr	r3, [pc, #20]	; (80094a8 <prvCheckForValidListAndQueue+0x60>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	490b      	ldr	r1, [pc, #44]	; (80094c4 <prvCheckForValidListAndQueue+0x7c>)
 8009496:	4618      	mov	r0, r3
 8009498:	f7fe fd10 	bl	8007ebc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800949c:	f000 f952 	bl	8009744 <vPortExitCritical>
}
 80094a0:	bf00      	nop
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	20000ee4 	.word	0x20000ee4
 80094ac:	20000eb4 	.word	0x20000eb4
 80094b0:	20000ec8 	.word	0x20000ec8
 80094b4:	20000edc 	.word	0x20000edc
 80094b8:	20000ee0 	.word	0x20000ee0
 80094bc:	20000f90 	.word	0x20000f90
 80094c0:	20000ef0 	.word	0x20000ef0
 80094c4:	0800b648 	.word	0x0800b648

080094c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	3b04      	subs	r3, #4
 80094d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80094e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	3b04      	subs	r3, #4
 80094e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	f023 0201 	bic.w	r2, r3, #1
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3b04      	subs	r3, #4
 80094f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094f8:	4a0c      	ldr	r2, [pc, #48]	; (800952c <pxPortInitialiseStack+0x64>)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3b14      	subs	r3, #20
 8009502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	3b04      	subs	r3, #4
 800950e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f06f 0202 	mvn.w	r2, #2
 8009516:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	3b20      	subs	r3, #32
 800951c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800951e:	68fb      	ldr	r3, [r7, #12]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	08009531 	.word	0x08009531

08009530 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800953a:	4b14      	ldr	r3, [pc, #80]	; (800958c <prvTaskExitError+0x5c>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009542:	d00c      	beq.n	800955e <prvTaskExitError+0x2e>
	__asm volatile
 8009544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009548:	b672      	cpsid	i
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	b662      	cpsie	i
 8009558:	60fb      	str	r3, [r7, #12]
}
 800955a:	bf00      	nop
 800955c:	e7fe      	b.n	800955c <prvTaskExitError+0x2c>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009562:	b672      	cpsid	i
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	b662      	cpsie	i
 8009572:	60bb      	str	r3, [r7, #8]
}
 8009574:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009576:	bf00      	nop
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d0fc      	beq.n	8009578 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800957e:	bf00      	nop
 8009580:	bf00      	nop
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	20000118 	.word	0x20000118

08009590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009590:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <pxCurrentTCBConst2>)
 8009592:	6819      	ldr	r1, [r3, #0]
 8009594:	6808      	ldr	r0, [r1, #0]
 8009596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959a:	f380 8809 	msr	PSP, r0
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f04f 0000 	mov.w	r0, #0
 80095a6:	f380 8811 	msr	BASEPRI, r0
 80095aa:	4770      	bx	lr
 80095ac:	f3af 8000 	nop.w

080095b0 <pxCurrentTCBConst2>:
 80095b0:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop

080095b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80095b8:	4808      	ldr	r0, [pc, #32]	; (80095dc <prvPortStartFirstTask+0x24>)
 80095ba:	6800      	ldr	r0, [r0, #0]
 80095bc:	6800      	ldr	r0, [r0, #0]
 80095be:	f380 8808 	msr	MSP, r0
 80095c2:	f04f 0000 	mov.w	r0, #0
 80095c6:	f380 8814 	msr	CONTROL, r0
 80095ca:	b662      	cpsie	i
 80095cc:	b661      	cpsie	f
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	df00      	svc	0
 80095d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80095da:	bf00      	nop
 80095dc:	e000ed08 	.word	0xe000ed08

080095e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095e6:	4b37      	ldr	r3, [pc, #220]	; (80096c4 <xPortStartScheduler+0xe4>)
 80095e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	22ff      	movs	r2, #255	; 0xff
 80095f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009600:	78fb      	ldrb	r3, [r7, #3]
 8009602:	b2db      	uxtb	r3, r3
 8009604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009608:	b2da      	uxtb	r2, r3
 800960a:	4b2f      	ldr	r3, [pc, #188]	; (80096c8 <xPortStartScheduler+0xe8>)
 800960c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800960e:	4b2f      	ldr	r3, [pc, #188]	; (80096cc <xPortStartScheduler+0xec>)
 8009610:	2207      	movs	r2, #7
 8009612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009614:	e009      	b.n	800962a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009616:	4b2d      	ldr	r3, [pc, #180]	; (80096cc <xPortStartScheduler+0xec>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3b01      	subs	r3, #1
 800961c:	4a2b      	ldr	r2, [pc, #172]	; (80096cc <xPortStartScheduler+0xec>)
 800961e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	b2db      	uxtb	r3, r3
 8009624:	005b      	lsls	r3, r3, #1
 8009626:	b2db      	uxtb	r3, r3
 8009628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800962a:	78fb      	ldrb	r3, [r7, #3]
 800962c:	b2db      	uxtb	r3, r3
 800962e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009632:	2b80      	cmp	r3, #128	; 0x80
 8009634:	d0ef      	beq.n	8009616 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009636:	4b25      	ldr	r3, [pc, #148]	; (80096cc <xPortStartScheduler+0xec>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f1c3 0307 	rsb	r3, r3, #7
 800963e:	2b04      	cmp	r3, #4
 8009640:	d00c      	beq.n	800965c <xPortStartScheduler+0x7c>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009646:	b672      	cpsid	i
 8009648:	f383 8811 	msr	BASEPRI, r3
 800964c:	f3bf 8f6f 	isb	sy
 8009650:	f3bf 8f4f 	dsb	sy
 8009654:	b662      	cpsie	i
 8009656:	60bb      	str	r3, [r7, #8]
}
 8009658:	bf00      	nop
 800965a:	e7fe      	b.n	800965a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800965c:	4b1b      	ldr	r3, [pc, #108]	; (80096cc <xPortStartScheduler+0xec>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	021b      	lsls	r3, r3, #8
 8009662:	4a1a      	ldr	r2, [pc, #104]	; (80096cc <xPortStartScheduler+0xec>)
 8009664:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009666:	4b19      	ldr	r3, [pc, #100]	; (80096cc <xPortStartScheduler+0xec>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800966e:	4a17      	ldr	r2, [pc, #92]	; (80096cc <xPortStartScheduler+0xec>)
 8009670:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	b2da      	uxtb	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800967a:	4b15      	ldr	r3, [pc, #84]	; (80096d0 <xPortStartScheduler+0xf0>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a14      	ldr	r2, [pc, #80]	; (80096d0 <xPortStartScheduler+0xf0>)
 8009680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009684:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009686:	4b12      	ldr	r3, [pc, #72]	; (80096d0 <xPortStartScheduler+0xf0>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a11      	ldr	r2, [pc, #68]	; (80096d0 <xPortStartScheduler+0xf0>)
 800968c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009690:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009692:	f000 f8dd 	bl	8009850 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009696:	4b0f      	ldr	r3, [pc, #60]	; (80096d4 <xPortStartScheduler+0xf4>)
 8009698:	2200      	movs	r2, #0
 800969a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800969c:	f000 f8fc 	bl	8009898 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80096a0:	4b0d      	ldr	r3, [pc, #52]	; (80096d8 <xPortStartScheduler+0xf8>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a0c      	ldr	r2, [pc, #48]	; (80096d8 <xPortStartScheduler+0xf8>)
 80096a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80096aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80096ac:	f7ff ff84 	bl	80095b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80096b0:	f7ff f846 	bl	8008740 <vTaskSwitchContext>
	prvTaskExitError();
 80096b4:	f7ff ff3c 	bl	8009530 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	e000e400 	.word	0xe000e400
 80096c8:	20000fe0 	.word	0x20000fe0
 80096cc:	20000fe4 	.word	0x20000fe4
 80096d0:	e000ed20 	.word	0xe000ed20
 80096d4:	20000118 	.word	0x20000118
 80096d8:	e000ef34 	.word	0xe000ef34

080096dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
	__asm volatile
 80096e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e6:	b672      	cpsid	i
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	b662      	cpsie	i
 80096f6:	607b      	str	r3, [r7, #4]
}
 80096f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096fa:	4b10      	ldr	r3, [pc, #64]	; (800973c <vPortEnterCritical+0x60>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3301      	adds	r3, #1
 8009700:	4a0e      	ldr	r2, [pc, #56]	; (800973c <vPortEnterCritical+0x60>)
 8009702:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009704:	4b0d      	ldr	r3, [pc, #52]	; (800973c <vPortEnterCritical+0x60>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d111      	bne.n	8009730 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800970c:	4b0c      	ldr	r3, [pc, #48]	; (8009740 <vPortEnterCritical+0x64>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	b2db      	uxtb	r3, r3
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00c      	beq.n	8009730 <vPortEnterCritical+0x54>
	__asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	b672      	cpsid	i
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	b662      	cpsie	i
 800972a:	603b      	str	r3, [r7, #0]
}
 800972c:	bf00      	nop
 800972e:	e7fe      	b.n	800972e <vPortEnterCritical+0x52>
	}
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	20000118 	.word	0x20000118
 8009740:	e000ed04 	.word	0xe000ed04

08009744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800974a:	4b13      	ldr	r3, [pc, #76]	; (8009798 <vPortExitCritical+0x54>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10c      	bne.n	800976c <vPortExitCritical+0x28>
	__asm volatile
 8009752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009756:	b672      	cpsid	i
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	b662      	cpsie	i
 8009766:	607b      	str	r3, [r7, #4]
}
 8009768:	bf00      	nop
 800976a:	e7fe      	b.n	800976a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800976c:	4b0a      	ldr	r3, [pc, #40]	; (8009798 <vPortExitCritical+0x54>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	3b01      	subs	r3, #1
 8009772:	4a09      	ldr	r2, [pc, #36]	; (8009798 <vPortExitCritical+0x54>)
 8009774:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009776:	4b08      	ldr	r3, [pc, #32]	; (8009798 <vPortExitCritical+0x54>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d105      	bne.n	800978a <vPortExitCritical+0x46>
 800977e:	2300      	movs	r3, #0
 8009780:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	f383 8811 	msr	BASEPRI, r3
}
 8009788:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800978a:	bf00      	nop
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	20000118 	.word	0x20000118
 800979c:	00000000 	.word	0x00000000

080097a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80097a0:	f3ef 8009 	mrs	r0, PSP
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	4b15      	ldr	r3, [pc, #84]	; (8009800 <pxCurrentTCBConst>)
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	f01e 0f10 	tst.w	lr, #16
 80097b0:	bf08      	it	eq
 80097b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ba:	6010      	str	r0, [r2, #0]
 80097bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097c4:	b672      	cpsid	i
 80097c6:	f380 8811 	msr	BASEPRI, r0
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	b662      	cpsie	i
 80097d4:	f7fe ffb4 	bl	8008740 <vTaskSwitchContext>
 80097d8:	f04f 0000 	mov.w	r0, #0
 80097dc:	f380 8811 	msr	BASEPRI, r0
 80097e0:	bc09      	pop	{r0, r3}
 80097e2:	6819      	ldr	r1, [r3, #0]
 80097e4:	6808      	ldr	r0, [r1, #0]
 80097e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ea:	f01e 0f10 	tst.w	lr, #16
 80097ee:	bf08      	it	eq
 80097f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097f4:	f380 8809 	msr	PSP, r0
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop

08009800 <pxCurrentTCBConst>:
 8009800:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop

08009808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009812:	b672      	cpsid	i
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	b662      	cpsie	i
 8009822:	607b      	str	r3, [r7, #4]
}
 8009824:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009826:	f7fe fecf 	bl	80085c8 <xTaskIncrementTick>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d003      	beq.n	8009838 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009830:	4b06      	ldr	r3, [pc, #24]	; (800984c <SysTick_Handler+0x44>)
 8009832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009836:	601a      	str	r2, [r3, #0]
 8009838:	2300      	movs	r3, #0
 800983a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	f383 8811 	msr	BASEPRI, r3
}
 8009842:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009844:	bf00      	nop
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	e000ed04 	.word	0xe000ed04

08009850 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009850:	b480      	push	{r7}
 8009852:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009854:	4b0b      	ldr	r3, [pc, #44]	; (8009884 <vPortSetupTimerInterrupt+0x34>)
 8009856:	2200      	movs	r2, #0
 8009858:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800985a:	4b0b      	ldr	r3, [pc, #44]	; (8009888 <vPortSetupTimerInterrupt+0x38>)
 800985c:	2200      	movs	r2, #0
 800985e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009860:	4b0a      	ldr	r3, [pc, #40]	; (800988c <vPortSetupTimerInterrupt+0x3c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a0a      	ldr	r2, [pc, #40]	; (8009890 <vPortSetupTimerInterrupt+0x40>)
 8009866:	fba2 2303 	umull	r2, r3, r2, r3
 800986a:	099b      	lsrs	r3, r3, #6
 800986c:	4a09      	ldr	r2, [pc, #36]	; (8009894 <vPortSetupTimerInterrupt+0x44>)
 800986e:	3b01      	subs	r3, #1
 8009870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009872:	4b04      	ldr	r3, [pc, #16]	; (8009884 <vPortSetupTimerInterrupt+0x34>)
 8009874:	2207      	movs	r2, #7
 8009876:	601a      	str	r2, [r3, #0]
}
 8009878:	bf00      	nop
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	e000e010 	.word	0xe000e010
 8009888:	e000e018 	.word	0xe000e018
 800988c:	2000011c 	.word	0x2000011c
 8009890:	10624dd3 	.word	0x10624dd3
 8009894:	e000e014 	.word	0xe000e014

08009898 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009898:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80098a8 <vPortEnableVFP+0x10>
 800989c:	6801      	ldr	r1, [r0, #0]
 800989e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80098a2:	6001      	str	r1, [r0, #0]
 80098a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80098a6:	bf00      	nop
 80098a8:	e000ed88 	.word	0xe000ed88

080098ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80098b2:	f3ef 8305 	mrs	r3, IPSR
 80098b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2b0f      	cmp	r3, #15
 80098bc:	d916      	bls.n	80098ec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098be:	4a19      	ldr	r2, [pc, #100]	; (8009924 <vPortValidateInterruptPriority+0x78>)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	4413      	add	r3, r2
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098c8:	4b17      	ldr	r3, [pc, #92]	; (8009928 <vPortValidateInterruptPriority+0x7c>)
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	7afa      	ldrb	r2, [r7, #11]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d20c      	bcs.n	80098ec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	b672      	cpsid	i
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	b662      	cpsie	i
 80098e6:	607b      	str	r3, [r7, #4]
}
 80098e8:	bf00      	nop
 80098ea:	e7fe      	b.n	80098ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098ec:	4b0f      	ldr	r3, [pc, #60]	; (800992c <vPortValidateInterruptPriority+0x80>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80098f4:	4b0e      	ldr	r3, [pc, #56]	; (8009930 <vPortValidateInterruptPriority+0x84>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d90c      	bls.n	8009916 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	b672      	cpsid	i
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	b662      	cpsie	i
 8009910:	603b      	str	r3, [r7, #0]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <vPortValidateInterruptPriority+0x68>
	}
 8009916:	bf00      	nop
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	e000e3f0 	.word	0xe000e3f0
 8009928:	20000fe0 	.word	0x20000fe0
 800992c:	e000ed0c 	.word	0xe000ed0c
 8009930:	20000fe4 	.word	0x20000fe4

08009934 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b08a      	sub	sp, #40	; 0x28
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800993c:	2300      	movs	r3, #0
 800993e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009940:	f7fe fd84 	bl	800844c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009944:	4b5b      	ldr	r3, [pc, #364]	; (8009ab4 <pvPortMalloc+0x180>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d101      	bne.n	8009950 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800994c:	f000 f91a 	bl	8009b84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009950:	4b59      	ldr	r3, [pc, #356]	; (8009ab8 <pvPortMalloc+0x184>)
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4013      	ands	r3, r2
 8009958:	2b00      	cmp	r3, #0
 800995a:	f040 8092 	bne.w	8009a82 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d01f      	beq.n	80099a4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009964:	2208      	movs	r2, #8
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4413      	add	r3, r2
 800996a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f003 0307 	and.w	r3, r3, #7
 8009972:	2b00      	cmp	r3, #0
 8009974:	d016      	beq.n	80099a4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f023 0307 	bic.w	r3, r3, #7
 800997c:	3308      	adds	r3, #8
 800997e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f003 0307 	and.w	r3, r3, #7
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00c      	beq.n	80099a4 <pvPortMalloc+0x70>
	__asm volatile
 800998a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998e:	b672      	cpsid	i
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	b662      	cpsie	i
 800999e:	617b      	str	r3, [r7, #20]
}
 80099a0:	bf00      	nop
 80099a2:	e7fe      	b.n	80099a2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d06b      	beq.n	8009a82 <pvPortMalloc+0x14e>
 80099aa:	4b44      	ldr	r3, [pc, #272]	; (8009abc <pvPortMalloc+0x188>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d866      	bhi.n	8009a82 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80099b4:	4b42      	ldr	r3, [pc, #264]	; (8009ac0 <pvPortMalloc+0x18c>)
 80099b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80099b8:	4b41      	ldr	r3, [pc, #260]	; (8009ac0 <pvPortMalloc+0x18c>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099be:	e004      	b.n	80099ca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80099c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d903      	bls.n	80099dc <pvPortMalloc+0xa8>
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1f1      	bne.n	80099c0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099dc:	4b35      	ldr	r3, [pc, #212]	; (8009ab4 <pvPortMalloc+0x180>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d04d      	beq.n	8009a82 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099e6:	6a3b      	ldr	r3, [r7, #32]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2208      	movs	r2, #8
 80099ec:	4413      	add	r3, r2
 80099ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	6a3b      	ldr	r3, [r7, #32]
 80099f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	685a      	ldr	r2, [r3, #4]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	1ad2      	subs	r2, r2, r3
 8009a00:	2308      	movs	r3, #8
 8009a02:	005b      	lsls	r3, r3, #1
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d921      	bls.n	8009a4c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	f003 0307 	and.w	r3, r3, #7
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00c      	beq.n	8009a34 <pvPortMalloc+0x100>
	__asm volatile
 8009a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1e:	b672      	cpsid	i
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	b662      	cpsie	i
 8009a2e:	613b      	str	r3, [r7, #16]
}
 8009a30:	bf00      	nop
 8009a32:	e7fe      	b.n	8009a32 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a36:	685a      	ldr	r2, [r3, #4]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	1ad2      	subs	r2, r2, r3
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a46:	69b8      	ldr	r0, [r7, #24]
 8009a48:	f000 f8fe 	bl	8009c48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a4c:	4b1b      	ldr	r3, [pc, #108]	; (8009abc <pvPortMalloc+0x188>)
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	4a19      	ldr	r2, [pc, #100]	; (8009abc <pvPortMalloc+0x188>)
 8009a58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a5a:	4b18      	ldr	r3, [pc, #96]	; (8009abc <pvPortMalloc+0x188>)
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	4b19      	ldr	r3, [pc, #100]	; (8009ac4 <pvPortMalloc+0x190>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d203      	bcs.n	8009a6e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a66:	4b15      	ldr	r3, [pc, #84]	; (8009abc <pvPortMalloc+0x188>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a16      	ldr	r2, [pc, #88]	; (8009ac4 <pvPortMalloc+0x190>)
 8009a6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a70:	685a      	ldr	r2, [r3, #4]
 8009a72:	4b11      	ldr	r3, [pc, #68]	; (8009ab8 <pvPortMalloc+0x184>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	431a      	orrs	r2, r3
 8009a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7e:	2200      	movs	r2, #0
 8009a80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a82:	f7fe fcf1 	bl	8008468 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	f003 0307 	and.w	r3, r3, #7
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00c      	beq.n	8009aaa <pvPortMalloc+0x176>
	__asm volatile
 8009a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a94:	b672      	cpsid	i
 8009a96:	f383 8811 	msr	BASEPRI, r3
 8009a9a:	f3bf 8f6f 	isb	sy
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	b662      	cpsie	i
 8009aa4:	60fb      	str	r3, [r7, #12]
}
 8009aa6:	bf00      	nop
 8009aa8:	e7fe      	b.n	8009aa8 <pvPortMalloc+0x174>
	return pvReturn;
 8009aaa:	69fb      	ldr	r3, [r7, #28]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3728      	adds	r7, #40	; 0x28
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	20004bf0 	.word	0x20004bf0
 8009ab8:	20004bfc 	.word	0x20004bfc
 8009abc:	20004bf4 	.word	0x20004bf4
 8009ac0:	20004be8 	.word	0x20004be8
 8009ac4:	20004bf8 	.word	0x20004bf8

08009ac8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d04c      	beq.n	8009b74 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ada:	2308      	movs	r3, #8
 8009adc:	425b      	negs	r3, r3
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	4b23      	ldr	r3, [pc, #140]	; (8009b7c <vPortFree+0xb4>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4013      	ands	r3, r2
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10c      	bne.n	8009b10 <vPortFree+0x48>
	__asm volatile
 8009af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afa:	b672      	cpsid	i
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	b662      	cpsie	i
 8009b0a:	60fb      	str	r3, [r7, #12]
}
 8009b0c:	bf00      	nop
 8009b0e:	e7fe      	b.n	8009b0e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00c      	beq.n	8009b32 <vPortFree+0x6a>
	__asm volatile
 8009b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1c:	b672      	cpsid	i
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	b662      	cpsie	i
 8009b2c:	60bb      	str	r3, [r7, #8]
}
 8009b2e:	bf00      	nop
 8009b30:	e7fe      	b.n	8009b30 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	4b11      	ldr	r3, [pc, #68]	; (8009b7c <vPortFree+0xb4>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d019      	beq.n	8009b74 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d115      	bne.n	8009b74 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	4b0b      	ldr	r3, [pc, #44]	; (8009b7c <vPortFree+0xb4>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	43db      	mvns	r3, r3
 8009b52:	401a      	ands	r2, r3
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b58:	f7fe fc78 	bl	800844c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	685a      	ldr	r2, [r3, #4]
 8009b60:	4b07      	ldr	r3, [pc, #28]	; (8009b80 <vPortFree+0xb8>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4413      	add	r3, r2
 8009b66:	4a06      	ldr	r2, [pc, #24]	; (8009b80 <vPortFree+0xb8>)
 8009b68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b6a:	6938      	ldr	r0, [r7, #16]
 8009b6c:	f000 f86c 	bl	8009c48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009b70:	f7fe fc7a 	bl	8008468 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b74:	bf00      	nop
 8009b76:	3718      	adds	r7, #24
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	20004bfc 	.word	0x20004bfc
 8009b80:	20004bf4 	.word	0x20004bf4

08009b84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009b8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b90:	4b27      	ldr	r3, [pc, #156]	; (8009c30 <prvHeapInit+0xac>)
 8009b92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f003 0307 	and.w	r3, r3, #7
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00c      	beq.n	8009bb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	3307      	adds	r3, #7
 8009ba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f023 0307 	bic.w	r3, r3, #7
 8009baa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	4a1f      	ldr	r2, [pc, #124]	; (8009c30 <prvHeapInit+0xac>)
 8009bb4:	4413      	add	r3, r2
 8009bb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009bbc:	4a1d      	ldr	r2, [pc, #116]	; (8009c34 <prvHeapInit+0xb0>)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009bc2:	4b1c      	ldr	r3, [pc, #112]	; (8009c34 <prvHeapInit+0xb0>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	4413      	add	r3, r2
 8009bce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bd0:	2208      	movs	r2, #8
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	1a9b      	subs	r3, r3, r2
 8009bd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f023 0307 	bic.w	r3, r3, #7
 8009bde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	4a15      	ldr	r2, [pc, #84]	; (8009c38 <prvHeapInit+0xb4>)
 8009be4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009be6:	4b14      	ldr	r3, [pc, #80]	; (8009c38 <prvHeapInit+0xb4>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2200      	movs	r2, #0
 8009bec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bee:	4b12      	ldr	r3, [pc, #72]	; (8009c38 <prvHeapInit+0xb4>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	1ad2      	subs	r2, r2, r3
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c04:	4b0c      	ldr	r3, [pc, #48]	; (8009c38 <prvHeapInit+0xb4>)
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	4a0a      	ldr	r2, [pc, #40]	; (8009c3c <prvHeapInit+0xb8>)
 8009c12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	4a09      	ldr	r2, [pc, #36]	; (8009c40 <prvHeapInit+0xbc>)
 8009c1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c1c:	4b09      	ldr	r3, [pc, #36]	; (8009c44 <prvHeapInit+0xc0>)
 8009c1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c22:	601a      	str	r2, [r3, #0]
}
 8009c24:	bf00      	nop
 8009c26:	3714      	adds	r7, #20
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr
 8009c30:	20000fe8 	.word	0x20000fe8
 8009c34:	20004be8 	.word	0x20004be8
 8009c38:	20004bf0 	.word	0x20004bf0
 8009c3c:	20004bf8 	.word	0x20004bf8
 8009c40:	20004bf4 	.word	0x20004bf4
 8009c44:	20004bfc 	.word	0x20004bfc

08009c48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c50:	4b28      	ldr	r3, [pc, #160]	; (8009cf4 <prvInsertBlockIntoFreeList+0xac>)
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	e002      	b.n	8009c5c <prvInsertBlockIntoFreeList+0x14>
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	60fb      	str	r3, [r7, #12]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d8f7      	bhi.n	8009c56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	4413      	add	r3, r2
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d108      	bne.n	8009c8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	441a      	add	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	441a      	add	r2, r3
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d118      	bne.n	8009cd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	4b15      	ldr	r3, [pc, #84]	; (8009cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d00d      	beq.n	8009cc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685a      	ldr	r2, [r3, #4]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	441a      	add	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	e008      	b.n	8009cd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009cc6:	4b0c      	ldr	r3, [pc, #48]	; (8009cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	601a      	str	r2, [r3, #0]
 8009cce:	e003      	b.n	8009cd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d002      	beq.n	8009ce6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ce6:	bf00      	nop
 8009ce8:	3714      	adds	r7, #20
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	20004be8 	.word	0x20004be8
 8009cf8:	20004bf0 	.word	0x20004bf0

08009cfc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009d00:	4904      	ldr	r1, [pc, #16]	; (8009d14 <MX_FATFS_Init+0x18>)
 8009d02:	4805      	ldr	r0, [pc, #20]	; (8009d18 <MX_FATFS_Init+0x1c>)
 8009d04:	f7fd f9f2 	bl	80070ec <FATFS_LinkDriver>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	4b03      	ldr	r3, [pc, #12]	; (8009d1c <MX_FATFS_Init+0x20>)
 8009d0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009d10:	bf00      	nop
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	20004d98 	.word	0x20004d98
 8009d18:	20000194 	.word	0x20000194
 8009d1c:	20004d9c 	.word	0x20004d9c

08009d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009d24:	f7f6 fbf0 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009d28:	f000 f82c 	bl	8009d84 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009d2c:	f000 f98e 	bl	800a04c <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 8009d30:	f000 f958 	bl	8009fe4 <_ZL19MX_USART3_UART_Initv>
  MX_FATFS_Init();
 8009d34:	f7ff ffe2 	bl	8009cfc <MX_FATFS_Init>
  MX_SPI1_Init();
 8009d38:	f000 f912 	bl	8009f60 <_ZL12MX_SPI1_Initv>
  MX_I2C1_Init();
 8009d3c:	f000 f8c2 	bl	8009ec4 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8009d40:	f7fd f9ea 	bl	8007118 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkLED01 */
  blinkLED01Handle = osThreadNew(StartDefaultTask, NULL, &blinkLED01_attributes);
 8009d44:	4a09      	ldr	r2, [pc, #36]	; (8009d6c <main+0x4c>)
 8009d46:	2100      	movs	r1, #0
 8009d48:	4809      	ldr	r0, [pc, #36]	; (8009d70 <main+0x50>)
 8009d4a:	f7fd fa4f 	bl	80071ec <osThreadNew>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	4a08      	ldr	r2, [pc, #32]	; (8009d74 <main+0x54>)
 8009d52:	6013      	str	r3, [r2, #0]

  /* creation of blinkLED02 */
  blinkLED02Handle = osThreadNew(StartTask02, NULL, &blinkLED02_attributes);
 8009d54:	4a08      	ldr	r2, [pc, #32]	; (8009d78 <main+0x58>)
 8009d56:	2100      	movs	r1, #0
 8009d58:	4808      	ldr	r0, [pc, #32]	; (8009d7c <main+0x5c>)
 8009d5a:	f7fd fa47 	bl	80071ec <osThreadNew>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	4a07      	ldr	r2, [pc, #28]	; (8009d80 <main+0x60>)
 8009d62:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8009d64:	f7fd fa0c 	bl	8007180 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009d68:	e7fe      	b.n	8009d68 <main+0x48>
 8009d6a:	bf00      	nop
 8009d6c:	0800b6b0 	.word	0x0800b6b0
 8009d70:	0800a241 	.word	0x0800a241
 8009d74:	20004d34 	.word	0x20004d34
 8009d78:	0800b6d4 	.word	0x0800b6d4
 8009d7c:	0800a265 	.word	0x0800a265
 8009d80:	20004d38 	.word	0x20004d38

08009d84 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b0b4      	sub	sp, #208	; 0xd0
 8009d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009d8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009d8e:	2230      	movs	r2, #48	; 0x30
 8009d90:	2100      	movs	r1, #0
 8009d92:	4618      	mov	r0, r3
 8009d94:	f001 fb0c 	bl	800b3b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009d98:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	601a      	str	r2, [r3, #0]
 8009da0:	605a      	str	r2, [r3, #4]
 8009da2:	609a      	str	r2, [r3, #8]
 8009da4:	60da      	str	r2, [r3, #12]
 8009da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009da8:	f107 0308 	add.w	r3, r7, #8
 8009dac:	2284      	movs	r2, #132	; 0x84
 8009dae:	2100      	movs	r1, #0
 8009db0:	4618      	mov	r0, r3
 8009db2:	f001 fafd 	bl	800b3b0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8009db6:	f7f8 f9a1 	bl	80020fc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009dba:	4b3f      	ldr	r3, [pc, #252]	; (8009eb8 <_Z18SystemClock_Configv+0x134>)
 8009dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbe:	4a3e      	ldr	r2, [pc, #248]	; (8009eb8 <_Z18SystemClock_Configv+0x134>)
 8009dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8009dc6:	4b3c      	ldr	r3, [pc, #240]	; (8009eb8 <_Z18SystemClock_Configv+0x134>)
 8009dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dce:	607b      	str	r3, [r7, #4]
 8009dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8009dd2:	4b3a      	ldr	r3, [pc, #232]	; (8009ebc <_Z18SystemClock_Configv+0x138>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009dda:	4a38      	ldr	r2, [pc, #224]	; (8009ebc <_Z18SystemClock_Configv+0x138>)
 8009ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009de0:	6013      	str	r3, [r2, #0]
 8009de2:	4b36      	ldr	r3, [pc, #216]	; (8009ebc <_Z18SystemClock_Configv+0x138>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009dea:	603b      	str	r3, [r7, #0]
 8009dec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009dee:	2301      	movs	r3, #1
 8009df0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8009df4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8009df8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009e02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009e06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009e0a:	2304      	movs	r3, #4
 8009e0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8009e10:	2348      	movs	r3, #72	; 0x48
 8009e12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009e16:	2302      	movs	r3, #2
 8009e18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009e22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7f8 f978 	bl	800211c <HAL_RCC_OscConfig>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	bf14      	ite	ne
 8009e32:	2301      	movne	r3, #1
 8009e34:	2300      	moveq	r3, #0
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d001      	beq.n	8009e40 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8009e3c:	f000 fa34 	bl	800a2a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009e40:	230f      	movs	r3, #15
 8009e42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009e46:	2302      	movs	r3, #2
 8009e48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009e60:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009e64:	2102      	movs	r1, #2
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7f8 fbfc 	bl	8002664 <HAL_RCC_ClockConfig>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	bf14      	ite	ne
 8009e72:	2301      	movne	r3, #1
 8009e74:	2300      	moveq	r3, #0
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d001      	beq.n	8009e80 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 8009e7c:	f000 fa14 	bl	800a2a8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8009e80:	4b0f      	ldr	r3, [pc, #60]	; (8009ec0 <_Z18SystemClock_Configv+0x13c>)
 8009e82:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8009e84:	2300      	movs	r3, #0
 8009e86:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009e92:	f107 0308 	add.w	r3, r7, #8
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7f8 fe18 	bl	8002acc <HAL_RCCEx_PeriphCLKConfig>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	bf14      	ite	ne
 8009ea2:	2301      	movne	r3, #1
 8009ea4:	2300      	moveq	r3, #0
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d001      	beq.n	8009eb0 <_Z18SystemClock_Configv+0x12c>
  {
    Error_Handler();
 8009eac:	f000 f9fc 	bl	800a2a8 <Error_Handler>
  }
}
 8009eb0:	bf00      	nop
 8009eb2:	37d0      	adds	r7, #208	; 0xd0
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	40023800 	.word	0x40023800
 8009ebc:	40007000 	.word	0x40007000
 8009ec0:	00204100 	.word	0x00204100

08009ec4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009ec8:	4b22      	ldr	r3, [pc, #136]	; (8009f54 <_ZL12MX_I2C1_Initv+0x90>)
 8009eca:	4a23      	ldr	r2, [pc, #140]	; (8009f58 <_ZL12MX_I2C1_Initv+0x94>)
 8009ecc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8009ece:	4b21      	ldr	r3, [pc, #132]	; (8009f54 <_ZL12MX_I2C1_Initv+0x90>)
 8009ed0:	4a22      	ldr	r2, [pc, #136]	; (8009f5c <_ZL12MX_I2C1_Initv+0x98>)
 8009ed2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009ed4:	4b1f      	ldr	r3, [pc, #124]	; (8009f54 <_ZL12MX_I2C1_Initv+0x90>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009eda:	4b1e      	ldr	r3, [pc, #120]	; (8009f54 <_ZL12MX_I2C1_Initv+0x90>)
 8009edc:	2201      	movs	r2, #1
 8009ede:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009ee0:	4b1c      	ldr	r3, [pc, #112]	; (8009f54 <_ZL12MX_I2C1_Initv+0x90>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8009ee6:	4b1b      	ldr	r3, [pc, #108]	; (8009f54 <_ZL12MX_I2C1_Initv+0x90>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009eec:	4b19      	ldr	r3, [pc, #100]	; (8009f54 <_ZL12MX_I2C1_Initv+0x90>)
 8009eee:	2200      	movs	r2, #0
 8009ef0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009ef2:	4b18      	ldr	r3, [pc, #96]	; (8009f54 <_ZL12MX_I2C1_Initv+0x90>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009ef8:	4b16      	ldr	r3, [pc, #88]	; (8009f54 <_ZL12MX_I2C1_Initv+0x90>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009efe:	4815      	ldr	r0, [pc, #84]	; (8009f54 <_ZL12MX_I2C1_Initv+0x90>)
 8009f00:	f7f6 fe16 	bl	8000b30 <HAL_I2C_Init>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	bf14      	ite	ne
 8009f0a:	2301      	movne	r3, #1
 8009f0c:	2300      	moveq	r3, #0
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d001      	beq.n	8009f18 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8009f14:	f000 f9c8 	bl	800a2a8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009f18:	2100      	movs	r1, #0
 8009f1a:	480e      	ldr	r0, [pc, #56]	; (8009f54 <_ZL12MX_I2C1_Initv+0x90>)
 8009f1c:	f7f6 fe98 	bl	8000c50 <HAL_I2CEx_ConfigAnalogFilter>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	bf14      	ite	ne
 8009f26:	2301      	movne	r3, #1
 8009f28:	2300      	moveq	r3, #0
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d001      	beq.n	8009f34 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8009f30:	f000 f9ba 	bl	800a2a8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009f34:	2100      	movs	r1, #0
 8009f36:	4807      	ldr	r0, [pc, #28]	; (8009f54 <_ZL12MX_I2C1_Initv+0x90>)
 8009f38:	f7f6 fed5 	bl	8000ce6 <HAL_I2CEx_ConfigDigitalFilter>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	bf14      	ite	ne
 8009f42:	2301      	movne	r3, #1
 8009f44:	2300      	moveq	r3, #0
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8009f4c:	f000 f9ac 	bl	800a2a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009f50:	bf00      	nop
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	20004c00 	.word	0x20004c00
 8009f58:	40005400 	.word	0x40005400
 8009f5c:	00808cd2 	.word	0x00808cd2

08009f60 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8009f64:	4b1d      	ldr	r3, [pc, #116]	; (8009fdc <_ZL12MX_SPI1_Initv+0x7c>)
 8009f66:	4a1e      	ldr	r2, [pc, #120]	; (8009fe0 <_ZL12MX_SPI1_Initv+0x80>)
 8009f68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009f6a:	4b1c      	ldr	r3, [pc, #112]	; (8009fdc <_ZL12MX_SPI1_Initv+0x7c>)
 8009f6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009f70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009f72:	4b1a      	ldr	r3, [pc, #104]	; (8009fdc <_ZL12MX_SPI1_Initv+0x7c>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009f78:	4b18      	ldr	r3, [pc, #96]	; (8009fdc <_ZL12MX_SPI1_Initv+0x7c>)
 8009f7a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009f7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f80:	4b16      	ldr	r3, [pc, #88]	; (8009fdc <_ZL12MX_SPI1_Initv+0x7c>)
 8009f82:	2200      	movs	r2, #0
 8009f84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009f86:	4b15      	ldr	r3, [pc, #84]	; (8009fdc <_ZL12MX_SPI1_Initv+0x7c>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009f8c:	4b13      	ldr	r3, [pc, #76]	; (8009fdc <_ZL12MX_SPI1_Initv+0x7c>)
 8009f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8009f94:	4b11      	ldr	r3, [pc, #68]	; (8009fdc <_ZL12MX_SPI1_Initv+0x7c>)
 8009f96:	2228      	movs	r2, #40	; 0x28
 8009f98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009f9a:	4b10      	ldr	r3, [pc, #64]	; (8009fdc <_ZL12MX_SPI1_Initv+0x7c>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009fa0:	4b0e      	ldr	r3, [pc, #56]	; (8009fdc <_ZL12MX_SPI1_Initv+0x7c>)
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009fa6:	4b0d      	ldr	r3, [pc, #52]	; (8009fdc <_ZL12MX_SPI1_Initv+0x7c>)
 8009fa8:	2200      	movs	r2, #0
 8009faa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8009fac:	4b0b      	ldr	r3, [pc, #44]	; (8009fdc <_ZL12MX_SPI1_Initv+0x7c>)
 8009fae:	2207      	movs	r2, #7
 8009fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009fb2:	4b0a      	ldr	r3, [pc, #40]	; (8009fdc <_ZL12MX_SPI1_Initv+0x7c>)
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8009fb8:	4b08      	ldr	r3, [pc, #32]	; (8009fdc <_ZL12MX_SPI1_Initv+0x7c>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009fbe:	4807      	ldr	r0, [pc, #28]	; (8009fdc <_ZL12MX_SPI1_Initv+0x7c>)
 8009fc0:	f7f9 f974 	bl	80032ac <HAL_SPI_Init>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	bf14      	ite	ne
 8009fca:	2301      	movne	r3, #1
 8009fcc:	2300      	moveq	r3, #0
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8009fd4:	f000 f968 	bl	800a2a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009fd8:	bf00      	nop
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	20004c4c 	.word	0x20004c4c
 8009fe0:	40013000 	.word	0x40013000

08009fe4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8009fe8:	4b16      	ldr	r3, [pc, #88]	; (800a044 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009fea:	4a17      	ldr	r2, [pc, #92]	; (800a048 <_ZL19MX_USART3_UART_Initv+0x64>)
 8009fec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8009fee:	4b15      	ldr	r3, [pc, #84]	; (800a044 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009ff0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009ff4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009ff6:	4b13      	ldr	r3, [pc, #76]	; (800a044 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009ffc:	4b11      	ldr	r3, [pc, #68]	; (800a044 <_ZL19MX_USART3_UART_Initv+0x60>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a002:	4b10      	ldr	r3, [pc, #64]	; (800a044 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a004:	2200      	movs	r2, #0
 800a006:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a008:	4b0e      	ldr	r3, [pc, #56]	; (800a044 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a00a:	220c      	movs	r2, #12
 800a00c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a00e:	4b0d      	ldr	r3, [pc, #52]	; (800a044 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a010:	2200      	movs	r2, #0
 800a012:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a014:	4b0b      	ldr	r3, [pc, #44]	; (800a044 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a016:	2200      	movs	r2, #0
 800a018:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a01a:	4b0a      	ldr	r3, [pc, #40]	; (800a044 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a020:	4b08      	ldr	r3, [pc, #32]	; (800a044 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a022:	2200      	movs	r2, #0
 800a024:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a026:	4807      	ldr	r0, [pc, #28]	; (800a044 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a028:	f7f9 fcca 	bl	80039c0 <HAL_UART_Init>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	bf14      	ite	ne
 800a032:	2301      	movne	r3, #1
 800a034:	2300      	moveq	r3, #0
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d001      	beq.n	800a040 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 800a03c:	f000 f934 	bl	800a2a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a040:	bf00      	nop
 800a042:	bd80      	pop	{r7, pc}
 800a044:	20004cb0 	.word	0x20004cb0
 800a048:	40004800 	.word	0x40004800

0800a04c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b08c      	sub	sp, #48	; 0x30
 800a050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a052:	f107 031c 	add.w	r3, r7, #28
 800a056:	2200      	movs	r2, #0
 800a058:	601a      	str	r2, [r3, #0]
 800a05a:	605a      	str	r2, [r3, #4]
 800a05c:	609a      	str	r2, [r3, #8]
 800a05e:	60da      	str	r2, [r3, #12]
 800a060:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a062:	4b71      	ldr	r3, [pc, #452]	; (800a228 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a066:	4a70      	ldr	r2, [pc, #448]	; (800a228 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a068:	f043 0304 	orr.w	r3, r3, #4
 800a06c:	6313      	str	r3, [r2, #48]	; 0x30
 800a06e:	4b6e      	ldr	r3, [pc, #440]	; (800a228 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a072:	f003 0304 	and.w	r3, r3, #4
 800a076:	61bb      	str	r3, [r7, #24]
 800a078:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a07a:	4b6b      	ldr	r3, [pc, #428]	; (800a228 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a07e:	4a6a      	ldr	r2, [pc, #424]	; (800a228 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a084:	6313      	str	r3, [r2, #48]	; 0x30
 800a086:	4b68      	ldr	r3, [pc, #416]	; (800a228 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a08e:	617b      	str	r3, [r7, #20]
 800a090:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a092:	4b65      	ldr	r3, [pc, #404]	; (800a228 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a096:	4a64      	ldr	r2, [pc, #400]	; (800a228 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a098:	f043 0301 	orr.w	r3, r3, #1
 800a09c:	6313      	str	r3, [r2, #48]	; 0x30
 800a09e:	4b62      	ldr	r3, [pc, #392]	; (800a228 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a2:	f003 0301 	and.w	r3, r3, #1
 800a0a6:	613b      	str	r3, [r7, #16]
 800a0a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a0aa:	4b5f      	ldr	r3, [pc, #380]	; (800a228 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ae:	4a5e      	ldr	r2, [pc, #376]	; (800a228 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a0b0:	f043 0302 	orr.w	r3, r3, #2
 800a0b4:	6313      	str	r3, [r2, #48]	; 0x30
 800a0b6:	4b5c      	ldr	r3, [pc, #368]	; (800a228 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ba:	f003 0302 	and.w	r3, r3, #2
 800a0be:	60fb      	str	r3, [r7, #12]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a0c2:	4b59      	ldr	r3, [pc, #356]	; (800a228 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c6:	4a58      	ldr	r2, [pc, #352]	; (800a228 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a0c8:	f043 0308 	orr.w	r3, r3, #8
 800a0cc:	6313      	str	r3, [r2, #48]	; 0x30
 800a0ce:	4b56      	ldr	r3, [pc, #344]	; (800a228 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d2:	f003 0308 	and.w	r3, r3, #8
 800a0d6:	60bb      	str	r3, [r7, #8]
 800a0d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a0da:	4b53      	ldr	r3, [pc, #332]	; (800a228 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0de:	4a52      	ldr	r2, [pc, #328]	; (800a228 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a0e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0e4:	6313      	str	r3, [r2, #48]	; 0x30
 800a0e6:	4b50      	ldr	r3, [pc, #320]	; (800a228 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ee:	607b      	str	r3, [r7, #4]
 800a0f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	2110      	movs	r1, #16
 800a0f6:	484d      	ldr	r0, [pc, #308]	; (800a22c <_ZL12MX_GPIO_Initv+0x1e0>)
 800a0f8:	f7f6 fce6 	bl	8000ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f244 0181 	movw	r1, #16513	; 0x4081
 800a102:	484b      	ldr	r0, [pc, #300]	; (800a230 <_ZL12MX_GPIO_Initv+0x1e4>)
 800a104:	f7f6 fce0 	bl	8000ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800a108:	2200      	movs	r2, #0
 800a10a:	2140      	movs	r1, #64	; 0x40
 800a10c:	4849      	ldr	r0, [pc, #292]	; (800a234 <_ZL12MX_GPIO_Initv+0x1e8>)
 800a10e:	f7f6 fcdb 	bl	8000ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800a112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a118:	4b47      	ldr	r3, [pc, #284]	; (800a238 <_ZL12MX_GPIO_Initv+0x1ec>)
 800a11a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a11c:	2300      	movs	r3, #0
 800a11e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800a120:	f107 031c 	add.w	r3, r7, #28
 800a124:	4619      	mov	r1, r3
 800a126:	4845      	ldr	r0, [pc, #276]	; (800a23c <_ZL12MX_GPIO_Initv+0x1f0>)
 800a128:	f7f6 fb22 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a12c:	2332      	movs	r3, #50	; 0x32
 800a12e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a130:	2302      	movs	r3, #2
 800a132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a134:	2300      	movs	r3, #0
 800a136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a138:	2303      	movs	r3, #3
 800a13a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a13c:	230b      	movs	r3, #11
 800a13e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a140:	f107 031c 	add.w	r3, r7, #28
 800a144:	4619      	mov	r1, r3
 800a146:	483d      	ldr	r0, [pc, #244]	; (800a23c <_ZL12MX_GPIO_Initv+0x1f0>)
 800a148:	f7f6 fb12 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a14c:	2386      	movs	r3, #134	; 0x86
 800a14e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a150:	2302      	movs	r3, #2
 800a152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a154:	2300      	movs	r3, #0
 800a156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a158:	2303      	movs	r3, #3
 800a15a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a15c:	230b      	movs	r3, #11
 800a15e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a160:	f107 031c 	add.w	r3, r7, #28
 800a164:	4619      	mov	r1, r3
 800a166:	4831      	ldr	r0, [pc, #196]	; (800a22c <_ZL12MX_GPIO_Initv+0x1e0>)
 800a168:	f7f6 fb02 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800a16c:	2310      	movs	r3, #16
 800a16e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a170:	2301      	movs	r3, #1
 800a172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a174:	2300      	movs	r3, #0
 800a176:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a178:	2300      	movs	r3, #0
 800a17a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800a17c:	f107 031c 	add.w	r3, r7, #28
 800a180:	4619      	mov	r1, r3
 800a182:	482a      	ldr	r0, [pc, #168]	; (800a22c <_ZL12MX_GPIO_Initv+0x1e0>)
 800a184:	f7f6 faf4 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800a188:	f244 0381 	movw	r3, #16513	; 0x4081
 800a18c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a18e:	2301      	movs	r3, #1
 800a190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a192:	2300      	movs	r3, #0
 800a194:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a196:	2300      	movs	r3, #0
 800a198:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a19a:	f107 031c 	add.w	r3, r7, #28
 800a19e:	4619      	mov	r1, r3
 800a1a0:	4823      	ldr	r0, [pc, #140]	; (800a230 <_ZL12MX_GPIO_Initv+0x1e4>)
 800a1a2:	f7f6 fae5 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a1a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a1aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a1b8:	230b      	movs	r3, #11
 800a1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a1bc:	f107 031c 	add.w	r3, r7, #28
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	481b      	ldr	r0, [pc, #108]	; (800a230 <_ZL12MX_GPIO_Initv+0x1e4>)
 800a1c4:	f7f6 fad4 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800a1c8:	2340      	movs	r3, #64	; 0x40
 800a1ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800a1d8:	f107 031c 	add.w	r3, r7, #28
 800a1dc:	4619      	mov	r1, r3
 800a1de:	4815      	ldr	r0, [pc, #84]	; (800a234 <_ZL12MX_GPIO_Initv+0x1e8>)
 800a1e0:	f7f6 fac6 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800a1e4:	2380      	movs	r3, #128	; 0x80
 800a1e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a1f0:	f107 031c 	add.w	r3, r7, #28
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	480f      	ldr	r0, [pc, #60]	; (800a234 <_ZL12MX_GPIO_Initv+0x1e8>)
 800a1f8:	f7f6 faba 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a1fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a202:	2302      	movs	r3, #2
 800a204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a206:	2300      	movs	r3, #0
 800a208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a20a:	2303      	movs	r3, #3
 800a20c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a20e:	230b      	movs	r3, #11
 800a210:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a212:	f107 031c 	add.w	r3, r7, #28
 800a216:	4619      	mov	r1, r3
 800a218:	4806      	ldr	r0, [pc, #24]	; (800a234 <_ZL12MX_GPIO_Initv+0x1e8>)
 800a21a:	f7f6 faa9 	bl	8000770 <HAL_GPIO_Init>

}
 800a21e:	bf00      	nop
 800a220:	3730      	adds	r7, #48	; 0x30
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	40023800 	.word	0x40023800
 800a22c:	40020000 	.word	0x40020000
 800a230:	40020400 	.word	0x40020400
 800a234:	40021800 	.word	0x40021800
 800a238:	10110000 	.word	0x10110000
 800a23c:	40020800 	.word	0x40020800

0800a240 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800a248:	f000 fa10 	bl	800a66c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800a24c:	2101      	movs	r1, #1
 800a24e:	4804      	ldr	r0, [pc, #16]	; (800a260 <_Z16StartDefaultTaskPv+0x20>)
 800a250:	f7f6 fc53 	bl	8000afa <HAL_GPIO_TogglePin>
	  osDelay(500);
 800a254:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a258:	f7fd f86e 	bl	8007338 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800a25c:	e7f6      	b.n	800a24c <_Z16StartDefaultTaskPv+0xc>
 800a25e:	bf00      	nop
 800a260:	40020400 	.word	0x40020400

0800a264 <_Z11StartTask02Pv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800a26c:	2180      	movs	r1, #128	; 0x80
 800a26e:	4804      	ldr	r0, [pc, #16]	; (800a280 <_Z11StartTask02Pv+0x1c>)
 800a270:	f7f6 fc43 	bl	8000afa <HAL_GPIO_TogglePin>
	  osDelay(500);
 800a274:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a278:	f7fd f85e 	bl	8007338 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800a27c:	e7f6      	b.n	800a26c <_Z11StartTask02Pv+0x8>
 800a27e:	bf00      	nop
 800a280:	40020400 	.word	0x40020400

0800a284 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a04      	ldr	r2, [pc, #16]	; (800a2a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d101      	bne.n	800a29a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a296:	f7f6 f945 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a29a:	bf00      	nop
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	40002000 	.word	0x40002000

0800a2a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a2ac:	b672      	cpsid	i
}
 800a2ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a2b0:	e7fe      	b.n	800a2b0 <Error_Handler+0x8>
	...

0800a2b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a2ba:	4b11      	ldr	r3, [pc, #68]	; (800a300 <HAL_MspInit+0x4c>)
 800a2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2be:	4a10      	ldr	r2, [pc, #64]	; (800a300 <HAL_MspInit+0x4c>)
 800a2c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2c4:	6413      	str	r3, [r2, #64]	; 0x40
 800a2c6:	4b0e      	ldr	r3, [pc, #56]	; (800a300 <HAL_MspInit+0x4c>)
 800a2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2ce:	607b      	str	r3, [r7, #4]
 800a2d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2d2:	4b0b      	ldr	r3, [pc, #44]	; (800a300 <HAL_MspInit+0x4c>)
 800a2d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d6:	4a0a      	ldr	r2, [pc, #40]	; (800a300 <HAL_MspInit+0x4c>)
 800a2d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2dc:	6453      	str	r3, [r2, #68]	; 0x44
 800a2de:	4b08      	ldr	r3, [pc, #32]	; (800a300 <HAL_MspInit+0x4c>)
 800a2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2e6:	603b      	str	r3, [r7, #0]
 800a2e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	210f      	movs	r1, #15
 800a2ee:	f06f 0001 	mvn.w	r0, #1
 800a2f2:	f7f6 fa13 	bl	800071c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a2f6:	bf00      	nop
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	40023800 	.word	0x40023800

0800a304 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b08a      	sub	sp, #40	; 0x28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a30c:	f107 0314 	add.w	r3, r7, #20
 800a310:	2200      	movs	r2, #0
 800a312:	601a      	str	r2, [r3, #0]
 800a314:	605a      	str	r2, [r3, #4]
 800a316:	609a      	str	r2, [r3, #8]
 800a318:	60da      	str	r2, [r3, #12]
 800a31a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a17      	ldr	r2, [pc, #92]	; (800a380 <HAL_I2C_MspInit+0x7c>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d128      	bne.n	800a378 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a326:	4b17      	ldr	r3, [pc, #92]	; (800a384 <HAL_I2C_MspInit+0x80>)
 800a328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a32a:	4a16      	ldr	r2, [pc, #88]	; (800a384 <HAL_I2C_MspInit+0x80>)
 800a32c:	f043 0302 	orr.w	r3, r3, #2
 800a330:	6313      	str	r3, [r2, #48]	; 0x30
 800a332:	4b14      	ldr	r3, [pc, #80]	; (800a384 <HAL_I2C_MspInit+0x80>)
 800a334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a336:	f003 0302 	and.w	r3, r3, #2
 800a33a:	613b      	str	r3, [r7, #16]
 800a33c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800a33e:	f44f 7310 	mov.w	r3, #576	; 0x240
 800a342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a344:	2312      	movs	r3, #18
 800a346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a348:	2300      	movs	r3, #0
 800a34a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a34c:	2303      	movs	r3, #3
 800a34e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a350:	2304      	movs	r3, #4
 800a352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a354:	f107 0314 	add.w	r3, r7, #20
 800a358:	4619      	mov	r1, r3
 800a35a:	480b      	ldr	r0, [pc, #44]	; (800a388 <HAL_I2C_MspInit+0x84>)
 800a35c:	f7f6 fa08 	bl	8000770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a360:	4b08      	ldr	r3, [pc, #32]	; (800a384 <HAL_I2C_MspInit+0x80>)
 800a362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a364:	4a07      	ldr	r2, [pc, #28]	; (800a384 <HAL_I2C_MspInit+0x80>)
 800a366:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a36a:	6413      	str	r3, [r2, #64]	; 0x40
 800a36c:	4b05      	ldr	r3, [pc, #20]	; (800a384 <HAL_I2C_MspInit+0x80>)
 800a36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a374:	60fb      	str	r3, [r7, #12]
 800a376:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a378:	bf00      	nop
 800a37a:	3728      	adds	r7, #40	; 0x28
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	40005400 	.word	0x40005400
 800a384:	40023800 	.word	0x40023800
 800a388:	40020400 	.word	0x40020400

0800a38c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b08a      	sub	sp, #40	; 0x28
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a394:	f107 0314 	add.w	r3, r7, #20
 800a398:	2200      	movs	r2, #0
 800a39a:	601a      	str	r2, [r3, #0]
 800a39c:	605a      	str	r2, [r3, #4]
 800a39e:	609a      	str	r2, [r3, #8]
 800a3a0:	60da      	str	r2, [r3, #12]
 800a3a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a25      	ldr	r2, [pc, #148]	; (800a440 <HAL_SPI_MspInit+0xb4>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d143      	bne.n	800a436 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a3ae:	4b25      	ldr	r3, [pc, #148]	; (800a444 <HAL_SPI_MspInit+0xb8>)
 800a3b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3b2:	4a24      	ldr	r2, [pc, #144]	; (800a444 <HAL_SPI_MspInit+0xb8>)
 800a3b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a3b8:	6453      	str	r3, [r2, #68]	; 0x44
 800a3ba:	4b22      	ldr	r3, [pc, #136]	; (800a444 <HAL_SPI_MspInit+0xb8>)
 800a3bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a3c2:	613b      	str	r3, [r7, #16]
 800a3c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3c6:	4b1f      	ldr	r3, [pc, #124]	; (800a444 <HAL_SPI_MspInit+0xb8>)
 800a3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ca:	4a1e      	ldr	r2, [pc, #120]	; (800a444 <HAL_SPI_MspInit+0xb8>)
 800a3cc:	f043 0301 	orr.w	r3, r3, #1
 800a3d0:	6313      	str	r3, [r2, #48]	; 0x30
 800a3d2:	4b1c      	ldr	r3, [pc, #112]	; (800a444 <HAL_SPI_MspInit+0xb8>)
 800a3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d6:	f003 0301 	and.w	r3, r3, #1
 800a3da:	60fb      	str	r3, [r7, #12]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3de:	4b19      	ldr	r3, [pc, #100]	; (800a444 <HAL_SPI_MspInit+0xb8>)
 800a3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e2:	4a18      	ldr	r2, [pc, #96]	; (800a444 <HAL_SPI_MspInit+0xb8>)
 800a3e4:	f043 0302 	orr.w	r3, r3, #2
 800a3e8:	6313      	str	r3, [r2, #48]	; 0x30
 800a3ea:	4b16      	ldr	r3, [pc, #88]	; (800a444 <HAL_SPI_MspInit+0xb8>)
 800a3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ee:	f003 0302 	and.w	r3, r3, #2
 800a3f2:	60bb      	str	r3, [r7, #8]
 800a3f4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800a3f6:	2360      	movs	r3, #96	; 0x60
 800a3f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3fa:	2302      	movs	r3, #2
 800a3fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3fe:	2300      	movs	r3, #0
 800a400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a402:	2303      	movs	r3, #3
 800a404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a406:	2305      	movs	r3, #5
 800a408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a40a:	f107 0314 	add.w	r3, r7, #20
 800a40e:	4619      	mov	r1, r3
 800a410:	480d      	ldr	r0, [pc, #52]	; (800a448 <HAL_SPI_MspInit+0xbc>)
 800a412:	f7f6 f9ad 	bl	8000770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800a416:	2320      	movs	r3, #32
 800a418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a41a:	2302      	movs	r3, #2
 800a41c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a41e:	2300      	movs	r3, #0
 800a420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a422:	2303      	movs	r3, #3
 800a424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a426:	2305      	movs	r3, #5
 800a428:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a42a:	f107 0314 	add.w	r3, r7, #20
 800a42e:	4619      	mov	r1, r3
 800a430:	4806      	ldr	r0, [pc, #24]	; (800a44c <HAL_SPI_MspInit+0xc0>)
 800a432:	f7f6 f99d 	bl	8000770 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800a436:	bf00      	nop
 800a438:	3728      	adds	r7, #40	; 0x28
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	40013000 	.word	0x40013000
 800a444:	40023800 	.word	0x40023800
 800a448:	40020000 	.word	0x40020000
 800a44c:	40020400 	.word	0x40020400

0800a450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b08a      	sub	sp, #40	; 0x28
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a458:	f107 0314 	add.w	r3, r7, #20
 800a45c:	2200      	movs	r2, #0
 800a45e:	601a      	str	r2, [r3, #0]
 800a460:	605a      	str	r2, [r3, #4]
 800a462:	609a      	str	r2, [r3, #8]
 800a464:	60da      	str	r2, [r3, #12]
 800a466:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a17      	ldr	r2, [pc, #92]	; (800a4cc <HAL_UART_MspInit+0x7c>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d128      	bne.n	800a4c4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800a472:	4b17      	ldr	r3, [pc, #92]	; (800a4d0 <HAL_UART_MspInit+0x80>)
 800a474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a476:	4a16      	ldr	r2, [pc, #88]	; (800a4d0 <HAL_UART_MspInit+0x80>)
 800a478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a47c:	6413      	str	r3, [r2, #64]	; 0x40
 800a47e:	4b14      	ldr	r3, [pc, #80]	; (800a4d0 <HAL_UART_MspInit+0x80>)
 800a480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a486:	613b      	str	r3, [r7, #16]
 800a488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a48a:	4b11      	ldr	r3, [pc, #68]	; (800a4d0 <HAL_UART_MspInit+0x80>)
 800a48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48e:	4a10      	ldr	r2, [pc, #64]	; (800a4d0 <HAL_UART_MspInit+0x80>)
 800a490:	f043 0308 	orr.w	r3, r3, #8
 800a494:	6313      	str	r3, [r2, #48]	; 0x30
 800a496:	4b0e      	ldr	r3, [pc, #56]	; (800a4d0 <HAL_UART_MspInit+0x80>)
 800a498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49a:	f003 0308 	and.w	r3, r3, #8
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800a4a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a4a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a4b4:	2307      	movs	r3, #7
 800a4b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a4b8:	f107 0314 	add.w	r3, r7, #20
 800a4bc:	4619      	mov	r1, r3
 800a4be:	4805      	ldr	r0, [pc, #20]	; (800a4d4 <HAL_UART_MspInit+0x84>)
 800a4c0:	f7f6 f956 	bl	8000770 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800a4c4:	bf00      	nop
 800a4c6:	3728      	adds	r7, #40	; 0x28
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	40004800 	.word	0x40004800
 800a4d0:	40023800 	.word	0x40023800
 800a4d4:	40020c00 	.word	0x40020c00

0800a4d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b08c      	sub	sp, #48	; 0x30
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	6879      	ldr	r1, [r7, #4]
 800a4ec:	202d      	movs	r0, #45	; 0x2d
 800a4ee:	f7f6 f915 	bl	800071c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800a4f2:	202d      	movs	r0, #45	; 0x2d
 800a4f4:	f7f6 f92e 	bl	8000754 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800a4f8:	4b1f      	ldr	r3, [pc, #124]	; (800a578 <HAL_InitTick+0xa0>)
 800a4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fc:	4a1e      	ldr	r2, [pc, #120]	; (800a578 <HAL_InitTick+0xa0>)
 800a4fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a502:	6413      	str	r3, [r2, #64]	; 0x40
 800a504:	4b1c      	ldr	r3, [pc, #112]	; (800a578 <HAL_InitTick+0xa0>)
 800a506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a50c:	60fb      	str	r3, [r7, #12]
 800a50e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a510:	f107 0210 	add.w	r2, r7, #16
 800a514:	f107 0314 	add.w	r3, r7, #20
 800a518:	4611      	mov	r1, r2
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7f8 faa4 	bl	8002a68 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a520:	f7f8 fa7a 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 800a524:	4603      	mov	r3, r0
 800a526:	005b      	lsls	r3, r3, #1
 800a528:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52c:	4a13      	ldr	r2, [pc, #76]	; (800a57c <HAL_InitTick+0xa4>)
 800a52e:	fba2 2303 	umull	r2, r3, r2, r3
 800a532:	0c9b      	lsrs	r3, r3, #18
 800a534:	3b01      	subs	r3, #1
 800a536:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800a538:	4b11      	ldr	r3, [pc, #68]	; (800a580 <HAL_InitTick+0xa8>)
 800a53a:	4a12      	ldr	r2, [pc, #72]	; (800a584 <HAL_InitTick+0xac>)
 800a53c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800a53e:	4b10      	ldr	r3, [pc, #64]	; (800a580 <HAL_InitTick+0xa8>)
 800a540:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a544:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800a546:	4a0e      	ldr	r2, [pc, #56]	; (800a580 <HAL_InitTick+0xa8>)
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800a54c:	4b0c      	ldr	r3, [pc, #48]	; (800a580 <HAL_InitTick+0xa8>)
 800a54e:	2200      	movs	r2, #0
 800a550:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a552:	4b0b      	ldr	r3, [pc, #44]	; (800a580 <HAL_InitTick+0xa8>)
 800a554:	2200      	movs	r2, #0
 800a556:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800a558:	4809      	ldr	r0, [pc, #36]	; (800a580 <HAL_InitTick+0xa8>)
 800a55a:	f7f8 ff52 	bl	8003402 <HAL_TIM_Base_Init>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d104      	bne.n	800a56e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 800a564:	4806      	ldr	r0, [pc, #24]	; (800a580 <HAL_InitTick+0xa8>)
 800a566:	f7f8 ffad 	bl	80034c4 <HAL_TIM_Base_Start_IT>
 800a56a:	4603      	mov	r3, r0
 800a56c:	e000      	b.n	800a570 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
}
 800a570:	4618      	mov	r0, r3
 800a572:	3730      	adds	r7, #48	; 0x30
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	40023800 	.word	0x40023800
 800a57c:	431bde83 	.word	0x431bde83
 800a580:	20005204 	.word	0x20005204
 800a584:	40002000 	.word	0x40002000

0800a588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a588:	b480      	push	{r7}
 800a58a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a58c:	e7fe      	b.n	800a58c <NMI_Handler+0x4>

0800a58e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a58e:	b480      	push	{r7}
 800a590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a592:	e7fe      	b.n	800a592 <HardFault_Handler+0x4>

0800a594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a594:	b480      	push	{r7}
 800a596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a598:	e7fe      	b.n	800a598 <MemManage_Handler+0x4>

0800a59a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a59a:	b480      	push	{r7}
 800a59c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a59e:	e7fe      	b.n	800a59e <BusFault_Handler+0x4>

0800a5a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a5a4:	e7fe      	b.n	800a5a4 <UsageFault_Handler+0x4>

0800a5a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a5aa:	bf00      	nop
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800a5b8:	4802      	ldr	r0, [pc, #8]	; (800a5c4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800a5ba:	f7f8 fffb 	bl	80035b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800a5be:	bf00      	nop
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	20005204 	.word	0x20005204

0800a5c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a5cc:	4802      	ldr	r0, [pc, #8]	; (800a5d8 <OTG_FS_IRQHandler+0x10>)
 800a5ce:	f7f6 fd1c 	bl	800100a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a5d2:	bf00      	nop
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	20006520 	.word	0x20006520

0800a5dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b086      	sub	sp, #24
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a5e4:	4a14      	ldr	r2, [pc, #80]	; (800a638 <_sbrk+0x5c>)
 800a5e6:	4b15      	ldr	r3, [pc, #84]	; (800a63c <_sbrk+0x60>)
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a5f0:	4b13      	ldr	r3, [pc, #76]	; (800a640 <_sbrk+0x64>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d102      	bne.n	800a5fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a5f8:	4b11      	ldr	r3, [pc, #68]	; (800a640 <_sbrk+0x64>)
 800a5fa:	4a12      	ldr	r2, [pc, #72]	; (800a644 <_sbrk+0x68>)
 800a5fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a5fe:	4b10      	ldr	r3, [pc, #64]	; (800a640 <_sbrk+0x64>)
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4413      	add	r3, r2
 800a606:	693a      	ldr	r2, [r7, #16]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d207      	bcs.n	800a61c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a60c:	f000 fe88 	bl	800b320 <__errno>
 800a610:	4603      	mov	r3, r0
 800a612:	220c      	movs	r2, #12
 800a614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a616:	f04f 33ff 	mov.w	r3, #4294967295
 800a61a:	e009      	b.n	800a630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a61c:	4b08      	ldr	r3, [pc, #32]	; (800a640 <_sbrk+0x64>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a622:	4b07      	ldr	r3, [pc, #28]	; (800a640 <_sbrk+0x64>)
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4413      	add	r3, r2
 800a62a:	4a05      	ldr	r2, [pc, #20]	; (800a640 <_sbrk+0x64>)
 800a62c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a62e:	68fb      	ldr	r3, [r7, #12]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3718      	adds	r7, #24
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	20050000 	.word	0x20050000
 800a63c:	00000400 	.word	0x00000400
 800a640:	20004d3c 	.word	0x20004d3c
 800a644:	20006b28 	.word	0x20006b28

0800a648 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a648:	b480      	push	{r7}
 800a64a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a64c:	4b06      	ldr	r3, [pc, #24]	; (800a668 <SystemInit+0x20>)
 800a64e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a652:	4a05      	ldr	r2, [pc, #20]	; (800a668 <SystemInit+0x20>)
 800a654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a65c:	bf00      	nop
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	e000ed00 	.word	0xe000ed00

0800a66c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a670:	2200      	movs	r2, #0
 800a672:	4912      	ldr	r1, [pc, #72]	; (800a6bc <MX_USB_DEVICE_Init+0x50>)
 800a674:	4812      	ldr	r0, [pc, #72]	; (800a6c0 <MX_USB_DEVICE_Init+0x54>)
 800a676:	f7fb fbaf 	bl	8005dd8 <USBD_Init>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d001      	beq.n	800a684 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a680:	f7ff fe12 	bl	800a2a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a684:	490f      	ldr	r1, [pc, #60]	; (800a6c4 <MX_USB_DEVICE_Init+0x58>)
 800a686:	480e      	ldr	r0, [pc, #56]	; (800a6c0 <MX_USB_DEVICE_Init+0x54>)
 800a688:	f7fb fbdc 	bl	8005e44 <USBD_RegisterClass>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d001      	beq.n	800a696 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a692:	f7ff fe09 	bl	800a2a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a696:	490c      	ldr	r1, [pc, #48]	; (800a6c8 <MX_USB_DEVICE_Init+0x5c>)
 800a698:	4809      	ldr	r0, [pc, #36]	; (800a6c0 <MX_USB_DEVICE_Init+0x54>)
 800a69a:	f7fb fb31 	bl	8005d00 <USBD_CDC_RegisterInterface>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d001      	beq.n	800a6a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a6a4:	f7ff fe00 	bl	800a2a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a6a8:	4805      	ldr	r0, [pc, #20]	; (800a6c0 <MX_USB_DEVICE_Init+0x54>)
 800a6aa:	f7fb fbec 	bl	8005e86 <USBD_Start>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d001      	beq.n	800a6b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a6b4:	f7ff fdf8 	bl	800a2a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a6b8:	bf00      	nop
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	20000134 	.word	0x20000134
 800a6c0:	20005250 	.word	0x20005250
 800a6c4:	20000014 	.word	0x20000014
 800a6c8:	20000120 	.word	0x20000120

0800a6cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	4905      	ldr	r1, [pc, #20]	; (800a6e8 <CDC_Init_FS+0x1c>)
 800a6d4:	4805      	ldr	r0, [pc, #20]	; (800a6ec <CDC_Init_FS+0x20>)
 800a6d6:	f7fb fb28 	bl	8005d2a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a6da:	4905      	ldr	r1, [pc, #20]	; (800a6f0 <CDC_Init_FS+0x24>)
 800a6dc:	4803      	ldr	r0, [pc, #12]	; (800a6ec <CDC_Init_FS+0x20>)
 800a6de:	f7fb fb3d 	bl	8005d5c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a6e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	20005d20 	.word	0x20005d20
 800a6ec:	20005250 	.word	0x20005250
 800a6f0:	20005520 	.word	0x20005520

0800a6f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a6f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	4603      	mov	r3, r0
 800a70c:	6039      	str	r1, [r7, #0]
 800a70e:	71fb      	strb	r3, [r7, #7]
 800a710:	4613      	mov	r3, r2
 800a712:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a714:	79fb      	ldrb	r3, [r7, #7]
 800a716:	2b23      	cmp	r3, #35	; 0x23
 800a718:	d84a      	bhi.n	800a7b0 <CDC_Control_FS+0xac>
 800a71a:	a201      	add	r2, pc, #4	; (adr r2, 800a720 <CDC_Control_FS+0x1c>)
 800a71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a720:	0800a7b1 	.word	0x0800a7b1
 800a724:	0800a7b1 	.word	0x0800a7b1
 800a728:	0800a7b1 	.word	0x0800a7b1
 800a72c:	0800a7b1 	.word	0x0800a7b1
 800a730:	0800a7b1 	.word	0x0800a7b1
 800a734:	0800a7b1 	.word	0x0800a7b1
 800a738:	0800a7b1 	.word	0x0800a7b1
 800a73c:	0800a7b1 	.word	0x0800a7b1
 800a740:	0800a7b1 	.word	0x0800a7b1
 800a744:	0800a7b1 	.word	0x0800a7b1
 800a748:	0800a7b1 	.word	0x0800a7b1
 800a74c:	0800a7b1 	.word	0x0800a7b1
 800a750:	0800a7b1 	.word	0x0800a7b1
 800a754:	0800a7b1 	.word	0x0800a7b1
 800a758:	0800a7b1 	.word	0x0800a7b1
 800a75c:	0800a7b1 	.word	0x0800a7b1
 800a760:	0800a7b1 	.word	0x0800a7b1
 800a764:	0800a7b1 	.word	0x0800a7b1
 800a768:	0800a7b1 	.word	0x0800a7b1
 800a76c:	0800a7b1 	.word	0x0800a7b1
 800a770:	0800a7b1 	.word	0x0800a7b1
 800a774:	0800a7b1 	.word	0x0800a7b1
 800a778:	0800a7b1 	.word	0x0800a7b1
 800a77c:	0800a7b1 	.word	0x0800a7b1
 800a780:	0800a7b1 	.word	0x0800a7b1
 800a784:	0800a7b1 	.word	0x0800a7b1
 800a788:	0800a7b1 	.word	0x0800a7b1
 800a78c:	0800a7b1 	.word	0x0800a7b1
 800a790:	0800a7b1 	.word	0x0800a7b1
 800a794:	0800a7b1 	.word	0x0800a7b1
 800a798:	0800a7b1 	.word	0x0800a7b1
 800a79c:	0800a7b1 	.word	0x0800a7b1
 800a7a0:	0800a7b1 	.word	0x0800a7b1
 800a7a4:	0800a7b1 	.word	0x0800a7b1
 800a7a8:	0800a7b1 	.word	0x0800a7b1
 800a7ac:	0800a7b1 	.word	0x0800a7b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a7b0:	bf00      	nop
  }

  return (USBD_OK);
 800a7b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a7ca:	6879      	ldr	r1, [r7, #4]
 800a7cc:	4805      	ldr	r0, [pc, #20]	; (800a7e4 <CDC_Receive_FS+0x24>)
 800a7ce:	f7fb fac5 	bl	8005d5c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a7d2:	4804      	ldr	r0, [pc, #16]	; (800a7e4 <CDC_Receive_FS+0x24>)
 800a7d4:	f7fb fad6 	bl	8005d84 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a7d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20005250 	.word	0x20005250

0800a7e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b087      	sub	sp, #28
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a7fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	371c      	adds	r7, #28
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
	...

0800a80c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b08a      	sub	sp, #40	; 0x28
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a814:	f107 0314 	add.w	r3, r7, #20
 800a818:	2200      	movs	r2, #0
 800a81a:	601a      	str	r2, [r3, #0]
 800a81c:	605a      	str	r2, [r3, #4]
 800a81e:	609a      	str	r2, [r3, #8]
 800a820:	60da      	str	r2, [r3, #12]
 800a822:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a82c:	d149      	bne.n	800a8c2 <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a82e:	4b27      	ldr	r3, [pc, #156]	; (800a8cc <HAL_PCD_MspInit+0xc0>)
 800a830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a832:	4a26      	ldr	r2, [pc, #152]	; (800a8cc <HAL_PCD_MspInit+0xc0>)
 800a834:	f043 0301 	orr.w	r3, r3, #1
 800a838:	6313      	str	r3, [r2, #48]	; 0x30
 800a83a:	4b24      	ldr	r3, [pc, #144]	; (800a8cc <HAL_PCD_MspInit+0xc0>)
 800a83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	613b      	str	r3, [r7, #16]
 800a844:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a846:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a84a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a84c:	2302      	movs	r3, #2
 800a84e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a850:	2300      	movs	r3, #0
 800a852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a854:	2303      	movs	r3, #3
 800a856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a858:	230a      	movs	r3, #10
 800a85a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a85c:	f107 0314 	add.w	r3, r7, #20
 800a860:	4619      	mov	r1, r3
 800a862:	481b      	ldr	r0, [pc, #108]	; (800a8d0 <HAL_PCD_MspInit+0xc4>)
 800a864:	f7f5 ff84 	bl	8000770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a86c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a86e:	2300      	movs	r3, #0
 800a870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a872:	2300      	movs	r3, #0
 800a874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a876:	f107 0314 	add.w	r3, r7, #20
 800a87a:	4619      	mov	r1, r3
 800a87c:	4814      	ldr	r0, [pc, #80]	; (800a8d0 <HAL_PCD_MspInit+0xc4>)
 800a87e:	f7f5 ff77 	bl	8000770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a882:	4b12      	ldr	r3, [pc, #72]	; (800a8cc <HAL_PCD_MspInit+0xc0>)
 800a884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a886:	4a11      	ldr	r2, [pc, #68]	; (800a8cc <HAL_PCD_MspInit+0xc0>)
 800a888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a88c:	6353      	str	r3, [r2, #52]	; 0x34
 800a88e:	4b0f      	ldr	r3, [pc, #60]	; (800a8cc <HAL_PCD_MspInit+0xc0>)
 800a890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	4b0c      	ldr	r3, [pc, #48]	; (800a8cc <HAL_PCD_MspInit+0xc0>)
 800a89c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a89e:	4a0b      	ldr	r2, [pc, #44]	; (800a8cc <HAL_PCD_MspInit+0xc0>)
 800a8a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8a4:	6453      	str	r3, [r2, #68]	; 0x44
 800a8a6:	4b09      	ldr	r3, [pc, #36]	; (800a8cc <HAL_PCD_MspInit+0xc0>)
 800a8a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8ae:	60bb      	str	r3, [r7, #8]
 800a8b0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	2105      	movs	r1, #5
 800a8b6:	2043      	movs	r0, #67	; 0x43
 800a8b8:	f7f5 ff30 	bl	800071c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a8bc:	2043      	movs	r0, #67	; 0x43
 800a8be:	f7f5 ff49 	bl	8000754 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a8c2:	bf00      	nop
 800a8c4:	3728      	adds	r7, #40	; 0x28
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	40023800 	.word	0x40023800
 800a8d0:	40020000 	.word	0x40020000

0800a8d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	4610      	mov	r0, r2
 800a8ec:	f7fb fb16 	bl	8005f1c <USBD_LL_SetupStage>
}
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	460b      	mov	r3, r1
 800a902:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800a90a:	78fa      	ldrb	r2, [r7, #3]
 800a90c:	6879      	ldr	r1, [r7, #4]
 800a90e:	4613      	mov	r3, r2
 800a910:	00db      	lsls	r3, r3, #3
 800a912:	1a9b      	subs	r3, r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	440b      	add	r3, r1
 800a918:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	78fb      	ldrb	r3, [r7, #3]
 800a920:	4619      	mov	r1, r3
 800a922:	f7fb fb50 	bl	8005fc6 <USBD_LL_DataOutStage>
}
 800a926:	bf00      	nop
 800a928:	3708      	adds	r7, #8
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b082      	sub	sp, #8
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	460b      	mov	r3, r1
 800a938:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800a940:	78fa      	ldrb	r2, [r7, #3]
 800a942:	6879      	ldr	r1, [r7, #4]
 800a944:	4613      	mov	r3, r2
 800a946:	00db      	lsls	r3, r3, #3
 800a948:	1a9b      	subs	r3, r3, r2
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	440b      	add	r3, r1
 800a94e:	3348      	adds	r3, #72	; 0x48
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	78fb      	ldrb	r3, [r7, #3]
 800a954:	4619      	mov	r1, r3
 800a956:	f7fb fb99 	bl	800608c <USBD_LL_DataInStage>
}
 800a95a:	bf00      	nop
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b082      	sub	sp, #8
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a970:	4618      	mov	r0, r3
 800a972:	f7fb fc9d 	bl	80062b0 <USBD_LL_SOF>
}
 800a976:	bf00      	nop
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b084      	sub	sp, #16
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a986:	2301      	movs	r3, #1
 800a988:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d102      	bne.n	800a998 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a992:	2300      	movs	r3, #0
 800a994:	73fb      	strb	r3, [r7, #15]
 800a996:	e008      	b.n	800a9aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	2b02      	cmp	r3, #2
 800a99e:	d102      	bne.n	800a9a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	73fb      	strb	r3, [r7, #15]
 800a9a4:	e001      	b.n	800a9aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a9a6:	f7ff fc7f 	bl	800a2a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a9b0:	7bfa      	ldrb	r2, [r7, #15]
 800a9b2:	4611      	mov	r1, r2
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fb fc40 	bl	800623a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fb fbf9 	bl	80061b8 <USBD_LL_Reset>
}
 800a9c6:	bf00      	nop
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
	...

0800a9d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7fb fc3b 	bl	800625a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	6812      	ldr	r2, [r2, #0]
 800a9f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a9f6:	f043 0301 	orr.w	r3, r3, #1
 800a9fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a1b      	ldr	r3, [r3, #32]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d005      	beq.n	800aa10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa04:	4b04      	ldr	r3, [pc, #16]	; (800aa18 <HAL_PCD_SuspendCallback+0x48>)
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	4a03      	ldr	r2, [pc, #12]	; (800aa18 <HAL_PCD_SuspendCallback+0x48>)
 800aa0a:	f043 0306 	orr.w	r3, r3, #6
 800aa0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa10:	bf00      	nop
 800aa12:	3708      	adds	r7, #8
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	e000ed00 	.word	0xe000ed00

0800aa1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7fb fc2a 	bl	8006284 <USBD_LL_Resume>
}
 800aa30:	bf00      	nop
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	460b      	mov	r3, r1
 800aa42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aa4a:	78fa      	ldrb	r2, [r7, #3]
 800aa4c:	4611      	mov	r1, r2
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7fb fc55 	bl	80062fe <USBD_LL_IsoOUTIncomplete>
}
 800aa54:	bf00      	nop
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	460b      	mov	r3, r1
 800aa66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aa6e:	78fa      	ldrb	r2, [r7, #3]
 800aa70:	4611      	mov	r1, r2
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fb fc36 	bl	80062e4 <USBD_LL_IsoINIncomplete>
}
 800aa78:	bf00      	nop
 800aa7a:	3708      	adds	r7, #8
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fb fc42 	bl	8006318 <USBD_LL_DevConnected>
}
 800aa94:	bf00      	nop
 800aa96:	3708      	adds	r7, #8
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7fb fc3f 	bl	800632e <USBD_LL_DevDisconnected>
}
 800aab0:	bf00      	nop
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d13c      	bne.n	800ab42 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aac8:	4a20      	ldr	r2, [pc, #128]	; (800ab4c <USBD_LL_Init+0x94>)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a1e      	ldr	r2, [pc, #120]	; (800ab4c <USBD_LL_Init+0x94>)
 800aad4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aad8:	4b1c      	ldr	r3, [pc, #112]	; (800ab4c <USBD_LL_Init+0x94>)
 800aada:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aade:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800aae0:	4b1a      	ldr	r3, [pc, #104]	; (800ab4c <USBD_LL_Init+0x94>)
 800aae2:	2206      	movs	r2, #6
 800aae4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aae6:	4b19      	ldr	r3, [pc, #100]	; (800ab4c <USBD_LL_Init+0x94>)
 800aae8:	2202      	movs	r2, #2
 800aaea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aaec:	4b17      	ldr	r3, [pc, #92]	; (800ab4c <USBD_LL_Init+0x94>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aaf2:	4b16      	ldr	r3, [pc, #88]	; (800ab4c <USBD_LL_Init+0x94>)
 800aaf4:	2202      	movs	r2, #2
 800aaf6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800aaf8:	4b14      	ldr	r3, [pc, #80]	; (800ab4c <USBD_LL_Init+0x94>)
 800aafa:	2201      	movs	r2, #1
 800aafc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aafe:	4b13      	ldr	r3, [pc, #76]	; (800ab4c <USBD_LL_Init+0x94>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ab04:	4b11      	ldr	r3, [pc, #68]	; (800ab4c <USBD_LL_Init+0x94>)
 800ab06:	2200      	movs	r2, #0
 800ab08:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ab0a:	4b10      	ldr	r3, [pc, #64]	; (800ab4c <USBD_LL_Init+0x94>)
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ab10:	4b0e      	ldr	r3, [pc, #56]	; (800ab4c <USBD_LL_Init+0x94>)
 800ab12:	2200      	movs	r2, #0
 800ab14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ab16:	480d      	ldr	r0, [pc, #52]	; (800ab4c <USBD_LL_Init+0x94>)
 800ab18:	f7f6 f931 	bl	8000d7e <HAL_PCD_Init>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d001      	beq.n	800ab26 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ab22:	f7ff fbc1 	bl	800a2a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ab26:	2180      	movs	r1, #128	; 0x80
 800ab28:	4808      	ldr	r0, [pc, #32]	; (800ab4c <USBD_LL_Init+0x94>)
 800ab2a:	f7f7 fab2 	bl	8002092 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ab2e:	2240      	movs	r2, #64	; 0x40
 800ab30:	2100      	movs	r1, #0
 800ab32:	4806      	ldr	r0, [pc, #24]	; (800ab4c <USBD_LL_Init+0x94>)
 800ab34:	f7f7 fa66 	bl	8002004 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ab38:	2280      	movs	r2, #128	; 0x80
 800ab3a:	2101      	movs	r1, #1
 800ab3c:	4803      	ldr	r0, [pc, #12]	; (800ab4c <USBD_LL_Init+0x94>)
 800ab3e:	f7f7 fa61 	bl	8002004 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	20006520 	.word	0x20006520

0800ab50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7f6 fa2d 	bl	8000fc6 <HAL_PCD_Start>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
 800ab72:	4618      	mov	r0, r3
 800ab74:	f000 f980 	bl	800ae78 <USBD_Get_USB_Status>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b084      	sub	sp, #16
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
 800ab8e:	4608      	mov	r0, r1
 800ab90:	4611      	mov	r1, r2
 800ab92:	461a      	mov	r2, r3
 800ab94:	4603      	mov	r3, r0
 800ab96:	70fb      	strb	r3, [r7, #3]
 800ab98:	460b      	mov	r3, r1
 800ab9a:	70bb      	strb	r3, [r7, #2]
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aba0:	2300      	movs	r3, #0
 800aba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aba4:	2300      	movs	r3, #0
 800aba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800abae:	78bb      	ldrb	r3, [r7, #2]
 800abb0:	883a      	ldrh	r2, [r7, #0]
 800abb2:	78f9      	ldrb	r1, [r7, #3]
 800abb4:	f7f6 fe2d 	bl	8001812 <HAL_PCD_EP_Open>
 800abb8:	4603      	mov	r3, r0
 800abba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
 800abbe:	4618      	mov	r0, r3
 800abc0:	f000 f95a 	bl	800ae78 <USBD_Get_USB_Status>
 800abc4:	4603      	mov	r3, r0
 800abc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b084      	sub	sp, #16
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
 800abda:	460b      	mov	r3, r1
 800abdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800abec:	78fa      	ldrb	r2, [r7, #3]
 800abee:	4611      	mov	r1, r2
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7f6 fe76 	bl	80018e2 <HAL_PCD_EP_Close>
 800abf6:	4603      	mov	r3, r0
 800abf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abfa:	7bfb      	ldrb	r3, [r7, #15]
 800abfc:	4618      	mov	r0, r3
 800abfe:	f000 f93b 	bl	800ae78 <USBD_Get_USB_Status>
 800ac02:	4603      	mov	r3, r0
 800ac04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac06:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	460b      	mov	r3, r1
 800ac1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac2a:	78fa      	ldrb	r2, [r7, #3]
 800ac2c:	4611      	mov	r1, r2
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7f6 ff4e 	bl	8001ad0 <HAL_PCD_EP_SetStall>
 800ac34:	4603      	mov	r3, r0
 800ac36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 f91c 	bl	800ae78 <USBD_Get_USB_Status>
 800ac40:	4603      	mov	r3, r0
 800ac42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b084      	sub	sp, #16
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
 800ac56:	460b      	mov	r3, r1
 800ac58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac68:	78fa      	ldrb	r2, [r7, #3]
 800ac6a:	4611      	mov	r1, r2
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7f6 ff93 	bl	8001b98 <HAL_PCD_EP_ClrStall>
 800ac72:	4603      	mov	r3, r0
 800ac74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac76:	7bfb      	ldrb	r3, [r7, #15]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f000 f8fd 	bl	800ae78 <USBD_Get_USB_Status>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac82:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	460b      	mov	r3, r1
 800ac96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	da0b      	bge.n	800acc0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aca8:	78fb      	ldrb	r3, [r7, #3]
 800acaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acae:	68f9      	ldr	r1, [r7, #12]
 800acb0:	4613      	mov	r3, r2
 800acb2:	00db      	lsls	r3, r3, #3
 800acb4:	1a9b      	subs	r3, r3, r2
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	440b      	add	r3, r1
 800acba:	333e      	adds	r3, #62	; 0x3e
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	e00b      	b.n	800acd8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800acc0:	78fb      	ldrb	r3, [r7, #3]
 800acc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acc6:	68f9      	ldr	r1, [r7, #12]
 800acc8:	4613      	mov	r3, r2
 800acca:	00db      	lsls	r3, r3, #3
 800accc:	1a9b      	subs	r3, r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	440b      	add	r3, r1
 800acd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800acd6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3714      	adds	r7, #20
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	460b      	mov	r3, r1
 800acee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf0:	2300      	movs	r3, #0
 800acf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acf4:	2300      	movs	r3, #0
 800acf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800acfe:	78fa      	ldrb	r2, [r7, #3]
 800ad00:	4611      	mov	r1, r2
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7f6 fd60 	bl	80017c8 <HAL_PCD_SetAddress>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad0c:	7bfb      	ldrb	r3, [r7, #15]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f000 f8b2 	bl	800ae78 <USBD_Get_USB_Status>
 800ad14:	4603      	mov	r3, r0
 800ad16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad18:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b086      	sub	sp, #24
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	60f8      	str	r0, [r7, #12]
 800ad2a:	607a      	str	r2, [r7, #4]
 800ad2c:	603b      	str	r3, [r7, #0]
 800ad2e:	460b      	mov	r3, r1
 800ad30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad32:	2300      	movs	r3, #0
 800ad34:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad36:	2300      	movs	r3, #0
 800ad38:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ad40:	7af9      	ldrb	r1, [r7, #11]
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	f7f6 fe79 	bl	8001a3c <HAL_PCD_EP_Transmit>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad4e:	7dfb      	ldrb	r3, [r7, #23]
 800ad50:	4618      	mov	r0, r3
 800ad52:	f000 f891 	bl	800ae78 <USBD_Get_USB_Status>
 800ad56:	4603      	mov	r3, r0
 800ad58:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad5a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3718      	adds	r7, #24
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b086      	sub	sp, #24
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	607a      	str	r2, [r7, #4]
 800ad6e:	603b      	str	r3, [r7, #0]
 800ad70:	460b      	mov	r3, r1
 800ad72:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad74:	2300      	movs	r3, #0
 800ad76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ad82:	7af9      	ldrb	r1, [r7, #11]
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	f7f6 fdf5 	bl	8001976 <HAL_PCD_EP_Receive>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad90:	7dfb      	ldrb	r3, [r7, #23]
 800ad92:	4618      	mov	r0, r3
 800ad94:	f000 f870 	bl	800ae78 <USBD_Get_USB_Status>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad9c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3718      	adds	r7, #24
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b082      	sub	sp, #8
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
 800adae:	460b      	mov	r3, r1
 800adb0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800adb8:	78fa      	ldrb	r2, [r7, #3]
 800adba:	4611      	mov	r1, r2
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7f6 fe25 	bl	8001a0c <HAL_PCD_EP_GetRxCount>
 800adc2:	4603      	mov	r3, r0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3708      	adds	r7, #8
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	460b      	mov	r3, r1
 800add6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800add8:	78fb      	ldrb	r3, [r7, #3]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d002      	beq.n	800ade4 <HAL_PCDEx_LPM_Callback+0x18>
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d01f      	beq.n	800ae22 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ade2:	e03b      	b.n	800ae5c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d007      	beq.n	800adfc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800adec:	f000 f83c 	bl	800ae68 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800adf0:	4b1c      	ldr	r3, [pc, #112]	; (800ae64 <HAL_PCDEx_LPM_Callback+0x98>)
 800adf2:	691b      	ldr	r3, [r3, #16]
 800adf4:	4a1b      	ldr	r2, [pc, #108]	; (800ae64 <HAL_PCDEx_LPM_Callback+0x98>)
 800adf6:	f023 0306 	bic.w	r3, r3, #6
 800adfa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	6812      	ldr	r2, [r2, #0]
 800ae0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae0e:	f023 0301 	bic.w	r3, r3, #1
 800ae12:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fb fa32 	bl	8006284 <USBD_LL_Resume>
    break;
 800ae20:	e01c      	b.n	800ae5c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	6812      	ldr	r2, [r2, #0]
 800ae30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae34:	f043 0301 	orr.w	r3, r3, #1
 800ae38:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fb fa0a 	bl	800625a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a1b      	ldr	r3, [r3, #32]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d005      	beq.n	800ae5a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae4e:	4b05      	ldr	r3, [pc, #20]	; (800ae64 <HAL_PCDEx_LPM_Callback+0x98>)
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	4a04      	ldr	r2, [pc, #16]	; (800ae64 <HAL_PCDEx_LPM_Callback+0x98>)
 800ae54:	f043 0306 	orr.w	r3, r3, #6
 800ae58:	6113      	str	r3, [r2, #16]
    break;
 800ae5a:	bf00      	nop
}
 800ae5c:	bf00      	nop
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	e000ed00 	.word	0xe000ed00

0800ae68 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	af00      	add	r7, sp, #0
	//SystemClock_Config();
}
 800ae6c:	bf00      	nop
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr
	...

0800ae78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	4603      	mov	r3, r0
 800ae80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae86:	79fb      	ldrb	r3, [r7, #7]
 800ae88:	2b03      	cmp	r3, #3
 800ae8a:	d817      	bhi.n	800aebc <USBD_Get_USB_Status+0x44>
 800ae8c:	a201      	add	r2, pc, #4	; (adr r2, 800ae94 <USBD_Get_USB_Status+0x1c>)
 800ae8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae92:	bf00      	nop
 800ae94:	0800aea5 	.word	0x0800aea5
 800ae98:	0800aeab 	.word	0x0800aeab
 800ae9c:	0800aeb1 	.word	0x0800aeb1
 800aea0:	0800aeb7 	.word	0x0800aeb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aea4:	2300      	movs	r3, #0
 800aea6:	73fb      	strb	r3, [r7, #15]
    break;
 800aea8:	e00b      	b.n	800aec2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aeaa:	2303      	movs	r3, #3
 800aeac:	73fb      	strb	r3, [r7, #15]
    break;
 800aeae:	e008      	b.n	800aec2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	73fb      	strb	r3, [r7, #15]
    break;
 800aeb4:	e005      	b.n	800aec2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	73fb      	strb	r3, [r7, #15]
    break;
 800aeba:	e002      	b.n	800aec2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aebc:	2303      	movs	r3, #3
 800aebe:	73fb      	strb	r3, [r7, #15]
    break;
 800aec0:	bf00      	nop
  }
  return usb_status;
 800aec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	4603      	mov	r3, r0
 800aed8:	6039      	str	r1, [r7, #0]
 800aeda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	2212      	movs	r2, #18
 800aee0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aee2:	4b03      	ldr	r3, [pc, #12]	; (800aef0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr
 800aef0:	20000154 	.word	0x20000154

0800aef4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	4603      	mov	r3, r0
 800aefc:	6039      	str	r1, [r7, #0]
 800aefe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	2204      	movs	r2, #4
 800af04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800af06:	4b03      	ldr	r3, [pc, #12]	; (800af14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800af08:	4618      	mov	r0, r3
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	20000174 	.word	0x20000174

0800af18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	4603      	mov	r3, r0
 800af20:	6039      	str	r1, [r7, #0]
 800af22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af24:	79fb      	ldrb	r3, [r7, #7]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d105      	bne.n	800af36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	4907      	ldr	r1, [pc, #28]	; (800af4c <USBD_FS_ProductStrDescriptor+0x34>)
 800af2e:	4808      	ldr	r0, [pc, #32]	; (800af50 <USBD_FS_ProductStrDescriptor+0x38>)
 800af30:	f7fb ffb0 	bl	8006e94 <USBD_GetString>
 800af34:	e004      	b.n	800af40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	4904      	ldr	r1, [pc, #16]	; (800af4c <USBD_FS_ProductStrDescriptor+0x34>)
 800af3a:	4805      	ldr	r0, [pc, #20]	; (800af50 <USBD_FS_ProductStrDescriptor+0x38>)
 800af3c:	f7fb ffaa 	bl	8006e94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af40:	4b02      	ldr	r3, [pc, #8]	; (800af4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800af42:	4618      	mov	r0, r3
 800af44:	3708      	adds	r7, #8
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20006924 	.word	0x20006924
 800af50:	0800b668 	.word	0x0800b668

0800af54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	4603      	mov	r3, r0
 800af5c:	6039      	str	r1, [r7, #0]
 800af5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800af60:	683a      	ldr	r2, [r7, #0]
 800af62:	4904      	ldr	r1, [pc, #16]	; (800af74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800af64:	4804      	ldr	r0, [pc, #16]	; (800af78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800af66:	f7fb ff95 	bl	8006e94 <USBD_GetString>
  return USBD_StrDesc;
 800af6a:	4b02      	ldr	r3, [pc, #8]	; (800af74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	20006924 	.word	0x20006924
 800af78:	0800b680 	.word	0x0800b680

0800af7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	4603      	mov	r3, r0
 800af84:	6039      	str	r1, [r7, #0]
 800af86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	221a      	movs	r2, #26
 800af8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800af8e:	f000 f855 	bl	800b03c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800af92:	4b02      	ldr	r3, [pc, #8]	; (800af9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800af94:	4618      	mov	r0, r3
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	20000178 	.word	0x20000178

0800afa0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	4603      	mov	r3, r0
 800afa8:	6039      	str	r1, [r7, #0]
 800afaa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800afac:	79fb      	ldrb	r3, [r7, #7]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d105      	bne.n	800afbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	4907      	ldr	r1, [pc, #28]	; (800afd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800afb6:	4808      	ldr	r0, [pc, #32]	; (800afd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800afb8:	f7fb ff6c 	bl	8006e94 <USBD_GetString>
 800afbc:	e004      	b.n	800afc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afbe:	683a      	ldr	r2, [r7, #0]
 800afc0:	4904      	ldr	r1, [pc, #16]	; (800afd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800afc2:	4805      	ldr	r0, [pc, #20]	; (800afd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800afc4:	f7fb ff66 	bl	8006e94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800afc8:	4b02      	ldr	r3, [pc, #8]	; (800afd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	20006924 	.word	0x20006924
 800afd8:	0800b694 	.word	0x0800b694

0800afdc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	6039      	str	r1, [r7, #0]
 800afe6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800afe8:	79fb      	ldrb	r3, [r7, #7]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d105      	bne.n	800affa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	4907      	ldr	r1, [pc, #28]	; (800b010 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aff2:	4808      	ldr	r0, [pc, #32]	; (800b014 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aff4:	f7fb ff4e 	bl	8006e94 <USBD_GetString>
 800aff8:	e004      	b.n	800b004 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800affa:	683a      	ldr	r2, [r7, #0]
 800affc:	4904      	ldr	r1, [pc, #16]	; (800b010 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800affe:	4805      	ldr	r0, [pc, #20]	; (800b014 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b000:	f7fb ff48 	bl	8006e94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b004:	4b02      	ldr	r3, [pc, #8]	; (800b010 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b006:	4618      	mov	r0, r3
 800b008:	3708      	adds	r7, #8
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	20006924 	.word	0x20006924
 800b014:	0800b6a0 	.word	0x0800b6a0

0800b018 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	4603      	mov	r3, r0
 800b020:	6039      	str	r1, [r7, #0]
 800b022:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	220c      	movs	r2, #12
 800b028:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b02a:	4b03      	ldr	r3, [pc, #12]	; (800b038 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr
 800b038:	20000168 	.word	0x20000168

0800b03c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b042:	4b0f      	ldr	r3, [pc, #60]	; (800b080 <Get_SerialNum+0x44>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b048:	4b0e      	ldr	r3, [pc, #56]	; (800b084 <Get_SerialNum+0x48>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b04e:	4b0e      	ldr	r3, [pc, #56]	; (800b088 <Get_SerialNum+0x4c>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4413      	add	r3, r2
 800b05a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d009      	beq.n	800b076 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b062:	2208      	movs	r2, #8
 800b064:	4909      	ldr	r1, [pc, #36]	; (800b08c <Get_SerialNum+0x50>)
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f000 f814 	bl	800b094 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b06c:	2204      	movs	r2, #4
 800b06e:	4908      	ldr	r1, [pc, #32]	; (800b090 <Get_SerialNum+0x54>)
 800b070:	68b8      	ldr	r0, [r7, #8]
 800b072:	f000 f80f 	bl	800b094 <IntToUnicode>
  }
}
 800b076:	bf00      	nop
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	1ff0f420 	.word	0x1ff0f420
 800b084:	1ff0f424 	.word	0x1ff0f424
 800b088:	1ff0f428 	.word	0x1ff0f428
 800b08c:	2000017a 	.word	0x2000017a
 800b090:	2000018a 	.word	0x2000018a

0800b094 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b094:	b480      	push	{r7}
 800b096:	b087      	sub	sp, #28
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	75fb      	strb	r3, [r7, #23]
 800b0aa:	e027      	b.n	800b0fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	0f1b      	lsrs	r3, r3, #28
 800b0b0:	2b09      	cmp	r3, #9
 800b0b2:	d80b      	bhi.n	800b0cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	0f1b      	lsrs	r3, r3, #28
 800b0b8:	b2da      	uxtb	r2, r3
 800b0ba:	7dfb      	ldrb	r3, [r7, #23]
 800b0bc:	005b      	lsls	r3, r3, #1
 800b0be:	4619      	mov	r1, r3
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	440b      	add	r3, r1
 800b0c4:	3230      	adds	r2, #48	; 0x30
 800b0c6:	b2d2      	uxtb	r2, r2
 800b0c8:	701a      	strb	r2, [r3, #0]
 800b0ca:	e00a      	b.n	800b0e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	0f1b      	lsrs	r3, r3, #28
 800b0d0:	b2da      	uxtb	r2, r3
 800b0d2:	7dfb      	ldrb	r3, [r7, #23]
 800b0d4:	005b      	lsls	r3, r3, #1
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	440b      	add	r3, r1
 800b0dc:	3237      	adds	r2, #55	; 0x37
 800b0de:	b2d2      	uxtb	r2, r2
 800b0e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	011b      	lsls	r3, r3, #4
 800b0e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b0e8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ea:	005b      	lsls	r3, r3, #1
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b0f6:	7dfb      	ldrb	r3, [r7, #23]
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	75fb      	strb	r3, [r7, #23]
 800b0fc:	7dfa      	ldrb	r2, [r7, #23]
 800b0fe:	79fb      	ldrb	r3, [r7, #7]
 800b100:	429a      	cmp	r2, r3
 800b102:	d3d3      	bcc.n	800b0ac <IntToUnicode+0x18>
  }
}
 800b104:	bf00      	nop
 800b106:	bf00      	nop
 800b108:	371c      	adds	r7, #28
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
	...

0800b114 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	4603      	mov	r3, r0
 800b11c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b11e:	4b06      	ldr	r3, [pc, #24]	; (800b138 <USER_initialize+0x24>)
 800b120:	2201      	movs	r2, #1
 800b122:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b124:	4b04      	ldr	r3, [pc, #16]	; (800b138 <USER_initialize+0x24>)
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	370c      	adds	r7, #12
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	20000192 	.word	0x20000192

0800b13c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	4603      	mov	r3, r0
 800b144:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b146:	4b06      	ldr	r3, [pc, #24]	; (800b160 <USER_status+0x24>)
 800b148:	2201      	movs	r2, #1
 800b14a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b14c:	4b04      	ldr	r3, [pc, #16]	; (800b160 <USER_status+0x24>)
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b152:	4618      	mov	r0, r3
 800b154:	370c      	adds	r7, #12
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	20000192 	.word	0x20000192

0800b164 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60b9      	str	r1, [r7, #8]
 800b16c:	607a      	str	r2, [r7, #4]
 800b16e:	603b      	str	r3, [r7, #0]
 800b170:	4603      	mov	r3, r0
 800b172:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b174:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b176:	4618      	mov	r0, r3
 800b178:	3714      	adds	r7, #20
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b182:	b480      	push	{r7}
 800b184:	b085      	sub	sp, #20
 800b186:	af00      	add	r7, sp, #0
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
 800b18c:	603b      	str	r3, [r7, #0]
 800b18e:	4603      	mov	r3, r0
 800b190:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b192:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b194:	4618      	mov	r0, r3
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	603a      	str	r2, [r7, #0]
 800b1aa:	71fb      	strb	r3, [r7, #7]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	73fb      	strb	r3, [r7, #15]
    return res;
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3714      	adds	r7, #20
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr
	...

0800b1c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b1c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b1fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b1c8:	480d      	ldr	r0, [pc, #52]	; (800b200 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b1ca:	490e      	ldr	r1, [pc, #56]	; (800b204 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b1cc:	4a0e      	ldr	r2, [pc, #56]	; (800b208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b1ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b1d0:	e002      	b.n	800b1d8 <LoopCopyDataInit>

0800b1d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b1d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b1d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b1d6:	3304      	adds	r3, #4

0800b1d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b1d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b1da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b1dc:	d3f9      	bcc.n	800b1d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b1de:	4a0b      	ldr	r2, [pc, #44]	; (800b20c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b1e0:	4c0b      	ldr	r4, [pc, #44]	; (800b210 <LoopFillZerobss+0x26>)
  movs r3, #0
 800b1e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b1e4:	e001      	b.n	800b1ea <LoopFillZerobss>

0800b1e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b1e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b1e8:	3204      	adds	r2, #4

0800b1ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b1ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b1ec:	d3fb      	bcc.n	800b1e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b1ee:	f7ff fa2b 	bl	800a648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b1f2:	f000 f89b 	bl	800b32c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b1f6:	f7fe fd93 	bl	8009d20 <main>
  bx  lr    
 800b1fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b1fc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800b200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b204:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800b208:	0800b780 	.word	0x0800b780
  ldr r2, =_sbss
 800b20c:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 800b210:	20006b28 	.word	0x20006b28

0800b214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b214:	e7fe      	b.n	800b214 <ADC_IRQHandler>

0800b216 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b084      	sub	sp, #16
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d104      	bne.n	800b22e <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800b224:	b672      	cpsid	i
}
 800b226:	bf00      	nop
 800b228:	f7ff f83e 	bl	800a2a8 <Error_Handler>
 800b22c:	e7fe      	b.n	800b22c <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	7a1b      	ldrb	r3, [r3, #8]
 800b232:	2b01      	cmp	r3, #1
 800b234:	d904      	bls.n	800b240 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800b236:	b672      	cpsid	i
}
 800b238:	bf00      	nop
 800b23a:	f7ff f835 	bl	800a2a8 <Error_Handler>
 800b23e:	e7fe      	b.n	800b23e <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	7a1b      	ldrb	r3, [r3, #8]
 800b244:	1c5a      	adds	r2, r3, #1
 800b246:	b2d1      	uxtb	r1, r2
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	7211      	strb	r1, [r2, #8]
 800b24c:	4619      	mov	r1, r3
	__asm volatile
 800b24e:	f3ef 8211 	mrs	r2, BASEPRI
 800b252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b256:	b672      	cpsid	i
 800b258:	f383 8811 	msr	BASEPRI, r3
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	f3bf 8f4f 	dsb	sy
 800b264:	b662      	cpsie	i
 800b266:	60fa      	str	r2, [r7, #12]
 800b268:	60bb      	str	r3, [r7, #8]
	return ulOriginalBASEPRI;
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800b272:	bf00      	nop
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d104      	bne.n	800b292 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800b288:	b672      	cpsid	i
}
 800b28a:	bf00      	nop
 800b28c:	f7ff f80c 	bl	800a2a8 <Error_Handler>
 800b290:	e7fe      	b.n	800b290 <stm32_lock_release+0x16>
  lock->nesting_level--;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	7a1b      	ldrb	r3, [r3, #8]
 800b296:	3b01      	subs	r3, #1
 800b298:	b2da      	uxtb	r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	7a1b      	ldrb	r3, [r3, #8]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d904      	bls.n	800b2b0 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800b2a6:	b672      	cpsid	i
}
 800b2a8:	bf00      	nop
 800b2aa:	f7fe fffd 	bl	800a2a8 <Error_Handler>
 800b2ae:	e7fe      	b.n	800b2ae <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	7a1b      	ldrb	r3, [r3, #8]
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f383 8811 	msr	BASEPRI, r3
}
 800b2c4:	bf00      	nop
}
 800b2c6:	bf00      	nop
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b082      	sub	sp, #8
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d104      	bne.n	800b2e6 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800b2dc:	b672      	cpsid	i
}
 800b2de:	bf00      	nop
 800b2e0:	f7fe ffe2 	bl	800a2a8 <Error_Handler>
 800b2e4:	e7fe      	b.n	800b2e4 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7ff ff94 	bl	800b216 <stm32_lock_acquire>
}
 800b2ee:	bf00      	nop
 800b2f0:	3708      	adds	r7, #8
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b082      	sub	sp, #8
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d104      	bne.n	800b30e <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800b304:	b672      	cpsid	i
}
 800b306:	bf00      	nop
 800b308:	f7fe ffce 	bl	800a2a8 <Error_Handler>
 800b30c:	e7fe      	b.n	800b30c <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4618      	mov	r0, r3
 800b312:	f7ff ffb2 	bl	800b27a <stm32_lock_release>
}
 800b316:	bf00      	nop
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
	...

0800b320 <__errno>:
 800b320:	4b01      	ldr	r3, [pc, #4]	; (800b328 <__errno+0x8>)
 800b322:	6818      	ldr	r0, [r3, #0]
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	200001a8 	.word	0x200001a8

0800b32c <__libc_init_array>:
 800b32c:	b570      	push	{r4, r5, r6, lr}
 800b32e:	4d0d      	ldr	r5, [pc, #52]	; (800b364 <__libc_init_array+0x38>)
 800b330:	4c0d      	ldr	r4, [pc, #52]	; (800b368 <__libc_init_array+0x3c>)
 800b332:	1b64      	subs	r4, r4, r5
 800b334:	10a4      	asrs	r4, r4, #2
 800b336:	2600      	movs	r6, #0
 800b338:	42a6      	cmp	r6, r4
 800b33a:	d109      	bne.n	800b350 <__libc_init_array+0x24>
 800b33c:	4d0b      	ldr	r5, [pc, #44]	; (800b36c <__libc_init_array+0x40>)
 800b33e:	4c0c      	ldr	r4, [pc, #48]	; (800b370 <__libc_init_array+0x44>)
 800b340:	f000 f96e 	bl	800b620 <_init>
 800b344:	1b64      	subs	r4, r4, r5
 800b346:	10a4      	asrs	r4, r4, #2
 800b348:	2600      	movs	r6, #0
 800b34a:	42a6      	cmp	r6, r4
 800b34c:	d105      	bne.n	800b35a <__libc_init_array+0x2e>
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
 800b350:	f855 3b04 	ldr.w	r3, [r5], #4
 800b354:	4798      	blx	r3
 800b356:	3601      	adds	r6, #1
 800b358:	e7ee      	b.n	800b338 <__libc_init_array+0xc>
 800b35a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b35e:	4798      	blx	r3
 800b360:	3601      	adds	r6, #1
 800b362:	e7f2      	b.n	800b34a <__libc_init_array+0x1e>
 800b364:	0800b778 	.word	0x0800b778
 800b368:	0800b778 	.word	0x0800b778
 800b36c:	0800b778 	.word	0x0800b778
 800b370:	0800b77c 	.word	0x0800b77c

0800b374 <malloc>:
 800b374:	4b02      	ldr	r3, [pc, #8]	; (800b380 <malloc+0xc>)
 800b376:	4601      	mov	r1, r0
 800b378:	6818      	ldr	r0, [r3, #0]
 800b37a:	f000 b871 	b.w	800b460 <_malloc_r>
 800b37e:	bf00      	nop
 800b380:	200001a8 	.word	0x200001a8

0800b384 <free>:
 800b384:	4b02      	ldr	r3, [pc, #8]	; (800b390 <free+0xc>)
 800b386:	4601      	mov	r1, r0
 800b388:	6818      	ldr	r0, [r3, #0]
 800b38a:	f000 b819 	b.w	800b3c0 <_free_r>
 800b38e:	bf00      	nop
 800b390:	200001a8 	.word	0x200001a8

0800b394 <memcpy>:
 800b394:	440a      	add	r2, r1
 800b396:	4291      	cmp	r1, r2
 800b398:	f100 33ff 	add.w	r3, r0, #4294967295
 800b39c:	d100      	bne.n	800b3a0 <memcpy+0xc>
 800b39e:	4770      	bx	lr
 800b3a0:	b510      	push	{r4, lr}
 800b3a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3aa:	4291      	cmp	r1, r2
 800b3ac:	d1f9      	bne.n	800b3a2 <memcpy+0xe>
 800b3ae:	bd10      	pop	{r4, pc}

0800b3b0 <memset>:
 800b3b0:	4402      	add	r2, r0
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d100      	bne.n	800b3ba <memset+0xa>
 800b3b8:	4770      	bx	lr
 800b3ba:	f803 1b01 	strb.w	r1, [r3], #1
 800b3be:	e7f9      	b.n	800b3b4 <memset+0x4>

0800b3c0 <_free_r>:
 800b3c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3c2:	2900      	cmp	r1, #0
 800b3c4:	d048      	beq.n	800b458 <_free_r+0x98>
 800b3c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3ca:	9001      	str	r0, [sp, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f1a1 0404 	sub.w	r4, r1, #4
 800b3d2:	bfb8      	it	lt
 800b3d4:	18e4      	addlt	r4, r4, r3
 800b3d6:	f000 f917 	bl	800b608 <__malloc_lock>
 800b3da:	4a20      	ldr	r2, [pc, #128]	; (800b45c <_free_r+0x9c>)
 800b3dc:	9801      	ldr	r0, [sp, #4]
 800b3de:	6813      	ldr	r3, [r2, #0]
 800b3e0:	4615      	mov	r5, r2
 800b3e2:	b933      	cbnz	r3, 800b3f2 <_free_r+0x32>
 800b3e4:	6063      	str	r3, [r4, #4]
 800b3e6:	6014      	str	r4, [r2, #0]
 800b3e8:	b003      	add	sp, #12
 800b3ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3ee:	f000 b911 	b.w	800b614 <__malloc_unlock>
 800b3f2:	42a3      	cmp	r3, r4
 800b3f4:	d90b      	bls.n	800b40e <_free_r+0x4e>
 800b3f6:	6821      	ldr	r1, [r4, #0]
 800b3f8:	1862      	adds	r2, r4, r1
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	bf04      	itt	eq
 800b3fe:	681a      	ldreq	r2, [r3, #0]
 800b400:	685b      	ldreq	r3, [r3, #4]
 800b402:	6063      	str	r3, [r4, #4]
 800b404:	bf04      	itt	eq
 800b406:	1852      	addeq	r2, r2, r1
 800b408:	6022      	streq	r2, [r4, #0]
 800b40a:	602c      	str	r4, [r5, #0]
 800b40c:	e7ec      	b.n	800b3e8 <_free_r+0x28>
 800b40e:	461a      	mov	r2, r3
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	b10b      	cbz	r3, 800b418 <_free_r+0x58>
 800b414:	42a3      	cmp	r3, r4
 800b416:	d9fa      	bls.n	800b40e <_free_r+0x4e>
 800b418:	6811      	ldr	r1, [r2, #0]
 800b41a:	1855      	adds	r5, r2, r1
 800b41c:	42a5      	cmp	r5, r4
 800b41e:	d10b      	bne.n	800b438 <_free_r+0x78>
 800b420:	6824      	ldr	r4, [r4, #0]
 800b422:	4421      	add	r1, r4
 800b424:	1854      	adds	r4, r2, r1
 800b426:	42a3      	cmp	r3, r4
 800b428:	6011      	str	r1, [r2, #0]
 800b42a:	d1dd      	bne.n	800b3e8 <_free_r+0x28>
 800b42c:	681c      	ldr	r4, [r3, #0]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	6053      	str	r3, [r2, #4]
 800b432:	4421      	add	r1, r4
 800b434:	6011      	str	r1, [r2, #0]
 800b436:	e7d7      	b.n	800b3e8 <_free_r+0x28>
 800b438:	d902      	bls.n	800b440 <_free_r+0x80>
 800b43a:	230c      	movs	r3, #12
 800b43c:	6003      	str	r3, [r0, #0]
 800b43e:	e7d3      	b.n	800b3e8 <_free_r+0x28>
 800b440:	6825      	ldr	r5, [r4, #0]
 800b442:	1961      	adds	r1, r4, r5
 800b444:	428b      	cmp	r3, r1
 800b446:	bf04      	itt	eq
 800b448:	6819      	ldreq	r1, [r3, #0]
 800b44a:	685b      	ldreq	r3, [r3, #4]
 800b44c:	6063      	str	r3, [r4, #4]
 800b44e:	bf04      	itt	eq
 800b450:	1949      	addeq	r1, r1, r5
 800b452:	6021      	streq	r1, [r4, #0]
 800b454:	6054      	str	r4, [r2, #4]
 800b456:	e7c7      	b.n	800b3e8 <_free_r+0x28>
 800b458:	b003      	add	sp, #12
 800b45a:	bd30      	pop	{r4, r5, pc}
 800b45c:	20004d4c 	.word	0x20004d4c

0800b460 <_malloc_r>:
 800b460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b462:	1ccd      	adds	r5, r1, #3
 800b464:	f025 0503 	bic.w	r5, r5, #3
 800b468:	3508      	adds	r5, #8
 800b46a:	2d0c      	cmp	r5, #12
 800b46c:	bf38      	it	cc
 800b46e:	250c      	movcc	r5, #12
 800b470:	2d00      	cmp	r5, #0
 800b472:	4606      	mov	r6, r0
 800b474:	db01      	blt.n	800b47a <_malloc_r+0x1a>
 800b476:	42a9      	cmp	r1, r5
 800b478:	d903      	bls.n	800b482 <_malloc_r+0x22>
 800b47a:	230c      	movs	r3, #12
 800b47c:	6033      	str	r3, [r6, #0]
 800b47e:	2000      	movs	r0, #0
 800b480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b482:	f000 f8c1 	bl	800b608 <__malloc_lock>
 800b486:	4921      	ldr	r1, [pc, #132]	; (800b50c <_malloc_r+0xac>)
 800b488:	680a      	ldr	r2, [r1, #0]
 800b48a:	4614      	mov	r4, r2
 800b48c:	b99c      	cbnz	r4, 800b4b6 <_malloc_r+0x56>
 800b48e:	4f20      	ldr	r7, [pc, #128]	; (800b510 <_malloc_r+0xb0>)
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	b923      	cbnz	r3, 800b49e <_malloc_r+0x3e>
 800b494:	4621      	mov	r1, r4
 800b496:	4630      	mov	r0, r6
 800b498:	f000 f8a6 	bl	800b5e8 <_sbrk_r>
 800b49c:	6038      	str	r0, [r7, #0]
 800b49e:	4629      	mov	r1, r5
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	f000 f8a1 	bl	800b5e8 <_sbrk_r>
 800b4a6:	1c43      	adds	r3, r0, #1
 800b4a8:	d123      	bne.n	800b4f2 <_malloc_r+0x92>
 800b4aa:	230c      	movs	r3, #12
 800b4ac:	6033      	str	r3, [r6, #0]
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	f000 f8b0 	bl	800b614 <__malloc_unlock>
 800b4b4:	e7e3      	b.n	800b47e <_malloc_r+0x1e>
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	1b5b      	subs	r3, r3, r5
 800b4ba:	d417      	bmi.n	800b4ec <_malloc_r+0x8c>
 800b4bc:	2b0b      	cmp	r3, #11
 800b4be:	d903      	bls.n	800b4c8 <_malloc_r+0x68>
 800b4c0:	6023      	str	r3, [r4, #0]
 800b4c2:	441c      	add	r4, r3
 800b4c4:	6025      	str	r5, [r4, #0]
 800b4c6:	e004      	b.n	800b4d2 <_malloc_r+0x72>
 800b4c8:	6863      	ldr	r3, [r4, #4]
 800b4ca:	42a2      	cmp	r2, r4
 800b4cc:	bf0c      	ite	eq
 800b4ce:	600b      	streq	r3, [r1, #0]
 800b4d0:	6053      	strne	r3, [r2, #4]
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	f000 f89e 	bl	800b614 <__malloc_unlock>
 800b4d8:	f104 000b 	add.w	r0, r4, #11
 800b4dc:	1d23      	adds	r3, r4, #4
 800b4de:	f020 0007 	bic.w	r0, r0, #7
 800b4e2:	1ac2      	subs	r2, r0, r3
 800b4e4:	d0cc      	beq.n	800b480 <_malloc_r+0x20>
 800b4e6:	1a1b      	subs	r3, r3, r0
 800b4e8:	50a3      	str	r3, [r4, r2]
 800b4ea:	e7c9      	b.n	800b480 <_malloc_r+0x20>
 800b4ec:	4622      	mov	r2, r4
 800b4ee:	6864      	ldr	r4, [r4, #4]
 800b4f0:	e7cc      	b.n	800b48c <_malloc_r+0x2c>
 800b4f2:	1cc4      	adds	r4, r0, #3
 800b4f4:	f024 0403 	bic.w	r4, r4, #3
 800b4f8:	42a0      	cmp	r0, r4
 800b4fa:	d0e3      	beq.n	800b4c4 <_malloc_r+0x64>
 800b4fc:	1a21      	subs	r1, r4, r0
 800b4fe:	4630      	mov	r0, r6
 800b500:	f000 f872 	bl	800b5e8 <_sbrk_r>
 800b504:	3001      	adds	r0, #1
 800b506:	d1dd      	bne.n	800b4c4 <_malloc_r+0x64>
 800b508:	e7cf      	b.n	800b4aa <_malloc_r+0x4a>
 800b50a:	bf00      	nop
 800b50c:	20004d4c 	.word	0x20004d4c
 800b510:	20004d50 	.word	0x20004d50

0800b514 <cleanup_glue>:
 800b514:	b538      	push	{r3, r4, r5, lr}
 800b516:	460c      	mov	r4, r1
 800b518:	6809      	ldr	r1, [r1, #0]
 800b51a:	4605      	mov	r5, r0
 800b51c:	b109      	cbz	r1, 800b522 <cleanup_glue+0xe>
 800b51e:	f7ff fff9 	bl	800b514 <cleanup_glue>
 800b522:	4621      	mov	r1, r4
 800b524:	4628      	mov	r0, r5
 800b526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b52a:	f7ff bf49 	b.w	800b3c0 <_free_r>
	...

0800b530 <_reclaim_reent>:
 800b530:	4b2c      	ldr	r3, [pc, #176]	; (800b5e4 <_reclaim_reent+0xb4>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4283      	cmp	r3, r0
 800b536:	b570      	push	{r4, r5, r6, lr}
 800b538:	4604      	mov	r4, r0
 800b53a:	d051      	beq.n	800b5e0 <_reclaim_reent+0xb0>
 800b53c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b53e:	b143      	cbz	r3, 800b552 <_reclaim_reent+0x22>
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d14a      	bne.n	800b5dc <_reclaim_reent+0xac>
 800b546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b548:	6819      	ldr	r1, [r3, #0]
 800b54a:	b111      	cbz	r1, 800b552 <_reclaim_reent+0x22>
 800b54c:	4620      	mov	r0, r4
 800b54e:	f7ff ff37 	bl	800b3c0 <_free_r>
 800b552:	6961      	ldr	r1, [r4, #20]
 800b554:	b111      	cbz	r1, 800b55c <_reclaim_reent+0x2c>
 800b556:	4620      	mov	r0, r4
 800b558:	f7ff ff32 	bl	800b3c0 <_free_r>
 800b55c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b55e:	b111      	cbz	r1, 800b566 <_reclaim_reent+0x36>
 800b560:	4620      	mov	r0, r4
 800b562:	f7ff ff2d 	bl	800b3c0 <_free_r>
 800b566:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b568:	b111      	cbz	r1, 800b570 <_reclaim_reent+0x40>
 800b56a:	4620      	mov	r0, r4
 800b56c:	f7ff ff28 	bl	800b3c0 <_free_r>
 800b570:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b572:	b111      	cbz	r1, 800b57a <_reclaim_reent+0x4a>
 800b574:	4620      	mov	r0, r4
 800b576:	f7ff ff23 	bl	800b3c0 <_free_r>
 800b57a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b57c:	b111      	cbz	r1, 800b584 <_reclaim_reent+0x54>
 800b57e:	4620      	mov	r0, r4
 800b580:	f7ff ff1e 	bl	800b3c0 <_free_r>
 800b584:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b586:	b111      	cbz	r1, 800b58e <_reclaim_reent+0x5e>
 800b588:	4620      	mov	r0, r4
 800b58a:	f7ff ff19 	bl	800b3c0 <_free_r>
 800b58e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b590:	b111      	cbz	r1, 800b598 <_reclaim_reent+0x68>
 800b592:	4620      	mov	r0, r4
 800b594:	f7ff ff14 	bl	800b3c0 <_free_r>
 800b598:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b59a:	b111      	cbz	r1, 800b5a2 <_reclaim_reent+0x72>
 800b59c:	4620      	mov	r0, r4
 800b59e:	f7ff ff0f 	bl	800b3c0 <_free_r>
 800b5a2:	69a3      	ldr	r3, [r4, #24]
 800b5a4:	b1e3      	cbz	r3, 800b5e0 <_reclaim_reent+0xb0>
 800b5a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	4798      	blx	r3
 800b5ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b5ae:	b1b9      	cbz	r1, 800b5e0 <_reclaim_reent+0xb0>
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5b6:	f7ff bfad 	b.w	800b514 <cleanup_glue>
 800b5ba:	5949      	ldr	r1, [r1, r5]
 800b5bc:	b941      	cbnz	r1, 800b5d0 <_reclaim_reent+0xa0>
 800b5be:	3504      	adds	r5, #4
 800b5c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5c2:	2d80      	cmp	r5, #128	; 0x80
 800b5c4:	68d9      	ldr	r1, [r3, #12]
 800b5c6:	d1f8      	bne.n	800b5ba <_reclaim_reent+0x8a>
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f7ff fef9 	bl	800b3c0 <_free_r>
 800b5ce:	e7ba      	b.n	800b546 <_reclaim_reent+0x16>
 800b5d0:	680e      	ldr	r6, [r1, #0]
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f7ff fef4 	bl	800b3c0 <_free_r>
 800b5d8:	4631      	mov	r1, r6
 800b5da:	e7ef      	b.n	800b5bc <_reclaim_reent+0x8c>
 800b5dc:	2500      	movs	r5, #0
 800b5de:	e7ef      	b.n	800b5c0 <_reclaim_reent+0x90>
 800b5e0:	bd70      	pop	{r4, r5, r6, pc}
 800b5e2:	bf00      	nop
 800b5e4:	200001a8 	.word	0x200001a8

0800b5e8 <_sbrk_r>:
 800b5e8:	b538      	push	{r3, r4, r5, lr}
 800b5ea:	4d06      	ldr	r5, [pc, #24]	; (800b604 <_sbrk_r+0x1c>)
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	4608      	mov	r0, r1
 800b5f2:	602b      	str	r3, [r5, #0]
 800b5f4:	f7fe fff2 	bl	800a5dc <_sbrk>
 800b5f8:	1c43      	adds	r3, r0, #1
 800b5fa:	d102      	bne.n	800b602 <_sbrk_r+0x1a>
 800b5fc:	682b      	ldr	r3, [r5, #0]
 800b5fe:	b103      	cbz	r3, 800b602 <_sbrk_r+0x1a>
 800b600:	6023      	str	r3, [r4, #0]
 800b602:	bd38      	pop	{r3, r4, r5, pc}
 800b604:	20006b24 	.word	0x20006b24

0800b608 <__malloc_lock>:
 800b608:	4801      	ldr	r0, [pc, #4]	; (800b610 <__malloc_lock+0x8>)
 800b60a:	f7ff be60 	b.w	800b2ce <__retarget_lock_acquire_recursive>
 800b60e:	bf00      	nop
 800b610:	20004d40 	.word	0x20004d40

0800b614 <__malloc_unlock>:
 800b614:	4801      	ldr	r0, [pc, #4]	; (800b61c <__malloc_unlock+0x8>)
 800b616:	f7ff be6e 	b.w	800b2f6 <__retarget_lock_release_recursive>
 800b61a:	bf00      	nop
 800b61c:	20004d40 	.word	0x20004d40

0800b620 <_init>:
 800b620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b622:	bf00      	nop
 800b624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b626:	bc08      	pop	{r3}
 800b628:	469e      	mov	lr, r3
 800b62a:	4770      	bx	lr

0800b62c <_fini>:
 800b62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b62e:	bf00      	nop
 800b630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b632:	bc08      	pop	{r3}
 800b634:	469e      	mov	lr, r3
 800b636:	4770      	bx	lr
