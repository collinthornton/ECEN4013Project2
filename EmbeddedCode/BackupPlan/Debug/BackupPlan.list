
BackupPlan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b63c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800b80c  0800b80c  0001b80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b950  0800b950  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b950  0800b950  0001b950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b958  0800b958  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b958  0800b958  0001b958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b95c  0800b95c  0001b95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800b960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000069a0  2000020c  0800bb6c  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006bac  0800bb6c  00026bac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033391  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000643a  00000000  00000000  000535cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002198  00000000  00000000  00059a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f40  00000000  00000000  0005bba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f82b  00000000  00000000  0005dae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002999f  00000000  00000000  0008d30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001050fa  00000000  00000000  000b6caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bbda4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fb0  00000000  00000000  001bbdf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b7f4 	.word	0x0800b7f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	0800b7f4 	.word	0x0800b7f4

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f8fa 	bl	8000706 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	200f      	movs	r0, #15
 8000514:	f00a f8ca 	bl	800a6ac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f009 ffb6 	bl	800a488 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000004 	.word	0x20000004
 8000548:	20004dd8 	.word	0x20004dd8

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20004dd8 	.word	0x20004dd8

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff ffee 	bl	800054c <HAL_GetTick>
 8000570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800057c:	d005      	beq.n	800058a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <HAL_Delay+0x44>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800058a:	bf00      	nop
 800058c:	f7ff ffde 	bl	800054c <HAL_GetTick>
 8000590:	4602      	mov	r2, r0
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f7      	bhi.n	800058c <HAL_Delay+0x28>
  {
  }
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000004 	.word	0x20000004

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__NVIC_SetPriorityGrouping+0x40>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005d6:	4313      	orrs	r3, r2
 80005d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005da:	4a04      	ldr	r2, [pc, #16]	; (80005ec <__NVIC_SetPriorityGrouping+0x40>)
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	60d3      	str	r3, [r2, #12]
}
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000ed00 	.word	0xe000ed00
 80005f0:	05fa0000 	.word	0x05fa0000

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	2b00      	cmp	r3, #0
 8000620:	db0b      	blt.n	800063a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 021f 	and.w	r2, r3, #31
 8000628:	4907      	ldr	r1, [pc, #28]	; (8000648 <__NVIC_EnableIRQ+0x38>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	095b      	lsrs	r3, r3, #5
 8000630:	2001      	movs	r0, #1
 8000632:	fa00 f202 	lsl.w	r2, r0, r2
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000e100 	.word	0xe000e100

0800064c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db0a      	blt.n	8000676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <__NVIC_SetPriority+0x4c>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	0112      	lsls	r2, r2, #4
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	440b      	add	r3, r1
 8000670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000674:	e00a      	b.n	800068c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <__NVIC_SetPriority+0x50>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	3b04      	subs	r3, #4
 8000684:	0112      	lsls	r2, r2, #4
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	440b      	add	r3, r1
 800068a:	761a      	strb	r2, [r3, #24]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f1c3 0307 	rsb	r3, r3, #7
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	bf28      	it	cs
 80006be:	2304      	movcs	r3, #4
 80006c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3304      	adds	r3, #4
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d902      	bls.n	80006d0 <NVIC_EncodePriority+0x30>
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3b03      	subs	r3, #3
 80006ce:	e000      	b.n	80006d2 <NVIC_EncodePriority+0x32>
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43da      	mvns	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	401a      	ands	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43d9      	mvns	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff ff4c 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800072e:	f7ff ff61 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 8000732:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	68b9      	ldr	r1, [r7, #8]
 8000738:	6978      	ldr	r0, [r7, #20]
 800073a:	f7ff ffb1 	bl	80006a0 <NVIC_EncodePriority>
 800073e:	4602      	mov	r2, r0
 8000740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff80 	bl	800064c <__NVIC_SetPriority>
}
 800074c:	bf00      	nop
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff54 	bl	8000610 <__NVIC_EnableIRQ>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	; 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
 800078e:	e175      	b.n	8000a7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000790:	2201      	movs	r2, #1
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	697a      	ldr	r2, [r7, #20]
 80007a0:	4013      	ands	r3, r2
 80007a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007a4:	693a      	ldr	r2, [r7, #16]
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	f040 8164 	bne.w	8000a76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d00b      	beq.n	80007ce <HAL_GPIO_Init+0x5e>
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d007      	beq.n	80007ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c2:	2b11      	cmp	r3, #17
 80007c4:	d003      	beq.n	80007ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	2b12      	cmp	r3, #18
 80007cc:	d130      	bne.n	8000830 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	689b      	ldr	r3, [r3, #8]
 80007d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	2203      	movs	r2, #3
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43db      	mvns	r3, r3
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	4013      	ands	r3, r2
 80007e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	68da      	ldr	r2, [r3, #12]
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	69ba      	ldr	r2, [r7, #24]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	69ba      	ldr	r2, [r7, #24]
 80007fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000804:	2201      	movs	r2, #1
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	fa02 f303 	lsl.w	r3, r2, r3
 800080c:	43db      	mvns	r3, r3
 800080e:	69ba      	ldr	r2, [r7, #24]
 8000810:	4013      	ands	r3, r2
 8000812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	091b      	lsrs	r3, r3, #4
 800081a:	f003 0201 	and.w	r2, r3, #1
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	4313      	orrs	r3, r2
 8000828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	69ba      	ldr	r2, [r7, #24]
 800082e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	2203      	movs	r2, #3
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	69ba      	ldr	r2, [r7, #24]
 8000844:	4013      	ands	r3, r2
 8000846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	689a      	ldr	r2, [r3, #8]
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	4313      	orrs	r3, r2
 8000858:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	69ba      	ldr	r2, [r7, #24]
 800085e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	2b02      	cmp	r3, #2
 8000866:	d003      	beq.n	8000870 <HAL_GPIO_Init+0x100>
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	2b12      	cmp	r3, #18
 800086e:	d123      	bne.n	80008b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	08da      	lsrs	r2, r3, #3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3208      	adds	r2, #8
 8000878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800087c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	f003 0307 	and.w	r3, r3, #7
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	220f      	movs	r2, #15
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4013      	ands	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	691a      	ldr	r2, [r3, #16]
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	08da      	lsrs	r2, r3, #3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3208      	adds	r2, #8
 80008b2:	69b9      	ldr	r1, [r7, #24]
 80008b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	2203      	movs	r2, #3
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	4013      	ands	r3, r2
 80008ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f003 0203 	and.w	r2, r3, #3
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f000 80be 	beq.w	8000a76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b66      	ldr	r3, [pc, #408]	; (8000a94 <HAL_GPIO_Init+0x324>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	4a65      	ldr	r2, [pc, #404]	; (8000a94 <HAL_GPIO_Init+0x324>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000904:	6453      	str	r3, [r2, #68]	; 0x44
 8000906:	4b63      	ldr	r3, [pc, #396]	; (8000a94 <HAL_GPIO_Init+0x324>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000912:	4a61      	ldr	r2, [pc, #388]	; (8000a98 <HAL_GPIO_Init+0x328>)
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	089b      	lsrs	r3, r3, #2
 8000918:	3302      	adds	r3, #2
 800091a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f003 0303 	and.w	r3, r3, #3
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	220f      	movs	r2, #15
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	4013      	ands	r3, r2
 8000934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a58      	ldr	r2, [pc, #352]	; (8000a9c <HAL_GPIO_Init+0x32c>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d037      	beq.n	80009ae <HAL_GPIO_Init+0x23e>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a57      	ldr	r2, [pc, #348]	; (8000aa0 <HAL_GPIO_Init+0x330>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d031      	beq.n	80009aa <HAL_GPIO_Init+0x23a>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a56      	ldr	r2, [pc, #344]	; (8000aa4 <HAL_GPIO_Init+0x334>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d02b      	beq.n	80009a6 <HAL_GPIO_Init+0x236>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a55      	ldr	r2, [pc, #340]	; (8000aa8 <HAL_GPIO_Init+0x338>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d025      	beq.n	80009a2 <HAL_GPIO_Init+0x232>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a54      	ldr	r2, [pc, #336]	; (8000aac <HAL_GPIO_Init+0x33c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d01f      	beq.n	800099e <HAL_GPIO_Init+0x22e>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a53      	ldr	r2, [pc, #332]	; (8000ab0 <HAL_GPIO_Init+0x340>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d019      	beq.n	800099a <HAL_GPIO_Init+0x22a>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a52      	ldr	r2, [pc, #328]	; (8000ab4 <HAL_GPIO_Init+0x344>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d013      	beq.n	8000996 <HAL_GPIO_Init+0x226>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a51      	ldr	r2, [pc, #324]	; (8000ab8 <HAL_GPIO_Init+0x348>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d00d      	beq.n	8000992 <HAL_GPIO_Init+0x222>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a50      	ldr	r2, [pc, #320]	; (8000abc <HAL_GPIO_Init+0x34c>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d007      	beq.n	800098e <HAL_GPIO_Init+0x21e>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a4f      	ldr	r2, [pc, #316]	; (8000ac0 <HAL_GPIO_Init+0x350>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d101      	bne.n	800098a <HAL_GPIO_Init+0x21a>
 8000986:	2309      	movs	r3, #9
 8000988:	e012      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 800098a:	230a      	movs	r3, #10
 800098c:	e010      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 800098e:	2308      	movs	r3, #8
 8000990:	e00e      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 8000992:	2307      	movs	r3, #7
 8000994:	e00c      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 8000996:	2306      	movs	r3, #6
 8000998:	e00a      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 800099a:	2305      	movs	r3, #5
 800099c:	e008      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 800099e:	2304      	movs	r3, #4
 80009a0:	e006      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 80009a2:	2303      	movs	r3, #3
 80009a4:	e004      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 80009a6:	2302      	movs	r3, #2
 80009a8:	e002      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 80009aa:	2301      	movs	r3, #1
 80009ac:	e000      	b.n	80009b0 <HAL_GPIO_Init+0x240>
 80009ae:	2300      	movs	r3, #0
 80009b0:	69fa      	ldr	r2, [r7, #28]
 80009b2:	f002 0203 	and.w	r2, r2, #3
 80009b6:	0092      	lsls	r2, r2, #2
 80009b8:	4093      	lsls	r3, r2
 80009ba:	69ba      	ldr	r2, [r7, #24]
 80009bc:	4313      	orrs	r3, r2
 80009be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80009c0:	4935      	ldr	r1, [pc, #212]	; (8000a98 <HAL_GPIO_Init+0x328>)
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	089b      	lsrs	r3, r3, #2
 80009c6:	3302      	adds	r3, #2
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009ce:	4b3d      	ldr	r3, [pc, #244]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	43db      	mvns	r3, r3
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	4013      	ands	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009f2:	4a34      	ldr	r2, [pc, #208]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009f8:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	43db      	mvns	r3, r3
 8000a02:	69ba      	ldr	r2, [r7, #24]
 8000a04:	4013      	ands	r3, r2
 8000a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d003      	beq.n	8000a1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a1c:	4a29      	ldr	r2, [pc, #164]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a22:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a46:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a70:	4a14      	ldr	r2, [pc, #80]	; (8000ac4 <HAL_GPIO_Init+0x354>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	61fb      	str	r3, [r7, #28]
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	2b0f      	cmp	r3, #15
 8000a80:	f67f ae86 	bls.w	8000790 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3724      	adds	r7, #36	; 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40013800 	.word	0x40013800
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40020400 	.word	0x40020400
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40021400 	.word	0x40021400
 8000ab4:	40021800 	.word	0x40021800
 8000ab8:	40021c00 	.word	0x40021c00
 8000abc:	40022000 	.word	0x40022000
 8000ac0:	40022400 	.word	0x40022400
 8000ac4:	40013c00 	.word	0x40013c00

08000ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	807b      	strh	r3, [r7, #2]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ad8:	787b      	ldrb	r3, [r7, #1]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ade:	887a      	ldrh	r2, [r7, #2]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000ae4:	e003      	b.n	8000aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000ae6:	887b      	ldrh	r3, [r7, #2]
 8000ae8:	041a      	lsls	r2, r3, #16
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	619a      	str	r2, [r3, #24]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b085      	sub	sp, #20
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b0c:	887a      	ldrh	r2, [r7, #2]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4013      	ands	r3, r2
 8000b12:	041a      	lsls	r2, r3, #16
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	400b      	ands	r3, r1
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	619a      	str	r2, [r3, #24]
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e07f      	b.n	8000c42 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d106      	bne.n	8000b5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f009 fcbe 	bl	800a4d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2224      	movs	r2, #36	; 0x24
 8000b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f022 0201 	bic.w	r2, r2, #1
 8000b72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685a      	ldr	r2, [r3, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	689a      	ldr	r2, [r3, #8]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d107      	bne.n	8000baa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	e006      	b.n	8000bb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000bb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d104      	bne.n	8000bca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	6859      	ldr	r1, [r3, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_I2C_Init+0x11c>)
 8000bd6:	430b      	orrs	r3, r1
 8000bd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000be8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	691a      	ldr	r2, [r3, #16]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	ea42 0103 	orr.w	r1, r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	021a      	lsls	r2, r3, #8
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	430a      	orrs	r2, r1
 8000c02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69d9      	ldr	r1, [r3, #28]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a1a      	ldr	r2, [r3, #32]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	430a      	orrs	r2, r1
 8000c12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f042 0201 	orr.w	r2, r2, #1
 8000c22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2220      	movs	r2, #32
 8000c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	02008000 	.word	0x02008000

08000c50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b20      	cmp	r3, #32
 8000c64:	d138      	bne.n	8000cd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d101      	bne.n	8000c74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000c70:	2302      	movs	r3, #2
 8000c72:	e032      	b.n	8000cda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2224      	movs	r2, #36	; 0x24
 8000c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 0201 	bic.w	r2, r2, #1
 8000c92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ca2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6819      	ldr	r1, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f042 0201 	orr.w	r2, r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e000      	b.n	8000cda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000cd8:	2302      	movs	r3, #2
  }
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b085      	sub	sp, #20
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b20      	cmp	r3, #32
 8000cfa:	d139      	bne.n	8000d70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d101      	bne.n	8000d0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000d06:	2302      	movs	r3, #2
 8000d08:	e033      	b.n	8000d72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2224      	movs	r2, #36	; 0x24
 8000d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f022 0201 	bic.w	r2, r2, #1
 8000d28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f042 0201 	orr.w	r2, r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2220      	movs	r2, #32
 8000d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	e000      	b.n	8000d72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000d70:	2302      	movs	r3, #2
  }
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d80:	b08f      	sub	sp, #60	; 0x3c
 8000d82:	af0a      	add	r7, sp, #40	; 0x28
 8000d84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d101      	bne.n	8000d90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e116      	b.n	8000fbe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d106      	bne.n	8000db0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f009 fe18 	bl	800a9e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2203      	movs	r2, #3
 8000db4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f003 fb97 	bl	8004502 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	687e      	ldr	r6, [r7, #4]
 8000ddc:	466d      	mov	r5, sp
 8000dde:	f106 0410 	add.w	r4, r6, #16
 8000de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dee:	e885 0003 	stmia.w	r5, {r0, r1}
 8000df2:	1d33      	adds	r3, r6, #4
 8000df4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000df6:	6838      	ldr	r0, [r7, #0]
 8000df8:	f003 fa78 	bl	80042ec <USB_CoreInit>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d005      	beq.n	8000e0e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2202      	movs	r2, #2
 8000e06:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e0d7      	b.n	8000fbe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 fb85 	bl	8004524 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	73fb      	strb	r3, [r7, #15]
 8000e1e:	e04a      	b.n	8000eb6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	4613      	mov	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	1a9b      	subs	r3, r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	333d      	adds	r3, #61	; 0x3d
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e34:	7bfa      	ldrb	r2, [r7, #15]
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	1a9b      	subs	r3, r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	440b      	add	r3, r1
 8000e42:	333c      	adds	r3, #60	; 0x3c
 8000e44:	7bfa      	ldrb	r2, [r7, #15]
 8000e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e48:	7bfa      	ldrb	r2, [r7, #15]
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	b298      	uxth	r0, r3
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	4613      	mov	r3, r2
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	1a9b      	subs	r3, r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	440b      	add	r3, r1
 8000e5a:	3342      	adds	r3, #66	; 0x42
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e60:	7bfa      	ldrb	r2, [r7, #15]
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	4613      	mov	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	1a9b      	subs	r3, r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	333f      	adds	r3, #63	; 0x3f
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e74:	7bfa      	ldrb	r2, [r7, #15]
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	1a9b      	subs	r3, r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	440b      	add	r3, r1
 8000e82:	3344      	adds	r3, #68	; 0x44
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e88:	7bfa      	ldrb	r2, [r7, #15]
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	1a9b      	subs	r3, r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	440b      	add	r3, r1
 8000e96:	3348      	adds	r3, #72	; 0x48
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e9c:	7bfa      	ldrb	r2, [r7, #15]
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	1a9b      	subs	r3, r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	3350      	adds	r3, #80	; 0x50
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d3af      	bcc.n	8000e20 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	e044      	b.n	8000f50 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ec6:	7bfa      	ldrb	r2, [r7, #15]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	1a9b      	subs	r3, r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000edc:	7bfa      	ldrb	r2, [r7, #15]
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	1a9b      	subs	r3, r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000eee:	7bfa      	ldrb	r2, [r7, #15]
 8000ef0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f08:	7bfa      	ldrb	r2, [r7, #15]
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	1a9b      	subs	r3, r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	4613      	mov	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	1a9b      	subs	r3, r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	1a9b      	subs	r3, r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	440b      	add	r3, r1
 8000f42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d3b5      	bcc.n	8000ec6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	687e      	ldr	r6, [r7, #4]
 8000f62:	466d      	mov	r5, sp
 8000f64:	f106 0410 	add.w	r4, r6, #16
 8000f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f74:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f78:	1d33      	adds	r3, r6, #4
 8000f7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f7c:	6838      	ldr	r0, [r7, #0]
 8000f7e:	f003 fafb 	bl	8004578 <USB_DevInit>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e014      	b.n	8000fbe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d102      	bne.n	8000fb2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f001 f881 	bl	80020b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f004 fb53 	bl	8005662 <USB_DevDisconnect>

  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fc6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d101      	bne.n	8000fdc <HAL_PCD_Start+0x16>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	e012      	b.n	8001002 <HAL_PCD_Start+0x3c>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f003 fa79 	bl	80044e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f004 fb14 	bl	8005620 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800100a:	b590      	push	{r4, r7, lr}
 800100c:	b08d      	sub	sp, #52	; 0x34
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001018:	6a3b      	ldr	r3, [r7, #32]
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f004 fbd2 	bl	80057ca <USB_GetMode>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	f040 83ca 	bne.w	80017c2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f004 fb36 	bl	80056a4 <USB_ReadInterrupts>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 83c0 	beq.w	80017c0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f004 fb2d 	bl	80056a4 <USB_ReadInterrupts>
 800104a:	4603      	mov	r3, r0
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b02      	cmp	r3, #2
 8001052:	d107      	bne.n	8001064 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f002 0202 	and.w	r2, r2, #2
 8001062:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f004 fb1b 	bl	80056a4 <USB_ReadInterrupts>
 800106e:	4603      	mov	r3, r0
 8001070:	f003 0310 	and.w	r3, r3, #16
 8001074:	2b10      	cmp	r3, #16
 8001076:	d161      	bne.n	800113c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	699a      	ldr	r2, [r3, #24]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0210 	bic.w	r2, r2, #16
 8001086:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	f003 020f 	and.w	r2, r3, #15
 8001094:	4613      	mov	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	1a9b      	subs	r3, r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	3304      	adds	r3, #4
 80010a6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	0c5b      	lsrs	r3, r3, #17
 80010ac:	f003 030f 	and.w	r3, r3, #15
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d124      	bne.n	80010fe <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d035      	beq.n	800112c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	091b      	lsrs	r3, r3, #4
 80010c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80010ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	6a38      	ldr	r0, [r7, #32]
 80010d4:	f004 f981 	bl	80053da <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	091b      	lsrs	r3, r3, #4
 80010e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010e4:	441a      	add	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	699a      	ldr	r2, [r3, #24]
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010f6:	441a      	add	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	619a      	str	r2, [r3, #24]
 80010fc:	e016      	b.n	800112c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	0c5b      	lsrs	r3, r3, #17
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	2b06      	cmp	r3, #6
 8001108:	d110      	bne.n	800112c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001110:	2208      	movs	r2, #8
 8001112:	4619      	mov	r1, r3
 8001114:	6a38      	ldr	r0, [r7, #32]
 8001116:	f004 f960 	bl	80053da <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	699a      	ldr	r2, [r3, #24]
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001126:	441a      	add	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	699a      	ldr	r2, [r3, #24]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0210 	orr.w	r2, r2, #16
 800113a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f004 faaf 	bl	80056a4 <USB_ReadInterrupts>
 8001146:	4603      	mov	r3, r0
 8001148:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800114c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001150:	d16e      	bne.n	8001230 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f004 fab5 	bl	80056ca <USB_ReadDevAllOutEpInterrupt>
 8001160:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001162:	e062      	b.n	800122a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d057      	beq.n	800121e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f004 fada 	bl	8005732 <USB_ReadDevOutEPInterrupt>
 800117e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00c      	beq.n	80011a4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	015a      	lsls	r2, r3, #5
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	4413      	add	r3, r2
 8001192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001196:	461a      	mov	r2, r3
 8001198:	2301      	movs	r3, #1
 800119a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800119c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 fdde 	bl	8001d60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00c      	beq.n	80011c8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	015a      	lsls	r2, r3, #5
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	4413      	add	r3, r2
 80011b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011ba:	461a      	mov	r2, r3
 80011bc:	2308      	movs	r3, #8
 80011be:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80011c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 fed8 	bl	8001f78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d008      	beq.n	80011e4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	015a      	lsls	r2, r3, #5
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	4413      	add	r3, r2
 80011da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011de:	461a      	mov	r2, r3
 80011e0:	2310      	movs	r3, #16
 80011e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	f003 0320 	and.w	r3, r3, #32
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d008      	beq.n	8001200 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	015a      	lsls	r2, r3, #5
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	4413      	add	r3, r2
 80011f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011fa:	461a      	mov	r2, r3
 80011fc:	2320      	movs	r3, #32
 80011fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d009      	beq.n	800121e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	015a      	lsls	r2, r3, #5
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	4413      	add	r3, r2
 8001212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001216:	461a      	mov	r2, r3
 8001218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	3301      	adds	r3, #1
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001226:	085b      	lsrs	r3, r3, #1
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122c:	2b00      	cmp	r3, #0
 800122e:	d199      	bne.n	8001164 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f004 fa35 	bl	80056a4 <USB_ReadInterrupts>
 800123a:	4603      	mov	r3, r0
 800123c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001240:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001244:	f040 80c0 	bne.w	80013c8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f004 fa56 	bl	80056fe <USB_ReadDevAllInEpInterrupt>
 8001252:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001258:	e0b2      	b.n	80013c0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800125a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80a7 	beq.w	80013b4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f004 fa7c 	bl	800576e <USB_ReadDevInEPInterrupt>
 8001276:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d057      	beq.n	8001332 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	f003 030f 	and.w	r3, r3, #15
 8001288:	2201      	movs	r2, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43db      	mvns	r3, r3
 800129c:	69f9      	ldr	r1, [r7, #28]
 800129e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80012a2:	4013      	ands	r3, r2
 80012a4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	015a      	lsls	r2, r3, #5
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	4413      	add	r3, r2
 80012ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012b2:	461a      	mov	r2, r3
 80012b4:	2301      	movs	r3, #1
 80012b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d132      	bne.n	8001326 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c4:	4613      	mov	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	1a9b      	subs	r3, r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	3348      	adds	r3, #72	; 0x48
 80012d0:	6819      	ldr	r1, [r3, #0]
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012d6:	4613      	mov	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4403      	add	r3, r0
 80012e0:	3344      	adds	r3, #68	; 0x44
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4419      	add	r1, r3
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ea:	4613      	mov	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	1a9b      	subs	r3, r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4403      	add	r3, r0
 80012f4:	3348      	adds	r3, #72	; 0x48
 80012f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d113      	bne.n	8001326 <HAL_PCD_IRQHandler+0x31c>
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001302:	4613      	mov	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	1a9b      	subs	r3, r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	3350      	adds	r3, #80	; 0x50
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d108      	bne.n	8001326 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800131e:	461a      	mov	r2, r3
 8001320:	2101      	movs	r1, #1
 8001322:	f004 fa85 	bl	8005830 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4619      	mov	r1, r3
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f009 fbe8 	bl	800ab02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	2b00      	cmp	r3, #0
 800133a:	d008      	beq.n	800134e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	015a      	lsls	r2, r3, #5
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	4413      	add	r3, r2
 8001344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001348:	461a      	mov	r2, r3
 800134a:	2308      	movs	r3, #8
 800134c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	2b00      	cmp	r3, #0
 8001356:	d008      	beq.n	800136a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	015a      	lsls	r2, r3, #5
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	4413      	add	r3, r2
 8001360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001364:	461a      	mov	r2, r3
 8001366:	2310      	movs	r3, #16
 8001368:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	015a      	lsls	r2, r3, #5
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	4413      	add	r3, r2
 800137c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001380:	461a      	mov	r2, r3
 8001382:	2340      	movs	r3, #64	; 0x40
 8001384:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d008      	beq.n	80013a2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	015a      	lsls	r2, r3, #5
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	4413      	add	r3, r2
 8001398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800139c:	461a      	mov	r2, r3
 800139e:	2302      	movs	r3, #2
 80013a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80013ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 fc48 	bl	8001c44 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	3301      	adds	r3, #1
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013bc:	085b      	lsrs	r3, r3, #1
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f47f af49 	bne.w	800125a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f004 f969 	bl	80056a4 <USB_ReadInterrupts>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80013d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013dc:	d122      	bne.n	8001424 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013ec:	f023 0301 	bic.w	r3, r3, #1
 80013f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d108      	bne.n	800140e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001404:	2100      	movs	r1, #0
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f009 fdca 	bl	800afa0 <HAL_PCDEx_LPM_Callback>
 800140c:	e002      	b.n	8001414 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f009 fbee 	bl	800abf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	695a      	ldr	r2, [r3, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001422:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f004 f93b 	bl	80056a4 <USB_ReadInterrupts>
 800142e:	4603      	mov	r3, r0
 8001430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001438:	d112      	bne.n	8001460 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b01      	cmp	r3, #1
 8001448:	d102      	bne.n	8001450 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f009 fbaa 	bl	800aba4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800145e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f004 f91d 	bl	80056a4 <USB_ReadInterrupts>
 800146a:	4603      	mov	r3, r0
 800146c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001474:	d121      	bne.n	80014ba <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	695a      	ldr	r2, [r3, #20]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001484:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d111      	bne.n	80014b4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	f003 020f 	and.w	r2, r3, #15
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80014aa:	2101      	movs	r1, #1
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f009 fd77 	bl	800afa0 <HAL_PCDEx_LPM_Callback>
 80014b2:	e002      	b.n	80014ba <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f009 fb75 	bl	800aba4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f004 f8f0 	bl	80056a4 <USB_ReadInterrupts>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ce:	f040 80c7 	bne.w	8001660 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014e0:	f023 0301 	bic.w	r3, r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2110      	movs	r1, #16
 80014ec:	4618      	mov	r0, r3
 80014ee:	f003 f9b1 	bl	8004854 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014f6:	e056      	b.n	80015a6 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80014f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fa:	015a      	lsls	r2, r3, #5
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	4413      	add	r3, r2
 8001500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001504:	461a      	mov	r2, r3
 8001506:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800150a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	015a      	lsls	r2, r3, #5
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	4413      	add	r3, r2
 8001514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800151c:	0151      	lsls	r1, r2, #5
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	440a      	add	r2, r1
 8001522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001526:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800152a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152e:	015a      	lsls	r2, r3, #5
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	4413      	add	r3, r2
 8001534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800153c:	0151      	lsls	r1, r2, #5
 800153e:	69fa      	ldr	r2, [r7, #28]
 8001540:	440a      	add	r2, r1
 8001542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001546:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800154a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800154c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154e:	015a      	lsls	r2, r3, #5
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	4413      	add	r3, r2
 8001554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001558:	461a      	mov	r2, r3
 800155a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800155e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001562:	015a      	lsls	r2, r3, #5
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	4413      	add	r3, r2
 8001568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001570:	0151      	lsls	r1, r2, #5
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	440a      	add	r2, r1
 8001576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800157a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800157e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001582:	015a      	lsls	r2, r3, #5
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	4413      	add	r3, r2
 8001588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001590:	0151      	lsls	r1, r2, #5
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	440a      	add	r2, r1
 8001596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800159a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800159e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a2:	3301      	adds	r3, #1
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d3a3      	bcc.n	80014f8 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	69fa      	ldr	r2, [r7, #28]
 80015ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015be:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80015c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d016      	beq.n	80015fa <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015dc:	f043 030b 	orr.w	r3, r3, #11
 80015e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	69fa      	ldr	r2, [r7, #28]
 80015ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015f2:	f043 030b 	orr.w	r3, r3, #11
 80015f6:	6453      	str	r3, [r2, #68]	; 0x44
 80015f8:	e015      	b.n	8001626 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001600:	695a      	ldr	r2, [r3, #20]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001608:	4619      	mov	r1, r3
 800160a:	f242 032b 	movw	r3, #8235	; 0x202b
 800160e:	4313      	orrs	r3, r2
 8001610:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001620:	f043 030b 	orr.w	r3, r3, #11
 8001624:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001634:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001638:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800164a:	461a      	mov	r2, r3
 800164c:	f004 f8f0 	bl	8005830 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800165e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f004 f81d 	bl	80056a4 <USB_ReadInterrupts>
 800166a:	4603      	mov	r3, r0
 800166c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001674:	d124      	bne.n	80016c0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f004 f8b4 	bl	80057e8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f003 f946 	bl	8004916 <USB_GetDevSpeed>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681c      	ldr	r4, [r3, #0]
 8001696:	f001 f9b3 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 800169a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	461a      	mov	r2, r3
 80016a4:	4620      	mov	r0, r4
 80016a6:	f002 fe79 	bl	800439c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f009 fa51 	bl	800ab52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80016be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 ffed 	bl	80056a4 <USB_ReadInterrupts>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d10a      	bne.n	80016ea <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f009 fa2e 	bl	800ab36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f002 0208 	and.w	r2, r2, #8
 80016e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 ffd8 	bl	80056a4 <USB_ReadInterrupts>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016fe:	d10f      	bne.n	8001720 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	b2db      	uxtb	r3, r3
 8001708:	4619      	mov	r1, r3
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f009 fa90 	bl	800ac30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800171e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f003 ffbd 	bl	80056a4 <USB_ReadInterrupts>
 800172a:	4603      	mov	r3, r0
 800172c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001730:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001734:	d10f      	bne.n	8001756 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	b2db      	uxtb	r3, r3
 800173e:	4619      	mov	r1, r3
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f009 fa63 	bl	800ac0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	695a      	ldr	r2, [r3, #20]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f003 ffa2 	bl	80056a4 <USB_ReadInterrupts>
 8001760:	4603      	mov	r3, r0
 8001762:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800176a:	d10a      	bne.n	8001782 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f009 fa71 	bl	800ac54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f003 ff8c 	bl	80056a4 <USB_ReadInterrupts>
 800178c:	4603      	mov	r3, r0
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b04      	cmp	r3, #4
 8001794:	d115      	bne.n	80017c2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f009 fa61 	bl	800ac70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	e000      	b.n	80017c2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80017c0:	bf00      	nop
    }
  }
}
 80017c2:	3734      	adds	r7, #52	; 0x34
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd90      	pop	{r4, r7, pc}

080017c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d101      	bne.n	80017e2 <HAL_PCD_SetAddress+0x1a>
 80017de:	2302      	movs	r3, #2
 80017e0:	e013      	b.n	800180a <HAL_PCD_SetAddress+0x42>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 feea 	bl	80055d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	4608      	mov	r0, r1
 800181c:	4611      	mov	r1, r2
 800181e:	461a      	mov	r2, r3
 8001820:	4603      	mov	r3, r0
 8001822:	70fb      	strb	r3, [r7, #3]
 8001824:	460b      	mov	r3, r1
 8001826:	803b      	strh	r3, [r7, #0]
 8001828:	4613      	mov	r3, r2
 800182a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001834:	2b00      	cmp	r3, #0
 8001836:	da0f      	bge.n	8001858 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	f003 020f 	and.w	r2, r3, #15
 800183e:	4613      	mov	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	1a9b      	subs	r3, r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	3338      	adds	r3, #56	; 0x38
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	3304      	adds	r3, #4
 800184e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2201      	movs	r2, #1
 8001854:	705a      	strb	r2, [r3, #1]
 8001856:	e00f      	b.n	8001878 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	f003 020f 	and.w	r2, r3, #15
 800185e:	4613      	mov	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	1a9b      	subs	r3, r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	3304      	adds	r3, #4
 8001870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	b2da      	uxtb	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001884:	883a      	ldrh	r2, [r7, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	78ba      	ldrb	r2, [r7, #2]
 800188e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	785b      	ldrb	r3, [r3, #1]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018a2:	78bb      	ldrb	r3, [r7, #2]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d102      	bne.n	80018ae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_PCD_EP_Open+0xaa>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e00e      	b.n	80018da <HAL_PCD_EP_Open+0xc8>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68f9      	ldr	r1, [r7, #12]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 f848 	bl	8004960 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80018d8:	7afb      	ldrb	r3, [r7, #11]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b084      	sub	sp, #16
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	460b      	mov	r3, r1
 80018ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	da0f      	bge.n	8001916 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	f003 020f 	and.w	r2, r3, #15
 80018fc:	4613      	mov	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	3338      	adds	r3, #56	; 0x38
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	3304      	adds	r3, #4
 800190c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2201      	movs	r2, #1
 8001912:	705a      	strb	r2, [r3, #1]
 8001914:	e00f      	b.n	8001936 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	f003 020f 	and.w	r2, r3, #15
 800191c:	4613      	mov	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	4413      	add	r3, r2
 800192c:	3304      	adds	r3, #4
 800192e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	b2da      	uxtb	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_PCD_EP_Close+0x6e>
 800194c:	2302      	movs	r3, #2
 800194e:	e00e      	b.n	800196e <HAL_PCD_EP_Close+0x8c>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68f9      	ldr	r1, [r7, #12]
 800195e:	4618      	mov	r0, r3
 8001960:	f003 f886 	bl	8004a70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	460b      	mov	r3, r1
 8001984:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001986:	7afb      	ldrb	r3, [r7, #11]
 8001988:	f003 020f 	and.w	r2, r3, #15
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	3304      	adds	r3, #4
 800199e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2200      	movs	r2, #0
 80019b0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2200      	movs	r2, #0
 80019b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b8:	7afb      	ldrb	r3, [r7, #11]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d102      	bne.n	80019d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019d2:	7afb      	ldrb	r3, [r7, #11]
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d109      	bne.n	80019f0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	461a      	mov	r2, r3
 80019e8:	6979      	ldr	r1, [r7, #20]
 80019ea:	f003 fb69 	bl	80050c0 <USB_EP0StartXfer>
 80019ee:	e008      	b.n	8001a02 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	6979      	ldr	r1, [r7, #20]
 80019fe:	f003 f913 	bl	8004c28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	f003 020f 	and.w	r2, r3, #15
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a4c:	7afb      	ldrb	r3, [r7, #11]
 8001a4e:	f003 020f 	and.w	r2, r3, #15
 8001a52:	4613      	mov	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	1a9b      	subs	r3, r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	3338      	adds	r3, #56	; 0x38
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	3304      	adds	r3, #4
 8001a62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2200      	movs	r2, #0
 8001a74:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a7c:	7afb      	ldrb	r3, [r7, #11]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d102      	bne.n	8001a96 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a96:	7afb      	ldrb	r3, [r7, #11]
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d109      	bne.n	8001ab4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	6979      	ldr	r1, [r7, #20]
 8001aae:	f003 fb07 	bl	80050c0 <USB_EP0StartXfer>
 8001ab2:	e008      	b.n	8001ac6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	6979      	ldr	r1, [r7, #20]
 8001ac2:	f003 f8b1 	bl	8004c28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	f003 020f 	and.w	r2, r3, #15
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d901      	bls.n	8001aee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e050      	b.n	8001b90 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001aee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	da0f      	bge.n	8001b16 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	f003 020f 	and.w	r2, r3, #15
 8001afc:	4613      	mov	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	3338      	adds	r3, #56	; 0x38
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2201      	movs	r2, #1
 8001b12:	705a      	strb	r2, [r3, #1]
 8001b14:	e00d      	b.n	8001b32 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	4413      	add	r3, r2
 8001b28:	3304      	adds	r3, #4
 8001b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2201      	movs	r2, #1
 8001b36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_PCD_EP_SetStall+0x82>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e01e      	b.n	8001b90 <HAL_PCD_EP_SetStall+0xc0>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68f9      	ldr	r1, [r7, #12]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 fc63 	bl	800542c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10a      	bne.n	8001b86 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	b2d9      	uxtb	r1, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b80:	461a      	mov	r2, r3
 8001b82:	f003 fe55 	bl	8005830 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	f003 020f 	and.w	r2, r3, #15
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d901      	bls.n	8001bb6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e042      	b.n	8001c3c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	da0f      	bge.n	8001bde <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bbe:	78fb      	ldrb	r3, [r7, #3]
 8001bc0:	f003 020f 	and.w	r2, r3, #15
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	3338      	adds	r3, #56	; 0x38
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	705a      	strb	r2, [r3, #1]
 8001bdc:	e00f      	b.n	8001bfe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	f003 020f 	and.w	r2, r3, #15
 8001be4:	4613      	mov	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_PCD_EP_ClrStall+0x86>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e00e      	b.n	8001c3c <HAL_PCD_EP_ClrStall+0xa4>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68f9      	ldr	r1, [r7, #12]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f003 fc6b 	bl	8005508 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af02      	add	r7, sp, #8
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	1a9b      	subs	r3, r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	3338      	adds	r3, #56	; 0x38
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	4413      	add	r3, r2
 8001c68:	3304      	adds	r3, #4
 8001c6a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	699a      	ldr	r2, [r3, #24]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d901      	bls.n	8001c7c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e06c      	b.n	8001d56 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d902      	bls.n	8001c98 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	3303      	adds	r3, #3
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ca0:	e02b      	b.n	8001cfa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	695a      	ldr	r2, [r3, #20]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d902      	bls.n	8001cbe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3303      	adds	r3, #3
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	68d9      	ldr	r1, [r3, #12]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6978      	ldr	r0, [r7, #20]
 8001cde:	f003 fb47 	bl	8005370 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	441a      	add	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	441a      	add	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d809      	bhi.n	8001d24 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	699a      	ldr	r2, [r3, #24]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d203      	bcs.n	8001d24 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1be      	bne.n	8001ca2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d811      	bhi.n	8001d54 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	2201      	movs	r2, #1
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	6939      	ldr	r1, [r7, #16]
 8001d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d50:	4013      	ands	r3, r2
 8001d52:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3720      	adds	r7, #32
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	333c      	adds	r3, #60	; 0x3c
 8001d78:	3304      	adds	r3, #4
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	f040 80a0 	bne.w	8001ed8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d015      	beq.n	8001dce <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4a72      	ldr	r2, [pc, #456]	; (8001f70 <PCD_EP_OutXfrComplete_int+0x210>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	f240 80dd 	bls.w	8001f66 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 80d7 	beq.w	8001f66 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dca:	6093      	str	r3, [r2, #8]
 8001dcc:	e0cb      	b.n	8001f66 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	f003 0320 	and.w	r3, r3, #32
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d009      	beq.n	8001dec <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	015a      	lsls	r2, r3, #5
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4413      	add	r3, r2
 8001de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de4:	461a      	mov	r2, r3
 8001de6:	2320      	movs	r3, #32
 8001de8:	6093      	str	r3, [r2, #8]
 8001dea:	e0bc      	b.n	8001f66 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f040 80b7 	bne.w	8001f66 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4a5d      	ldr	r2, [pc, #372]	; (8001f70 <PCD_EP_OutXfrComplete_int+0x210>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d90f      	bls.n	8001e20 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00a      	beq.n	8001e20 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	015a      	lsls	r2, r3, #5
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e16:	461a      	mov	r2, r3
 8001e18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e1c:	6093      	str	r3, [r2, #8]
 8001e1e:	e0a2      	b.n	8001f66 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e32:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	0159      	lsls	r1, r3, #5
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001e46:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4403      	add	r3, r0
 8001e56:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e5a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e6e:	6819      	ldr	r1, [r3, #0]
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4403      	add	r3, r0
 8001e7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4419      	add	r1, r3
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	1a9b      	subs	r3, r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4403      	add	r3, r0
 8001e94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e98:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d114      	bne.n	8001eca <PCD_EP_OutXfrComplete_int+0x16a>
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d108      	bne.n	8001eca <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	f003 fcb3 	bl	8005830 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f008 fdfb 	bl	800aacc <HAL_PCD_DataOutStageCallback>
 8001ed6:	e046      	b.n	8001f66 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <PCD_EP_OutXfrComplete_int+0x214>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d124      	bne.n	8001f2a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001efc:	6093      	str	r3, [r2, #8]
 8001efe:	e032      	b.n	8001f66 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d008      	beq.n	8001f1c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f16:	461a      	mov	r2, r3
 8001f18:	2320      	movs	r3, #32
 8001f1a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	4619      	mov	r1, r3
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f008 fdd2 	bl	800aacc <HAL_PCD_DataOutStageCallback>
 8001f28:	e01d      	b.n	8001f66 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d114      	bne.n	8001f5a <PCD_EP_OutXfrComplete_int+0x1fa>
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d108      	bne.n	8001f5a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f52:	461a      	mov	r2, r3
 8001f54:	2100      	movs	r1, #0
 8001f56:	f003 fc6b 	bl	8005830 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	4619      	mov	r1, r3
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f008 fdb3 	bl	800aacc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	4f54300a 	.word	0x4f54300a
 8001f74:	4f54310a 	.word	0x4f54310a

08001f78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	333c      	adds	r3, #60	; 0x3c
 8001f90:	3304      	adds	r3, #4
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4a15      	ldr	r2, [pc, #84]	; (8002000 <PCD_EP_OutSetupPacket_int+0x88>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d90e      	bls.n	8001fcc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d009      	beq.n	8001fcc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	015a      	lsls	r2, r3, #5
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f008 fd6b 	bl	800aaa8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <PCD_EP_OutSetupPacket_int+0x88>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d90c      	bls.n	8001ff4 <PCD_EP_OutSetupPacket_int+0x7c>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d108      	bne.n	8001ff4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fec:	461a      	mov	r2, r3
 8001fee:	2101      	movs	r1, #1
 8001ff0:	f003 fc1e 	bl	8005830 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	4f54300a 	.word	0x4f54300a

08002004 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	70fb      	strb	r3, [r7, #3]
 8002010:	4613      	mov	r3, r2
 8002012:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d107      	bne.n	8002032 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002022:	883b      	ldrh	r3, [r7, #0]
 8002024:	0419      	lsls	r1, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	430a      	orrs	r2, r1
 800202e:	629a      	str	r2, [r3, #40]	; 0x28
 8002030:	e028      	b.n	8002084 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	0c1b      	lsrs	r3, r3, #16
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	4413      	add	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002040:	2300      	movs	r3, #0
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	e00d      	b.n	8002062 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	3340      	adds	r3, #64	; 0x40
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	0c1b      	lsrs	r3, r3, #16
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	4413      	add	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	3301      	adds	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	3b01      	subs	r3, #1
 8002068:	429a      	cmp	r2, r3
 800206a:	d3ec      	bcc.n	8002046 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800206c:	883b      	ldrh	r3, [r7, #0]
 800206e:	0418      	lsls	r0, r3, #16
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6819      	ldr	r1, [r3, #0]
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	3b01      	subs	r3, #1
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	4302      	orrs	r2, r0
 800207c:	3340      	adds	r3, #64	; 0x40
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	460b      	mov	r3, r1
 800209c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	887a      	ldrh	r2, [r7, #2]
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	10000003 	.word	0x10000003

080020fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210a:	6013      	str	r3, [r2, #0]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40007000 	.word	0x40007000

0800211c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002124:	2300      	movs	r3, #0
 8002126:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e291      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8087 	beq.w	800224e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002140:	4b96      	ldr	r3, [pc, #600]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b04      	cmp	r3, #4
 800214a:	d00c      	beq.n	8002166 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800214c:	4b93      	ldr	r3, [pc, #588]	; (800239c <HAL_RCC_OscConfig+0x280>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d112      	bne.n	800217e <HAL_RCC_OscConfig+0x62>
 8002158:	4b90      	ldr	r3, [pc, #576]	; (800239c <HAL_RCC_OscConfig+0x280>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002164:	d10b      	bne.n	800217e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002166:	4b8d      	ldr	r3, [pc, #564]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d06c      	beq.n	800224c <HAL_RCC_OscConfig+0x130>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d168      	bne.n	800224c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e26b      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002186:	d106      	bne.n	8002196 <HAL_RCC_OscConfig+0x7a>
 8002188:	4b84      	ldr	r3, [pc, #528]	; (800239c <HAL_RCC_OscConfig+0x280>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a83      	ldr	r2, [pc, #524]	; (800239c <HAL_RCC_OscConfig+0x280>)
 800218e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	e02e      	b.n	80021f4 <HAL_RCC_OscConfig+0xd8>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x9c>
 800219e:	4b7f      	ldr	r3, [pc, #508]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a7e      	ldr	r2, [pc, #504]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	4b7c      	ldr	r3, [pc, #496]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7b      	ldr	r2, [pc, #492]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e01d      	b.n	80021f4 <HAL_RCC_OscConfig+0xd8>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0xc0>
 80021c2:	4b76      	ldr	r3, [pc, #472]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a75      	ldr	r2, [pc, #468]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b73      	ldr	r3, [pc, #460]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a72      	ldr	r2, [pc, #456]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e00b      	b.n	80021f4 <HAL_RCC_OscConfig+0xd8>
 80021dc:	4b6f      	ldr	r3, [pc, #444]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a6e      	ldr	r2, [pc, #440]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b6c      	ldr	r3, [pc, #432]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a6b      	ldr	r2, [pc, #428]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80021ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe f9a6 	bl	800054c <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002204:	f7fe f9a2 	bl	800054c <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e21f      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	4b61      	ldr	r3, [pc, #388]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0xe8>
 8002222:	e014      	b.n	800224e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7fe f992 	bl	800054c <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800222c:	f7fe f98e 	bl	800054c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	; 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e20b      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	4b57      	ldr	r3, [pc, #348]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x110>
 800224a:	e000      	b.n	800224e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d069      	beq.n	800232e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800225a:	4b50      	ldr	r3, [pc, #320]	; (800239c <HAL_RCC_OscConfig+0x280>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00b      	beq.n	800227e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002266:	4b4d      	ldr	r3, [pc, #308]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b08      	cmp	r3, #8
 8002270:	d11c      	bne.n	80022ac <HAL_RCC_OscConfig+0x190>
 8002272:	4b4a      	ldr	r3, [pc, #296]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d116      	bne.n	80022ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227e:	4b47      	ldr	r3, [pc, #284]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_RCC_OscConfig+0x17a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e1df      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002296:	4b41      	ldr	r3, [pc, #260]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	493d      	ldr	r1, [pc, #244]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022aa:	e040      	b.n	800232e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d023      	beq.n	80022fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b4:	4b39      	ldr	r3, [pc, #228]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a38      	ldr	r2, [pc, #224]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe f944 	bl	800054c <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c8:	f7fe f940 	bl	800054c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e1bd      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022da:	4b30      	ldr	r3, [pc, #192]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e6:	4b2d      	ldr	r3, [pc, #180]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4929      	ldr	r1, [pc, #164]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
 80022fa:	e018      	b.n	800232e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022fc:	4b27      	ldr	r3, [pc, #156]	; (800239c <HAL_RCC_OscConfig+0x280>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a26      	ldr	r2, [pc, #152]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7fe f920 	bl	800054c <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002310:	f7fe f91c 	bl	800054c <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e199      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	4b1e      	ldr	r3, [pc, #120]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d038      	beq.n	80023ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d019      	beq.n	8002376 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002346:	4a15      	ldr	r2, [pc, #84]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fe f8fd 	bl	800054c <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002356:	f7fe f8f9 	bl	800054c <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e176      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <HAL_RCC_OscConfig+0x280>)
 800236a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x23a>
 8002374:	e01a      	b.n	80023ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_RCC_OscConfig+0x280>)
 8002378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <HAL_RCC_OscConfig+0x280>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002382:	f7fe f8e3 	bl	800054c <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002388:	e00a      	b.n	80023a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800238a:	f7fe f8df 	bl	800054c <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d903      	bls.n	80023a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e15c      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
 800239c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a0:	4b91      	ldr	r3, [pc, #580]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80023a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1ee      	bne.n	800238a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80a4 	beq.w	8002502 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ba:	4b8b      	ldr	r3, [pc, #556]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10d      	bne.n	80023e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c6:	4b88      	ldr	r3, [pc, #544]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a87      	ldr	r2, [pc, #540]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80023cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b85      	ldr	r3, [pc, #532]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023de:	2301      	movs	r3, #1
 80023e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023e2:	4b82      	ldr	r3, [pc, #520]	; (80025ec <HAL_RCC_OscConfig+0x4d0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d118      	bne.n	8002420 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80023ee:	4b7f      	ldr	r3, [pc, #508]	; (80025ec <HAL_RCC_OscConfig+0x4d0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a7e      	ldr	r2, [pc, #504]	; (80025ec <HAL_RCC_OscConfig+0x4d0>)
 80023f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023fa:	f7fe f8a7 	bl	800054c <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002402:	f7fe f8a3 	bl	800054c <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b64      	cmp	r3, #100	; 0x64
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e120      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002414:	4b75      	ldr	r3, [pc, #468]	; (80025ec <HAL_RCC_OscConfig+0x4d0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d106      	bne.n	8002436 <HAL_RCC_OscConfig+0x31a>
 8002428:	4b6f      	ldr	r3, [pc, #444]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242c:	4a6e      	ldr	r2, [pc, #440]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6713      	str	r3, [r2, #112]	; 0x70
 8002434:	e02d      	b.n	8002492 <HAL_RCC_OscConfig+0x376>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0x33c>
 800243e:	4b6a      	ldr	r3, [pc, #424]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002442:	4a69      	ldr	r2, [pc, #420]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	6713      	str	r3, [r2, #112]	; 0x70
 800244a:	4b67      	ldr	r3, [pc, #412]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	4a66      	ldr	r2, [pc, #408]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002450:	f023 0304 	bic.w	r3, r3, #4
 8002454:	6713      	str	r3, [r2, #112]	; 0x70
 8002456:	e01c      	b.n	8002492 <HAL_RCC_OscConfig+0x376>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b05      	cmp	r3, #5
 800245e:	d10c      	bne.n	800247a <HAL_RCC_OscConfig+0x35e>
 8002460:	4b61      	ldr	r3, [pc, #388]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002464:	4a60      	ldr	r2, [pc, #384]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002466:	f043 0304 	orr.w	r3, r3, #4
 800246a:	6713      	str	r3, [r2, #112]	; 0x70
 800246c:	4b5e      	ldr	r3, [pc, #376]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	4a5d      	ldr	r2, [pc, #372]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6713      	str	r3, [r2, #112]	; 0x70
 8002478:	e00b      	b.n	8002492 <HAL_RCC_OscConfig+0x376>
 800247a:	4b5b      	ldr	r3, [pc, #364]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247e:	4a5a      	ldr	r2, [pc, #360]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	6713      	str	r3, [r2, #112]	; 0x70
 8002486:	4b58      	ldr	r3, [pc, #352]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248a:	4a57      	ldr	r2, [pc, #348]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 800248c:	f023 0304 	bic.w	r3, r3, #4
 8002490:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d015      	beq.n	80024c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249a:	f7fe f857 	bl	800054c <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7fe f853 	bl	800054c <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e0ce      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b8:	4b4b      	ldr	r3, [pc, #300]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0ee      	beq.n	80024a2 <HAL_RCC_OscConfig+0x386>
 80024c4:	e014      	b.n	80024f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7fe f841 	bl	800054c <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ce:	f7fe f83d 	bl	800054c <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024dc:	4293      	cmp	r3, r2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e0b8      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e4:	4b40      	ldr	r3, [pc, #256]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1ee      	bne.n	80024ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024f0:	7dfb      	ldrb	r3, [r7, #23]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4b3c      	ldr	r3, [pc, #240]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	4a3b      	ldr	r2, [pc, #236]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 80a4 	beq.w	8002654 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800250c:	4b36      	ldr	r3, [pc, #216]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b08      	cmp	r3, #8
 8002516:	d06b      	beq.n	80025f0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d149      	bne.n	80025b4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002520:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a30      	ldr	r2, [pc, #192]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800252a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe f80e 	bl	800054c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002534:	f7fe f80a 	bl	800054c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e087      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002546:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	019b      	lsls	r3, r3, #6
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	085b      	lsrs	r3, r3, #1
 800256a:	3b01      	subs	r3, #1
 800256c:	041b      	lsls	r3, r3, #16
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	061b      	lsls	r3, r3, #24
 8002576:	4313      	orrs	r3, r2
 8002578:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 800257a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800257e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a18      	ldr	r2, [pc, #96]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 8002586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800258a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fd ffde 	bl	800054c <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7fd ffda 	bl	800054c <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e057      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x478>
 80025b2:	e04f      	b.n	8002654 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fd ffc4 	bl	800054c <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fd ffc0 	bl	800054c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e03d      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <HAL_RCC_OscConfig+0x4cc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x4ac>
 80025e6:	e035      	b.n	8002654 <HAL_RCC_OscConfig+0x538>
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_RCC_OscConfig+0x544>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d028      	beq.n	8002650 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d121      	bne.n	8002650 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d11a      	bne.n	8002650 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002620:	4013      	ands	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002626:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002628:	4293      	cmp	r3, r2
 800262a:	d111      	bne.n	8002650 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	3b01      	subs	r3, #1
 800263a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800263c:	429a      	cmp	r2, r3
 800263e:	d107      	bne.n	8002650 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800

08002664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0d0      	b.n	800281e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800267c:	4b6a      	ldr	r3, [pc, #424]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d910      	bls.n	80026ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b67      	ldr	r3, [pc, #412]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 020f 	bic.w	r2, r3, #15
 8002692:	4965      	ldr	r1, [pc, #404]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b63      	ldr	r3, [pc, #396]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0b8      	b.n	800281e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d020      	beq.n	80026fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c4:	4b59      	ldr	r3, [pc, #356]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4a58      	ldr	r2, [pc, #352]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80026ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026dc:	4b53      	ldr	r3, [pc, #332]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	4a52      	ldr	r2, [pc, #328]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80026e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e8:	4b50      	ldr	r3, [pc, #320]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	494d      	ldr	r1, [pc, #308]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d040      	beq.n	8002788 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b47      	ldr	r3, [pc, #284]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d115      	bne.n	8002746 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e07f      	b.n	800281e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	4b41      	ldr	r3, [pc, #260]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e073      	b.n	800281e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002736:	4b3d      	ldr	r3, [pc, #244]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e06b      	b.n	800281e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002746:	4b39      	ldr	r3, [pc, #228]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f023 0203 	bic.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4936      	ldr	r1, [pc, #216]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 8002754:	4313      	orrs	r3, r2
 8002756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002758:	f7fd fef8 	bl	800054c <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	e00a      	b.n	8002776 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002760:	f7fd fef4 	bl	800054c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e053      	b.n	800281e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	4b2d      	ldr	r3, [pc, #180]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 020c 	and.w	r2, r3, #12
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	429a      	cmp	r2, r3
 8002786:	d1eb      	bne.n	8002760 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002788:	4b27      	ldr	r3, [pc, #156]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d210      	bcs.n	80027b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b24      	ldr	r3, [pc, #144]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 020f 	bic.w	r2, r3, #15
 800279e:	4922      	ldr	r1, [pc, #136]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b20      	ldr	r3, [pc, #128]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e032      	b.n	800281e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4916      	ldr	r1, [pc, #88]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027e2:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	490e      	ldr	r1, [pc, #56]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027f6:	f000 f821 	bl	800283c <HAL_RCC_GetSysClockFreq>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	490a      	ldr	r1, [pc, #40]	; (8002830 <HAL_RCC_ClockConfig+0x1cc>)
 8002808:	5ccb      	ldrb	r3, [r1, r3]
 800280a:	fa22 f303 	lsr.w	r3, r2, r3
 800280e:	4a09      	ldr	r2, [pc, #36]	; (8002834 <HAL_RCC_ClockConfig+0x1d0>)
 8002810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002812:	4b09      	ldr	r3, [pc, #36]	; (8002838 <HAL_RCC_ClockConfig+0x1d4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f007 ff48 	bl	800a6ac <HAL_InitTick>

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40023c00 	.word	0x40023c00
 800282c:	40023800 	.word	0x40023800
 8002830:	0800b8d8 	.word	0x0800b8d8
 8002834:	2000011c 	.word	0x2000011c
 8002838:	20000000 	.word	0x20000000

0800283c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800283c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	2300      	movs	r3, #0
 800284e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002854:	4b67      	ldr	r3, [pc, #412]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b08      	cmp	r3, #8
 800285e:	d00d      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0x40>
 8002860:	2b08      	cmp	r3, #8
 8002862:	f200 80bd 	bhi.w	80029e0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x34>
 800286a:	2b04      	cmp	r3, #4
 800286c:	d003      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0x3a>
 800286e:	e0b7      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002870:	4b61      	ldr	r3, [pc, #388]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002872:	60bb      	str	r3, [r7, #8]
      break;
 8002874:	e0b7      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002876:	4b61      	ldr	r3, [pc, #388]	; (80029fc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002878:	60bb      	str	r3, [r7, #8]
      break;
 800287a:	e0b4      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800287c:	4b5d      	ldr	r3, [pc, #372]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002884:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002886:	4b5b      	ldr	r3, [pc, #364]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d04d      	beq.n	800292e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002892:	4b58      	ldr	r3, [pc, #352]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	099b      	lsrs	r3, r3, #6
 8002898:	461a      	mov	r2, r3
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028a2:	f04f 0100 	mov.w	r1, #0
 80028a6:	ea02 0800 	and.w	r8, r2, r0
 80028aa:	ea03 0901 	and.w	r9, r3, r1
 80028ae:	4640      	mov	r0, r8
 80028b0:	4649      	mov	r1, r9
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	014b      	lsls	r3, r1, #5
 80028bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028c0:	0142      	lsls	r2, r0, #5
 80028c2:	4610      	mov	r0, r2
 80028c4:	4619      	mov	r1, r3
 80028c6:	ebb0 0008 	subs.w	r0, r0, r8
 80028ca:	eb61 0109 	sbc.w	r1, r1, r9
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	018b      	lsls	r3, r1, #6
 80028d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028dc:	0182      	lsls	r2, r0, #6
 80028de:	1a12      	subs	r2, r2, r0
 80028e0:	eb63 0301 	sbc.w	r3, r3, r1
 80028e4:	f04f 0000 	mov.w	r0, #0
 80028e8:	f04f 0100 	mov.w	r1, #0
 80028ec:	00d9      	lsls	r1, r3, #3
 80028ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028f2:	00d0      	lsls	r0, r2, #3
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	eb12 0208 	adds.w	r2, r2, r8
 80028fc:	eb43 0309 	adc.w	r3, r3, r9
 8002900:	f04f 0000 	mov.w	r0, #0
 8002904:	f04f 0100 	mov.w	r1, #0
 8002908:	0259      	lsls	r1, r3, #9
 800290a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800290e:	0250      	lsls	r0, r2, #9
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	461a      	mov	r2, r3
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	f7fd fc76 	bl	8000210 <__aeabi_uldivmod>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4613      	mov	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	e04a      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292e:	4b31      	ldr	r3, [pc, #196]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	099b      	lsrs	r3, r3, #6
 8002934:	461a      	mov	r2, r3
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800293e:	f04f 0100 	mov.w	r1, #0
 8002942:	ea02 0400 	and.w	r4, r2, r0
 8002946:	ea03 0501 	and.w	r5, r3, r1
 800294a:	4620      	mov	r0, r4
 800294c:	4629      	mov	r1, r5
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	014b      	lsls	r3, r1, #5
 8002958:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800295c:	0142      	lsls	r2, r0, #5
 800295e:	4610      	mov	r0, r2
 8002960:	4619      	mov	r1, r3
 8002962:	1b00      	subs	r0, r0, r4
 8002964:	eb61 0105 	sbc.w	r1, r1, r5
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	018b      	lsls	r3, r1, #6
 8002972:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002976:	0182      	lsls	r2, r0, #6
 8002978:	1a12      	subs	r2, r2, r0
 800297a:	eb63 0301 	sbc.w	r3, r3, r1
 800297e:	f04f 0000 	mov.w	r0, #0
 8002982:	f04f 0100 	mov.w	r1, #0
 8002986:	00d9      	lsls	r1, r3, #3
 8002988:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800298c:	00d0      	lsls	r0, r2, #3
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	1912      	adds	r2, r2, r4
 8002994:	eb45 0303 	adc.w	r3, r5, r3
 8002998:	f04f 0000 	mov.w	r0, #0
 800299c:	f04f 0100 	mov.w	r1, #0
 80029a0:	0299      	lsls	r1, r3, #10
 80029a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80029a6:	0290      	lsls	r0, r2, #10
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	f7fd fc2a 	bl	8000210 <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4613      	mov	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	0c1b      	lsrs	r3, r3, #16
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	3301      	adds	r3, #1
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	60bb      	str	r3, [r7, #8]
      break;
 80029de:	e002      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029e2:	60bb      	str	r3, [r7, #8]
      break;
 80029e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e6:	68bb      	ldr	r3, [r7, #8]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800
 80029f8:	00f42400 	.word	0x00f42400
 80029fc:	007a1200 	.word	0x007a1200

08002a00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	2000011c 	.word	0x2000011c

08002a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a1c:	f7ff fff0 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	0a9b      	lsrs	r3, r3, #10
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	4903      	ldr	r1, [pc, #12]	; (8002a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a2e:	5ccb      	ldrb	r3, [r1, r3]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	0800b8e8 	.word	0x0800b8e8

08002a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a44:	f7ff ffdc 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	0b5b      	lsrs	r3, r3, #13
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	4903      	ldr	r1, [pc, #12]	; (8002a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40023800 	.word	0x40023800
 8002a64:	0800b8e8 	.word	0x0800b8e8

08002a68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	220f      	movs	r2, #15
 8002a76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a78:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0203 	and.w	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a84:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	08db      	lsrs	r3, r3, #3
 8002aa2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002aaa:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <HAL_RCC_GetClockConfig+0x60>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 020f 	and.w	r2, r3, #15
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	601a      	str	r2, [r3, #0]
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40023c00 	.word	0x40023c00

08002acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d012      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002af4:	4b69      	ldr	r3, [pc, #420]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4a68      	ldr	r2, [pc, #416]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002afe:	6093      	str	r3, [r2, #8]
 8002b00:	4b66      	ldr	r3, [pc, #408]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b08:	4964      	ldr	r1, [pc, #400]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b16:	2301      	movs	r3, #1
 8002b18:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d017      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b26:	4b5d      	ldr	r3, [pc, #372]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b34:	4959      	ldr	r1, [pc, #356]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b44:	d101      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b52:	2301      	movs	r3, #1
 8002b54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d017      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b62:	4b4e      	ldr	r3, [pc, #312]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	494a      	ldr	r1, [pc, #296]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b80:	d101      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 808b 	beq.w	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	4b3a      	ldr	r3, [pc, #232]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	4a39      	ldr	r2, [pc, #228]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bba:	6413      	str	r3, [r2, #64]	; 0x40
 8002bbc:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bc8:	4b35      	ldr	r3, [pc, #212]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a34      	ldr	r2, [pc, #208]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd4:	f7fd fcba 	bl	800054c <HAL_GetTick>
 8002bd8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bdc:	f7fd fcb6 	bl	800054c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e357      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bee:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bfa:	4b28      	ldr	r3, [pc, #160]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c02:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d035      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d02e      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c18:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c20:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c22:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4a1d      	ldr	r2, [pc, #116]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c2e:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c32:	4a1a      	ldr	r2, [pc, #104]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c3a:	4a18      	ldr	r2, [pc, #96]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c40:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d114      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fd fc7e 	bl	800054c <HAL_GetTick>
 8002c50:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	e00a      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c54:	f7fd fc7a 	bl	800054c <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e319      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0ee      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c82:	d111      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c92:	400b      	ands	r3, r1
 8002c94:	4901      	ldr	r1, [pc, #4]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	0ffffcff 	.word	0x0ffffcff
 8002ca8:	4bb1      	ldr	r3, [pc, #708]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4ab0      	ldr	r2, [pc, #704]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cb2:	6093      	str	r3, [r2, #8]
 8002cb4:	4bae      	ldr	r3, [pc, #696]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc0:	49ab      	ldr	r1, [pc, #684]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d010      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cd2:	4ba7      	ldr	r3, [pc, #668]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd8:	4aa5      	ldr	r2, [pc, #660]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ce2:	4ba3      	ldr	r3, [pc, #652]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ce4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cec:	49a0      	ldr	r1, [pc, #640]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d00:	4b9b      	ldr	r3, [pc, #620]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d0e:	4998      	ldr	r1, [pc, #608]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d22:	4b93      	ldr	r3, [pc, #588]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d30:	498f      	ldr	r1, [pc, #572]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d44:	4b8a      	ldr	r3, [pc, #552]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d52:	4987      	ldr	r1, [pc, #540]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d66:	4b82      	ldr	r3, [pc, #520]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	497e      	ldr	r1, [pc, #504]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d88:	4b79      	ldr	r3, [pc, #484]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8e:	f023 0203 	bic.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	4976      	ldr	r1, [pc, #472]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002daa:	4b71      	ldr	r3, [pc, #452]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db0:	f023 020c 	bic.w	r2, r3, #12
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db8:	496d      	ldr	r1, [pc, #436]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dcc:	4b68      	ldr	r3, [pc, #416]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dda:	4965      	ldr	r1, [pc, #404]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dee:	4b60      	ldr	r3, [pc, #384]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfc:	495c      	ldr	r1, [pc, #368]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e10:	4b57      	ldr	r3, [pc, #348]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1e:	4954      	ldr	r1, [pc, #336]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e32:	4b4f      	ldr	r3, [pc, #316]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	494b      	ldr	r1, [pc, #300]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e54:	4b46      	ldr	r3, [pc, #280]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e62:	4943      	ldr	r1, [pc, #268]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e76:	4b3e      	ldr	r3, [pc, #248]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e84:	493a      	ldr	r1, [pc, #232]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e98:	4b35      	ldr	r3, [pc, #212]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ea6:	4932      	ldr	r1, [pc, #200]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d011      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002eba:	4b2d      	ldr	r3, [pc, #180]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec8:	4929      	ldr	r1, [pc, #164]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ed8:	d101      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002eea:	2301      	movs	r3, #1
 8002eec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002efa:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f08:	4919      	ldr	r1, [pc, #100]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00b      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f1c:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f2c:	4910      	ldr	r1, [pc, #64]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d006      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80d9 	beq.w	80030fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f48:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a08      	ldr	r2, [pc, #32]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f54:	f7fd fafa 	bl	800054c <HAL_GetTick>
 8002f58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f5a:	e00b      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f5c:	f7fd faf6 	bl	800054c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	; 0x64
 8002f68:	d904      	bls.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e197      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f74:	4b6c      	ldr	r3, [pc, #432]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1ed      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d021      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d11d      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f94:	4b64      	ldr	r3, [pc, #400]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f9a:	0c1b      	lsrs	r3, r3, #16
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fa2:	4b61      	ldr	r3, [pc, #388]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa8:	0e1b      	lsrs	r3, r3, #24
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	019a      	lsls	r2, r3, #6
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	041b      	lsls	r3, r3, #16
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	061b      	lsls	r3, r3, #24
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	071b      	lsls	r3, r3, #28
 8002fc8:	4957      	ldr	r1, [pc, #348]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d02e      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ffa:	d129      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ffc:	4b4a      	ldr	r3, [pc, #296]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003002:	0c1b      	lsrs	r3, r3, #16
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800300a:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800300c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003010:	0f1b      	lsrs	r3, r3, #28
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	019a      	lsls	r2, r3, #6
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	431a      	orrs	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	071b      	lsls	r3, r3, #28
 8003030:	493d      	ldr	r1, [pc, #244]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003038:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800303a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800303e:	f023 021f 	bic.w	r2, r3, #31
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	3b01      	subs	r3, #1
 8003048:	4937      	ldr	r1, [pc, #220]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01d      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800305c:	4b32      	ldr	r3, [pc, #200]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800305e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003062:	0e1b      	lsrs	r3, r3, #24
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800306a:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800306c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003070:	0f1b      	lsrs	r3, r3, #28
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	019a      	lsls	r2, r3, #6
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	041b      	lsls	r3, r3, #16
 8003084:	431a      	orrs	r2, r3
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	061b      	lsls	r3, r3, #24
 800308a:	431a      	orrs	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	071b      	lsls	r3, r3, #28
 8003090:	4925      	ldr	r1, [pc, #148]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d011      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	019a      	lsls	r2, r3, #6
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	041b      	lsls	r3, r3, #16
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	061b      	lsls	r3, r3, #24
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	071b      	lsls	r3, r3, #28
 80030c0:	4919      	ldr	r1, [pc, #100]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030c8:	4b17      	ldr	r3, [pc, #92]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a16      	ldr	r2, [pc, #88]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d4:	f7fd fa3a 	bl	800054c <HAL_GetTick>
 80030d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030dc:	f7fd fa36 	bl	800054c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0d7      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030ee:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	f040 80cd 	bne.w	800329c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003102:	4b09      	ldr	r3, [pc, #36]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a08      	ldr	r2, [pc, #32]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310e:	f7fd fa1d 	bl	800054c <HAL_GetTick>
 8003112:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003114:	e00a      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003116:	f7fd fa19 	bl	800054c <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b64      	cmp	r3, #100	; 0x64
 8003122:	d903      	bls.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e0ba      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003128:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800312c:	4b5e      	ldr	r3, [pc, #376]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003138:	d0ed      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d009      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003156:	2b00      	cmp	r3, #0
 8003158:	d02e      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d12a      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003162:	4b51      	ldr	r3, [pc, #324]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003170:	4b4d      	ldr	r3, [pc, #308]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	0f1b      	lsrs	r3, r3, #28
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	019a      	lsls	r2, r3, #6
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	041b      	lsls	r3, r3, #16
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	061b      	lsls	r3, r3, #24
 8003190:	431a      	orrs	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	071b      	lsls	r3, r3, #28
 8003196:	4944      	ldr	r1, [pc, #272]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800319e:	4b42      	ldr	r3, [pc, #264]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	3b01      	subs	r3, #1
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	493d      	ldr	r1, [pc, #244]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d022      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031cc:	d11d      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031ce:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	0e1b      	lsrs	r3, r3, #24
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031dc:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	0f1b      	lsrs	r3, r3, #28
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	019a      	lsls	r2, r3, #6
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	041b      	lsls	r3, r3, #16
 80031f6:	431a      	orrs	r2, r3
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	061b      	lsls	r3, r3, #24
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	071b      	lsls	r3, r3, #28
 8003202:	4929      	ldr	r1, [pc, #164]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d028      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321c:	0e1b      	lsrs	r3, r3, #24
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003224:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	0c1b      	lsrs	r3, r3, #16
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	019a      	lsls	r2, r3, #6
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	041b      	lsls	r3, r3, #16
 800323c:	431a      	orrs	r2, r3
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	061b      	lsls	r3, r3, #24
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	071b      	lsls	r3, r3, #28
 800324a:	4917      	ldr	r1, [pc, #92]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003252:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003258:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	4911      	ldr	r1, [pc, #68]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0e      	ldr	r2, [pc, #56]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800326e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003274:	f7fd f96a 	bl	800054c <HAL_GetTick>
 8003278:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800327c:	f7fd f966 	bl	800054c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e007      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800329a:	d1ef      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800

080032ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e09d      	b.n	80033fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d108      	bne.n	80032d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ce:	d009      	beq.n	80032e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	61da      	str	r2, [r3, #28]
 80032d6:	e005      	b.n	80032e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f007 f92e 	bl	800a560 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003324:	d902      	bls.n	800332c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	e002      	b.n	8003332 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800332c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003330:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800333a:	d007      	beq.n	800334c <HAL_SPI_Init+0xa0>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003344:	d002      	beq.n	800334c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	ea42 0103 	orr.w	r1, r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	0c1b      	lsrs	r3, r3, #16
 80033a8:	f003 0204 	and.w	r2, r3, #4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033c8:	ea42 0103 	orr.w	r1, r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69da      	ldr	r2, [r3, #28]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e049      	b.n	80034a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d106      	bne.n	800342e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f841 	bl	80034b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2202      	movs	r2, #2
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3304      	adds	r3, #4
 800343e:	4619      	mov	r1, r3
 8003440:	4610      	mov	r0, r2
 8003442:	f000 f9ff 	bl	8003844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d001      	beq.n	80034dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e054      	b.n	8003586 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a26      	ldr	r2, [pc, #152]	; (8003594 <HAL_TIM_Base_Start_IT+0xd0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d022      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003506:	d01d      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a22      	ldr	r2, [pc, #136]	; (8003598 <HAL_TIM_Base_Start_IT+0xd4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d018      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a21      	ldr	r2, [pc, #132]	; (800359c <HAL_TIM_Base_Start_IT+0xd8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d013      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1f      	ldr	r2, [pc, #124]	; (80035a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00e      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1e      	ldr	r2, [pc, #120]	; (80035a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d009      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1c      	ldr	r2, [pc, #112]	; (80035a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d004      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x80>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1b      	ldr	r2, [pc, #108]	; (80035ac <HAL_TIM_Base_Start_IT+0xe8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d115      	bne.n	8003570 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <HAL_TIM_Base_Start_IT+0xec>)
 800354c:	4013      	ands	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b06      	cmp	r3, #6
 8003554:	d015      	beq.n	8003582 <HAL_TIM_Base_Start_IT+0xbe>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355c:	d011      	beq.n	8003582 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356e:	e008      	b.n	8003582 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	e000      	b.n	8003584 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003582:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40010000 	.word	0x40010000
 8003598:	40000400 	.word	0x40000400
 800359c:	40000800 	.word	0x40000800
 80035a0:	40000c00 	.word	0x40000c00
 80035a4:	40010400 	.word	0x40010400
 80035a8:	40014000 	.word	0x40014000
 80035ac:	40001800 	.word	0x40001800
 80035b0:	00010007 	.word	0x00010007

080035b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d122      	bne.n	8003610 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d11b      	bne.n	8003610 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0202 	mvn.w	r2, #2
 80035e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f905 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 80035fc:	e005      	b.n	800360a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f8f7 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f908 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b04      	cmp	r3, #4
 800361c:	d122      	bne.n	8003664 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b04      	cmp	r3, #4
 800362a:	d11b      	bne.n	8003664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0204 	mvn.w	r2, #4
 8003634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2202      	movs	r2, #2
 800363a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f8db 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 8003650:	e005      	b.n	800365e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f8cd 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f8de 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b08      	cmp	r3, #8
 8003670:	d122      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b08      	cmp	r3, #8
 800367e:	d11b      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0208 	mvn.w	r2, #8
 8003688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2204      	movs	r2, #4
 800368e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f8b1 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 80036a4:	e005      	b.n	80036b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f8a3 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f8b4 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b10      	cmp	r3, #16
 80036c4:	d122      	bne.n	800370c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b10      	cmp	r3, #16
 80036d2:	d11b      	bne.n	800370c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0210 	mvn.w	r2, #16
 80036dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2208      	movs	r2, #8
 80036e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f887 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f879 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f88a 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b01      	cmp	r3, #1
 8003718:	d10e      	bne.n	8003738 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b01      	cmp	r3, #1
 8003726:	d107      	bne.n	8003738 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0201 	mvn.w	r2, #1
 8003730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f006 fe90 	bl	800a458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003742:	2b80      	cmp	r3, #128	; 0x80
 8003744:	d10e      	bne.n	8003764 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003750:	2b80      	cmp	r3, #128	; 0x80
 8003752:	d107      	bne.n	8003764 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800375c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f91a 	bl	8003998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003772:	d10e      	bne.n	8003792 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	2b80      	cmp	r3, #128	; 0x80
 8003780:	d107      	bne.n	8003792 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800378a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f90d 	bl	80039ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d10e      	bne.n	80037be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b40      	cmp	r3, #64	; 0x40
 80037ac:	d107      	bne.n	80037be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f838 	bl	800382e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d10e      	bne.n	80037ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d107      	bne.n	80037ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f06f 0220 	mvn.w	r2, #32
 80037e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f8cd 	bl	8003984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a40      	ldr	r2, [pc, #256]	; (8003958 <TIM_Base_SetConfig+0x114>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003862:	d00f      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a3d      	ldr	r2, [pc, #244]	; (800395c <TIM_Base_SetConfig+0x118>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00b      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a3c      	ldr	r2, [pc, #240]	; (8003960 <TIM_Base_SetConfig+0x11c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d007      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a3b      	ldr	r2, [pc, #236]	; (8003964 <TIM_Base_SetConfig+0x120>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a3a      	ldr	r2, [pc, #232]	; (8003968 <TIM_Base_SetConfig+0x124>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d108      	bne.n	8003896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a2f      	ldr	r2, [pc, #188]	; (8003958 <TIM_Base_SetConfig+0x114>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a4:	d027      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2c      	ldr	r2, [pc, #176]	; (800395c <TIM_Base_SetConfig+0x118>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d023      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a2b      	ldr	r2, [pc, #172]	; (8003960 <TIM_Base_SetConfig+0x11c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01f      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a2a      	ldr	r2, [pc, #168]	; (8003964 <TIM_Base_SetConfig+0x120>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a29      	ldr	r2, [pc, #164]	; (8003968 <TIM_Base_SetConfig+0x124>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d017      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a28      	ldr	r2, [pc, #160]	; (800396c <TIM_Base_SetConfig+0x128>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a27      	ldr	r2, [pc, #156]	; (8003970 <TIM_Base_SetConfig+0x12c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00f      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a26      	ldr	r2, [pc, #152]	; (8003974 <TIM_Base_SetConfig+0x130>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a25      	ldr	r2, [pc, #148]	; (8003978 <TIM_Base_SetConfig+0x134>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a24      	ldr	r2, [pc, #144]	; (800397c <TIM_Base_SetConfig+0x138>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d003      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a23      	ldr	r2, [pc, #140]	; (8003980 <TIM_Base_SetConfig+0x13c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d108      	bne.n	8003908 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <TIM_Base_SetConfig+0x114>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <TIM_Base_SetConfig+0xf8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a0c      	ldr	r2, [pc, #48]	; (8003968 <TIM_Base_SetConfig+0x124>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d103      	bne.n	8003944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	615a      	str	r2, [r3, #20]
}
 800394a:	bf00      	nop
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40010000 	.word	0x40010000
 800395c:	40000400 	.word	0x40000400
 8003960:	40000800 	.word	0x40000800
 8003964:	40000c00 	.word	0x40000c00
 8003968:	40010400 	.word	0x40010400
 800396c:	40014000 	.word	0x40014000
 8003970:	40014400 	.word	0x40014400
 8003974:	40014800 	.word	0x40014800
 8003978:	40001800 	.word	0x40001800
 800397c:	40001c00 	.word	0x40001c00
 8003980:	40002000 	.word	0x40002000

08003984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e040      	b.n	8003a54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f006 fe1e 	bl	800a624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2224      	movs	r2, #36	; 0x24
 80039ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0201 	bic.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f8c0 	bl	8003b84 <UART_SetConfig>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e022      	b.n	8003a54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fb16 	bl	8004048 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fb9d 	bl	800418c <UART_CheckIdleState>
 8003a52:	4603      	mov	r3, r0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08a      	sub	sp, #40	; 0x28
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	f040 8081 	bne.w	8003b78 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_UART_Transmit+0x26>
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e079      	b.n	8003b7a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_UART_Transmit+0x38>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e072      	b.n	8003b7a <HAL_UART_Transmit+0x11e>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2221      	movs	r2, #33	; 0x21
 8003aa8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aaa:	f7fc fd4f 	bl	800054c <HAL_GetTick>
 8003aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	88fa      	ldrh	r2, [r7, #6]
 8003ab4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	88fa      	ldrh	r2, [r7, #6]
 8003abc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac8:	d108      	bne.n	8003adc <HAL_UART_Transmit+0x80>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d104      	bne.n	8003adc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	e003      	b.n	8003ae4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003aec:	e02c      	b.n	8003b48 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2200      	movs	r2, #0
 8003af6:	2180      	movs	r1, #128	; 0x80
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fb7a 	bl	80041f2 <UART_WaitOnFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e038      	b.n	8003b7a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10b      	bne.n	8003b26 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	3302      	adds	r3, #2
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	e007      	b.n	8003b36 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	3301      	adds	r3, #1
 8003b34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1cc      	bne.n	8003aee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2140      	movs	r1, #64	; 0x40
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 fb47 	bl	80041f2 <UART_WaitOnFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e005      	b.n	8003b7a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2220      	movs	r2, #32
 8003b72:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	e000      	b.n	8003b7a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
  }
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4ba7      	ldr	r3, [pc, #668]	; (8003e4c <UART_SetConfig+0x2c8>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	6979      	ldr	r1, [r7, #20]
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a95      	ldr	r2, [pc, #596]	; (8003e50 <UART_SetConfig+0x2cc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d120      	bne.n	8003c42 <UART_SetConfig+0xbe>
 8003c00:	4b94      	ldr	r3, [pc, #592]	; (8003e54 <UART_SetConfig+0x2d0>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d816      	bhi.n	8003c3c <UART_SetConfig+0xb8>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <UART_SetConfig+0x90>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c25 	.word	0x08003c25
 8003c18:	08003c31 	.word	0x08003c31
 8003c1c:	08003c2b 	.word	0x08003c2b
 8003c20:	08003c37 	.word	0x08003c37
 8003c24:	2301      	movs	r3, #1
 8003c26:	77fb      	strb	r3, [r7, #31]
 8003c28:	e14f      	b.n	8003eca <UART_SetConfig+0x346>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	77fb      	strb	r3, [r7, #31]
 8003c2e:	e14c      	b.n	8003eca <UART_SetConfig+0x346>
 8003c30:	2304      	movs	r3, #4
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e149      	b.n	8003eca <UART_SetConfig+0x346>
 8003c36:	2308      	movs	r3, #8
 8003c38:	77fb      	strb	r3, [r7, #31]
 8003c3a:	e146      	b.n	8003eca <UART_SetConfig+0x346>
 8003c3c:	2310      	movs	r3, #16
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e143      	b.n	8003eca <UART_SetConfig+0x346>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a84      	ldr	r2, [pc, #528]	; (8003e58 <UART_SetConfig+0x2d4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d132      	bne.n	8003cb2 <UART_SetConfig+0x12e>
 8003c4c:	4b81      	ldr	r3, [pc, #516]	; (8003e54 <UART_SetConfig+0x2d0>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	2b0c      	cmp	r3, #12
 8003c58:	d828      	bhi.n	8003cac <UART_SetConfig+0x128>
 8003c5a:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <UART_SetConfig+0xdc>)
 8003c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c60:	08003c95 	.word	0x08003c95
 8003c64:	08003cad 	.word	0x08003cad
 8003c68:	08003cad 	.word	0x08003cad
 8003c6c:	08003cad 	.word	0x08003cad
 8003c70:	08003ca1 	.word	0x08003ca1
 8003c74:	08003cad 	.word	0x08003cad
 8003c78:	08003cad 	.word	0x08003cad
 8003c7c:	08003cad 	.word	0x08003cad
 8003c80:	08003c9b 	.word	0x08003c9b
 8003c84:	08003cad 	.word	0x08003cad
 8003c88:	08003cad 	.word	0x08003cad
 8003c8c:	08003cad 	.word	0x08003cad
 8003c90:	08003ca7 	.word	0x08003ca7
 8003c94:	2300      	movs	r3, #0
 8003c96:	77fb      	strb	r3, [r7, #31]
 8003c98:	e117      	b.n	8003eca <UART_SetConfig+0x346>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	77fb      	strb	r3, [r7, #31]
 8003c9e:	e114      	b.n	8003eca <UART_SetConfig+0x346>
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	77fb      	strb	r3, [r7, #31]
 8003ca4:	e111      	b.n	8003eca <UART_SetConfig+0x346>
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	77fb      	strb	r3, [r7, #31]
 8003caa:	e10e      	b.n	8003eca <UART_SetConfig+0x346>
 8003cac:	2310      	movs	r3, #16
 8003cae:	77fb      	strb	r3, [r7, #31]
 8003cb0:	e10b      	b.n	8003eca <UART_SetConfig+0x346>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a69      	ldr	r2, [pc, #420]	; (8003e5c <UART_SetConfig+0x2d8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d120      	bne.n	8003cfe <UART_SetConfig+0x17a>
 8003cbc:	4b65      	ldr	r3, [pc, #404]	; (8003e54 <UART_SetConfig+0x2d0>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cc6:	2b30      	cmp	r3, #48	; 0x30
 8003cc8:	d013      	beq.n	8003cf2 <UART_SetConfig+0x16e>
 8003cca:	2b30      	cmp	r3, #48	; 0x30
 8003ccc:	d814      	bhi.n	8003cf8 <UART_SetConfig+0x174>
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	d009      	beq.n	8003ce6 <UART_SetConfig+0x162>
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d810      	bhi.n	8003cf8 <UART_SetConfig+0x174>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <UART_SetConfig+0x15c>
 8003cda:	2b10      	cmp	r3, #16
 8003cdc:	d006      	beq.n	8003cec <UART_SetConfig+0x168>
 8003cde:	e00b      	b.n	8003cf8 <UART_SetConfig+0x174>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	77fb      	strb	r3, [r7, #31]
 8003ce4:	e0f1      	b.n	8003eca <UART_SetConfig+0x346>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	77fb      	strb	r3, [r7, #31]
 8003cea:	e0ee      	b.n	8003eca <UART_SetConfig+0x346>
 8003cec:	2304      	movs	r3, #4
 8003cee:	77fb      	strb	r3, [r7, #31]
 8003cf0:	e0eb      	b.n	8003eca <UART_SetConfig+0x346>
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	77fb      	strb	r3, [r7, #31]
 8003cf6:	e0e8      	b.n	8003eca <UART_SetConfig+0x346>
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	77fb      	strb	r3, [r7, #31]
 8003cfc:	e0e5      	b.n	8003eca <UART_SetConfig+0x346>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a57      	ldr	r2, [pc, #348]	; (8003e60 <UART_SetConfig+0x2dc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d120      	bne.n	8003d4a <UART_SetConfig+0x1c6>
 8003d08:	4b52      	ldr	r3, [pc, #328]	; (8003e54 <UART_SetConfig+0x2d0>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d12:	2bc0      	cmp	r3, #192	; 0xc0
 8003d14:	d013      	beq.n	8003d3e <UART_SetConfig+0x1ba>
 8003d16:	2bc0      	cmp	r3, #192	; 0xc0
 8003d18:	d814      	bhi.n	8003d44 <UART_SetConfig+0x1c0>
 8003d1a:	2b80      	cmp	r3, #128	; 0x80
 8003d1c:	d009      	beq.n	8003d32 <UART_SetConfig+0x1ae>
 8003d1e:	2b80      	cmp	r3, #128	; 0x80
 8003d20:	d810      	bhi.n	8003d44 <UART_SetConfig+0x1c0>
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <UART_SetConfig+0x1a8>
 8003d26:	2b40      	cmp	r3, #64	; 0x40
 8003d28:	d006      	beq.n	8003d38 <UART_SetConfig+0x1b4>
 8003d2a:	e00b      	b.n	8003d44 <UART_SetConfig+0x1c0>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e0cb      	b.n	8003eca <UART_SetConfig+0x346>
 8003d32:	2302      	movs	r3, #2
 8003d34:	77fb      	strb	r3, [r7, #31]
 8003d36:	e0c8      	b.n	8003eca <UART_SetConfig+0x346>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e0c5      	b.n	8003eca <UART_SetConfig+0x346>
 8003d3e:	2308      	movs	r3, #8
 8003d40:	77fb      	strb	r3, [r7, #31]
 8003d42:	e0c2      	b.n	8003eca <UART_SetConfig+0x346>
 8003d44:	2310      	movs	r3, #16
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	e0bf      	b.n	8003eca <UART_SetConfig+0x346>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a45      	ldr	r2, [pc, #276]	; (8003e64 <UART_SetConfig+0x2e0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d125      	bne.n	8003da0 <UART_SetConfig+0x21c>
 8003d54:	4b3f      	ldr	r3, [pc, #252]	; (8003e54 <UART_SetConfig+0x2d0>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d62:	d017      	beq.n	8003d94 <UART_SetConfig+0x210>
 8003d64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d68:	d817      	bhi.n	8003d9a <UART_SetConfig+0x216>
 8003d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6e:	d00b      	beq.n	8003d88 <UART_SetConfig+0x204>
 8003d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d74:	d811      	bhi.n	8003d9a <UART_SetConfig+0x216>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <UART_SetConfig+0x1fe>
 8003d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d7e:	d006      	beq.n	8003d8e <UART_SetConfig+0x20a>
 8003d80:	e00b      	b.n	8003d9a <UART_SetConfig+0x216>
 8003d82:	2300      	movs	r3, #0
 8003d84:	77fb      	strb	r3, [r7, #31]
 8003d86:	e0a0      	b.n	8003eca <UART_SetConfig+0x346>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	77fb      	strb	r3, [r7, #31]
 8003d8c:	e09d      	b.n	8003eca <UART_SetConfig+0x346>
 8003d8e:	2304      	movs	r3, #4
 8003d90:	77fb      	strb	r3, [r7, #31]
 8003d92:	e09a      	b.n	8003eca <UART_SetConfig+0x346>
 8003d94:	2308      	movs	r3, #8
 8003d96:	77fb      	strb	r3, [r7, #31]
 8003d98:	e097      	b.n	8003eca <UART_SetConfig+0x346>
 8003d9a:	2310      	movs	r3, #16
 8003d9c:	77fb      	strb	r3, [r7, #31]
 8003d9e:	e094      	b.n	8003eca <UART_SetConfig+0x346>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a30      	ldr	r2, [pc, #192]	; (8003e68 <UART_SetConfig+0x2e4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d125      	bne.n	8003df6 <UART_SetConfig+0x272>
 8003daa:	4b2a      	ldr	r3, [pc, #168]	; (8003e54 <UART_SetConfig+0x2d0>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003db4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003db8:	d017      	beq.n	8003dea <UART_SetConfig+0x266>
 8003dba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dbe:	d817      	bhi.n	8003df0 <UART_SetConfig+0x26c>
 8003dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc4:	d00b      	beq.n	8003dde <UART_SetConfig+0x25a>
 8003dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dca:	d811      	bhi.n	8003df0 <UART_SetConfig+0x26c>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <UART_SetConfig+0x254>
 8003dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd4:	d006      	beq.n	8003de4 <UART_SetConfig+0x260>
 8003dd6:	e00b      	b.n	8003df0 <UART_SetConfig+0x26c>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	77fb      	strb	r3, [r7, #31]
 8003ddc:	e075      	b.n	8003eca <UART_SetConfig+0x346>
 8003dde:	2302      	movs	r3, #2
 8003de0:	77fb      	strb	r3, [r7, #31]
 8003de2:	e072      	b.n	8003eca <UART_SetConfig+0x346>
 8003de4:	2304      	movs	r3, #4
 8003de6:	77fb      	strb	r3, [r7, #31]
 8003de8:	e06f      	b.n	8003eca <UART_SetConfig+0x346>
 8003dea:	2308      	movs	r3, #8
 8003dec:	77fb      	strb	r3, [r7, #31]
 8003dee:	e06c      	b.n	8003eca <UART_SetConfig+0x346>
 8003df0:	2310      	movs	r3, #16
 8003df2:	77fb      	strb	r3, [r7, #31]
 8003df4:	e069      	b.n	8003eca <UART_SetConfig+0x346>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1c      	ldr	r2, [pc, #112]	; (8003e6c <UART_SetConfig+0x2e8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d137      	bne.n	8003e70 <UART_SetConfig+0x2ec>
 8003e00:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <UART_SetConfig+0x2d0>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e06:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003e0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e0e:	d017      	beq.n	8003e40 <UART_SetConfig+0x2bc>
 8003e10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e14:	d817      	bhi.n	8003e46 <UART_SetConfig+0x2c2>
 8003e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e1a:	d00b      	beq.n	8003e34 <UART_SetConfig+0x2b0>
 8003e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e20:	d811      	bhi.n	8003e46 <UART_SetConfig+0x2c2>
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <UART_SetConfig+0x2aa>
 8003e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2a:	d006      	beq.n	8003e3a <UART_SetConfig+0x2b6>
 8003e2c:	e00b      	b.n	8003e46 <UART_SetConfig+0x2c2>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	77fb      	strb	r3, [r7, #31]
 8003e32:	e04a      	b.n	8003eca <UART_SetConfig+0x346>
 8003e34:	2302      	movs	r3, #2
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e047      	b.n	8003eca <UART_SetConfig+0x346>
 8003e3a:	2304      	movs	r3, #4
 8003e3c:	77fb      	strb	r3, [r7, #31]
 8003e3e:	e044      	b.n	8003eca <UART_SetConfig+0x346>
 8003e40:	2308      	movs	r3, #8
 8003e42:	77fb      	strb	r3, [r7, #31]
 8003e44:	e041      	b.n	8003eca <UART_SetConfig+0x346>
 8003e46:	2310      	movs	r3, #16
 8003e48:	77fb      	strb	r3, [r7, #31]
 8003e4a:	e03e      	b.n	8003eca <UART_SetConfig+0x346>
 8003e4c:	efff69f3 	.word	0xefff69f3
 8003e50:	40011000 	.word	0x40011000
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40004400 	.word	0x40004400
 8003e5c:	40004800 	.word	0x40004800
 8003e60:	40004c00 	.word	0x40004c00
 8003e64:	40005000 	.word	0x40005000
 8003e68:	40011400 	.word	0x40011400
 8003e6c:	40007800 	.word	0x40007800
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a71      	ldr	r2, [pc, #452]	; (800403c <UART_SetConfig+0x4b8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d125      	bne.n	8003ec6 <UART_SetConfig+0x342>
 8003e7a:	4b71      	ldr	r3, [pc, #452]	; (8004040 <UART_SetConfig+0x4bc>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e88:	d017      	beq.n	8003eba <UART_SetConfig+0x336>
 8003e8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e8e:	d817      	bhi.n	8003ec0 <UART_SetConfig+0x33c>
 8003e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e94:	d00b      	beq.n	8003eae <UART_SetConfig+0x32a>
 8003e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e9a:	d811      	bhi.n	8003ec0 <UART_SetConfig+0x33c>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <UART_SetConfig+0x324>
 8003ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ea4:	d006      	beq.n	8003eb4 <UART_SetConfig+0x330>
 8003ea6:	e00b      	b.n	8003ec0 <UART_SetConfig+0x33c>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	77fb      	strb	r3, [r7, #31]
 8003eac:	e00d      	b.n	8003eca <UART_SetConfig+0x346>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	77fb      	strb	r3, [r7, #31]
 8003eb2:	e00a      	b.n	8003eca <UART_SetConfig+0x346>
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e007      	b.n	8003eca <UART_SetConfig+0x346>
 8003eba:	2308      	movs	r3, #8
 8003ebc:	77fb      	strb	r3, [r7, #31]
 8003ebe:	e004      	b.n	8003eca <UART_SetConfig+0x346>
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e001      	b.n	8003eca <UART_SetConfig+0x346>
 8003ec6:	2310      	movs	r3, #16
 8003ec8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed2:	d15b      	bne.n	8003f8c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003ed4:	7ffb      	ldrb	r3, [r7, #31]
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d827      	bhi.n	8003f2a <UART_SetConfig+0x3a6>
 8003eda:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <UART_SetConfig+0x35c>)
 8003edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee0:	08003f05 	.word	0x08003f05
 8003ee4:	08003f0d 	.word	0x08003f0d
 8003ee8:	08003f15 	.word	0x08003f15
 8003eec:	08003f2b 	.word	0x08003f2b
 8003ef0:	08003f1b 	.word	0x08003f1b
 8003ef4:	08003f2b 	.word	0x08003f2b
 8003ef8:	08003f2b 	.word	0x08003f2b
 8003efc:	08003f2b 	.word	0x08003f2b
 8003f00:	08003f23 	.word	0x08003f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f04:	f7fe fd88 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8003f08:	61b8      	str	r0, [r7, #24]
        break;
 8003f0a:	e013      	b.n	8003f34 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f0c:	f7fe fd98 	bl	8002a40 <HAL_RCC_GetPCLK2Freq>
 8003f10:	61b8      	str	r0, [r7, #24]
        break;
 8003f12:	e00f      	b.n	8003f34 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f14:	4b4b      	ldr	r3, [pc, #300]	; (8004044 <UART_SetConfig+0x4c0>)
 8003f16:	61bb      	str	r3, [r7, #24]
        break;
 8003f18:	e00c      	b.n	8003f34 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f1a:	f7fe fc8f 	bl	800283c <HAL_RCC_GetSysClockFreq>
 8003f1e:	61b8      	str	r0, [r7, #24]
        break;
 8003f20:	e008      	b.n	8003f34 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f26:	61bb      	str	r3, [r7, #24]
        break;
 8003f28:	e004      	b.n	8003f34 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	77bb      	strb	r3, [r7, #30]
        break;
 8003f32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d074      	beq.n	8004024 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	005a      	lsls	r2, r3, #1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	085b      	lsrs	r3, r3, #1
 8003f44:	441a      	add	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b0f      	cmp	r3, #15
 8003f56:	d916      	bls.n	8003f86 <UART_SetConfig+0x402>
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5e:	d212      	bcs.n	8003f86 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	f023 030f 	bic.w	r3, r3, #15
 8003f68:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	085b      	lsrs	r3, r3, #1
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	89fb      	ldrh	r3, [r7, #14]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	89fa      	ldrh	r2, [r7, #14]
 8003f82:	60da      	str	r2, [r3, #12]
 8003f84:	e04e      	b.n	8004024 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	77bb      	strb	r3, [r7, #30]
 8003f8a:	e04b      	b.n	8004024 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f8c:	7ffb      	ldrb	r3, [r7, #31]
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d827      	bhi.n	8003fe2 <UART_SetConfig+0x45e>
 8003f92:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <UART_SetConfig+0x414>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08003fbd 	.word	0x08003fbd
 8003f9c:	08003fc5 	.word	0x08003fc5
 8003fa0:	08003fcd 	.word	0x08003fcd
 8003fa4:	08003fe3 	.word	0x08003fe3
 8003fa8:	08003fd3 	.word	0x08003fd3
 8003fac:	08003fe3 	.word	0x08003fe3
 8003fb0:	08003fe3 	.word	0x08003fe3
 8003fb4:	08003fe3 	.word	0x08003fe3
 8003fb8:	08003fdb 	.word	0x08003fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fbc:	f7fe fd2c 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8003fc0:	61b8      	str	r0, [r7, #24]
        break;
 8003fc2:	e013      	b.n	8003fec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc4:	f7fe fd3c 	bl	8002a40 <HAL_RCC_GetPCLK2Freq>
 8003fc8:	61b8      	str	r0, [r7, #24]
        break;
 8003fca:	e00f      	b.n	8003fec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fcc:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <UART_SetConfig+0x4c0>)
 8003fce:	61bb      	str	r3, [r7, #24]
        break;
 8003fd0:	e00c      	b.n	8003fec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd2:	f7fe fc33 	bl	800283c <HAL_RCC_GetSysClockFreq>
 8003fd6:	61b8      	str	r0, [r7, #24]
        break;
 8003fd8:	e008      	b.n	8003fec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fde:	61bb      	str	r3, [r7, #24]
        break;
 8003fe0:	e004      	b.n	8003fec <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	77bb      	strb	r3, [r7, #30]
        break;
 8003fea:	bf00      	nop
    }

    if (pclk != 0U)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d018      	beq.n	8004024 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	085a      	lsrs	r2, r3, #1
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	441a      	add	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	b29b      	uxth	r3, r3
 8004006:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	2b0f      	cmp	r3, #15
 800400c:	d908      	bls.n	8004020 <UART_SetConfig+0x49c>
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004014:	d204      	bcs.n	8004020 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	60da      	str	r2, [r3, #12]
 800401e:	e001      	b.n	8004024 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004030:	7fbb      	ldrb	r3, [r7, #30]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3720      	adds	r7, #32
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40007c00 	.word	0x40007c00
 8004040:	40023800 	.word	0x40023800
 8004044:	00f42400 	.word	0x00f42400

08004048 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01a      	beq.n	800415e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004146:	d10a      	bne.n	800415e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	605a      	str	r2, [r3, #4]
  }
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af02      	add	r7, sp, #8
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800419c:	f7fc f9d6 	bl	800054c <HAL_GetTick>
 80041a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d10e      	bne.n	80041ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f817 	bl	80041f2 <UART_WaitOnFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e00d      	b.n	80041ea <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2220      	movs	r2, #32
 80041d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	4613      	mov	r3, r2
 8004200:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004202:	e05e      	b.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800420a:	d05a      	beq.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420c:	f7fc f99e 	bl	800054c <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	429a      	cmp	r2, r3
 800421a:	d302      	bcc.n	8004222 <UART_WaitOnFlagUntilTimeout+0x30>
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d11b      	bne.n	800425a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004230:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e043      	b.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d02c      	beq.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004276:	d124      	bne.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004280:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004290:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0201 	bic.w	r2, r2, #1
 80042a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e00f      	b.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4013      	ands	r3, r2
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	bf0c      	ite	eq
 80042d2:	2301      	moveq	r3, #1
 80042d4:	2300      	movne	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d091      	beq.n	8004204 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042ec:	b084      	sub	sp, #16
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	f107 001c 	add.w	r0, r7, #28
 80042fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	2b01      	cmp	r3, #1
 8004302:	d120      	bne.n	8004346 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	4b20      	ldr	r3, [pc, #128]	; (8004398 <USB_CoreInit+0xac>)
 8004316:	4013      	ands	r3, r2
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800432a:	2b01      	cmp	r3, #1
 800432c:	d105      	bne.n	800433a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f001 fad6 	bl	80058ec <USB_CoreReset>
 8004340:	4603      	mov	r3, r0
 8004342:	73fb      	strb	r3, [r7, #15]
 8004344:	e010      	b.n	8004368 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f001 faca 	bl	80058ec <USB_CoreReset>
 8004358:	4603      	mov	r3, r0
 800435a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004360:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	2b01      	cmp	r3, #1
 800436c:	d10b      	bne.n	8004386 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f043 0206 	orr.w	r2, r3, #6
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f043 0220 	orr.w	r2, r3, #32
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004386:	7bfb      	ldrb	r3, [r7, #15]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004392:	b004      	add	sp, #16
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	ffbdffbf 	.word	0xffbdffbf

0800439c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	4613      	mov	r3, r2
 80043a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d165      	bne.n	800447c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4a41      	ldr	r2, [pc, #260]	; (80044b8 <USB_SetTurnaroundTime+0x11c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d906      	bls.n	80043c6 <USB_SetTurnaroundTime+0x2a>
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4a40      	ldr	r2, [pc, #256]	; (80044bc <USB_SetTurnaroundTime+0x120>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d202      	bcs.n	80043c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80043c0:	230f      	movs	r3, #15
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	e062      	b.n	800448c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4a3c      	ldr	r2, [pc, #240]	; (80044bc <USB_SetTurnaroundTime+0x120>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d306      	bcc.n	80043dc <USB_SetTurnaroundTime+0x40>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4a3b      	ldr	r2, [pc, #236]	; (80044c0 <USB_SetTurnaroundTime+0x124>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d202      	bcs.n	80043dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80043d6:	230e      	movs	r3, #14
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	e057      	b.n	800448c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4a38      	ldr	r2, [pc, #224]	; (80044c0 <USB_SetTurnaroundTime+0x124>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d306      	bcc.n	80043f2 <USB_SetTurnaroundTime+0x56>
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4a37      	ldr	r2, [pc, #220]	; (80044c4 <USB_SetTurnaroundTime+0x128>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d202      	bcs.n	80043f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80043ec:	230d      	movs	r3, #13
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	e04c      	b.n	800448c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	4a33      	ldr	r2, [pc, #204]	; (80044c4 <USB_SetTurnaroundTime+0x128>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d306      	bcc.n	8004408 <USB_SetTurnaroundTime+0x6c>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4a32      	ldr	r2, [pc, #200]	; (80044c8 <USB_SetTurnaroundTime+0x12c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d802      	bhi.n	8004408 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004402:	230c      	movs	r3, #12
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	e041      	b.n	800448c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4a2f      	ldr	r2, [pc, #188]	; (80044c8 <USB_SetTurnaroundTime+0x12c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d906      	bls.n	800441e <USB_SetTurnaroundTime+0x82>
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4a2e      	ldr	r2, [pc, #184]	; (80044cc <USB_SetTurnaroundTime+0x130>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d802      	bhi.n	800441e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004418:	230b      	movs	r3, #11
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	e036      	b.n	800448c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4a2a      	ldr	r2, [pc, #168]	; (80044cc <USB_SetTurnaroundTime+0x130>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d906      	bls.n	8004434 <USB_SetTurnaroundTime+0x98>
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4a29      	ldr	r2, [pc, #164]	; (80044d0 <USB_SetTurnaroundTime+0x134>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d802      	bhi.n	8004434 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800442e:	230a      	movs	r3, #10
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	e02b      	b.n	800448c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4a26      	ldr	r2, [pc, #152]	; (80044d0 <USB_SetTurnaroundTime+0x134>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d906      	bls.n	800444a <USB_SetTurnaroundTime+0xae>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4a25      	ldr	r2, [pc, #148]	; (80044d4 <USB_SetTurnaroundTime+0x138>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d202      	bcs.n	800444a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004444:	2309      	movs	r3, #9
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	e020      	b.n	800448c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	4a21      	ldr	r2, [pc, #132]	; (80044d4 <USB_SetTurnaroundTime+0x138>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d306      	bcc.n	8004460 <USB_SetTurnaroundTime+0xc4>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	4a20      	ldr	r2, [pc, #128]	; (80044d8 <USB_SetTurnaroundTime+0x13c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d802      	bhi.n	8004460 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800445a:	2308      	movs	r3, #8
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	e015      	b.n	800448c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4a1d      	ldr	r2, [pc, #116]	; (80044d8 <USB_SetTurnaroundTime+0x13c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d906      	bls.n	8004476 <USB_SetTurnaroundTime+0xda>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4a1c      	ldr	r2, [pc, #112]	; (80044dc <USB_SetTurnaroundTime+0x140>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d202      	bcs.n	8004476 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004470:	2307      	movs	r3, #7
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	e00a      	b.n	800448c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004476:	2306      	movs	r3, #6
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	e007      	b.n	800448c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d102      	bne.n	8004488 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004482:	2309      	movs	r3, #9
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	e001      	b.n	800448c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004488:	2309      	movs	r3, #9
 800448a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	029b      	lsls	r3, r3, #10
 80044a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80044a4:	431a      	orrs	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	00d8acbf 	.word	0x00d8acbf
 80044bc:	00e4e1c0 	.word	0x00e4e1c0
 80044c0:	00f42400 	.word	0x00f42400
 80044c4:	01067380 	.word	0x01067380
 80044c8:	011a499f 	.word	0x011a499f
 80044cc:	01312cff 	.word	0x01312cff
 80044d0:	014ca43f 	.word	0x014ca43f
 80044d4:	016e3600 	.word	0x016e3600
 80044d8:	01a6ab1f 	.word	0x01a6ab1f
 80044dc:	01e84800 	.word	0x01e84800

080044e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f043 0201 	orr.w	r2, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f023 0201 	bic.w	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d106      	bne.n	8004550 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	60da      	str	r2, [r3, #12]
 800454e:	e00b      	b.n	8004568 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	60da      	str	r2, [r3, #12]
 8004562:	e001      	b.n	8004568 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e003      	b.n	8004570 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004568:	2032      	movs	r0, #50	; 0x32
 800456a:	f7fb fffb 	bl	8000564 <HAL_Delay>

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004578:	b084      	sub	sp, #16
 800457a:	b580      	push	{r7, lr}
 800457c:	b086      	sub	sp, #24
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004592:	2300      	movs	r3, #0
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	e009      	b.n	80045ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	3340      	adds	r3, #64	; 0x40
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	2200      	movs	r2, #0
 80045a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	3301      	adds	r3, #1
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2b0e      	cmp	r3, #14
 80045b0:	d9f2      	bls.n	8004598 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d11c      	bne.n	80045f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045c6:	f043 0302 	orr.w	r3, r3, #2
 80045ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	e005      	b.n	80045fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004604:	461a      	mov	r2, r3
 8004606:	2300      	movs	r3, #0
 8004608:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004610:	4619      	mov	r1, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004618:	461a      	mov	r2, r3
 800461a:	680b      	ldr	r3, [r1, #0]
 800461c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	2b01      	cmp	r3, #1
 8004622:	d10c      	bne.n	800463e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d104      	bne.n	8004634 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800462a:	2100      	movs	r1, #0
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f959 	bl	80048e4 <USB_SetDevSpeed>
 8004632:	e018      	b.n	8004666 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004634:	2101      	movs	r1, #1
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f954 	bl	80048e4 <USB_SetDevSpeed>
 800463c:	e013      	b.n	8004666 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004640:	2b03      	cmp	r3, #3
 8004642:	d10c      	bne.n	800465e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d104      	bne.n	8004654 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800464a:	2100      	movs	r1, #0
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f949 	bl	80048e4 <USB_SetDevSpeed>
 8004652:	e008      	b.n	8004666 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004654:	2101      	movs	r1, #1
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f944 	bl	80048e4 <USB_SetDevSpeed>
 800465c:	e003      	b.n	8004666 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800465e:	2103      	movs	r1, #3
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f93f 	bl	80048e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004666:	2110      	movs	r1, #16
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f8f3 	bl	8004854 <USB_FlushTxFifo>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f911 	bl	80048a0 <USB_FlushRxFifo>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468e:	461a      	mov	r2, r3
 8004690:	2300      	movs	r3, #0
 8004692:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469a:	461a      	mov	r2, r3
 800469c:	2300      	movs	r3, #0
 800469e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a6:	461a      	mov	r2, r3
 80046a8:	2300      	movs	r3, #0
 80046aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046ac:	2300      	movs	r3, #0
 80046ae:	613b      	str	r3, [r7, #16]
 80046b0:	e043      	b.n	800473a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046c8:	d118      	bne.n	80046fc <USB_DevInit+0x184>
    {
      if (i == 0U)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10a      	bne.n	80046e6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046dc:	461a      	mov	r2, r3
 80046de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	e013      	b.n	800470e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f2:	461a      	mov	r2, r3
 80046f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e008      	b.n	800470e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004708:	461a      	mov	r2, r3
 800470a:	2300      	movs	r3, #0
 800470c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471a:	461a      	mov	r2, r3
 800471c:	2300      	movs	r3, #0
 800471e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472c:	461a      	mov	r2, r3
 800472e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004732:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	3301      	adds	r3, #1
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	429a      	cmp	r2, r3
 8004740:	d3b7      	bcc.n	80046b2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	e043      	b.n	80047d0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800475a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800475e:	d118      	bne.n	8004792 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10a      	bne.n	800477c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004772:	461a      	mov	r2, r3
 8004774:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e013      	b.n	80047a4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004788:	461a      	mov	r2, r3
 800478a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	e008      	b.n	80047a4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479e:	461a      	mov	r2, r3
 80047a0:	2300      	movs	r3, #0
 80047a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b0:	461a      	mov	r2, r3
 80047b2:	2300      	movs	r3, #0
 80047b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c2:	461a      	mov	r2, r3
 80047c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	3301      	adds	r3, #1
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d3b7      	bcc.n	8004748 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80047f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d105      	bne.n	800480c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f043 0210 	orr.w	r2, r3, #16
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699a      	ldr	r2, [r3, #24]
 8004810:	4b0e      	ldr	r3, [pc, #56]	; (800484c <USB_DevInit+0x2d4>)
 8004812:	4313      	orrs	r3, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d005      	beq.n	800482a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f043 0208 	orr.w	r2, r3, #8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800482a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482c:	2b01      	cmp	r3, #1
 800482e:	d105      	bne.n	800483c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699a      	ldr	r2, [r3, #24]
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <USB_DevInit+0x2d8>)
 8004836:	4313      	orrs	r3, r2
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800483c:	7dfb      	ldrb	r3, [r7, #23]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004848:	b004      	add	sp, #16
 800484a:	4770      	bx	lr
 800484c:	803c3800 	.word	0x803c3800
 8004850:	40000004 	.word	0x40000004

08004854 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	019b      	lsls	r3, r3, #6
 8004866:	f043 0220 	orr.w	r2, r3, #32
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3301      	adds	r3, #1
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4a09      	ldr	r2, [pc, #36]	; (800489c <USB_FlushTxFifo+0x48>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d901      	bls.n	8004880 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e006      	b.n	800488e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b20      	cmp	r3, #32
 800488a:	d0f0      	beq.n	800486e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	00030d40 	.word	0x00030d40

080048a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2210      	movs	r2, #16
 80048b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	3301      	adds	r3, #1
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4a09      	ldr	r2, [pc, #36]	; (80048e0 <USB_FlushRxFifo+0x40>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d901      	bls.n	80048c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e006      	b.n	80048d2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d0f0      	beq.n	80048b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	00030d40 	.word	0x00030d40

080048e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	68f9      	ldr	r1, [r7, #12]
 8004900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004904:	4313      	orrs	r3, r2
 8004906:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004916:	b480      	push	{r7}
 8004918:	b087      	sub	sp, #28
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 0306 	and.w	r3, r3, #6
 800492e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004936:	2300      	movs	r3, #0
 8004938:	75fb      	strb	r3, [r7, #23]
 800493a:	e00a      	b.n	8004952 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d002      	beq.n	8004948 <USB_GetDevSpeed+0x32>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b06      	cmp	r3, #6
 8004946:	d102      	bne.n	800494e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004948:	2302      	movs	r3, #2
 800494a:	75fb      	strb	r3, [r7, #23]
 800494c:	e001      	b.n	8004952 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800494e:	230f      	movs	r3, #15
 8004950:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004952:	7dfb      	ldrb	r3, [r7, #23]
}
 8004954:	4618      	mov	r0, r3
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	785b      	ldrb	r3, [r3, #1]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d139      	bne.n	80049f0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	2101      	movs	r1, #1
 800498e:	fa01 f303 	lsl.w	r3, r1, r3
 8004992:	b29b      	uxth	r3, r3
 8004994:	68f9      	ldr	r1, [r7, #12]
 8004996:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800499a:	4313      	orrs	r3, r2
 800499c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d153      	bne.n	8004a5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	78db      	ldrb	r3, [r3, #3]
 80049ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	059b      	lsls	r3, r3, #22
 80049d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049d8:	431a      	orrs	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	0159      	lsls	r1, r3, #5
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	440b      	add	r3, r1
 80049e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e6:	4619      	mov	r1, r3
 80049e8:	4b20      	ldr	r3, [pc, #128]	; (8004a6c <USB_ActivateEndpoint+0x10c>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	600b      	str	r3, [r1, #0]
 80049ee:	e035      	b.n	8004a5c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	2101      	movs	r1, #1
 8004a02:	fa01 f303 	lsl.w	r3, r1, r3
 8004a06:	041b      	lsls	r3, r3, #16
 8004a08:	68f9      	ldr	r1, [r7, #12]
 8004a0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d119      	bne.n	8004a5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	78db      	ldrb	r3, [r3, #3]
 8004a42:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a44:	430b      	orrs	r3, r1
 8004a46:	431a      	orrs	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	0159      	lsls	r1, r3, #5
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	440b      	add	r3, r1
 8004a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a54:	4619      	mov	r1, r3
 8004a56:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <USB_ActivateEndpoint+0x10c>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	10008000 	.word	0x10008000

08004a70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	785b      	ldrb	r3, [r3, #1]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d161      	bne.n	8004b50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aa2:	d11f      	bne.n	8004ae4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	0151      	lsls	r1, r2, #5
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	440a      	add	r2, r1
 8004aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004abe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ac2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	0151      	lsls	r1, r2, #5
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	440a      	add	r2, r1
 8004ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ade:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ae2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	f003 030f 	and.w	r3, r3, #15
 8004af4:	2101      	movs	r1, #1
 8004af6:	fa01 f303 	lsl.w	r3, r1, r3
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	43db      	mvns	r3, r3
 8004afe:	68f9      	ldr	r1, [r7, #12]
 8004b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b04:	4013      	ands	r3, r2
 8004b06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	2101      	movs	r1, #1
 8004b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	68f9      	ldr	r1, [r7, #12]
 8004b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b28:	4013      	ands	r3, r2
 8004b2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	0159      	lsls	r1, r3, #5
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	440b      	add	r3, r1
 8004b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b46:	4619      	mov	r1, r3
 8004b48:	4b35      	ldr	r3, [pc, #212]	; (8004c20 <USB_DeactivateEndpoint+0x1b0>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	600b      	str	r3, [r1, #0]
 8004b4e:	e060      	b.n	8004c12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b66:	d11f      	bne.n	8004ba8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	0151      	lsls	r1, r2, #5
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	440a      	add	r2, r1
 8004b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	0151      	lsls	r1, r2, #5
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	440a      	add	r2, r1
 8004b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ba6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	2101      	movs	r1, #1
 8004bba:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbe:	041b      	lsls	r3, r3, #16
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	68f9      	ldr	r1, [r7, #12]
 8004bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bc8:	4013      	ands	r3, r2
 8004bca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd2:	69da      	ldr	r2, [r3, #28]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	2101      	movs	r1, #1
 8004bde:	fa01 f303 	lsl.w	r3, r1, r3
 8004be2:	041b      	lsls	r3, r3, #16
 8004be4:	43db      	mvns	r3, r3
 8004be6:	68f9      	ldr	r1, [r7, #12]
 8004be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bec:	4013      	ands	r3, r2
 8004bee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	0159      	lsls	r1, r3, #5
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	440b      	add	r3, r1
 8004c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <USB_DeactivateEndpoint+0x1b4>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	ec337800 	.word	0xec337800
 8004c24:	eff37800 	.word	0xeff37800

08004c28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	; 0x28
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	4613      	mov	r3, r2
 8004c34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	785b      	ldrb	r3, [r3, #1]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	f040 8163 	bne.w	8004f10 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d132      	bne.n	8004cb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	0159      	lsls	r1, r3, #5
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	440b      	add	r3, r1
 8004c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4ba5      	ldr	r3, [pc, #660]	; (8004f04 <USB_EPStartXfer+0x2dc>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	0151      	lsls	r1, r2, #5
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	440a      	add	r2, r1
 8004c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	0159      	lsls	r1, r3, #5
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	440b      	add	r3, r1
 8004caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4b95      	ldr	r3, [pc, #596]	; (8004f08 <USB_EPStartXfer+0x2e0>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	610b      	str	r3, [r1, #16]
 8004cb6:	e074      	b.n	8004da2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc4:	691a      	ldr	r2, [r3, #16]
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	0159      	lsls	r1, r3, #5
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	440b      	add	r3, r1
 8004cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4b8c      	ldr	r3, [pc, #560]	; (8004f08 <USB_EPStartXfer+0x2e0>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	0159      	lsls	r1, r3, #5
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	440b      	add	r3, r1
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4b83      	ldr	r3, [pc, #524]	; (8004f04 <USB_EPStartXfer+0x2dc>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d08:	691a      	ldr	r2, [r3, #16]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	6959      	ldr	r1, [r3, #20]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	440b      	add	r3, r1
 8004d14:	1e59      	subs	r1, r3, #1
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d1e:	04d9      	lsls	r1, r3, #19
 8004d20:	4b7a      	ldr	r3, [pc, #488]	; (8004f0c <USB_EPStartXfer+0x2e4>)
 8004d22:	400b      	ands	r3, r1
 8004d24:	69b9      	ldr	r1, [r7, #24]
 8004d26:	0148      	lsls	r0, r1, #5
 8004d28:	69f9      	ldr	r1, [r7, #28]
 8004d2a:	4401      	add	r1, r0
 8004d2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d30:	4313      	orrs	r3, r2
 8004d32:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d4a:	69b9      	ldr	r1, [r7, #24]
 8004d4c:	0148      	lsls	r0, r1, #5
 8004d4e:	69f9      	ldr	r1, [r7, #28]
 8004d50:	4401      	add	r1, r0
 8004d52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d56:	4313      	orrs	r3, r2
 8004d58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	78db      	ldrb	r3, [r3, #3]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d11f      	bne.n	8004da2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	0151      	lsls	r1, r2, #5
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	440a      	add	r2, r1
 8004d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004d80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	0151      	lsls	r1, r2, #5
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	440a      	add	r2, r1
 8004d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004da0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004da2:	79fb      	ldrb	r3, [r7, #7]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d14b      	bne.n	8004e40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d009      	beq.n	8004dc4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	78db      	ldrb	r3, [r3, #3]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d128      	bne.n	8004e1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d110      	bne.n	8004dfe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	0151      	lsls	r1, r2, #5
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	440a      	add	r2, r1
 8004df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dfa:	6013      	str	r3, [r2, #0]
 8004dfc:	e00f      	b.n	8004e1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	0151      	lsls	r1, r2, #5
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	440a      	add	r2, r1
 8004e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	0151      	lsls	r1, r2, #5
 8004e30:	69fa      	ldr	r2, [r7, #28]
 8004e32:	440a      	add	r2, r1
 8004e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	e133      	b.n	80050a8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	0151      	lsls	r1, r2, #5
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	440a      	add	r2, r1
 8004e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	78db      	ldrb	r3, [r3, #3]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d015      	beq.n	8004e94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 811b 	beq.w	80050a8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	2101      	movs	r1, #1
 8004e84:	fa01 f303 	lsl.w	r3, r1, r3
 8004e88:	69f9      	ldr	r1, [r7, #28]
 8004e8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	634b      	str	r3, [r1, #52]	; 0x34
 8004e92:	e109      	b.n	80050a8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d110      	bne.n	8004ec6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	0151      	lsls	r1, r2, #5
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	440a      	add	r2, r1
 8004eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ebe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	e00f      	b.n	8004ee6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	0151      	lsls	r1, r2, #5
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	440a      	add	r2, r1
 8004edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	68d9      	ldr	r1, [r3, #12]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	781a      	ldrb	r2, [r3, #0]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	b298      	uxth	r0, r3
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	4603      	mov	r3, r0
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 fa38 	bl	8005370 <USB_WritePacket>
 8004f00:	e0d2      	b.n	80050a8 <USB_EPStartXfer+0x480>
 8004f02:	bf00      	nop
 8004f04:	e007ffff 	.word	0xe007ffff
 8004f08:	fff80000 	.word	0xfff80000
 8004f0c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	0159      	lsls	r1, r3, #5
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	440b      	add	r3, r1
 8004f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4b61      	ldr	r3, [pc, #388]	; (80050b4 <USB_EPStartXfer+0x48c>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	0159      	lsls	r1, r3, #5
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	440b      	add	r3, r1
 8004f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4b5a      	ldr	r3, [pc, #360]	; (80050b8 <USB_EPStartXfer+0x490>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d123      	bne.n	8004fa4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f72:	69b9      	ldr	r1, [r7, #24]
 8004f74:	0148      	lsls	r0, r1, #5
 8004f76:	69f9      	ldr	r1, [r7, #28]
 8004f78:	4401      	add	r1, r0
 8004f7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fa0:	6113      	str	r3, [r2, #16]
 8004fa2:	e033      	b.n	800500c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	695a      	ldr	r2, [r3, #20]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	4413      	add	r3, r2
 8004fae:	1e5a      	subs	r2, r3, #1
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	8afb      	ldrh	r3, [r7, #22]
 8004fca:	04d9      	lsls	r1, r3, #19
 8004fcc:	4b3b      	ldr	r3, [pc, #236]	; (80050bc <USB_EPStartXfer+0x494>)
 8004fce:	400b      	ands	r3, r1
 8004fd0:	69b9      	ldr	r1, [r7, #24]
 8004fd2:	0148      	lsls	r0, r1, #5
 8004fd4:	69f9      	ldr	r1, [r7, #28]
 8004fd6:	4401      	add	r1, r0
 8004fd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	8af9      	ldrh	r1, [r7, #22]
 8004ff4:	fb01 f303 	mul.w	r3, r1, r3
 8004ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ffc:	69b9      	ldr	r1, [r7, #24]
 8004ffe:	0148      	lsls	r0, r1, #5
 8005000:	69f9      	ldr	r1, [r7, #28]
 8005002:	4401      	add	r1, r0
 8005004:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005008:	4313      	orrs	r3, r2
 800500a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d10d      	bne.n	800502e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	68d9      	ldr	r1, [r3, #12]
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502a:	460a      	mov	r2, r1
 800502c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	78db      	ldrb	r3, [r3, #3]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d128      	bne.n	8005088 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005042:	2b00      	cmp	r3, #0
 8005044:	d110      	bne.n	8005068 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	0151      	lsls	r1, r2, #5
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	440a      	add	r2, r1
 800505c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005060:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	e00f      	b.n	8005088 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	0151      	lsls	r1, r2, #5
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	440a      	add	r2, r1
 800507e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005086:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	0151      	lsls	r1, r2, #5
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	440a      	add	r2, r1
 800509e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3720      	adds	r7, #32
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	fff80000 	.word	0xfff80000
 80050b8:	e007ffff 	.word	0xe007ffff
 80050bc:	1ff80000 	.word	0x1ff80000

080050c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	4613      	mov	r3, r2
 80050cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	785b      	ldrb	r3, [r3, #1]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	f040 80cd 	bne.w	800527c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d132      	bne.n	8005150 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	0159      	lsls	r1, r3, #5
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	440b      	add	r3, r1
 8005100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005104:	4619      	mov	r1, r3
 8005106:	4b98      	ldr	r3, [pc, #608]	; (8005368 <USB_EP0StartXfer+0x2a8>)
 8005108:	4013      	ands	r3, r2
 800510a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	0151      	lsls	r1, r2, #5
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	440a      	add	r2, r1
 8005122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005126:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800512a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	0159      	lsls	r1, r3, #5
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	440b      	add	r3, r1
 8005142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005146:	4619      	mov	r1, r3
 8005148:	4b88      	ldr	r3, [pc, #544]	; (800536c <USB_EP0StartXfer+0x2ac>)
 800514a:	4013      	ands	r3, r2
 800514c:	610b      	str	r3, [r1, #16]
 800514e:	e04e      	b.n	80051ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	0159      	lsls	r1, r3, #5
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	440b      	add	r3, r1
 8005166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516a:	4619      	mov	r1, r3
 800516c:	4b7f      	ldr	r3, [pc, #508]	; (800536c <USB_EP0StartXfer+0x2ac>)
 800516e:	4013      	ands	r3, r2
 8005170:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	0159      	lsls	r1, r3, #5
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	440b      	add	r3, r1
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	4619      	mov	r1, r3
 800518e:	4b76      	ldr	r3, [pc, #472]	; (8005368 <USB_EP0StartXfer+0x2a8>)
 8005190:	4013      	ands	r3, r2
 8005192:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	695a      	ldr	r2, [r3, #20]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	429a      	cmp	r2, r3
 800519e:	d903      	bls.n	80051a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	0151      	lsls	r1, r2, #5
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	440a      	add	r2, r1
 80051be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051de:	6939      	ldr	r1, [r7, #16]
 80051e0:	0148      	lsls	r0, r1, #5
 80051e2:	6979      	ldr	r1, [r7, #20]
 80051e4:	4401      	add	r1, r0
 80051e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051ea:	4313      	orrs	r3, r2
 80051ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051ee:	79fb      	ldrb	r3, [r7, #7]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d11e      	bne.n	8005232 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d009      	beq.n	8005210 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	461a      	mov	r2, r3
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	0151      	lsls	r1, r2, #5
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	440a      	add	r2, r1
 8005226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	e092      	b.n	8005358 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	0151      	lsls	r1, r2, #5
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	440a      	add	r2, r1
 8005248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005250:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d07e      	beq.n	8005358 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	2101      	movs	r1, #1
 800526c:	fa01 f303 	lsl.w	r3, r1, r3
 8005270:	6979      	ldr	r1, [r7, #20]
 8005272:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005276:	4313      	orrs	r3, r2
 8005278:	634b      	str	r3, [r1, #52]	; 0x34
 800527a:	e06d      	b.n	8005358 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	691a      	ldr	r2, [r3, #16]
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	0159      	lsls	r1, r3, #5
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	440b      	add	r3, r1
 8005292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005296:	4619      	mov	r1, r3
 8005298:	4b34      	ldr	r3, [pc, #208]	; (800536c <USB_EP0StartXfer+0x2ac>)
 800529a:	4013      	ands	r3, r2
 800529c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	0159      	lsls	r1, r3, #5
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	440b      	add	r3, r1
 80052b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b8:	4619      	mov	r1, r3
 80052ba:	4b2b      	ldr	r3, [pc, #172]	; (8005368 <USB_EP0StartXfer+0x2a8>)
 80052bc:	4013      	ands	r3, r2
 80052be:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fc:	691a      	ldr	r2, [r3, #16]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005306:	6939      	ldr	r1, [r7, #16]
 8005308:	0148      	lsls	r0, r1, #5
 800530a:	6979      	ldr	r1, [r7, #20]
 800530c:	4401      	add	r1, r0
 800530e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005312:	4313      	orrs	r3, r2
 8005314:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005316:	79fb      	ldrb	r3, [r7, #7]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d10d      	bne.n	8005338 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d009      	beq.n	8005338 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	68d9      	ldr	r1, [r3, #12]
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005334:	460a      	mov	r2, r1
 8005336:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	0151      	lsls	r1, r2, #5
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	440a      	add	r2, r1
 800534e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005352:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005356:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	e007ffff 	.word	0xe007ffff
 800536c:	fff80000 	.word	0xfff80000

08005370 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005370:	b480      	push	{r7}
 8005372:	b089      	sub	sp, #36	; 0x24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	4611      	mov	r1, r2
 800537c:	461a      	mov	r2, r3
 800537e:	460b      	mov	r3, r1
 8005380:	71fb      	strb	r3, [r7, #7]
 8005382:	4613      	mov	r3, r2
 8005384:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800538e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005392:	2b00      	cmp	r3, #0
 8005394:	d11a      	bne.n	80053cc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005396:	88bb      	ldrh	r3, [r7, #4]
 8005398:	3303      	adds	r3, #3
 800539a:	089b      	lsrs	r3, r3, #2
 800539c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800539e:	2300      	movs	r3, #0
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	e00f      	b.n	80053c4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	031a      	lsls	r2, r3, #12
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b0:	461a      	mov	r2, r3
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	3304      	adds	r3, #4
 80053bc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	3301      	adds	r3, #1
 80053c2:	61bb      	str	r3, [r7, #24]
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d3eb      	bcc.n	80053a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3724      	adds	r7, #36	; 0x24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053da:	b480      	push	{r7}
 80053dc:	b089      	sub	sp, #36	; 0x24
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	4613      	mov	r3, r2
 80053e6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80053f0:	88fb      	ldrh	r3, [r7, #6]
 80053f2:	3303      	adds	r3, #3
 80053f4:	089b      	lsrs	r3, r3, #2
 80053f6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80053f8:	2300      	movs	r3, #0
 80053fa:	61bb      	str	r3, [r7, #24]
 80053fc:	e00b      	b.n	8005416 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	601a      	str	r2, [r3, #0]
    pDest++;
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	3304      	adds	r3, #4
 800540e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	3301      	adds	r3, #1
 8005414:	61bb      	str	r3, [r7, #24]
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	429a      	cmp	r2, r3
 800541c:	d3ef      	bcc.n	80053fe <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800541e:	69fb      	ldr	r3, [r7, #28]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3724      	adds	r7, #36	; 0x24
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	785b      	ldrb	r3, [r3, #1]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d12c      	bne.n	80054a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	db12      	blt.n	8005480 <USB_EPSetStall+0x54>
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00f      	beq.n	8005480 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	440a      	add	r2, r1
 8005476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800547a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800547e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	440a      	add	r2, r1
 8005496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800549a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	e02b      	b.n	80054fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	db12      	blt.n	80054da <USB_EPSetStall+0xae>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00f      	beq.n	80054da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	785b      	ldrb	r3, [r3, #1]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d128      	bne.n	8005576 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005542:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	78db      	ldrb	r3, [r3, #3]
 8005548:	2b03      	cmp	r3, #3
 800554a:	d003      	beq.n	8005554 <USB_EPClearStall+0x4c>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	78db      	ldrb	r3, [r3, #3]
 8005550:	2b02      	cmp	r3, #2
 8005552:	d138      	bne.n	80055c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	440a      	add	r2, r1
 800556a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	e027      	b.n	80055c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	0151      	lsls	r1, r2, #5
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	440a      	add	r2, r1
 800558c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005590:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005594:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	78db      	ldrb	r3, [r3, #3]
 800559a:	2b03      	cmp	r3, #3
 800559c:	d003      	beq.n	80055a6 <USB_EPClearStall+0x9e>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	78db      	ldrb	r3, [r3, #3]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d10f      	bne.n	80055c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80055f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005608:	68f9      	ldr	r1, [r7, #12]
 800560a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800560e:	4313      	orrs	r3, r2
 8005610:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800563a:	f023 0303 	bic.w	r3, r3, #3
 800563e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800564e:	f023 0302 	bic.w	r3, r3, #2
 8005652:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005662:	b480      	push	{r7}
 8005664:	b085      	sub	sp, #20
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800567c:	f023 0303 	bic.w	r3, r3, #3
 8005680:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005690:	f043 0302 	orr.w	r3, r3, #2
 8005694:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4013      	ands	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056bc:	68fb      	ldr	r3, [r7, #12]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b085      	sub	sp, #20
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	4013      	ands	r3, r2
 80056ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	0c1b      	lsrs	r3, r3, #16
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056fe:	b480      	push	{r7}
 8005700:	b085      	sub	sp, #20
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	4013      	ands	r3, r2
 8005720:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	b29b      	uxth	r3, r3
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005732:	b480      	push	{r7}
 8005734:	b085      	sub	sp, #20
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	460b      	mov	r3, r1
 800573c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005742:	78fb      	ldrb	r3, [r7, #3]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	4013      	ands	r3, r2
 800575e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005760:	68bb      	ldr	r3, [r7, #8]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800576e:	b480      	push	{r7}
 8005770:	b087      	sub	sp, #28
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	460b      	mov	r3, r1
 8005778:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005790:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005792:	78fb      	ldrb	r3, [r7, #3]
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	fa22 f303 	lsr.w	r3, r2, r3
 800579e:	01db      	lsls	r3, r3, #7
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80057a8:	78fb      	ldrb	r3, [r7, #3]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4013      	ands	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057bc:	68bb      	ldr	r3, [r7, #8]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f003 0301 	and.w	r3, r3, #1
}
 80057da:	4618      	mov	r0, r3
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
	...

080057e8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005802:	4619      	mov	r1, r3
 8005804:	4b09      	ldr	r3, [pc, #36]	; (800582c <USB_ActivateSetup+0x44>)
 8005806:	4013      	ands	r3, r2
 8005808:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800581c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	fffff800 	.word	0xfffff800

08005830 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	460b      	mov	r3, r1
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	333c      	adds	r3, #60	; 0x3c
 8005846:	3304      	adds	r3, #4
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	4a26      	ldr	r2, [pc, #152]	; (80058e8 <USB_EP0_OutStart+0xb8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d90a      	bls.n	800586a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005860:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005864:	d101      	bne.n	800586a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	e037      	b.n	80058da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005870:	461a      	mov	r2, r3
 8005872:	2300      	movs	r3, #0
 8005874:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005884:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005888:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005898:	f043 0318 	orr.w	r3, r3, #24
 800589c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80058b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80058b2:	7afb      	ldrb	r3, [r7, #11]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d10f      	bne.n	80058d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058be:	461a      	mov	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80058d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	4f54300a 	.word	0x4f54300a

080058ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3301      	adds	r3, #1
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4a13      	ldr	r2, [pc, #76]	; (8005950 <USB_CoreReset+0x64>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d901      	bls.n	800590a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e01b      	b.n	8005942 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	daf2      	bge.n	80058f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f043 0201 	orr.w	r2, r3, #1
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3301      	adds	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4a09      	ldr	r2, [pc, #36]	; (8005950 <USB_CoreReset+0x64>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d901      	bls.n	8005934 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e006      	b.n	8005942 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b01      	cmp	r3, #1
 800593e:	d0f0      	beq.n	8005922 <USB_CoreReset+0x36>

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	00030d40 	.word	0x00030d40

08005954 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005960:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005964:	f005 fdf0 	bl	800b548 <malloc>
 8005968:	4603      	mov	r3, r0
 800596a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d105      	bne.n	800597e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800597a:	2302      	movs	r3, #2
 800597c:	e066      	b.n	8005a4c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	7c1b      	ldrb	r3, [r3, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d119      	bne.n	80059c2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800598e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005992:	2202      	movs	r2, #2
 8005994:	2181      	movs	r1, #129	; 0x81
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f005 f9df 	bl	800ad5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059a6:	2202      	movs	r2, #2
 80059a8:	2101      	movs	r1, #1
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f005 f9d5 	bl	800ad5a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2210      	movs	r2, #16
 80059bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80059c0:	e016      	b.n	80059f0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059c2:	2340      	movs	r3, #64	; 0x40
 80059c4:	2202      	movs	r2, #2
 80059c6:	2181      	movs	r1, #129	; 0x81
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f005 f9c6 	bl	800ad5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059d4:	2340      	movs	r3, #64	; 0x40
 80059d6:	2202      	movs	r2, #2
 80059d8:	2101      	movs	r1, #1
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f005 f9bd 	bl	800ad5a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2210      	movs	r2, #16
 80059ec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059f0:	2308      	movs	r3, #8
 80059f2:	2203      	movs	r2, #3
 80059f4:	2182      	movs	r1, #130	; 0x82
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f005 f9af 	bl	800ad5a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	7c1b      	ldrb	r3, [r3, #16]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d109      	bne.n	8005a3a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a30:	2101      	movs	r1, #1
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f005 fa80 	bl	800af38 <USBD_LL_PrepareReceive>
 8005a38:	e007      	b.n	8005a4a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a40:	2340      	movs	r3, #64	; 0x40
 8005a42:	2101      	movs	r1, #1
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f005 fa77 	bl	800af38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005a64:	2181      	movs	r1, #129	; 0x81
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f005 f99d 	bl	800ada6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005a72:	2101      	movs	r1, #1
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f005 f996 	bl	800ada6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005a82:	2182      	movs	r1, #130	; 0x82
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f005 f98e 	bl	800ada6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00e      	beq.n	8005ac2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f005 fd4f 	bl	800b558 <free>
    pdev->pClassData = NULL;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005adc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d03a      	beq.n	8005b6c <USBD_CDC_Setup+0xa0>
 8005af6:	2b20      	cmp	r3, #32
 8005af8:	f040 8097 	bne.w	8005c2a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	88db      	ldrh	r3, [r3, #6]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d029      	beq.n	8005b58 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	b25b      	sxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	da11      	bge.n	8005b32 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005b1a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	88d2      	ldrh	r2, [r2, #6]
 8005b20:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005b22:	6939      	ldr	r1, [r7, #16]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	88db      	ldrh	r3, [r3, #6]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f001 faa6 	bl	800707c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005b30:	e082      	b.n	8005c38 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	785a      	ldrb	r2, [r3, #1]
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	88db      	ldrh	r3, [r3, #6]
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005b48:	6939      	ldr	r1, [r7, #16]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	88db      	ldrh	r3, [r3, #6]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 fabf 	bl	80070d4 <USBD_CtlPrepareRx>
    break;
 8005b56:	e06f      	b.n	8005c38 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	7850      	ldrb	r0, [r2, #1]
 8005b64:	2200      	movs	r2, #0
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	4798      	blx	r3
    break;
 8005b6a:	e065      	b.n	8005c38 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	785b      	ldrb	r3, [r3, #1]
 8005b70:	2b0b      	cmp	r3, #11
 8005b72:	d84f      	bhi.n	8005c14 <USBD_CDC_Setup+0x148>
 8005b74:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <USBD_CDC_Setup+0xb0>)
 8005b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7a:	bf00      	nop
 8005b7c:	08005bad 	.word	0x08005bad
 8005b80:	08005c23 	.word	0x08005c23
 8005b84:	08005c15 	.word	0x08005c15
 8005b88:	08005c15 	.word	0x08005c15
 8005b8c:	08005c15 	.word	0x08005c15
 8005b90:	08005c15 	.word	0x08005c15
 8005b94:	08005c15 	.word	0x08005c15
 8005b98:	08005c15 	.word	0x08005c15
 8005b9c:	08005c15 	.word	0x08005c15
 8005ba0:	08005c15 	.word	0x08005c15
 8005ba4:	08005bd5 	.word	0x08005bd5
 8005ba8:	08005bfd 	.word	0x08005bfd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d107      	bne.n	8005bc6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005bb6:	f107 030c 	add.w	r3, r7, #12
 8005bba:	2202      	movs	r2, #2
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f001 fa5c 	bl	800707c <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005bc4:	e030      	b.n	8005c28 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005bc6:	6839      	ldr	r1, [r7, #0]
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f001 f9e6 	bl	8006f9a <USBD_CtlError>
        ret = USBD_FAIL;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8005bd2:	e029      	b.n	8005c28 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d107      	bne.n	8005bee <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005bde:	f107 030f 	add.w	r3, r7, #15
 8005be2:	2201      	movs	r2, #1
 8005be4:	4619      	mov	r1, r3
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f001 fa48 	bl	800707c <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005bec:	e01c      	b.n	8005c28 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f001 f9d2 	bl	8006f9a <USBD_CtlError>
        ret = USBD_FAIL;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8005bfa:	e015      	b.n	8005c28 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d00f      	beq.n	8005c26 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005c06:	6839      	ldr	r1, [r7, #0]
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f001 f9c6 	bl	8006f9a <USBD_CtlError>
        ret = USBD_FAIL;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005c12:	e008      	b.n	8005c26 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005c14:	6839      	ldr	r1, [r7, #0]
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f001 f9bf 	bl	8006f9a <USBD_CtlError>
      ret = USBD_FAIL;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c20:	e002      	b.n	8005c28 <USBD_CDC_Setup+0x15c>
      break;
 8005c22:	bf00      	nop
 8005c24:	e008      	b.n	8005c38 <USBD_CDC_Setup+0x16c>
      break;
 8005c26:	bf00      	nop
    }
    break;
 8005c28:	e006      	b.n	8005c38 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005c2a:	6839      	ldr	r1, [r7, #0]
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f001 f9b4 	bl	8006f9a <USBD_CtlError>
    ret = USBD_FAIL;
 8005c32:	2303      	movs	r3, #3
 8005c34:	75fb      	strb	r3, [r7, #23]
    break;
 8005c36:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop

08005c44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005c56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e049      	b.n	8005cfa <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005c6e:	78fa      	ldrb	r2, [r7, #3]
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	440b      	add	r3, r1
 8005c7c:	3318      	adds	r3, #24
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d029      	beq.n	8005cd8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c84:	78fa      	ldrb	r2, [r7, #3]
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	440b      	add	r3, r1
 8005c92:	3318      	adds	r3, #24
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	78f9      	ldrb	r1, [r7, #3]
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	1a5b      	subs	r3, r3, r1
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4403      	add	r3, r0
 8005ca4:	3344      	adds	r3, #68	; 0x44
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	fbb2 f1f3 	udiv	r1, r2, r3
 8005cac:	fb03 f301 	mul.w	r3, r3, r1
 8005cb0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d110      	bne.n	8005cd8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005cb6:	78fa      	ldrb	r2, [r7, #3]
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	3318      	adds	r3, #24
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005cca:	78f9      	ldrb	r1, [r7, #3]
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2200      	movs	r2, #0
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f005 f910 	bl	800aef6 <USBD_LL_Transmit>
 8005cd6:	e00f      	b.n	8005cf8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005cf4:	78fa      	ldrb	r2, [r7, #3]
 8005cf6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d14:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e015      	b.n	8005d50 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	4619      	mov	r1, r3
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f005 f926 	bl	800af7a <USBD_LL_GetRxDataSize>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d4a:	4611      	mov	r1, r2
 8005d4c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d66:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d015      	beq.n	8005d9e <USBD_CDC_EP0_RxReady+0x46>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d78:	2bff      	cmp	r3, #255	; 0xff
 8005d7a:	d010      	beq.n	8005d9e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005d8a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d92:	b292      	uxth	r2, r2
 8005d94:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	22ff      	movs	r2, #255	; 0xff
 8005d9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2243      	movs	r2, #67	; 0x43
 8005db4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005db6:	4b03      	ldr	r3, [pc, #12]	; (8005dc4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	20000090 	.word	0x20000090

08005dc8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2243      	movs	r2, #67	; 0x43
 8005dd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005dd6:	4b03      	ldr	r3, [pc, #12]	; (8005de4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	2000004c 	.word	0x2000004c

08005de8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2243      	movs	r2, #67	; 0x43
 8005df4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005df6:	4b03      	ldr	r3, [pc, #12]	; (8005e04 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	200000d4 	.word	0x200000d4

08005e08 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	220a      	movs	r2, #10
 8005e14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e16:	4b03      	ldr	r3, [pc, #12]	; (8005e24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	20000008 	.word	0x20000008

08005e28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e004      	b.n	8005e46 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b087      	sub	sp, #28
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e64:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e94:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e016      	b.n	8005ef8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	7c1b      	ldrb	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d109      	bne.n	8005ee6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005edc:	2101      	movs	r1, #1
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f005 f82a 	bl	800af38 <USBD_LL_PrepareReceive>
 8005ee4:	e007      	b.n	8005ef6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005eec:	2340      	movs	r3, #64	; 0x40
 8005eee:	2101      	movs	r1, #1
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f005 f821 	bl	800af38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e025      	b.n	8005f64 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	79fa      	ldrb	r2, [r7, #7]
 8005f56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f004 fe97 	bl	800ac8c <USBD_LL_Init>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e010      	b.n	8005fa6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f94:	f107 020e 	add.w	r2, r7, #14
 8005f98:	4610      	mov	r0, r2
 8005f9a:	4798      	blx	r3
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f004 feb4 	bl	800ad24 <USBD_LL_Start>
 8005fbc:	4603      	mov	r3, r0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d009      	beq.n	800600a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	78fa      	ldrb	r2, [r7, #3]
 8006000:	4611      	mov	r1, r2
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	4798      	blx	r3
 8006006:	4603      	mov	r3, r0
 8006008:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800600a:	7bfb      	ldrb	r3, [r7, #15]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006026:	2b00      	cmp	r3, #0
 8006028:	d007      	beq.n	800603a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	78fa      	ldrb	r2, [r7, #3]
 8006034:	4611      	mov	r1, r2
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	4798      	blx	r3
  }

  return USBD_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	4618      	mov	r0, r3
 8006058:	f000 ff65 	bl	8006f26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800606a:	461a      	mov	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006078:	f003 031f 	and.w	r3, r3, #31
 800607c:	2b02      	cmp	r3, #2
 800607e:	d01a      	beq.n	80060b6 <USBD_LL_SetupStage+0x72>
 8006080:	2b02      	cmp	r3, #2
 8006082:	d822      	bhi.n	80060ca <USBD_LL_SetupStage+0x86>
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <USBD_LL_SetupStage+0x4a>
 8006088:	2b01      	cmp	r3, #1
 800608a:	d00a      	beq.n	80060a2 <USBD_LL_SetupStage+0x5e>
 800608c:	e01d      	b.n	80060ca <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fa18 	bl	80064cc <USBD_StdDevReq>
 800609c:	4603      	mov	r3, r0
 800609e:	73fb      	strb	r3, [r7, #15]
      break;
 80060a0:	e020      	b.n	80060e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fa7c 	bl	80065a8 <USBD_StdItfReq>
 80060b0:	4603      	mov	r3, r0
 80060b2:	73fb      	strb	r3, [r7, #15]
      break;
 80060b4:	e016      	b.n	80060e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 faba 	bl	8006638 <USBD_StdEPReq>
 80060c4:	4603      	mov	r3, r0
 80060c6:	73fb      	strb	r3, [r7, #15]
      break;
 80060c8:	e00c      	b.n	80060e4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	4619      	mov	r1, r3
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f004 fe83 	bl	800ade4 <USBD_LL_StallEP>
 80060de:	4603      	mov	r3, r0
 80060e0:	73fb      	strb	r3, [r7, #15]
      break;
 80060e2:	bf00      	nop
  }

  return ret;
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b086      	sub	sp, #24
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	460b      	mov	r3, r1
 80060f8:	607a      	str	r2, [r7, #4]
 80060fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80060fc:	7afb      	ldrb	r3, [r7, #11]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d137      	bne.n	8006172 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006108:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006110:	2b03      	cmp	r3, #3
 8006112:	d14a      	bne.n	80061aa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	429a      	cmp	r2, r3
 800611e:	d913      	bls.n	8006148 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	1ad2      	subs	r2, r2, r3
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	4293      	cmp	r3, r2
 8006138:	bf28      	it	cs
 800613a:	4613      	movcs	r3, r2
 800613c:	461a      	mov	r2, r3
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 ffe4 	bl	800710e <USBD_CtlContinueRx>
 8006146:	e030      	b.n	80061aa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00a      	beq.n	800616a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800615a:	2b03      	cmp	r3, #3
 800615c:	d105      	bne.n	800616a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 ffe0 	bl	8007130 <USBD_CtlSendStatus>
 8006170:	e01b      	b.n	80061aa <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d013      	beq.n	80061a6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006184:	2b03      	cmp	r3, #3
 8006186:	d10e      	bne.n	80061a6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	7afa      	ldrb	r2, [r7, #11]
 8006192:	4611      	mov	r1, r2
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	4798      	blx	r3
 8006198:	4603      	mov	r3, r0
 800619a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800619c:	7dfb      	ldrb	r3, [r7, #23]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80061a2:	7dfb      	ldrb	r3, [r7, #23]
 80061a4:	e002      	b.n	80061ac <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e000      	b.n	80061ac <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	460b      	mov	r3, r1
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80061c2:	7afb      	ldrb	r3, [r7, #11]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d16a      	bne.n	800629e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3314      	adds	r3, #20
 80061cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d155      	bne.n	8006284 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d914      	bls.n	800620e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	1ad2      	subs	r2, r2, r3
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	461a      	mov	r2, r3
 80061f8:	6879      	ldr	r1, [r7, #4]
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 ff59 	bl	80070b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006200:	2300      	movs	r3, #0
 8006202:	2200      	movs	r2, #0
 8006204:	2100      	movs	r1, #0
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f004 fe96 	bl	800af38 <USBD_LL_PrepareReceive>
 800620c:	e03a      	b.n	8006284 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	429a      	cmp	r2, r3
 8006218:	d11c      	bne.n	8006254 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006222:	429a      	cmp	r2, r3
 8006224:	d316      	bcc.n	8006254 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006230:	429a      	cmp	r2, r3
 8006232:	d20f      	bcs.n	8006254 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006234:	2200      	movs	r2, #0
 8006236:	2100      	movs	r1, #0
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 ff3a 	bl	80070b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006246:	2300      	movs	r3, #0
 8006248:	2200      	movs	r2, #0
 800624a:	2100      	movs	r1, #0
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f004 fe73 	bl	800af38 <USBD_LL_PrepareReceive>
 8006252:	e017      	b.n	8006284 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006266:	2b03      	cmp	r3, #3
 8006268:	d105      	bne.n	8006276 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006276:	2180      	movs	r1, #128	; 0x80
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f004 fdb3 	bl	800ade4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 ff69 	bl	8007156 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800628a:	2b01      	cmp	r3, #1
 800628c:	d123      	bne.n	80062d6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f7ff fe99 	bl	8005fc6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800629c:	e01b      	b.n	80062d6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d013      	beq.n	80062d2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d10e      	bne.n	80062d2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	7afa      	ldrb	r2, [r7, #11]
 80062be:	4611      	mov	r1, r2
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	4798      	blx	r3
 80062c4:	4603      	mov	r3, r0
 80062c6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80062ce:	7dfb      	ldrb	r3, [r7, #23]
 80062d0:	e002      	b.n	80062d8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e000      	b.n	80062d8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800630c:	2b00      	cmp	r3, #0
 800630e:	d009      	beq.n	8006324 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6852      	ldr	r2, [r2, #4]
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	4611      	mov	r1, r2
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006324:	2340      	movs	r3, #64	; 0x40
 8006326:	2200      	movs	r2, #0
 8006328:	2100      	movs	r1, #0
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f004 fd15 	bl	800ad5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2240      	movs	r2, #64	; 0x40
 800633c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006340:	2340      	movs	r3, #64	; 0x40
 8006342:	2200      	movs	r2, #0
 8006344:	2180      	movs	r1, #128	; 0x80
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f004 fd07 	bl	800ad5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2240      	movs	r2, #64	; 0x40
 8006356:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	460b      	mov	r3, r1
 800636c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	78fa      	ldrb	r2, [r7, #3]
 8006372:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2204      	movs	r2, #4
 800639a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d105      	bne.n	80063ca <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d10b      	bne.n	8006402 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d005      	beq.n	8006402 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	460b      	mov	r3, r1
 8006430:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b082      	sub	sp, #8
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646c:	2b00      	cmp	r3, #0
 800646e:	d009      	beq.n	8006484 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6852      	ldr	r2, [r2, #4]
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	4611      	mov	r1, r2
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	4798      	blx	r3
  }

  return USBD_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800648e:	b480      	push	{r7}
 8006490:	b087      	sub	sp, #28
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	3301      	adds	r3, #1
 80064a4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80064ac:	8a3b      	ldrh	r3, [r7, #16]
 80064ae:	021b      	lsls	r3, r3, #8
 80064b0:	b21a      	sxth	r2, r3
 80064b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	b21b      	sxth	r3, r3
 80064ba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80064bc:	89fb      	ldrh	r3, [r7, #14]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
	...

080064cc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	d005      	beq.n	80064f2 <USBD_StdDevReq+0x26>
 80064e6:	2b40      	cmp	r3, #64	; 0x40
 80064e8:	d853      	bhi.n	8006592 <USBD_StdDevReq+0xc6>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00b      	beq.n	8006506 <USBD_StdDevReq+0x3a>
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	d14f      	bne.n	8006592 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	4798      	blx	r3
 8006500:	4603      	mov	r3, r0
 8006502:	73fb      	strb	r3, [r7, #15]
    break;
 8006504:	e04a      	b.n	800659c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	785b      	ldrb	r3, [r3, #1]
 800650a:	2b09      	cmp	r3, #9
 800650c:	d83b      	bhi.n	8006586 <USBD_StdDevReq+0xba>
 800650e:	a201      	add	r2, pc, #4	; (adr r2, 8006514 <USBD_StdDevReq+0x48>)
 8006510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006514:	08006569 	.word	0x08006569
 8006518:	0800657d 	.word	0x0800657d
 800651c:	08006587 	.word	0x08006587
 8006520:	08006573 	.word	0x08006573
 8006524:	08006587 	.word	0x08006587
 8006528:	08006547 	.word	0x08006547
 800652c:	0800653d 	.word	0x0800653d
 8006530:	08006587 	.word	0x08006587
 8006534:	0800655f 	.word	0x0800655f
 8006538:	08006551 	.word	0x08006551
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f9d8 	bl	80068f4 <USBD_GetDescriptor>
      break;
 8006544:	e024      	b.n	8006590 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fb67 	bl	8006c1c <USBD_SetAddress>
      break;
 800654e:	e01f      	b.n	8006590 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fba6 	bl	8006ca4 <USBD_SetConfig>
 8006558:	4603      	mov	r3, r0
 800655a:	73fb      	strb	r3, [r7, #15]
      break;
 800655c:	e018      	b.n	8006590 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fc43 	bl	8006dec <USBD_GetConfig>
      break;
 8006566:	e013      	b.n	8006590 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fc73 	bl	8006e56 <USBD_GetStatus>
      break;
 8006570:	e00e      	b.n	8006590 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fca1 	bl	8006ebc <USBD_SetFeature>
      break;
 800657a:	e009      	b.n	8006590 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fcb0 	bl	8006ee4 <USBD_ClrFeature>
      break;
 8006584:	e004      	b.n	8006590 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fd06 	bl	8006f9a <USBD_CtlError>
      break;
 800658e:	bf00      	nop
    }
    break;
 8006590:	e004      	b.n	800659c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fd00 	bl	8006f9a <USBD_CtlError>
    break;
 800659a:	bf00      	nop
  }

  return ret;
 800659c:	7bfb      	ldrb	r3, [r7, #15]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop

080065a8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065be:	2b40      	cmp	r3, #64	; 0x40
 80065c0:	d005      	beq.n	80065ce <USBD_StdItfReq+0x26>
 80065c2:	2b40      	cmp	r3, #64	; 0x40
 80065c4:	d82e      	bhi.n	8006624 <USBD_StdItfReq+0x7c>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <USBD_StdItfReq+0x26>
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d12a      	bne.n	8006624 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d4:	3b01      	subs	r3, #1
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d81d      	bhi.n	8006616 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	889b      	ldrh	r3, [r3, #4]
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d813      	bhi.n	800660c <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	4798      	blx	r3
 80065f2:	4603      	mov	r3, r0
 80065f4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	88db      	ldrh	r3, [r3, #6]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d110      	bne.n	8006620 <USBD_StdItfReq+0x78>
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10d      	bne.n	8006620 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fd93 	bl	8007130 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800660a:	e009      	b.n	8006620 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fcc3 	bl	8006f9a <USBD_CtlError>
      break;
 8006614:	e004      	b.n	8006620 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8006616:	6839      	ldr	r1, [r7, #0]
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fcbe 	bl	8006f9a <USBD_CtlError>
      break;
 800661e:	e000      	b.n	8006622 <USBD_StdItfReq+0x7a>
      break;
 8006620:	bf00      	nop
    }
    break;
 8006622:	e004      	b.n	800662e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8006624:	6839      	ldr	r1, [r7, #0]
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fcb7 	bl	8006f9a <USBD_CtlError>
    break;
 800662c:	bf00      	nop
  }

  return ret;
 800662e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	889b      	ldrh	r3, [r3, #4]
 800664a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006654:	2b40      	cmp	r3, #64	; 0x40
 8006656:	d007      	beq.n	8006668 <USBD_StdEPReq+0x30>
 8006658:	2b40      	cmp	r3, #64	; 0x40
 800665a:	f200 8140 	bhi.w	80068de <USBD_StdEPReq+0x2a6>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00c      	beq.n	800667c <USBD_StdEPReq+0x44>
 8006662:	2b20      	cmp	r3, #32
 8006664:	f040 813b 	bne.w	80068de <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	4798      	blx	r3
 8006676:	4603      	mov	r3, r0
 8006678:	73fb      	strb	r3, [r7, #15]
    break;
 800667a:	e135      	b.n	80068e8 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	785b      	ldrb	r3, [r3, #1]
 8006680:	2b03      	cmp	r3, #3
 8006682:	d007      	beq.n	8006694 <USBD_StdEPReq+0x5c>
 8006684:	2b03      	cmp	r3, #3
 8006686:	f300 8124 	bgt.w	80068d2 <USBD_StdEPReq+0x29a>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d07b      	beq.n	8006786 <USBD_StdEPReq+0x14e>
 800668e:	2b01      	cmp	r3, #1
 8006690:	d03b      	beq.n	800670a <USBD_StdEPReq+0xd2>
 8006692:	e11e      	b.n	80068d2 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800669a:	2b02      	cmp	r3, #2
 800669c:	d002      	beq.n	80066a4 <USBD_StdEPReq+0x6c>
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d016      	beq.n	80066d0 <USBD_StdEPReq+0x98>
 80066a2:	e02c      	b.n	80066fe <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066a4:	7bbb      	ldrb	r3, [r7, #14]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00d      	beq.n	80066c6 <USBD_StdEPReq+0x8e>
 80066aa:	7bbb      	ldrb	r3, [r7, #14]
 80066ac:	2b80      	cmp	r3, #128	; 0x80
 80066ae:	d00a      	beq.n	80066c6 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f004 fb95 	bl	800ade4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066ba:	2180      	movs	r1, #128	; 0x80
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f004 fb91 	bl	800ade4 <USBD_LL_StallEP>
 80066c2:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80066c4:	e020      	b.n	8006708 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fc66 	bl	8006f9a <USBD_CtlError>
        break;
 80066ce:	e01b      	b.n	8006708 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	885b      	ldrh	r3, [r3, #2]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10e      	bne.n	80066f6 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00b      	beq.n	80066f6 <USBD_StdEPReq+0xbe>
 80066de:	7bbb      	ldrb	r3, [r7, #14]
 80066e0:	2b80      	cmp	r3, #128	; 0x80
 80066e2:	d008      	beq.n	80066f6 <USBD_StdEPReq+0xbe>
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	88db      	ldrh	r3, [r3, #6]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d104      	bne.n	80066f6 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80066ec:	7bbb      	ldrb	r3, [r7, #14]
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f004 fb77 	bl	800ade4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fd1a 	bl	8007130 <USBD_CtlSendStatus>

        break;
 80066fc:	e004      	b.n	8006708 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fc4a 	bl	8006f9a <USBD_CtlError>
        break;
 8006706:	bf00      	nop
      }
      break;
 8006708:	e0e8      	b.n	80068dc <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006710:	2b02      	cmp	r3, #2
 8006712:	d002      	beq.n	800671a <USBD_StdEPReq+0xe2>
 8006714:	2b03      	cmp	r3, #3
 8006716:	d016      	beq.n	8006746 <USBD_StdEPReq+0x10e>
 8006718:	e02e      	b.n	8006778 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800671a:	7bbb      	ldrb	r3, [r7, #14]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00d      	beq.n	800673c <USBD_StdEPReq+0x104>
 8006720:	7bbb      	ldrb	r3, [r7, #14]
 8006722:	2b80      	cmp	r3, #128	; 0x80
 8006724:	d00a      	beq.n	800673c <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006726:	7bbb      	ldrb	r3, [r7, #14]
 8006728:	4619      	mov	r1, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f004 fb5a 	bl	800ade4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006730:	2180      	movs	r1, #128	; 0x80
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f004 fb56 	bl	800ade4 <USBD_LL_StallEP>
 8006738:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800673a:	e023      	b.n	8006784 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fc2b 	bl	8006f9a <USBD_CtlError>
        break;
 8006744:	e01e      	b.n	8006784 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	885b      	ldrh	r3, [r3, #2]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d119      	bne.n	8006782 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800674e:	7bbb      	ldrb	r3, [r7, #14]
 8006750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006754:	2b00      	cmp	r3, #0
 8006756:	d004      	beq.n	8006762 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006758:	7bbb      	ldrb	r3, [r7, #14]
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f004 fb60 	bl	800ae22 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fce4 	bl	8007130 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	4798      	blx	r3
        }
        break;
 8006776:	e004      	b.n	8006782 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fc0d 	bl	8006f9a <USBD_CtlError>
        break;
 8006780:	e000      	b.n	8006784 <USBD_StdEPReq+0x14c>
        break;
 8006782:	bf00      	nop
      }
      break;
 8006784:	e0aa      	b.n	80068dc <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800678c:	2b02      	cmp	r3, #2
 800678e:	d002      	beq.n	8006796 <USBD_StdEPReq+0x15e>
 8006790:	2b03      	cmp	r3, #3
 8006792:	d032      	beq.n	80067fa <USBD_StdEPReq+0x1c2>
 8006794:	e097      	b.n	80068c6 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006796:	7bbb      	ldrb	r3, [r7, #14]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d007      	beq.n	80067ac <USBD_StdEPReq+0x174>
 800679c:	7bbb      	ldrb	r3, [r7, #14]
 800679e:	2b80      	cmp	r3, #128	; 0x80
 80067a0:	d004      	beq.n	80067ac <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fbf8 	bl	8006f9a <USBD_CtlError>
          break;
 80067aa:	e091      	b.n	80068d0 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	da0b      	bge.n	80067cc <USBD_StdEPReq+0x194>
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
 80067b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	3310      	adds	r3, #16
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	4413      	add	r3, r2
 80067c8:	3304      	adds	r3, #4
 80067ca:	e00b      	b.n	80067e4 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 80067cc:	7bbb      	ldrb	r3, [r7, #14]
 80067ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067d2:	4613      	mov	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	4413      	add	r3, r2
 80067e2:	3304      	adds	r3, #4
 80067e4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2202      	movs	r2, #2
 80067f0:	4619      	mov	r1, r3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fc42 	bl	800707c <USBD_CtlSendData>
        break;
 80067f8:	e06a      	b.n	80068d0 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80067fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	da11      	bge.n	8006826 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006802:	7bbb      	ldrb	r3, [r7, #14]
 8006804:	f003 020f 	and.w	r2, r3, #15
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	440b      	add	r3, r1
 8006814:	3324      	adds	r3, #36	; 0x24
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d117      	bne.n	800684c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fbbb 	bl	8006f9a <USBD_CtlError>
            break;
 8006824:	e054      	b.n	80068d0 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	f003 020f 	and.w	r2, r3, #15
 800682c:	6879      	ldr	r1, [r7, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	440b      	add	r3, r1
 8006838:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d104      	bne.n	800684c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8006842:	6839      	ldr	r1, [r7, #0]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fba8 	bl	8006f9a <USBD_CtlError>
            break;
 800684a:	e041      	b.n	80068d0 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800684c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006850:	2b00      	cmp	r3, #0
 8006852:	da0b      	bge.n	800686c <USBD_StdEPReq+0x234>
 8006854:	7bbb      	ldrb	r3, [r7, #14]
 8006856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800685a:	4613      	mov	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	3310      	adds	r3, #16
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	4413      	add	r3, r2
 8006868:	3304      	adds	r3, #4
 800686a:	e00b      	b.n	8006884 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800686c:	7bbb      	ldrb	r3, [r7, #14]
 800686e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006872:	4613      	mov	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	4413      	add	r3, r2
 8006882:	3304      	adds	r3, #4
 8006884:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006886:	7bbb      	ldrb	r3, [r7, #14]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <USBD_StdEPReq+0x25a>
 800688c:	7bbb      	ldrb	r3, [r7, #14]
 800688e:	2b80      	cmp	r3, #128	; 0x80
 8006890:	d103      	bne.n	800689a <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2200      	movs	r2, #0
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	e00e      	b.n	80068b8 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800689a:	7bbb      	ldrb	r3, [r7, #14]
 800689c:	4619      	mov	r1, r3
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f004 fade 	bl	800ae60 <USBD_LL_IsStallEP>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2201      	movs	r2, #1
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	e002      	b.n	80068b8 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	2202      	movs	r2, #2
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fbdc 	bl	800707c <USBD_CtlSendData>
          break;
 80068c4:	e004      	b.n	80068d0 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fb66 	bl	8006f9a <USBD_CtlError>
        break;
 80068ce:	bf00      	nop
      }
      break;
 80068d0:	e004      	b.n	80068dc <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fb60 	bl	8006f9a <USBD_CtlError>
      break;
 80068da:	bf00      	nop
    }
    break;
 80068dc:	e004      	b.n	80068e8 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fb5a 	bl	8006f9a <USBD_CtlError>
    break;
 80068e6:	bf00      	nop
  }

  return ret;
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068fe:	2300      	movs	r3, #0
 8006900:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	885b      	ldrh	r3, [r3, #2]
 800690e:	0a1b      	lsrs	r3, r3, #8
 8006910:	b29b      	uxth	r3, r3
 8006912:	3b01      	subs	r3, #1
 8006914:	2b0e      	cmp	r3, #14
 8006916:	f200 8152 	bhi.w	8006bbe <USBD_GetDescriptor+0x2ca>
 800691a:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <USBD_GetDescriptor+0x2c>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	08006991 	.word	0x08006991
 8006924:	080069a9 	.word	0x080069a9
 8006928:	080069e9 	.word	0x080069e9
 800692c:	08006bbf 	.word	0x08006bbf
 8006930:	08006bbf 	.word	0x08006bbf
 8006934:	08006b5f 	.word	0x08006b5f
 8006938:	08006b8b 	.word	0x08006b8b
 800693c:	08006bbf 	.word	0x08006bbf
 8006940:	08006bbf 	.word	0x08006bbf
 8006944:	08006bbf 	.word	0x08006bbf
 8006948:	08006bbf 	.word	0x08006bbf
 800694c:	08006bbf 	.word	0x08006bbf
 8006950:	08006bbf 	.word	0x08006bbf
 8006954:	08006bbf 	.word	0x08006bbf
 8006958:	0800695d 	.word	0x0800695d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006962:	69db      	ldr	r3, [r3, #28]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	7c12      	ldrb	r2, [r2, #16]
 8006974:	f107 0108 	add.w	r1, r7, #8
 8006978:	4610      	mov	r0, r2
 800697a:	4798      	blx	r3
 800697c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800697e:	e126      	b.n	8006bce <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fb09 	bl	8006f9a <USBD_CtlError>
      err++;
 8006988:	7afb      	ldrb	r3, [r7, #11]
 800698a:	3301      	adds	r3, #1
 800698c:	72fb      	strb	r3, [r7, #11]
    break;
 800698e:	e11e      	b.n	8006bce <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	7c12      	ldrb	r2, [r2, #16]
 800699c:	f107 0108 	add.w	r1, r7, #8
 80069a0:	4610      	mov	r0, r2
 80069a2:	4798      	blx	r3
 80069a4:	60f8      	str	r0, [r7, #12]
    break;
 80069a6:	e112      	b.n	8006bce <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	7c1b      	ldrb	r3, [r3, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10d      	bne.n	80069cc <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b8:	f107 0208 	add.w	r2, r7, #8
 80069bc:	4610      	mov	r0, r2
 80069be:	4798      	blx	r3
 80069c0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	3301      	adds	r3, #1
 80069c6:	2202      	movs	r2, #2
 80069c8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80069ca:	e100      	b.n	8006bce <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	f107 0208 	add.w	r2, r7, #8
 80069d8:	4610      	mov	r0, r2
 80069da:	4798      	blx	r3
 80069dc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	3301      	adds	r3, #1
 80069e2:	2202      	movs	r2, #2
 80069e4:	701a      	strb	r2, [r3, #0]
    break;
 80069e6:	e0f2      	b.n	8006bce <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	885b      	ldrh	r3, [r3, #2]
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b05      	cmp	r3, #5
 80069f0:	f200 80ac 	bhi.w	8006b4c <USBD_GetDescriptor+0x258>
 80069f4:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <USBD_GetDescriptor+0x108>)
 80069f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fa:	bf00      	nop
 80069fc:	08006a15 	.word	0x08006a15
 8006a00:	08006a49 	.word	0x08006a49
 8006a04:	08006a7d 	.word	0x08006a7d
 8006a08:	08006ab1 	.word	0x08006ab1
 8006a0c:	08006ae5 	.word	0x08006ae5
 8006a10:	08006b19 	.word	0x08006b19
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00b      	beq.n	8006a38 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	7c12      	ldrb	r2, [r2, #16]
 8006a2c:	f107 0108 	add.w	r1, r7, #8
 8006a30:	4610      	mov	r0, r2
 8006a32:	4798      	blx	r3
 8006a34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a36:	e091      	b.n	8006b5c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 faad 	bl	8006f9a <USBD_CtlError>
        err++;
 8006a40:	7afb      	ldrb	r3, [r7, #11]
 8006a42:	3301      	adds	r3, #1
 8006a44:	72fb      	strb	r3, [r7, #11]
      break;
 8006a46:	e089      	b.n	8006b5c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00b      	beq.n	8006a6c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	7c12      	ldrb	r2, [r2, #16]
 8006a60:	f107 0108 	add.w	r1, r7, #8
 8006a64:	4610      	mov	r0, r2
 8006a66:	4798      	blx	r3
 8006a68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a6a:	e077      	b.n	8006b5c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fa93 	bl	8006f9a <USBD_CtlError>
        err++;
 8006a74:	7afb      	ldrb	r3, [r7, #11]
 8006a76:	3301      	adds	r3, #1
 8006a78:	72fb      	strb	r3, [r7, #11]
      break;
 8006a7a:	e06f      	b.n	8006b5c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00b      	beq.n	8006aa0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	7c12      	ldrb	r2, [r2, #16]
 8006a94:	f107 0108 	add.w	r1, r7, #8
 8006a98:	4610      	mov	r0, r2
 8006a9a:	4798      	blx	r3
 8006a9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a9e:	e05d      	b.n	8006b5c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fa79 	bl	8006f9a <USBD_CtlError>
        err++;
 8006aa8:	7afb      	ldrb	r3, [r7, #11]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	72fb      	strb	r3, [r7, #11]
      break;
 8006aae:	e055      	b.n	8006b5c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00b      	beq.n	8006ad4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	7c12      	ldrb	r2, [r2, #16]
 8006ac8:	f107 0108 	add.w	r1, r7, #8
 8006acc:	4610      	mov	r0, r2
 8006ace:	4798      	blx	r3
 8006ad0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ad2:	e043      	b.n	8006b5c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fa5f 	bl	8006f9a <USBD_CtlError>
        err++;
 8006adc:	7afb      	ldrb	r3, [r7, #11]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	72fb      	strb	r3, [r7, #11]
      break;
 8006ae2:	e03b      	b.n	8006b5c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00b      	beq.n	8006b08 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	7c12      	ldrb	r2, [r2, #16]
 8006afc:	f107 0108 	add.w	r1, r7, #8
 8006b00:	4610      	mov	r0, r2
 8006b02:	4798      	blx	r3
 8006b04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b06:	e029      	b.n	8006b5c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fa45 	bl	8006f9a <USBD_CtlError>
        err++;
 8006b10:	7afb      	ldrb	r3, [r7, #11]
 8006b12:	3301      	adds	r3, #1
 8006b14:	72fb      	strb	r3, [r7, #11]
      break;
 8006b16:	e021      	b.n	8006b5c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00b      	beq.n	8006b3c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	7c12      	ldrb	r2, [r2, #16]
 8006b30:	f107 0108 	add.w	r1, r7, #8
 8006b34:	4610      	mov	r0, r2
 8006b36:	4798      	blx	r3
 8006b38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b3a:	e00f      	b.n	8006b5c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fa2b 	bl	8006f9a <USBD_CtlError>
        err++;
 8006b44:	7afb      	ldrb	r3, [r7, #11]
 8006b46:	3301      	adds	r3, #1
 8006b48:	72fb      	strb	r3, [r7, #11]
      break;
 8006b4a:	e007      	b.n	8006b5c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fa23 	bl	8006f9a <USBD_CtlError>
      err++;
 8006b54:	7afb      	ldrb	r3, [r7, #11]
 8006b56:	3301      	adds	r3, #1
 8006b58:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006b5a:	bf00      	nop
    }
    break;
 8006b5c:	e037      	b.n	8006bce <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	7c1b      	ldrb	r3, [r3, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6e:	f107 0208 	add.w	r2, r7, #8
 8006b72:	4610      	mov	r0, r2
 8006b74:	4798      	blx	r3
 8006b76:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006b78:	e029      	b.n	8006bce <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fa0c 	bl	8006f9a <USBD_CtlError>
      err++;
 8006b82:	7afb      	ldrb	r3, [r7, #11]
 8006b84:	3301      	adds	r3, #1
 8006b86:	72fb      	strb	r3, [r7, #11]
    break;
 8006b88:	e021      	b.n	8006bce <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	7c1b      	ldrb	r3, [r3, #16]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10d      	bne.n	8006bae <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9a:	f107 0208 	add.w	r2, r7, #8
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	4798      	blx	r3
 8006ba2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	2207      	movs	r2, #7
 8006baa:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006bac:	e00f      	b.n	8006bce <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f9f2 	bl	8006f9a <USBD_CtlError>
      err++;
 8006bb6:	7afb      	ldrb	r3, [r7, #11]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	72fb      	strb	r3, [r7, #11]
    break;
 8006bbc:	e007      	b.n	8006bce <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f9ea 	bl	8006f9a <USBD_CtlError>
    err++;
 8006bc6:	7afb      	ldrb	r3, [r7, #11]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	72fb      	strb	r3, [r7, #11]
    break;
 8006bcc:	bf00      	nop
  }

  if (err != 0U)
 8006bce:	7afb      	ldrb	r3, [r7, #11]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d11e      	bne.n	8006c12 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	88db      	ldrh	r3, [r3, #6]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d016      	beq.n	8006c0a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8006bdc:	893b      	ldrh	r3, [r7, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00e      	beq.n	8006c00 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	88da      	ldrh	r2, [r3, #6]
 8006be6:	893b      	ldrh	r3, [r7, #8]
 8006be8:	4293      	cmp	r3, r2
 8006bea:	bf28      	it	cs
 8006bec:	4613      	movcs	r3, r2
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006bf2:	893b      	ldrh	r3, [r7, #8]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	68f9      	ldr	r1, [r7, #12]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fa3f 	bl	800707c <USBD_CtlSendData>
 8006bfe:	e009      	b.n	8006c14 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f9c9 	bl	8006f9a <USBD_CtlError>
 8006c08:	e004      	b.n	8006c14 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fa90 	bl	8007130 <USBD_CtlSendStatus>
 8006c10:	e000      	b.n	8006c14 <USBD_GetDescriptor+0x320>
    return;
 8006c12:	bf00      	nop
    }
  }
}
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop

08006c1c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	889b      	ldrh	r3, [r3, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d130      	bne.n	8006c90 <USBD_SetAddress+0x74>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	88db      	ldrh	r3, [r3, #6]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d12c      	bne.n	8006c90 <USBD_SetAddress+0x74>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	885b      	ldrh	r3, [r3, #2]
 8006c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c3c:	d828      	bhi.n	8006c90 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	885b      	ldrh	r3, [r3, #2]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d104      	bne.n	8006c5e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f99f 	bl	8006f9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c5c:	e01d      	b.n	8006c9a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	7bfa      	ldrb	r2, [r7, #15]
 8006c62:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f004 f924 	bl	800aeb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fa5d 	bl	8007130 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c84:	e009      	b.n	8006c9a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8e:	e004      	b.n	8006c9a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f981 	bl	8006f9a <USBD_CtlError>
  }
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
	...

08006ca4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	885b      	ldrh	r3, [r3, #2]
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	4b4b      	ldr	r3, [pc, #300]	; (8006de8 <USBD_SetConfig+0x144>)
 8006cba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006cbc:	4b4a      	ldr	r3, [pc, #296]	; (8006de8 <USBD_SetConfig+0x144>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d905      	bls.n	8006cd0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f967 	bl	8006f9a <USBD_CtlError>
    return USBD_FAIL;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e087      	b.n	8006de0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d002      	beq.n	8006ce0 <USBD_SetConfig+0x3c>
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	d025      	beq.n	8006d2a <USBD_SetConfig+0x86>
 8006cde:	e071      	b.n	8006dc4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006ce0:	4b41      	ldr	r3, [pc, #260]	; (8006de8 <USBD_SetConfig+0x144>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01c      	beq.n	8006d22 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006ce8:	4b3f      	ldr	r3, [pc, #252]	; (8006de8 <USBD_SetConfig+0x144>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	461a      	mov	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006cf2:	4b3d      	ldr	r3, [pc, #244]	; (8006de8 <USBD_SetConfig+0x144>)
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7ff f96f 	bl	8005fdc <USBD_SetClassConfig>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d004      	beq.n	8006d12 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f945 	bl	8006f9a <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006d10:	e065      	b.n	8006dde <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fa0c 	bl	8007130 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2203      	movs	r2, #3
 8006d1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006d20:	e05d      	b.n	8006dde <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fa04 	bl	8007130 <USBD_CtlSendStatus>
    break;
 8006d28:	e059      	b.n	8006dde <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006d2a:	4b2f      	ldr	r3, [pc, #188]	; (8006de8 <USBD_SetConfig+0x144>)
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d112      	bne.n	8006d58 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2202      	movs	r2, #2
 8006d36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006d3a:	4b2b      	ldr	r3, [pc, #172]	; (8006de8 <USBD_SetConfig+0x144>)
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d44:	4b28      	ldr	r3, [pc, #160]	; (8006de8 <USBD_SetConfig+0x144>)
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7ff f962 	bl	8006014 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f9ed 	bl	8007130 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006d56:	e042      	b.n	8006dde <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006d58:	4b23      	ldr	r3, [pc, #140]	; (8006de8 <USBD_SetConfig+0x144>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d02a      	beq.n	8006dbc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7ff f950 	bl	8006014 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006d74:	4b1c      	ldr	r3, [pc, #112]	; (8006de8 <USBD_SetConfig+0x144>)
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d7e:	4b1a      	ldr	r3, [pc, #104]	; (8006de8 <USBD_SetConfig+0x144>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff f929 	bl	8005fdc <USBD_SetClassConfig>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00f      	beq.n	8006db4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f8ff 	bl	8006f9a <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff f935 	bl	8006014 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2202      	movs	r2, #2
 8006dae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006db2:	e014      	b.n	8006dde <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f9bb 	bl	8007130 <USBD_CtlSendStatus>
    break;
 8006dba:	e010      	b.n	8006dde <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f9b7 	bl	8007130 <USBD_CtlSendStatus>
    break;
 8006dc2:	e00c      	b.n	8006dde <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f8e7 	bl	8006f9a <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006dcc:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <USBD_SetConfig+0x144>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff f91e 	bl	8006014 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	73fb      	strb	r3, [r7, #15]
    break;
 8006ddc:	bf00      	nop
  }

  return ret;
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	20000228 	.word	0x20000228

08006dec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	88db      	ldrh	r3, [r3, #6]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d004      	beq.n	8006e08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f8ca 	bl	8006f9a <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006e06:	e022      	b.n	8006e4e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	dc02      	bgt.n	8006e18 <USBD_GetConfig+0x2c>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	dc03      	bgt.n	8006e1e <USBD_GetConfig+0x32>
 8006e16:	e015      	b.n	8006e44 <USBD_GetConfig+0x58>
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d00b      	beq.n	8006e34 <USBD_GetConfig+0x48>
 8006e1c:	e012      	b.n	8006e44 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3308      	adds	r3, #8
 8006e28:	2201      	movs	r2, #1
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f925 	bl	800707c <USBD_CtlSendData>
      break;
 8006e32:	e00c      	b.n	8006e4e <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	3304      	adds	r3, #4
 8006e38:	2201      	movs	r2, #1
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f91d 	bl	800707c <USBD_CtlSendData>
      break;
 8006e42:	e004      	b.n	8006e4e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f8a7 	bl	8006f9a <USBD_CtlError>
      break;
 8006e4c:	bf00      	nop
}
 8006e4e:	bf00      	nop
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b082      	sub	sp, #8
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e66:	3b01      	subs	r3, #1
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d81e      	bhi.n	8006eaa <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	88db      	ldrh	r3, [r3, #6]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d004      	beq.n	8006e7e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f88f 	bl	8006f9a <USBD_CtlError>
      break;
 8006e7c:	e01a      	b.n	8006eb4 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d005      	beq.n	8006e9a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f043 0202 	orr.w	r2, r3, #2
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	330c      	adds	r3, #12
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f8ea 	bl	800707c <USBD_CtlSendData>
    break;
 8006ea8:	e004      	b.n	8006eb4 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f874 	bl	8006f9a <USBD_CtlError>
    break;
 8006eb2:	bf00      	nop
  }
}
 8006eb4:	bf00      	nop
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	885b      	ldrh	r3, [r3, #2]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d106      	bne.n	8006edc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f92a 	bl	8007130 <USBD_CtlSendStatus>
  }
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d80b      	bhi.n	8006f12 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	885b      	ldrh	r3, [r3, #2]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d10c      	bne.n	8006f1c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f910 	bl	8007130 <USBD_CtlSendStatus>
      }
      break;
 8006f10:	e004      	b.n	8006f1c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f840 	bl	8006f9a <USBD_CtlError>
      break;
 8006f1a:	e000      	b.n	8006f1e <USBD_ClrFeature+0x3a>
      break;
 8006f1c:	bf00      	nop
  }
}
 8006f1e:	bf00      	nop
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	781a      	ldrb	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	781a      	ldrb	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7ff fa9c 	bl	800648e <SWAPBYTE>
 8006f56:	4603      	mov	r3, r0
 8006f58:	461a      	mov	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3301      	adds	r3, #1
 8006f62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3301      	adds	r3, #1
 8006f68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f7ff fa8f 	bl	800648e <SWAPBYTE>
 8006f70:	4603      	mov	r3, r0
 8006f72:	461a      	mov	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3301      	adds	r3, #1
 8006f82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f7ff fa82 	bl	800648e <SWAPBYTE>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	80da      	strh	r2, [r3, #6]
}
 8006f92:	bf00      	nop
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fa4:	2180      	movs	r1, #128	; 0x80
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f003 ff1c 	bl	800ade4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006fac:	2100      	movs	r1, #0
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f003 ff18 	bl	800ade4 <USBD_LL_StallEP>
}
 8006fb4:	bf00      	nop
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d036      	beq.n	8007040 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006fd6:	6938      	ldr	r0, [r7, #16]
 8006fd8:	f000 f836 	bl	8007048 <USBD_GetLen>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	3301      	adds	r3, #1
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006fea:	7dfb      	ldrb	r3, [r7, #23]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	4413      	add	r3, r2
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	7812      	ldrb	r2, [r2, #0]
 8006ff4:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ff6:	7dfb      	ldrb	r3, [r7, #23]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	4413      	add	r3, r2
 8007002:	2203      	movs	r2, #3
 8007004:	701a      	strb	r2, [r3, #0]
  idx++;
 8007006:	7dfb      	ldrb	r3, [r7, #23]
 8007008:	3301      	adds	r3, #1
 800700a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800700c:	e013      	b.n	8007036 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	4413      	add	r3, r2
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	7812      	ldrb	r2, [r2, #0]
 8007018:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	3301      	adds	r3, #1
 800701e:	613b      	str	r3, [r7, #16]
    idx++;
 8007020:	7dfb      	ldrb	r3, [r7, #23]
 8007022:	3301      	adds	r3, #1
 8007024:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	4413      	add	r3, r2
 800702c:	2200      	movs	r2, #0
 800702e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007030:	7dfb      	ldrb	r3, [r7, #23]
 8007032:	3301      	adds	r3, #1
 8007034:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e7      	bne.n	800700e <USBD_GetString+0x52>
 800703e:	e000      	b.n	8007042 <USBD_GetString+0x86>
    return;
 8007040:	bf00      	nop
  }
}
 8007042:	3718      	adds	r7, #24
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007058:	e005      	b.n	8007066 <USBD_GetLen+0x1e>
  {
    len++;
 800705a:	7bfb      	ldrb	r3, [r7, #15]
 800705c:	3301      	adds	r3, #1
 800705e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	3301      	adds	r3, #1
 8007064:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1f5      	bne.n	800705a <USBD_GetLen+0x12>
  }

  return len;
 800706e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2202      	movs	r2, #2
 800708c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	2100      	movs	r1, #0
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f003 ff27 	bl	800aef6 <USBD_LL_Transmit>

  return USBD_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	2100      	movs	r1, #0
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f003 ff16 	bl	800aef6 <USBD_LL_Transmit>

  return USBD_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2203      	movs	r2, #3
 80070e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	2100      	movs	r1, #0
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f003 ff1a 	bl	800af38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	2100      	movs	r1, #0
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f003 ff09 	bl	800af38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2204      	movs	r2, #4
 800713c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007140:	2300      	movs	r3, #0
 8007142:	2200      	movs	r2, #0
 8007144:	2100      	movs	r1, #0
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f003 fed5 	bl	800aef6 <USBD_LL_Transmit>

  return USBD_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b082      	sub	sp, #8
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2205      	movs	r2, #5
 8007162:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007166:	2300      	movs	r3, #0
 8007168:	2200      	movs	r2, #0
 800716a:	2100      	movs	r1, #0
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f003 fee3 	bl	800af38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	4613      	mov	r3, r2
 8007188:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800718a:	2301      	movs	r3, #1
 800718c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800718e:	2300      	movs	r3, #0
 8007190:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007192:	4b1f      	ldr	r3, [pc, #124]	; (8007210 <FATFS_LinkDriverEx+0x94>)
 8007194:	7a5b      	ldrb	r3, [r3, #9]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d131      	bne.n	8007200 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800719c:	4b1c      	ldr	r3, [pc, #112]	; (8007210 <FATFS_LinkDriverEx+0x94>)
 800719e:	7a5b      	ldrb	r3, [r3, #9]
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	461a      	mov	r2, r3
 80071a4:	4b1a      	ldr	r3, [pc, #104]	; (8007210 <FATFS_LinkDriverEx+0x94>)
 80071a6:	2100      	movs	r1, #0
 80071a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80071aa:	4b19      	ldr	r3, [pc, #100]	; (8007210 <FATFS_LinkDriverEx+0x94>)
 80071ac:	7a5b      	ldrb	r3, [r3, #9]
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	4a17      	ldr	r2, [pc, #92]	; (8007210 <FATFS_LinkDriverEx+0x94>)
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80071ba:	4b15      	ldr	r3, [pc, #84]	; (8007210 <FATFS_LinkDriverEx+0x94>)
 80071bc:	7a5b      	ldrb	r3, [r3, #9]
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	461a      	mov	r2, r3
 80071c2:	4b13      	ldr	r3, [pc, #76]	; (8007210 <FATFS_LinkDriverEx+0x94>)
 80071c4:	4413      	add	r3, r2
 80071c6:	79fa      	ldrb	r2, [r7, #7]
 80071c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80071ca:	4b11      	ldr	r3, [pc, #68]	; (8007210 <FATFS_LinkDriverEx+0x94>)
 80071cc:	7a5b      	ldrb	r3, [r3, #9]
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	b2d1      	uxtb	r1, r2
 80071d4:	4a0e      	ldr	r2, [pc, #56]	; (8007210 <FATFS_LinkDriverEx+0x94>)
 80071d6:	7251      	strb	r1, [r2, #9]
 80071d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80071da:	7dbb      	ldrb	r3, [r7, #22]
 80071dc:	3330      	adds	r3, #48	; 0x30
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	3301      	adds	r3, #1
 80071e8:	223a      	movs	r2, #58	; 0x3a
 80071ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	3302      	adds	r3, #2
 80071f0:	222f      	movs	r2, #47	; 0x2f
 80071f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	3303      	adds	r3, #3
 80071f8:	2200      	movs	r2, #0
 80071fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007200:	7dfb      	ldrb	r3, [r7, #23]
}
 8007202:	4618      	mov	r0, r3
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	2000022c 	.word	0x2000022c

08007214 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800721e:	2200      	movs	r2, #0
 8007220:	6839      	ldr	r1, [r7, #0]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7ff ffaa 	bl	800717c <FATFS_LinkDriverEx>
 8007228:	4603      	mov	r3, r0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007232:	b480      	push	{r7}
 8007234:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007236:	bf00      	nop
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007246:	f3ef 8305 	mrs	r3, IPSR
 800724a:	60bb      	str	r3, [r7, #8]
  return(result);
 800724c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10f      	bne.n	8007272 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007252:	f3ef 8310 	mrs	r3, PRIMASK
 8007256:	607b      	str	r3, [r7, #4]
  return(result);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d105      	bne.n	800726a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800725e:	f3ef 8311 	mrs	r3, BASEPRI
 8007262:	603b      	str	r3, [r7, #0]
  return(result);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d007      	beq.n	800727a <osKernelInitialize+0x3a>
 800726a:	4b0e      	ldr	r3, [pc, #56]	; (80072a4 <osKernelInitialize+0x64>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b02      	cmp	r3, #2
 8007270:	d103      	bne.n	800727a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007272:	f06f 0305 	mvn.w	r3, #5
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	e00c      	b.n	8007294 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800727a:	4b0a      	ldr	r3, [pc, #40]	; (80072a4 <osKernelInitialize+0x64>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d105      	bne.n	800728e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007282:	4b08      	ldr	r3, [pc, #32]	; (80072a4 <osKernelInitialize+0x64>)
 8007284:	2201      	movs	r2, #1
 8007286:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007288:	2300      	movs	r3, #0
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	e002      	b.n	8007294 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800728e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007292:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007294:	68fb      	ldr	r3, [r7, #12]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	20000238 	.word	0x20000238

080072a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072ae:	f3ef 8305 	mrs	r3, IPSR
 80072b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80072b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10f      	bne.n	80072da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072ba:	f3ef 8310 	mrs	r3, PRIMASK
 80072be:	607b      	str	r3, [r7, #4]
  return(result);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d105      	bne.n	80072d2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072c6:	f3ef 8311 	mrs	r3, BASEPRI
 80072ca:	603b      	str	r3, [r7, #0]
  return(result);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d007      	beq.n	80072e2 <osKernelStart+0x3a>
 80072d2:	4b0f      	ldr	r3, [pc, #60]	; (8007310 <osKernelStart+0x68>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d103      	bne.n	80072e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80072da:	f06f 0305 	mvn.w	r3, #5
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	e010      	b.n	8007304 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80072e2:	4b0b      	ldr	r3, [pc, #44]	; (8007310 <osKernelStart+0x68>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d109      	bne.n	80072fe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80072ea:	f7ff ffa2 	bl	8007232 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80072ee:	4b08      	ldr	r3, [pc, #32]	; (8007310 <osKernelStart+0x68>)
 80072f0:	2202      	movs	r2, #2
 80072f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80072f4:	f001 f8ca 	bl	800848c <vTaskStartScheduler>
      stat = osOK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	e002      	b.n	8007304 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80072fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007302:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007304:	68fb      	ldr	r3, [r7, #12]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20000238 	.word	0x20000238

08007314 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007314:	b580      	push	{r7, lr}
 8007316:	b090      	sub	sp, #64	; 0x40
 8007318:	af04      	add	r7, sp, #16
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007320:	2300      	movs	r3, #0
 8007322:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007324:	f3ef 8305 	mrs	r3, IPSR
 8007328:	61fb      	str	r3, [r7, #28]
  return(result);
 800732a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800732c:	2b00      	cmp	r3, #0
 800732e:	f040 808f 	bne.w	8007450 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007332:	f3ef 8310 	mrs	r3, PRIMASK
 8007336:	61bb      	str	r3, [r7, #24]
  return(result);
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d105      	bne.n	800734a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800733e:	f3ef 8311 	mrs	r3, BASEPRI
 8007342:	617b      	str	r3, [r7, #20]
  return(result);
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <osThreadNew+0x3e>
 800734a:	4b44      	ldr	r3, [pc, #272]	; (800745c <osThreadNew+0x148>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b02      	cmp	r3, #2
 8007350:	d07e      	beq.n	8007450 <osThreadNew+0x13c>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d07b      	beq.n	8007450 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007358:	2380      	movs	r3, #128	; 0x80
 800735a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800735c:	2318      	movs	r3, #24
 800735e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007360:	2300      	movs	r3, #0
 8007362:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007368:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d045      	beq.n	80073fc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <osThreadNew+0x6a>
        name = attr->name;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	2b00      	cmp	r3, #0
 8007390:	d008      	beq.n	80073a4 <osThreadNew+0x90>
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	2b38      	cmp	r3, #56	; 0x38
 8007396:	d805      	bhi.n	80073a4 <osThreadNew+0x90>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <osThreadNew+0x94>
        return (NULL);
 80073a4:	2300      	movs	r3, #0
 80073a6:	e054      	b.n	8007452 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	089b      	lsrs	r3, r3, #2
 80073b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00e      	beq.n	80073de <osThreadNew+0xca>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	2bbb      	cmp	r3, #187	; 0xbb
 80073c6:	d90a      	bls.n	80073de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d006      	beq.n	80073de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <osThreadNew+0xca>
        mem = 1;
 80073d8:	2301      	movs	r3, #1
 80073da:	623b      	str	r3, [r7, #32]
 80073dc:	e010      	b.n	8007400 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10c      	bne.n	8007400 <osThreadNew+0xec>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d108      	bne.n	8007400 <osThreadNew+0xec>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d104      	bne.n	8007400 <osThreadNew+0xec>
          mem = 0;
 80073f6:	2300      	movs	r3, #0
 80073f8:	623b      	str	r3, [r7, #32]
 80073fa:	e001      	b.n	8007400 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80073fc:	2300      	movs	r3, #0
 80073fe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d110      	bne.n	8007428 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800740e:	9202      	str	r2, [sp, #8]
 8007410:	9301      	str	r3, [sp, #4]
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800741a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 fe3f 	bl	80080a0 <xTaskCreateStatic>
 8007422:	4603      	mov	r3, r0
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	e013      	b.n	8007450 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d110      	bne.n	8007450 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	b29a      	uxth	r2, r3
 8007432:	f107 0310 	add.w	r3, r7, #16
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 fe90 	bl	8008166 <xTaskCreate>
 8007446:	4603      	mov	r3, r0
 8007448:	2b01      	cmp	r3, #1
 800744a:	d001      	beq.n	8007450 <osThreadNew+0x13c>
          hTask = NULL;
 800744c:	2300      	movs	r3, #0
 800744e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007450:	693b      	ldr	r3, [r7, #16]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3730      	adds	r7, #48	; 0x30
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	20000238 	.word	0x20000238

08007460 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007468:	f3ef 8305 	mrs	r3, IPSR
 800746c:	613b      	str	r3, [r7, #16]
  return(result);
 800746e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10f      	bne.n	8007494 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007474:	f3ef 8310 	mrs	r3, PRIMASK
 8007478:	60fb      	str	r3, [r7, #12]
  return(result);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d105      	bne.n	800748c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007480:	f3ef 8311 	mrs	r3, BASEPRI
 8007484:	60bb      	str	r3, [r7, #8]
  return(result);
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d007      	beq.n	800749c <osDelay+0x3c>
 800748c:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <osDelay+0x58>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b02      	cmp	r3, #2
 8007492:	d103      	bne.n	800749c <osDelay+0x3c>
    stat = osErrorISR;
 8007494:	f06f 0305 	mvn.w	r3, #5
 8007498:	617b      	str	r3, [r7, #20]
 800749a:	e007      	b.n	80074ac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800749c:	2300      	movs	r3, #0
 800749e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <osDelay+0x4c>
      vTaskDelay(ticks);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 ffba 	bl	8008420 <vTaskDelay>
    }
  }

  return (stat);
 80074ac:	697b      	ldr	r3, [r7, #20]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3718      	adds	r7, #24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20000238 	.word	0x20000238

080074bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4a07      	ldr	r2, [pc, #28]	; (80074e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80074cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	4a06      	ldr	r2, [pc, #24]	; (80074ec <vApplicationGetIdleTaskMemory+0x30>)
 80074d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2280      	movs	r2, #128	; 0x80
 80074d8:	601a      	str	r2, [r3, #0]
}
 80074da:	bf00      	nop
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	2000023c 	.word	0x2000023c
 80074ec:	200002f8 	.word	0x200002f8

080074f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4a07      	ldr	r2, [pc, #28]	; (800751c <vApplicationGetTimerTaskMemory+0x2c>)
 8007500:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	4a06      	ldr	r2, [pc, #24]	; (8007520 <vApplicationGetTimerTaskMemory+0x30>)
 8007506:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800750e:	601a      	str	r2, [r3, #0]
}
 8007510:	bf00      	nop
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	200004f8 	.word	0x200004f8
 8007520:	200005b4 	.word	0x200005b4

08007524 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f103 0208 	add.w	r2, r3, #8
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800753c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f103 0208 	add.w	r2, r3, #8
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f103 0208 	add.w	r2, r3, #8
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007572:	bf00      	nop
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800757e:	b480      	push	{r7}
 8007580:	b085      	sub	sp, #20
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	601a      	str	r2, [r3, #0]
}
 80075ba:	bf00      	nop
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075c6:	b480      	push	{r7}
 80075c8:	b085      	sub	sp, #20
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075dc:	d103      	bne.n	80075e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	e00c      	b.n	8007600 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3308      	adds	r3, #8
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	e002      	b.n	80075f4 <vListInsert+0x2e>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d2f6      	bcs.n	80075ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	1c5a      	adds	r2, r3, #1
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	601a      	str	r2, [r3, #0]
}
 800762c:	bf00      	nop
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	6892      	ldr	r2, [r2, #8]
 800764e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	6852      	ldr	r2, [r2, #4]
 8007658:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	429a      	cmp	r2, r3
 8007662:	d103      	bne.n	800766c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	1e5a      	subs	r2, r3, #1
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10c      	bne.n	80076ba <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80076a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a4:	b672      	cpsid	i
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	b662      	cpsie	i
 80076b4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80076b6:	bf00      	nop
 80076b8:	e7fe      	b.n	80076b8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80076ba:	f002 f8a7 	bl	800980c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c6:	68f9      	ldr	r1, [r7, #12]
 80076c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076ca:	fb01 f303 	mul.w	r3, r1, r3
 80076ce:	441a      	add	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ea:	3b01      	subs	r3, #1
 80076ec:	68f9      	ldr	r1, [r7, #12]
 80076ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076f0:	fb01 f303 	mul.w	r3, r1, r3
 80076f4:	441a      	add	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	22ff      	movs	r2, #255	; 0xff
 80076fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	22ff      	movs	r2, #255	; 0xff
 8007706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d114      	bne.n	800773a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d01a      	beq.n	800774e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3310      	adds	r3, #16
 800771c:	4618      	mov	r0, r3
 800771e:	f001 f95d 	bl	80089dc <xTaskRemoveFromEventList>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d012      	beq.n	800774e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007728:	4b0c      	ldr	r3, [pc, #48]	; (800775c <xQueueGenericReset+0xd0>)
 800772a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	e009      	b.n	800774e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3310      	adds	r3, #16
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff fef0 	bl	8007524 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	3324      	adds	r3, #36	; 0x24
 8007748:	4618      	mov	r0, r3
 800774a:	f7ff feeb 	bl	8007524 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800774e:	f002 f891 	bl	8009874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007752:	2301      	movs	r3, #1
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	e000ed04 	.word	0xe000ed04

08007760 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08e      	sub	sp, #56	; 0x38
 8007764:	af02      	add	r7, sp, #8
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
 800776c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10c      	bne.n	800778e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007778:	b672      	cpsid	i
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	b662      	cpsie	i
 8007788:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800778a:	bf00      	nop
 800778c:	e7fe      	b.n	800778c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10c      	bne.n	80077ae <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	b672      	cpsid	i
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	b662      	cpsie	i
 80077a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077aa:	bf00      	nop
 80077ac:	e7fe      	b.n	80077ac <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <xQueueGenericCreateStatic+0x5a>
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <xQueueGenericCreateStatic+0x5e>
 80077ba:	2301      	movs	r3, #1
 80077bc:	e000      	b.n	80077c0 <xQueueGenericCreateStatic+0x60>
 80077be:	2300      	movs	r3, #0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10c      	bne.n	80077de <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c8:	b672      	cpsid	i
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	b662      	cpsie	i
 80077d8:	623b      	str	r3, [r7, #32]
}
 80077da:	bf00      	nop
 80077dc:	e7fe      	b.n	80077dc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d102      	bne.n	80077ea <xQueueGenericCreateStatic+0x8a>
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <xQueueGenericCreateStatic+0x8e>
 80077ea:	2301      	movs	r3, #1
 80077ec:	e000      	b.n	80077f0 <xQueueGenericCreateStatic+0x90>
 80077ee:	2300      	movs	r3, #0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10c      	bne.n	800780e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80077f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f8:	b672      	cpsid	i
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	b662      	cpsie	i
 8007808:	61fb      	str	r3, [r7, #28]
}
 800780a:	bf00      	nop
 800780c:	e7fe      	b.n	800780c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800780e:	2350      	movs	r3, #80	; 0x50
 8007810:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2b50      	cmp	r3, #80	; 0x50
 8007816:	d00c      	beq.n	8007832 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781c:	b672      	cpsid	i
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	b662      	cpsie	i
 800782c:	61bb      	str	r3, [r7, #24]
}
 800782e:	bf00      	nop
 8007830:	e7fe      	b.n	8007830 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007832:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00d      	beq.n	800785a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800783e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007840:	2201      	movs	r2, #1
 8007842:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007846:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800784a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	4613      	mov	r3, r2
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	68b9      	ldr	r1, [r7, #8]
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 f805 	bl	8007864 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800785a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800785c:	4618      	mov	r0, r3
 800785e:	3730      	adds	r7, #48	; 0x30
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
 8007870:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d103      	bne.n	8007880 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	e002      	b.n	8007886 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007892:	2101      	movs	r1, #1
 8007894:	69b8      	ldr	r0, [r7, #24]
 8007896:	f7ff fef9 	bl	800768c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	78fa      	ldrb	r2, [r7, #3]
 800789e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80078a2:	bf00      	nop
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
	...

080078ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b08e      	sub	sp, #56	; 0x38
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80078ba:	2300      	movs	r3, #0
 80078bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80078c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10c      	bne.n	80078e2 <xQueueGenericSend+0x36>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	b672      	cpsid	i
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	b662      	cpsie	i
 80078dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80078de:	bf00      	nop
 80078e0:	e7fe      	b.n	80078e0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d103      	bne.n	80078f0 <xQueueGenericSend+0x44>
 80078e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <xQueueGenericSend+0x48>
 80078f0:	2301      	movs	r3, #1
 80078f2:	e000      	b.n	80078f6 <xQueueGenericSend+0x4a>
 80078f4:	2300      	movs	r3, #0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10c      	bne.n	8007914 <xQueueGenericSend+0x68>
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fe:	b672      	cpsid	i
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	b662      	cpsie	i
 800790e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007910:	bf00      	nop
 8007912:	e7fe      	b.n	8007912 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2b02      	cmp	r3, #2
 8007918:	d103      	bne.n	8007922 <xQueueGenericSend+0x76>
 800791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791e:	2b01      	cmp	r3, #1
 8007920:	d101      	bne.n	8007926 <xQueueGenericSend+0x7a>
 8007922:	2301      	movs	r3, #1
 8007924:	e000      	b.n	8007928 <xQueueGenericSend+0x7c>
 8007926:	2300      	movs	r3, #0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10c      	bne.n	8007946 <xQueueGenericSend+0x9a>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	b672      	cpsid	i
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	b662      	cpsie	i
 8007940:	623b      	str	r3, [r7, #32]
}
 8007942:	bf00      	nop
 8007944:	e7fe      	b.n	8007944 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007946:	f001 fa13 	bl	8008d70 <xTaskGetSchedulerState>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d102      	bne.n	8007956 <xQueueGenericSend+0xaa>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <xQueueGenericSend+0xae>
 8007956:	2301      	movs	r3, #1
 8007958:	e000      	b.n	800795c <xQueueGenericSend+0xb0>
 800795a:	2300      	movs	r3, #0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10c      	bne.n	800797a <xQueueGenericSend+0xce>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	b672      	cpsid	i
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	b662      	cpsie	i
 8007974:	61fb      	str	r3, [r7, #28]
}
 8007976:	bf00      	nop
 8007978:	e7fe      	b.n	8007978 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800797a:	f001 ff47 	bl	800980c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007986:	429a      	cmp	r2, r3
 8007988:	d302      	bcc.n	8007990 <xQueueGenericSend+0xe4>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b02      	cmp	r3, #2
 800798e:	d129      	bne.n	80079e4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	68b9      	ldr	r1, [r7, #8]
 8007994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007996:	f000 fa15 	bl	8007dc4 <prvCopyDataToQueue>
 800799a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d010      	beq.n	80079c6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	3324      	adds	r3, #36	; 0x24
 80079a8:	4618      	mov	r0, r3
 80079aa:	f001 f817 	bl	80089dc <xTaskRemoveFromEventList>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d013      	beq.n	80079dc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80079b4:	4b3f      	ldr	r3, [pc, #252]	; (8007ab4 <xQueueGenericSend+0x208>)
 80079b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	e00a      	b.n	80079dc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80079c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d007      	beq.n	80079dc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80079cc:	4b39      	ldr	r3, [pc, #228]	; (8007ab4 <xQueueGenericSend+0x208>)
 80079ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80079dc:	f001 ff4a 	bl	8009874 <vPortExitCritical>
				return pdPASS;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e063      	b.n	8007aac <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d103      	bne.n	80079f2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079ea:	f001 ff43 	bl	8009874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	e05c      	b.n	8007aac <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d106      	bne.n	8007a06 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079f8:	f107 0314 	add.w	r3, r7, #20
 80079fc:	4618      	mov	r0, r3
 80079fe:	f001 f853 	bl	8008aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a02:	2301      	movs	r3, #1
 8007a04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a06:	f001 ff35 	bl	8009874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a0a:	f000 fdb3 	bl	8008574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a0e:	f001 fefd 	bl	800980c <vPortEnterCritical>
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a18:	b25b      	sxtb	r3, r3
 8007a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a1e:	d103      	bne.n	8007a28 <xQueueGenericSend+0x17c>
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a2e:	b25b      	sxtb	r3, r3
 8007a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a34:	d103      	bne.n	8007a3e <xQueueGenericSend+0x192>
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a3e:	f001 ff19 	bl	8009874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a42:	1d3a      	adds	r2, r7, #4
 8007a44:	f107 0314 	add.w	r3, r7, #20
 8007a48:	4611      	mov	r1, r2
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f001 f842 	bl	8008ad4 <xTaskCheckForTimeOut>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d124      	bne.n	8007aa0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a58:	f000 faac 	bl	8007fb4 <prvIsQueueFull>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d018      	beq.n	8007a94 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	3310      	adds	r3, #16
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	4611      	mov	r1, r2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 ff62 	bl	8008934 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007a70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a72:	f000 fa37 	bl	8007ee4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007a76:	f000 fd8b 	bl	8008590 <xTaskResumeAll>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f47f af7c 	bne.w	800797a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007a82:	4b0c      	ldr	r3, [pc, #48]	; (8007ab4 <xQueueGenericSend+0x208>)
 8007a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	e772      	b.n	800797a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a96:	f000 fa25 	bl	8007ee4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a9a:	f000 fd79 	bl	8008590 <xTaskResumeAll>
 8007a9e:	e76c      	b.n	800797a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007aa2:	f000 fa1f 	bl	8007ee4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007aa6:	f000 fd73 	bl	8008590 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007aaa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3738      	adds	r7, #56	; 0x38
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	e000ed04 	.word	0xe000ed04

08007ab8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08e      	sub	sp, #56	; 0x38
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10c      	bne.n	8007aea <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad4:	b672      	cpsid	i
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	b662      	cpsie	i
 8007ae4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ae6:	bf00      	nop
 8007ae8:	e7fe      	b.n	8007ae8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d103      	bne.n	8007af8 <xQueueGenericSendFromISR+0x40>
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <xQueueGenericSendFromISR+0x44>
 8007af8:	2301      	movs	r3, #1
 8007afa:	e000      	b.n	8007afe <xQueueGenericSendFromISR+0x46>
 8007afc:	2300      	movs	r3, #0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10c      	bne.n	8007b1c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b06:	b672      	cpsid	i
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	b662      	cpsie	i
 8007b16:	623b      	str	r3, [r7, #32]
}
 8007b18:	bf00      	nop
 8007b1a:	e7fe      	b.n	8007b1a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d103      	bne.n	8007b2a <xQueueGenericSendFromISR+0x72>
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d101      	bne.n	8007b2e <xQueueGenericSendFromISR+0x76>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <xQueueGenericSendFromISR+0x78>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10c      	bne.n	8007b4e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b38:	b672      	cpsid	i
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	b662      	cpsie	i
 8007b48:	61fb      	str	r3, [r7, #28]
}
 8007b4a:	bf00      	nop
 8007b4c:	e7fe      	b.n	8007b4c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b4e:	f001 ff45 	bl	80099dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007b52:	f3ef 8211 	mrs	r2, BASEPRI
 8007b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5a:	b672      	cpsid	i
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	b662      	cpsie	i
 8007b6a:	61ba      	str	r2, [r7, #24]
 8007b6c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007b6e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d302      	bcc.n	8007b84 <xQueueGenericSendFromISR+0xcc>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d12c      	bne.n	8007bde <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	68b9      	ldr	r1, [r7, #8]
 8007b92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b94:	f000 f916 	bl	8007dc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b98:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ba0:	d112      	bne.n	8007bc8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d016      	beq.n	8007bd8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	3324      	adds	r3, #36	; 0x24
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 ff14 	bl	80089dc <xTaskRemoveFromEventList>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00e      	beq.n	8007bd8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00b      	beq.n	8007bd8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	601a      	str	r2, [r3, #0]
 8007bc6:	e007      	b.n	8007bd8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007bc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007bcc:	3301      	adds	r3, #1
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	b25a      	sxtb	r2, r3
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007bdc:	e001      	b.n	8007be2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	637b      	str	r3, [r7, #52]	; 0x34
 8007be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007bec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3738      	adds	r7, #56	; 0x38
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08c      	sub	sp, #48	; 0x30
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c04:	2300      	movs	r3, #0
 8007c06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10c      	bne.n	8007c2c <xQueueReceive+0x34>
	__asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	b672      	cpsid	i
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	b662      	cpsie	i
 8007c26:	623b      	str	r3, [r7, #32]
}
 8007c28:	bf00      	nop
 8007c2a:	e7fe      	b.n	8007c2a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d103      	bne.n	8007c3a <xQueueReceive+0x42>
 8007c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <xQueueReceive+0x46>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e000      	b.n	8007c40 <xQueueReceive+0x48>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10c      	bne.n	8007c5e <xQueueReceive+0x66>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	b672      	cpsid	i
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	b662      	cpsie	i
 8007c58:	61fb      	str	r3, [r7, #28]
}
 8007c5a:	bf00      	nop
 8007c5c:	e7fe      	b.n	8007c5c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c5e:	f001 f887 	bl	8008d70 <xTaskGetSchedulerState>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d102      	bne.n	8007c6e <xQueueReceive+0x76>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d101      	bne.n	8007c72 <xQueueReceive+0x7a>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e000      	b.n	8007c74 <xQueueReceive+0x7c>
 8007c72:	2300      	movs	r3, #0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10c      	bne.n	8007c92 <xQueueReceive+0x9a>
	__asm volatile
 8007c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7c:	b672      	cpsid	i
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	b662      	cpsie	i
 8007c8c:	61bb      	str	r3, [r7, #24]
}
 8007c8e:	bf00      	nop
 8007c90:	e7fe      	b.n	8007c90 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c92:	f001 fdbb 	bl	800980c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d01f      	beq.n	8007ce2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ca2:	68b9      	ldr	r1, [r7, #8]
 8007ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca6:	f000 f8f7 	bl	8007e98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	1e5a      	subs	r2, r3, #1
 8007cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00f      	beq.n	8007cda <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	3310      	adds	r3, #16
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 fe8c 	bl	80089dc <xTaskRemoveFromEventList>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d007      	beq.n	8007cda <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007cca:	4b3d      	ldr	r3, [pc, #244]	; (8007dc0 <xQueueReceive+0x1c8>)
 8007ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cd0:	601a      	str	r2, [r3, #0]
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007cda:	f001 fdcb 	bl	8009874 <vPortExitCritical>
				return pdPASS;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e069      	b.n	8007db6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d103      	bne.n	8007cf0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ce8:	f001 fdc4 	bl	8009874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cec:	2300      	movs	r3, #0
 8007cee:	e062      	b.n	8007db6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d106      	bne.n	8007d04 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cf6:	f107 0310 	add.w	r3, r7, #16
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 fed4 	bl	8008aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d00:	2301      	movs	r3, #1
 8007d02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d04:	f001 fdb6 	bl	8009874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d08:	f000 fc34 	bl	8008574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d0c:	f001 fd7e 	bl	800980c <vPortEnterCritical>
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d16:	b25b      	sxtb	r3, r3
 8007d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d1c:	d103      	bne.n	8007d26 <xQueueReceive+0x12e>
 8007d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d2c:	b25b      	sxtb	r3, r3
 8007d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d32:	d103      	bne.n	8007d3c <xQueueReceive+0x144>
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d3c:	f001 fd9a 	bl	8009874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d40:	1d3a      	adds	r2, r7, #4
 8007d42:	f107 0310 	add.w	r3, r7, #16
 8007d46:	4611      	mov	r1, r2
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 fec3 	bl	8008ad4 <xTaskCheckForTimeOut>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d123      	bne.n	8007d9c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d56:	f000 f917 	bl	8007f88 <prvIsQueueEmpty>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d017      	beq.n	8007d90 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	3324      	adds	r3, #36	; 0x24
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	4611      	mov	r1, r2
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 fde3 	bl	8008934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d70:	f000 f8b8 	bl	8007ee4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d74:	f000 fc0c 	bl	8008590 <xTaskResumeAll>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d189      	bne.n	8007c92 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007d7e:	4b10      	ldr	r3, [pc, #64]	; (8007dc0 <xQueueReceive+0x1c8>)
 8007d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d84:	601a      	str	r2, [r3, #0]
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	e780      	b.n	8007c92 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d92:	f000 f8a7 	bl	8007ee4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d96:	f000 fbfb 	bl	8008590 <xTaskResumeAll>
 8007d9a:	e77a      	b.n	8007c92 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d9e:	f000 f8a1 	bl	8007ee4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007da2:	f000 fbf5 	bl	8008590 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da8:	f000 f8ee 	bl	8007f88 <prvIsQueueEmpty>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f43f af6f 	beq.w	8007c92 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007db4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3730      	adds	r7, #48	; 0x30
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	e000ed04 	.word	0xe000ed04

08007dc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d10d      	bne.n	8007dfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d14d      	bne.n	8007e86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 ffdc 	bl	8008dac <xTaskPriorityDisinherit>
 8007df4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	609a      	str	r2, [r3, #8]
 8007dfc:	e043      	b.n	8007e86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d119      	bne.n	8007e38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6858      	ldr	r0, [r3, #4]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	68b9      	ldr	r1, [r7, #8]
 8007e10:	f003 fbaa 	bl	800b568 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1c:	441a      	add	r2, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d32b      	bcc.n	8007e86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	605a      	str	r2, [r3, #4]
 8007e36:	e026      	b.n	8007e86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	68d8      	ldr	r0, [r3, #12]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e40:	461a      	mov	r2, r3
 8007e42:	68b9      	ldr	r1, [r7, #8]
 8007e44:	f003 fb90 	bl	800b568 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e50:	425b      	negs	r3, r3
 8007e52:	441a      	add	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	68da      	ldr	r2, [r3, #12]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d207      	bcs.n	8007e74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	689a      	ldr	r2, [r3, #8]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6c:	425b      	negs	r3, r3
 8007e6e:	441a      	add	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d105      	bne.n	8007e86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007e8e:	697b      	ldr	r3, [r7, #20]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d018      	beq.n	8007edc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68da      	ldr	r2, [r3, #12]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	441a      	add	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	68da      	ldr	r2, [r3, #12]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d303      	bcc.n	8007ecc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	68d9      	ldr	r1, [r3, #12]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	6838      	ldr	r0, [r7, #0]
 8007ed8:	f003 fb46 	bl	800b568 <memcpy>
	}
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007eec:	f001 fc8e 	bl	800980c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ef6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ef8:	e011      	b.n	8007f1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d012      	beq.n	8007f28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	3324      	adds	r3, #36	; 0x24
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 fd68 	bl	80089dc <xTaskRemoveFromEventList>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f12:	f000 fe45 	bl	8008ba0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	dce9      	bgt.n	8007efa <prvUnlockQueue+0x16>
 8007f26:	e000      	b.n	8007f2a <prvUnlockQueue+0x46>
					break;
 8007f28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	22ff      	movs	r2, #255	; 0xff
 8007f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007f32:	f001 fc9f 	bl	8009874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f36:	f001 fc69 	bl	800980c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f42:	e011      	b.n	8007f68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d012      	beq.n	8007f72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	3310      	adds	r3, #16
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 fd43 	bl	80089dc <xTaskRemoveFromEventList>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f5c:	f000 fe20 	bl	8008ba0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	3b01      	subs	r3, #1
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	dce9      	bgt.n	8007f44 <prvUnlockQueue+0x60>
 8007f70:	e000      	b.n	8007f74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	22ff      	movs	r2, #255	; 0xff
 8007f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f7c:	f001 fc7a 	bl	8009874 <vPortExitCritical>
}
 8007f80:	bf00      	nop
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f90:	f001 fc3c 	bl	800980c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d102      	bne.n	8007fa2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	e001      	b.n	8007fa6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fa6:	f001 fc65 	bl	8009874 <vPortExitCritical>

	return xReturn;
 8007faa:	68fb      	ldr	r3, [r7, #12]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fbc:	f001 fc26 	bl	800980c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d102      	bne.n	8007fd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	e001      	b.n	8007fd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fd6:	f001 fc4d 	bl	8009874 <vPortExitCritical>

	return xReturn;
 8007fda:	68fb      	ldr	r3, [r7, #12]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60fb      	str	r3, [r7, #12]
 8007ff2:	e014      	b.n	800801e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ff4:	4a0f      	ldr	r2, [pc, #60]	; (8008034 <vQueueAddToRegistry+0x50>)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10b      	bne.n	8008018 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008000:	490c      	ldr	r1, [pc, #48]	; (8008034 <vQueueAddToRegistry+0x50>)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	683a      	ldr	r2, [r7, #0]
 8008006:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800800a:	4a0a      	ldr	r2, [pc, #40]	; (8008034 <vQueueAddToRegistry+0x50>)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	00db      	lsls	r3, r3, #3
 8008010:	4413      	add	r3, r2
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008016:	e006      	b.n	8008026 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3301      	adds	r3, #1
 800801c:	60fb      	str	r3, [r7, #12]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b07      	cmp	r3, #7
 8008022:	d9e7      	bls.n	8007ff4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008024:	bf00      	nop
 8008026:	bf00      	nop
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	20004ddc 	.word	0x20004ddc

08008038 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008048:	f001 fbe0 	bl	800980c <vPortEnterCritical>
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008052:	b25b      	sxtb	r3, r3
 8008054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008058:	d103      	bne.n	8008062 <vQueueWaitForMessageRestricted+0x2a>
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008068:	b25b      	sxtb	r3, r3
 800806a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800806e:	d103      	bne.n	8008078 <vQueueWaitForMessageRestricted+0x40>
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008078:	f001 fbfc 	bl	8009874 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	2b00      	cmp	r3, #0
 8008082:	d106      	bne.n	8008092 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	3324      	adds	r3, #36	; 0x24
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	68b9      	ldr	r1, [r7, #8]
 800808c:	4618      	mov	r0, r3
 800808e:	f000 fc77 	bl	8008980 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008092:	6978      	ldr	r0, [r7, #20]
 8008094:	f7ff ff26 	bl	8007ee4 <prvUnlockQueue>
	}
 8008098:	bf00      	nop
 800809a:	3718      	adds	r7, #24
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b08e      	sub	sp, #56	; 0x38
 80080a4:	af04      	add	r7, sp, #16
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
 80080ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10c      	bne.n	80080ce <xTaskCreateStatic+0x2e>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b8:	b672      	cpsid	i
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	b662      	cpsie	i
 80080c8:	623b      	str	r3, [r7, #32]
}
 80080ca:	bf00      	nop
 80080cc:	e7fe      	b.n	80080cc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80080ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10c      	bne.n	80080ee <xTaskCreateStatic+0x4e>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	b672      	cpsid	i
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	b662      	cpsie	i
 80080e8:	61fb      	str	r3, [r7, #28]
}
 80080ea:	bf00      	nop
 80080ec:	e7fe      	b.n	80080ec <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80080ee:	23bc      	movs	r3, #188	; 0xbc
 80080f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	2bbc      	cmp	r3, #188	; 0xbc
 80080f6:	d00c      	beq.n	8008112 <xTaskCreateStatic+0x72>
	__asm volatile
 80080f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fc:	b672      	cpsid	i
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	b662      	cpsie	i
 800810c:	61bb      	str	r3, [r7, #24]
}
 800810e:	bf00      	nop
 8008110:	e7fe      	b.n	8008110 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008112:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008116:	2b00      	cmp	r3, #0
 8008118:	d01e      	beq.n	8008158 <xTaskCreateStatic+0xb8>
 800811a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800811c:	2b00      	cmp	r3, #0
 800811e:	d01b      	beq.n	8008158 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008122:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008128:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	2202      	movs	r2, #2
 800812e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008132:	2300      	movs	r3, #0
 8008134:	9303      	str	r3, [sp, #12]
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	9302      	str	r3, [sp, #8]
 800813a:	f107 0314 	add.w	r3, r7, #20
 800813e:	9301      	str	r3, [sp, #4]
 8008140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	68b9      	ldr	r1, [r7, #8]
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 f850 	bl	80081f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008150:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008152:	f000 f8f5 	bl	8008340 <prvAddNewTaskToReadyList>
 8008156:	e001      	b.n	800815c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800815c:	697b      	ldr	r3, [r7, #20]
	}
 800815e:	4618      	mov	r0, r3
 8008160:	3728      	adds	r7, #40	; 0x28
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008166:	b580      	push	{r7, lr}
 8008168:	b08c      	sub	sp, #48	; 0x30
 800816a:	af04      	add	r7, sp, #16
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	603b      	str	r3, [r7, #0]
 8008172:	4613      	mov	r3, r2
 8008174:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008176:	88fb      	ldrh	r3, [r7, #6]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4618      	mov	r0, r3
 800817c:	f001 fc72 	bl	8009a64 <pvPortMalloc>
 8008180:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00e      	beq.n	80081a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008188:	20bc      	movs	r0, #188	; 0xbc
 800818a:	f001 fc6b 	bl	8009a64 <pvPortMalloc>
 800818e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	631a      	str	r2, [r3, #48]	; 0x30
 800819c:	e005      	b.n	80081aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800819e:	6978      	ldr	r0, [r7, #20]
 80081a0:	f001 fd2a 	bl	8009bf8 <vPortFree>
 80081a4:	e001      	b.n	80081aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081a6:	2300      	movs	r3, #0
 80081a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d017      	beq.n	80081e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081b8:	88fa      	ldrh	r2, [r7, #6]
 80081ba:	2300      	movs	r3, #0
 80081bc:	9303      	str	r3, [sp, #12]
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	9302      	str	r3, [sp, #8]
 80081c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c4:	9301      	str	r3, [sp, #4]
 80081c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68b9      	ldr	r1, [r7, #8]
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 f80e 	bl	80081f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081d4:	69f8      	ldr	r0, [r7, #28]
 80081d6:	f000 f8b3 	bl	8008340 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081da:	2301      	movs	r3, #1
 80081dc:	61bb      	str	r3, [r7, #24]
 80081de:	e002      	b.n	80081e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081e6:	69bb      	ldr	r3, [r7, #24]
	}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3720      	adds	r7, #32
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b088      	sub	sp, #32
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	461a      	mov	r2, r3
 8008208:	21a5      	movs	r1, #165	; 0xa5
 800820a:	f003 f9bb 	bl	800b584 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800820e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008212:	6879      	ldr	r1, [r7, #4]
 8008214:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008218:	440b      	add	r3, r1
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4413      	add	r3, r2
 800821e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	f023 0307 	bic.w	r3, r3, #7
 8008226:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	f003 0307 	and.w	r3, r3, #7
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00c      	beq.n	800824c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008236:	b672      	cpsid	i
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	b662      	cpsie	i
 8008246:	617b      	str	r3, [r7, #20]
}
 8008248:	bf00      	nop
 800824a:	e7fe      	b.n	800824a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d01f      	beq.n	8008292 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008252:	2300      	movs	r3, #0
 8008254:	61fb      	str	r3, [r7, #28]
 8008256:	e012      	b.n	800827e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	4413      	add	r3, r2
 800825e:	7819      	ldrb	r1, [r3, #0]
 8008260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	4413      	add	r3, r2
 8008266:	3334      	adds	r3, #52	; 0x34
 8008268:	460a      	mov	r2, r1
 800826a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	4413      	add	r3, r2
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d006      	beq.n	8008286 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	3301      	adds	r3, #1
 800827c:	61fb      	str	r3, [r7, #28]
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	2b0f      	cmp	r3, #15
 8008282:	d9e9      	bls.n	8008258 <prvInitialiseNewTask+0x68>
 8008284:	e000      	b.n	8008288 <prvInitialiseNewTask+0x98>
			{
				break;
 8008286:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	2200      	movs	r2, #0
 800828c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008290:	e003      	b.n	800829a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	2b37      	cmp	r3, #55	; 0x37
 800829e:	d901      	bls.n	80082a4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082a0:	2337      	movs	r3, #55	; 0x37
 80082a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	2200      	movs	r2, #0
 80082b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b8:	3304      	adds	r3, #4
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff f952 	bl	8007564 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c2:	3318      	adds	r3, #24
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7ff f94d 	bl	8007564 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	2200      	movs	r2, #0
 80082e4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80082f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f2:	3354      	adds	r3, #84	; 0x54
 80082f4:	2260      	movs	r2, #96	; 0x60
 80082f6:	2100      	movs	r1, #0
 80082f8:	4618      	mov	r0, r3
 80082fa:	f003 f943 	bl	800b584 <memset>
 80082fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008300:	4a0c      	ldr	r2, [pc, #48]	; (8008334 <prvInitialiseNewTask+0x144>)
 8008302:	659a      	str	r2, [r3, #88]	; 0x58
 8008304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008306:	4a0c      	ldr	r2, [pc, #48]	; (8008338 <prvInitialiseNewTask+0x148>)
 8008308:	65da      	str	r2, [r3, #92]	; 0x5c
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	4a0b      	ldr	r2, [pc, #44]	; (800833c <prvInitialiseNewTask+0x14c>)
 800830e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	68f9      	ldr	r1, [r7, #12]
 8008314:	69b8      	ldr	r0, [r7, #24]
 8008316:	f001 f96b 	bl	80095f0 <pxPortInitialiseStack>
 800831a:	4602      	mov	r2, r0
 800831c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008322:	2b00      	cmp	r3, #0
 8008324:	d002      	beq.n	800832c <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800832a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800832c:	bf00      	nop
 800832e:	3720      	adds	r7, #32
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	0800b910 	.word	0x0800b910
 8008338:	0800b930 	.word	0x0800b930
 800833c:	0800b8f0 	.word	0x0800b8f0

08008340 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008348:	f001 fa60 	bl	800980c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800834c:	4b2d      	ldr	r3, [pc, #180]	; (8008404 <prvAddNewTaskToReadyList+0xc4>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3301      	adds	r3, #1
 8008352:	4a2c      	ldr	r2, [pc, #176]	; (8008404 <prvAddNewTaskToReadyList+0xc4>)
 8008354:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008356:	4b2c      	ldr	r3, [pc, #176]	; (8008408 <prvAddNewTaskToReadyList+0xc8>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d109      	bne.n	8008372 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800835e:	4a2a      	ldr	r2, [pc, #168]	; (8008408 <prvAddNewTaskToReadyList+0xc8>)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008364:	4b27      	ldr	r3, [pc, #156]	; (8008404 <prvAddNewTaskToReadyList+0xc4>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d110      	bne.n	800838e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800836c:	f000 fc3c 	bl	8008be8 <prvInitialiseTaskLists>
 8008370:	e00d      	b.n	800838e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008372:	4b26      	ldr	r3, [pc, #152]	; (800840c <prvAddNewTaskToReadyList+0xcc>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d109      	bne.n	800838e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800837a:	4b23      	ldr	r3, [pc, #140]	; (8008408 <prvAddNewTaskToReadyList+0xc8>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008384:	429a      	cmp	r2, r3
 8008386:	d802      	bhi.n	800838e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008388:	4a1f      	ldr	r2, [pc, #124]	; (8008408 <prvAddNewTaskToReadyList+0xc8>)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800838e:	4b20      	ldr	r3, [pc, #128]	; (8008410 <prvAddNewTaskToReadyList+0xd0>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	3301      	adds	r3, #1
 8008394:	4a1e      	ldr	r2, [pc, #120]	; (8008410 <prvAddNewTaskToReadyList+0xd0>)
 8008396:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008398:	4b1d      	ldr	r3, [pc, #116]	; (8008410 <prvAddNewTaskToReadyList+0xd0>)
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a4:	4b1b      	ldr	r3, [pc, #108]	; (8008414 <prvAddNewTaskToReadyList+0xd4>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d903      	bls.n	80083b4 <prvAddNewTaskToReadyList+0x74>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b0:	4a18      	ldr	r2, [pc, #96]	; (8008414 <prvAddNewTaskToReadyList+0xd4>)
 80083b2:	6013      	str	r3, [r2, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b8:	4613      	mov	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4a15      	ldr	r2, [pc, #84]	; (8008418 <prvAddNewTaskToReadyList+0xd8>)
 80083c2:	441a      	add	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3304      	adds	r3, #4
 80083c8:	4619      	mov	r1, r3
 80083ca:	4610      	mov	r0, r2
 80083cc:	f7ff f8d7 	bl	800757e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083d0:	f001 fa50 	bl	8009874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083d4:	4b0d      	ldr	r3, [pc, #52]	; (800840c <prvAddNewTaskToReadyList+0xcc>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00e      	beq.n	80083fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083dc:	4b0a      	ldr	r3, [pc, #40]	; (8008408 <prvAddNewTaskToReadyList+0xc8>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d207      	bcs.n	80083fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80083ea:	4b0c      	ldr	r3, [pc, #48]	; (800841c <prvAddNewTaskToReadyList+0xdc>)
 80083ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083fa:	bf00      	nop
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000e88 	.word	0x20000e88
 8008408:	200009b4 	.word	0x200009b4
 800840c:	20000e94 	.word	0x20000e94
 8008410:	20000ea4 	.word	0x20000ea4
 8008414:	20000e90 	.word	0x20000e90
 8008418:	200009b8 	.word	0x200009b8
 800841c:	e000ed04 	.word	0xe000ed04

08008420 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008428:	2300      	movs	r3, #0
 800842a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d019      	beq.n	8008466 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008432:	4b14      	ldr	r3, [pc, #80]	; (8008484 <vTaskDelay+0x64>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00c      	beq.n	8008454 <vTaskDelay+0x34>
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843e:	b672      	cpsid	i
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	b662      	cpsie	i
 800844e:	60bb      	str	r3, [r7, #8]
}
 8008450:	bf00      	nop
 8008452:	e7fe      	b.n	8008452 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008454:	f000 f88e 	bl	8008574 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008458:	2100      	movs	r1, #0
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fd18 	bl	8008e90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008460:	f000 f896 	bl	8008590 <xTaskResumeAll>
 8008464:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d107      	bne.n	800847c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800846c:	4b06      	ldr	r3, [pc, #24]	; (8008488 <vTaskDelay+0x68>)
 800846e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800847c:	bf00      	nop
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	20000eb0 	.word	0x20000eb0
 8008488:	e000ed04 	.word	0xe000ed04

0800848c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b08a      	sub	sp, #40	; 0x28
 8008490:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008492:	2300      	movs	r3, #0
 8008494:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008496:	2300      	movs	r3, #0
 8008498:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800849a:	463a      	mov	r2, r7
 800849c:	1d39      	adds	r1, r7, #4
 800849e:	f107 0308 	add.w	r3, r7, #8
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7ff f80a 	bl	80074bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	9202      	str	r2, [sp, #8]
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	2300      	movs	r3, #0
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	2300      	movs	r3, #0
 80084b8:	460a      	mov	r2, r1
 80084ba:	4926      	ldr	r1, [pc, #152]	; (8008554 <vTaskStartScheduler+0xc8>)
 80084bc:	4826      	ldr	r0, [pc, #152]	; (8008558 <vTaskStartScheduler+0xcc>)
 80084be:	f7ff fdef 	bl	80080a0 <xTaskCreateStatic>
 80084c2:	4603      	mov	r3, r0
 80084c4:	4a25      	ldr	r2, [pc, #148]	; (800855c <vTaskStartScheduler+0xd0>)
 80084c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084c8:	4b24      	ldr	r3, [pc, #144]	; (800855c <vTaskStartScheduler+0xd0>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80084d0:	2301      	movs	r3, #1
 80084d2:	617b      	str	r3, [r7, #20]
 80084d4:	e001      	b.n	80084da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80084d6:	2300      	movs	r3, #0
 80084d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d102      	bne.n	80084e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80084e0:	f000 fd2a 	bl	8008f38 <xTimerCreateTimerTask>
 80084e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d11d      	bne.n	8008528 <vTaskStartScheduler+0x9c>
	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f0:	b672      	cpsid	i
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	b662      	cpsie	i
 8008500:	613b      	str	r3, [r7, #16]
}
 8008502:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008504:	4b16      	ldr	r3, [pc, #88]	; (8008560 <vTaskStartScheduler+0xd4>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3354      	adds	r3, #84	; 0x54
 800850a:	4a16      	ldr	r2, [pc, #88]	; (8008564 <vTaskStartScheduler+0xd8>)
 800850c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800850e:	4b16      	ldr	r3, [pc, #88]	; (8008568 <vTaskStartScheduler+0xdc>)
 8008510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008514:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008516:	4b15      	ldr	r3, [pc, #84]	; (800856c <vTaskStartScheduler+0xe0>)
 8008518:	2201      	movs	r2, #1
 800851a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800851c:	4b14      	ldr	r3, [pc, #80]	; (8008570 <vTaskStartScheduler+0xe4>)
 800851e:	2200      	movs	r2, #0
 8008520:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008522:	f001 f8f5 	bl	8009710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008526:	e010      	b.n	800854a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800852e:	d10c      	bne.n	800854a <vTaskStartScheduler+0xbe>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008534:	b672      	cpsid	i
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	b662      	cpsie	i
 8008544:	60fb      	str	r3, [r7, #12]
}
 8008546:	bf00      	nop
 8008548:	e7fe      	b.n	8008548 <vTaskStartScheduler+0xbc>
}
 800854a:	bf00      	nop
 800854c:	3718      	adds	r7, #24
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	0800b80c 	.word	0x0800b80c
 8008558:	08008bb9 	.word	0x08008bb9
 800855c:	20000eac 	.word	0x20000eac
 8008560:	200009b4 	.word	0x200009b4
 8008564:	200001a8 	.word	0x200001a8
 8008568:	20000ea8 	.word	0x20000ea8
 800856c:	20000e94 	.word	0x20000e94
 8008570:	20000e8c 	.word	0x20000e8c

08008574 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008574:	b480      	push	{r7}
 8008576:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008578:	4b04      	ldr	r3, [pc, #16]	; (800858c <vTaskSuspendAll+0x18>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	3301      	adds	r3, #1
 800857e:	4a03      	ldr	r2, [pc, #12]	; (800858c <vTaskSuspendAll+0x18>)
 8008580:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008582:	bf00      	nop
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	20000eb0 	.word	0x20000eb0

08008590 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008596:	2300      	movs	r3, #0
 8008598:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800859a:	2300      	movs	r3, #0
 800859c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800859e:	4b43      	ldr	r3, [pc, #268]	; (80086ac <xTaskResumeAll+0x11c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10c      	bne.n	80085c0 <xTaskResumeAll+0x30>
	__asm volatile
 80085a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085aa:	b672      	cpsid	i
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	b662      	cpsie	i
 80085ba:	603b      	str	r3, [r7, #0]
}
 80085bc:	bf00      	nop
 80085be:	e7fe      	b.n	80085be <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085c0:	f001 f924 	bl	800980c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085c4:	4b39      	ldr	r3, [pc, #228]	; (80086ac <xTaskResumeAll+0x11c>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	4a38      	ldr	r2, [pc, #224]	; (80086ac <xTaskResumeAll+0x11c>)
 80085cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085ce:	4b37      	ldr	r3, [pc, #220]	; (80086ac <xTaskResumeAll+0x11c>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d162      	bne.n	800869c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085d6:	4b36      	ldr	r3, [pc, #216]	; (80086b0 <xTaskResumeAll+0x120>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d05e      	beq.n	800869c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085de:	e02f      	b.n	8008640 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085e0:	4b34      	ldr	r3, [pc, #208]	; (80086b4 <xTaskResumeAll+0x124>)
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	3318      	adds	r3, #24
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7ff f823 	bl	8007638 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	3304      	adds	r3, #4
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7ff f81e 	bl	8007638 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008600:	4b2d      	ldr	r3, [pc, #180]	; (80086b8 <xTaskResumeAll+0x128>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	429a      	cmp	r2, r3
 8008606:	d903      	bls.n	8008610 <xTaskResumeAll+0x80>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860c:	4a2a      	ldr	r2, [pc, #168]	; (80086b8 <xTaskResumeAll+0x128>)
 800860e:	6013      	str	r3, [r2, #0]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008614:	4613      	mov	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4a27      	ldr	r2, [pc, #156]	; (80086bc <xTaskResumeAll+0x12c>)
 800861e:	441a      	add	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	3304      	adds	r3, #4
 8008624:	4619      	mov	r1, r3
 8008626:	4610      	mov	r0, r2
 8008628:	f7fe ffa9 	bl	800757e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008630:	4b23      	ldr	r3, [pc, #140]	; (80086c0 <xTaskResumeAll+0x130>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008636:	429a      	cmp	r2, r3
 8008638:	d302      	bcc.n	8008640 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800863a:	4b22      	ldr	r3, [pc, #136]	; (80086c4 <xTaskResumeAll+0x134>)
 800863c:	2201      	movs	r2, #1
 800863e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008640:	4b1c      	ldr	r3, [pc, #112]	; (80086b4 <xTaskResumeAll+0x124>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1cb      	bne.n	80085e0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800864e:	f000 fb6f 	bl	8008d30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008652:	4b1d      	ldr	r3, [pc, #116]	; (80086c8 <xTaskResumeAll+0x138>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d010      	beq.n	8008680 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800865e:	f000 f847 	bl	80086f0 <xTaskIncrementTick>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008668:	4b16      	ldr	r3, [pc, #88]	; (80086c4 <xTaskResumeAll+0x134>)
 800866a:	2201      	movs	r2, #1
 800866c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	3b01      	subs	r3, #1
 8008672:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1f1      	bne.n	800865e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800867a:	4b13      	ldr	r3, [pc, #76]	; (80086c8 <xTaskResumeAll+0x138>)
 800867c:	2200      	movs	r2, #0
 800867e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008680:	4b10      	ldr	r3, [pc, #64]	; (80086c4 <xTaskResumeAll+0x134>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d009      	beq.n	800869c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008688:	2301      	movs	r3, #1
 800868a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800868c:	4b0f      	ldr	r3, [pc, #60]	; (80086cc <xTaskResumeAll+0x13c>)
 800868e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800869c:	f001 f8ea 	bl	8009874 <vPortExitCritical>

	return xAlreadyYielded;
 80086a0:	68bb      	ldr	r3, [r7, #8]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	20000eb0 	.word	0x20000eb0
 80086b0:	20000e88 	.word	0x20000e88
 80086b4:	20000e48 	.word	0x20000e48
 80086b8:	20000e90 	.word	0x20000e90
 80086bc:	200009b8 	.word	0x200009b8
 80086c0:	200009b4 	.word	0x200009b4
 80086c4:	20000e9c 	.word	0x20000e9c
 80086c8:	20000e98 	.word	0x20000e98
 80086cc:	e000ed04 	.word	0xe000ed04

080086d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086d6:	4b05      	ldr	r3, [pc, #20]	; (80086ec <xTaskGetTickCount+0x1c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086dc:	687b      	ldr	r3, [r7, #4]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	20000e8c 	.word	0x20000e8c

080086f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b086      	sub	sp, #24
 80086f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086f6:	2300      	movs	r3, #0
 80086f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086fa:	4b50      	ldr	r3, [pc, #320]	; (800883c <xTaskIncrementTick+0x14c>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f040 808b 	bne.w	800881a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008704:	4b4e      	ldr	r3, [pc, #312]	; (8008840 <xTaskIncrementTick+0x150>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3301      	adds	r3, #1
 800870a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800870c:	4a4c      	ldr	r2, [pc, #304]	; (8008840 <xTaskIncrementTick+0x150>)
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d122      	bne.n	800875e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008718:	4b4a      	ldr	r3, [pc, #296]	; (8008844 <xTaskIncrementTick+0x154>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00c      	beq.n	800873c <xTaskIncrementTick+0x4c>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	b672      	cpsid	i
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	b662      	cpsie	i
 8008736:	603b      	str	r3, [r7, #0]
}
 8008738:	bf00      	nop
 800873a:	e7fe      	b.n	800873a <xTaskIncrementTick+0x4a>
 800873c:	4b41      	ldr	r3, [pc, #260]	; (8008844 <xTaskIncrementTick+0x154>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	60fb      	str	r3, [r7, #12]
 8008742:	4b41      	ldr	r3, [pc, #260]	; (8008848 <xTaskIncrementTick+0x158>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a3f      	ldr	r2, [pc, #252]	; (8008844 <xTaskIncrementTick+0x154>)
 8008748:	6013      	str	r3, [r2, #0]
 800874a:	4a3f      	ldr	r2, [pc, #252]	; (8008848 <xTaskIncrementTick+0x158>)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	4b3e      	ldr	r3, [pc, #248]	; (800884c <xTaskIncrementTick+0x15c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3301      	adds	r3, #1
 8008756:	4a3d      	ldr	r2, [pc, #244]	; (800884c <xTaskIncrementTick+0x15c>)
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	f000 fae9 	bl	8008d30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800875e:	4b3c      	ldr	r3, [pc, #240]	; (8008850 <xTaskIncrementTick+0x160>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	429a      	cmp	r2, r3
 8008766:	d349      	bcc.n	80087fc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008768:	4b36      	ldr	r3, [pc, #216]	; (8008844 <xTaskIncrementTick+0x154>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d104      	bne.n	800877c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008772:	4b37      	ldr	r3, [pc, #220]	; (8008850 <xTaskIncrementTick+0x160>)
 8008774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008778:	601a      	str	r2, [r3, #0]
					break;
 800877a:	e03f      	b.n	80087fc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800877c:	4b31      	ldr	r3, [pc, #196]	; (8008844 <xTaskIncrementTick+0x154>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	429a      	cmp	r2, r3
 8008792:	d203      	bcs.n	800879c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008794:	4a2e      	ldr	r2, [pc, #184]	; (8008850 <xTaskIncrementTick+0x160>)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800879a:	e02f      	b.n	80087fc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	3304      	adds	r3, #4
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fe ff49 	bl	8007638 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d004      	beq.n	80087b8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	3318      	adds	r3, #24
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fe ff40 	bl	8007638 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087bc:	4b25      	ldr	r3, [pc, #148]	; (8008854 <xTaskIncrementTick+0x164>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d903      	bls.n	80087cc <xTaskIncrementTick+0xdc>
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c8:	4a22      	ldr	r2, [pc, #136]	; (8008854 <xTaskIncrementTick+0x164>)
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d0:	4613      	mov	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4a1f      	ldr	r2, [pc, #124]	; (8008858 <xTaskIncrementTick+0x168>)
 80087da:	441a      	add	r2, r3
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	3304      	adds	r3, #4
 80087e0:	4619      	mov	r1, r3
 80087e2:	4610      	mov	r0, r2
 80087e4:	f7fe fecb 	bl	800757e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ec:	4b1b      	ldr	r3, [pc, #108]	; (800885c <xTaskIncrementTick+0x16c>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d3b8      	bcc.n	8008768 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80087f6:	2301      	movs	r3, #1
 80087f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087fa:	e7b5      	b.n	8008768 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087fc:	4b17      	ldr	r3, [pc, #92]	; (800885c <xTaskIncrementTick+0x16c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008802:	4915      	ldr	r1, [pc, #84]	; (8008858 <xTaskIncrementTick+0x168>)
 8008804:	4613      	mov	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4413      	add	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	440b      	add	r3, r1
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d907      	bls.n	8008824 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008814:	2301      	movs	r3, #1
 8008816:	617b      	str	r3, [r7, #20]
 8008818:	e004      	b.n	8008824 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800881a:	4b11      	ldr	r3, [pc, #68]	; (8008860 <xTaskIncrementTick+0x170>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3301      	adds	r3, #1
 8008820:	4a0f      	ldr	r2, [pc, #60]	; (8008860 <xTaskIncrementTick+0x170>)
 8008822:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008824:	4b0f      	ldr	r3, [pc, #60]	; (8008864 <xTaskIncrementTick+0x174>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800882c:	2301      	movs	r3, #1
 800882e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008830:	697b      	ldr	r3, [r7, #20]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	20000eb0 	.word	0x20000eb0
 8008840:	20000e8c 	.word	0x20000e8c
 8008844:	20000e40 	.word	0x20000e40
 8008848:	20000e44 	.word	0x20000e44
 800884c:	20000ea0 	.word	0x20000ea0
 8008850:	20000ea8 	.word	0x20000ea8
 8008854:	20000e90 	.word	0x20000e90
 8008858:	200009b8 	.word	0x200009b8
 800885c:	200009b4 	.word	0x200009b4
 8008860:	20000e98 	.word	0x20000e98
 8008864:	20000e9c 	.word	0x20000e9c

08008868 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800886e:	4b2b      	ldr	r3, [pc, #172]	; (800891c <vTaskSwitchContext+0xb4>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008876:	4b2a      	ldr	r3, [pc, #168]	; (8008920 <vTaskSwitchContext+0xb8>)
 8008878:	2201      	movs	r2, #1
 800887a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800887c:	e048      	b.n	8008910 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800887e:	4b28      	ldr	r3, [pc, #160]	; (8008920 <vTaskSwitchContext+0xb8>)
 8008880:	2200      	movs	r2, #0
 8008882:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008884:	4b27      	ldr	r3, [pc, #156]	; (8008924 <vTaskSwitchContext+0xbc>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	60fb      	str	r3, [r7, #12]
 800888a:	e012      	b.n	80088b2 <vTaskSwitchContext+0x4a>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10c      	bne.n	80088ac <vTaskSwitchContext+0x44>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008896:	b672      	cpsid	i
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	b662      	cpsie	i
 80088a6:	607b      	str	r3, [r7, #4]
}
 80088a8:	bf00      	nop
 80088aa:	e7fe      	b.n	80088aa <vTaskSwitchContext+0x42>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	60fb      	str	r3, [r7, #12]
 80088b2:	491d      	ldr	r1, [pc, #116]	; (8008928 <vTaskSwitchContext+0xc0>)
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	4613      	mov	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	440b      	add	r3, r1
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d0e2      	beq.n	800888c <vTaskSwitchContext+0x24>
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	4613      	mov	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4a15      	ldr	r2, [pc, #84]	; (8008928 <vTaskSwitchContext+0xc0>)
 80088d2:	4413      	add	r3, r2
 80088d4:	60bb      	str	r3, [r7, #8]
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	605a      	str	r2, [r3, #4]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	3308      	adds	r3, #8
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d104      	bne.n	80088f6 <vTaskSwitchContext+0x8e>
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	605a      	str	r2, [r3, #4]
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	4a0b      	ldr	r2, [pc, #44]	; (800892c <vTaskSwitchContext+0xc4>)
 80088fe:	6013      	str	r3, [r2, #0]
 8008900:	4a08      	ldr	r2, [pc, #32]	; (8008924 <vTaskSwitchContext+0xbc>)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008906:	4b09      	ldr	r3, [pc, #36]	; (800892c <vTaskSwitchContext+0xc4>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3354      	adds	r3, #84	; 0x54
 800890c:	4a08      	ldr	r2, [pc, #32]	; (8008930 <vTaskSwitchContext+0xc8>)
 800890e:	6013      	str	r3, [r2, #0]
}
 8008910:	bf00      	nop
 8008912:	3714      	adds	r7, #20
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr
 800891c:	20000eb0 	.word	0x20000eb0
 8008920:	20000e9c 	.word	0x20000e9c
 8008924:	20000e90 	.word	0x20000e90
 8008928:	200009b8 	.word	0x200009b8
 800892c:	200009b4 	.word	0x200009b4
 8008930:	200001a8 	.word	0x200001a8

08008934 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10c      	bne.n	800895e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008948:	b672      	cpsid	i
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	b662      	cpsie	i
 8008958:	60fb      	str	r3, [r7, #12]
}
 800895a:	bf00      	nop
 800895c:	e7fe      	b.n	800895c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800895e:	4b07      	ldr	r3, [pc, #28]	; (800897c <vTaskPlaceOnEventList+0x48>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3318      	adds	r3, #24
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7fe fe2d 	bl	80075c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800896c:	2101      	movs	r1, #1
 800896e:	6838      	ldr	r0, [r7, #0]
 8008970:	f000 fa8e 	bl	8008e90 <prvAddCurrentTaskToDelayedList>
}
 8008974:	bf00      	nop
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	200009b4 	.word	0x200009b4

08008980 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10c      	bne.n	80089ac <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008996:	b672      	cpsid	i
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	b662      	cpsie	i
 80089a6:	617b      	str	r3, [r7, #20]
}
 80089a8:	bf00      	nop
 80089aa:	e7fe      	b.n	80089aa <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089ac:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <vTaskPlaceOnEventListRestricted+0x58>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3318      	adds	r3, #24
 80089b2:	4619      	mov	r1, r3
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f7fe fde2 	bl	800757e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d002      	beq.n	80089c6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80089c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	68b8      	ldr	r0, [r7, #8]
 80089ca:	f000 fa61 	bl	8008e90 <prvAddCurrentTaskToDelayedList>
	}
 80089ce:	bf00      	nop
 80089d0:	3718      	adds	r7, #24
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	200009b4 	.word	0x200009b4

080089dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10c      	bne.n	8008a0c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80089f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f6:	b672      	cpsid	i
 80089f8:	f383 8811 	msr	BASEPRI, r3
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	b662      	cpsie	i
 8008a06:	60fb      	str	r3, [r7, #12]
}
 8008a08:	bf00      	nop
 8008a0a:	e7fe      	b.n	8008a0a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	3318      	adds	r3, #24
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fe fe11 	bl	8007638 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a16:	4b1e      	ldr	r3, [pc, #120]	; (8008a90 <xTaskRemoveFromEventList+0xb4>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d11d      	bne.n	8008a5a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	3304      	adds	r3, #4
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fe fe08 	bl	8007638 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a2c:	4b19      	ldr	r3, [pc, #100]	; (8008a94 <xTaskRemoveFromEventList+0xb8>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d903      	bls.n	8008a3c <xTaskRemoveFromEventList+0x60>
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	4a16      	ldr	r2, [pc, #88]	; (8008a94 <xTaskRemoveFromEventList+0xb8>)
 8008a3a:	6013      	str	r3, [r2, #0]
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4a13      	ldr	r2, [pc, #76]	; (8008a98 <xTaskRemoveFromEventList+0xbc>)
 8008a4a:	441a      	add	r2, r3
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	3304      	adds	r3, #4
 8008a50:	4619      	mov	r1, r3
 8008a52:	4610      	mov	r0, r2
 8008a54:	f7fe fd93 	bl	800757e <vListInsertEnd>
 8008a58:	e005      	b.n	8008a66 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	3318      	adds	r3, #24
 8008a5e:	4619      	mov	r1, r3
 8008a60:	480e      	ldr	r0, [pc, #56]	; (8008a9c <xTaskRemoveFromEventList+0xc0>)
 8008a62:	f7fe fd8c 	bl	800757e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6a:	4b0d      	ldr	r3, [pc, #52]	; (8008aa0 <xTaskRemoveFromEventList+0xc4>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d905      	bls.n	8008a80 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a74:	2301      	movs	r3, #1
 8008a76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a78:	4b0a      	ldr	r3, [pc, #40]	; (8008aa4 <xTaskRemoveFromEventList+0xc8>)
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	e001      	b.n	8008a84 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008a80:	2300      	movs	r3, #0
 8008a82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a84:	697b      	ldr	r3, [r7, #20]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3718      	adds	r7, #24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	20000eb0 	.word	0x20000eb0
 8008a94:	20000e90 	.word	0x20000e90
 8008a98:	200009b8 	.word	0x200009b8
 8008a9c:	20000e48 	.word	0x20000e48
 8008aa0:	200009b4 	.word	0x200009b4
 8008aa4:	20000e9c 	.word	0x20000e9c

08008aa8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ab0:	4b06      	ldr	r3, [pc, #24]	; (8008acc <vTaskInternalSetTimeOutState+0x24>)
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ab8:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <vTaskInternalSetTimeOutState+0x28>)
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	605a      	str	r2, [r3, #4]
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	20000ea0 	.word	0x20000ea0
 8008ad0:	20000e8c 	.word	0x20000e8c

08008ad4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b088      	sub	sp, #32
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10c      	bne.n	8008afe <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae8:	b672      	cpsid	i
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	b662      	cpsie	i
 8008af8:	613b      	str	r3, [r7, #16]
}
 8008afa:	bf00      	nop
 8008afc:	e7fe      	b.n	8008afc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10c      	bne.n	8008b1e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	b672      	cpsid	i
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	b662      	cpsie	i
 8008b18:	60fb      	str	r3, [r7, #12]
}
 8008b1a:	bf00      	nop
 8008b1c:	e7fe      	b.n	8008b1c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008b1e:	f000 fe75 	bl	800980c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b22:	4b1d      	ldr	r3, [pc, #116]	; (8008b98 <xTaskCheckForTimeOut+0xc4>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	69ba      	ldr	r2, [r7, #24]
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b3a:	d102      	bne.n	8008b42 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	61fb      	str	r3, [r7, #28]
 8008b40:	e023      	b.n	8008b8a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	4b15      	ldr	r3, [pc, #84]	; (8008b9c <xTaskCheckForTimeOut+0xc8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d007      	beq.n	8008b5e <xTaskCheckForTimeOut+0x8a>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d302      	bcc.n	8008b5e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	61fb      	str	r3, [r7, #28]
 8008b5c:	e015      	b.n	8008b8a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d20b      	bcs.n	8008b80 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	1ad2      	subs	r2, r2, r3
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f7ff ff97 	bl	8008aa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	61fb      	str	r3, [r7, #28]
 8008b7e:	e004      	b.n	8008b8a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b86:	2301      	movs	r3, #1
 8008b88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b8a:	f000 fe73 	bl	8009874 <vPortExitCritical>

	return xReturn;
 8008b8e:	69fb      	ldr	r3, [r7, #28]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3720      	adds	r7, #32
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	20000e8c 	.word	0x20000e8c
 8008b9c:	20000ea0 	.word	0x20000ea0

08008ba0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ba4:	4b03      	ldr	r3, [pc, #12]	; (8008bb4 <vTaskMissedYield+0x14>)
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	601a      	str	r2, [r3, #0]
}
 8008baa:	bf00      	nop
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	20000e9c 	.word	0x20000e9c

08008bb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bc0:	f000 f852 	bl	8008c68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bc4:	4b06      	ldr	r3, [pc, #24]	; (8008be0 <prvIdleTask+0x28>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d9f9      	bls.n	8008bc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bcc:	4b05      	ldr	r3, [pc, #20]	; (8008be4 <prvIdleTask+0x2c>)
 8008bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008bdc:	e7f0      	b.n	8008bc0 <prvIdleTask+0x8>
 8008bde:	bf00      	nop
 8008be0:	200009b8 	.word	0x200009b8
 8008be4:	e000ed04 	.word	0xe000ed04

08008be8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bee:	2300      	movs	r3, #0
 8008bf0:	607b      	str	r3, [r7, #4]
 8008bf2:	e00c      	b.n	8008c0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4a12      	ldr	r2, [pc, #72]	; (8008c48 <prvInitialiseTaskLists+0x60>)
 8008c00:	4413      	add	r3, r2
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fe fc8e 	bl	8007524 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	607b      	str	r3, [r7, #4]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b37      	cmp	r3, #55	; 0x37
 8008c12:	d9ef      	bls.n	8008bf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c14:	480d      	ldr	r0, [pc, #52]	; (8008c4c <prvInitialiseTaskLists+0x64>)
 8008c16:	f7fe fc85 	bl	8007524 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c1a:	480d      	ldr	r0, [pc, #52]	; (8008c50 <prvInitialiseTaskLists+0x68>)
 8008c1c:	f7fe fc82 	bl	8007524 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c20:	480c      	ldr	r0, [pc, #48]	; (8008c54 <prvInitialiseTaskLists+0x6c>)
 8008c22:	f7fe fc7f 	bl	8007524 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c26:	480c      	ldr	r0, [pc, #48]	; (8008c58 <prvInitialiseTaskLists+0x70>)
 8008c28:	f7fe fc7c 	bl	8007524 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c2c:	480b      	ldr	r0, [pc, #44]	; (8008c5c <prvInitialiseTaskLists+0x74>)
 8008c2e:	f7fe fc79 	bl	8007524 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c32:	4b0b      	ldr	r3, [pc, #44]	; (8008c60 <prvInitialiseTaskLists+0x78>)
 8008c34:	4a05      	ldr	r2, [pc, #20]	; (8008c4c <prvInitialiseTaskLists+0x64>)
 8008c36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c38:	4b0a      	ldr	r3, [pc, #40]	; (8008c64 <prvInitialiseTaskLists+0x7c>)
 8008c3a:	4a05      	ldr	r2, [pc, #20]	; (8008c50 <prvInitialiseTaskLists+0x68>)
 8008c3c:	601a      	str	r2, [r3, #0]
}
 8008c3e:	bf00      	nop
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	200009b8 	.word	0x200009b8
 8008c4c:	20000e18 	.word	0x20000e18
 8008c50:	20000e2c 	.word	0x20000e2c
 8008c54:	20000e48 	.word	0x20000e48
 8008c58:	20000e5c 	.word	0x20000e5c
 8008c5c:	20000e74 	.word	0x20000e74
 8008c60:	20000e40 	.word	0x20000e40
 8008c64:	20000e44 	.word	0x20000e44

08008c68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c6e:	e019      	b.n	8008ca4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c70:	f000 fdcc 	bl	800980c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c74:	4b10      	ldr	r3, [pc, #64]	; (8008cb8 <prvCheckTasksWaitingTermination+0x50>)
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3304      	adds	r3, #4
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fe fcd9 	bl	8007638 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c86:	4b0d      	ldr	r3, [pc, #52]	; (8008cbc <prvCheckTasksWaitingTermination+0x54>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	4a0b      	ldr	r2, [pc, #44]	; (8008cbc <prvCheckTasksWaitingTermination+0x54>)
 8008c8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c90:	4b0b      	ldr	r3, [pc, #44]	; (8008cc0 <prvCheckTasksWaitingTermination+0x58>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	3b01      	subs	r3, #1
 8008c96:	4a0a      	ldr	r2, [pc, #40]	; (8008cc0 <prvCheckTasksWaitingTermination+0x58>)
 8008c98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c9a:	f000 fdeb 	bl	8009874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f810 	bl	8008cc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ca4:	4b06      	ldr	r3, [pc, #24]	; (8008cc0 <prvCheckTasksWaitingTermination+0x58>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e1      	bne.n	8008c70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008cac:	bf00      	nop
 8008cae:	bf00      	nop
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	20000e5c 	.word	0x20000e5c
 8008cbc:	20000e88 	.word	0x20000e88
 8008cc0:	20000e70 	.word	0x20000e70

08008cc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	3354      	adds	r3, #84	; 0x54
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f002 fd17 	bl	800b704 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d108      	bne.n	8008cf2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 ff87 	bl	8009bf8 <vPortFree>
				vPortFree( pxTCB );
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 ff84 	bl	8009bf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008cf0:	e01a      	b.n	8008d28 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d103      	bne.n	8008d04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 ff7b 	bl	8009bf8 <vPortFree>
	}
 8008d02:	e011      	b.n	8008d28 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d00c      	beq.n	8008d28 <prvDeleteTCB+0x64>
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d12:	b672      	cpsid	i
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	b662      	cpsie	i
 8008d22:	60fb      	str	r3, [r7, #12]
}
 8008d24:	bf00      	nop
 8008d26:	e7fe      	b.n	8008d26 <prvDeleteTCB+0x62>
	}
 8008d28:	bf00      	nop
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d36:	4b0c      	ldr	r3, [pc, #48]	; (8008d68 <prvResetNextTaskUnblockTime+0x38>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d104      	bne.n	8008d4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d40:	4b0a      	ldr	r3, [pc, #40]	; (8008d6c <prvResetNextTaskUnblockTime+0x3c>)
 8008d42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d48:	e008      	b.n	8008d5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d4a:	4b07      	ldr	r3, [pc, #28]	; (8008d68 <prvResetNextTaskUnblockTime+0x38>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	4a04      	ldr	r2, [pc, #16]	; (8008d6c <prvResetNextTaskUnblockTime+0x3c>)
 8008d5a:	6013      	str	r3, [r2, #0]
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	20000e40 	.word	0x20000e40
 8008d6c:	20000ea8 	.word	0x20000ea8

08008d70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d76:	4b0b      	ldr	r3, [pc, #44]	; (8008da4 <xTaskGetSchedulerState+0x34>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d102      	bne.n	8008d84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	607b      	str	r3, [r7, #4]
 8008d82:	e008      	b.n	8008d96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d84:	4b08      	ldr	r3, [pc, #32]	; (8008da8 <xTaskGetSchedulerState+0x38>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d102      	bne.n	8008d92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d8c:	2302      	movs	r3, #2
 8008d8e:	607b      	str	r3, [r7, #4]
 8008d90:	e001      	b.n	8008d96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d92:	2300      	movs	r3, #0
 8008d94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d96:	687b      	ldr	r3, [r7, #4]
	}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr
 8008da4:	20000e94 	.word	0x20000e94
 8008da8:	20000eb0 	.word	0x20000eb0

08008dac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008db8:	2300      	movs	r3, #0
 8008dba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d05a      	beq.n	8008e78 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008dc2:	4b30      	ldr	r3, [pc, #192]	; (8008e84 <xTaskPriorityDisinherit+0xd8>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d00c      	beq.n	8008de6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	b672      	cpsid	i
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	b662      	cpsie	i
 8008de0:	60fb      	str	r3, [r7, #12]
}
 8008de2:	bf00      	nop
 8008de4:	e7fe      	b.n	8008de4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d10c      	bne.n	8008e08 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df2:	b672      	cpsid	i
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	b662      	cpsie	i
 8008e02:	60bb      	str	r3, [r7, #8]
}
 8008e04:	bf00      	nop
 8008e06:	e7fe      	b.n	8008e06 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e0c:	1e5a      	subs	r2, r3, #1
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d02c      	beq.n	8008e78 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d128      	bne.n	8008e78 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	3304      	adds	r3, #4
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fe fc04 	bl	8007638 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e48:	4b0f      	ldr	r3, [pc, #60]	; (8008e88 <xTaskPriorityDisinherit+0xdc>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d903      	bls.n	8008e58 <xTaskPriorityDisinherit+0xac>
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e54:	4a0c      	ldr	r2, [pc, #48]	; (8008e88 <xTaskPriorityDisinherit+0xdc>)
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4413      	add	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4a09      	ldr	r2, [pc, #36]	; (8008e8c <xTaskPriorityDisinherit+0xe0>)
 8008e66:	441a      	add	r2, r3
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	4610      	mov	r0, r2
 8008e70:	f7fe fb85 	bl	800757e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e74:	2301      	movs	r3, #1
 8008e76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e78:	697b      	ldr	r3, [r7, #20]
	}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3718      	adds	r7, #24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	200009b4 	.word	0x200009b4
 8008e88:	20000e90 	.word	0x20000e90
 8008e8c:	200009b8 	.word	0x200009b8

08008e90 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e9a:	4b21      	ldr	r3, [pc, #132]	; (8008f20 <prvAddCurrentTaskToDelayedList+0x90>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ea0:	4b20      	ldr	r3, [pc, #128]	; (8008f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fe fbc6 	bl	8007638 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eb2:	d10a      	bne.n	8008eca <prvAddCurrentTaskToDelayedList+0x3a>
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d007      	beq.n	8008eca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008eba:	4b1a      	ldr	r3, [pc, #104]	; (8008f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4819      	ldr	r0, [pc, #100]	; (8008f28 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ec4:	f7fe fb5b 	bl	800757e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ec8:	e026      	b.n	8008f18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4413      	add	r3, r2
 8008ed0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ed2:	4b14      	ldr	r3, [pc, #80]	; (8008f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d209      	bcs.n	8008ef6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ee2:	4b12      	ldr	r3, [pc, #72]	; (8008f2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	4b0f      	ldr	r3, [pc, #60]	; (8008f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3304      	adds	r3, #4
 8008eec:	4619      	mov	r1, r3
 8008eee:	4610      	mov	r0, r2
 8008ef0:	f7fe fb69 	bl	80075c6 <vListInsert>
}
 8008ef4:	e010      	b.n	8008f18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ef6:	4b0e      	ldr	r3, [pc, #56]	; (8008f30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	4b0a      	ldr	r3, [pc, #40]	; (8008f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3304      	adds	r3, #4
 8008f00:	4619      	mov	r1, r3
 8008f02:	4610      	mov	r0, r2
 8008f04:	f7fe fb5f 	bl	80075c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f08:	4b0a      	ldr	r3, [pc, #40]	; (8008f34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d202      	bcs.n	8008f18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f12:	4a08      	ldr	r2, [pc, #32]	; (8008f34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	6013      	str	r3, [r2, #0]
}
 8008f18:	bf00      	nop
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	20000e8c 	.word	0x20000e8c
 8008f24:	200009b4 	.word	0x200009b4
 8008f28:	20000e74 	.word	0x20000e74
 8008f2c:	20000e44 	.word	0x20000e44
 8008f30:	20000e40 	.word	0x20000e40
 8008f34:	20000ea8 	.word	0x20000ea8

08008f38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b08a      	sub	sp, #40	; 0x28
 8008f3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f42:	f000 fb15 	bl	8009570 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f46:	4b1d      	ldr	r3, [pc, #116]	; (8008fbc <xTimerCreateTimerTask+0x84>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d021      	beq.n	8008f92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f52:	2300      	movs	r3, #0
 8008f54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f56:	1d3a      	adds	r2, r7, #4
 8008f58:	f107 0108 	add.w	r1, r7, #8
 8008f5c:	f107 030c 	add.w	r3, r7, #12
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fe fac5 	bl	80074f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	9202      	str	r2, [sp, #8]
 8008f6e:	9301      	str	r3, [sp, #4]
 8008f70:	2302      	movs	r3, #2
 8008f72:	9300      	str	r3, [sp, #0]
 8008f74:	2300      	movs	r3, #0
 8008f76:	460a      	mov	r2, r1
 8008f78:	4911      	ldr	r1, [pc, #68]	; (8008fc0 <xTimerCreateTimerTask+0x88>)
 8008f7a:	4812      	ldr	r0, [pc, #72]	; (8008fc4 <xTimerCreateTimerTask+0x8c>)
 8008f7c:	f7ff f890 	bl	80080a0 <xTaskCreateStatic>
 8008f80:	4603      	mov	r3, r0
 8008f82:	4a11      	ldr	r2, [pc, #68]	; (8008fc8 <xTimerCreateTimerTask+0x90>)
 8008f84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f86:	4b10      	ldr	r3, [pc, #64]	; (8008fc8 <xTimerCreateTimerTask+0x90>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10c      	bne.n	8008fb2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9c:	b672      	cpsid	i
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	b662      	cpsie	i
 8008fac:	613b      	str	r3, [r7, #16]
}
 8008fae:	bf00      	nop
 8008fb0:	e7fe      	b.n	8008fb0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008fb2:	697b      	ldr	r3, [r7, #20]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3718      	adds	r7, #24
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	20000ee4 	.word	0x20000ee4
 8008fc0:	0800b814 	.word	0x0800b814
 8008fc4:	08009109 	.word	0x08009109
 8008fc8:	20000ee8 	.word	0x20000ee8

08008fcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08a      	sub	sp, #40	; 0x28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
 8008fd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10c      	bne.n	8008ffe <xTimerGenericCommand+0x32>
	__asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe8:	b672      	cpsid	i
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	b662      	cpsie	i
 8008ff8:	623b      	str	r3, [r7, #32]
}
 8008ffa:	bf00      	nop
 8008ffc:	e7fe      	b.n	8008ffc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ffe:	4b1a      	ldr	r3, [pc, #104]	; (8009068 <xTimerGenericCommand+0x9c>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d02a      	beq.n	800905c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	2b05      	cmp	r3, #5
 8009016:	dc18      	bgt.n	800904a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009018:	f7ff feaa 	bl	8008d70 <xTaskGetSchedulerState>
 800901c:	4603      	mov	r3, r0
 800901e:	2b02      	cmp	r3, #2
 8009020:	d109      	bne.n	8009036 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009022:	4b11      	ldr	r3, [pc, #68]	; (8009068 <xTimerGenericCommand+0x9c>)
 8009024:	6818      	ldr	r0, [r3, #0]
 8009026:	f107 0110 	add.w	r1, r7, #16
 800902a:	2300      	movs	r3, #0
 800902c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800902e:	f7fe fc3d 	bl	80078ac <xQueueGenericSend>
 8009032:	6278      	str	r0, [r7, #36]	; 0x24
 8009034:	e012      	b.n	800905c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009036:	4b0c      	ldr	r3, [pc, #48]	; (8009068 <xTimerGenericCommand+0x9c>)
 8009038:	6818      	ldr	r0, [r3, #0]
 800903a:	f107 0110 	add.w	r1, r7, #16
 800903e:	2300      	movs	r3, #0
 8009040:	2200      	movs	r2, #0
 8009042:	f7fe fc33 	bl	80078ac <xQueueGenericSend>
 8009046:	6278      	str	r0, [r7, #36]	; 0x24
 8009048:	e008      	b.n	800905c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800904a:	4b07      	ldr	r3, [pc, #28]	; (8009068 <xTimerGenericCommand+0x9c>)
 800904c:	6818      	ldr	r0, [r3, #0]
 800904e:	f107 0110 	add.w	r1, r7, #16
 8009052:	2300      	movs	r3, #0
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	f7fe fd2f 	bl	8007ab8 <xQueueGenericSendFromISR>
 800905a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800905e:	4618      	mov	r0, r3
 8009060:	3728      	adds	r7, #40	; 0x28
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	20000ee4 	.word	0x20000ee4

0800906c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b088      	sub	sp, #32
 8009070:	af02      	add	r7, sp, #8
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009076:	4b23      	ldr	r3, [pc, #140]	; (8009104 <prvProcessExpiredTimer+0x98>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	3304      	adds	r3, #4
 8009084:	4618      	mov	r0, r3
 8009086:	f7fe fad7 	bl	8007638 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009090:	f003 0304 	and.w	r3, r3, #4
 8009094:	2b00      	cmp	r3, #0
 8009096:	d024      	beq.n	80090e2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	699a      	ldr	r2, [r3, #24]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	18d1      	adds	r1, r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	6978      	ldr	r0, [r7, #20]
 80090a6:	f000 f8d3 	bl	8009250 <prvInsertTimerInActiveList>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d021      	beq.n	80090f4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090b0:	2300      	movs	r3, #0
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	2300      	movs	r3, #0
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	2100      	movs	r1, #0
 80090ba:	6978      	ldr	r0, [r7, #20]
 80090bc:	f7ff ff86 	bl	8008fcc <xTimerGenericCommand>
 80090c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d115      	bne.n	80090f4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090cc:	b672      	cpsid	i
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	b662      	cpsie	i
 80090dc:	60fb      	str	r3, [r7, #12]
}
 80090de:	bf00      	nop
 80090e0:	e7fe      	b.n	80090e0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090e8:	f023 0301 	bic.w	r3, r3, #1
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	6a1b      	ldr	r3, [r3, #32]
 80090f8:	6978      	ldr	r0, [r7, #20]
 80090fa:	4798      	blx	r3
}
 80090fc:	bf00      	nop
 80090fe:	3718      	adds	r7, #24
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	20000edc 	.word	0x20000edc

08009108 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009110:	f107 0308 	add.w	r3, r7, #8
 8009114:	4618      	mov	r0, r3
 8009116:	f000 f857 	bl	80091c8 <prvGetNextExpireTime>
 800911a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	4619      	mov	r1, r3
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 f803 	bl	800912c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009126:	f000 f8d5 	bl	80092d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800912a:	e7f1      	b.n	8009110 <prvTimerTask+0x8>

0800912c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009136:	f7ff fa1d 	bl	8008574 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800913a:	f107 0308 	add.w	r3, r7, #8
 800913e:	4618      	mov	r0, r3
 8009140:	f000 f866 	bl	8009210 <prvSampleTimeNow>
 8009144:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d130      	bne.n	80091ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10a      	bne.n	8009168 <prvProcessTimerOrBlockTask+0x3c>
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	429a      	cmp	r2, r3
 8009158:	d806      	bhi.n	8009168 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800915a:	f7ff fa19 	bl	8008590 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800915e:	68f9      	ldr	r1, [r7, #12]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7ff ff83 	bl	800906c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009166:	e024      	b.n	80091b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d008      	beq.n	8009180 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800916e:	4b13      	ldr	r3, [pc, #76]	; (80091bc <prvProcessTimerOrBlockTask+0x90>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <prvProcessTimerOrBlockTask+0x50>
 8009178:	2301      	movs	r3, #1
 800917a:	e000      	b.n	800917e <prvProcessTimerOrBlockTask+0x52>
 800917c:	2300      	movs	r3, #0
 800917e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009180:	4b0f      	ldr	r3, [pc, #60]	; (80091c0 <prvProcessTimerOrBlockTask+0x94>)
 8009182:	6818      	ldr	r0, [r3, #0]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	4619      	mov	r1, r3
 800918e:	f7fe ff53 	bl	8008038 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009192:	f7ff f9fd 	bl	8008590 <xTaskResumeAll>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10a      	bne.n	80091b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800919c:	4b09      	ldr	r3, [pc, #36]	; (80091c4 <prvProcessTimerOrBlockTask+0x98>)
 800919e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	f3bf 8f4f 	dsb	sy
 80091a8:	f3bf 8f6f 	isb	sy
}
 80091ac:	e001      	b.n	80091b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80091ae:	f7ff f9ef 	bl	8008590 <xTaskResumeAll>
}
 80091b2:	bf00      	nop
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	20000ee0 	.word	0x20000ee0
 80091c0:	20000ee4 	.word	0x20000ee4
 80091c4:	e000ed04 	.word	0xe000ed04

080091c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091d0:	4b0e      	ldr	r3, [pc, #56]	; (800920c <prvGetNextExpireTime+0x44>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d101      	bne.n	80091de <prvGetNextExpireTime+0x16>
 80091da:	2201      	movs	r2, #1
 80091dc:	e000      	b.n	80091e0 <prvGetNextExpireTime+0x18>
 80091de:	2200      	movs	r2, #0
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d105      	bne.n	80091f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091ec:	4b07      	ldr	r3, [pc, #28]	; (800920c <prvGetNextExpireTime+0x44>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	60fb      	str	r3, [r7, #12]
 80091f6:	e001      	b.n	80091fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80091fc:	68fb      	ldr	r3, [r7, #12]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	20000edc 	.word	0x20000edc

08009210 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009218:	f7ff fa5a 	bl	80086d0 <xTaskGetTickCount>
 800921c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800921e:	4b0b      	ldr	r3, [pc, #44]	; (800924c <prvSampleTimeNow+0x3c>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	429a      	cmp	r2, r3
 8009226:	d205      	bcs.n	8009234 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009228:	f000 f93c 	bl	80094a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	e002      	b.n	800923a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800923a:	4a04      	ldr	r2, [pc, #16]	; (800924c <prvSampleTimeNow+0x3c>)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009240:	68fb      	ldr	r3, [r7, #12]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	20000eec 	.word	0x20000eec

08009250 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800925e:	2300      	movs	r3, #0
 8009260:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	429a      	cmp	r2, r3
 8009274:	d812      	bhi.n	800929c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	1ad2      	subs	r2, r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	699b      	ldr	r3, [r3, #24]
 8009280:	429a      	cmp	r2, r3
 8009282:	d302      	bcc.n	800928a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009284:	2301      	movs	r3, #1
 8009286:	617b      	str	r3, [r7, #20]
 8009288:	e01b      	b.n	80092c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800928a:	4b10      	ldr	r3, [pc, #64]	; (80092cc <prvInsertTimerInActiveList+0x7c>)
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	3304      	adds	r3, #4
 8009292:	4619      	mov	r1, r3
 8009294:	4610      	mov	r0, r2
 8009296:	f7fe f996 	bl	80075c6 <vListInsert>
 800929a:	e012      	b.n	80092c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d206      	bcs.n	80092b2 <prvInsertTimerInActiveList+0x62>
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d302      	bcc.n	80092b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80092ac:	2301      	movs	r3, #1
 80092ae:	617b      	str	r3, [r7, #20]
 80092b0:	e007      	b.n	80092c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092b2:	4b07      	ldr	r3, [pc, #28]	; (80092d0 <prvInsertTimerInActiveList+0x80>)
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	3304      	adds	r3, #4
 80092ba:	4619      	mov	r1, r3
 80092bc:	4610      	mov	r0, r2
 80092be:	f7fe f982 	bl	80075c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092c2:	697b      	ldr	r3, [r7, #20]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3718      	adds	r7, #24
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	20000ee0 	.word	0x20000ee0
 80092d0:	20000edc 	.word	0x20000edc

080092d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08e      	sub	sp, #56	; 0x38
 80092d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092da:	e0d0      	b.n	800947e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	da1a      	bge.n	8009318 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092e2:	1d3b      	adds	r3, r7, #4
 80092e4:	3304      	adds	r3, #4
 80092e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10c      	bne.n	8009308 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80092ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f2:	b672      	cpsid	i
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	b662      	cpsie	i
 8009302:	61fb      	str	r3, [r7, #28]
}
 8009304:	bf00      	nop
 8009306:	e7fe      	b.n	8009306 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800930e:	6850      	ldr	r0, [r2, #4]
 8009310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009312:	6892      	ldr	r2, [r2, #8]
 8009314:	4611      	mov	r1, r2
 8009316:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	f2c0 80ae 	blt.w	800947c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009326:	695b      	ldr	r3, [r3, #20]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d004      	beq.n	8009336 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	3304      	adds	r3, #4
 8009330:	4618      	mov	r0, r3
 8009332:	f7fe f981 	bl	8007638 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009336:	463b      	mov	r3, r7
 8009338:	4618      	mov	r0, r3
 800933a:	f7ff ff69 	bl	8009210 <prvSampleTimeNow>
 800933e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b09      	cmp	r3, #9
 8009344:	f200 809b 	bhi.w	800947e <prvProcessReceivedCommands+0x1aa>
 8009348:	a201      	add	r2, pc, #4	; (adr r2, 8009350 <prvProcessReceivedCommands+0x7c>)
 800934a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934e:	bf00      	nop
 8009350:	08009379 	.word	0x08009379
 8009354:	08009379 	.word	0x08009379
 8009358:	08009379 	.word	0x08009379
 800935c:	080093f1 	.word	0x080093f1
 8009360:	08009405 	.word	0x08009405
 8009364:	08009453 	.word	0x08009453
 8009368:	08009379 	.word	0x08009379
 800936c:	08009379 	.word	0x08009379
 8009370:	080093f1 	.word	0x080093f1
 8009374:	08009405 	.word	0x08009405
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800937e:	f043 0301 	orr.w	r3, r3, #1
 8009382:	b2da      	uxtb	r2, r3
 8009384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	18d1      	adds	r1, r2, r3
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009398:	f7ff ff5a 	bl	8009250 <prvInsertTimerInActiveList>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d06d      	beq.n	800947e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a4:	6a1b      	ldr	r3, [r3, #32]
 80093a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093b0:	f003 0304 	and.w	r3, r3, #4
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d062      	beq.n	800947e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	441a      	add	r2, r3
 80093c0:	2300      	movs	r3, #0
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	2300      	movs	r3, #0
 80093c6:	2100      	movs	r1, #0
 80093c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093ca:	f7ff fdff 	bl	8008fcc <xTimerGenericCommand>
 80093ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d153      	bne.n	800947e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80093d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093da:	b672      	cpsid	i
 80093dc:	f383 8811 	msr	BASEPRI, r3
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	b662      	cpsie	i
 80093ea:	61bb      	str	r3, [r7, #24]
}
 80093ec:	bf00      	nop
 80093ee:	e7fe      	b.n	80093ee <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093f6:	f023 0301 	bic.w	r3, r3, #1
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009402:	e03c      	b.n	800947e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800940a:	f043 0301 	orr.w	r3, r3, #1
 800940e:	b2da      	uxtb	r2, r3
 8009410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10c      	bne.n	800943e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	b672      	cpsid	i
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	b662      	cpsie	i
 8009438:	617b      	str	r3, [r7, #20]
}
 800943a:	bf00      	nop
 800943c:	e7fe      	b.n	800943c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800943e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009440:	699a      	ldr	r2, [r3, #24]
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	18d1      	adds	r1, r2, r3
 8009446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800944a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800944c:	f7ff ff00 	bl	8009250 <prvInsertTimerInActiveList>
					break;
 8009450:	e015      	b.n	800947e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009458:	f003 0302 	and.w	r3, r3, #2
 800945c:	2b00      	cmp	r3, #0
 800945e:	d103      	bne.n	8009468 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009462:	f000 fbc9 	bl	8009bf8 <vPortFree>
 8009466:	e00a      	b.n	800947e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800946e:	f023 0301 	bic.w	r3, r3, #1
 8009472:	b2da      	uxtb	r2, r3
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800947a:	e000      	b.n	800947e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800947c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800947e:	4b08      	ldr	r3, [pc, #32]	; (80094a0 <prvProcessReceivedCommands+0x1cc>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	1d39      	adds	r1, r7, #4
 8009484:	2200      	movs	r2, #0
 8009486:	4618      	mov	r0, r3
 8009488:	f7fe fbb6 	bl	8007bf8 <xQueueReceive>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	f47f af24 	bne.w	80092dc <prvProcessReceivedCommands+0x8>
	}
}
 8009494:	bf00      	nop
 8009496:	bf00      	nop
 8009498:	3730      	adds	r7, #48	; 0x30
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	20000ee4 	.word	0x20000ee4

080094a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b088      	sub	sp, #32
 80094a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094aa:	e04a      	b.n	8009542 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094ac:	4b2e      	ldr	r3, [pc, #184]	; (8009568 <prvSwitchTimerLists+0xc4>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094b6:	4b2c      	ldr	r3, [pc, #176]	; (8009568 <prvSwitchTimerLists+0xc4>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	3304      	adds	r3, #4
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fe f8b7 	bl	8007638 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094d8:	f003 0304 	and.w	r3, r3, #4
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d030      	beq.n	8009542 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	693a      	ldr	r2, [r7, #16]
 80094e6:	4413      	add	r3, r2
 80094e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d90e      	bls.n	8009510 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094fe:	4b1a      	ldr	r3, [pc, #104]	; (8009568 <prvSwitchTimerLists+0xc4>)
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	3304      	adds	r3, #4
 8009506:	4619      	mov	r1, r3
 8009508:	4610      	mov	r0, r2
 800950a:	f7fe f85c 	bl	80075c6 <vListInsert>
 800950e:	e018      	b.n	8009542 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009510:	2300      	movs	r3, #0
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	2300      	movs	r3, #0
 8009516:	693a      	ldr	r2, [r7, #16]
 8009518:	2100      	movs	r1, #0
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f7ff fd56 	bl	8008fcc <xTimerGenericCommand>
 8009520:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10c      	bne.n	8009542 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	b672      	cpsid	i
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	b662      	cpsie	i
 800953c:	603b      	str	r3, [r7, #0]
}
 800953e:	bf00      	nop
 8009540:	e7fe      	b.n	8009540 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009542:	4b09      	ldr	r3, [pc, #36]	; (8009568 <prvSwitchTimerLists+0xc4>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1af      	bne.n	80094ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800954c:	4b06      	ldr	r3, [pc, #24]	; (8009568 <prvSwitchTimerLists+0xc4>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009552:	4b06      	ldr	r3, [pc, #24]	; (800956c <prvSwitchTimerLists+0xc8>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a04      	ldr	r2, [pc, #16]	; (8009568 <prvSwitchTimerLists+0xc4>)
 8009558:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800955a:	4a04      	ldr	r2, [pc, #16]	; (800956c <prvSwitchTimerLists+0xc8>)
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	6013      	str	r3, [r2, #0]
}
 8009560:	bf00      	nop
 8009562:	3718      	adds	r7, #24
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	20000edc 	.word	0x20000edc
 800956c:	20000ee0 	.word	0x20000ee0

08009570 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009576:	f000 f949 	bl	800980c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800957a:	4b15      	ldr	r3, [pc, #84]	; (80095d0 <prvCheckForValidListAndQueue+0x60>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d120      	bne.n	80095c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009582:	4814      	ldr	r0, [pc, #80]	; (80095d4 <prvCheckForValidListAndQueue+0x64>)
 8009584:	f7fd ffce 	bl	8007524 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009588:	4813      	ldr	r0, [pc, #76]	; (80095d8 <prvCheckForValidListAndQueue+0x68>)
 800958a:	f7fd ffcb 	bl	8007524 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800958e:	4b13      	ldr	r3, [pc, #76]	; (80095dc <prvCheckForValidListAndQueue+0x6c>)
 8009590:	4a10      	ldr	r2, [pc, #64]	; (80095d4 <prvCheckForValidListAndQueue+0x64>)
 8009592:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009594:	4b12      	ldr	r3, [pc, #72]	; (80095e0 <prvCheckForValidListAndQueue+0x70>)
 8009596:	4a10      	ldr	r2, [pc, #64]	; (80095d8 <prvCheckForValidListAndQueue+0x68>)
 8009598:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800959a:	2300      	movs	r3, #0
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	4b11      	ldr	r3, [pc, #68]	; (80095e4 <prvCheckForValidListAndQueue+0x74>)
 80095a0:	4a11      	ldr	r2, [pc, #68]	; (80095e8 <prvCheckForValidListAndQueue+0x78>)
 80095a2:	2110      	movs	r1, #16
 80095a4:	200a      	movs	r0, #10
 80095a6:	f7fe f8db 	bl	8007760 <xQueueGenericCreateStatic>
 80095aa:	4603      	mov	r3, r0
 80095ac:	4a08      	ldr	r2, [pc, #32]	; (80095d0 <prvCheckForValidListAndQueue+0x60>)
 80095ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80095b0:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <prvCheckForValidListAndQueue+0x60>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d005      	beq.n	80095c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80095b8:	4b05      	ldr	r3, [pc, #20]	; (80095d0 <prvCheckForValidListAndQueue+0x60>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	490b      	ldr	r1, [pc, #44]	; (80095ec <prvCheckForValidListAndQueue+0x7c>)
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fe fd10 	bl	8007fe4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095c4:	f000 f956 	bl	8009874 <vPortExitCritical>
}
 80095c8:	bf00      	nop
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	20000ee4 	.word	0x20000ee4
 80095d4:	20000eb4 	.word	0x20000eb4
 80095d8:	20000ec8 	.word	0x20000ec8
 80095dc:	20000edc 	.word	0x20000edc
 80095e0:	20000ee0 	.word	0x20000ee0
 80095e4:	20000f90 	.word	0x20000f90
 80095e8:	20000ef0 	.word	0x20000ef0
 80095ec:	0800b81c 	.word	0x0800b81c

080095f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	3b04      	subs	r3, #4
 8009600:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009608:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	3b04      	subs	r3, #4
 800960e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	f023 0201 	bic.w	r2, r3, #1
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	3b04      	subs	r3, #4
 800961e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009620:	4a0c      	ldr	r2, [pc, #48]	; (8009654 <pxPortInitialiseStack+0x64>)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3b14      	subs	r3, #20
 800962a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	3b04      	subs	r3, #4
 8009636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f06f 0202 	mvn.w	r2, #2
 800963e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	3b20      	subs	r3, #32
 8009644:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009646:	68fb      	ldr	r3, [r7, #12]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3714      	adds	r7, #20
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	08009659 	.word	0x08009659

08009658 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800965e:	2300      	movs	r3, #0
 8009660:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009662:	4b14      	ldr	r3, [pc, #80]	; (80096b4 <prvTaskExitError+0x5c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800966a:	d00c      	beq.n	8009686 <prvTaskExitError+0x2e>
	__asm volatile
 800966c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009670:	b672      	cpsid	i
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	b662      	cpsie	i
 8009680:	60fb      	str	r3, [r7, #12]
}
 8009682:	bf00      	nop
 8009684:	e7fe      	b.n	8009684 <prvTaskExitError+0x2c>
	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968a:	b672      	cpsid	i
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	b662      	cpsie	i
 800969a:	60bb      	str	r3, [r7, #8]
}
 800969c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800969e:	bf00      	nop
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d0fc      	beq.n	80096a0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80096a6:	bf00      	nop
 80096a8:	bf00      	nop
 80096aa:	3714      	adds	r7, #20
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	20000118 	.word	0x20000118
	...

080096c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80096c0:	4b07      	ldr	r3, [pc, #28]	; (80096e0 <pxCurrentTCBConst2>)
 80096c2:	6819      	ldr	r1, [r3, #0]
 80096c4:	6808      	ldr	r0, [r1, #0]
 80096c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ca:	f380 8809 	msr	PSP, r0
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f04f 0000 	mov.w	r0, #0
 80096d6:	f380 8811 	msr	BASEPRI, r0
 80096da:	4770      	bx	lr
 80096dc:	f3af 8000 	nop.w

080096e0 <pxCurrentTCBConst2>:
 80096e0:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop

080096e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096e8:	4808      	ldr	r0, [pc, #32]	; (800970c <prvPortStartFirstTask+0x24>)
 80096ea:	6800      	ldr	r0, [r0, #0]
 80096ec:	6800      	ldr	r0, [r0, #0]
 80096ee:	f380 8808 	msr	MSP, r0
 80096f2:	f04f 0000 	mov.w	r0, #0
 80096f6:	f380 8814 	msr	CONTROL, r0
 80096fa:	b662      	cpsie	i
 80096fc:	b661      	cpsie	f
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	df00      	svc	0
 8009708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800970a:	bf00      	nop
 800970c:	e000ed08 	.word	0xe000ed08

08009710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009716:	4b37      	ldr	r3, [pc, #220]	; (80097f4 <xPortStartScheduler+0xe4>)
 8009718:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	b2db      	uxtb	r3, r3
 8009720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	22ff      	movs	r2, #255	; 0xff
 8009726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	b2db      	uxtb	r3, r3
 800972e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009730:	78fb      	ldrb	r3, [r7, #3]
 8009732:	b2db      	uxtb	r3, r3
 8009734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009738:	b2da      	uxtb	r2, r3
 800973a:	4b2f      	ldr	r3, [pc, #188]	; (80097f8 <xPortStartScheduler+0xe8>)
 800973c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800973e:	4b2f      	ldr	r3, [pc, #188]	; (80097fc <xPortStartScheduler+0xec>)
 8009740:	2207      	movs	r2, #7
 8009742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009744:	e009      	b.n	800975a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009746:	4b2d      	ldr	r3, [pc, #180]	; (80097fc <xPortStartScheduler+0xec>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3b01      	subs	r3, #1
 800974c:	4a2b      	ldr	r2, [pc, #172]	; (80097fc <xPortStartScheduler+0xec>)
 800974e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009750:	78fb      	ldrb	r3, [r7, #3]
 8009752:	b2db      	uxtb	r3, r3
 8009754:	005b      	lsls	r3, r3, #1
 8009756:	b2db      	uxtb	r3, r3
 8009758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800975a:	78fb      	ldrb	r3, [r7, #3]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009762:	2b80      	cmp	r3, #128	; 0x80
 8009764:	d0ef      	beq.n	8009746 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009766:	4b25      	ldr	r3, [pc, #148]	; (80097fc <xPortStartScheduler+0xec>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f1c3 0307 	rsb	r3, r3, #7
 800976e:	2b04      	cmp	r3, #4
 8009770:	d00c      	beq.n	800978c <xPortStartScheduler+0x7c>
	__asm volatile
 8009772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009776:	b672      	cpsid	i
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	b662      	cpsie	i
 8009786:	60bb      	str	r3, [r7, #8]
}
 8009788:	bf00      	nop
 800978a:	e7fe      	b.n	800978a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800978c:	4b1b      	ldr	r3, [pc, #108]	; (80097fc <xPortStartScheduler+0xec>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	021b      	lsls	r3, r3, #8
 8009792:	4a1a      	ldr	r2, [pc, #104]	; (80097fc <xPortStartScheduler+0xec>)
 8009794:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009796:	4b19      	ldr	r3, [pc, #100]	; (80097fc <xPortStartScheduler+0xec>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800979e:	4a17      	ldr	r2, [pc, #92]	; (80097fc <xPortStartScheduler+0xec>)
 80097a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097aa:	4b15      	ldr	r3, [pc, #84]	; (8009800 <xPortStartScheduler+0xf0>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a14      	ldr	r2, [pc, #80]	; (8009800 <xPortStartScheduler+0xf0>)
 80097b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80097b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097b6:	4b12      	ldr	r3, [pc, #72]	; (8009800 <xPortStartScheduler+0xf0>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a11      	ldr	r2, [pc, #68]	; (8009800 <xPortStartScheduler+0xf0>)
 80097bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80097c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097c2:	f000 f8dd 	bl	8009980 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097c6:	4b0f      	ldr	r3, [pc, #60]	; (8009804 <xPortStartScheduler+0xf4>)
 80097c8:	2200      	movs	r2, #0
 80097ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097cc:	f000 f8fc 	bl	80099c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097d0:	4b0d      	ldr	r3, [pc, #52]	; (8009808 <xPortStartScheduler+0xf8>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a0c      	ldr	r2, [pc, #48]	; (8009808 <xPortStartScheduler+0xf8>)
 80097d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80097da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80097dc:	f7ff ff84 	bl	80096e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80097e0:	f7ff f842 	bl	8008868 <vTaskSwitchContext>
	prvTaskExitError();
 80097e4:	f7ff ff38 	bl	8009658 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	e000e400 	.word	0xe000e400
 80097f8:	20000fe0 	.word	0x20000fe0
 80097fc:	20000fe4 	.word	0x20000fe4
 8009800:	e000ed20 	.word	0xe000ed20
 8009804:	20000118 	.word	0x20000118
 8009808:	e000ef34 	.word	0xe000ef34

0800980c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	b672      	cpsid	i
 8009818:	f383 8811 	msr	BASEPRI, r3
 800981c:	f3bf 8f6f 	isb	sy
 8009820:	f3bf 8f4f 	dsb	sy
 8009824:	b662      	cpsie	i
 8009826:	607b      	str	r3, [r7, #4]
}
 8009828:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800982a:	4b10      	ldr	r3, [pc, #64]	; (800986c <vPortEnterCritical+0x60>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3301      	adds	r3, #1
 8009830:	4a0e      	ldr	r2, [pc, #56]	; (800986c <vPortEnterCritical+0x60>)
 8009832:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009834:	4b0d      	ldr	r3, [pc, #52]	; (800986c <vPortEnterCritical+0x60>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d111      	bne.n	8009860 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800983c:	4b0c      	ldr	r3, [pc, #48]	; (8009870 <vPortEnterCritical+0x64>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	b2db      	uxtb	r3, r3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00c      	beq.n	8009860 <vPortEnterCritical+0x54>
	__asm volatile
 8009846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984a:	b672      	cpsid	i
 800984c:	f383 8811 	msr	BASEPRI, r3
 8009850:	f3bf 8f6f 	isb	sy
 8009854:	f3bf 8f4f 	dsb	sy
 8009858:	b662      	cpsie	i
 800985a:	603b      	str	r3, [r7, #0]
}
 800985c:	bf00      	nop
 800985e:	e7fe      	b.n	800985e <vPortEnterCritical+0x52>
	}
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr
 800986c:	20000118 	.word	0x20000118
 8009870:	e000ed04 	.word	0xe000ed04

08009874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800987a:	4b13      	ldr	r3, [pc, #76]	; (80098c8 <vPortExitCritical+0x54>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10c      	bne.n	800989c <vPortExitCritical+0x28>
	__asm volatile
 8009882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009886:	b672      	cpsid	i
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	b662      	cpsie	i
 8009896:	607b      	str	r3, [r7, #4]
}
 8009898:	bf00      	nop
 800989a:	e7fe      	b.n	800989a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800989c:	4b0a      	ldr	r3, [pc, #40]	; (80098c8 <vPortExitCritical+0x54>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	3b01      	subs	r3, #1
 80098a2:	4a09      	ldr	r2, [pc, #36]	; (80098c8 <vPortExitCritical+0x54>)
 80098a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098a6:	4b08      	ldr	r3, [pc, #32]	; (80098c8 <vPortExitCritical+0x54>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d105      	bne.n	80098ba <vPortExitCritical+0x46>
 80098ae:	2300      	movs	r3, #0
 80098b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	f383 8811 	msr	BASEPRI, r3
}
 80098b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80098ba:	bf00      	nop
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	20000118 	.word	0x20000118
 80098cc:	00000000 	.word	0x00000000

080098d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098d0:	f3ef 8009 	mrs	r0, PSP
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	4b15      	ldr	r3, [pc, #84]	; (8009930 <pxCurrentTCBConst>)
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	f01e 0f10 	tst.w	lr, #16
 80098e0:	bf08      	it	eq
 80098e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ea:	6010      	str	r0, [r2, #0]
 80098ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80098f4:	b672      	cpsid	i
 80098f6:	f380 8811 	msr	BASEPRI, r0
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	b662      	cpsie	i
 8009904:	f7fe ffb0 	bl	8008868 <vTaskSwitchContext>
 8009908:	f04f 0000 	mov.w	r0, #0
 800990c:	f380 8811 	msr	BASEPRI, r0
 8009910:	bc09      	pop	{r0, r3}
 8009912:	6819      	ldr	r1, [r3, #0]
 8009914:	6808      	ldr	r0, [r1, #0]
 8009916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991a:	f01e 0f10 	tst.w	lr, #16
 800991e:	bf08      	it	eq
 8009920:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009924:	f380 8809 	msr	PSP, r0
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop

08009930 <pxCurrentTCBConst>:
 8009930:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009934:	bf00      	nop
 8009936:	bf00      	nop

08009938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	b672      	cpsid	i
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	b662      	cpsie	i
 8009952:	607b      	str	r3, [r7, #4]
}
 8009954:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009956:	f7fe fecb 	bl	80086f0 <xTaskIncrementTick>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d003      	beq.n	8009968 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009960:	4b06      	ldr	r3, [pc, #24]	; (800997c <SysTick_Handler+0x44>)
 8009962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009966:	601a      	str	r2, [r3, #0]
 8009968:	2300      	movs	r3, #0
 800996a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	f383 8811 	msr	BASEPRI, r3
}
 8009972:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009974:	bf00      	nop
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	e000ed04 	.word	0xe000ed04

08009980 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009980:	b480      	push	{r7}
 8009982:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009984:	4b0b      	ldr	r3, [pc, #44]	; (80099b4 <vPortSetupTimerInterrupt+0x34>)
 8009986:	2200      	movs	r2, #0
 8009988:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800998a:	4b0b      	ldr	r3, [pc, #44]	; (80099b8 <vPortSetupTimerInterrupt+0x38>)
 800998c:	2200      	movs	r2, #0
 800998e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009990:	4b0a      	ldr	r3, [pc, #40]	; (80099bc <vPortSetupTimerInterrupt+0x3c>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a0a      	ldr	r2, [pc, #40]	; (80099c0 <vPortSetupTimerInterrupt+0x40>)
 8009996:	fba2 2303 	umull	r2, r3, r2, r3
 800999a:	099b      	lsrs	r3, r3, #6
 800999c:	4a09      	ldr	r2, [pc, #36]	; (80099c4 <vPortSetupTimerInterrupt+0x44>)
 800999e:	3b01      	subs	r3, #1
 80099a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099a2:	4b04      	ldr	r3, [pc, #16]	; (80099b4 <vPortSetupTimerInterrupt+0x34>)
 80099a4:	2207      	movs	r2, #7
 80099a6:	601a      	str	r2, [r3, #0]
}
 80099a8:	bf00      	nop
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	e000e010 	.word	0xe000e010
 80099b8:	e000e018 	.word	0xe000e018
 80099bc:	2000011c 	.word	0x2000011c
 80099c0:	10624dd3 	.word	0x10624dd3
 80099c4:	e000e014 	.word	0xe000e014

080099c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80099d8 <vPortEnableVFP+0x10>
 80099cc:	6801      	ldr	r1, [r0, #0]
 80099ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80099d2:	6001      	str	r1, [r0, #0]
 80099d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099d6:	bf00      	nop
 80099d8:	e000ed88 	.word	0xe000ed88

080099dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099e2:	f3ef 8305 	mrs	r3, IPSR
 80099e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b0f      	cmp	r3, #15
 80099ec:	d916      	bls.n	8009a1c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099ee:	4a19      	ldr	r2, [pc, #100]	; (8009a54 <vPortValidateInterruptPriority+0x78>)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	4413      	add	r3, r2
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099f8:	4b17      	ldr	r3, [pc, #92]	; (8009a58 <vPortValidateInterruptPriority+0x7c>)
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	7afa      	ldrb	r2, [r7, #11]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d20c      	bcs.n	8009a1c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a06:	b672      	cpsid	i
 8009a08:	f383 8811 	msr	BASEPRI, r3
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	b662      	cpsie	i
 8009a16:	607b      	str	r3, [r7, #4]
}
 8009a18:	bf00      	nop
 8009a1a:	e7fe      	b.n	8009a1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a1c:	4b0f      	ldr	r3, [pc, #60]	; (8009a5c <vPortValidateInterruptPriority+0x80>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a24:	4b0e      	ldr	r3, [pc, #56]	; (8009a60 <vPortValidateInterruptPriority+0x84>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d90c      	bls.n	8009a46 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a30:	b672      	cpsid	i
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	b662      	cpsie	i
 8009a40:	603b      	str	r3, [r7, #0]
}
 8009a42:	bf00      	nop
 8009a44:	e7fe      	b.n	8009a44 <vPortValidateInterruptPriority+0x68>
	}
 8009a46:	bf00      	nop
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	e000e3f0 	.word	0xe000e3f0
 8009a58:	20000fe0 	.word	0x20000fe0
 8009a5c:	e000ed0c 	.word	0xe000ed0c
 8009a60:	20000fe4 	.word	0x20000fe4

08009a64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b08a      	sub	sp, #40	; 0x28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a70:	f7fe fd80 	bl	8008574 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a74:	4b5b      	ldr	r3, [pc, #364]	; (8009be4 <pvPortMalloc+0x180>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d101      	bne.n	8009a80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a7c:	f000 f91a 	bl	8009cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a80:	4b59      	ldr	r3, [pc, #356]	; (8009be8 <pvPortMalloc+0x184>)
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4013      	ands	r3, r2
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f040 8092 	bne.w	8009bb2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d01f      	beq.n	8009ad4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009a94:	2208      	movs	r2, #8
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4413      	add	r3, r2
 8009a9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f003 0307 	and.w	r3, r3, #7
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d016      	beq.n	8009ad4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f023 0307 	bic.w	r3, r3, #7
 8009aac:	3308      	adds	r3, #8
 8009aae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f003 0307 	and.w	r3, r3, #7
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00c      	beq.n	8009ad4 <pvPortMalloc+0x70>
	__asm volatile
 8009aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abe:	b672      	cpsid	i
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	b662      	cpsie	i
 8009ace:	617b      	str	r3, [r7, #20]
}
 8009ad0:	bf00      	nop
 8009ad2:	e7fe      	b.n	8009ad2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d06b      	beq.n	8009bb2 <pvPortMalloc+0x14e>
 8009ada:	4b44      	ldr	r3, [pc, #272]	; (8009bec <pvPortMalloc+0x188>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d866      	bhi.n	8009bb2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ae4:	4b42      	ldr	r3, [pc, #264]	; (8009bf0 <pvPortMalloc+0x18c>)
 8009ae6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ae8:	4b41      	ldr	r3, [pc, #260]	; (8009bf0 <pvPortMalloc+0x18c>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009aee:	e004      	b.n	8009afa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d903      	bls.n	8009b0c <pvPortMalloc+0xa8>
 8009b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1f1      	bne.n	8009af0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b0c:	4b35      	ldr	r3, [pc, #212]	; (8009be4 <pvPortMalloc+0x180>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d04d      	beq.n	8009bb2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b16:	6a3b      	ldr	r3, [r7, #32]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2208      	movs	r2, #8
 8009b1c:	4413      	add	r3, r2
 8009b1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	6a3b      	ldr	r3, [r7, #32]
 8009b26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	1ad2      	subs	r2, r2, r3
 8009b30:	2308      	movs	r3, #8
 8009b32:	005b      	lsls	r3, r3, #1
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d921      	bls.n	8009b7c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	f003 0307 	and.w	r3, r3, #7
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00c      	beq.n	8009b64 <pvPortMalloc+0x100>
	__asm volatile
 8009b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4e:	b672      	cpsid	i
 8009b50:	f383 8811 	msr	BASEPRI, r3
 8009b54:	f3bf 8f6f 	isb	sy
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	b662      	cpsie	i
 8009b5e:	613b      	str	r3, [r7, #16]
}
 8009b60:	bf00      	nop
 8009b62:	e7fe      	b.n	8009b62 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	1ad2      	subs	r2, r2, r3
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b76:	69b8      	ldr	r0, [r7, #24]
 8009b78:	f000 f8fe 	bl	8009d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b7c:	4b1b      	ldr	r3, [pc, #108]	; (8009bec <pvPortMalloc+0x188>)
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	4a19      	ldr	r2, [pc, #100]	; (8009bec <pvPortMalloc+0x188>)
 8009b88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b8a:	4b18      	ldr	r3, [pc, #96]	; (8009bec <pvPortMalloc+0x188>)
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	4b19      	ldr	r3, [pc, #100]	; (8009bf4 <pvPortMalloc+0x190>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d203      	bcs.n	8009b9e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b96:	4b15      	ldr	r3, [pc, #84]	; (8009bec <pvPortMalloc+0x188>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a16      	ldr	r2, [pc, #88]	; (8009bf4 <pvPortMalloc+0x190>)
 8009b9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba0:	685a      	ldr	r2, [r3, #4]
 8009ba2:	4b11      	ldr	r3, [pc, #68]	; (8009be8 <pvPortMalloc+0x184>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	431a      	orrs	r2, r3
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	2200      	movs	r2, #0
 8009bb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bb2:	f7fe fced 	bl	8008590 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	f003 0307 	and.w	r3, r3, #7
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00c      	beq.n	8009bda <pvPortMalloc+0x176>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	b672      	cpsid	i
 8009bc6:	f383 8811 	msr	BASEPRI, r3
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	b662      	cpsie	i
 8009bd4:	60fb      	str	r3, [r7, #12]
}
 8009bd6:	bf00      	nop
 8009bd8:	e7fe      	b.n	8009bd8 <pvPortMalloc+0x174>
	return pvReturn;
 8009bda:	69fb      	ldr	r3, [r7, #28]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3728      	adds	r7, #40	; 0x28
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	20004bf0 	.word	0x20004bf0
 8009be8:	20004bfc 	.word	0x20004bfc
 8009bec:	20004bf4 	.word	0x20004bf4
 8009bf0:	20004be8 	.word	0x20004be8
 8009bf4:	20004bf8 	.word	0x20004bf8

08009bf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d04c      	beq.n	8009ca4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c0a:	2308      	movs	r3, #8
 8009c0c:	425b      	negs	r3, r3
 8009c0e:	697a      	ldr	r2, [r7, #20]
 8009c10:	4413      	add	r3, r2
 8009c12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	4b23      	ldr	r3, [pc, #140]	; (8009cac <vPortFree+0xb4>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4013      	ands	r3, r2
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d10c      	bne.n	8009c40 <vPortFree+0x48>
	__asm volatile
 8009c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2a:	b672      	cpsid	i
 8009c2c:	f383 8811 	msr	BASEPRI, r3
 8009c30:	f3bf 8f6f 	isb	sy
 8009c34:	f3bf 8f4f 	dsb	sy
 8009c38:	b662      	cpsie	i
 8009c3a:	60fb      	str	r3, [r7, #12]
}
 8009c3c:	bf00      	nop
 8009c3e:	e7fe      	b.n	8009c3e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00c      	beq.n	8009c62 <vPortFree+0x6a>
	__asm volatile
 8009c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4c:	b672      	cpsid	i
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	b662      	cpsie	i
 8009c5c:	60bb      	str	r3, [r7, #8]
}
 8009c5e:	bf00      	nop
 8009c60:	e7fe      	b.n	8009c60 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	685a      	ldr	r2, [r3, #4]
 8009c66:	4b11      	ldr	r3, [pc, #68]	; (8009cac <vPortFree+0xb4>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d019      	beq.n	8009ca4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d115      	bne.n	8009ca4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	4b0b      	ldr	r3, [pc, #44]	; (8009cac <vPortFree+0xb4>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	43db      	mvns	r3, r3
 8009c82:	401a      	ands	r2, r3
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c88:	f7fe fc74 	bl	8008574 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	685a      	ldr	r2, [r3, #4]
 8009c90:	4b07      	ldr	r3, [pc, #28]	; (8009cb0 <vPortFree+0xb8>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4413      	add	r3, r2
 8009c96:	4a06      	ldr	r2, [pc, #24]	; (8009cb0 <vPortFree+0xb8>)
 8009c98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c9a:	6938      	ldr	r0, [r7, #16]
 8009c9c:	f000 f86c 	bl	8009d78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009ca0:	f7fe fc76 	bl	8008590 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ca4:	bf00      	nop
 8009ca6:	3718      	adds	r7, #24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	20004bfc 	.word	0x20004bfc
 8009cb0:	20004bf4 	.word	0x20004bf4

08009cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009cc0:	4b27      	ldr	r3, [pc, #156]	; (8009d60 <prvHeapInit+0xac>)
 8009cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f003 0307 	and.w	r3, r3, #7
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00c      	beq.n	8009ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	3307      	adds	r3, #7
 8009cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f023 0307 	bic.w	r3, r3, #7
 8009cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	4a1f      	ldr	r2, [pc, #124]	; (8009d60 <prvHeapInit+0xac>)
 8009ce4:	4413      	add	r3, r2
 8009ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009cec:	4a1d      	ldr	r2, [pc, #116]	; (8009d64 <prvHeapInit+0xb0>)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009cf2:	4b1c      	ldr	r3, [pc, #112]	; (8009d64 <prvHeapInit+0xb0>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d00:	2208      	movs	r2, #8
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	1a9b      	subs	r3, r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f023 0307 	bic.w	r3, r3, #7
 8009d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4a15      	ldr	r2, [pc, #84]	; (8009d68 <prvHeapInit+0xb4>)
 8009d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d16:	4b14      	ldr	r3, [pc, #80]	; (8009d68 <prvHeapInit+0xb4>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d1e:	4b12      	ldr	r3, [pc, #72]	; (8009d68 <prvHeapInit+0xb4>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2200      	movs	r2, #0
 8009d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	1ad2      	subs	r2, r2, r3
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d34:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <prvHeapInit+0xb4>)
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	4a0a      	ldr	r2, [pc, #40]	; (8009d6c <prvHeapInit+0xb8>)
 8009d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	4a09      	ldr	r2, [pc, #36]	; (8009d70 <prvHeapInit+0xbc>)
 8009d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d4c:	4b09      	ldr	r3, [pc, #36]	; (8009d74 <prvHeapInit+0xc0>)
 8009d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d52:	601a      	str	r2, [r3, #0]
}
 8009d54:	bf00      	nop
 8009d56:	3714      	adds	r7, #20
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr
 8009d60:	20000fe8 	.word	0x20000fe8
 8009d64:	20004be8 	.word	0x20004be8
 8009d68:	20004bf0 	.word	0x20004bf0
 8009d6c:	20004bf8 	.word	0x20004bf8
 8009d70:	20004bf4 	.word	0x20004bf4
 8009d74:	20004bfc 	.word	0x20004bfc

08009d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d80:	4b28      	ldr	r3, [pc, #160]	; (8009e24 <prvInsertBlockIntoFreeList+0xac>)
 8009d82:	60fb      	str	r3, [r7, #12]
 8009d84:	e002      	b.n	8009d8c <prvInsertBlockIntoFreeList+0x14>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	60fb      	str	r3, [r7, #12]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d8f7      	bhi.n	8009d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	4413      	add	r3, r2
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d108      	bne.n	8009dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	685a      	ldr	r2, [r3, #4]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	441a      	add	r2, r3
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	441a      	add	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d118      	bne.n	8009e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	4b15      	ldr	r3, [pc, #84]	; (8009e28 <prvInsertBlockIntoFreeList+0xb0>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d00d      	beq.n	8009df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	685a      	ldr	r2, [r3, #4]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	441a      	add	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	601a      	str	r2, [r3, #0]
 8009df4:	e008      	b.n	8009e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009df6:	4b0c      	ldr	r3, [pc, #48]	; (8009e28 <prvInsertBlockIntoFreeList+0xb0>)
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	601a      	str	r2, [r3, #0]
 8009dfe:	e003      	b.n	8009e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d002      	beq.n	8009e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e16:	bf00      	nop
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	20004be8 	.word	0x20004be8
 8009e28:	20004bf0 	.word	0x20004bf0

08009e2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009e30:	4904      	ldr	r1, [pc, #16]	; (8009e44 <MX_FATFS_Init+0x18>)
 8009e32:	4805      	ldr	r0, [pc, #20]	; (8009e48 <MX_FATFS_Init+0x1c>)
 8009e34:	f7fd f9ee 	bl	8007214 <FATFS_LinkDriver>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	4b03      	ldr	r3, [pc, #12]	; (8009e4c <MX_FATFS_Init+0x20>)
 8009e3e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009e40:	bf00      	nop
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	20004e1c 	.word	0x20004e1c
 8009e48:	20000194 	.word	0x20000194
 8009e4c:	20004e20 	.word	0x20004e20

08009e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009e54:	f7f6 fb58 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009e58:	f000 f82e 	bl	8009eb8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009e5c:	f000 f9c4 	bl	800a1e8 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 8009e60:	f000 f95a 	bl	800a118 <_ZL19MX_USART3_UART_Initv>
  MX_USART2_UART_Init();
 8009e64:	f000 f98c 	bl	800a180 <_ZL19MX_USART2_UART_Initv>
  MX_FATFS_Init();
 8009e68:	f7ff ffe0 	bl	8009e2c <MX_FATFS_Init>
  MX_SPI1_Init();
 8009e6c:	f000 f912 	bl	800a094 <_ZL12MX_SPI1_Initv>
  MX_I2C1_Init();
 8009e70:	f000 f8c2 	bl	8009ff8 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8009e74:	f7fd f9e4 	bl	8007240 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkLED01 */
  blinkLED01Handle = osThreadNew(StartDefaultTask, NULL, &blinkLED01_attributes);
 8009e78:	4a09      	ldr	r2, [pc, #36]	; (8009ea0 <main+0x50>)
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	4809      	ldr	r0, [pc, #36]	; (8009ea4 <main+0x54>)
 8009e7e:	f7fd fa49 	bl	8007314 <osThreadNew>
 8009e82:	4603      	mov	r3, r0
 8009e84:	4a08      	ldr	r2, [pc, #32]	; (8009ea8 <main+0x58>)
 8009e86:	6013      	str	r3, [r2, #0]

  /* creation of blinkLED02 */
  blinkLED02Handle = osThreadNew(StartTask02, NULL, &blinkLED02_attributes);
 8009e88:	4a08      	ldr	r2, [pc, #32]	; (8009eac <main+0x5c>)
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	4808      	ldr	r0, [pc, #32]	; (8009eb0 <main+0x60>)
 8009e8e:	f7fd fa41 	bl	8007314 <osThreadNew>
 8009e92:	4603      	mov	r3, r0
 8009e94:	4a07      	ldr	r2, [pc, #28]	; (8009eb4 <main+0x64>)
 8009e96:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8009e98:	f7fd fa06 	bl	80072a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009e9c:	e7fe      	b.n	8009e9c <main+0x4c>
 8009e9e:	bf00      	nop
 8009ea0:	0800b890 	.word	0x0800b890
 8009ea4:	0800a3dd 	.word	0x0800a3dd
 8009ea8:	20004db8 	.word	0x20004db8
 8009eac:	0800b8b4 	.word	0x0800b8b4
 8009eb0:	0800a401 	.word	0x0800a401
 8009eb4:	20004dbc 	.word	0x20004dbc

08009eb8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b0b4      	sub	sp, #208	; 0xd0
 8009ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009ebe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009ec2:	2230      	movs	r2, #48	; 0x30
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f001 fb5c 	bl	800b584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009ecc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	605a      	str	r2, [r3, #4]
 8009ed6:	609a      	str	r2, [r3, #8]
 8009ed8:	60da      	str	r2, [r3, #12]
 8009eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009edc:	f107 0308 	add.w	r3, r7, #8
 8009ee0:	2284      	movs	r2, #132	; 0x84
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f001 fb4d 	bl	800b584 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8009eea:	f7f8 f907 	bl	80020fc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009eee:	4b3f      	ldr	r3, [pc, #252]	; (8009fec <_Z18SystemClock_Configv+0x134>)
 8009ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef2:	4a3e      	ldr	r2, [pc, #248]	; (8009fec <_Z18SystemClock_Configv+0x134>)
 8009ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8009efa:	4b3c      	ldr	r3, [pc, #240]	; (8009fec <_Z18SystemClock_Configv+0x134>)
 8009efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f02:	607b      	str	r3, [r7, #4]
 8009f04:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8009f06:	4b3a      	ldr	r3, [pc, #232]	; (8009ff0 <_Z18SystemClock_Configv+0x138>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009f0e:	4a38      	ldr	r2, [pc, #224]	; (8009ff0 <_Z18SystemClock_Configv+0x138>)
 8009f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f14:	6013      	str	r3, [r2, #0]
 8009f16:	4b36      	ldr	r3, [pc, #216]	; (8009ff0 <_Z18SystemClock_Configv+0x138>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009f1e:	603b      	str	r3, [r7, #0]
 8009f20:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009f22:	2301      	movs	r3, #1
 8009f24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8009f28:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8009f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009f30:	2302      	movs	r3, #2
 8009f32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009f36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009f3e:	2304      	movs	r3, #4
 8009f40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8009f44:	2348      	movs	r3, #72	; 0x48
 8009f46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009f4a:	2302      	movs	r3, #2
 8009f4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8009f50:	2303      	movs	r3, #3
 8009f52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009f56:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7f8 f8de 	bl	800211c <HAL_RCC_OscConfig>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	bf14      	ite	ne
 8009f66:	2301      	movne	r3, #1
 8009f68:	2300      	moveq	r3, #0
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8009f70:	f000 fa84 	bl	800a47c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009f74:	230f      	movs	r3, #15
 8009f76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009f80:	2300      	movs	r3, #0
 8009f82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009f94:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009f98:	2102      	movs	r1, #2
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7f8 fb62 	bl	8002664 <HAL_RCC_ClockConfig>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	bf14      	ite	ne
 8009fa6:	2301      	movne	r3, #1
 8009fa8:	2300      	moveq	r3, #0
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d001      	beq.n	8009fb4 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 8009fb0:	f000 fa64 	bl	800a47c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8009fb4:	4b0f      	ldr	r3, [pc, #60]	; (8009ff4 <_Z18SystemClock_Configv+0x13c>)
 8009fb6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009fc6:	f107 0308 	add.w	r3, r7, #8
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7f8 fd7e 	bl	8002acc <HAL_RCCEx_PeriphCLKConfig>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	bf14      	ite	ne
 8009fd6:	2301      	movne	r3, #1
 8009fd8:	2300      	moveq	r3, #0
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <_Z18SystemClock_Configv+0x12c>
  {
    Error_Handler();
 8009fe0:	f000 fa4c 	bl	800a47c <Error_Handler>
  }
}
 8009fe4:	bf00      	nop
 8009fe6:	37d0      	adds	r7, #208	; 0xd0
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	40023800 	.word	0x40023800
 8009ff0:	40007000 	.word	0x40007000
 8009ff4:	00204100 	.word	0x00204100

08009ff8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009ffc:	4b22      	ldr	r3, [pc, #136]	; (800a088 <_ZL12MX_I2C1_Initv+0x90>)
 8009ffe:	4a23      	ldr	r2, [pc, #140]	; (800a08c <_ZL12MX_I2C1_Initv+0x94>)
 800a000:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800a002:	4b21      	ldr	r3, [pc, #132]	; (800a088 <_ZL12MX_I2C1_Initv+0x90>)
 800a004:	4a22      	ldr	r2, [pc, #136]	; (800a090 <_ZL12MX_I2C1_Initv+0x98>)
 800a006:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800a008:	4b1f      	ldr	r3, [pc, #124]	; (800a088 <_ZL12MX_I2C1_Initv+0x90>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a00e:	4b1e      	ldr	r3, [pc, #120]	; (800a088 <_ZL12MX_I2C1_Initv+0x90>)
 800a010:	2201      	movs	r2, #1
 800a012:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a014:	4b1c      	ldr	r3, [pc, #112]	; (800a088 <_ZL12MX_I2C1_Initv+0x90>)
 800a016:	2200      	movs	r2, #0
 800a018:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800a01a:	4b1b      	ldr	r3, [pc, #108]	; (800a088 <_ZL12MX_I2C1_Initv+0x90>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a020:	4b19      	ldr	r3, [pc, #100]	; (800a088 <_ZL12MX_I2C1_Initv+0x90>)
 800a022:	2200      	movs	r2, #0
 800a024:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a026:	4b18      	ldr	r3, [pc, #96]	; (800a088 <_ZL12MX_I2C1_Initv+0x90>)
 800a028:	2200      	movs	r2, #0
 800a02a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a02c:	4b16      	ldr	r3, [pc, #88]	; (800a088 <_ZL12MX_I2C1_Initv+0x90>)
 800a02e:	2200      	movs	r2, #0
 800a030:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a032:	4815      	ldr	r0, [pc, #84]	; (800a088 <_ZL12MX_I2C1_Initv+0x90>)
 800a034:	f7f6 fd7c 	bl	8000b30 <HAL_I2C_Init>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	bf14      	ite	ne
 800a03e:	2301      	movne	r3, #1
 800a040:	2300      	moveq	r3, #0
 800a042:	b2db      	uxtb	r3, r3
 800a044:	2b00      	cmp	r3, #0
 800a046:	d001      	beq.n	800a04c <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 800a048:	f000 fa18 	bl	800a47c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a04c:	2100      	movs	r1, #0
 800a04e:	480e      	ldr	r0, [pc, #56]	; (800a088 <_ZL12MX_I2C1_Initv+0x90>)
 800a050:	f7f6 fdfe 	bl	8000c50 <HAL_I2CEx_ConfigAnalogFilter>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	bf14      	ite	ne
 800a05a:	2301      	movne	r3, #1
 800a05c:	2300      	moveq	r3, #0
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 800a064:	f000 fa0a 	bl	800a47c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a068:	2100      	movs	r1, #0
 800a06a:	4807      	ldr	r0, [pc, #28]	; (800a088 <_ZL12MX_I2C1_Initv+0x90>)
 800a06c:	f7f6 fe3b 	bl	8000ce6 <HAL_I2CEx_ConfigDigitalFilter>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	bf14      	ite	ne
 800a076:	2301      	movne	r3, #1
 800a078:	2300      	moveq	r3, #0
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d001      	beq.n	800a084 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 800a080:	f000 f9fc 	bl	800a47c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a084:	bf00      	nop
 800a086:	bd80      	pop	{r7, pc}
 800a088:	20004c00 	.word	0x20004c00
 800a08c:	40005400 	.word	0x40005400
 800a090:	00808cd2 	.word	0x00808cd2

0800a094 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a098:	4b1d      	ldr	r3, [pc, #116]	; (800a110 <_ZL12MX_SPI1_Initv+0x7c>)
 800a09a:	4a1e      	ldr	r2, [pc, #120]	; (800a114 <_ZL12MX_SPI1_Initv+0x80>)
 800a09c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a09e:	4b1c      	ldr	r3, [pc, #112]	; (800a110 <_ZL12MX_SPI1_Initv+0x7c>)
 800a0a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a0a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a0a6:	4b1a      	ldr	r3, [pc, #104]	; (800a110 <_ZL12MX_SPI1_Initv+0x7c>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a0ac:	4b18      	ldr	r3, [pc, #96]	; (800a110 <_ZL12MX_SPI1_Initv+0x7c>)
 800a0ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a0b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a0b4:	4b16      	ldr	r3, [pc, #88]	; (800a110 <_ZL12MX_SPI1_Initv+0x7c>)
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a0ba:	4b15      	ldr	r3, [pc, #84]	; (800a110 <_ZL12MX_SPI1_Initv+0x7c>)
 800a0bc:	2200      	movs	r2, #0
 800a0be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a0c0:	4b13      	ldr	r3, [pc, #76]	; (800a110 <_ZL12MX_SPI1_Initv+0x7c>)
 800a0c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800a0c8:	4b11      	ldr	r3, [pc, #68]	; (800a110 <_ZL12MX_SPI1_Initv+0x7c>)
 800a0ca:	2228      	movs	r2, #40	; 0x28
 800a0cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a0ce:	4b10      	ldr	r3, [pc, #64]	; (800a110 <_ZL12MX_SPI1_Initv+0x7c>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a0d4:	4b0e      	ldr	r3, [pc, #56]	; (800a110 <_ZL12MX_SPI1_Initv+0x7c>)
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0da:	4b0d      	ldr	r3, [pc, #52]	; (800a110 <_ZL12MX_SPI1_Initv+0x7c>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800a0e0:	4b0b      	ldr	r3, [pc, #44]	; (800a110 <_ZL12MX_SPI1_Initv+0x7c>)
 800a0e2:	2207      	movs	r2, #7
 800a0e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a0e6:	4b0a      	ldr	r3, [pc, #40]	; (800a110 <_ZL12MX_SPI1_Initv+0x7c>)
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800a0ec:	4b08      	ldr	r3, [pc, #32]	; (800a110 <_ZL12MX_SPI1_Initv+0x7c>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a0f2:	4807      	ldr	r0, [pc, #28]	; (800a110 <_ZL12MX_SPI1_Initv+0x7c>)
 800a0f4:	f7f9 f8da 	bl	80032ac <HAL_SPI_Init>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	bf14      	ite	ne
 800a0fe:	2301      	movne	r3, #1
 800a100:	2300      	moveq	r3, #0
 800a102:	b2db      	uxtb	r3, r3
 800a104:	2b00      	cmp	r3, #0
 800a106:	d001      	beq.n	800a10c <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 800a108:	f000 f9b8 	bl	800a47c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a10c:	bf00      	nop
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	20004c4c 	.word	0x20004c4c
 800a114:	40013000 	.word	0x40013000

0800a118 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a11c:	4b16      	ldr	r3, [pc, #88]	; (800a178 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a11e:	4a17      	ldr	r2, [pc, #92]	; (800a17c <_ZL19MX_USART3_UART_Initv+0x64>)
 800a120:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800a122:	4b15      	ldr	r3, [pc, #84]	; (800a178 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a128:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a12a:	4b13      	ldr	r3, [pc, #76]	; (800a178 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a130:	4b11      	ldr	r3, [pc, #68]	; (800a178 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a132:	2200      	movs	r2, #0
 800a134:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a136:	4b10      	ldr	r3, [pc, #64]	; (800a178 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a138:	2200      	movs	r2, #0
 800a13a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a13c:	4b0e      	ldr	r3, [pc, #56]	; (800a178 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a13e:	220c      	movs	r2, #12
 800a140:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a142:	4b0d      	ldr	r3, [pc, #52]	; (800a178 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a144:	2200      	movs	r2, #0
 800a146:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a148:	4b0b      	ldr	r3, [pc, #44]	; (800a178 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a14e:	4b0a      	ldr	r3, [pc, #40]	; (800a178 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a150:	2200      	movs	r2, #0
 800a152:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a154:	4b08      	ldr	r3, [pc, #32]	; (800a178 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a156:	2200      	movs	r2, #0
 800a158:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a15a:	4807      	ldr	r0, [pc, #28]	; (800a178 <_ZL19MX_USART3_UART_Initv+0x60>)
 800a15c:	f7f9 fc30 	bl	80039c0 <HAL_UART_Init>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	bf14      	ite	ne
 800a166:	2301      	movne	r3, #1
 800a168:	2300      	moveq	r3, #0
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 800a170:	f000 f984 	bl	800a47c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a174:	bf00      	nop
 800a176:	bd80      	pop	{r7, pc}
 800a178:	20004cb0 	.word	0x20004cb0
 800a17c:	40004800 	.word	0x40004800

0800a180 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart2.Instance = USART2;
 800a184:	4b16      	ldr	r3, [pc, #88]	; (800a1e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a186:	4a17      	ldr	r2, [pc, #92]	; (800a1e4 <_ZL19MX_USART2_UART_Initv+0x64>)
 800a188:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800a18a:	4b15      	ldr	r3, [pc, #84]	; (800a1e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a18c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a190:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a192:	4b13      	ldr	r3, [pc, #76]	; (800a1e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a194:	2200      	movs	r2, #0
 800a196:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a198:	4b11      	ldr	r3, [pc, #68]	; (800a1e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a19a:	2200      	movs	r2, #0
 800a19c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a19e:	4b10      	ldr	r3, [pc, #64]	; (800a1e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a1a4:	4b0e      	ldr	r3, [pc, #56]	; (800a1e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a1a6:	220c      	movs	r2, #12
 800a1a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a1aa:	4b0d      	ldr	r3, [pc, #52]	; (800a1e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a1b0:	4b0b      	ldr	r3, [pc, #44]	; (800a1e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a1b6:	4b0a      	ldr	r3, [pc, #40]	; (800a1e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a1bc:	4b08      	ldr	r3, [pc, #32]	; (800a1e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a1c2:	4807      	ldr	r0, [pc, #28]	; (800a1e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800a1c4:	f7f9 fbfc 	bl	80039c0 <HAL_UART_Init>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	bf14      	ite	ne
 800a1ce:	2301      	movne	r3, #1
 800a1d0:	2300      	moveq	r3, #0
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 800a1d8:	f000 f950 	bl	800a47c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a1dc:	bf00      	nop
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	20004d34 	.word	0x20004d34
 800a1e4:	40004400 	.word	0x40004400

0800a1e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08c      	sub	sp, #48	; 0x30
 800a1ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1ee:	f107 031c 	add.w	r3, r7, #28
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	605a      	str	r2, [r3, #4]
 800a1f8:	609a      	str	r2, [r3, #8]
 800a1fa:	60da      	str	r2, [r3, #12]
 800a1fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a1fe:	4b71      	ldr	r3, [pc, #452]	; (800a3c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a202:	4a70      	ldr	r2, [pc, #448]	; (800a3c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a204:	f043 0304 	orr.w	r3, r3, #4
 800a208:	6313      	str	r3, [r2, #48]	; 0x30
 800a20a:	4b6e      	ldr	r3, [pc, #440]	; (800a3c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20e:	f003 0304 	and.w	r3, r3, #4
 800a212:	61bb      	str	r3, [r7, #24]
 800a214:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a216:	4b6b      	ldr	r3, [pc, #428]	; (800a3c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21a:	4a6a      	ldr	r2, [pc, #424]	; (800a3c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a21c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a220:	6313      	str	r3, [r2, #48]	; 0x30
 800a222:	4b68      	ldr	r3, [pc, #416]	; (800a3c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a22a:	617b      	str	r3, [r7, #20]
 800a22c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a22e:	4b65      	ldr	r3, [pc, #404]	; (800a3c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a232:	4a64      	ldr	r2, [pc, #400]	; (800a3c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a234:	f043 0301 	orr.w	r3, r3, #1
 800a238:	6313      	str	r3, [r2, #48]	; 0x30
 800a23a:	4b62      	ldr	r3, [pc, #392]	; (800a3c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	613b      	str	r3, [r7, #16]
 800a244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a246:	4b5f      	ldr	r3, [pc, #380]	; (800a3c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a24a:	4a5e      	ldr	r2, [pc, #376]	; (800a3c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a24c:	f043 0302 	orr.w	r3, r3, #2
 800a250:	6313      	str	r3, [r2, #48]	; 0x30
 800a252:	4b5c      	ldr	r3, [pc, #368]	; (800a3c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a256:	f003 0302 	and.w	r3, r3, #2
 800a25a:	60fb      	str	r3, [r7, #12]
 800a25c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a25e:	4b59      	ldr	r3, [pc, #356]	; (800a3c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a262:	4a58      	ldr	r2, [pc, #352]	; (800a3c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a264:	f043 0308 	orr.w	r3, r3, #8
 800a268:	6313      	str	r3, [r2, #48]	; 0x30
 800a26a:	4b56      	ldr	r3, [pc, #344]	; (800a3c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a26e:	f003 0308 	and.w	r3, r3, #8
 800a272:	60bb      	str	r3, [r7, #8]
 800a274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a276:	4b53      	ldr	r3, [pc, #332]	; (800a3c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a27a:	4a52      	ldr	r2, [pc, #328]	; (800a3c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a27c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a280:	6313      	str	r3, [r2, #48]	; 0x30
 800a282:	4b50      	ldr	r3, [pc, #320]	; (800a3c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 800a284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a28a:	607b      	str	r3, [r7, #4]
 800a28c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800a28e:	2200      	movs	r2, #0
 800a290:	2110      	movs	r1, #16
 800a292:	484d      	ldr	r0, [pc, #308]	; (800a3c8 <_ZL12MX_GPIO_Initv+0x1e0>)
 800a294:	f7f6 fc18 	bl	8000ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800a298:	2200      	movs	r2, #0
 800a29a:	f244 0181 	movw	r1, #16513	; 0x4081
 800a29e:	484b      	ldr	r0, [pc, #300]	; (800a3cc <_ZL12MX_GPIO_Initv+0x1e4>)
 800a2a0:	f7f6 fc12 	bl	8000ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2140      	movs	r1, #64	; 0x40
 800a2a8:	4849      	ldr	r0, [pc, #292]	; (800a3d0 <_ZL12MX_GPIO_Initv+0x1e8>)
 800a2aa:	f7f6 fc0d 	bl	8000ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800a2ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a2b4:	4b47      	ldr	r3, [pc, #284]	; (800a3d4 <_ZL12MX_GPIO_Initv+0x1ec>)
 800a2b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800a2bc:	f107 031c 	add.w	r3, r7, #28
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4845      	ldr	r0, [pc, #276]	; (800a3d8 <_ZL12MX_GPIO_Initv+0x1f0>)
 800a2c4:	f7f6 fa54 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a2c8:	2332      	movs	r3, #50	; 0x32
 800a2ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a2d8:	230b      	movs	r3, #11
 800a2da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a2dc:	f107 031c 	add.w	r3, r7, #28
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	483d      	ldr	r0, [pc, #244]	; (800a3d8 <_ZL12MX_GPIO_Initv+0x1f0>)
 800a2e4:	f7f6 fa44 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a2e8:	2386      	movs	r3, #134	; 0x86
 800a2ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a2f8:	230b      	movs	r3, #11
 800a2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2fc:	f107 031c 	add.w	r3, r7, #28
 800a300:	4619      	mov	r1, r3
 800a302:	4831      	ldr	r0, [pc, #196]	; (800a3c8 <_ZL12MX_GPIO_Initv+0x1e0>)
 800a304:	f7f6 fa34 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800a308:	2310      	movs	r3, #16
 800a30a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a30c:	2301      	movs	r3, #1
 800a30e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a310:	2300      	movs	r3, #0
 800a312:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a314:	2300      	movs	r3, #0
 800a316:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800a318:	f107 031c 	add.w	r3, r7, #28
 800a31c:	4619      	mov	r1, r3
 800a31e:	482a      	ldr	r0, [pc, #168]	; (800a3c8 <_ZL12MX_GPIO_Initv+0x1e0>)
 800a320:	f7f6 fa26 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800a324:	f244 0381 	movw	r3, #16513	; 0x4081
 800a328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a32a:	2301      	movs	r3, #1
 800a32c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a32e:	2300      	movs	r3, #0
 800a330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a332:	2300      	movs	r3, #0
 800a334:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a336:	f107 031c 	add.w	r3, r7, #28
 800a33a:	4619      	mov	r1, r3
 800a33c:	4823      	ldr	r0, [pc, #140]	; (800a3cc <_ZL12MX_GPIO_Initv+0x1e4>)
 800a33e:	f7f6 fa17 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a348:	2302      	movs	r3, #2
 800a34a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a34c:	2300      	movs	r3, #0
 800a34e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a350:	2303      	movs	r3, #3
 800a352:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a354:	230b      	movs	r3, #11
 800a356:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a358:	f107 031c 	add.w	r3, r7, #28
 800a35c:	4619      	mov	r1, r3
 800a35e:	481b      	ldr	r0, [pc, #108]	; (800a3cc <_ZL12MX_GPIO_Initv+0x1e4>)
 800a360:	f7f6 fa06 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800a364:	2340      	movs	r3, #64	; 0x40
 800a366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a368:	2301      	movs	r3, #1
 800a36a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a36c:	2300      	movs	r3, #0
 800a36e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a370:	2300      	movs	r3, #0
 800a372:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800a374:	f107 031c 	add.w	r3, r7, #28
 800a378:	4619      	mov	r1, r3
 800a37a:	4815      	ldr	r0, [pc, #84]	; (800a3d0 <_ZL12MX_GPIO_Initv+0x1e8>)
 800a37c:	f7f6 f9f8 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800a380:	2380      	movs	r3, #128	; 0x80
 800a382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a384:	2300      	movs	r3, #0
 800a386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a388:	2300      	movs	r3, #0
 800a38a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a38c:	f107 031c 	add.w	r3, r7, #28
 800a390:	4619      	mov	r1, r3
 800a392:	480f      	ldr	r0, [pc, #60]	; (800a3d0 <_ZL12MX_GPIO_Initv+0x1e8>)
 800a394:	f7f6 f9ec 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a398:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a39c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a39e:	2302      	movs	r3, #2
 800a3a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a3aa:	230b      	movs	r3, #11
 800a3ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a3ae:	f107 031c 	add.w	r3, r7, #28
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	4806      	ldr	r0, [pc, #24]	; (800a3d0 <_ZL12MX_GPIO_Initv+0x1e8>)
 800a3b6:	f7f6 f9db 	bl	8000770 <HAL_GPIO_Init>

}
 800a3ba:	bf00      	nop
 800a3bc:	3730      	adds	r7, #48	; 0x30
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	40023800 	.word	0x40023800
 800a3c8:	40020000 	.word	0x40020000
 800a3cc:	40020400 	.word	0x40020400
 800a3d0:	40021800 	.word	0x40021800
 800a3d4:	10110000 	.word	0x10110000
 800a3d8:	40020800 	.word	0x40020800

0800a3dc <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800a3e4:	f000 fa2c 	bl	800a840 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800a3e8:	2101      	movs	r1, #1
 800a3ea:	4804      	ldr	r0, [pc, #16]	; (800a3fc <_Z16StartDefaultTaskPv+0x20>)
 800a3ec:	f7f6 fb85 	bl	8000afa <HAL_GPIO_TogglePin>
	  osDelay(500);
 800a3f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a3f4:	f7fd f834 	bl	8007460 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800a3f8:	e7f6      	b.n	800a3e8 <_Z16StartDefaultTaskPv+0xc>
 800a3fa:	bf00      	nop
 800a3fc:	40020400 	.word	0x40020400

0800a400 <_Z11StartTask02Pv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800a408:	2180      	movs	r1, #128	; 0x80
 800a40a:	480f      	ldr	r0, [pc, #60]	; (800a448 <_Z11StartTask02Pv+0x48>)
 800a40c:	f7f6 fb75 	bl	8000afa <HAL_GPIO_TogglePin>

	  uint8_t msg[10] = "hello\r\n";
 800a410:	4a0e      	ldr	r2, [pc, #56]	; (800a44c <_Z11StartTask02Pv+0x4c>)
 800a412:	f107 030c 	add.w	r3, r7, #12
 800a416:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a41a:	e883 0003 	stmia.w	r3, {r0, r1}
 800a41e:	2300      	movs	r3, #0
 800a420:	82bb      	strh	r3, [r7, #20]
	  HAL_UART_Transmit(&huart3, msg, 10, 1);
 800a422:	f107 010c 	add.w	r1, r7, #12
 800a426:	2301      	movs	r3, #1
 800a428:	220a      	movs	r2, #10
 800a42a:	4809      	ldr	r0, [pc, #36]	; (800a450 <_Z11StartTask02Pv+0x50>)
 800a42c:	f7f9 fb16 	bl	8003a5c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, msg, 10, 1);
 800a430:	f107 010c 	add.w	r1, r7, #12
 800a434:	2301      	movs	r3, #1
 800a436:	220a      	movs	r2, #10
 800a438:	4806      	ldr	r0, [pc, #24]	; (800a454 <_Z11StartTask02Pv+0x54>)
 800a43a:	f7f9 fb0f 	bl	8003a5c <HAL_UART_Transmit>
	  osDelay(500);
 800a43e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a442:	f7fd f80d 	bl	8007460 <osDelay>
  }
 800a446:	e7df      	b.n	800a408 <_Z11StartTask02Pv+0x8>
 800a448:	40020400 	.word	0x40020400
 800a44c:	0800b83c 	.word	0x0800b83c
 800a450:	20004cb0 	.word	0x20004cb0
 800a454:	20004d34 	.word	0x20004d34

0800a458 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a04      	ldr	r2, [pc, #16]	; (800a478 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d101      	bne.n	800a46e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a46a:	f7f6 f85b 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a46e:	bf00      	nop
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	40002000 	.word	0x40002000

0800a47c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a47c:	b480      	push	{r7}
 800a47e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a480:	b672      	cpsid	i
}
 800a482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a484:	e7fe      	b.n	800a484 <Error_Handler+0x8>
	...

0800a488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a48e:	4b11      	ldr	r3, [pc, #68]	; (800a4d4 <HAL_MspInit+0x4c>)
 800a490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a492:	4a10      	ldr	r2, [pc, #64]	; (800a4d4 <HAL_MspInit+0x4c>)
 800a494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a498:	6413      	str	r3, [r2, #64]	; 0x40
 800a49a:	4b0e      	ldr	r3, [pc, #56]	; (800a4d4 <HAL_MspInit+0x4c>)
 800a49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4a2:	607b      	str	r3, [r7, #4]
 800a4a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4a6:	4b0b      	ldr	r3, [pc, #44]	; (800a4d4 <HAL_MspInit+0x4c>)
 800a4a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4aa:	4a0a      	ldr	r2, [pc, #40]	; (800a4d4 <HAL_MspInit+0x4c>)
 800a4ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a4b0:	6453      	str	r3, [r2, #68]	; 0x44
 800a4b2:	4b08      	ldr	r3, [pc, #32]	; (800a4d4 <HAL_MspInit+0x4c>)
 800a4b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4ba:	603b      	str	r3, [r7, #0]
 800a4bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a4be:	2200      	movs	r2, #0
 800a4c0:	210f      	movs	r1, #15
 800a4c2:	f06f 0001 	mvn.w	r0, #1
 800a4c6:	f7f6 f929 	bl	800071c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a4ca:	bf00      	nop
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	40023800 	.word	0x40023800

0800a4d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b08a      	sub	sp, #40	; 0x28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4e0:	f107 0314 	add.w	r3, r7, #20
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	601a      	str	r2, [r3, #0]
 800a4e8:	605a      	str	r2, [r3, #4]
 800a4ea:	609a      	str	r2, [r3, #8]
 800a4ec:	60da      	str	r2, [r3, #12]
 800a4ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a17      	ldr	r2, [pc, #92]	; (800a554 <HAL_I2C_MspInit+0x7c>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d128      	bne.n	800a54c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4fa:	4b17      	ldr	r3, [pc, #92]	; (800a558 <HAL_I2C_MspInit+0x80>)
 800a4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fe:	4a16      	ldr	r2, [pc, #88]	; (800a558 <HAL_I2C_MspInit+0x80>)
 800a500:	f043 0302 	orr.w	r3, r3, #2
 800a504:	6313      	str	r3, [r2, #48]	; 0x30
 800a506:	4b14      	ldr	r3, [pc, #80]	; (800a558 <HAL_I2C_MspInit+0x80>)
 800a508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50a:	f003 0302 	and.w	r3, r3, #2
 800a50e:	613b      	str	r3, [r7, #16]
 800a510:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800a512:	f44f 7310 	mov.w	r3, #576	; 0x240
 800a516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a518:	2312      	movs	r3, #18
 800a51a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a51c:	2300      	movs	r3, #0
 800a51e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a520:	2303      	movs	r3, #3
 800a522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a524:	2304      	movs	r3, #4
 800a526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a528:	f107 0314 	add.w	r3, r7, #20
 800a52c:	4619      	mov	r1, r3
 800a52e:	480b      	ldr	r0, [pc, #44]	; (800a55c <HAL_I2C_MspInit+0x84>)
 800a530:	f7f6 f91e 	bl	8000770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a534:	4b08      	ldr	r3, [pc, #32]	; (800a558 <HAL_I2C_MspInit+0x80>)
 800a536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a538:	4a07      	ldr	r2, [pc, #28]	; (800a558 <HAL_I2C_MspInit+0x80>)
 800a53a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a53e:	6413      	str	r3, [r2, #64]	; 0x40
 800a540:	4b05      	ldr	r3, [pc, #20]	; (800a558 <HAL_I2C_MspInit+0x80>)
 800a542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a548:	60fb      	str	r3, [r7, #12]
 800a54a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a54c:	bf00      	nop
 800a54e:	3728      	adds	r7, #40	; 0x28
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	40005400 	.word	0x40005400
 800a558:	40023800 	.word	0x40023800
 800a55c:	40020400 	.word	0x40020400

0800a560 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b08a      	sub	sp, #40	; 0x28
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a568:	f107 0314 	add.w	r3, r7, #20
 800a56c:	2200      	movs	r2, #0
 800a56e:	601a      	str	r2, [r3, #0]
 800a570:	605a      	str	r2, [r3, #4]
 800a572:	609a      	str	r2, [r3, #8]
 800a574:	60da      	str	r2, [r3, #12]
 800a576:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a25      	ldr	r2, [pc, #148]	; (800a614 <HAL_SPI_MspInit+0xb4>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d143      	bne.n	800a60a <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a582:	4b25      	ldr	r3, [pc, #148]	; (800a618 <HAL_SPI_MspInit+0xb8>)
 800a584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a586:	4a24      	ldr	r2, [pc, #144]	; (800a618 <HAL_SPI_MspInit+0xb8>)
 800a588:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a58c:	6453      	str	r3, [r2, #68]	; 0x44
 800a58e:	4b22      	ldr	r3, [pc, #136]	; (800a618 <HAL_SPI_MspInit+0xb8>)
 800a590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a596:	613b      	str	r3, [r7, #16]
 800a598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a59a:	4b1f      	ldr	r3, [pc, #124]	; (800a618 <HAL_SPI_MspInit+0xb8>)
 800a59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59e:	4a1e      	ldr	r2, [pc, #120]	; (800a618 <HAL_SPI_MspInit+0xb8>)
 800a5a0:	f043 0301 	orr.w	r3, r3, #1
 800a5a4:	6313      	str	r3, [r2, #48]	; 0x30
 800a5a6:	4b1c      	ldr	r3, [pc, #112]	; (800a618 <HAL_SPI_MspInit+0xb8>)
 800a5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5aa:	f003 0301 	and.w	r3, r3, #1
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5b2:	4b19      	ldr	r3, [pc, #100]	; (800a618 <HAL_SPI_MspInit+0xb8>)
 800a5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b6:	4a18      	ldr	r2, [pc, #96]	; (800a618 <HAL_SPI_MspInit+0xb8>)
 800a5b8:	f043 0302 	orr.w	r3, r3, #2
 800a5bc:	6313      	str	r3, [r2, #48]	; 0x30
 800a5be:	4b16      	ldr	r3, [pc, #88]	; (800a618 <HAL_SPI_MspInit+0xb8>)
 800a5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c2:	f003 0302 	and.w	r3, r3, #2
 800a5c6:	60bb      	str	r3, [r7, #8]
 800a5c8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800a5ca:	2360      	movs	r3, #96	; 0x60
 800a5cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5ce:	2302      	movs	r3, #2
 800a5d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5d6:	2303      	movs	r3, #3
 800a5d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a5da:	2305      	movs	r3, #5
 800a5dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5de:	f107 0314 	add.w	r3, r7, #20
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	480d      	ldr	r0, [pc, #52]	; (800a61c <HAL_SPI_MspInit+0xbc>)
 800a5e6:	f7f6 f8c3 	bl	8000770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800a5ea:	2320      	movs	r3, #32
 800a5ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5ee:	2302      	movs	r3, #2
 800a5f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5f6:	2303      	movs	r3, #3
 800a5f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a5fa:	2305      	movs	r3, #5
 800a5fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a5fe:	f107 0314 	add.w	r3, r7, #20
 800a602:	4619      	mov	r1, r3
 800a604:	4806      	ldr	r0, [pc, #24]	; (800a620 <HAL_SPI_MspInit+0xc0>)
 800a606:	f7f6 f8b3 	bl	8000770 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800a60a:	bf00      	nop
 800a60c:	3728      	adds	r7, #40	; 0x28
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	40013000 	.word	0x40013000
 800a618:	40023800 	.word	0x40023800
 800a61c:	40020000 	.word	0x40020000
 800a620:	40020400 	.word	0x40020400

0800a624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b08a      	sub	sp, #40	; 0x28
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a62c:	f107 0314 	add.w	r3, r7, #20
 800a630:	2200      	movs	r2, #0
 800a632:	601a      	str	r2, [r3, #0]
 800a634:	605a      	str	r2, [r3, #4]
 800a636:	609a      	str	r2, [r3, #8]
 800a638:	60da      	str	r2, [r3, #12]
 800a63a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a17      	ldr	r2, [pc, #92]	; (800a6a0 <HAL_UART_MspInit+0x7c>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d128      	bne.n	800a698 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800a646:	4b17      	ldr	r3, [pc, #92]	; (800a6a4 <HAL_UART_MspInit+0x80>)
 800a648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64a:	4a16      	ldr	r2, [pc, #88]	; (800a6a4 <HAL_UART_MspInit+0x80>)
 800a64c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a650:	6413      	str	r3, [r2, #64]	; 0x40
 800a652:	4b14      	ldr	r3, [pc, #80]	; (800a6a4 <HAL_UART_MspInit+0x80>)
 800a654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a65a:	613b      	str	r3, [r7, #16]
 800a65c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a65e:	4b11      	ldr	r3, [pc, #68]	; (800a6a4 <HAL_UART_MspInit+0x80>)
 800a660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a662:	4a10      	ldr	r2, [pc, #64]	; (800a6a4 <HAL_UART_MspInit+0x80>)
 800a664:	f043 0308 	orr.w	r3, r3, #8
 800a668:	6313      	str	r3, [r2, #48]	; 0x30
 800a66a:	4b0e      	ldr	r3, [pc, #56]	; (800a6a4 <HAL_UART_MspInit+0x80>)
 800a66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66e:	f003 0308 	and.w	r3, r3, #8
 800a672:	60fb      	str	r3, [r7, #12]
 800a674:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800a676:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a67a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a67c:	2302      	movs	r3, #2
 800a67e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a680:	2300      	movs	r3, #0
 800a682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a684:	2303      	movs	r3, #3
 800a686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a688:	2307      	movs	r3, #7
 800a68a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a68c:	f107 0314 	add.w	r3, r7, #20
 800a690:	4619      	mov	r1, r3
 800a692:	4805      	ldr	r0, [pc, #20]	; (800a6a8 <HAL_UART_MspInit+0x84>)
 800a694:	f7f6 f86c 	bl	8000770 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800a698:	bf00      	nop
 800a69a:	3728      	adds	r7, #40	; 0x28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	40004800 	.word	0x40004800
 800a6a4:	40023800 	.word	0x40023800
 800a6a8:	40020c00 	.word	0x40020c00

0800a6ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b08c      	sub	sp, #48	; 0x30
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 800a6bc:	2200      	movs	r2, #0
 800a6be:	6879      	ldr	r1, [r7, #4]
 800a6c0:	202d      	movs	r0, #45	; 0x2d
 800a6c2:	f7f6 f82b 	bl	800071c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800a6c6:	202d      	movs	r0, #45	; 0x2d
 800a6c8:	f7f6 f844 	bl	8000754 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800a6cc:	4b1f      	ldr	r3, [pc, #124]	; (800a74c <HAL_InitTick+0xa0>)
 800a6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d0:	4a1e      	ldr	r2, [pc, #120]	; (800a74c <HAL_InitTick+0xa0>)
 800a6d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6d6:	6413      	str	r3, [r2, #64]	; 0x40
 800a6d8:	4b1c      	ldr	r3, [pc, #112]	; (800a74c <HAL_InitTick+0xa0>)
 800a6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6e0:	60fb      	str	r3, [r7, #12]
 800a6e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a6e4:	f107 0210 	add.w	r2, r7, #16
 800a6e8:	f107 0314 	add.w	r3, r7, #20
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7f8 f9ba 	bl	8002a68 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a6f4:	f7f8 f990 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	005b      	lsls	r3, r3, #1
 800a6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a700:	4a13      	ldr	r2, [pc, #76]	; (800a750 <HAL_InitTick+0xa4>)
 800a702:	fba2 2303 	umull	r2, r3, r2, r3
 800a706:	0c9b      	lsrs	r3, r3, #18
 800a708:	3b01      	subs	r3, #1
 800a70a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800a70c:	4b11      	ldr	r3, [pc, #68]	; (800a754 <HAL_InitTick+0xa8>)
 800a70e:	4a12      	ldr	r2, [pc, #72]	; (800a758 <HAL_InitTick+0xac>)
 800a710:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800a712:	4b10      	ldr	r3, [pc, #64]	; (800a754 <HAL_InitTick+0xa8>)
 800a714:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a718:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800a71a:	4a0e      	ldr	r2, [pc, #56]	; (800a754 <HAL_InitTick+0xa8>)
 800a71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800a720:	4b0c      	ldr	r3, [pc, #48]	; (800a754 <HAL_InitTick+0xa8>)
 800a722:	2200      	movs	r2, #0
 800a724:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a726:	4b0b      	ldr	r3, [pc, #44]	; (800a754 <HAL_InitTick+0xa8>)
 800a728:	2200      	movs	r2, #0
 800a72a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800a72c:	4809      	ldr	r0, [pc, #36]	; (800a754 <HAL_InitTick+0xa8>)
 800a72e:	f7f8 fe68 	bl	8003402 <HAL_TIM_Base_Init>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d104      	bne.n	800a742 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 800a738:	4806      	ldr	r0, [pc, #24]	; (800a754 <HAL_InitTick+0xa8>)
 800a73a:	f7f8 fec3 	bl	80034c4 <HAL_TIM_Base_Start_IT>
 800a73e:	4603      	mov	r3, r0
 800a740:	e000      	b.n	800a744 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800a742:	2301      	movs	r3, #1
}
 800a744:	4618      	mov	r0, r3
 800a746:	3730      	adds	r7, #48	; 0x30
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	40023800 	.word	0x40023800
 800a750:	431bde83 	.word	0x431bde83
 800a754:	20005288 	.word	0x20005288
 800a758:	40002000 	.word	0x40002000

0800a75c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a75c:	b480      	push	{r7}
 800a75e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a760:	e7fe      	b.n	800a760 <NMI_Handler+0x4>

0800a762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a762:	b480      	push	{r7}
 800a764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a766:	e7fe      	b.n	800a766 <HardFault_Handler+0x4>

0800a768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a768:	b480      	push	{r7}
 800a76a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a76c:	e7fe      	b.n	800a76c <MemManage_Handler+0x4>

0800a76e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a76e:	b480      	push	{r7}
 800a770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a772:	e7fe      	b.n	800a772 <BusFault_Handler+0x4>

0800a774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a774:	b480      	push	{r7}
 800a776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a778:	e7fe      	b.n	800a778 <UsageFault_Handler+0x4>

0800a77a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a77a:	b480      	push	{r7}
 800a77c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a77e:	bf00      	nop
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800a78c:	4802      	ldr	r0, [pc, #8]	; (800a798 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800a78e:	f7f8 ff11 	bl	80035b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800a792:	bf00      	nop
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	20005288 	.word	0x20005288

0800a79c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a7a0:	4802      	ldr	r0, [pc, #8]	; (800a7ac <OTG_FS_IRQHandler+0x10>)
 800a7a2:	f7f6 fc32 	bl	800100a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a7a6:	bf00      	nop
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	200065a4 	.word	0x200065a4

0800a7b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a7b8:	4a14      	ldr	r2, [pc, #80]	; (800a80c <_sbrk+0x5c>)
 800a7ba:	4b15      	ldr	r3, [pc, #84]	; (800a810 <_sbrk+0x60>)
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a7c4:	4b13      	ldr	r3, [pc, #76]	; (800a814 <_sbrk+0x64>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d102      	bne.n	800a7d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a7cc:	4b11      	ldr	r3, [pc, #68]	; (800a814 <_sbrk+0x64>)
 800a7ce:	4a12      	ldr	r2, [pc, #72]	; (800a818 <_sbrk+0x68>)
 800a7d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a7d2:	4b10      	ldr	r3, [pc, #64]	; (800a814 <_sbrk+0x64>)
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4413      	add	r3, r2
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d207      	bcs.n	800a7f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a7e0:	f000 fe88 	bl	800b4f4 <__errno>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	220c      	movs	r2, #12
 800a7e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a7ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7ee:	e009      	b.n	800a804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a7f0:	4b08      	ldr	r3, [pc, #32]	; (800a814 <_sbrk+0x64>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a7f6:	4b07      	ldr	r3, [pc, #28]	; (800a814 <_sbrk+0x64>)
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	4a05      	ldr	r2, [pc, #20]	; (800a814 <_sbrk+0x64>)
 800a800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a802:	68fb      	ldr	r3, [r7, #12]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3718      	adds	r7, #24
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	20050000 	.word	0x20050000
 800a810:	00000400 	.word	0x00000400
 800a814:	20004dc0 	.word	0x20004dc0
 800a818:	20006bb0 	.word	0x20006bb0

0800a81c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a81c:	b480      	push	{r7}
 800a81e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a820:	4b06      	ldr	r3, [pc, #24]	; (800a83c <SystemInit+0x20>)
 800a822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a826:	4a05      	ldr	r2, [pc, #20]	; (800a83c <SystemInit+0x20>)
 800a828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a82c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a830:	bf00      	nop
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	e000ed00 	.word	0xe000ed00

0800a840 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a844:	2200      	movs	r2, #0
 800a846:	4912      	ldr	r1, [pc, #72]	; (800a890 <MX_USB_DEVICE_Init+0x50>)
 800a848:	4812      	ldr	r0, [pc, #72]	; (800a894 <MX_USB_DEVICE_Init+0x54>)
 800a84a:	f7fb fb59 	bl	8005f00 <USBD_Init>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d001      	beq.n	800a858 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a854:	f7ff fe12 	bl	800a47c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a858:	490f      	ldr	r1, [pc, #60]	; (800a898 <MX_USB_DEVICE_Init+0x58>)
 800a85a:	480e      	ldr	r0, [pc, #56]	; (800a894 <MX_USB_DEVICE_Init+0x54>)
 800a85c:	f7fb fb86 	bl	8005f6c <USBD_RegisterClass>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d001      	beq.n	800a86a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a866:	f7ff fe09 	bl	800a47c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a86a:	490c      	ldr	r1, [pc, #48]	; (800a89c <MX_USB_DEVICE_Init+0x5c>)
 800a86c:	4809      	ldr	r0, [pc, #36]	; (800a894 <MX_USB_DEVICE_Init+0x54>)
 800a86e:	f7fb fadb 	bl	8005e28 <USBD_CDC_RegisterInterface>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d001      	beq.n	800a87c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a878:	f7ff fe00 	bl	800a47c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a87c:	4805      	ldr	r0, [pc, #20]	; (800a894 <MX_USB_DEVICE_Init+0x54>)
 800a87e:	f7fb fb96 	bl	8005fae <USBD_Start>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d001      	beq.n	800a88c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a888:	f7ff fdf8 	bl	800a47c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a88c:	bf00      	nop
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	20000134 	.word	0x20000134
 800a894:	200052d4 	.word	0x200052d4
 800a898:	20000014 	.word	0x20000014
 800a89c:	20000120 	.word	0x20000120

0800a8a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	4905      	ldr	r1, [pc, #20]	; (800a8bc <CDC_Init_FS+0x1c>)
 800a8a8:	4805      	ldr	r0, [pc, #20]	; (800a8c0 <CDC_Init_FS+0x20>)
 800a8aa:	f7fb fad2 	bl	8005e52 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a8ae:	4905      	ldr	r1, [pc, #20]	; (800a8c4 <CDC_Init_FS+0x24>)
 800a8b0:	4803      	ldr	r0, [pc, #12]	; (800a8c0 <CDC_Init_FS+0x20>)
 800a8b2:	f7fb fae7 	bl	8005e84 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a8b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	20005da4 	.word	0x20005da4
 800a8c0:	200052d4 	.word	0x200052d4
 800a8c4:	200055a4 	.word	0x200055a4

0800a8c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a8cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	4603      	mov	r3, r0
 800a8e0:	6039      	str	r1, [r7, #0]
 800a8e2:	71fb      	strb	r3, [r7, #7]
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a8e8:	79fb      	ldrb	r3, [r7, #7]
 800a8ea:	2b23      	cmp	r3, #35	; 0x23
 800a8ec:	d84a      	bhi.n	800a984 <CDC_Control_FS+0xac>
 800a8ee:	a201      	add	r2, pc, #4	; (adr r2, 800a8f4 <CDC_Control_FS+0x1c>)
 800a8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f4:	0800a985 	.word	0x0800a985
 800a8f8:	0800a985 	.word	0x0800a985
 800a8fc:	0800a985 	.word	0x0800a985
 800a900:	0800a985 	.word	0x0800a985
 800a904:	0800a985 	.word	0x0800a985
 800a908:	0800a985 	.word	0x0800a985
 800a90c:	0800a985 	.word	0x0800a985
 800a910:	0800a985 	.word	0x0800a985
 800a914:	0800a985 	.word	0x0800a985
 800a918:	0800a985 	.word	0x0800a985
 800a91c:	0800a985 	.word	0x0800a985
 800a920:	0800a985 	.word	0x0800a985
 800a924:	0800a985 	.word	0x0800a985
 800a928:	0800a985 	.word	0x0800a985
 800a92c:	0800a985 	.word	0x0800a985
 800a930:	0800a985 	.word	0x0800a985
 800a934:	0800a985 	.word	0x0800a985
 800a938:	0800a985 	.word	0x0800a985
 800a93c:	0800a985 	.word	0x0800a985
 800a940:	0800a985 	.word	0x0800a985
 800a944:	0800a985 	.word	0x0800a985
 800a948:	0800a985 	.word	0x0800a985
 800a94c:	0800a985 	.word	0x0800a985
 800a950:	0800a985 	.word	0x0800a985
 800a954:	0800a985 	.word	0x0800a985
 800a958:	0800a985 	.word	0x0800a985
 800a95c:	0800a985 	.word	0x0800a985
 800a960:	0800a985 	.word	0x0800a985
 800a964:	0800a985 	.word	0x0800a985
 800a968:	0800a985 	.word	0x0800a985
 800a96c:	0800a985 	.word	0x0800a985
 800a970:	0800a985 	.word	0x0800a985
 800a974:	0800a985 	.word	0x0800a985
 800a978:	0800a985 	.word	0x0800a985
 800a97c:	0800a985 	.word	0x0800a985
 800a980:	0800a985 	.word	0x0800a985
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a984:	bf00      	nop
  }

  return (USBD_OK);
 800a986:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a988:	4618      	mov	r0, r3
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a99e:	6879      	ldr	r1, [r7, #4]
 800a9a0:	4805      	ldr	r0, [pc, #20]	; (800a9b8 <CDC_Receive_FS+0x24>)
 800a9a2:	f7fb fa6f 	bl	8005e84 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a9a6:	4804      	ldr	r0, [pc, #16]	; (800a9b8 <CDC_Receive_FS+0x24>)
 800a9a8:	f7fb fa80 	bl	8005eac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a9ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	200052d4 	.word	0x200052d4

0800a9bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b087      	sub	sp, #28
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a9ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	371c      	adds	r7, #28
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
	...

0800a9e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08a      	sub	sp, #40	; 0x28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9e8:	f107 0314 	add.w	r3, r7, #20
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	601a      	str	r2, [r3, #0]
 800a9f0:	605a      	str	r2, [r3, #4]
 800a9f2:	609a      	str	r2, [r3, #8]
 800a9f4:	60da      	str	r2, [r3, #12]
 800a9f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa00:	d149      	bne.n	800aa96 <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa02:	4b27      	ldr	r3, [pc, #156]	; (800aaa0 <HAL_PCD_MspInit+0xc0>)
 800aa04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa06:	4a26      	ldr	r2, [pc, #152]	; (800aaa0 <HAL_PCD_MspInit+0xc0>)
 800aa08:	f043 0301 	orr.w	r3, r3, #1
 800aa0c:	6313      	str	r3, [r2, #48]	; 0x30
 800aa0e:	4b24      	ldr	r3, [pc, #144]	; (800aaa0 <HAL_PCD_MspInit+0xc0>)
 800aa10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa12:	f003 0301 	and.w	r3, r3, #1
 800aa16:	613b      	str	r3, [r7, #16]
 800aa18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800aa1a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800aa1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa20:	2302      	movs	r3, #2
 800aa22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa24:	2300      	movs	r3, #0
 800aa26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa28:	2303      	movs	r3, #3
 800aa2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aa2c:	230a      	movs	r3, #10
 800aa2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa30:	f107 0314 	add.w	r3, r7, #20
 800aa34:	4619      	mov	r1, r3
 800aa36:	481b      	ldr	r0, [pc, #108]	; (800aaa4 <HAL_PCD_MspInit+0xc4>)
 800aa38:	f7f5 fe9a 	bl	8000770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800aa3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aa42:	2300      	movs	r3, #0
 800aa44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa46:	2300      	movs	r3, #0
 800aa48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800aa4a:	f107 0314 	add.w	r3, r7, #20
 800aa4e:	4619      	mov	r1, r3
 800aa50:	4814      	ldr	r0, [pc, #80]	; (800aaa4 <HAL_PCD_MspInit+0xc4>)
 800aa52:	f7f5 fe8d 	bl	8000770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aa56:	4b12      	ldr	r3, [pc, #72]	; (800aaa0 <HAL_PCD_MspInit+0xc0>)
 800aa58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa5a:	4a11      	ldr	r2, [pc, #68]	; (800aaa0 <HAL_PCD_MspInit+0xc0>)
 800aa5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa60:	6353      	str	r3, [r2, #52]	; 0x34
 800aa62:	4b0f      	ldr	r3, [pc, #60]	; (800aaa0 <HAL_PCD_MspInit+0xc0>)
 800aa64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa6a:	60fb      	str	r3, [r7, #12]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4b0c      	ldr	r3, [pc, #48]	; (800aaa0 <HAL_PCD_MspInit+0xc0>)
 800aa70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa72:	4a0b      	ldr	r2, [pc, #44]	; (800aaa0 <HAL_PCD_MspInit+0xc0>)
 800aa74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa78:	6453      	str	r3, [r2, #68]	; 0x44
 800aa7a:	4b09      	ldr	r3, [pc, #36]	; (800aaa0 <HAL_PCD_MspInit+0xc0>)
 800aa7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa82:	60bb      	str	r3, [r7, #8]
 800aa84:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800aa86:	2200      	movs	r2, #0
 800aa88:	2105      	movs	r1, #5
 800aa8a:	2043      	movs	r0, #67	; 0x43
 800aa8c:	f7f5 fe46 	bl	800071c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aa90:	2043      	movs	r0, #67	; 0x43
 800aa92:	f7f5 fe5f 	bl	8000754 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa96:	bf00      	nop
 800aa98:	3728      	adds	r7, #40	; 0x28
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	40023800 	.word	0x40023800
 800aaa4:	40020000 	.word	0x40020000

0800aaa8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aabc:	4619      	mov	r1, r3
 800aabe:	4610      	mov	r0, r2
 800aac0:	f7fb fac0 	bl	8006044 <USBD_LL_SetupStage>
}
 800aac4:	bf00      	nop
 800aac6:	3708      	adds	r7, #8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	460b      	mov	r3, r1
 800aad6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800aade:	78fa      	ldrb	r2, [r7, #3]
 800aae0:	6879      	ldr	r1, [r7, #4]
 800aae2:	4613      	mov	r3, r2
 800aae4:	00db      	lsls	r3, r3, #3
 800aae6:	1a9b      	subs	r3, r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	440b      	add	r3, r1
 800aaec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	78fb      	ldrb	r3, [r7, #3]
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	f7fb fafa 	bl	80060ee <USBD_LL_DataOutStage>
}
 800aafa:	bf00      	nop
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b082      	sub	sp, #8
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800ab14:	78fa      	ldrb	r2, [r7, #3]
 800ab16:	6879      	ldr	r1, [r7, #4]
 800ab18:	4613      	mov	r3, r2
 800ab1a:	00db      	lsls	r3, r3, #3
 800ab1c:	1a9b      	subs	r3, r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	440b      	add	r3, r1
 800ab22:	3348      	adds	r3, #72	; 0x48
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	78fb      	ldrb	r3, [r7, #3]
 800ab28:	4619      	mov	r1, r3
 800ab2a:	f7fb fb43 	bl	80061b4 <USBD_LL_DataInStage>
}
 800ab2e:	bf00      	nop
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b082      	sub	sp, #8
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fb fc47 	bl	80063d8 <USBD_LL_SOF>
}
 800ab4a:	bf00      	nop
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b084      	sub	sp, #16
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d102      	bne.n	800ab6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ab66:	2300      	movs	r3, #0
 800ab68:	73fb      	strb	r3, [r7, #15]
 800ab6a:	e008      	b.n	800ab7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	2b02      	cmp	r3, #2
 800ab72:	d102      	bne.n	800ab7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ab74:	2301      	movs	r3, #1
 800ab76:	73fb      	strb	r3, [r7, #15]
 800ab78:	e001      	b.n	800ab7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ab7a:	f7ff fc7f 	bl	800a47c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ab84:	7bfa      	ldrb	r2, [r7, #15]
 800ab86:	4611      	mov	r1, r2
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fb fbea 	bl	8006362 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7fb fba3 	bl	80062e0 <USBD_LL_Reset>
}
 800ab9a:	bf00      	nop
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
	...

0800aba4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fb fbe5 	bl	8006382 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	6812      	ldr	r2, [r2, #0]
 800abc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800abca:	f043 0301 	orr.w	r3, r3, #1
 800abce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6a1b      	ldr	r3, [r3, #32]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d005      	beq.n	800abe4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800abd8:	4b04      	ldr	r3, [pc, #16]	; (800abec <HAL_PCD_SuspendCallback+0x48>)
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	4a03      	ldr	r2, [pc, #12]	; (800abec <HAL_PCD_SuspendCallback+0x48>)
 800abde:	f043 0306 	orr.w	r3, r3, #6
 800abe2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800abe4:	bf00      	nop
 800abe6:	3708      	adds	r7, #8
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	e000ed00 	.word	0xe000ed00

0800abf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7fb fbd4 	bl	80063ac <USBD_LL_Resume>
}
 800ac04:	bf00      	nop
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ac1e:	78fa      	ldrb	r2, [r7, #3]
 800ac20:	4611      	mov	r1, r2
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fb fbff 	bl	8006426 <USBD_LL_IsoOUTIncomplete>
}
 800ac28:	bf00      	nop
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ac42:	78fa      	ldrb	r2, [r7, #3]
 800ac44:	4611      	mov	r1, r2
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fb fbe0 	bl	800640c <USBD_LL_IsoINIncomplete>
}
 800ac4c:	bf00      	nop
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fb fbec 	bl	8006440 <USBD_LL_DevConnected>
}
 800ac68:	bf00      	nop
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7fb fbe9 	bl	8006456 <USBD_LL_DevDisconnected>
}
 800ac84:	bf00      	nop
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d13c      	bne.n	800ad16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ac9c:	4a20      	ldr	r2, [pc, #128]	; (800ad20 <USBD_LL_Init+0x94>)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4a1e      	ldr	r2, [pc, #120]	; (800ad20 <USBD_LL_Init+0x94>)
 800aca8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800acac:	4b1c      	ldr	r3, [pc, #112]	; (800ad20 <USBD_LL_Init+0x94>)
 800acae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800acb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800acb4:	4b1a      	ldr	r3, [pc, #104]	; (800ad20 <USBD_LL_Init+0x94>)
 800acb6:	2206      	movs	r2, #6
 800acb8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800acba:	4b19      	ldr	r3, [pc, #100]	; (800ad20 <USBD_LL_Init+0x94>)
 800acbc:	2202      	movs	r2, #2
 800acbe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800acc0:	4b17      	ldr	r3, [pc, #92]	; (800ad20 <USBD_LL_Init+0x94>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800acc6:	4b16      	ldr	r3, [pc, #88]	; (800ad20 <USBD_LL_Init+0x94>)
 800acc8:	2202      	movs	r2, #2
 800acca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800accc:	4b14      	ldr	r3, [pc, #80]	; (800ad20 <USBD_LL_Init+0x94>)
 800acce:	2201      	movs	r2, #1
 800acd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800acd2:	4b13      	ldr	r3, [pc, #76]	; (800ad20 <USBD_LL_Init+0x94>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800acd8:	4b11      	ldr	r3, [pc, #68]	; (800ad20 <USBD_LL_Init+0x94>)
 800acda:	2200      	movs	r2, #0
 800acdc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800acde:	4b10      	ldr	r3, [pc, #64]	; (800ad20 <USBD_LL_Init+0x94>)
 800ace0:	2201      	movs	r2, #1
 800ace2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ace4:	4b0e      	ldr	r3, [pc, #56]	; (800ad20 <USBD_LL_Init+0x94>)
 800ace6:	2200      	movs	r2, #0
 800ace8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800acea:	480d      	ldr	r0, [pc, #52]	; (800ad20 <USBD_LL_Init+0x94>)
 800acec:	f7f6 f847 	bl	8000d7e <HAL_PCD_Init>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d001      	beq.n	800acfa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800acf6:	f7ff fbc1 	bl	800a47c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800acfa:	2180      	movs	r1, #128	; 0x80
 800acfc:	4808      	ldr	r0, [pc, #32]	; (800ad20 <USBD_LL_Init+0x94>)
 800acfe:	f7f7 f9c8 	bl	8002092 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ad02:	2240      	movs	r2, #64	; 0x40
 800ad04:	2100      	movs	r1, #0
 800ad06:	4806      	ldr	r0, [pc, #24]	; (800ad20 <USBD_LL_Init+0x94>)
 800ad08:	f7f7 f97c 	bl	8002004 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ad0c:	2280      	movs	r2, #128	; 0x80
 800ad0e:	2101      	movs	r1, #1
 800ad10:	4803      	ldr	r0, [pc, #12]	; (800ad20 <USBD_LL_Init+0x94>)
 800ad12:	f7f7 f977 	bl	8002004 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3708      	adds	r7, #8
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}
 800ad20:	200065a4 	.word	0x200065a4

0800ad24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad30:	2300      	movs	r3, #0
 800ad32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7f6 f943 	bl	8000fc6 <HAL_PCD_Start>
 800ad40:	4603      	mov	r3, r0
 800ad42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
 800ad46:	4618      	mov	r0, r3
 800ad48:	f000 f980 	bl	800b04c <USBD_Get_USB_Status>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad50:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b084      	sub	sp, #16
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
 800ad62:	4608      	mov	r0, r1
 800ad64:	4611      	mov	r1, r2
 800ad66:	461a      	mov	r2, r3
 800ad68:	4603      	mov	r3, r0
 800ad6a:	70fb      	strb	r3, [r7, #3]
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	70bb      	strb	r3, [r7, #2]
 800ad70:	4613      	mov	r3, r2
 800ad72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad74:	2300      	movs	r3, #0
 800ad76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ad82:	78bb      	ldrb	r3, [r7, #2]
 800ad84:	883a      	ldrh	r2, [r7, #0]
 800ad86:	78f9      	ldrb	r1, [r7, #3]
 800ad88:	f7f6 fd43 	bl	8001812 <HAL_PCD_EP_Open>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad90:	7bfb      	ldrb	r3, [r7, #15]
 800ad92:	4618      	mov	r0, r3
 800ad94:	f000 f95a 	bl	800b04c <USBD_Get_USB_Status>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b084      	sub	sp, #16
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
 800adae:	460b      	mov	r3, r1
 800adb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adb2:	2300      	movs	r3, #0
 800adb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adb6:	2300      	movs	r3, #0
 800adb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800adc0:	78fa      	ldrb	r2, [r7, #3]
 800adc2:	4611      	mov	r1, r2
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7f6 fd8c 	bl	80018e2 <HAL_PCD_EP_Close>
 800adca:	4603      	mov	r3, r0
 800adcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adce:	7bfb      	ldrb	r3, [r7, #15]
 800add0:	4618      	mov	r0, r3
 800add2:	f000 f93b 	bl	800b04c <USBD_Get_USB_Status>
 800add6:	4603      	mov	r3, r0
 800add8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adda:	7bbb      	ldrb	r3, [r7, #14]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	460b      	mov	r3, r1
 800adee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adf0:	2300      	movs	r3, #0
 800adf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adf4:	2300      	movs	r3, #0
 800adf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800adfe:	78fa      	ldrb	r2, [r7, #3]
 800ae00:	4611      	mov	r1, r2
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7f6 fe64 	bl	8001ad0 <HAL_PCD_EP_SetStall>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f000 f91c 	bl	800b04c <USBD_Get_USB_Status>
 800ae14:	4603      	mov	r3, r0
 800ae16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae18:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}

0800ae22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b084      	sub	sp, #16
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae3c:	78fa      	ldrb	r2, [r7, #3]
 800ae3e:	4611      	mov	r1, r2
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7f6 fea9 	bl	8001b98 <HAL_PCD_EP_ClrStall>
 800ae46:	4603      	mov	r3, r0
 800ae48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae4a:	7bfb      	ldrb	r3, [r7, #15]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f000 f8fd 	bl	800b04c <USBD_Get_USB_Status>
 800ae52:	4603      	mov	r3, r0
 800ae54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae56:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	460b      	mov	r3, r1
 800ae6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ae74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	da0b      	bge.n	800ae94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ae7c:	78fb      	ldrb	r3, [r7, #3]
 800ae7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae82:	68f9      	ldr	r1, [r7, #12]
 800ae84:	4613      	mov	r3, r2
 800ae86:	00db      	lsls	r3, r3, #3
 800ae88:	1a9b      	subs	r3, r3, r2
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	440b      	add	r3, r1
 800ae8e:	333e      	adds	r3, #62	; 0x3e
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	e00b      	b.n	800aeac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ae94:	78fb      	ldrb	r3, [r7, #3]
 800ae96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae9a:	68f9      	ldr	r1, [r7, #12]
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	00db      	lsls	r3, r3, #3
 800aea0:	1a9b      	subs	r3, r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	440b      	add	r3, r1
 800aea6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aeaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3714      	adds	r7, #20
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	460b      	mov	r3, r1
 800aec2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aec4:	2300      	movs	r3, #0
 800aec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aec8:	2300      	movs	r3, #0
 800aeca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aed2:	78fa      	ldrb	r2, [r7, #3]
 800aed4:	4611      	mov	r1, r2
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7f6 fc76 	bl	80017c8 <HAL_PCD_SetAddress>
 800aedc:	4603      	mov	r3, r0
 800aede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f000 f8b2 	bl	800b04c <USBD_Get_USB_Status>
 800aee8:	4603      	mov	r3, r0
 800aeea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeec:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b086      	sub	sp, #24
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	60f8      	str	r0, [r7, #12]
 800aefe:	607a      	str	r2, [r7, #4]
 800af00:	603b      	str	r3, [r7, #0]
 800af02:	460b      	mov	r3, r1
 800af04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af06:	2300      	movs	r3, #0
 800af08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af0a:	2300      	movs	r3, #0
 800af0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af14:	7af9      	ldrb	r1, [r7, #11]
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	f7f6 fd8f 	bl	8001a3c <HAL_PCD_EP_Transmit>
 800af1e:	4603      	mov	r3, r0
 800af20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af22:	7dfb      	ldrb	r3, [r7, #23]
 800af24:	4618      	mov	r0, r3
 800af26:	f000 f891 	bl	800b04c <USBD_Get_USB_Status>
 800af2a:	4603      	mov	r3, r0
 800af2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af2e:	7dbb      	ldrb	r3, [r7, #22]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3718      	adds	r7, #24
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	607a      	str	r2, [r7, #4]
 800af42:	603b      	str	r3, [r7, #0]
 800af44:	460b      	mov	r3, r1
 800af46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af48:	2300      	movs	r3, #0
 800af4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af56:	7af9      	ldrb	r1, [r7, #11]
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	f7f6 fd0b 	bl	8001976 <HAL_PCD_EP_Receive>
 800af60:	4603      	mov	r3, r0
 800af62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af64:	7dfb      	ldrb	r3, [r7, #23]
 800af66:	4618      	mov	r0, r3
 800af68:	f000 f870 	bl	800b04c <USBD_Get_USB_Status>
 800af6c:	4603      	mov	r3, r0
 800af6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af70:	7dbb      	ldrb	r3, [r7, #22]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3718      	adds	r7, #24
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b082      	sub	sp, #8
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	460b      	mov	r3, r1
 800af84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af8c:	78fa      	ldrb	r2, [r7, #3]
 800af8e:	4611      	mov	r1, r2
 800af90:	4618      	mov	r0, r3
 800af92:	f7f6 fd3b 	bl	8001a0c <HAL_PCD_EP_GetRxCount>
 800af96:	4603      	mov	r3, r0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	460b      	mov	r3, r1
 800afaa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800afac:	78fb      	ldrb	r3, [r7, #3]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d002      	beq.n	800afb8 <HAL_PCDEx_LPM_Callback+0x18>
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d01f      	beq.n	800aff6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800afb6:	e03b      	b.n	800b030 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6a1b      	ldr	r3, [r3, #32]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d007      	beq.n	800afd0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800afc0:	f000 f83c 	bl	800b03c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800afc4:	4b1c      	ldr	r3, [pc, #112]	; (800b038 <HAL_PCDEx_LPM_Callback+0x98>)
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	4a1b      	ldr	r2, [pc, #108]	; (800b038 <HAL_PCDEx_LPM_Callback+0x98>)
 800afca:	f023 0306 	bic.w	r3, r3, #6
 800afce:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	6812      	ldr	r2, [r2, #0]
 800afde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800afe2:	f023 0301 	bic.w	r3, r3, #1
 800afe6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800afee:	4618      	mov	r0, r3
 800aff0:	f7fb f9dc 	bl	80063ac <USBD_LL_Resume>
    break;
 800aff4:	e01c      	b.n	800b030 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	6812      	ldr	r2, [r2, #0]
 800b004:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b008:	f043 0301 	orr.w	r3, r3, #1
 800b00c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b014:	4618      	mov	r0, r3
 800b016:	f7fb f9b4 	bl	8006382 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a1b      	ldr	r3, [r3, #32]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d005      	beq.n	800b02e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b022:	4b05      	ldr	r3, [pc, #20]	; (800b038 <HAL_PCDEx_LPM_Callback+0x98>)
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	4a04      	ldr	r2, [pc, #16]	; (800b038 <HAL_PCDEx_LPM_Callback+0x98>)
 800b028:	f043 0306 	orr.w	r3, r3, #6
 800b02c:	6113      	str	r3, [r2, #16]
    break;
 800b02e:	bf00      	nop
}
 800b030:	bf00      	nop
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	e000ed00 	.word	0xe000ed00

0800b03c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b03c:	b480      	push	{r7}
 800b03e:	af00      	add	r7, sp, #0
	//SystemClock_Config();
}
 800b040:	bf00      	nop
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr
	...

0800b04c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b085      	sub	sp, #20
 800b050:	af00      	add	r7, sp, #0
 800b052:	4603      	mov	r3, r0
 800b054:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b056:	2300      	movs	r3, #0
 800b058:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b05a:	79fb      	ldrb	r3, [r7, #7]
 800b05c:	2b03      	cmp	r3, #3
 800b05e:	d817      	bhi.n	800b090 <USBD_Get_USB_Status+0x44>
 800b060:	a201      	add	r2, pc, #4	; (adr r2, 800b068 <USBD_Get_USB_Status+0x1c>)
 800b062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b066:	bf00      	nop
 800b068:	0800b079 	.word	0x0800b079
 800b06c:	0800b07f 	.word	0x0800b07f
 800b070:	0800b085 	.word	0x0800b085
 800b074:	0800b08b 	.word	0x0800b08b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b078:	2300      	movs	r3, #0
 800b07a:	73fb      	strb	r3, [r7, #15]
    break;
 800b07c:	e00b      	b.n	800b096 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b07e:	2303      	movs	r3, #3
 800b080:	73fb      	strb	r3, [r7, #15]
    break;
 800b082:	e008      	b.n	800b096 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b084:	2301      	movs	r3, #1
 800b086:	73fb      	strb	r3, [r7, #15]
    break;
 800b088:	e005      	b.n	800b096 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b08a:	2303      	movs	r3, #3
 800b08c:	73fb      	strb	r3, [r7, #15]
    break;
 800b08e:	e002      	b.n	800b096 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b090:	2303      	movs	r3, #3
 800b092:	73fb      	strb	r3, [r7, #15]
    break;
 800b094:	bf00      	nop
  }
  return usb_status;
 800b096:	7bfb      	ldrb	r3, [r7, #15]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3714      	adds	r7, #20
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	6039      	str	r1, [r7, #0]
 800b0ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	2212      	movs	r2, #18
 800b0b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b0b6:	4b03      	ldr	r3, [pc, #12]	; (800b0c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	370c      	adds	r7, #12
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr
 800b0c4:	20000154 	.word	0x20000154

0800b0c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	6039      	str	r1, [r7, #0]
 800b0d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	2204      	movs	r2, #4
 800b0d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b0da:	4b03      	ldr	r3, [pc, #12]	; (800b0e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr
 800b0e8:	20000174 	.word	0x20000174

0800b0ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	6039      	str	r1, [r7, #0]
 800b0f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b0f8:	79fb      	ldrb	r3, [r7, #7]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d105      	bne.n	800b10a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b0fe:	683a      	ldr	r2, [r7, #0]
 800b100:	4907      	ldr	r1, [pc, #28]	; (800b120 <USBD_FS_ProductStrDescriptor+0x34>)
 800b102:	4808      	ldr	r0, [pc, #32]	; (800b124 <USBD_FS_ProductStrDescriptor+0x38>)
 800b104:	f7fb ff5a 	bl	8006fbc <USBD_GetString>
 800b108:	e004      	b.n	800b114 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	4904      	ldr	r1, [pc, #16]	; (800b120 <USBD_FS_ProductStrDescriptor+0x34>)
 800b10e:	4805      	ldr	r0, [pc, #20]	; (800b124 <USBD_FS_ProductStrDescriptor+0x38>)
 800b110:	f7fb ff54 	bl	8006fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b114:	4b02      	ldr	r3, [pc, #8]	; (800b120 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b116:	4618      	mov	r0, r3
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	200069a8 	.word	0x200069a8
 800b124:	0800b848 	.word	0x0800b848

0800b128 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	4603      	mov	r3, r0
 800b130:	6039      	str	r1, [r7, #0]
 800b132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	4904      	ldr	r1, [pc, #16]	; (800b148 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b138:	4804      	ldr	r0, [pc, #16]	; (800b14c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b13a:	f7fb ff3f 	bl	8006fbc <USBD_GetString>
  return USBD_StrDesc;
 800b13e:	4b02      	ldr	r3, [pc, #8]	; (800b148 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b140:	4618      	mov	r0, r3
 800b142:	3708      	adds	r7, #8
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	200069a8 	.word	0x200069a8
 800b14c:	0800b860 	.word	0x0800b860

0800b150 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	4603      	mov	r3, r0
 800b158:	6039      	str	r1, [r7, #0]
 800b15a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	221a      	movs	r2, #26
 800b160:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b162:	f000 f855 	bl	800b210 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b166:	4b02      	ldr	r3, [pc, #8]	; (800b170 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	20000178 	.word	0x20000178

0800b174 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	4603      	mov	r3, r0
 800b17c:	6039      	str	r1, [r7, #0]
 800b17e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b180:	79fb      	ldrb	r3, [r7, #7]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d105      	bne.n	800b192 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	4907      	ldr	r1, [pc, #28]	; (800b1a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b18a:	4808      	ldr	r0, [pc, #32]	; (800b1ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800b18c:	f7fb ff16 	bl	8006fbc <USBD_GetString>
 800b190:	e004      	b.n	800b19c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	4904      	ldr	r1, [pc, #16]	; (800b1a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b196:	4805      	ldr	r0, [pc, #20]	; (800b1ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800b198:	f7fb ff10 	bl	8006fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b19c:	4b02      	ldr	r3, [pc, #8]	; (800b1a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	200069a8 	.word	0x200069a8
 800b1ac:	0800b874 	.word	0x0800b874

0800b1b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	6039      	str	r1, [r7, #0]
 800b1ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b1bc:	79fb      	ldrb	r3, [r7, #7]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d105      	bne.n	800b1ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	4907      	ldr	r1, [pc, #28]	; (800b1e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b1c6:	4808      	ldr	r0, [pc, #32]	; (800b1e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b1c8:	f7fb fef8 	bl	8006fbc <USBD_GetString>
 800b1cc:	e004      	b.n	800b1d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b1ce:	683a      	ldr	r2, [r7, #0]
 800b1d0:	4904      	ldr	r1, [pc, #16]	; (800b1e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b1d2:	4805      	ldr	r0, [pc, #20]	; (800b1e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b1d4:	f7fb fef2 	bl	8006fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1d8:	4b02      	ldr	r3, [pc, #8]	; (800b1e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3708      	adds	r7, #8
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	200069a8 	.word	0x200069a8
 800b1e8:	0800b880 	.word	0x0800b880

0800b1ec <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	6039      	str	r1, [r7, #0]
 800b1f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	220c      	movs	r2, #12
 800b1fc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b1fe:	4b03      	ldr	r3, [pc, #12]	; (800b20c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b200:	4618      	mov	r0, r3
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	20000168 	.word	0x20000168

0800b210 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b216:	4b0f      	ldr	r3, [pc, #60]	; (800b254 <Get_SerialNum+0x44>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b21c:	4b0e      	ldr	r3, [pc, #56]	; (800b258 <Get_SerialNum+0x48>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b222:	4b0e      	ldr	r3, [pc, #56]	; (800b25c <Get_SerialNum+0x4c>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4413      	add	r3, r2
 800b22e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d009      	beq.n	800b24a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b236:	2208      	movs	r2, #8
 800b238:	4909      	ldr	r1, [pc, #36]	; (800b260 <Get_SerialNum+0x50>)
 800b23a:	68f8      	ldr	r0, [r7, #12]
 800b23c:	f000 f814 	bl	800b268 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b240:	2204      	movs	r2, #4
 800b242:	4908      	ldr	r1, [pc, #32]	; (800b264 <Get_SerialNum+0x54>)
 800b244:	68b8      	ldr	r0, [r7, #8]
 800b246:	f000 f80f 	bl	800b268 <IntToUnicode>
  }
}
 800b24a:	bf00      	nop
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	1ff0f420 	.word	0x1ff0f420
 800b258:	1ff0f424 	.word	0x1ff0f424
 800b25c:	1ff0f428 	.word	0x1ff0f428
 800b260:	2000017a 	.word	0x2000017a
 800b264:	2000018a 	.word	0x2000018a

0800b268 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b268:	b480      	push	{r7}
 800b26a:	b087      	sub	sp, #28
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	4613      	mov	r3, r2
 800b274:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b276:	2300      	movs	r3, #0
 800b278:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b27a:	2300      	movs	r3, #0
 800b27c:	75fb      	strb	r3, [r7, #23]
 800b27e:	e027      	b.n	800b2d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	0f1b      	lsrs	r3, r3, #28
 800b284:	2b09      	cmp	r3, #9
 800b286:	d80b      	bhi.n	800b2a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	0f1b      	lsrs	r3, r3, #28
 800b28c:	b2da      	uxtb	r2, r3
 800b28e:	7dfb      	ldrb	r3, [r7, #23]
 800b290:	005b      	lsls	r3, r3, #1
 800b292:	4619      	mov	r1, r3
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	440b      	add	r3, r1
 800b298:	3230      	adds	r2, #48	; 0x30
 800b29a:	b2d2      	uxtb	r2, r2
 800b29c:	701a      	strb	r2, [r3, #0]
 800b29e:	e00a      	b.n	800b2b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	0f1b      	lsrs	r3, r3, #28
 800b2a4:	b2da      	uxtb	r2, r3
 800b2a6:	7dfb      	ldrb	r3, [r7, #23]
 800b2a8:	005b      	lsls	r3, r3, #1
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	440b      	add	r3, r1
 800b2b0:	3237      	adds	r2, #55	; 0x37
 800b2b2:	b2d2      	uxtb	r2, r2
 800b2b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	011b      	lsls	r3, r3, #4
 800b2ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b2bc:	7dfb      	ldrb	r3, [r7, #23]
 800b2be:	005b      	lsls	r3, r3, #1
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b2ca:	7dfb      	ldrb	r3, [r7, #23]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	75fb      	strb	r3, [r7, #23]
 800b2d0:	7dfa      	ldrb	r2, [r7, #23]
 800b2d2:	79fb      	ldrb	r3, [r7, #7]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d3d3      	bcc.n	800b280 <IntToUnicode+0x18>
  }
}
 800b2d8:	bf00      	nop
 800b2da:	bf00      	nop
 800b2dc:	371c      	adds	r7, #28
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr
	...

0800b2e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b2f2:	4b06      	ldr	r3, [pc, #24]	; (800b30c <USER_initialize+0x24>)
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b2f8:	4b04      	ldr	r3, [pc, #16]	; (800b30c <USER_initialize+0x24>)
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	370c      	adds	r7, #12
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	20000192 	.word	0x20000192

0800b310 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	4603      	mov	r3, r0
 800b318:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b31a:	4b06      	ldr	r3, [pc, #24]	; (800b334 <USER_status+0x24>)
 800b31c:	2201      	movs	r2, #1
 800b31e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b320:	4b04      	ldr	r3, [pc, #16]	; (800b334 <USER_status+0x24>)
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b326:	4618      	mov	r0, r3
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	20000192 	.word	0x20000192

0800b338 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60b9      	str	r1, [r7, #8]
 800b340:	607a      	str	r2, [r7, #4]
 800b342:	603b      	str	r3, [r7, #0]
 800b344:	4603      	mov	r3, r0
 800b346:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b348:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3714      	adds	r7, #20
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr

0800b356 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b356:	b480      	push	{r7}
 800b358:	b085      	sub	sp, #20
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
 800b360:	603b      	str	r3, [r7, #0]
 800b362:	4603      	mov	r3, r0
 800b364:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b366:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3714      	adds	r7, #20
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b374:	b480      	push	{r7}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
 800b37a:	4603      	mov	r3, r0
 800b37c:	603a      	str	r2, [r7, #0]
 800b37e:	71fb      	strb	r3, [r7, #7]
 800b380:	460b      	mov	r3, r1
 800b382:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b384:	2301      	movs	r3, #1
 800b386:	73fb      	strb	r3, [r7, #15]
    return res;
 800b388:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3714      	adds	r7, #20
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
	...

0800b398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b398:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b3d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b39c:	480d      	ldr	r0, [pc, #52]	; (800b3d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b39e:	490e      	ldr	r1, [pc, #56]	; (800b3d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b3a0:	4a0e      	ldr	r2, [pc, #56]	; (800b3dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b3a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b3a4:	e002      	b.n	800b3ac <LoopCopyDataInit>

0800b3a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b3a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b3a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b3aa:	3304      	adds	r3, #4

0800b3ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b3ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b3ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b3b0:	d3f9      	bcc.n	800b3a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b3b2:	4a0b      	ldr	r2, [pc, #44]	; (800b3e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b3b4:	4c0b      	ldr	r4, [pc, #44]	; (800b3e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 800b3b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b3b8:	e001      	b.n	800b3be <LoopFillZerobss>

0800b3ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b3ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b3bc:	3204      	adds	r2, #4

0800b3be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b3be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b3c0:	d3fb      	bcc.n	800b3ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b3c2:	f7ff fa2b 	bl	800a81c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b3c6:	f000 f89b 	bl	800b500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b3ca:	f7fe fd41 	bl	8009e50 <main>
  bx  lr    
 800b3ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b3d0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800b3d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b3d8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800b3dc:	0800b960 	.word	0x0800b960
  ldr r2, =_sbss
 800b3e0:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 800b3e4:	20006bac 	.word	0x20006bac

0800b3e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b3e8:	e7fe      	b.n	800b3e8 <ADC_IRQHandler>

0800b3ea <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b084      	sub	sp, #16
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d104      	bne.n	800b402 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800b3f8:	b672      	cpsid	i
}
 800b3fa:	bf00      	nop
 800b3fc:	f7ff f83e 	bl	800a47c <Error_Handler>
 800b400:	e7fe      	b.n	800b400 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	7a1b      	ldrb	r3, [r3, #8]
 800b406:	2b01      	cmp	r3, #1
 800b408:	d904      	bls.n	800b414 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800b40a:	b672      	cpsid	i
}
 800b40c:	bf00      	nop
 800b40e:	f7ff f835 	bl	800a47c <Error_Handler>
 800b412:	e7fe      	b.n	800b412 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	7a1b      	ldrb	r3, [r3, #8]
 800b418:	1c5a      	adds	r2, r3, #1
 800b41a:	b2d1      	uxtb	r1, r2
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	7211      	strb	r1, [r2, #8]
 800b420:	4619      	mov	r1, r3
	__asm volatile
 800b422:	f3ef 8211 	mrs	r2, BASEPRI
 800b426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42a:	b672      	cpsid	i
 800b42c:	f383 8811 	msr	BASEPRI, r3
 800b430:	f3bf 8f6f 	isb	sy
 800b434:	f3bf 8f4f 	dsb	sy
 800b438:	b662      	cpsie	i
 800b43a:	60fa      	str	r2, [r7, #12]
 800b43c:	60bb      	str	r3, [r7, #8]
	return ulOriginalBASEPRI;
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800b446:	bf00      	nop
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b084      	sub	sp, #16
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d104      	bne.n	800b466 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800b45c:	b672      	cpsid	i
}
 800b45e:	bf00      	nop
 800b460:	f7ff f80c 	bl	800a47c <Error_Handler>
 800b464:	e7fe      	b.n	800b464 <stm32_lock_release+0x16>
  lock->nesting_level--;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	7a1b      	ldrb	r3, [r3, #8]
 800b46a:	3b01      	subs	r3, #1
 800b46c:	b2da      	uxtb	r2, r3
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	7a1b      	ldrb	r3, [r3, #8]
 800b476:	2b01      	cmp	r3, #1
 800b478:	d904      	bls.n	800b484 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800b47a:	b672      	cpsid	i
}
 800b47c:	bf00      	nop
 800b47e:	f7fe fffd 	bl	800a47c <Error_Handler>
 800b482:	e7fe      	b.n	800b482 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	7a1b      	ldrb	r3, [r3, #8]
 800b488:	461a      	mov	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b490:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f383 8811 	msr	BASEPRI, r3
}
 800b498:	bf00      	nop
}
 800b49a:	bf00      	nop
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b082      	sub	sp, #8
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d104      	bne.n	800b4ba <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800b4b0:	b672      	cpsid	i
}
 800b4b2:	bf00      	nop
 800b4b4:	f7fe ffe2 	bl	800a47c <Error_Handler>
 800b4b8:	e7fe      	b.n	800b4b8 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7ff ff94 	bl	800b3ea <stm32_lock_acquire>
}
 800b4c2:	bf00      	nop
 800b4c4:	3708      	adds	r7, #8
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b082      	sub	sp, #8
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d104      	bne.n	800b4e2 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800b4d8:	b672      	cpsid	i
}
 800b4da:	bf00      	nop
 800b4dc:	f7fe ffce 	bl	800a47c <Error_Handler>
 800b4e0:	e7fe      	b.n	800b4e0 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7ff ffb2 	bl	800b44e <stm32_lock_release>
}
 800b4ea:	bf00      	nop
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
	...

0800b4f4 <__errno>:
 800b4f4:	4b01      	ldr	r3, [pc, #4]	; (800b4fc <__errno+0x8>)
 800b4f6:	6818      	ldr	r0, [r3, #0]
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	200001a8 	.word	0x200001a8

0800b500 <__libc_init_array>:
 800b500:	b570      	push	{r4, r5, r6, lr}
 800b502:	4d0d      	ldr	r5, [pc, #52]	; (800b538 <__libc_init_array+0x38>)
 800b504:	4c0d      	ldr	r4, [pc, #52]	; (800b53c <__libc_init_array+0x3c>)
 800b506:	1b64      	subs	r4, r4, r5
 800b508:	10a4      	asrs	r4, r4, #2
 800b50a:	2600      	movs	r6, #0
 800b50c:	42a6      	cmp	r6, r4
 800b50e:	d109      	bne.n	800b524 <__libc_init_array+0x24>
 800b510:	4d0b      	ldr	r5, [pc, #44]	; (800b540 <__libc_init_array+0x40>)
 800b512:	4c0c      	ldr	r4, [pc, #48]	; (800b544 <__libc_init_array+0x44>)
 800b514:	f000 f96e 	bl	800b7f4 <_init>
 800b518:	1b64      	subs	r4, r4, r5
 800b51a:	10a4      	asrs	r4, r4, #2
 800b51c:	2600      	movs	r6, #0
 800b51e:	42a6      	cmp	r6, r4
 800b520:	d105      	bne.n	800b52e <__libc_init_array+0x2e>
 800b522:	bd70      	pop	{r4, r5, r6, pc}
 800b524:	f855 3b04 	ldr.w	r3, [r5], #4
 800b528:	4798      	blx	r3
 800b52a:	3601      	adds	r6, #1
 800b52c:	e7ee      	b.n	800b50c <__libc_init_array+0xc>
 800b52e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b532:	4798      	blx	r3
 800b534:	3601      	adds	r6, #1
 800b536:	e7f2      	b.n	800b51e <__libc_init_array+0x1e>
 800b538:	0800b958 	.word	0x0800b958
 800b53c:	0800b958 	.word	0x0800b958
 800b540:	0800b958 	.word	0x0800b958
 800b544:	0800b95c 	.word	0x0800b95c

0800b548 <malloc>:
 800b548:	4b02      	ldr	r3, [pc, #8]	; (800b554 <malloc+0xc>)
 800b54a:	4601      	mov	r1, r0
 800b54c:	6818      	ldr	r0, [r3, #0]
 800b54e:	f000 b871 	b.w	800b634 <_malloc_r>
 800b552:	bf00      	nop
 800b554:	200001a8 	.word	0x200001a8

0800b558 <free>:
 800b558:	4b02      	ldr	r3, [pc, #8]	; (800b564 <free+0xc>)
 800b55a:	4601      	mov	r1, r0
 800b55c:	6818      	ldr	r0, [r3, #0]
 800b55e:	f000 b819 	b.w	800b594 <_free_r>
 800b562:	bf00      	nop
 800b564:	200001a8 	.word	0x200001a8

0800b568 <memcpy>:
 800b568:	440a      	add	r2, r1
 800b56a:	4291      	cmp	r1, r2
 800b56c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b570:	d100      	bne.n	800b574 <memcpy+0xc>
 800b572:	4770      	bx	lr
 800b574:	b510      	push	{r4, lr}
 800b576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b57a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b57e:	4291      	cmp	r1, r2
 800b580:	d1f9      	bne.n	800b576 <memcpy+0xe>
 800b582:	bd10      	pop	{r4, pc}

0800b584 <memset>:
 800b584:	4402      	add	r2, r0
 800b586:	4603      	mov	r3, r0
 800b588:	4293      	cmp	r3, r2
 800b58a:	d100      	bne.n	800b58e <memset+0xa>
 800b58c:	4770      	bx	lr
 800b58e:	f803 1b01 	strb.w	r1, [r3], #1
 800b592:	e7f9      	b.n	800b588 <memset+0x4>

0800b594 <_free_r>:
 800b594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b596:	2900      	cmp	r1, #0
 800b598:	d048      	beq.n	800b62c <_free_r+0x98>
 800b59a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b59e:	9001      	str	r0, [sp, #4]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f1a1 0404 	sub.w	r4, r1, #4
 800b5a6:	bfb8      	it	lt
 800b5a8:	18e4      	addlt	r4, r4, r3
 800b5aa:	f000 f917 	bl	800b7dc <__malloc_lock>
 800b5ae:	4a20      	ldr	r2, [pc, #128]	; (800b630 <_free_r+0x9c>)
 800b5b0:	9801      	ldr	r0, [sp, #4]
 800b5b2:	6813      	ldr	r3, [r2, #0]
 800b5b4:	4615      	mov	r5, r2
 800b5b6:	b933      	cbnz	r3, 800b5c6 <_free_r+0x32>
 800b5b8:	6063      	str	r3, [r4, #4]
 800b5ba:	6014      	str	r4, [r2, #0]
 800b5bc:	b003      	add	sp, #12
 800b5be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5c2:	f000 b911 	b.w	800b7e8 <__malloc_unlock>
 800b5c6:	42a3      	cmp	r3, r4
 800b5c8:	d90b      	bls.n	800b5e2 <_free_r+0x4e>
 800b5ca:	6821      	ldr	r1, [r4, #0]
 800b5cc:	1862      	adds	r2, r4, r1
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	bf04      	itt	eq
 800b5d2:	681a      	ldreq	r2, [r3, #0]
 800b5d4:	685b      	ldreq	r3, [r3, #4]
 800b5d6:	6063      	str	r3, [r4, #4]
 800b5d8:	bf04      	itt	eq
 800b5da:	1852      	addeq	r2, r2, r1
 800b5dc:	6022      	streq	r2, [r4, #0]
 800b5de:	602c      	str	r4, [r5, #0]
 800b5e0:	e7ec      	b.n	800b5bc <_free_r+0x28>
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	b10b      	cbz	r3, 800b5ec <_free_r+0x58>
 800b5e8:	42a3      	cmp	r3, r4
 800b5ea:	d9fa      	bls.n	800b5e2 <_free_r+0x4e>
 800b5ec:	6811      	ldr	r1, [r2, #0]
 800b5ee:	1855      	adds	r5, r2, r1
 800b5f0:	42a5      	cmp	r5, r4
 800b5f2:	d10b      	bne.n	800b60c <_free_r+0x78>
 800b5f4:	6824      	ldr	r4, [r4, #0]
 800b5f6:	4421      	add	r1, r4
 800b5f8:	1854      	adds	r4, r2, r1
 800b5fa:	42a3      	cmp	r3, r4
 800b5fc:	6011      	str	r1, [r2, #0]
 800b5fe:	d1dd      	bne.n	800b5bc <_free_r+0x28>
 800b600:	681c      	ldr	r4, [r3, #0]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	6053      	str	r3, [r2, #4]
 800b606:	4421      	add	r1, r4
 800b608:	6011      	str	r1, [r2, #0]
 800b60a:	e7d7      	b.n	800b5bc <_free_r+0x28>
 800b60c:	d902      	bls.n	800b614 <_free_r+0x80>
 800b60e:	230c      	movs	r3, #12
 800b610:	6003      	str	r3, [r0, #0]
 800b612:	e7d3      	b.n	800b5bc <_free_r+0x28>
 800b614:	6825      	ldr	r5, [r4, #0]
 800b616:	1961      	adds	r1, r4, r5
 800b618:	428b      	cmp	r3, r1
 800b61a:	bf04      	itt	eq
 800b61c:	6819      	ldreq	r1, [r3, #0]
 800b61e:	685b      	ldreq	r3, [r3, #4]
 800b620:	6063      	str	r3, [r4, #4]
 800b622:	bf04      	itt	eq
 800b624:	1949      	addeq	r1, r1, r5
 800b626:	6021      	streq	r1, [r4, #0]
 800b628:	6054      	str	r4, [r2, #4]
 800b62a:	e7c7      	b.n	800b5bc <_free_r+0x28>
 800b62c:	b003      	add	sp, #12
 800b62e:	bd30      	pop	{r4, r5, pc}
 800b630:	20004dd0 	.word	0x20004dd0

0800b634 <_malloc_r>:
 800b634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b636:	1ccd      	adds	r5, r1, #3
 800b638:	f025 0503 	bic.w	r5, r5, #3
 800b63c:	3508      	adds	r5, #8
 800b63e:	2d0c      	cmp	r5, #12
 800b640:	bf38      	it	cc
 800b642:	250c      	movcc	r5, #12
 800b644:	2d00      	cmp	r5, #0
 800b646:	4606      	mov	r6, r0
 800b648:	db01      	blt.n	800b64e <_malloc_r+0x1a>
 800b64a:	42a9      	cmp	r1, r5
 800b64c:	d903      	bls.n	800b656 <_malloc_r+0x22>
 800b64e:	230c      	movs	r3, #12
 800b650:	6033      	str	r3, [r6, #0]
 800b652:	2000      	movs	r0, #0
 800b654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b656:	f000 f8c1 	bl	800b7dc <__malloc_lock>
 800b65a:	4921      	ldr	r1, [pc, #132]	; (800b6e0 <_malloc_r+0xac>)
 800b65c:	680a      	ldr	r2, [r1, #0]
 800b65e:	4614      	mov	r4, r2
 800b660:	b99c      	cbnz	r4, 800b68a <_malloc_r+0x56>
 800b662:	4f20      	ldr	r7, [pc, #128]	; (800b6e4 <_malloc_r+0xb0>)
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	b923      	cbnz	r3, 800b672 <_malloc_r+0x3e>
 800b668:	4621      	mov	r1, r4
 800b66a:	4630      	mov	r0, r6
 800b66c:	f000 f8a6 	bl	800b7bc <_sbrk_r>
 800b670:	6038      	str	r0, [r7, #0]
 800b672:	4629      	mov	r1, r5
 800b674:	4630      	mov	r0, r6
 800b676:	f000 f8a1 	bl	800b7bc <_sbrk_r>
 800b67a:	1c43      	adds	r3, r0, #1
 800b67c:	d123      	bne.n	800b6c6 <_malloc_r+0x92>
 800b67e:	230c      	movs	r3, #12
 800b680:	6033      	str	r3, [r6, #0]
 800b682:	4630      	mov	r0, r6
 800b684:	f000 f8b0 	bl	800b7e8 <__malloc_unlock>
 800b688:	e7e3      	b.n	800b652 <_malloc_r+0x1e>
 800b68a:	6823      	ldr	r3, [r4, #0]
 800b68c:	1b5b      	subs	r3, r3, r5
 800b68e:	d417      	bmi.n	800b6c0 <_malloc_r+0x8c>
 800b690:	2b0b      	cmp	r3, #11
 800b692:	d903      	bls.n	800b69c <_malloc_r+0x68>
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	441c      	add	r4, r3
 800b698:	6025      	str	r5, [r4, #0]
 800b69a:	e004      	b.n	800b6a6 <_malloc_r+0x72>
 800b69c:	6863      	ldr	r3, [r4, #4]
 800b69e:	42a2      	cmp	r2, r4
 800b6a0:	bf0c      	ite	eq
 800b6a2:	600b      	streq	r3, [r1, #0]
 800b6a4:	6053      	strne	r3, [r2, #4]
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	f000 f89e 	bl	800b7e8 <__malloc_unlock>
 800b6ac:	f104 000b 	add.w	r0, r4, #11
 800b6b0:	1d23      	adds	r3, r4, #4
 800b6b2:	f020 0007 	bic.w	r0, r0, #7
 800b6b6:	1ac2      	subs	r2, r0, r3
 800b6b8:	d0cc      	beq.n	800b654 <_malloc_r+0x20>
 800b6ba:	1a1b      	subs	r3, r3, r0
 800b6bc:	50a3      	str	r3, [r4, r2]
 800b6be:	e7c9      	b.n	800b654 <_malloc_r+0x20>
 800b6c0:	4622      	mov	r2, r4
 800b6c2:	6864      	ldr	r4, [r4, #4]
 800b6c4:	e7cc      	b.n	800b660 <_malloc_r+0x2c>
 800b6c6:	1cc4      	adds	r4, r0, #3
 800b6c8:	f024 0403 	bic.w	r4, r4, #3
 800b6cc:	42a0      	cmp	r0, r4
 800b6ce:	d0e3      	beq.n	800b698 <_malloc_r+0x64>
 800b6d0:	1a21      	subs	r1, r4, r0
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	f000 f872 	bl	800b7bc <_sbrk_r>
 800b6d8:	3001      	adds	r0, #1
 800b6da:	d1dd      	bne.n	800b698 <_malloc_r+0x64>
 800b6dc:	e7cf      	b.n	800b67e <_malloc_r+0x4a>
 800b6de:	bf00      	nop
 800b6e0:	20004dd0 	.word	0x20004dd0
 800b6e4:	20004dd4 	.word	0x20004dd4

0800b6e8 <cleanup_glue>:
 800b6e8:	b538      	push	{r3, r4, r5, lr}
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	6809      	ldr	r1, [r1, #0]
 800b6ee:	4605      	mov	r5, r0
 800b6f0:	b109      	cbz	r1, 800b6f6 <cleanup_glue+0xe>
 800b6f2:	f7ff fff9 	bl	800b6e8 <cleanup_glue>
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6fe:	f7ff bf49 	b.w	800b594 <_free_r>
	...

0800b704 <_reclaim_reent>:
 800b704:	4b2c      	ldr	r3, [pc, #176]	; (800b7b8 <_reclaim_reent+0xb4>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4283      	cmp	r3, r0
 800b70a:	b570      	push	{r4, r5, r6, lr}
 800b70c:	4604      	mov	r4, r0
 800b70e:	d051      	beq.n	800b7b4 <_reclaim_reent+0xb0>
 800b710:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b712:	b143      	cbz	r3, 800b726 <_reclaim_reent+0x22>
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d14a      	bne.n	800b7b0 <_reclaim_reent+0xac>
 800b71a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b71c:	6819      	ldr	r1, [r3, #0]
 800b71e:	b111      	cbz	r1, 800b726 <_reclaim_reent+0x22>
 800b720:	4620      	mov	r0, r4
 800b722:	f7ff ff37 	bl	800b594 <_free_r>
 800b726:	6961      	ldr	r1, [r4, #20]
 800b728:	b111      	cbz	r1, 800b730 <_reclaim_reent+0x2c>
 800b72a:	4620      	mov	r0, r4
 800b72c:	f7ff ff32 	bl	800b594 <_free_r>
 800b730:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b732:	b111      	cbz	r1, 800b73a <_reclaim_reent+0x36>
 800b734:	4620      	mov	r0, r4
 800b736:	f7ff ff2d 	bl	800b594 <_free_r>
 800b73a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b73c:	b111      	cbz	r1, 800b744 <_reclaim_reent+0x40>
 800b73e:	4620      	mov	r0, r4
 800b740:	f7ff ff28 	bl	800b594 <_free_r>
 800b744:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b746:	b111      	cbz	r1, 800b74e <_reclaim_reent+0x4a>
 800b748:	4620      	mov	r0, r4
 800b74a:	f7ff ff23 	bl	800b594 <_free_r>
 800b74e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b750:	b111      	cbz	r1, 800b758 <_reclaim_reent+0x54>
 800b752:	4620      	mov	r0, r4
 800b754:	f7ff ff1e 	bl	800b594 <_free_r>
 800b758:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b75a:	b111      	cbz	r1, 800b762 <_reclaim_reent+0x5e>
 800b75c:	4620      	mov	r0, r4
 800b75e:	f7ff ff19 	bl	800b594 <_free_r>
 800b762:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b764:	b111      	cbz	r1, 800b76c <_reclaim_reent+0x68>
 800b766:	4620      	mov	r0, r4
 800b768:	f7ff ff14 	bl	800b594 <_free_r>
 800b76c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b76e:	b111      	cbz	r1, 800b776 <_reclaim_reent+0x72>
 800b770:	4620      	mov	r0, r4
 800b772:	f7ff ff0f 	bl	800b594 <_free_r>
 800b776:	69a3      	ldr	r3, [r4, #24]
 800b778:	b1e3      	cbz	r3, 800b7b4 <_reclaim_reent+0xb0>
 800b77a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b77c:	4620      	mov	r0, r4
 800b77e:	4798      	blx	r3
 800b780:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b782:	b1b9      	cbz	r1, 800b7b4 <_reclaim_reent+0xb0>
 800b784:	4620      	mov	r0, r4
 800b786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b78a:	f7ff bfad 	b.w	800b6e8 <cleanup_glue>
 800b78e:	5949      	ldr	r1, [r1, r5]
 800b790:	b941      	cbnz	r1, 800b7a4 <_reclaim_reent+0xa0>
 800b792:	3504      	adds	r5, #4
 800b794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b796:	2d80      	cmp	r5, #128	; 0x80
 800b798:	68d9      	ldr	r1, [r3, #12]
 800b79a:	d1f8      	bne.n	800b78e <_reclaim_reent+0x8a>
 800b79c:	4620      	mov	r0, r4
 800b79e:	f7ff fef9 	bl	800b594 <_free_r>
 800b7a2:	e7ba      	b.n	800b71a <_reclaim_reent+0x16>
 800b7a4:	680e      	ldr	r6, [r1, #0]
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f7ff fef4 	bl	800b594 <_free_r>
 800b7ac:	4631      	mov	r1, r6
 800b7ae:	e7ef      	b.n	800b790 <_reclaim_reent+0x8c>
 800b7b0:	2500      	movs	r5, #0
 800b7b2:	e7ef      	b.n	800b794 <_reclaim_reent+0x90>
 800b7b4:	bd70      	pop	{r4, r5, r6, pc}
 800b7b6:	bf00      	nop
 800b7b8:	200001a8 	.word	0x200001a8

0800b7bc <_sbrk_r>:
 800b7bc:	b538      	push	{r3, r4, r5, lr}
 800b7be:	4d06      	ldr	r5, [pc, #24]	; (800b7d8 <_sbrk_r+0x1c>)
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	4608      	mov	r0, r1
 800b7c6:	602b      	str	r3, [r5, #0]
 800b7c8:	f7fe fff2 	bl	800a7b0 <_sbrk>
 800b7cc:	1c43      	adds	r3, r0, #1
 800b7ce:	d102      	bne.n	800b7d6 <_sbrk_r+0x1a>
 800b7d0:	682b      	ldr	r3, [r5, #0]
 800b7d2:	b103      	cbz	r3, 800b7d6 <_sbrk_r+0x1a>
 800b7d4:	6023      	str	r3, [r4, #0]
 800b7d6:	bd38      	pop	{r3, r4, r5, pc}
 800b7d8:	20006ba8 	.word	0x20006ba8

0800b7dc <__malloc_lock>:
 800b7dc:	4801      	ldr	r0, [pc, #4]	; (800b7e4 <__malloc_lock+0x8>)
 800b7de:	f7ff be60 	b.w	800b4a2 <__retarget_lock_acquire_recursive>
 800b7e2:	bf00      	nop
 800b7e4:	20004dc4 	.word	0x20004dc4

0800b7e8 <__malloc_unlock>:
 800b7e8:	4801      	ldr	r0, [pc, #4]	; (800b7f0 <__malloc_unlock+0x8>)
 800b7ea:	f7ff be6e 	b.w	800b4ca <__retarget_lock_release_recursive>
 800b7ee:	bf00      	nop
 800b7f0:	20004dc4 	.word	0x20004dc4

0800b7f4 <_init>:
 800b7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f6:	bf00      	nop
 800b7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7fa:	bc08      	pop	{r3}
 800b7fc:	469e      	mov	lr, r3
 800b7fe:	4770      	bx	lr

0800b800 <_fini>:
 800b800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b802:	bf00      	nop
 800b804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b806:	bc08      	pop	{r3}
 800b808:	469e      	mov	lr, r3
 800b80a:	4770      	bx	lr
