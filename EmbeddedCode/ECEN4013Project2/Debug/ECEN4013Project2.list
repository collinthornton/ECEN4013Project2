
ECEN4013Project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d508  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800d618  0800d618  0001d618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d730  0800d730  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d730  0800d730  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d730  0800d730  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d730  0800d730  0001d730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d734  0800d734  0001d734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800d738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003200  200001f8  0800d930  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200033f8  0800d930  000233f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ffa2  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006101  00000000  00000000  000501c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d8  00000000  00000000  000562c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001eb8  00000000  00000000  000583a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008092  00000000  00000000  0005a258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027cf9  00000000  00000000  000622ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4958  00000000  00000000  00089fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012e93b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bcc  00000000  00000000  0012e990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d600 	.word	0x0800d600

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800d600 	.word	0x0800d600

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fd46 	bl	8000be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f822 	bl	80001a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f972 	bl	8000444 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000160:	f000 f87a 	bl	8000258 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000164:	f000 f8b6 	bl	80002d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000168:	f000 f8e2 	bl	8000330 <MX_SPI1_Init>
  MX_FATFS_Init();
 800016c:	f008 fbd2 	bl	8008914 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f914 	bl	800039c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000174:	f000 f93c 	bl	80003f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000178:	f009 ffc8 	bl	800a10c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800017c:	4a05      	ldr	r2, [pc, #20]	; (8000194 <main+0x44>)
 800017e:	2100      	movs	r1, #0
 8000180:	4805      	ldr	r0, [pc, #20]	; (8000198 <main+0x48>)
 8000182:	f00a f829 	bl	800a1d8 <osThreadNew>
 8000186:	4603      	mov	r3, r0
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <main+0x4c>)
 800018a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800018c:	f009 fff0 	bl	800a170 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000190:	e7fe      	b.n	8000190 <main+0x40>
 8000192:	bf00      	nop
 8000194:	0800d694 	.word	0x0800d694
 8000198:	08000585 	.word	0x08000585
 800019c:	20001e1c 	.word	0x20001e1c

080001a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b094      	sub	sp, #80	; 0x50
 80001a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001aa:	2228      	movs	r2, #40	; 0x28
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f00d f95c 	bl	800d46c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b4:	f107 0314 	add.w	r3, r7, #20
 80001b8:	2200      	movs	r2, #0
 80001ba:	601a      	str	r2, [r3, #0]
 80001bc:	605a      	str	r2, [r3, #4]
 80001be:	609a      	str	r2, [r3, #8]
 80001c0:	60da      	str	r2, [r3, #12]
 80001c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d0:	2301      	movs	r3, #1
 80001d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001de:	2301      	movs	r3, #1
 80001e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e2:	2302      	movs	r3, #2
 80001e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80001ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80001f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001f6:	4618      	mov	r0, r3
 80001f8:	f004 fc30 	bl	8004a5c <HAL_RCC_OscConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000202:	f000 f9db 	bl	80005bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000206:	230f      	movs	r3, #15
 8000208:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800020a:	2301      	movs	r3, #1
 800020c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800021a:	f107 0314 	add.w	r3, r7, #20
 800021e:	2100      	movs	r1, #0
 8000220:	4618      	mov	r0, r3
 8000222:	f004 fe9b 	bl	8004f5c <HAL_RCC_ClockConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800022c:	f000 f9c6 	bl	80005bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000230:	2312      	movs	r3, #18
 8000232:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000234:	2300      	movs	r3, #0
 8000236:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000238:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800023c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f005 f857 	bl	80052f4 <HAL_RCCEx_PeriphCLKConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800024c:	f000 f9b6 	bl	80005bc <Error_Handler>
  }
}
 8000250:	bf00      	nop
 8000252:	3750      	adds	r7, #80	; 0x50
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}

08000258 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	605a      	str	r2, [r3, #4]
 8000266:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000268:	4b18      	ldr	r3, [pc, #96]	; (80002cc <MX_ADC1_Init+0x74>)
 800026a:	4a19      	ldr	r2, [pc, #100]	; (80002d0 <MX_ADC1_Init+0x78>)
 800026c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800026e:	4b17      	ldr	r3, [pc, #92]	; (80002cc <MX_ADC1_Init+0x74>)
 8000270:	2200      	movs	r2, #0
 8000272:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000274:	4b15      	ldr	r3, [pc, #84]	; (80002cc <MX_ADC1_Init+0x74>)
 8000276:	2200      	movs	r2, #0
 8000278:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800027a:	4b14      	ldr	r3, [pc, #80]	; (80002cc <MX_ADC1_Init+0x74>)
 800027c:	2200      	movs	r2, #0
 800027e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000280:	4b12      	ldr	r3, [pc, #72]	; (80002cc <MX_ADC1_Init+0x74>)
 8000282:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000286:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <MX_ADC1_Init+0x74>)
 800028a:	2200      	movs	r2, #0
 800028c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800028e:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <MX_ADC1_Init+0x74>)
 8000290:	2201      	movs	r2, #1
 8000292:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <MX_ADC1_Init+0x74>)
 8000296:	f000 fcd7 	bl	8000c48 <HAL_ADC_Init>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002a0:	f000 f98c 	bl	80005bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80002a4:	2310      	movs	r3, #16
 80002a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002a8:	2301      	movs	r3, #1
 80002aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	4619      	mov	r1, r3
 80002b4:	4805      	ldr	r0, [pc, #20]	; (80002cc <MX_ADC1_Init+0x74>)
 80002b6:	f000 fd9f 	bl	8000df8 <HAL_ADC_ConfigChannel>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002c0:	f000 f97c 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002c4:	bf00      	nop
 80002c6:	3710      	adds	r7, #16
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20001e74 	.word	0x20001e74
 80002d0:	40012400 	.word	0x40012400

080002d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002d8:	4b12      	ldr	r3, [pc, #72]	; (8000324 <MX_I2C1_Init+0x50>)
 80002da:	4a13      	ldr	r2, [pc, #76]	; (8000328 <MX_I2C1_Init+0x54>)
 80002dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002de:	4b11      	ldr	r3, [pc, #68]	; (8000324 <MX_I2C1_Init+0x50>)
 80002e0:	4a12      	ldr	r2, [pc, #72]	; (800032c <MX_I2C1_Init+0x58>)
 80002e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <MX_I2C1_Init+0x50>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <MX_I2C1_Init+0x50>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <MX_I2C1_Init+0x50>)
 80002f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <MX_I2C1_Init+0x50>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <MX_I2C1_Init+0x50>)
 8000300:	2200      	movs	r2, #0
 8000302:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <MX_I2C1_Init+0x50>)
 8000306:	2200      	movs	r2, #0
 8000308:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <MX_I2C1_Init+0x50>)
 800030c:	2200      	movs	r2, #0
 800030e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000310:	4804      	ldr	r0, [pc, #16]	; (8000324 <MX_I2C1_Init+0x50>)
 8000312:	f001 f9e3 	bl	80016dc <HAL_I2C_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800031c:	f000 f94e 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20001e20 	.word	0x20001e20
 8000328:	40005400 	.word	0x40005400
 800032c:	000186a0 	.word	0x000186a0

08000330 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000334:	4b17      	ldr	r3, [pc, #92]	; (8000394 <MX_SPI1_Init+0x64>)
 8000336:	4a18      	ldr	r2, [pc, #96]	; (8000398 <MX_SPI1_Init+0x68>)
 8000338:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800033a:	4b16      	ldr	r3, [pc, #88]	; (8000394 <MX_SPI1_Init+0x64>)
 800033c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000340:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000342:	4b14      	ldr	r3, [pc, #80]	; (8000394 <MX_SPI1_Init+0x64>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <MX_SPI1_Init+0x64>)
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800034e:	4b11      	ldr	r3, [pc, #68]	; (8000394 <MX_SPI1_Init+0x64>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <MX_SPI1_Init+0x64>)
 8000356:	2200      	movs	r2, #0
 8000358:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800035a:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <MX_SPI1_Init+0x64>)
 800035c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000360:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <MX_SPI1_Init+0x64>)
 8000364:	2200      	movs	r2, #0
 8000366:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000368:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <MX_SPI1_Init+0x64>)
 800036a:	2200      	movs	r2, #0
 800036c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <MX_SPI1_Init+0x64>)
 8000370:	2200      	movs	r2, #0
 8000372:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000374:	4b07      	ldr	r3, [pc, #28]	; (8000394 <MX_SPI1_Init+0x64>)
 8000376:	2200      	movs	r2, #0
 8000378:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <MX_SPI1_Init+0x64>)
 800037c:	220a      	movs	r2, #10
 800037e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000380:	4804      	ldr	r0, [pc, #16]	; (8000394 <MX_SPI1_Init+0x64>)
 8000382:	f005 f86d 	bl	8005460 <HAL_SPI_Init>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800038c:	f000 f916 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20001ee8 	.word	0x20001ee8
 8000398:	40013000 	.word	0x40013000

0800039c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003a2:	4a12      	ldr	r2, [pc, #72]	; (80003ec <MX_USART1_UART_Init+0x50>)
 80003a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003c2:	220c      	movs	r2, #12
 80003c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003d2:	4805      	ldr	r0, [pc, #20]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003d4:	f005 fc16 	bl	8005c04 <HAL_UART_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003de:	f000 f8ed 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20001ea4 	.word	0x20001ea4
 80003ec:	40013800 	.word	0x40013800

080003f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <MX_USART2_UART_Init+0x4c>)
 80003f6:	4a12      	ldr	r2, [pc, #72]	; (8000440 <MX_USART2_UART_Init+0x50>)
 80003f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003fa:	4b10      	ldr	r3, [pc, #64]	; (800043c <MX_USART2_UART_Init+0x4c>)
 80003fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <MX_USART2_UART_Init+0x4c>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <MX_USART2_UART_Init+0x4c>)
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <MX_USART2_UART_Init+0x4c>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <MX_USART2_UART_Init+0x4c>)
 8000416:	220c      	movs	r2, #12
 8000418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <MX_USART2_UART_Init+0x4c>)
 800041c:	2200      	movs	r2, #0
 800041e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <MX_USART2_UART_Init+0x4c>)
 8000422:	2200      	movs	r2, #0
 8000424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000426:	4805      	ldr	r0, [pc, #20]	; (800043c <MX_USART2_UART_Init+0x4c>)
 8000428:	f005 fbec 	bl	8005c04 <HAL_UART_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000432:	f000 f8c3 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20001f40 	.word	0x20001f40
 8000440:	40004400 	.word	0x40004400

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	f107 0310 	add.w	r3, r7, #16
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000458:	4b46      	ldr	r3, [pc, #280]	; (8000574 <MX_GPIO_Init+0x130>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a45      	ldr	r2, [pc, #276]	; (8000574 <MX_GPIO_Init+0x130>)
 800045e:	f043 0310 	orr.w	r3, r3, #16
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b43      	ldr	r3, [pc, #268]	; (8000574 <MX_GPIO_Init+0x130>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0310 	and.w	r3, r3, #16
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000470:	4b40      	ldr	r3, [pc, #256]	; (8000574 <MX_GPIO_Init+0x130>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a3f      	ldr	r2, [pc, #252]	; (8000574 <MX_GPIO_Init+0x130>)
 8000476:	f043 0320 	orr.w	r3, r3, #32
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b3d      	ldr	r3, [pc, #244]	; (8000574 <MX_GPIO_Init+0x130>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0320 	and.w	r3, r3, #32
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000488:	4b3a      	ldr	r3, [pc, #232]	; (8000574 <MX_GPIO_Init+0x130>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a39      	ldr	r2, [pc, #228]	; (8000574 <MX_GPIO_Init+0x130>)
 800048e:	f043 0304 	orr.w	r3, r3, #4
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b37      	ldr	r3, [pc, #220]	; (8000574 <MX_GPIO_Init+0x130>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0304 	and.w	r3, r3, #4
 800049c:	607b      	str	r3, [r7, #4]
 800049e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a0:	4b34      	ldr	r3, [pc, #208]	; (8000574 <MX_GPIO_Init+0x130>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a33      	ldr	r2, [pc, #204]	; (8000574 <MX_GPIO_Init+0x130>)
 80004a6:	f043 0308 	orr.w	r3, r3, #8
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b31      	ldr	r3, [pc, #196]	; (8000574 <MX_GPIO_Init+0x130>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0308 	and.w	r3, r3, #8
 80004b4:	603b      	str	r3, [r7, #0]
 80004b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USB_LED_G_Pin|BLE_LED_G_Pin, GPIO_PIN_RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80004be:	482e      	ldr	r0, [pc, #184]	; (8000578 <MX_GPIO_Init+0x134>)
 80004c0:	f001 f8f4 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWD_LED_G_Pin|PWD_LED_R_Pin|GPS_LED_G_Pin, GPIO_PIN_RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f240 1103 	movw	r1, #259	; 0x103
 80004ca:	482c      	ldr	r0, [pc, #176]	; (800057c <MX_GPIO_Init+0x138>)
 80004cc:	f001 f8ee 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_SD_CS_Pin|MLX_TRIG_Pin|SD_LED_G_Pin|BLE_EN_Pin
 80004d0:	2200      	movs	r2, #0
 80004d2:	f649 2101 	movw	r1, #39425	; 0x9a01
 80004d6:	482a      	ldr	r0, [pc, #168]	; (8000580 <MX_GPIO_Init+0x13c>)
 80004d8:	f001 f8e8 	bl	80016ac <HAL_GPIO_WritePin>
                          |PWD_LED_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : USB_LED_G_Pin BLE_LED_G_Pin */
  GPIO_InitStruct.Pin = USB_LED_G_Pin|BLE_LED_G_Pin;
 80004dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80004e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	2301      	movs	r3, #1
 80004e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ea:	2302      	movs	r3, #2
 80004ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	4619      	mov	r1, r3
 80004f4:	4820      	ldr	r0, [pc, #128]	; (8000578 <MX_GPIO_Init+0x134>)
 80004f6:	f000 ff55 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWD_LED_G_Pin PWD_LED_R_Pin GPS_LED_G_Pin */
  GPIO_InitStruct.Pin = PWD_LED_G_Pin|PWD_LED_R_Pin|GPS_LED_G_Pin;
 80004fa:	f240 1303 	movw	r3, #259	; 0x103
 80004fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000500:	2301      	movs	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000508:	2302      	movs	r3, #2
 800050a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	481a      	ldr	r0, [pc, #104]	; (800057c <MX_GPIO_Init+0x138>)
 8000514:	f000 ff46 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SD_CS_Pin */
  GPIO_InitStruct.Pin = SPI_SD_CS_Pin;
 8000518:	2301      	movs	r3, #1
 800051a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	2301      	movs	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000524:	2301      	movs	r3, #1
 8000526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4619      	mov	r1, r3
 800052e:	4814      	ldr	r0, [pc, #80]	; (8000580 <MX_GPIO_Init+0x13c>)
 8000530:	f000 ff38 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_DETECT_Pin MLX_RDY_Pin BLE_INT_Pin BLE_STATUS_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin|MLX_RDY_Pin|BLE_INT_Pin|BLE_STATUS_Pin;
 8000534:	f246 4304 	movw	r3, #25604	; 0x6404
 8000538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	4619      	mov	r1, r3
 8000548:	480d      	ldr	r0, [pc, #52]	; (8000580 <MX_GPIO_Init+0x13c>)
 800054a:	f000 ff2b 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MLX_TRIG_Pin SD_LED_G_Pin BLE_EN_Pin PWD_LED_B_Pin */
  GPIO_InitStruct.Pin = MLX_TRIG_Pin|SD_LED_G_Pin|BLE_EN_Pin|PWD_LED_B_Pin;
 800054e:	f44f 431a 	mov.w	r3, #39424	; 0x9a00
 8000552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	2302      	movs	r3, #2
 800055e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	4806      	ldr	r0, [pc, #24]	; (8000580 <MX_GPIO_Init+0x13c>)
 8000568:	f000 ff1c 	bl	80013a4 <HAL_GPIO_Init>

}
 800056c:	bf00      	nop
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40021000 	.word	0x40021000
 8000578:	40011000 	.word	0x40011000
 800057c:	40010800 	.word	0x40010800
 8000580:	40010c00 	.word	0x40010c00

08000584 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800058c:	f00c fac6 	bl	800cb1c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f009 fecb 	bl	800a32c <osDelay>
 8000596:	e7fb      	b.n	8000590 <StartDefaultTask+0xc>

08000598 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d101      	bne.n	80005ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005aa:	f000 fb31 	bl	8000c10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40000800 	.word	0x40000800

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <Error_Handler+0x8>
	...

080005c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <HAL_MspInit+0x68>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	4a17      	ldr	r2, [pc, #92]	; (8000630 <HAL_MspInit+0x68>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6193      	str	r3, [r2, #24]
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <HAL_MspInit+0x68>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_MspInit+0x68>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	4a11      	ldr	r2, [pc, #68]	; (8000630 <HAL_MspInit+0x68>)
 80005ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f0:	61d3      	str	r3, [r2, #28]
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <HAL_MspInit+0x68>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	210f      	movs	r1, #15
 8000602:	f06f 0001 	mvn.w	r0, #1
 8000606:	f000 fde6 	bl	80011d6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <HAL_MspInit+0x6c>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	4a04      	ldr	r2, [pc, #16]	; (8000634 <HAL_MspInit+0x6c>)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000
 8000634:	40010000 	.word	0x40010000

08000638 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0318 	add.w	r3, r7, #24
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a1f      	ldr	r2, [pc, #124]	; (80006d0 <HAL_ADC_MspInit+0x98>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d137      	bne.n	80006c8 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <HAL_ADC_MspInit+0x9c>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a1d      	ldr	r2, [pc, #116]	; (80006d4 <HAL_ADC_MspInit+0x9c>)
 800065e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <HAL_ADC_MspInit+0x9c>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <HAL_ADC_MspInit+0x9c>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <HAL_ADC_MspInit+0x9c>)
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_ADC_MspInit+0x9c>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0304 	and.w	r3, r3, #4
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_ADC_MspInit+0x9c>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a11      	ldr	r2, [pc, #68]	; (80006d4 <HAL_ADC_MspInit+0x9c>)
 800068e:	f043 0308 	orr.w	r3, r3, #8
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_ADC_MspInit+0x9c>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0308 	and.w	r3, r3, #8
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = V_BAT_P_Pin;
 80006a0:	2310      	movs	r3, #16
 80006a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a4:	2303      	movs	r3, #3
 80006a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_BAT_P_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 0318 	add.w	r3, r7, #24
 80006ac:	4619      	mov	r1, r3
 80006ae:	480a      	ldr	r0, [pc, #40]	; (80006d8 <HAL_ADC_MspInit+0xa0>)
 80006b0:	f000 fe78 	bl	80013a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_BAT_M_Pin;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b8:	2303      	movs	r3, #3
 80006ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_BAT_M_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0318 	add.w	r3, r7, #24
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <HAL_ADC_MspInit+0xa4>)
 80006c4:	f000 fe6e 	bl	80013a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	; 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40012400 	.word	0x40012400
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40010800 	.word	0x40010800
 80006dc:	40010c00 	.word	0x40010c00

080006e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a19      	ldr	r2, [pc, #100]	; (8000760 <HAL_I2C_MspInit+0x80>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d12b      	bne.n	8000758 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <HAL_I2C_MspInit+0x84>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a17      	ldr	r2, [pc, #92]	; (8000764 <HAL_I2C_MspInit+0x84>)
 8000706:	f043 0308 	orr.w	r3, r3, #8
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <HAL_I2C_MspInit+0x84>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0308 	and.w	r3, r3, #8
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000718:	23c0      	movs	r3, #192	; 0xc0
 800071a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800071c:	2312      	movs	r3, #18
 800071e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	480f      	ldr	r0, [pc, #60]	; (8000768 <HAL_I2C_MspInit+0x88>)
 800072c:	f000 fe3a 	bl	80013a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <HAL_I2C_MspInit+0x84>)
 8000732:	69db      	ldr	r3, [r3, #28]
 8000734:	4a0b      	ldr	r2, [pc, #44]	; (8000764 <HAL_I2C_MspInit+0x84>)
 8000736:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800073a:	61d3      	str	r3, [r2, #28]
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_I2C_MspInit+0x84>)
 800073e:	69db      	ldr	r3, [r3, #28]
 8000740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	2105      	movs	r1, #5
 800074c:	201f      	movs	r0, #31
 800074e:	f000 fd42 	bl	80011d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000752:	201f      	movs	r0, #31
 8000754:	f000 fd5b 	bl	800120e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40005400 	.word	0x40005400
 8000764:	40021000 	.word	0x40021000
 8000768:	40010c00 	.word	0x40010c00

0800076c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a1f      	ldr	r2, [pc, #124]	; (8000804 <HAL_SPI_MspInit+0x98>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d137      	bne.n	80007fc <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <HAL_SPI_MspInit+0x9c>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a1d      	ldr	r2, [pc, #116]	; (8000808 <HAL_SPI_MspInit+0x9c>)
 8000792:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <HAL_SPI_MspInit+0x9c>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <HAL_SPI_MspInit+0x9c>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a17      	ldr	r2, [pc, #92]	; (8000808 <HAL_SPI_MspInit+0x9c>)
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <HAL_SPI_MspInit+0x9c>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0304 	and.w	r3, r3, #4
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007bc:	23a0      	movs	r3, #160	; 0xa0
 80007be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	4619      	mov	r1, r3
 80007ce:	480f      	ldr	r0, [pc, #60]	; (800080c <HAL_SPI_MspInit+0xa0>)
 80007d0:	f000 fde8 	bl	80013a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007d4:	2340      	movs	r3, #64	; 0x40
 80007d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	4619      	mov	r1, r3
 80007e6:	4809      	ldr	r0, [pc, #36]	; (800080c <HAL_SPI_MspInit+0xa0>)
 80007e8:	f000 fddc 	bl	80013a4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2105      	movs	r1, #5
 80007f0:	2023      	movs	r0, #35	; 0x23
 80007f2:	f000 fcf0 	bl	80011d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80007f6:	2023      	movs	r0, #35	; 0x23
 80007f8:	f000 fd09 	bl	800120e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40013000 	.word	0x40013000
 8000808:	40021000 	.word	0x40021000
 800080c:	40010800 	.word	0x40010800

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0318 	add.w	r3, r7, #24
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a3f      	ldr	r2, [pc, #252]	; (8000928 <HAL_UART_MspInit+0x118>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d13a      	bne.n	80008a6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000830:	4b3e      	ldr	r3, [pc, #248]	; (800092c <HAL_UART_MspInit+0x11c>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a3d      	ldr	r2, [pc, #244]	; (800092c <HAL_UART_MspInit+0x11c>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b3b      	ldr	r3, [pc, #236]	; (800092c <HAL_UART_MspInit+0x11c>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b38      	ldr	r3, [pc, #224]	; (800092c <HAL_UART_MspInit+0x11c>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a37      	ldr	r2, [pc, #220]	; (800092c <HAL_UART_MspInit+0x11c>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b35      	ldr	r3, [pc, #212]	; (800092c <HAL_UART_MspInit+0x11c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	4619      	mov	r1, r3
 8000874:	482e      	ldr	r0, [pc, #184]	; (8000930 <HAL_UART_MspInit+0x120>)
 8000876:	f000 fd95 	bl	80013a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800087a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 0318 	add.w	r3, r7, #24
 800088c:	4619      	mov	r1, r3
 800088e:	4828      	ldr	r0, [pc, #160]	; (8000930 <HAL_UART_MspInit+0x120>)
 8000890:	f000 fd88 	bl	80013a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2105      	movs	r1, #5
 8000898:	2025      	movs	r0, #37	; 0x25
 800089a:	f000 fc9c 	bl	80011d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800089e:	2025      	movs	r0, #37	; 0x25
 80008a0:	f000 fcb5 	bl	800120e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a4:	e03c      	b.n	8000920 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a22      	ldr	r2, [pc, #136]	; (8000934 <HAL_UART_MspInit+0x124>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d137      	bne.n	8000920 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <HAL_UART_MspInit+0x11c>)
 80008b2:	69db      	ldr	r3, [r3, #28]
 80008b4:	4a1d      	ldr	r2, [pc, #116]	; (800092c <HAL_UART_MspInit+0x11c>)
 80008b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ba:	61d3      	str	r3, [r2, #28]
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <HAL_UART_MspInit+0x11c>)
 80008be:	69db      	ldr	r3, [r3, #28]
 80008c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <HAL_UART_MspInit+0x11c>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a17      	ldr	r2, [pc, #92]	; (800092c <HAL_UART_MspInit+0x11c>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_UART_MspInit+0x11c>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008e0:	2304      	movs	r3, #4
 80008e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0318 	add.w	r3, r7, #24
 80008f0:	4619      	mov	r1, r3
 80008f2:	480f      	ldr	r0, [pc, #60]	; (8000930 <HAL_UART_MspInit+0x120>)
 80008f4:	f000 fd56 	bl	80013a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008f8:	2308      	movs	r3, #8
 80008fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 0318 	add.w	r3, r7, #24
 8000908:	4619      	mov	r1, r3
 800090a:	4809      	ldr	r0, [pc, #36]	; (8000930 <HAL_UART_MspInit+0x120>)
 800090c:	f000 fd4a 	bl	80013a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	2105      	movs	r1, #5
 8000914:	2026      	movs	r0, #38	; 0x26
 8000916:	f000 fc5e 	bl	80011d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800091a:	2026      	movs	r0, #38	; 0x26
 800091c:	f000 fc77 	bl	800120e <HAL_NVIC_EnableIRQ>
}
 8000920:	bf00      	nop
 8000922:	3728      	adds	r7, #40	; 0x28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40013800 	.word	0x40013800
 800092c:	40021000 	.word	0x40021000
 8000930:	40010800 	.word	0x40010800
 8000934:	40004400 	.word	0x40004400

08000938 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	; 0x30
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000948:	2200      	movs	r2, #0
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	201e      	movs	r0, #30
 800094e:	f000 fc42 	bl	80011d6 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000952:	201e      	movs	r0, #30
 8000954:	f000 fc5b 	bl	800120e <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <HAL_InitTick+0x9c>)
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	4a1d      	ldr	r2, [pc, #116]	; (80009d4 <HAL_InitTick+0x9c>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	61d3      	str	r3, [r2, #28]
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <HAL_InitTick+0x9c>)
 8000966:	69db      	ldr	r3, [r3, #28]
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000970:	f107 0210 	add.w	r2, r7, #16
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4611      	mov	r1, r2
 800097a:	4618      	mov	r0, r3
 800097c:	f004 fc6c 	bl	8005258 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000980:	f004 fc42 	bl	8005208 <HAL_RCC_GetPCLK1Freq>
 8000984:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000988:	4a13      	ldr	r2, [pc, #76]	; (80009d8 <HAL_InitTick+0xa0>)
 800098a:	fba2 2303 	umull	r2, r3, r2, r3
 800098e:	0c9b      	lsrs	r3, r3, #18
 8000990:	3b01      	subs	r3, #1
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_InitTick+0xa4>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <HAL_InitTick+0xa8>)
 8000998:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_InitTick+0xa4>)
 800099c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80009a2:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <HAL_InitTick+0xa4>)
 80009a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_InitTick+0xa4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_InitTick+0xa4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80009b4:	4809      	ldr	r0, [pc, #36]	; (80009dc <HAL_InitTick+0xa4>)
 80009b6:	f004 feda 	bl	800576e <HAL_TIM_Base_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d104      	bne.n	80009ca <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80009c0:	4806      	ldr	r0, [pc, #24]	; (80009dc <HAL_InitTick+0xa4>)
 80009c2:	f004 ff2d 	bl	8005820 <HAL_TIM_Base_Start_IT>
 80009c6:	4603      	mov	r3, r0
 80009c8:	e000      	b.n	80009cc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3730      	adds	r7, #48	; 0x30
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021000 	.word	0x40021000
 80009d8:	431bde83 	.word	0x431bde83
 80009dc:	20001f84 	.word	0x20001f84
 80009e0:	40000800 	.word	0x40000800

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <NMI_Handler+0x4>

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <MemManage_Handler+0x4>

080009f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
	...

08000a10 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a16:	f002 fc8c 	bl	8003332 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000310c 	.word	0x2000310c

08000a24 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <TIM4_IRQHandler+0x10>)
 8000a2a:	f004 ff4b 	bl	80058c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20001f84 	.word	0x20001f84

08000a38 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <I2C1_EV_IRQHandler+0x10>)
 8000a3e:	f000 ff91 	bl	8001964 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20001e20 	.word	0x20001e20

08000a4c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <SPI1_IRQHandler+0x10>)
 8000a52:	f004 fd89 	bl	8005568 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20001ee8 	.word	0x20001ee8

08000a60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <USART1_IRQHandler+0x10>)
 8000a66:	f005 f91b 	bl	8005ca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20001ea4 	.word	0x20001ea4

08000a74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <USART2_IRQHandler+0x10>)
 8000a7a:	f005 f911 	bl	8005ca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20001f40 	.word	0x20001f40

08000a88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a96:	490d      	ldr	r1, [pc, #52]	; (8000acc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aac:	4c0a      	ldr	r4, [pc, #40]	; (8000ad8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aba:	f7ff ffe5 	bl	8000a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000abe:	f00c fca3 	bl	800d408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ac2:	f7ff fb45 	bl	8000150 <main>
  bx lr
 8000ac6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8000ad0:	0800d738 	.word	0x0800d738
  ldr r2, =_sbss
 8000ad4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8000ad8:	200033f8 	.word	0x200033f8

08000adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC1_2_IRQHandler>

08000ade <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b084      	sub	sp, #16
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d104      	bne.n	8000af6 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
 8000af0:	f7ff fd64 	bl	80005bc <Error_Handler>
 8000af4:	e7fe      	b.n	8000af4 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7a1b      	ldrb	r3, [r3, #8]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d904      	bls.n	8000b08 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000afe:	b672      	cpsid	i
}
 8000b00:	bf00      	nop
 8000b02:	f7ff fd5b 	bl	80005bc <Error_Handler>
 8000b06:	e7fe      	b.n	8000b06 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	7a1b      	ldrb	r3, [r3, #8]
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	b2d1      	uxtb	r1, r2
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	7211      	strb	r1, [r2, #8]
 8000b14:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000b16:	f3ef 8211 	mrs	r2, BASEPRI
 8000b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b1e:	f383 8811 	msr	BASEPRI, r3
 8000b22:	f3bf 8f6f 	isb	sy
 8000b26:	f3bf 8f4f 	dsb	sy
 8000b2a:	60fa      	str	r2, [r7, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b084      	sub	sp, #16
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d104      	bne.n	8000b56 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
 8000b50:	f7ff fd34 	bl	80005bc <Error_Handler>
 8000b54:	e7fe      	b.n	8000b54 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	7a1b      	ldrb	r3, [r3, #8]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7a1b      	ldrb	r3, [r3, #8]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d904      	bls.n	8000b74 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6a:	b672      	cpsid	i
}
 8000b6c:	bf00      	nop
 8000b6e:	f7ff fd25 	bl	80005bc <Error_Handler>
 8000b72:	e7fe      	b.n	8000b72 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	7a1b      	ldrb	r3, [r3, #8]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b80:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000b88:	bf00      	nop
}
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d104      	bne.n	8000baa <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
 8000ba4:	f7ff fd0a 	bl	80005bc <Error_Handler>
 8000ba8:	e7fe      	b.n	8000ba8 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff96 	bl	8000ade <stm32_lock_acquire>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d104      	bne.n	8000bd2 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
 8000bcc:	f7ff fcf6 	bl	80005bc <Error_Handler>
 8000bd0:	e7fe      	b.n	8000bd0 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ffb2 	bl	8000b3e <stm32_lock_release>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_Init+0x28>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <HAL_Init+0x28>)
 8000bee:	f043 0310 	orr.w	r3, r3, #16
 8000bf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 fae3 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	200f      	movs	r0, #15
 8000bfc:	f7ff fe9c 	bl	8000938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff fce2 	bl	80005c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40022000 	.word	0x40022000

08000c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_IncTick+0x1c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_IncTick+0x20>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a03      	ldr	r2, [pc, #12]	; (8000c30 <HAL_IncTick+0x20>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20001fcc 	.word	0x20001fcc

08000c34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b02      	ldr	r3, [pc, #8]	; (8000c44 <HAL_GetTick+0x10>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	20001fcc 	.word	0x20001fcc

08000c48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e0be      	b.n	8000de8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d109      	bne.n	8000c8c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff fcd6 	bl	8000638 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f000 f9ab 	bl	8000fe8 <ADC_ConversionStop_Disable>
 8000c92:	4603      	mov	r3, r0
 8000c94:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9a:	f003 0310 	and.w	r3, r3, #16
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f040 8099 	bne.w	8000dd6 <HAL_ADC_Init+0x18e>
 8000ca4:	7dfb      	ldrb	r3, [r7, #23]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8095 	bne.w	8000dd6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cb4:	f023 0302 	bic.w	r3, r3, #2
 8000cb8:	f043 0202 	orr.w	r2, r3, #2
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cc8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	7b1b      	ldrb	r3, [r3, #12]
 8000cce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cd0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ce0:	d003      	beq.n	8000cea <HAL_ADC_Init+0xa2>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d102      	bne.n	8000cf0 <HAL_ADC_Init+0xa8>
 8000cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cee:	e000      	b.n	8000cf2 <HAL_ADC_Init+0xaa>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7d1b      	ldrb	r3, [r3, #20]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d119      	bne.n	8000d34 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7b1b      	ldrb	r3, [r3, #12]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d109      	bne.n	8000d1c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	035a      	lsls	r2, r3, #13
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	e00b      	b.n	8000d34 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d20:	f043 0220 	orr.w	r2, r3, #32
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2c:	f043 0201 	orr.w	r2, r3, #1
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	430a      	orrs	r2, r1
 8000d46:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <HAL_ADC_Init+0x1a8>)
 8000d50:	4013      	ands	r3, r2
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	6812      	ldr	r2, [r2, #0]
 8000d56:	68b9      	ldr	r1, [r7, #8]
 8000d58:	430b      	orrs	r3, r1
 8000d5a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d64:	d003      	beq.n	8000d6e <HAL_ADC_Init+0x126>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d104      	bne.n	8000d78 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	051b      	lsls	r3, r3, #20
 8000d76:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_ADC_Init+0x1ac>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d10b      	bne.n	8000db4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da6:	f023 0303 	bic.w	r3, r3, #3
 8000daa:	f043 0201 	orr.w	r2, r3, #1
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000db2:	e018      	b.n	8000de6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db8:	f023 0312 	bic.w	r3, r3, #18
 8000dbc:	f043 0210 	orr.w	r2, r3, #16
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc8:	f043 0201 	orr.w	r2, r3, #1
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dd4:	e007      	b.n	8000de6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dda:	f043 0210 	orr.w	r2, r3, #16
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	ffe1f7fd 	.word	0xffe1f7fd
 8000df4:	ff1f0efe 	.word	0xff1f0efe

08000df8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d101      	bne.n	8000e18 <HAL_ADC_ConfigChannel+0x20>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e0dc      	b.n	8000fd2 <HAL_ADC_ConfigChannel+0x1da>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b06      	cmp	r3, #6
 8000e26:	d81c      	bhi.n	8000e62 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	3b05      	subs	r3, #5
 8000e3a:	221f      	movs	r2, #31
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	4019      	ands	r1, r3
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	3b05      	subs	r3, #5
 8000e54:	fa00 f203 	lsl.w	r2, r0, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000e60:	e03c      	b.n	8000edc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b0c      	cmp	r3, #12
 8000e68:	d81c      	bhi.n	8000ea4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	3b23      	subs	r3, #35	; 0x23
 8000e7c:	221f      	movs	r2, #31
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	4019      	ands	r1, r3
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	3b23      	subs	r3, #35	; 0x23
 8000e96:	fa00 f203 	lsl.w	r2, r0, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	631a      	str	r2, [r3, #48]	; 0x30
 8000ea2:	e01b      	b.n	8000edc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3b41      	subs	r3, #65	; 0x41
 8000eb6:	221f      	movs	r2, #31
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	4019      	ands	r1, r3
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	3b41      	subs	r3, #65	; 0x41
 8000ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b09      	cmp	r3, #9
 8000ee2:	d91c      	bls.n	8000f1e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68d9      	ldr	r1, [r3, #12]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3b1e      	subs	r3, #30
 8000ef6:	2207      	movs	r2, #7
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	4019      	ands	r1, r3
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	6898      	ldr	r0, [r3, #8]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	3b1e      	subs	r3, #30
 8000f10:	fa00 f203 	lsl.w	r2, r0, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	e019      	b.n	8000f52 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6919      	ldr	r1, [r3, #16]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	2207      	movs	r2, #7
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	4019      	ands	r1, r3
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	6898      	ldr	r0, [r3, #8]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4613      	mov	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	fa00 f203 	lsl.w	r2, r0, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b10      	cmp	r3, #16
 8000f58:	d003      	beq.n	8000f62 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f5e:	2b11      	cmp	r3, #17
 8000f60:	d132      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <HAL_ADC_ConfigChannel+0x1e4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d125      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d126      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f88:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b10      	cmp	r3, #16
 8000f90:	d11a      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f98:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9c:	0c9a      	lsrs	r2, r3, #18
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fa8:	e002      	b.n	8000fb0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f9      	bne.n	8000faa <HAL_ADC_ConfigChannel+0x1b2>
 8000fb6:	e007      	b.n	8000fc8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbc:	f043 0220 	orr.w	r2, r3, #32
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	40012400 	.word	0x40012400
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	431bde83 	.word	0x431bde83

08000fe8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d12e      	bne.n	8001060 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f022 0201 	bic.w	r2, r2, #1
 8001010:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001012:	f7ff fe0f 	bl	8000c34 <HAL_GetTick>
 8001016:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001018:	e01b      	b.n	8001052 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800101a:	f7ff fe0b 	bl	8000c34 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d914      	bls.n	8001052 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b01      	cmp	r3, #1
 8001034:	d10d      	bne.n	8001052 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103a:	f043 0210 	orr.w	r2, r3, #16
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001046:	f043 0201 	orr.w	r2, r3, #1
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e007      	b.n	8001062 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b01      	cmp	r3, #1
 800105e:	d0dc      	beq.n	800101a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4906      	ldr	r1, [pc, #24]	; (8001104 <__NVIC_EnableIRQ+0x34>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff4f 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e8:	f7ff ff64 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 80011ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff ffb2 	bl	800115c <NVIC_EncodePriority>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff81 	bl	8001108 <__NVIC_SetPriority>
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff57 	bl	80010d0 <__NVIC_EnableIRQ>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800122a:	b480      	push	{r7}
 800122c:	b085      	sub	sp, #20
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800123c:	2b02      	cmp	r3, #2
 800123e:	d008      	beq.n	8001252 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2204      	movs	r2, #4
 8001244:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e020      	b.n	8001294 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 020e 	bic.w	r2, r2, #14
 8001260:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0201 	bic.w	r2, r2, #1
 8001270:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800127a:	2101      	movs	r1, #1
 800127c:	fa01 f202 	lsl.w	r2, r1, r2
 8001280:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001292:	7bfb      	ldrb	r3, [r7, #15]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d005      	beq.n	80012c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2204      	movs	r2, #4
 80012ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	e051      	b.n	8001366 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 020e 	bic.w	r2, r2, #14
 80012d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0201 	bic.w	r2, r2, #1
 80012e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a22      	ldr	r2, [pc, #136]	; (8001370 <HAL_DMA_Abort_IT+0xd0>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d029      	beq.n	8001340 <HAL_DMA_Abort_IT+0xa0>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a20      	ldr	r2, [pc, #128]	; (8001374 <HAL_DMA_Abort_IT+0xd4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d022      	beq.n	800133c <HAL_DMA_Abort_IT+0x9c>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a1f      	ldr	r2, [pc, #124]	; (8001378 <HAL_DMA_Abort_IT+0xd8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d01a      	beq.n	8001336 <HAL_DMA_Abort_IT+0x96>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_DMA_Abort_IT+0xdc>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d012      	beq.n	8001330 <HAL_DMA_Abort_IT+0x90>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <HAL_DMA_Abort_IT+0xe0>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d00a      	beq.n	800132a <HAL_DMA_Abort_IT+0x8a>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a1a      	ldr	r2, [pc, #104]	; (8001384 <HAL_DMA_Abort_IT+0xe4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d102      	bne.n	8001324 <HAL_DMA_Abort_IT+0x84>
 800131e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001322:	e00e      	b.n	8001342 <HAL_DMA_Abort_IT+0xa2>
 8001324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001328:	e00b      	b.n	8001342 <HAL_DMA_Abort_IT+0xa2>
 800132a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800132e:	e008      	b.n	8001342 <HAL_DMA_Abort_IT+0xa2>
 8001330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001334:	e005      	b.n	8001342 <HAL_DMA_Abort_IT+0xa2>
 8001336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800133a:	e002      	b.n	8001342 <HAL_DMA_Abort_IT+0xa2>
 800133c:	2310      	movs	r3, #16
 800133e:	e000      	b.n	8001342 <HAL_DMA_Abort_IT+0xa2>
 8001340:	2301      	movs	r3, #1
 8001342:	4a11      	ldr	r2, [pc, #68]	; (8001388 <HAL_DMA_Abort_IT+0xe8>)
 8001344:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	4798      	blx	r3
    } 
  }
  return status;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40020008 	.word	0x40020008
 8001374:	4002001c 	.word	0x4002001c
 8001378:	40020030 	.word	0x40020030
 800137c:	40020044 	.word	0x40020044
 8001380:	40020058 	.word	0x40020058
 8001384:	4002006c 	.word	0x4002006c
 8001388:	40020000 	.word	0x40020000

0800138c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b08b      	sub	sp, #44	; 0x2c
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b6:	e169      	b.n	800168c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013b8:	2201      	movs	r2, #1
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	69fa      	ldr	r2, [r7, #28]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	f040 8158 	bne.w	8001686 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	4a9a      	ldr	r2, [pc, #616]	; (8001644 <HAL_GPIO_Init+0x2a0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d05e      	beq.n	800149e <HAL_GPIO_Init+0xfa>
 80013e0:	4a98      	ldr	r2, [pc, #608]	; (8001644 <HAL_GPIO_Init+0x2a0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d875      	bhi.n	80014d2 <HAL_GPIO_Init+0x12e>
 80013e6:	4a98      	ldr	r2, [pc, #608]	; (8001648 <HAL_GPIO_Init+0x2a4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d058      	beq.n	800149e <HAL_GPIO_Init+0xfa>
 80013ec:	4a96      	ldr	r2, [pc, #600]	; (8001648 <HAL_GPIO_Init+0x2a4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d86f      	bhi.n	80014d2 <HAL_GPIO_Init+0x12e>
 80013f2:	4a96      	ldr	r2, [pc, #600]	; (800164c <HAL_GPIO_Init+0x2a8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d052      	beq.n	800149e <HAL_GPIO_Init+0xfa>
 80013f8:	4a94      	ldr	r2, [pc, #592]	; (800164c <HAL_GPIO_Init+0x2a8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d869      	bhi.n	80014d2 <HAL_GPIO_Init+0x12e>
 80013fe:	4a94      	ldr	r2, [pc, #592]	; (8001650 <HAL_GPIO_Init+0x2ac>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d04c      	beq.n	800149e <HAL_GPIO_Init+0xfa>
 8001404:	4a92      	ldr	r2, [pc, #584]	; (8001650 <HAL_GPIO_Init+0x2ac>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d863      	bhi.n	80014d2 <HAL_GPIO_Init+0x12e>
 800140a:	4a92      	ldr	r2, [pc, #584]	; (8001654 <HAL_GPIO_Init+0x2b0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d046      	beq.n	800149e <HAL_GPIO_Init+0xfa>
 8001410:	4a90      	ldr	r2, [pc, #576]	; (8001654 <HAL_GPIO_Init+0x2b0>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d85d      	bhi.n	80014d2 <HAL_GPIO_Init+0x12e>
 8001416:	2b12      	cmp	r3, #18
 8001418:	d82a      	bhi.n	8001470 <HAL_GPIO_Init+0xcc>
 800141a:	2b12      	cmp	r3, #18
 800141c:	d859      	bhi.n	80014d2 <HAL_GPIO_Init+0x12e>
 800141e:	a201      	add	r2, pc, #4	; (adr r2, 8001424 <HAL_GPIO_Init+0x80>)
 8001420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001424:	0800149f 	.word	0x0800149f
 8001428:	08001479 	.word	0x08001479
 800142c:	0800148b 	.word	0x0800148b
 8001430:	080014cd 	.word	0x080014cd
 8001434:	080014d3 	.word	0x080014d3
 8001438:	080014d3 	.word	0x080014d3
 800143c:	080014d3 	.word	0x080014d3
 8001440:	080014d3 	.word	0x080014d3
 8001444:	080014d3 	.word	0x080014d3
 8001448:	080014d3 	.word	0x080014d3
 800144c:	080014d3 	.word	0x080014d3
 8001450:	080014d3 	.word	0x080014d3
 8001454:	080014d3 	.word	0x080014d3
 8001458:	080014d3 	.word	0x080014d3
 800145c:	080014d3 	.word	0x080014d3
 8001460:	080014d3 	.word	0x080014d3
 8001464:	080014d3 	.word	0x080014d3
 8001468:	08001481 	.word	0x08001481
 800146c:	08001495 	.word	0x08001495
 8001470:	4a79      	ldr	r2, [pc, #484]	; (8001658 <HAL_GPIO_Init+0x2b4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d013      	beq.n	800149e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001476:	e02c      	b.n	80014d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	623b      	str	r3, [r7, #32]
          break;
 800147e:	e029      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	3304      	adds	r3, #4
 8001486:	623b      	str	r3, [r7, #32]
          break;
 8001488:	e024      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	3308      	adds	r3, #8
 8001490:	623b      	str	r3, [r7, #32]
          break;
 8001492:	e01f      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	330c      	adds	r3, #12
 800149a:	623b      	str	r3, [r7, #32]
          break;
 800149c:	e01a      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d102      	bne.n	80014ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014a6:	2304      	movs	r3, #4
 80014a8:	623b      	str	r3, [r7, #32]
          break;
 80014aa:	e013      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d105      	bne.n	80014c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b4:	2308      	movs	r3, #8
 80014b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	611a      	str	r2, [r3, #16]
          break;
 80014be:	e009      	b.n	80014d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c0:	2308      	movs	r3, #8
 80014c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	615a      	str	r2, [r3, #20]
          break;
 80014ca:	e003      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
          break;
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          break;
 80014d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2bff      	cmp	r3, #255	; 0xff
 80014d8:	d801      	bhi.n	80014de <HAL_GPIO_Init+0x13a>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	e001      	b.n	80014e2 <HAL_GPIO_Init+0x13e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3304      	adds	r3, #4
 80014e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2bff      	cmp	r3, #255	; 0xff
 80014e8:	d802      	bhi.n	80014f0 <HAL_GPIO_Init+0x14c>
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	e002      	b.n	80014f6 <HAL_GPIO_Init+0x152>
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	3b08      	subs	r3, #8
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	210f      	movs	r1, #15
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	401a      	ands	r2, r3
 8001508:	6a39      	ldr	r1, [r7, #32]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	431a      	orrs	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 80b1 	beq.w	8001686 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001524:	4b4d      	ldr	r3, [pc, #308]	; (800165c <HAL_GPIO_Init+0x2b8>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a4c      	ldr	r2, [pc, #304]	; (800165c <HAL_GPIO_Init+0x2b8>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b4a      	ldr	r3, [pc, #296]	; (800165c <HAL_GPIO_Init+0x2b8>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800153c:	4a48      	ldr	r2, [pc, #288]	; (8001660 <HAL_GPIO_Init+0x2bc>)
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	3302      	adds	r3, #2
 8001544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001548:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	220f      	movs	r2, #15
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4013      	ands	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a40      	ldr	r2, [pc, #256]	; (8001664 <HAL_GPIO_Init+0x2c0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d013      	beq.n	8001590 <HAL_GPIO_Init+0x1ec>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a3f      	ldr	r2, [pc, #252]	; (8001668 <HAL_GPIO_Init+0x2c4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d00d      	beq.n	800158c <HAL_GPIO_Init+0x1e8>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a3e      	ldr	r2, [pc, #248]	; (800166c <HAL_GPIO_Init+0x2c8>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d007      	beq.n	8001588 <HAL_GPIO_Init+0x1e4>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a3d      	ldr	r2, [pc, #244]	; (8001670 <HAL_GPIO_Init+0x2cc>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d101      	bne.n	8001584 <HAL_GPIO_Init+0x1e0>
 8001580:	2303      	movs	r3, #3
 8001582:	e006      	b.n	8001592 <HAL_GPIO_Init+0x1ee>
 8001584:	2304      	movs	r3, #4
 8001586:	e004      	b.n	8001592 <HAL_GPIO_Init+0x1ee>
 8001588:	2302      	movs	r3, #2
 800158a:	e002      	b.n	8001592 <HAL_GPIO_Init+0x1ee>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <HAL_GPIO_Init+0x1ee>
 8001590:	2300      	movs	r3, #0
 8001592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001594:	f002 0203 	and.w	r2, r2, #3
 8001598:	0092      	lsls	r2, r2, #2
 800159a:	4093      	lsls	r3, r2
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4313      	orrs	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015a2:	492f      	ldr	r1, [pc, #188]	; (8001660 <HAL_GPIO_Init+0x2bc>)
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	089b      	lsrs	r3, r3, #2
 80015a8:	3302      	adds	r3, #2
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d006      	beq.n	80015ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015bc:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	492c      	ldr	r1, [pc, #176]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]
 80015c8:	e006      	b.n	80015d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015ca:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	4928      	ldr	r1, [pc, #160]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d006      	beq.n	80015f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	4922      	ldr	r1, [pc, #136]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
 80015f0:	e006      	b.n	8001600 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	491e      	ldr	r1, [pc, #120]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d006      	beq.n	800161a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	4918      	ldr	r1, [pc, #96]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	608b      	str	r3, [r1, #8]
 8001618:	e006      	b.n	8001628 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800161a:	4b16      	ldr	r3, [pc, #88]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	43db      	mvns	r3, r3
 8001622:	4914      	ldr	r1, [pc, #80]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 8001624:	4013      	ands	r3, r2
 8001626:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d021      	beq.n	8001678 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	490e      	ldr	r1, [pc, #56]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	60cb      	str	r3, [r1, #12]
 8001640:	e021      	b.n	8001686 <HAL_GPIO_Init+0x2e2>
 8001642:	bf00      	nop
 8001644:	10320000 	.word	0x10320000
 8001648:	10310000 	.word	0x10310000
 800164c:	10220000 	.word	0x10220000
 8001650:	10210000 	.word	0x10210000
 8001654:	10120000 	.word	0x10120000
 8001658:	10110000 	.word	0x10110000
 800165c:	40021000 	.word	0x40021000
 8001660:	40010000 	.word	0x40010000
 8001664:	40010800 	.word	0x40010800
 8001668:	40010c00 	.word	0x40010c00
 800166c:	40011000 	.word	0x40011000
 8001670:	40011400 	.word	0x40011400
 8001674:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_GPIO_Init+0x304>)
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	43db      	mvns	r3, r3
 8001680:	4909      	ldr	r1, [pc, #36]	; (80016a8 <HAL_GPIO_Init+0x304>)
 8001682:	4013      	ands	r3, r2
 8001684:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	3301      	adds	r3, #1
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	fa22 f303 	lsr.w	r3, r2, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	f47f ae8e 	bne.w	80013b8 <HAL_GPIO_Init+0x14>
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	372c      	adds	r7, #44	; 0x2c
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	40010400 	.word	0x40010400

080016ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
 80016b8:	4613      	mov	r3, r2
 80016ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016bc:	787b      	ldrb	r3, [r7, #1]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016c8:	e003      	b.n	80016d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016ca:	887b      	ldrh	r3, [r7, #2]
 80016cc:	041a      	lsls	r2, r3, #16
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	611a      	str	r2, [r3, #16]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e12b      	b.n	8001946 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d106      	bne.n	8001708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7fe ffec 	bl	80006e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2224      	movs	r2, #36	; 0x24
 800170c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0201 	bic.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800172e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800173e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001740:	f003 fd62 	bl	8005208 <HAL_RCC_GetPCLK1Freq>
 8001744:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4a81      	ldr	r2, [pc, #516]	; (8001950 <HAL_I2C_Init+0x274>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d807      	bhi.n	8001760 <HAL_I2C_Init+0x84>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4a80      	ldr	r2, [pc, #512]	; (8001954 <HAL_I2C_Init+0x278>)
 8001754:	4293      	cmp	r3, r2
 8001756:	bf94      	ite	ls
 8001758:	2301      	movls	r3, #1
 800175a:	2300      	movhi	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	e006      	b.n	800176e <HAL_I2C_Init+0x92>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4a7d      	ldr	r2, [pc, #500]	; (8001958 <HAL_I2C_Init+0x27c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	bf94      	ite	ls
 8001768:	2301      	movls	r3, #1
 800176a:	2300      	movhi	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e0e7      	b.n	8001946 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4a78      	ldr	r2, [pc, #480]	; (800195c <HAL_I2C_Init+0x280>)
 800177a:	fba2 2303 	umull	r2, r3, r2, r3
 800177e:	0c9b      	lsrs	r3, r3, #18
 8001780:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	430a      	orrs	r2, r1
 8001794:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4a6a      	ldr	r2, [pc, #424]	; (8001950 <HAL_I2C_Init+0x274>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d802      	bhi.n	80017b0 <HAL_I2C_Init+0xd4>
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	3301      	adds	r3, #1
 80017ae:	e009      	b.n	80017c4 <HAL_I2C_Init+0xe8>
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017b6:	fb02 f303 	mul.w	r3, r2, r3
 80017ba:	4a69      	ldr	r2, [pc, #420]	; (8001960 <HAL_I2C_Init+0x284>)
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	099b      	lsrs	r3, r3, #6
 80017c2:	3301      	adds	r3, #1
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	430b      	orrs	r3, r1
 80017ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	495c      	ldr	r1, [pc, #368]	; (8001950 <HAL_I2C_Init+0x274>)
 80017e0:	428b      	cmp	r3, r1
 80017e2:	d819      	bhi.n	8001818 <HAL_I2C_Init+0x13c>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1e59      	subs	r1, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80017f2:	1c59      	adds	r1, r3, #1
 80017f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017f8:	400b      	ands	r3, r1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00a      	beq.n	8001814 <HAL_I2C_Init+0x138>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1e59      	subs	r1, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fbb1 f3f3 	udiv	r3, r1, r3
 800180c:	3301      	adds	r3, #1
 800180e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001812:	e051      	b.n	80018b8 <HAL_I2C_Init+0x1dc>
 8001814:	2304      	movs	r3, #4
 8001816:	e04f      	b.n	80018b8 <HAL_I2C_Init+0x1dc>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d111      	bne.n	8001844 <HAL_I2C_Init+0x168>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	1e58      	subs	r0, r3, #1
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6859      	ldr	r1, [r3, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	440b      	add	r3, r1
 800182e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001832:	3301      	adds	r3, #1
 8001834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf0c      	ite	eq
 800183c:	2301      	moveq	r3, #1
 800183e:	2300      	movne	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	e012      	b.n	800186a <HAL_I2C_Init+0x18e>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1e58      	subs	r0, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	0099      	lsls	r1, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	fbb0 f3f3 	udiv	r3, r0, r3
 800185a:	3301      	adds	r3, #1
 800185c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001860:	2b00      	cmp	r3, #0
 8001862:	bf0c      	ite	eq
 8001864:	2301      	moveq	r3, #1
 8001866:	2300      	movne	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_Init+0x196>
 800186e:	2301      	movs	r3, #1
 8001870:	e022      	b.n	80018b8 <HAL_I2C_Init+0x1dc>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10e      	bne.n	8001898 <HAL_I2C_Init+0x1bc>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1e58      	subs	r0, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6859      	ldr	r1, [r3, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	440b      	add	r3, r1
 8001888:	fbb0 f3f3 	udiv	r3, r0, r3
 800188c:	3301      	adds	r3, #1
 800188e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001896:	e00f      	b.n	80018b8 <HAL_I2C_Init+0x1dc>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	1e58      	subs	r0, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6859      	ldr	r1, [r3, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	0099      	lsls	r1, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ae:	3301      	adds	r3, #1
 80018b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	6809      	ldr	r1, [r1, #0]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69da      	ldr	r2, [r3, #28]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6911      	ldr	r1, [r2, #16]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68d2      	ldr	r2, [r2, #12]
 80018f2:	4311      	orrs	r1, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	430b      	orrs	r3, r1
 80018fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0201 	orr.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2220      	movs	r2, #32
 8001932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	000186a0 	.word	0x000186a0
 8001954:	001e847f 	.word	0x001e847f
 8001958:	003d08ff 	.word	0x003d08ff
 800195c:	431bde83 	.word	0x431bde83
 8001960:	10624dd3 	.word	0x10624dd3

08001964 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001984:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800198c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	2b10      	cmp	r3, #16
 8001992:	d003      	beq.n	800199c <HAL_I2C_EV_IRQHandler+0x38>
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	2b40      	cmp	r3, #64	; 0x40
 8001998:	f040 80c1 	bne.w	8001b1e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10d      	bne.n	80019d2 <HAL_I2C_EV_IRQHandler+0x6e>
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80019bc:	d003      	beq.n	80019c6 <HAL_I2C_EV_IRQHandler+0x62>
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80019c4:	d101      	bne.n	80019ca <HAL_I2C_EV_IRQHandler+0x66>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <HAL_I2C_EV_IRQHandler+0x68>
 80019ca:	2300      	movs	r3, #0
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	f000 8132 	beq.w	8001c36 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00c      	beq.n	80019f6 <HAL_I2C_EV_IRQHandler+0x92>
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	0a5b      	lsrs	r3, r3, #9
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d006      	beq.n	80019f6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f001 fb57 	bl	800309c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 fcc8 	bl	8002384 <I2C_Master_SB>
 80019f4:	e092      	b.n	8001b1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	08db      	lsrs	r3, r3, #3
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d009      	beq.n	8001a16 <HAL_I2C_EV_IRQHandler+0xb2>
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	0a5b      	lsrs	r3, r3, #9
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 fd3d 	bl	800248e <I2C_Master_ADD10>
 8001a14:	e082      	b.n	8001b1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	085b      	lsrs	r3, r3, #1
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d009      	beq.n	8001a36 <HAL_I2C_EV_IRQHandler+0xd2>
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	0a5b      	lsrs	r3, r3, #9
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fd56 	bl	80024e0 <I2C_Master_ADDR>
 8001a34:	e072      	b.n	8001b1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d03b      	beq.n	8001aba <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a50:	f000 80f3 	beq.w	8001c3a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	09db      	lsrs	r3, r3, #7
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00f      	beq.n	8001a80 <HAL_I2C_EV_IRQHandler+0x11c>
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	0a9b      	lsrs	r3, r3, #10
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d009      	beq.n	8001a80 <HAL_I2C_EV_IRQHandler+0x11c>
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d103      	bne.n	8001a80 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f942 	bl	8001d02 <I2C_MasterTransmit_TXE>
 8001a7e:	e04d      	b.n	8001b1c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80d6 	beq.w	8001c3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	0a5b      	lsrs	r3, r3, #9
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 80cf 	beq.w	8001c3a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001a9c:	7bbb      	ldrb	r3, [r7, #14]
 8001a9e:	2b21      	cmp	r3, #33	; 0x21
 8001aa0:	d103      	bne.n	8001aaa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f9c9 	bl	8001e3a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001aa8:	e0c7      	b.n	8001c3a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	2b40      	cmp	r3, #64	; 0x40
 8001aae:	f040 80c4 	bne.w	8001c3a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fa37 	bl	8001f26 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ab8:	e0bf      	b.n	8001c3a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ac8:	f000 80b7 	beq.w	8001c3a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	099b      	lsrs	r3, r3, #6
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00f      	beq.n	8001af8 <HAL_I2C_EV_IRQHandler+0x194>
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	0a9b      	lsrs	r3, r3, #10
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d009      	beq.n	8001af8 <HAL_I2C_EV_IRQHandler+0x194>
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d103      	bne.n	8001af8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 faac 	bl	800204e <I2C_MasterReceive_RXNE>
 8001af6:	e011      	b.n	8001b1c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 809a 	beq.w	8001c3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	0a5b      	lsrs	r3, r3, #9
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 8093 	beq.w	8001c3a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fb4b 	bl	80021b0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b1a:	e08e      	b.n	8001c3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001b1c:	e08d      	b.n	8001c3a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	e007      	b.n	8001b40 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	085b      	lsrs	r3, r3, #1
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d012      	beq.n	8001b72 <HAL_I2C_EV_IRQHandler+0x20e>
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	0a5b      	lsrs	r3, r3, #9
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00c      	beq.n	8001b72 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001b68:	69b9      	ldr	r1, [r7, #24]
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 ff0f 	bl	800298e <I2C_Slave_ADDR>
 8001b70:	e066      	b.n	8001c40 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <HAL_I2C_EV_IRQHandler+0x22e>
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	0a5b      	lsrs	r3, r3, #9
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 ff4a 	bl	8002a24 <I2C_Slave_STOPF>
 8001b90:	e056      	b.n	8001c40 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001b92:	7bbb      	ldrb	r3, [r7, #14]
 8001b94:	2b21      	cmp	r3, #33	; 0x21
 8001b96:	d002      	beq.n	8001b9e <HAL_I2C_EV_IRQHandler+0x23a>
 8001b98:	7bbb      	ldrb	r3, [r7, #14]
 8001b9a:	2b29      	cmp	r3, #41	; 0x29
 8001b9c:	d125      	bne.n	8001bea <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	09db      	lsrs	r3, r3, #7
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00f      	beq.n	8001bca <HAL_I2C_EV_IRQHandler+0x266>
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	0a9b      	lsrs	r3, r3, #10
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d009      	beq.n	8001bca <HAL_I2C_EV_IRQHandler+0x266>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d103      	bne.n	8001bca <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 fe27 	bl	8002816 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bc8:	e039      	b.n	8001c3e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d033      	beq.n	8001c3e <HAL_I2C_EV_IRQHandler+0x2da>
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	0a5b      	lsrs	r3, r3, #9
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d02d      	beq.n	8001c3e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 fe54 	bl	8002890 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001be8:	e029      	b.n	8001c3e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	099b      	lsrs	r3, r3, #6
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00f      	beq.n	8001c16 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	0a9b      	lsrs	r3, r3, #10
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d009      	beq.n	8001c16 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d103      	bne.n	8001c16 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 fe5e 	bl	80028d0 <I2C_SlaveReceive_RXNE>
 8001c14:	e014      	b.n	8001c40 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00e      	beq.n	8001c40 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	0a5b      	lsrs	r3, r3, #9
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d008      	beq.n	8001c40 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 fe8c 	bl	800294c <I2C_SlaveReceive_BTF>
 8001c34:	e004      	b.n	8001c40 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001c36:	bf00      	nop
 8001c38:	e002      	b.n	8001c40 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c3a:	bf00      	nop
 8001c3c:	e000      	b.n	8001c40 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c3e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001c40:	3720      	adds	r7, #32
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr

08001c6a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	70fb      	strb	r3, [r7, #3]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b084      	sub	sp, #16
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d10:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d18:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d150      	bne.n	8001dca <I2C_MasterTransmit_TXE+0xc8>
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	2b21      	cmp	r3, #33	; 0x21
 8001d2c:	d14d      	bne.n	8001dca <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d01d      	beq.n	8001d70 <I2C_MasterTransmit_TXE+0x6e>
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	d01a      	beq.n	8001d70 <I2C_MasterTransmit_TXE+0x6e>
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d40:	d016      	beq.n	8001d70 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d50:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2211      	movs	r2, #17
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff6c 	bl	8001c46 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d6e:	e060      	b.n	8001e32 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d7e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b40      	cmp	r3, #64	; 0x40
 8001da8:	d107      	bne.n	8001dba <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ff81 	bl	8001cba <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001db8:	e03b      	b.n	8001e32 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ff3f 	bl	8001c46 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dc8:	e033      	b.n	8001e32 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	2b21      	cmp	r3, #33	; 0x21
 8001dce:	d005      	beq.n	8001ddc <I2C_MasterTransmit_TXE+0xda>
 8001dd0:	7bbb      	ldrb	r3, [r7, #14]
 8001dd2:	2b40      	cmp	r3, #64	; 0x40
 8001dd4:	d12d      	bne.n	8001e32 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b22      	cmp	r3, #34	; 0x22
 8001dda:	d12a      	bne.n	8001e32 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d108      	bne.n	8001df8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001df6:	e01c      	b.n	8001e32 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b40      	cmp	r3, #64	; 0x40
 8001e02:	d103      	bne.n	8001e0c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f88e 	bl	8001f26 <I2C_MemoryTransmit_TXE_BTF>
}
 8001e0a:	e012      	b.n	8001e32 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	781a      	ldrb	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e30:	e7ff      	b.n	8001e32 <I2C_MasterTransmit_TXE+0x130>
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b21      	cmp	r3, #33	; 0x21
 8001e52:	d164      	bne.n	8001f1e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d012      	beq.n	8001e84 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	781a      	ldrb	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001e82:	e04c      	b.n	8001f1e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d01d      	beq.n	8001ec6 <I2C_MasterTransmit_BTF+0x8c>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	d01a      	beq.n	8001ec6 <I2C_MasterTransmit_BTF+0x8c>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e96:	d016      	beq.n	8001ec6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ea6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2211      	movs	r2, #17
 8001eac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fec1 	bl	8001c46 <HAL_I2C_MasterTxCpltCallback>
}
 8001ec4:	e02b      	b.n	8001f1e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ed4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b40      	cmp	r3, #64	; 0x40
 8001efe:	d107      	bne.n	8001f10 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff fed6 	bl	8001cba <HAL_I2C_MemTxCpltCallback>
}
 8001f0e:	e006      	b.n	8001f1e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff fe94 	bl	8001c46 <HAL_I2C_MasterTxCpltCallback>
}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b084      	sub	sp, #16
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f34:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d11d      	bne.n	8001f7a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d10b      	bne.n	8001f5e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f56:	1c9a      	adds	r2, r3, #2
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001f5c:	e073      	b.n	8002046 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	121b      	asrs	r3, r3, #8
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f78:	e065      	b.n	8002046 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d10b      	bne.n	8001f9a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f98:	e055      	b.n	8002046 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d151      	bne.n	8002046 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	2b22      	cmp	r3, #34	; 0x22
 8001fa6:	d10d      	bne.n	8001fc4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fb6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001fc2:	e040      	b.n	8002046 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d015      	beq.n	8001ffa <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	2b21      	cmp	r3, #33	; 0x21
 8001fd2:	d112      	bne.n	8001ffa <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	781a      	ldrb	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001ff8:	e025      	b.n	8002046 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d120      	bne.n	8002046 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	2b21      	cmp	r3, #33	; 0x21
 8002008:	d11d      	bne.n	8002046 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002018:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002028:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff fe3a 	bl	8001cba <HAL_I2C_MemTxCpltCallback>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b084      	sub	sp, #16
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b22      	cmp	r3, #34	; 0x22
 8002060:	f040 80a2 	bne.w	80021a8 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002068:	b29b      	uxth	r3, r3
 800206a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d921      	bls.n	80020b6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209c:	b29b      	uxth	r3, r3
 800209e:	2b03      	cmp	r3, #3
 80020a0:	f040 8082 	bne.w	80021a8 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80020b4:	e078      	b.n	80021a8 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d074      	beq.n	80021a8 <I2C_MasterReceive_RXNE+0x15a>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d002      	beq.n	80020ca <I2C_MasterReceive_RXNE+0x7c>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d16e      	bne.n	80021a8 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 ffb4 	bl	8003038 <I2C_WaitOnSTOPRequestThroughIT>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d142      	bne.n	800215c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020f4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b40      	cmp	r3, #64	; 0x40
 800212e:	d10a      	bne.n	8002146 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff fdc4 	bl	8001ccc <HAL_I2C_MemRxCpltCallback>
}
 8002144:	e030      	b.n	80021a8 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2212      	movs	r2, #18
 8002152:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff fd7f 	bl	8001c58 <HAL_I2C_MasterRxCpltCallback>
}
 800215a:	e025      	b.n	80021a8 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800216a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fd9b 	bl	8001cde <HAL_I2C_ErrorCallback>
}
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d11b      	bne.n	8002200 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80021fe:	e0bd      	b.n	800237c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002204:	b29b      	uxth	r3, r3
 8002206:	2b03      	cmp	r3, #3
 8002208:	d129      	bne.n	800225e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002218:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b04      	cmp	r3, #4
 800221e:	d00a      	beq.n	8002236 <I2C_MasterReceive_BTF+0x86>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d007      	beq.n	8002236 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002234:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800225c:	e08e      	b.n	800237c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d176      	bne.n	8002356 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d002      	beq.n	8002274 <I2C_MasterReceive_BTF+0xc4>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b10      	cmp	r3, #16
 8002272:	d108      	bne.n	8002286 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e019      	b.n	80022ba <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b04      	cmp	r3, #4
 800228a:	d002      	beq.n	8002292 <I2C_MasterReceive_BTF+0xe2>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d108      	bne.n	80022a4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e00a      	b.n	80022ba <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b10      	cmp	r3, #16
 80022a8:	d007      	beq.n	80022ba <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002314:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2220      	movs	r2, #32
 800231a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b40      	cmp	r3, #64	; 0x40
 8002328:	d10a      	bne.n	8002340 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff fcc7 	bl	8001ccc <HAL_I2C_MemRxCpltCallback>
}
 800233e:	e01d      	b.n	800237c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2212      	movs	r2, #18
 800234c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff fc82 	bl	8001c58 <HAL_I2C_MasterRxCpltCallback>
}
 8002354:	e012      	b.n	800237c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b40      	cmp	r3, #64	; 0x40
 8002396:	d117      	bne.n	80023c8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023b0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80023b2:	e067      	b.n	8002484 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	611a      	str	r2, [r3, #16]
}
 80023c6:	e05d      	b.n	8002484 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023d0:	d133      	bne.n	800243a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b21      	cmp	r3, #33	; 0x21
 80023dc:	d109      	bne.n	80023f2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023ee:	611a      	str	r2, [r3, #16]
 80023f0:	e008      	b.n	8002404 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002408:	2b00      	cmp	r3, #0
 800240a:	d004      	beq.n	8002416 <I2C_Master_SB+0x92>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	2b00      	cmp	r3, #0
 8002414:	d108      	bne.n	8002428 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241a:	2b00      	cmp	r3, #0
 800241c:	d032      	beq.n	8002484 <I2C_Master_SB+0x100>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	2b00      	cmp	r3, #0
 8002426:	d02d      	beq.n	8002484 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002436:	605a      	str	r2, [r3, #4]
}
 8002438:	e024      	b.n	8002484 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10e      	bne.n	8002460 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	b29b      	uxth	r3, r3
 8002448:	11db      	asrs	r3, r3, #7
 800244a:	b2db      	uxtb	r3, r3
 800244c:	f003 0306 	and.w	r3, r3, #6
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f063 030f 	orn	r3, r3, #15
 8002456:	b2da      	uxtb	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	611a      	str	r2, [r3, #16]
}
 800245e:	e011      	b.n	8002484 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002464:	2b01      	cmp	r3, #1
 8002466:	d10d      	bne.n	8002484 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246c:	b29b      	uxth	r3, r3
 800246e:	11db      	asrs	r3, r3, #7
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f003 0306 	and.w	r3, r3, #6
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f063 030e 	orn	r3, r3, #14
 800247c:	b2da      	uxtb	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	611a      	str	r2, [r3, #16]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	b2da      	uxtb	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d004      	beq.n	80024b4 <I2C_Master_ADD10+0x26>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d108      	bne.n	80024c6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00c      	beq.n	80024d6 <I2C_Master_ADD10+0x48>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024d4:	605a      	str	r2, [r3, #4]
  }
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b091      	sub	sp, #68	; 0x44
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b22      	cmp	r3, #34	; 0x22
 8002508:	f040 8174 	bne.w	80027f4 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10f      	bne.n	8002534 <I2C_Master_ADDR+0x54>
 8002514:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002518:	2b40      	cmp	r3, #64	; 0x40
 800251a:	d10b      	bne.n	8002534 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251c:	2300      	movs	r3, #0
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	633b      	str	r3, [r7, #48]	; 0x30
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	e16b      	b.n	800280c <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002538:	2b00      	cmp	r3, #0
 800253a:	d11d      	bne.n	8002578 <I2C_Master_ADDR+0x98>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002544:	d118      	bne.n	8002578 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002546:	2300      	movs	r3, #0
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800256a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	651a      	str	r2, [r3, #80]	; 0x50
 8002576:	e149      	b.n	800280c <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d113      	bne.n	80025aa <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002582:	2300      	movs	r3, #0
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
 8002596:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	e120      	b.n	80027ec <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	f040 808a 	bne.w	80026ca <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80025b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025bc:	d137      	bne.n	800262e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025cc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025dc:	d113      	bne.n	8002606 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ec:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	e0f2      	b.n	80027ec <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	623b      	str	r3, [r7, #32]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	623b      	str	r3, [r7, #32]
 800261a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e0de      	b.n	80027ec <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800262e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002630:	2b08      	cmp	r3, #8
 8002632:	d02e      	beq.n	8002692 <I2C_Master_ADDR+0x1b2>
 8002634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002636:	2b20      	cmp	r3, #32
 8002638:	d02b      	beq.n	8002692 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800263a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263c:	2b12      	cmp	r3, #18
 800263e:	d102      	bne.n	8002646 <I2C_Master_ADDR+0x166>
 8002640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002642:	2b01      	cmp	r3, #1
 8002644:	d125      	bne.n	8002692 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002648:	2b04      	cmp	r3, #4
 800264a:	d00e      	beq.n	800266a <I2C_Master_ADDR+0x18a>
 800264c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264e:	2b02      	cmp	r3, #2
 8002650:	d00b      	beq.n	800266a <I2C_Master_ADDR+0x18a>
 8002652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002654:	2b10      	cmp	r3, #16
 8002656:	d008      	beq.n	800266a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	e007      	b.n	800267a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002678:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	e0ac      	b.n	80027ec <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	61bb      	str	r3, [r7, #24]
 80026b6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	e090      	b.n	80027ec <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d158      	bne.n	8002786 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80026d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d021      	beq.n	800271e <I2C_Master_ADDR+0x23e>
 80026da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d01e      	beq.n	800271e <I2C_Master_ADDR+0x23e>
 80026e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d01b      	beq.n	800271e <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	e012      	b.n	8002744 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800272c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800274e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002752:	d14b      	bne.n	80027ec <I2C_Master_ADDR+0x30c>
 8002754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002756:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800275a:	d00b      	beq.n	8002774 <I2C_Master_ADDR+0x294>
 800275c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275e:	2b01      	cmp	r3, #1
 8002760:	d008      	beq.n	8002774 <I2C_Master_ADDR+0x294>
 8002762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002764:	2b08      	cmp	r3, #8
 8002766:	d005      	beq.n	8002774 <I2C_Master_ADDR+0x294>
 8002768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276a:	2b10      	cmp	r3, #16
 800276c:	d002      	beq.n	8002774 <I2C_Master_ADDR+0x294>
 800276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002770:	2b20      	cmp	r3, #32
 8002772:	d13b      	bne.n	80027ec <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	e032      	b.n	80027ec <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002794:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027a4:	d117      	bne.n	80027d6 <I2C_Master_ADDR+0x2f6>
 80027a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027ac:	d00b      	beq.n	80027c6 <I2C_Master_ADDR+0x2e6>
 80027ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d008      	beq.n	80027c6 <I2C_Master_ADDR+0x2e6>
 80027b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d005      	beq.n	80027c6 <I2C_Master_ADDR+0x2e6>
 80027ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d002      	beq.n	80027c6 <I2C_Master_ADDR+0x2e6>
 80027c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d107      	bne.n	80027d6 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80027f2:	e00b      	b.n	800280c <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f4:	2300      	movs	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
}
 800280a:	e7ff      	b.n	800280c <I2C_Master_ADDR+0x32c>
 800280c:	bf00      	nop
 800280e:	3744      	adds	r7, #68	; 0x44
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002824:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d02b      	beq.n	8002888 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d114      	bne.n	8002888 <I2C_SlaveTransmit_TXE+0x72>
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	2b29      	cmp	r3, #41	; 0x29
 8002862:	d111      	bne.n	8002888 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002872:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2221      	movs	r2, #33	; 0x21
 8002878:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2228      	movs	r2, #40	; 0x28
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff f9f1 	bl	8001c6a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d011      	beq.n	80028c6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	781a      	ldrb	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d02c      	beq.n	8002944 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d114      	bne.n	8002944 <I2C_SlaveReceive_RXNE+0x74>
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	2b2a      	cmp	r3, #42	; 0x2a
 800291e:	d111      	bne.n	8002944 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2222      	movs	r2, #34	; 0x22
 8002934:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2228      	movs	r2, #40	; 0x28
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff f99c 	bl	8001c7c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d012      	beq.n	8002984 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002998:	2300      	movs	r3, #0
 800299a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029a8:	2b28      	cmp	r3, #40	; 0x28
 80029aa:	d127      	bne.n	80029fc <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ba:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	09db      	lsrs	r3, r3, #7
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d103      	bne.n	80029e0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	81bb      	strh	r3, [r7, #12]
 80029de:	e002      	b.n	80029e6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80029ee:	89ba      	ldrh	r2, [r7, #12]
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	4619      	mov	r1, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff f94a 	bl	8001c8e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80029fa:	e00e      	b.n	8002a1a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029fc:	2300      	movs	r3, #0
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a32:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a42:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002a44:	2300      	movs	r3, #0
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a70:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a80:	d172      	bne.n	8002b68 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	2b22      	cmp	r3, #34	; 0x22
 8002a86:	d002      	beq.n	8002a8e <I2C_Slave_STOPF+0x6a>
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8002a8c:	d135      	bne.n	8002afa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f043 0204 	orr.w	r2, r3, #4
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ac0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe fc60 	bl	800138c <HAL_DMA_GetState>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d049      	beq.n	8002b66 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad6:	4a69      	ldr	r2, [pc, #420]	; (8002c7c <I2C_Slave_STOPF+0x258>)
 8002ad8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe fbde 	bl	80012a0 <HAL_DMA_Abort_IT>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d03d      	beq.n	8002b66 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002af4:	4610      	mov	r0, r2
 8002af6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002af8:	e035      	b.n	8002b66 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f043 0204 	orr.w	r2, r3, #4
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b2c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe fc2a 	bl	800138c <HAL_DMA_GetState>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d014      	beq.n	8002b68 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b42:	4a4e      	ldr	r2, [pc, #312]	; (8002c7c <I2C_Slave_STOPF+0x258>)
 8002b44:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fba8 	bl	80012a0 <HAL_DMA_Abort_IT>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b60:	4610      	mov	r0, r2
 8002b62:	4798      	blx	r3
 8002b64:	e000      	b.n	8002b68 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b66:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d03e      	beq.n	8002bf0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d112      	bne.n	8002ba6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb0:	2b40      	cmp	r3, #64	; 0x40
 8002bb2:	d112      	bne.n	8002bda <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	f043 0204 	orr.w	r2, r3, #4
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f843 	bl	8002c84 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002bfe:	e039      	b.n	8002c74 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	2b2a      	cmp	r3, #42	; 0x2a
 8002c04:	d109      	bne.n	8002c1a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2228      	movs	r2, #40	; 0x28
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff f831 	bl	8001c7c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b28      	cmp	r3, #40	; 0x28
 8002c24:	d111      	bne.n	8002c4a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a15      	ldr	r2, [pc, #84]	; (8002c80 <I2C_Slave_STOPF+0x25c>)
 8002c2a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff f830 	bl	8001ca8 <HAL_I2C_ListenCpltCallback>
}
 8002c48:	e014      	b.n	8002c74 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	2b22      	cmp	r3, #34	; 0x22
 8002c50:	d002      	beq.n	8002c58 <I2C_Slave_STOPF+0x234>
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	2b22      	cmp	r3, #34	; 0x22
 8002c56:	d10d      	bne.n	8002c74 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff f804 	bl	8001c7c <HAL_I2C_SlaveRxCpltCallback>
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	08002ee9 	.word	0x08002ee9
 8002c80:	ffff0000 	.word	0xffff0000

08002c84 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c9c:	7bbb      	ldrb	r3, [r7, #14]
 8002c9e:	2b10      	cmp	r3, #16
 8002ca0:	d002      	beq.n	8002ca8 <I2C_ITError+0x24>
 8002ca2:	7bbb      	ldrb	r3, [r7, #14]
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d10a      	bne.n	8002cbe <I2C_ITError+0x3a>
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	2b22      	cmp	r3, #34	; 0x22
 8002cac:	d107      	bne.n	8002cbe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cbc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cc4:	2b28      	cmp	r3, #40	; 0x28
 8002cc6:	d107      	bne.n	8002cd8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2228      	movs	r2, #40	; 0x28
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002cd6:	e015      	b.n	8002d04 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ce6:	d00a      	beq.n	8002cfe <I2C_ITError+0x7a>
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	2b60      	cmp	r3, #96	; 0x60
 8002cec:	d007      	beq.n	8002cfe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d12:	d161      	bne.n	8002dd8 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d22:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d020      	beq.n	8002d72 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d34:	4a6a      	ldr	r2, [pc, #424]	; (8002ee0 <I2C_ITError+0x25c>)
 8002d36:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe faaf 	bl	80012a0 <HAL_DMA_Abort_IT>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8089 	beq.w	8002e5c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0201 	bic.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4798      	blx	r3
 8002d70:	e074      	b.n	8002e5c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d76:	4a5a      	ldr	r2, [pc, #360]	; (8002ee0 <I2C_ITError+0x25c>)
 8002d78:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe fa8e 	bl	80012a0 <HAL_DMA_Abort_IT>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d068      	beq.n	8002e5c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d94:	2b40      	cmp	r3, #64	; 0x40
 8002d96:	d10b      	bne.n	8002db0 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691a      	ldr	r2, [r3, #16]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4798      	blx	r3
 8002dd6:	e041      	b.n	8002e5c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b60      	cmp	r3, #96	; 0x60
 8002de2:	d125      	bne.n	8002e30 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	d10b      	bne.n	8002e18 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0201 	bic.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7fe ff61 	bl	8001cf0 <HAL_I2C_AbortCpltCallback>
 8002e2e:	e015      	b.n	8002e5c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3a:	2b40      	cmp	r3, #64	; 0x40
 8002e3c:	d10b      	bne.n	8002e56 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fe ff41 	bl	8001cde <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10e      	bne.n	8002e8a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d104      	bne.n	8002e8a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d007      	beq.n	8002e9a <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e98:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea0:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d113      	bne.n	8002ed6 <I2C_ITError+0x252>
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	2b28      	cmp	r3, #40	; 0x28
 8002eb2:	d110      	bne.n	8002ed6 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <I2C_ITError+0x260>)
 8002eb8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7fe fee9 	bl	8001ca8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	08002ee9 	.word	0x08002ee9
 8002ee4:	ffff0000 	.word	0xffff0000

08002ee8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f00:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f02:	4b4b      	ldr	r3, [pc, #300]	; (8003030 <I2C_DMAAbort+0x148>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	08db      	lsrs	r3, r3, #3
 8002f08:	4a4a      	ldr	r2, [pc, #296]	; (8003034 <I2C_DMAAbort+0x14c>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0a1a      	lsrs	r2, r3, #8
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00da      	lsls	r2, r3, #3
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f043 0220 	orr.w	r2, r3, #32
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002f2e:	e00a      	b.n	8002f46 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f44:	d0ea      	beq.n	8002f1c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f52:	2200      	movs	r2, #0
 8002f54:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f62:	2200      	movs	r2, #0
 8002f64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f74:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f88:	2200      	movs	r2, #0
 8002f8a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	2200      	movs	r2, #0
 8002f9a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b60      	cmp	r3, #96	; 0x60
 8002fb6:	d10e      	bne.n	8002fd6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002fce:	6978      	ldr	r0, [r7, #20]
 8002fd0:	f7fe fe8e 	bl	8001cf0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002fd4:	e027      	b.n	8003026 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fd6:	7cfb      	ldrb	r3, [r7, #19]
 8002fd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fdc:	2b28      	cmp	r3, #40	; 0x28
 8002fde:	d117      	bne.n	8003010 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ffe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2228      	movs	r2, #40	; 0x28
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800300e:	e007      	b.n	8003020 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003020:	6978      	ldr	r0, [r7, #20]
 8003022:	f7fe fe5c 	bl	8001cde <HAL_I2C_ErrorCallback>
}
 8003026:	bf00      	nop
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000000 	.word	0x20000000
 8003034:	14f8b589 	.word	0x14f8b589

08003038 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003044:	4b13      	ldr	r3, [pc, #76]	; (8003094 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	08db      	lsrs	r3, r3, #3
 800304a:	4a13      	ldr	r2, [pc, #76]	; (8003098 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	0a1a      	lsrs	r2, r3, #8
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3b01      	subs	r3, #1
 800305e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d107      	bne.n	8003076 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f043 0220 	orr.w	r2, r3, #32
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e008      	b.n	8003088 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003084:	d0e9      	beq.n	800305a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000000 	.word	0x20000000
 8003098:	14f8b589 	.word	0x14f8b589

0800309c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80030ac:	d103      	bne.n	80030b6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80030b4:	e007      	b.n	80030c6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80030be:	d102      	bne.n	80030c6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2208      	movs	r2, #8
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d2:	b08b      	sub	sp, #44	; 0x2c
 80030d4:	af06      	add	r7, sp, #24
 80030d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e0fd      	b.n	80032de <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f009 fedc 	bl	800ceb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2203      	movs	r2, #3
 8003100:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f003 f99d 	bl	8006448 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	687e      	ldr	r6, [r7, #4]
 8003116:	466d      	mov	r5, sp
 8003118:	f106 0410 	add.w	r4, r6, #16
 800311c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800311e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	602b      	str	r3, [r5, #0]
 8003124:	1d33      	adds	r3, r6, #4
 8003126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003128:	6838      	ldr	r0, [r7, #0]
 800312a:	f003 f967 	bl	80063fc <USB_CoreInit>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0ce      	b.n	80032de <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2100      	movs	r1, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f003 f998 	bl	800647c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]
 8003150:	e04c      	b.n	80031ec <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	440b      	add	r3, r1
 8003162:	3301      	adds	r3, #1
 8003164:	2201      	movs	r2, #1
 8003166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	440b      	add	r3, r1
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	b298      	uxth	r0, r3
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	440b      	add	r3, r1
 800318e:	3336      	adds	r3, #54	; 0x36
 8003190:	4602      	mov	r2, r0
 8003192:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	440b      	add	r3, r1
 80031a4:	3303      	adds	r3, #3
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031aa:	7bfa      	ldrb	r2, [r7, #15]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	440b      	add	r3, r1
 80031b8:	3338      	adds	r3, #56	; 0x38
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031be:	7bfa      	ldrb	r2, [r7, #15]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	440b      	add	r3, r1
 80031cc:	333c      	adds	r3, #60	; 0x3c
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	3340      	adds	r3, #64	; 0x40
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	3301      	adds	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d3ad      	bcc.n	8003152 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
 80031fa:	e044      	b.n	8003286 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031fc:	7bfa      	ldrb	r2, [r7, #15]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	440b      	add	r3, r1
 800320a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003212:	7bfa      	ldrb	r2, [r7, #15]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	440b      	add	r3, r1
 8003220:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003228:	7bfa      	ldrb	r2, [r7, #15]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	440b      	add	r3, r1
 8003236:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800323e:	7bfa      	ldrb	r2, [r7, #15]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	440b      	add	r3, r1
 800324c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	440b      	add	r3, r1
 8003262:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800326a:	7bfa      	ldrb	r2, [r7, #15]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	440b      	add	r3, r1
 8003278:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	3301      	adds	r3, #1
 8003284:	73fb      	strb	r3, [r7, #15]
 8003286:	7bfa      	ldrb	r2, [r7, #15]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	429a      	cmp	r2, r3
 800328e:	d3b5      	bcc.n	80031fc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	687e      	ldr	r6, [r7, #4]
 8003298:	466d      	mov	r5, sp
 800329a:	f106 0410 	add.w	r4, r6, #16
 800329e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	602b      	str	r3, [r5, #0]
 80032a6:	1d33      	adds	r3, r6, #4
 80032a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032aa:	6838      	ldr	r0, [r7, #0]
 80032ac:	f003 f8f2 	bl	8006494 <USB_DevInit>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2202      	movs	r2, #2
 80032ba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e00d      	b.n	80032de <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f005 fa63 	bl	80087a2 <USB_DevDisconnect>

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_PCD_Start+0x16>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e016      	b.n	800332a <HAL_PCD_Start+0x44>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f003 f887 	bl	800641c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800330e:	2101      	movs	r1, #1
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f00a f842 	bl	800d39a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f005 fa37 	bl	800878e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b088      	sub	sp, #32
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f005 fa39 	bl	80087b6 <USB_ReadInterrupts>
 8003344:	4603      	mov	r3, r0
 8003346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800334a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800334e:	d102      	bne.n	8003356 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fb61 	bl	8003a18 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f005 fa2b 	bl	80087b6 <USB_ReadInterrupts>
 8003360:	4603      	mov	r3, r0
 8003362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336a:	d112      	bne.n	8003392 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003374:	b29a      	uxth	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800337e:	b292      	uxth	r2, r2
 8003380:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f009 fe10 	bl	800cfaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800338a:	2100      	movs	r1, #0
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f925 	bl	80035dc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f005 fa0d 	bl	80087b6 <USB_ReadInterrupts>
 800339c:	4603      	mov	r3, r0
 800339e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033a6:	d10b      	bne.n	80033c0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033ba:	b292      	uxth	r2, r2
 80033bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f005 f9f6 	bl	80087b6 <USB_ReadInterrupts>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d4:	d10b      	bne.n	80033ee <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033de:	b29a      	uxth	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033e8:	b292      	uxth	r2, r2
 80033ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f005 f9df 	bl	80087b6 <USB_ReadInterrupts>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003402:	d126      	bne.n	8003452 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800340c:	b29a      	uxth	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0204 	bic.w	r2, r2, #4
 8003416:	b292      	uxth	r2, r2
 8003418:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003424:	b29a      	uxth	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0208 	bic.w	r2, r2, #8
 800342e:	b292      	uxth	r2, r2
 8003430:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f009 fdf1 	bl	800d01c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003442:	b29a      	uxth	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800344c:	b292      	uxth	r2, r2
 800344e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f005 f9ad 	bl	80087b6 <USB_ReadInterrupts>
 800345c:	4603      	mov	r3, r0
 800345e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003466:	f040 8084 	bne.w	8003572 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800346a:	2300      	movs	r3, #0
 800346c:	77fb      	strb	r3, [r7, #31]
 800346e:	e011      	b.n	8003494 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	7ffb      	ldrb	r3, [r7, #31]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	441a      	add	r2, r3
 800347c:	7ffb      	ldrb	r3, [r7, #31]
 800347e:	8812      	ldrh	r2, [r2, #0]
 8003480:	b292      	uxth	r2, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	f107 0120 	add.w	r1, r7, #32
 8003488:	440b      	add	r3, r1
 800348a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800348e:	7ffb      	ldrb	r3, [r7, #31]
 8003490:	3301      	adds	r3, #1
 8003492:	77fb      	strb	r3, [r7, #31]
 8003494:	7ffb      	ldrb	r3, [r7, #31]
 8003496:	2b07      	cmp	r3, #7
 8003498:	d9ea      	bls.n	8003470 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0201 	orr.w	r2, r2, #1
 80034ac:	b292      	uxth	r2, r2
 80034ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	b292      	uxth	r2, r2
 80034c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80034ca:	bf00      	nop
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f6      	beq.n	80034cc <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f0:	b292      	uxth	r2, r2
 80034f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80034f6:	2300      	movs	r3, #0
 80034f8:	77fb      	strb	r3, [r7, #31]
 80034fa:	e010      	b.n	800351e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80034fc:	7ffb      	ldrb	r3, [r7, #31]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	4611      	mov	r1, r2
 8003504:	7ffa      	ldrb	r2, [r7, #31]
 8003506:	0092      	lsls	r2, r2, #2
 8003508:	440a      	add	r2, r1
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	f107 0120 	add.w	r1, r7, #32
 8003510:	440b      	add	r3, r1
 8003512:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003516:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003518:	7ffb      	ldrb	r3, [r7, #31]
 800351a:	3301      	adds	r3, #1
 800351c:	77fb      	strb	r3, [r7, #31]
 800351e:	7ffb      	ldrb	r3, [r7, #31]
 8003520:	2b07      	cmp	r3, #7
 8003522:	d9eb      	bls.n	80034fc <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800352c:	b29a      	uxth	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0208 	orr.w	r2, r2, #8
 8003536:	b292      	uxth	r2, r2
 8003538:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003544:	b29a      	uxth	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800354e:	b292      	uxth	r2, r2
 8003550:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800355c:	b29a      	uxth	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0204 	orr.w	r2, r2, #4
 8003566:	b292      	uxth	r2, r2
 8003568:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f009 fd3b 	bl	800cfe8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f005 f91d 	bl	80087b6 <USB_ReadInterrupts>
 800357c:	4603      	mov	r3, r0
 800357e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003586:	d10e      	bne.n	80035a6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003590:	b29a      	uxth	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800359a:	b292      	uxth	r2, r2
 800359c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f009 fcf4 	bl	800cf8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f005 f903 	bl	80087b6 <USB_ReadInterrupts>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ba:	d10b      	bne.n	80035d4 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ce:	b292      	uxth	r2, r2
 80035d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80035d4:	bf00      	nop
 80035d6:	3720      	adds	r7, #32
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_PCD_SetAddress+0x1a>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e013      	b.n	800361e <HAL_PCD_SetAddress+0x42>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	4611      	mov	r1, r2
 800360e:	4618      	mov	r0, r3
 8003610:	f005 f8aa 	bl	8008768 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	4608      	mov	r0, r1
 8003630:	4611      	mov	r1, r2
 8003632:	461a      	mov	r2, r3
 8003634:	4603      	mov	r3, r0
 8003636:	70fb      	strb	r3, [r7, #3]
 8003638:	460b      	mov	r3, r1
 800363a:	803b      	strh	r3, [r7, #0]
 800363c:	4613      	mov	r3, r2
 800363e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003644:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003648:	2b00      	cmp	r3, #0
 800364a:	da0e      	bge.n	800366a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	4413      	add	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	705a      	strb	r2, [r3, #1]
 8003668:	e00e      	b.n	8003688 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	f003 0207 	and.w	r2, r3, #7
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	4413      	add	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	b2da      	uxtb	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003694:	883a      	ldrh	r2, [r7, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	78ba      	ldrb	r2, [r7, #2]
 800369e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	785b      	ldrb	r3, [r3, #1]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d004      	beq.n	80036b2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036b2:	78bb      	ldrb	r3, [r7, #2]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d102      	bne.n	80036be <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_PCD_EP_Open+0xa6>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e00e      	b.n	80036ea <HAL_PCD_EP_Open+0xc4>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68f9      	ldr	r1, [r7, #12]
 80036da:	4618      	mov	r0, r3
 80036dc:	f002 fefa 	bl	80064d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80036e8:	7afb      	ldrb	r3, [r7, #11]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003702:	2b00      	cmp	r3, #0
 8003704:	da0e      	bge.n	8003724 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003706:	78fb      	ldrb	r3, [r7, #3]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	4413      	add	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	705a      	strb	r2, [r3, #1]
 8003722:	e00e      	b.n	8003742 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	f003 0207 	and.w	r2, r3, #7
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	4413      	add	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	b2da      	uxtb	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_PCD_EP_Close+0x6a>
 8003758:	2302      	movs	r3, #2
 800375a:	e00e      	b.n	800377a <HAL_PCD_EP_Close+0x88>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68f9      	ldr	r1, [r7, #12]
 800376a:	4618      	mov	r0, r3
 800376c:	f003 fa1c 	bl	8006ba8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	460b      	mov	r3, r1
 8003790:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003792:	7afb      	ldrb	r3, [r7, #11]
 8003794:	f003 0207 	and.w	r2, r3, #7
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2200      	movs	r2, #0
 80037ba:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2200      	movs	r2, #0
 80037c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037c2:	7afb      	ldrb	r3, [r7, #11]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037ce:	7afb      	ldrb	r3, [r7, #11]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d106      	bne.n	80037e6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6979      	ldr	r1, [r7, #20]
 80037de:	4618      	mov	r0, r3
 80037e0:	f003 fbce 	bl	8006f80 <USB_EPStartXfer>
 80037e4:	e005      	b.n	80037f2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6979      	ldr	r1, [r7, #20]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f003 fbc7 	bl	8006f80 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	f003 0207 	and.w	r2, r3, #7
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	440b      	add	r3, r1
 800381a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800381e:	681b      	ldr	r3, [r3, #0]
}
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr

0800382a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b086      	sub	sp, #24
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
 8003836:	460b      	mov	r3, r1
 8003838:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800383a:	7afb      	ldrb	r3, [r7, #11]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4413      	add	r3, r2
 800384e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2200      	movs	r2, #0
 800386e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2201      	movs	r2, #1
 8003874:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003876:	7afb      	ldrb	r3, [r7, #11]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	b2da      	uxtb	r2, r3
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003882:	7afb      	ldrb	r3, [r7, #11]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	2b00      	cmp	r3, #0
 800388a:	d106      	bne.n	800389a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6979      	ldr	r1, [r7, #20]
 8003892:	4618      	mov	r0, r3
 8003894:	f003 fb74 	bl	8006f80 <USB_EPStartXfer>
 8003898:	e005      	b.n	80038a6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6979      	ldr	r1, [r7, #20]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f003 fb6d 	bl	8006f80 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	f003 0207 	and.w	r2, r3, #7
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d901      	bls.n	80038ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e04c      	b.n	8003968 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	da0e      	bge.n	80038f4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2201      	movs	r2, #1
 80038f0:	705a      	strb	r2, [r3, #1]
 80038f2:	e00c      	b.n	800390e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	4413      	add	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	b2da      	uxtb	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_PCD_EP_SetStall+0x7e>
 800392a:	2302      	movs	r3, #2
 800392c:	e01c      	b.n	8003968 <HAL_PCD_EP_SetStall+0xb8>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68f9      	ldr	r1, [r7, #12]
 800393c:	4618      	mov	r0, r3
 800393e:	f004 fe16 	bl	800856e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	2b00      	cmp	r3, #0
 800394a:	d108      	bne.n	800395e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003956:	4619      	mov	r1, r3
 8003958:	4610      	mov	r0, r2
 800395a:	f004 ff3b 	bl	80087d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	f003 020f 	and.w	r2, r3, #15
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	429a      	cmp	r2, r3
 8003988:	d901      	bls.n	800398e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e040      	b.n	8003a10 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800398e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003992:	2b00      	cmp	r3, #0
 8003994:	da0e      	bge.n	80039b4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003996:	78fb      	ldrb	r3, [r7, #3]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	4613      	mov	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	4413      	add	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	705a      	strb	r2, [r3, #1]
 80039b2:	e00e      	b.n	80039d2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	f003 0207 	and.w	r2, r3, #7
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	4413      	add	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_PCD_EP_ClrStall+0x82>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e00e      	b.n	8003a10 <HAL_PCD_EP_ClrStall+0xa0>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68f9      	ldr	r1, [r7, #12]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f004 fe04 	bl	800860e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08e      	sub	sp, #56	; 0x38
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a20:	e2ec      	b.n	8003ffc <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a2a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003a2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003a38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f040 8161 	bne.w	8003d04 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003a42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d152      	bne.n	8003af2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5c:	81fb      	strh	r3, [r7, #14]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	89fb      	ldrh	r3, [r7, #14]
 8003a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3328      	adds	r3, #40	; 0x28
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	461a      	mov	r2, r3
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	3302      	adds	r3, #2
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	695a      	ldr	r2, [r3, #20]
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	441a      	add	r2, r3
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f009 fa51 	bl	800cf5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 829b 	beq.w	8003ffc <PCD_EP_ISR_Handler+0x5e4>
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f040 8296 	bne.w	8003ffc <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	b292      	uxth	r2, r2
 8003ae4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003af0:	e284      	b.n	8003ffc <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003b02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d034      	beq.n	8003b76 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	3306      	adds	r3, #6
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	f004 fe92 	bl	8008874 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	823b      	strh	r3, [r7, #16]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	8a3a      	ldrh	r2, [r7, #16]
 8003b66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b6a:	b292      	uxth	r2, r2
 8003b6c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f009 f9c6 	bl	800cf00 <HAL_PCD_SetupStageCallback>
 8003b74:	e242      	b.n	8003ffc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b76:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f280 823e 	bge.w	8003ffc <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	83bb      	strh	r3, [r7, #28]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	8bba      	ldrh	r2, [r7, #28]
 8003b96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b9a:	b292      	uxth	r2, r2
 8003b9c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3306      	adds	r3, #6
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d019      	beq.n	8003c06 <PCD_EP_ISR_Handler+0x1ee>
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d015      	beq.n	8003c06 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	6959      	ldr	r1, [r3, #20]
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f004 fe42 	bl	8008874 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	441a      	add	r2, r3
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003bfe:	2100      	movs	r1, #0
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f009 f98f 	bl	800cf24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f040 81f2 	bne.w	8003ffc <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d112      	bne.n	8003c66 <PCD_EP_ISR_Handler+0x24e>
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	801a      	strh	r2, [r3, #0]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	801a      	strh	r2, [r3, #0]
 8003c64:	e02f      	b.n	8003cc6 <PCD_EP_ISR_Handler+0x2ae>
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b3e      	cmp	r3, #62	; 0x3e
 8003c6c:	d813      	bhi.n	8003c96 <PCD_EP_ISR_Handler+0x27e>
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	633b      	str	r3, [r7, #48]	; 0x30
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <PCD_EP_ISR_Handler+0x270>
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	3301      	adds	r3, #1
 8003c86:	633b      	str	r3, [r7, #48]	; 0x30
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	029b      	lsls	r3, r3, #10
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	801a      	strh	r2, [r3, #0]
 8003c94:	e017      	b.n	8003cc6 <PCD_EP_ISR_Handler+0x2ae>
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <PCD_EP_ISR_Handler+0x298>
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	3b01      	subs	r3, #1
 8003cae:	633b      	str	r3, [r7, #48]	; 0x30
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	029b      	lsls	r3, r3, #10
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	827b      	strh	r3, [r7, #18]
 8003cd8:	8a7b      	ldrh	r3, [r7, #18]
 8003cda:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003cde:	827b      	strh	r3, [r7, #18]
 8003ce0:	8a7b      	ldrh	r3, [r7, #18]
 8003ce2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ce6:	827b      	strh	r3, [r7, #18]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	8a7b      	ldrh	r3, [r7, #18]
 8003cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	8013      	strh	r3, [r2, #0]
 8003d02:	e17b      	b.n	8003ffc <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d16:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f280 80ea 	bge.w	8003ef4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	461a      	mov	r2, r3
 8003d26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d36:	4013      	ands	r3, r2
 8003d38:	853b      	strh	r3, [r7, #40]	; 0x28
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003d4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d4e:	b292      	uxth	r2, r2
 8003d50:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003d52:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003d56:	4613      	mov	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	4413      	add	r3, r2
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	7b1b      	ldrb	r3, [r3, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d122      	bne.n	8003db6 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4413      	add	r3, r2
 8003d84:	3306      	adds	r3, #6
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6812      	ldr	r2, [r2, #0]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d98:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003d9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 8087 	beq.w	8003eb0 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	6959      	ldr	r1, [r3, #20]
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	88da      	ldrh	r2, [r3, #6]
 8003dae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003db0:	f004 fd60 	bl	8008874 <USB_ReadPMA>
 8003db4:	e07c      	b.n	8003eb0 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	78db      	ldrb	r3, [r3, #3]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d108      	bne.n	8003dd0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003dbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f927 	bl	8004018 <HAL_PCD_EP_DB_Receive>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003dce:	e06f      	b.n	8003eb0 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dea:	847b      	strh	r3, [r7, #34]	; 0x22
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	441a      	add	r2, r3
 8003dfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d021      	beq.n	8003e6e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3302      	adds	r3, #2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6812      	ldr	r2, [r2, #0]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e52:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003e54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d02a      	beq.n	8003eb0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	6959      	ldr	r1, [r3, #20]
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	891a      	ldrh	r2, [r3, #8]
 8003e66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e68:	f004 fd04 	bl	8008874 <USB_ReadPMA>
 8003e6c:	e020      	b.n	8003eb0 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	461a      	mov	r2, r3
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4413      	add	r3, r2
 8003e82:	3306      	adds	r3, #6
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6812      	ldr	r2, [r2, #0]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e96:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003e98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	6959      	ldr	r1, [r3, #20]
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	895a      	ldrh	r2, [r3, #10]
 8003eaa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003eac:	f004 fce2 	bl	8008874 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	69da      	ldr	r2, [r3, #28]
 8003eb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003eb6:	441a      	add	r2, r3
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ec2:	441a      	add	r2, r3
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <PCD_EP_ISR_Handler+0x4c2>
 8003ed0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d206      	bcs.n	8003ee8 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f009 f81f 	bl	800cf24 <HAL_PCD_DataOutStageCallback>
 8003ee6:	e005      	b.n	8003ef4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f003 f846 	bl	8006f80 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003ef4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d07e      	beq.n	8003ffc <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003efe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	4413      	add	r3, r2
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2c:	843b      	strh	r3, [r7, #32]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	441a      	add	r2, r3
 8003f3c:	8c3b      	ldrh	r3, [r7, #32]
 8003f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	78db      	ldrb	r3, [r3, #3]
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d00c      	beq.n	8003f6c <PCD_EP_ISR_Handler+0x554>
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	78db      	ldrb	r3, [r3, #3]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d008      	beq.n	8003f6c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d146      	bne.n	8003ff0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003f62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d141      	bne.n	8003ff0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4413      	add	r3, r2
 8003f80:	3302      	adds	r3, #2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f94:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	8bfb      	ldrh	r3, [r7, #30]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d906      	bls.n	8003fae <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	699a      	ldr	r2, [r3, #24]
 8003fa4:	8bfb      	ldrh	r3, [r7, #30]
 8003fa6:	1ad2      	subs	r2, r2, r3
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	619a      	str	r2, [r3, #24]
 8003fac:	e002      	b.n	8003fb4 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d106      	bne.n	8003fca <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f008 ffc9 	bl	800cf5a <HAL_PCD_DataInStageCallback>
 8003fc8:	e018      	b.n	8003ffc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	8bfb      	ldrh	r3, [r7, #30]
 8003fd0:	441a      	add	r2, r3
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	69da      	ldr	r2, [r3, #28]
 8003fda:	8bfb      	ldrh	r3, [r7, #30]
 8003fdc:	441a      	add	r2, r3
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f002 ffc9 	bl	8006f80 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003fee:	e005      	b.n	8003ffc <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ff0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f91b 	bl	8004232 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004004:	b29b      	uxth	r3, r3
 8004006:	b21b      	sxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	f6ff ad0a 	blt.w	8003a22 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3738      	adds	r7, #56	; 0x38
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	4613      	mov	r3, r2
 8004024:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d07e      	beq.n	800412e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004038:	b29b      	uxth	r3, r3
 800403a:	461a      	mov	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4413      	add	r3, r2
 8004044:	3302      	adds	r3, #2
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	4413      	add	r3, r2
 800404e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004058:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	8b7b      	ldrh	r3, [r7, #26]
 8004060:	429a      	cmp	r2, r3
 8004062:	d306      	bcc.n	8004072 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	8b7b      	ldrh	r3, [r7, #26]
 800406a:	1ad2      	subs	r2, r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	619a      	str	r2, [r3, #24]
 8004070:	e002      	b.n	8004078 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2200      	movs	r2, #0
 8004076:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d123      	bne.n	80040c8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	b29b      	uxth	r3, r3
 8004092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409a:	833b      	strh	r3, [r7, #24]
 800409c:	8b3b      	ldrh	r3, [r7, #24]
 800409e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040a2:	833b      	strh	r3, [r7, #24]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	441a      	add	r2, r3
 80040b2:	8b3b      	ldrh	r3, [r7, #24]
 80040b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01f      	beq.n	8004112 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ec:	82fb      	strh	r3, [r7, #22]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	441a      	add	r2, r3
 80040fc:	8afb      	ldrh	r3, [r7, #22]
 80040fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800410a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800410e:	b29b      	uxth	r3, r3
 8004110:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004112:	8b7b      	ldrh	r3, [r7, #26]
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 8087 	beq.w	8004228 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6959      	ldr	r1, [r3, #20]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	891a      	ldrh	r2, [r3, #8]
 8004126:	8b7b      	ldrh	r3, [r7, #26]
 8004128:	f004 fba4 	bl	8008874 <USB_ReadPMA>
 800412c:	e07c      	b.n	8004228 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004136:	b29b      	uxth	r3, r3
 8004138:	461a      	mov	r2, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	3306      	adds	r3, #6
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004156:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	699a      	ldr	r2, [r3, #24]
 800415c:	8b7b      	ldrh	r3, [r7, #26]
 800415e:	429a      	cmp	r2, r3
 8004160:	d306      	bcc.n	8004170 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	8b7b      	ldrh	r3, [r7, #26]
 8004168:	1ad2      	subs	r2, r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	619a      	str	r2, [r3, #24]
 800416e:	e002      	b.n	8004176 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2200      	movs	r2, #0
 8004174:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d123      	bne.n	80041c6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004198:	83fb      	strh	r3, [r7, #30]
 800419a:	8bfb      	ldrh	r3, [r7, #30]
 800419c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041a0:	83fb      	strh	r3, [r7, #30]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	441a      	add	r2, r3
 80041b0:	8bfb      	ldrh	r3, [r7, #30]
 80041b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80041c6:	88fb      	ldrh	r3, [r7, #6]
 80041c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d11f      	bne.n	8004210 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	83bb      	strh	r3, [r7, #28]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	441a      	add	r2, r3
 80041fa:	8bbb      	ldrh	r3, [r7, #28]
 80041fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004208:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800420c:	b29b      	uxth	r3, r3
 800420e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004210:	8b7b      	ldrh	r3, [r7, #26]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d008      	beq.n	8004228 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	6959      	ldr	r1, [r3, #20]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	895a      	ldrh	r2, [r3, #10]
 8004222:	8b7b      	ldrh	r3, [r7, #26]
 8004224:	f004 fb26 	bl	8008874 <USB_ReadPMA>
    }
  }

  return count;
 8004228:	8b7b      	ldrh	r3, [r7, #26]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3720      	adds	r7, #32
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b0a2      	sub	sp, #136	; 0x88
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	4613      	mov	r3, r2
 800423e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004240:	88fb      	ldrh	r3, [r7, #6]
 8004242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 81c7 	beq.w	80045da <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004254:	b29b      	uxth	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	4413      	add	r3, r2
 8004260:	3302      	adds	r3, #2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	6812      	ldr	r2, [r2, #0]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004274:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	699a      	ldr	r2, [r3, #24]
 800427c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004280:	429a      	cmp	r2, r3
 8004282:	d907      	bls.n	8004294 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	699a      	ldr	r2, [r3, #24]
 8004288:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800428c:	1ad2      	subs	r2, r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	619a      	str	r2, [r3, #24]
 8004292:	e002      	b.n	800429a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2200      	movs	r2, #0
 8004298:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f040 80b9 	bne.w	8004416 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	785b      	ldrb	r3, [r3, #1]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d126      	bne.n	80042fa <HAL_PCD_EP_DB_Transmit+0xc8>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	461a      	mov	r2, r3
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	4413      	add	r3, r2
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	011a      	lsls	r2, r3, #4
 80042ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042cc:	4413      	add	r3, r2
 80042ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042de:	b29a      	uxth	r2, r3
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	801a      	strh	r2, [r3, #0]
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	801a      	strh	r2, [r3, #0]
 80042f8:	e01a      	b.n	8004330 <HAL_PCD_EP_DB_Transmit+0xfe>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	785b      	ldrb	r3, [r3, #1]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d116      	bne.n	8004330 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	633b      	str	r3, [r7, #48]	; 0x30
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004310:	b29b      	uxth	r3, r3
 8004312:	461a      	mov	r2, r3
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	4413      	add	r3, r2
 8004318:	633b      	str	r3, [r7, #48]	; 0x30
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	011a      	lsls	r2, r3, #4
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	4413      	add	r3, r2
 8004324:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	2200      	movs	r2, #0
 800432e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	623b      	str	r3, [r7, #32]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	785b      	ldrb	r3, [r3, #1]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d126      	bne.n	800438c <HAL_PCD_EP_DB_Transmit+0x15a>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	61bb      	str	r3, [r7, #24]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434c:	b29b      	uxth	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	4413      	add	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	011a      	lsls	r2, r3, #4
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	4413      	add	r3, r2
 8004360:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004370:	b29a      	uxth	r2, r3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	801a      	strh	r2, [r3, #0]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004384:	b29a      	uxth	r2, r3
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	801a      	strh	r2, [r3, #0]
 800438a:	e017      	b.n	80043bc <HAL_PCD_EP_DB_Transmit+0x18a>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	785b      	ldrb	r3, [r3, #1]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d113      	bne.n	80043bc <HAL_PCD_EP_DB_Transmit+0x18a>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800439c:	b29b      	uxth	r3, r3
 800439e:	461a      	mov	r2, r3
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	4413      	add	r3, r2
 80043a4:	623b      	str	r3, [r7, #32]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	011a      	lsls	r2, r3, #4
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	4413      	add	r3, r2
 80043b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043b4:	61fb      	str	r3, [r7, #28]
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	2200      	movs	r2, #0
 80043ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	4619      	mov	r1, r3
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f008 fdc9 	bl	800cf5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 82d4 	beq.w	800497c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ee:	827b      	strh	r3, [r7, #18]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	441a      	add	r2, r3
 80043fe:	8a7b      	ldrh	r3, [r7, #18]
 8004400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800440c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004410:	b29b      	uxth	r3, r3
 8004412:	8013      	strh	r3, [r2, #0]
 8004414:	e2b2      	b.n	800497c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d021      	beq.n	8004464 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	b29b      	uxth	r3, r3
 8004432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	441a      	add	r2, r3
 800444c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004458:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800445c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004460:	b29b      	uxth	r3, r3
 8004462:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800446a:	2b01      	cmp	r3, #1
 800446c:	f040 8286 	bne.w	800497c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	695a      	ldr	r2, [r3, #20]
 8004474:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004478:	441a      	add	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	69da      	ldr	r2, [r3, #28]
 8004482:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004486:	441a      	add	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	6a1a      	ldr	r2, [r3, #32]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	429a      	cmp	r2, r3
 8004496:	d309      	bcc.n	80044ac <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	6a1a      	ldr	r2, [r3, #32]
 80044a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a4:	1ad2      	subs	r2, r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	621a      	str	r2, [r3, #32]
 80044aa:	e015      	b.n	80044d8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d107      	bne.n	80044c4 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80044b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80044c2:	e009      	b.n	80044d8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2200      	movs	r2, #0
 80044d6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	785b      	ldrb	r3, [r3, #1]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d155      	bne.n	800458c <HAL_PCD_EP_DB_Transmit+0x35a>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	461a      	mov	r2, r3
 80044f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f4:	4413      	add	r3, r2
 80044f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	011a      	lsls	r2, r3, #4
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	4413      	add	r3, r2
 8004502:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004506:	637b      	str	r3, [r7, #52]	; 0x34
 8004508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800450a:	2b00      	cmp	r3, #0
 800450c:	d112      	bne.n	8004534 <HAL_PCD_EP_DB_Transmit+0x302>
 800450e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	b29b      	uxth	r3, r3
 8004514:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004518:	b29a      	uxth	r2, r3
 800451a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451c:	801a      	strh	r2, [r3, #0]
 800451e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800452c:	b29a      	uxth	r2, r3
 800452e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004530:	801a      	strh	r2, [r3, #0]
 8004532:	e047      	b.n	80045c4 <HAL_PCD_EP_DB_Transmit+0x392>
 8004534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004536:	2b3e      	cmp	r3, #62	; 0x3e
 8004538:	d811      	bhi.n	800455e <HAL_PCD_EP_DB_Transmit+0x32c>
 800453a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800453c:	085b      	lsrs	r3, r3, #1
 800453e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_PCD_EP_DB_Transmit+0x31e>
 800454a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800454c:	3301      	adds	r3, #1
 800454e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004552:	b29b      	uxth	r3, r3
 8004554:	029b      	lsls	r3, r3, #10
 8004556:	b29a      	uxth	r2, r3
 8004558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455a:	801a      	strh	r2, [r3, #0]
 800455c:	e032      	b.n	80045c4 <HAL_PCD_EP_DB_Transmit+0x392>
 800455e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	64bb      	str	r3, [r7, #72]	; 0x48
 8004564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004566:	f003 031f 	and.w	r3, r3, #31
 800456a:	2b00      	cmp	r3, #0
 800456c:	d102      	bne.n	8004574 <HAL_PCD_EP_DB_Transmit+0x342>
 800456e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004570:	3b01      	subs	r3, #1
 8004572:	64bb      	str	r3, [r7, #72]	; 0x48
 8004574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004576:	b29b      	uxth	r3, r3
 8004578:	029b      	lsls	r3, r3, #10
 800457a:	b29b      	uxth	r3, r3
 800457c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004584:	b29a      	uxth	r2, r3
 8004586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004588:	801a      	strh	r2, [r3, #0]
 800458a:	e01b      	b.n	80045c4 <HAL_PCD_EP_DB_Transmit+0x392>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	785b      	ldrb	r3, [r3, #1]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d117      	bne.n	80045c4 <HAL_PCD_EP_DB_Transmit+0x392>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	643b      	str	r3, [r7, #64]	; 0x40
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a8:	4413      	add	r3, r2
 80045aa:	643b      	str	r3, [r7, #64]	; 0x40
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	011a      	lsls	r2, r3, #4
 80045b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b4:	4413      	add	r3, r2
 80045b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045be:	b29a      	uxth	r2, r3
 80045c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	6959      	ldr	r1, [r3, #20]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	891a      	ldrh	r2, [r3, #8]
 80045d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	f004 f909 	bl	80087ea <USB_WritePMA>
 80045d8:	e1d0      	b.n	800497c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4413      	add	r3, r2
 80045ee:	3306      	adds	r3, #6
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004602:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800460e:	429a      	cmp	r2, r3
 8004610:	d307      	bcc.n	8004622 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800461a:	1ad2      	subs	r2, r2, r3
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	619a      	str	r2, [r3, #24]
 8004620:	e002      	b.n	8004628 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2200      	movs	r2, #0
 8004626:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	2b00      	cmp	r3, #0
 800462e:	f040 80c4 	bne.w	80047ba <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	785b      	ldrb	r3, [r3, #1]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d126      	bne.n	8004688 <HAL_PCD_EP_DB_Transmit+0x456>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004648:	b29b      	uxth	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464e:	4413      	add	r3, r2
 8004650:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	011a      	lsls	r2, r3, #4
 8004658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465a:	4413      	add	r3, r2
 800465c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004660:	66bb      	str	r3, [r7, #104]	; 0x68
 8004662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b29b      	uxth	r3, r3
 8004668:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800466c:	b29a      	uxth	r2, r3
 800466e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004670:	801a      	strh	r2, [r3, #0]
 8004672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800467c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004680:	b29a      	uxth	r2, r3
 8004682:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004684:	801a      	strh	r2, [r3, #0]
 8004686:	e01a      	b.n	80046be <HAL_PCD_EP_DB_Transmit+0x48c>
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	785b      	ldrb	r3, [r3, #1]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d116      	bne.n	80046be <HAL_PCD_EP_DB_Transmit+0x48c>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	677b      	str	r3, [r7, #116]	; 0x74
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800469e:	b29b      	uxth	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a4:	4413      	add	r3, r2
 80046a6:	677b      	str	r3, [r7, #116]	; 0x74
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	011a      	lsls	r2, r3, #4
 80046ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046b0:	4413      	add	r3, r2
 80046b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046b6:	673b      	str	r3, [r7, #112]	; 0x70
 80046b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046ba:	2200      	movs	r2, #0
 80046bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	785b      	ldrb	r3, [r3, #1]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d12f      	bne.n	800472c <HAL_PCD_EP_DB_Transmit+0x4fa>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046dc:	b29b      	uxth	r3, r3
 80046de:	461a      	mov	r2, r3
 80046e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046e4:	4413      	add	r3, r2
 80046e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	011a      	lsls	r2, r3, #4
 80046f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046f4:	4413      	add	r3, r2
 80046f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800470a:	b29a      	uxth	r2, r3
 800470c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004710:	801a      	strh	r2, [r3, #0]
 8004712:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29b      	uxth	r3, r3
 800471a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800471e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004722:	b29a      	uxth	r2, r3
 8004724:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004728:	801a      	strh	r2, [r3, #0]
 800472a:	e017      	b.n	800475c <HAL_PCD_EP_DB_Transmit+0x52a>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	785b      	ldrb	r3, [r3, #1]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d113      	bne.n	800475c <HAL_PCD_EP_DB_Transmit+0x52a>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800473c:	b29b      	uxth	r3, r3
 800473e:	461a      	mov	r2, r3
 8004740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004742:	4413      	add	r3, r2
 8004744:	67bb      	str	r3, [r7, #120]	; 0x78
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	011a      	lsls	r2, r3, #4
 800474c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800474e:	4413      	add	r3, r2
 8004750:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004754:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004756:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004758:	2200      	movs	r2, #0
 800475a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	4619      	mov	r1, r3
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f008 fbf9 	bl	800cf5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004768:	88fb      	ldrh	r3, [r7, #6]
 800476a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800476e:	2b00      	cmp	r3, #0
 8004770:	f040 8104 	bne.w	800497c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	b29b      	uxth	r3, r3
 8004786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800478a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	461a      	mov	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	441a      	add	r2, r3
 80047a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80047a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	8013      	strh	r3, [r2, #0]
 80047b8:	e0e0      	b.n	800497c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d121      	bne.n	8004808 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	441a      	add	r2, r3
 80047f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80047f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004804:	b29b      	uxth	r3, r3
 8004806:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800480e:	2b01      	cmp	r3, #1
 8004810:	f040 80b4 	bne.w	800497c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	695a      	ldr	r2, [r3, #20]
 8004818:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800481c:	441a      	add	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	69da      	ldr	r2, [r3, #28]
 8004826:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800482a:	441a      	add	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	6a1a      	ldr	r2, [r3, #32]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	429a      	cmp	r2, r3
 800483a:	d309      	bcc.n	8004850 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	6a1a      	ldr	r2, [r3, #32]
 8004846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004848:	1ad2      	subs	r2, r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	621a      	str	r2, [r3, #32]
 800484e:	e015      	b.n	800487c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d107      	bne.n	8004868 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004858:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800485c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004866:	e009      	b.n	800487c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2200      	movs	r2, #0
 8004872:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	667b      	str	r3, [r7, #100]	; 0x64
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	785b      	ldrb	r3, [r3, #1]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d155      	bne.n	8004936 <HAL_PCD_EP_DB_Transmit+0x704>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004898:	b29b      	uxth	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800489e:	4413      	add	r3, r2
 80048a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	011a      	lsls	r2, r3, #4
 80048a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048aa:	4413      	add	r3, r2
 80048ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80048b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d112      	bne.n	80048de <HAL_PCD_EP_DB_Transmit+0x6ac>
 80048b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	b29b      	uxth	r3, r3
 80048be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048c6:	801a      	strh	r2, [r3, #0]
 80048c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048da:	801a      	strh	r2, [r3, #0]
 80048dc:	e044      	b.n	8004968 <HAL_PCD_EP_DB_Transmit+0x736>
 80048de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e0:	2b3e      	cmp	r3, #62	; 0x3e
 80048e2:	d811      	bhi.n	8004908 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80048e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e6:	085b      	lsrs	r3, r3, #1
 80048e8:	657b      	str	r3, [r7, #84]	; 0x54
 80048ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_PCD_EP_DB_Transmit+0x6c8>
 80048f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f6:	3301      	adds	r3, #1
 80048f8:	657b      	str	r3, [r7, #84]	; 0x54
 80048fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	029b      	lsls	r3, r3, #10
 8004900:	b29a      	uxth	r2, r3
 8004902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004904:	801a      	strh	r2, [r3, #0]
 8004906:	e02f      	b.n	8004968 <HAL_PCD_EP_DB_Transmit+0x736>
 8004908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	657b      	str	r3, [r7, #84]	; 0x54
 800490e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	2b00      	cmp	r3, #0
 8004916:	d102      	bne.n	800491e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800491a:	3b01      	subs	r3, #1
 800491c:	657b      	str	r3, [r7, #84]	; 0x54
 800491e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004920:	b29b      	uxth	r3, r3
 8004922:	029b      	lsls	r3, r3, #10
 8004924:	b29b      	uxth	r3, r3
 8004926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800492a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800492e:	b29a      	uxth	r2, r3
 8004930:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004932:	801a      	strh	r2, [r3, #0]
 8004934:	e018      	b.n	8004968 <HAL_PCD_EP_DB_Transmit+0x736>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d114      	bne.n	8004968 <HAL_PCD_EP_DB_Transmit+0x736>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004946:	b29b      	uxth	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800494c:	4413      	add	r3, r2
 800494e:	667b      	str	r3, [r7, #100]	; 0x64
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	011a      	lsls	r2, r3, #4
 8004956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004958:	4413      	add	r3, r2
 800495a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800495e:	663b      	str	r3, [r7, #96]	; 0x60
 8004960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004962:	b29a      	uxth	r2, r3
 8004964:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004966:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	6959      	ldr	r1, [r3, #20]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	895a      	ldrh	r2, [r3, #10]
 8004974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004976:	b29b      	uxth	r3, r3
 8004978:	f003 ff37 	bl	80087ea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	b29b      	uxth	r3, r3
 800498e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004996:	823b      	strh	r3, [r7, #16]
 8004998:	8a3b      	ldrh	r3, [r7, #16]
 800499a:	f083 0310 	eor.w	r3, r3, #16
 800499e:	823b      	strh	r3, [r7, #16]
 80049a0:	8a3b      	ldrh	r3, [r7, #16]
 80049a2:	f083 0320 	eor.w	r3, r3, #32
 80049a6:	823b      	strh	r3, [r7, #16]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	8a3b      	ldrh	r3, [r7, #16]
 80049b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3788      	adds	r7, #136	; 0x88
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b087      	sub	sp, #28
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	607b      	str	r3, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	817b      	strh	r3, [r7, #10]
 80049e4:	4613      	mov	r3, r2
 80049e6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80049e8:	897b      	ldrh	r3, [r7, #10]
 80049ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00b      	beq.n	8004a0c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049f4:	897b      	ldrh	r3, [r7, #10]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4413      	add	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	e009      	b.n	8004a20 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a0c:	897a      	ldrh	r2, [r7, #10]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004a20:	893b      	ldrh	r3, [r7, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d107      	bne.n	8004a36 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	80da      	strh	r2, [r3, #6]
 8004a34:	e00b      	b.n	8004a4e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	0c1b      	lsrs	r3, r3, #16
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr
	...

08004a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e26c      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 8087 	beq.w	8004b8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a7c:	4b92      	ldr	r3, [pc, #584]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d00c      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a88:	4b8f      	ldr	r3, [pc, #572]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 030c 	and.w	r3, r3, #12
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d112      	bne.n	8004aba <HAL_RCC_OscConfig+0x5e>
 8004a94:	4b8c      	ldr	r3, [pc, #560]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa0:	d10b      	bne.n	8004aba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa2:	4b89      	ldr	r3, [pc, #548]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d06c      	beq.n	8004b88 <HAL_RCC_OscConfig+0x12c>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d168      	bne.n	8004b88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e246      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac2:	d106      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x76>
 8004ac4:	4b80      	ldr	r3, [pc, #512]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a7f      	ldr	r2, [pc, #508]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	e02e      	b.n	8004b30 <HAL_RCC_OscConfig+0xd4>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCC_OscConfig+0x98>
 8004ada:	4b7b      	ldr	r3, [pc, #492]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a7a      	ldr	r2, [pc, #488]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	4b78      	ldr	r3, [pc, #480]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a77      	ldr	r2, [pc, #476]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	e01d      	b.n	8004b30 <HAL_RCC_OscConfig+0xd4>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004afc:	d10c      	bne.n	8004b18 <HAL_RCC_OscConfig+0xbc>
 8004afe:	4b72      	ldr	r3, [pc, #456]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a71      	ldr	r2, [pc, #452]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	4b6f      	ldr	r3, [pc, #444]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a6e      	ldr	r2, [pc, #440]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	e00b      	b.n	8004b30 <HAL_RCC_OscConfig+0xd4>
 8004b18:	4b6b      	ldr	r3, [pc, #428]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a6a      	ldr	r2, [pc, #424]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	4b68      	ldr	r3, [pc, #416]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a67      	ldr	r2, [pc, #412]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d013      	beq.n	8004b60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b38:	f7fc f87c 	bl	8000c34 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b40:	f7fc f878 	bl	8000c34 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b64      	cmp	r3, #100	; 0x64
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e1fa      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b52:	4b5d      	ldr	r3, [pc, #372]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0xe4>
 8004b5e:	e014      	b.n	8004b8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b60:	f7fc f868 	bl	8000c34 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b68:	f7fc f864 	bl	8000c34 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b64      	cmp	r3, #100	; 0x64
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e1e6      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b7a:	4b53      	ldr	r3, [pc, #332]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x10c>
 8004b86:	e000      	b.n	8004b8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d063      	beq.n	8004c5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b96:	4b4c      	ldr	r3, [pc, #304]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00b      	beq.n	8004bba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ba2:	4b49      	ldr	r3, [pc, #292]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d11c      	bne.n	8004be8 <HAL_RCC_OscConfig+0x18c>
 8004bae:	4b46      	ldr	r3, [pc, #280]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d116      	bne.n	8004be8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bba:	4b43      	ldr	r3, [pc, #268]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x176>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d001      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e1ba      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd2:	4b3d      	ldr	r3, [pc, #244]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	4939      	ldr	r1, [pc, #228]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004be6:	e03a      	b.n	8004c5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d020      	beq.n	8004c32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bf0:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <HAL_RCC_OscConfig+0x270>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf6:	f7fc f81d 	bl	8000c34 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfc:	e008      	b.n	8004c10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bfe:	f7fc f819 	bl	8000c34 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e19b      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c10:	4b2d      	ldr	r3, [pc, #180]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0f0      	beq.n	8004bfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1c:	4b2a      	ldr	r3, [pc, #168]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	4927      	ldr	r1, [pc, #156]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	600b      	str	r3, [r1, #0]
 8004c30:	e015      	b.n	8004c5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c32:	4b26      	ldr	r3, [pc, #152]	; (8004ccc <HAL_RCC_OscConfig+0x270>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c38:	f7fb fffc 	bl	8000c34 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c40:	f7fb fff8 	bl	8000c34 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e17a      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c52:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d03a      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d019      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c72:	4b17      	ldr	r3, [pc, #92]	; (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004c74:	2201      	movs	r2, #1
 8004c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c78:	f7fb ffdc 	bl	8000c34 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c80:	f7fb ffd8 	bl	8000c34 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e15a      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c92:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c9e:	2001      	movs	r0, #1
 8004ca0:	f000 fb0a 	bl	80052b8 <RCC_Delay>
 8004ca4:	e01c      	b.n	8004ce0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ca6:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cac:	f7fb ffc2 	bl	8000c34 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb2:	e00f      	b.n	8004cd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb4:	f7fb ffbe 	bl	8000c34 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d908      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e140      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
 8004cc6:	bf00      	nop
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	42420000 	.word	0x42420000
 8004cd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd4:	4b9e      	ldr	r3, [pc, #632]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e9      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80a6 	beq.w	8004e3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf2:	4b97      	ldr	r3, [pc, #604]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10d      	bne.n	8004d1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cfe:	4b94      	ldr	r3, [pc, #592]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	4a93      	ldr	r2, [pc, #588]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d08:	61d3      	str	r3, [r2, #28]
 8004d0a:	4b91      	ldr	r3, [pc, #580]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d12:	60bb      	str	r3, [r7, #8]
 8004d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d16:	2301      	movs	r3, #1
 8004d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1a:	4b8e      	ldr	r3, [pc, #568]	; (8004f54 <HAL_RCC_OscConfig+0x4f8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d118      	bne.n	8004d58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d26:	4b8b      	ldr	r3, [pc, #556]	; (8004f54 <HAL_RCC_OscConfig+0x4f8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a8a      	ldr	r2, [pc, #552]	; (8004f54 <HAL_RCC_OscConfig+0x4f8>)
 8004d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d32:	f7fb ff7f 	bl	8000c34 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d3a:	f7fb ff7b 	bl	8000c34 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b64      	cmp	r3, #100	; 0x64
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e0fd      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4c:	4b81      	ldr	r3, [pc, #516]	; (8004f54 <HAL_RCC_OscConfig+0x4f8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d106      	bne.n	8004d6e <HAL_RCC_OscConfig+0x312>
 8004d60:	4b7b      	ldr	r3, [pc, #492]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	4a7a      	ldr	r2, [pc, #488]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	6213      	str	r3, [r2, #32]
 8004d6c:	e02d      	b.n	8004dca <HAL_RCC_OscConfig+0x36e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10c      	bne.n	8004d90 <HAL_RCC_OscConfig+0x334>
 8004d76:	4b76      	ldr	r3, [pc, #472]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	4a75      	ldr	r2, [pc, #468]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	6213      	str	r3, [r2, #32]
 8004d82:	4b73      	ldr	r3, [pc, #460]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	4a72      	ldr	r2, [pc, #456]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d88:	f023 0304 	bic.w	r3, r3, #4
 8004d8c:	6213      	str	r3, [r2, #32]
 8004d8e:	e01c      	b.n	8004dca <HAL_RCC_OscConfig+0x36e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	2b05      	cmp	r3, #5
 8004d96:	d10c      	bne.n	8004db2 <HAL_RCC_OscConfig+0x356>
 8004d98:	4b6d      	ldr	r3, [pc, #436]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	4a6c      	ldr	r2, [pc, #432]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d9e:	f043 0304 	orr.w	r3, r3, #4
 8004da2:	6213      	str	r3, [r2, #32]
 8004da4:	4b6a      	ldr	r3, [pc, #424]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	4a69      	ldr	r2, [pc, #420]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004daa:	f043 0301 	orr.w	r3, r3, #1
 8004dae:	6213      	str	r3, [r2, #32]
 8004db0:	e00b      	b.n	8004dca <HAL_RCC_OscConfig+0x36e>
 8004db2:	4b67      	ldr	r3, [pc, #412]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	4a66      	ldr	r2, [pc, #408]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004db8:	f023 0301 	bic.w	r3, r3, #1
 8004dbc:	6213      	str	r3, [r2, #32]
 8004dbe:	4b64      	ldr	r3, [pc, #400]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	4a63      	ldr	r2, [pc, #396]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004dc4:	f023 0304 	bic.w	r3, r3, #4
 8004dc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d015      	beq.n	8004dfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd2:	f7fb ff2f 	bl	8000c34 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd8:	e00a      	b.n	8004df0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dda:	f7fb ff2b 	bl	8000c34 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e0ab      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df0:	4b57      	ldr	r3, [pc, #348]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0ee      	beq.n	8004dda <HAL_RCC_OscConfig+0x37e>
 8004dfc:	e014      	b.n	8004e28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dfe:	f7fb ff19 	bl	8000c34 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e04:	e00a      	b.n	8004e1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e06:	f7fb ff15 	bl	8000c34 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e095      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e1c:	4b4c      	ldr	r3, [pc, #304]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1ee      	bne.n	8004e06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d105      	bne.n	8004e3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e2e:	4b48      	ldr	r3, [pc, #288]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	4a47      	ldr	r2, [pc, #284]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 8081 	beq.w	8004f46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e44:	4b42      	ldr	r3, [pc, #264]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 030c 	and.w	r3, r3, #12
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d061      	beq.n	8004f14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d146      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e58:	4b3f      	ldr	r3, [pc, #252]	; (8004f58 <HAL_RCC_OscConfig+0x4fc>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5e:	f7fb fee9 	bl	8000c34 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e66:	f7fb fee5 	bl	8000c34 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e067      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e78:	4b35      	ldr	r3, [pc, #212]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1f0      	bne.n	8004e66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8c:	d108      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e8e:	4b30      	ldr	r3, [pc, #192]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	492d      	ldr	r1, [pc, #180]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ea0:	4b2b      	ldr	r3, [pc, #172]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a19      	ldr	r1, [r3, #32]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	4927      	ldr	r1, [pc, #156]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eb8:	4b27      	ldr	r3, [pc, #156]	; (8004f58 <HAL_RCC_OscConfig+0x4fc>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebe:	f7fb feb9 	bl	8000c34 <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec6:	f7fb feb5 	bl	8000c34 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e037      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f0      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x46a>
 8004ee4:	e02f      	b.n	8004f46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee6:	4b1c      	ldr	r3, [pc, #112]	; (8004f58 <HAL_RCC_OscConfig+0x4fc>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eec:	f7fb fea2 	bl	8000c34 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef4:	f7fb fe9e 	bl	8000c34 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e020      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f06:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x498>
 8004f12:	e018      	b.n	8004f46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e013      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d106      	bne.n	8004f42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d001      	beq.n	8004f46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40021000 	.word	0x40021000
 8004f54:	40007000 	.word	0x40007000
 8004f58:	42420060 	.word	0x42420060

08004f5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0d0      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f70:	4b6a      	ldr	r3, [pc, #424]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d910      	bls.n	8004fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7e:	4b67      	ldr	r3, [pc, #412]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 0207 	bic.w	r2, r3, #7
 8004f86:	4965      	ldr	r1, [pc, #404]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8e:	4b63      	ldr	r3, [pc, #396]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0b8      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d020      	beq.n	8004fee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d005      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fb8:	4b59      	ldr	r3, [pc, #356]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	4a58      	ldr	r2, [pc, #352]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004fc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fd0:	4b53      	ldr	r3, [pc, #332]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4a52      	ldr	r2, [pc, #328]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004fda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fdc:	4b50      	ldr	r3, [pc, #320]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	494d      	ldr	r1, [pc, #308]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d040      	beq.n	800507c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d107      	bne.n	8005012 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005002:	4b47      	ldr	r3, [pc, #284]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d115      	bne.n	800503a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e07f      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d107      	bne.n	800502a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800501a:	4b41      	ldr	r3, [pc, #260]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e073      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502a:	4b3d      	ldr	r3, [pc, #244]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e06b      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800503a:	4b39      	ldr	r3, [pc, #228]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f023 0203 	bic.w	r2, r3, #3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	4936      	ldr	r1, [pc, #216]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8005048:	4313      	orrs	r3, r2
 800504a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800504c:	f7fb fdf2 	bl	8000c34 <HAL_GetTick>
 8005050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005052:	e00a      	b.n	800506a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005054:	f7fb fdee 	bl	8000c34 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e053      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506a:	4b2d      	ldr	r3, [pc, #180]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f003 020c 	and.w	r2, r3, #12
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	429a      	cmp	r2, r3
 800507a:	d1eb      	bne.n	8005054 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800507c:	4b27      	ldr	r3, [pc, #156]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d210      	bcs.n	80050ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800508a:	4b24      	ldr	r3, [pc, #144]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f023 0207 	bic.w	r2, r3, #7
 8005092:	4922      	ldr	r1, [pc, #136]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	4313      	orrs	r3, r2
 8005098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800509a:	4b20      	ldr	r3, [pc, #128]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d001      	beq.n	80050ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e032      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b8:	4b19      	ldr	r3, [pc, #100]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4916      	ldr	r1, [pc, #88]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d009      	beq.n	80050ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050d6:	4b12      	ldr	r3, [pc, #72]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	490e      	ldr	r1, [pc, #56]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050ea:	f000 f821 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 80050ee:	4602      	mov	r2, r0
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	091b      	lsrs	r3, r3, #4
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	490a      	ldr	r1, [pc, #40]	; (8005124 <HAL_RCC_ClockConfig+0x1c8>)
 80050fc:	5ccb      	ldrb	r3, [r1, r3]
 80050fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005102:	4a09      	ldr	r2, [pc, #36]	; (8005128 <HAL_RCC_ClockConfig+0x1cc>)
 8005104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005106:	4b09      	ldr	r3, [pc, #36]	; (800512c <HAL_RCC_ClockConfig+0x1d0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7fb fc14 	bl	8000938 <HAL_InitTick>

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40022000 	.word	0x40022000
 8005120:	40021000 	.word	0x40021000
 8005124:	0800d6b8 	.word	0x0800d6b8
 8005128:	20000000 	.word	0x20000000
 800512c:	20000004 	.word	0x20000004

08005130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005130:	b490      	push	{r4, r7}
 8005132:	b08a      	sub	sp, #40	; 0x28
 8005134:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005136:	4b2a      	ldr	r3, [pc, #168]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005138:	1d3c      	adds	r4, r7, #4
 800513a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800513c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005140:	f240 2301 	movw	r3, #513	; 0x201
 8005144:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	2300      	movs	r3, #0
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	2300      	movs	r3, #0
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800515a:	4b22      	ldr	r3, [pc, #136]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f003 030c 	and.w	r3, r3, #12
 8005166:	2b04      	cmp	r3, #4
 8005168:	d002      	beq.n	8005170 <HAL_RCC_GetSysClockFreq+0x40>
 800516a:	2b08      	cmp	r3, #8
 800516c:	d003      	beq.n	8005176 <HAL_RCC_GetSysClockFreq+0x46>
 800516e:	e02d      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005170:	4b1d      	ldr	r3, [pc, #116]	; (80051e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005172:	623b      	str	r3, [r7, #32]
      break;
 8005174:	e02d      	b.n	80051d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	0c9b      	lsrs	r3, r3, #18
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005182:	4413      	add	r3, r2
 8005184:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005188:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d013      	beq.n	80051bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005194:	4b13      	ldr	r3, [pc, #76]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	0c5b      	lsrs	r3, r3, #17
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80051a2:	4413      	add	r3, r2
 80051a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80051a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	4a0e      	ldr	r2, [pc, #56]	; (80051e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ae:	fb02 f203 	mul.w	r2, r2, r3
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ba:	e004      	b.n	80051c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	4a0b      	ldr	r2, [pc, #44]	; (80051ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80051c0:	fb02 f303 	mul.w	r3, r2, r3
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	623b      	str	r3, [r7, #32]
      break;
 80051ca:	e002      	b.n	80051d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051cc:	4b08      	ldr	r3, [pc, #32]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051ce:	623b      	str	r3, [r7, #32]
      break;
 80051d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051d2:	6a3b      	ldr	r3, [r7, #32]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3728      	adds	r7, #40	; 0x28
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc90      	pop	{r4, r7}
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	0800d624 	.word	0x0800d624
 80051e4:	40021000 	.word	0x40021000
 80051e8:	00f42400 	.word	0x00f42400
 80051ec:	003d0900 	.word	0x003d0900
 80051f0:	007a1200 	.word	0x007a1200

080051f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051f8:	4b02      	ldr	r3, [pc, #8]	; (8005204 <HAL_RCC_GetHCLKFreq+0x10>)
 80051fa:	681b      	ldr	r3, [r3, #0]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr
 8005204:	20000000 	.word	0x20000000

08005208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800520c:	f7ff fff2 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 8005210:	4602      	mov	r2, r0
 8005212:	4b05      	ldr	r3, [pc, #20]	; (8005228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	0a1b      	lsrs	r3, r3, #8
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	4903      	ldr	r1, [pc, #12]	; (800522c <HAL_RCC_GetPCLK1Freq+0x24>)
 800521e:	5ccb      	ldrb	r3, [r1, r3]
 8005220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005224:	4618      	mov	r0, r3
 8005226:	bd80      	pop	{r7, pc}
 8005228:	40021000 	.word	0x40021000
 800522c:	0800d6c8 	.word	0x0800d6c8

08005230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005234:	f7ff ffde 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 8005238:	4602      	mov	r2, r0
 800523a:	4b05      	ldr	r3, [pc, #20]	; (8005250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	0adb      	lsrs	r3, r3, #11
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	4903      	ldr	r1, [pc, #12]	; (8005254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005246:	5ccb      	ldrb	r3, [r1, r3]
 8005248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800524c:	4618      	mov	r0, r3
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40021000 	.word	0x40021000
 8005254:	0800d6c8 	.word	0x0800d6c8

08005258 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	220f      	movs	r2, #15
 8005266:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005268:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <HAL_RCC_GetClockConfig+0x58>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f003 0203 	and.w	r2, r3, #3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005274:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <HAL_RCC_GetClockConfig+0x58>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <HAL_RCC_GetClockConfig+0x58>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800528c:	4b08      	ldr	r3, [pc, #32]	; (80052b0 <HAL_RCC_GetClockConfig+0x58>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	08db      	lsrs	r3, r3, #3
 8005292:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <HAL_RCC_GetClockConfig+0x5c>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0207 	and.w	r2, r3, #7
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr
 80052b0:	40021000 	.word	0x40021000
 80052b4:	40022000 	.word	0x40022000

080052b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052c0:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <RCC_Delay+0x34>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a0a      	ldr	r2, [pc, #40]	; (80052f0 <RCC_Delay+0x38>)
 80052c6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ca:	0a5b      	lsrs	r3, r3, #9
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	fb02 f303 	mul.w	r3, r2, r3
 80052d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052d4:	bf00      	nop
  }
  while (Delay --);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1e5a      	subs	r2, r3, #1
 80052da:	60fa      	str	r2, [r7, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1f9      	bne.n	80052d4 <RCC_Delay+0x1c>
}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	20000000 	.word	0x20000000
 80052f0:	10624dd3 	.word	0x10624dd3

080052f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	613b      	str	r3, [r7, #16]
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d07d      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005310:	2300      	movs	r3, #0
 8005312:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005314:	4b4f      	ldr	r3, [pc, #316]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10d      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005320:	4b4c      	ldr	r3, [pc, #304]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	4a4b      	ldr	r2, [pc, #300]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800532a:	61d3      	str	r3, [r2, #28]
 800532c:	4b49      	ldr	r3, [pc, #292]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005334:	60bb      	str	r3, [r7, #8]
 8005336:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005338:	2301      	movs	r3, #1
 800533a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800533c:	4b46      	ldr	r3, [pc, #280]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d118      	bne.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005348:	4b43      	ldr	r3, [pc, #268]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a42      	ldr	r2, [pc, #264]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800534e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005352:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005354:	f7fb fc6e 	bl	8000c34 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800535a:	e008      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800535c:	f7fb fc6a 	bl	8000c34 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b64      	cmp	r3, #100	; 0x64
 8005368:	d901      	bls.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e06d      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800536e:	4b3a      	ldr	r3, [pc, #232]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0f0      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800537a:	4b36      	ldr	r3, [pc, #216]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005382:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d02e      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	429a      	cmp	r2, r3
 8005396:	d027      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005398:	4b2e      	ldr	r3, [pc, #184]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053a2:	4b2e      	ldr	r3, [pc, #184]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053a4:	2201      	movs	r2, #1
 80053a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053a8:	4b2c      	ldr	r3, [pc, #176]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053ae:	4a29      	ldr	r2, [pc, #164]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d014      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053be:	f7fb fc39 	bl	8000c34 <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c4:	e00a      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c6:	f7fb fc35 	bl	8000c34 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d901      	bls.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e036      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053dc:	4b1d      	ldr	r3, [pc, #116]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0ee      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053e8:	4b1a      	ldr	r3, [pc, #104]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	4917      	ldr	r1, [pc, #92]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80053fa:	7dfb      	ldrb	r3, [r7, #23]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d105      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005400:	4b14      	ldr	r3, [pc, #80]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	4a13      	ldr	r2, [pc, #76]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800540a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d008      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005418:	4b0e      	ldr	r3, [pc, #56]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	490b      	ldr	r1, [pc, #44]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005426:	4313      	orrs	r3, r2
 8005428:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0310 	and.w	r3, r3, #16
 8005432:	2b00      	cmp	r3, #0
 8005434:	d008      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005436:	4b07      	ldr	r3, [pc, #28]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	4904      	ldr	r1, [pc, #16]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005444:	4313      	orrs	r3, r2
 8005446:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40021000 	.word	0x40021000
 8005458:	40007000 	.word	0x40007000
 800545c:	42420440 	.word	0x42420440

08005460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e076      	b.n	8005560 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	2b00      	cmp	r3, #0
 8005478:	d108      	bne.n	800548c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005482:	d009      	beq.n	8005498 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	61da      	str	r2, [r3, #28]
 800548a:	e005      	b.n	8005498 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fb f95a 	bl	800076c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551c:	ea42 0103 	orr.w	r1, r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005524:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	0c1a      	lsrs	r2, r3, #16
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f002 0204 	and.w	r2, r2, #4
 800553e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69da      	ldr	r2, [r3, #28]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800554e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	099b      	lsrs	r3, r3, #6
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10f      	bne.n	80055ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	099b      	lsrs	r3, r3, #6
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	4798      	blx	r3
    return;
 80055aa:	e0be      	b.n	800572a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	085b      	lsrs	r3, r3, #1
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <HAL_SPI_IRQHandler+0x66>
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	09db      	lsrs	r3, r3, #7
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	4798      	blx	r3
    return;
 80055cc:	e0ad      	b.n	800572a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	095b      	lsrs	r3, r3, #5
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <HAL_SPI_IRQHandler+0x80>
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	099b      	lsrs	r3, r3, #6
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 80a1 	beq.w	800572a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 809a 	beq.w	800572a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	099b      	lsrs	r3, r3, #6
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d023      	beq.n	800564a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b03      	cmp	r3, #3
 800560c:	d011      	beq.n	8005632 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005612:	f043 0204 	orr.w	r2, r3, #4
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800561a:	2300      	movs	r3, #0
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	e00b      	b.n	800564a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	693b      	ldr	r3, [r7, #16]
        return;
 8005648:	e06f      	b.n	800572a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	095b      	lsrs	r3, r3, #5
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d014      	beq.n	8005680 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565a:	f043 0201 	orr.w	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005684:	2b00      	cmp	r3, #0
 8005686:	d04f      	beq.n	8005728 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005696:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d104      	bne.n	80056b4 <HAL_SPI_IRQHandler+0x14c>
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d034      	beq.n	800571e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0203 	bic.w	r2, r2, #3
 80056c2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d011      	beq.n	80056f0 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d0:	4a17      	ldr	r2, [pc, #92]	; (8005730 <HAL_SPI_IRQHandler+0x1c8>)
 80056d2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fb fde1 	bl	80012a0 <HAL_DMA_Abort_IT>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d016      	beq.n	8005726 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056fc:	4a0c      	ldr	r2, [pc, #48]	; (8005730 <HAL_SPI_IRQHandler+0x1c8>)
 80056fe:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005704:	4618      	mov	r0, r3
 8005706:	f7fb fdcb 	bl	80012a0 <HAL_DMA_Abort_IT>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005714:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800571c:	e003      	b.n	8005726 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f808 	bl	8005734 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005724:	e000      	b.n	8005728 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005726:	bf00      	nop
    return;
 8005728:	bf00      	nop
  }
}
 800572a:	3720      	adds	r7, #32
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	08005747 	.word	0x08005747

08005734 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr

08005746 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f7ff ffe7 	bl	8005734 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005766:	bf00      	nop
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b082      	sub	sp, #8
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e041      	b.n	8005804 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d106      	bne.n	800579a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f839 	bl	800580c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2202      	movs	r2, #2
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3304      	adds	r3, #4
 80057aa:	4619      	mov	r1, r3
 80057ac:	4610      	mov	r0, r2
 80057ae:	f000 f9b5 	bl	8005b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	bc80      	pop	{r7}
 800581c:	4770      	bx	lr
	...

08005820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b01      	cmp	r3, #1
 8005832:	d001      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e03a      	b.n	80058ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a18      	ldr	r2, [pc, #96]	; (80058b8 <HAL_TIM_Base_Start_IT+0x98>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00e      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x58>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005862:	d009      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x58>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a14      	ldr	r2, [pc, #80]	; (80058bc <HAL_TIM_Base_Start_IT+0x9c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x58>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a13      	ldr	r2, [pc, #76]	; (80058c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d111      	bne.n	800589c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b06      	cmp	r3, #6
 8005888:	d010      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0201 	orr.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589a:	e007      	b.n	80058ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0201 	orr.w	r2, r2, #1
 80058aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bc80      	pop	{r7}
 80058b6:	4770      	bx	lr
 80058b8:	40012c00 	.word	0x40012c00
 80058bc:	40000400 	.word	0x40000400
 80058c0:	40000800 	.word	0x40000800

080058c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d122      	bne.n	8005920 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d11b      	bne.n	8005920 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0202 	mvn.w	r2, #2
 80058f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f8ed 	bl	8005ae6 <HAL_TIM_IC_CaptureCallback>
 800590c:	e005      	b.n	800591a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f8e0 	bl	8005ad4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f8ef 	bl	8005af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b04      	cmp	r3, #4
 800592c:	d122      	bne.n	8005974 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b04      	cmp	r3, #4
 800593a:	d11b      	bne.n	8005974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f06f 0204 	mvn.w	r2, #4
 8005944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2202      	movs	r2, #2
 800594a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f8c3 	bl	8005ae6 <HAL_TIM_IC_CaptureCallback>
 8005960:	e005      	b.n	800596e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f8b6 	bl	8005ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f8c5 	bl	8005af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b08      	cmp	r3, #8
 8005980:	d122      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f003 0308 	and.w	r3, r3, #8
 800598c:	2b08      	cmp	r3, #8
 800598e:	d11b      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f06f 0208 	mvn.w	r2, #8
 8005998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2204      	movs	r2, #4
 800599e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f899 	bl	8005ae6 <HAL_TIM_IC_CaptureCallback>
 80059b4:	e005      	b.n	80059c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f88c 	bl	8005ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f89b 	bl	8005af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f003 0310 	and.w	r3, r3, #16
 80059d2:	2b10      	cmp	r3, #16
 80059d4:	d122      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b10      	cmp	r3, #16
 80059e2:	d11b      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0210 	mvn.w	r2, #16
 80059ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2208      	movs	r2, #8
 80059f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f86f 	bl	8005ae6 <HAL_TIM_IC_CaptureCallback>
 8005a08:	e005      	b.n	8005a16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f862 	bl	8005ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f871 	bl	8005af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d10e      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d107      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0201 	mvn.w	r2, #1
 8005a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7fa fda8 	bl	8000598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a52:	2b80      	cmp	r3, #128	; 0x80
 8005a54:	d10e      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a60:	2b80      	cmp	r3, #128	; 0x80
 8005a62:	d107      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f8bf 	bl	8005bf2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7e:	2b40      	cmp	r3, #64	; 0x40
 8005a80:	d10e      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8c:	2b40      	cmp	r3, #64	; 0x40
 8005a8e:	d107      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f835 	bl	8005b0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d10e      	bne.n	8005acc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d107      	bne.n	8005acc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f06f 0220 	mvn.w	r2, #32
 8005ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f88a 	bl	8005be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005acc:	bf00      	nop
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bc80      	pop	{r7}
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bc80      	pop	{r7}
 8005af6:	4770      	bx	lr

08005af8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr

08005b0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr

08005b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a29      	ldr	r2, [pc, #164]	; (8005bd4 <TIM_Base_SetConfig+0xb8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00b      	beq.n	8005b4c <TIM_Base_SetConfig+0x30>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3a:	d007      	beq.n	8005b4c <TIM_Base_SetConfig+0x30>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a26      	ldr	r2, [pc, #152]	; (8005bd8 <TIM_Base_SetConfig+0xbc>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d003      	beq.n	8005b4c <TIM_Base_SetConfig+0x30>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a25      	ldr	r2, [pc, #148]	; (8005bdc <TIM_Base_SetConfig+0xc0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d108      	bne.n	8005b5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a1c      	ldr	r2, [pc, #112]	; (8005bd4 <TIM_Base_SetConfig+0xb8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00b      	beq.n	8005b7e <TIM_Base_SetConfig+0x62>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6c:	d007      	beq.n	8005b7e <TIM_Base_SetConfig+0x62>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a19      	ldr	r2, [pc, #100]	; (8005bd8 <TIM_Base_SetConfig+0xbc>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d003      	beq.n	8005b7e <TIM_Base_SetConfig+0x62>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a18      	ldr	r2, [pc, #96]	; (8005bdc <TIM_Base_SetConfig+0xc0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d108      	bne.n	8005b90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a07      	ldr	r2, [pc, #28]	; (8005bd4 <TIM_Base_SetConfig+0xb8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d103      	bne.n	8005bc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	691a      	ldr	r2, [r3, #16]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	615a      	str	r2, [r3, #20]
}
 8005bca:	bf00      	nop
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bc80      	pop	{r7}
 8005bd2:	4770      	bx	lr
 8005bd4:	40012c00 	.word	0x40012c00
 8005bd8:	40000400 	.word	0x40000400
 8005bdc:	40000800 	.word	0x40000800

08005be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bc80      	pop	{r7}
 8005bf0:	4770      	bx	lr

08005bf2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr

08005c04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e03f      	b.n	8005c96 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fa fdf0 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2224      	movs	r2, #36	; 0x24
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fb49 	bl	80062e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695a      	ldr	r2, [r3, #20]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08a      	sub	sp, #40	; 0x28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10d      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x52>
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fa4f 	bl	800618e <UART_Receive_IT>
      return;
 8005cf0:	e17b      	b.n	8005fea <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 80b1 	beq.w	8005e5c <HAL_UART_IRQHandler+0x1bc>
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d105      	bne.n	8005d10 <HAL_UART_IRQHandler+0x70>
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 80a6 	beq.w	8005e5c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <HAL_UART_IRQHandler+0x90>
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	f043 0201 	orr.w	r2, r3, #1
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	f003 0304 	and.w	r3, r3, #4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <HAL_UART_IRQHandler+0xb0>
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	f043 0202 	orr.w	r2, r3, #2
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <HAL_UART_IRQHandler+0xd0>
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	f043 0204 	orr.w	r2, r3, #4
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	f003 0308 	and.w	r3, r3, #8
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00f      	beq.n	8005d9a <HAL_UART_IRQHandler+0xfa>
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	f003 0320 	and.w	r3, r3, #32
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d104      	bne.n	8005d8e <HAL_UART_IRQHandler+0xee>
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d005      	beq.n	8005d9a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	f043 0208 	orr.w	r2, r3, #8
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 811e 	beq.w	8005fe0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d007      	beq.n	8005dbe <HAL_UART_IRQHandler+0x11e>
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f9e8 	bl	800618e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	bf14      	ite	ne
 8005dcc:	2301      	movne	r3, #1
 8005dce:	2300      	moveq	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	f003 0308 	and.w	r3, r3, #8
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d102      	bne.n	8005de6 <HAL_UART_IRQHandler+0x146>
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d031      	beq.n	8005e4a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f92a 	bl	8006040 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d023      	beq.n	8005e42 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695a      	ldr	r2, [r3, #20]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e08:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d013      	beq.n	8005e3a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	4a76      	ldr	r2, [pc, #472]	; (8005ff0 <HAL_UART_IRQHandler+0x350>)
 8005e18:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fb fa3e 	bl	80012a0 <HAL_DMA_Abort_IT>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d016      	beq.n	8005e58 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e34:	4610      	mov	r0, r2
 8005e36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e38:	e00e      	b.n	8005e58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f8ec 	bl	8006018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e40:	e00a      	b.n	8005e58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f8e8 	bl	8006018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e48:	e006      	b.n	8005e58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f8e4 	bl	8006018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e56:	e0c3      	b.n	8005fe0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e58:	bf00      	nop
    return;
 8005e5a:	e0c1      	b.n	8005fe0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	f040 80a1 	bne.w	8005fa8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	f003 0310 	and.w	r3, r3, #16
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 809b 	beq.w	8005fa8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 8095 	beq.w	8005fa8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d04e      	beq.n	8005f40 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005eac:	8a3b      	ldrh	r3, [r7, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 8098 	beq.w	8005fe4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005eb8:	8a3a      	ldrh	r2, [r7, #16]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	f080 8092 	bcs.w	8005fe4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	8a3a      	ldrh	r2, [r7, #16]
 8005ec4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	2b20      	cmp	r3, #32
 8005ece:	d02b      	beq.n	8005f28 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ede:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695a      	ldr	r2, [r3, #20]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0201 	bic.w	r2, r2, #1
 8005eee:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	695a      	ldr	r2, [r3, #20]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005efe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0210 	bic.w	r2, r2, #16
 8005f1c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fb f981 	bl	800122a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f876 	bl	800602a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005f3e:	e051      	b.n	8005fe4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d047      	beq.n	8005fe8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005f58:	8a7b      	ldrh	r3, [r7, #18]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d044      	beq.n	8005fe8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f6c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	695a      	ldr	r2, [r3, #20]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 0201 	bic.w	r2, r2, #1
 8005f7c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0210 	bic.w	r2, r2, #16
 8005f9a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f9c:	8a7b      	ldrh	r3, [r7, #18]
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f842 	bl	800602a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005fa6:	e01f      	b.n	8005fe8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d008      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x324>
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f87f 	bl	80060c0 <UART_Transmit_IT>
    return;
 8005fc2:	e012      	b.n	8005fea <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00d      	beq.n	8005fea <HAL_UART_IRQHandler+0x34a>
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d008      	beq.n	8005fea <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f8c0 	bl	800615e <UART_EndTransmit_IT>
    return;
 8005fde:	e004      	b.n	8005fea <HAL_UART_IRQHandler+0x34a>
    return;
 8005fe0:	bf00      	nop
 8005fe2:	e002      	b.n	8005fea <HAL_UART_IRQHandler+0x34a>
      return;
 8005fe4:	bf00      	nop
 8005fe6:	e000      	b.n	8005fea <HAL_UART_IRQHandler+0x34a>
      return;
 8005fe8:	bf00      	nop
  }
}
 8005fea:	3728      	adds	r7, #40	; 0x28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	08006099 	.word	0x08006099

08005ff4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	bc80      	pop	{r7}
 8006004:	4770      	bx	lr

08006006 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	bc80      	pop	{r7}
 8006016:	4770      	bx	lr

08006018 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr

0800602a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	460b      	mov	r3, r1
 8006034:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	bc80      	pop	{r7}
 800603e:	4770      	bx	lr

08006040 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006056:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695a      	ldr	r2, [r3, #20]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0201 	bic.w	r2, r2, #1
 8006066:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606c:	2b01      	cmp	r3, #1
 800606e:	d107      	bne.n	8006080 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0210 	bic.w	r2, r2, #16
 800607e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2220      	movs	r2, #32
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	bc80      	pop	{r7}
 8006096:	4770      	bx	lr

08006098 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f7ff ffb0 	bl	8006018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060b8:	bf00      	nop
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b21      	cmp	r3, #33	; 0x21
 80060d2:	d13e      	bne.n	8006152 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060dc:	d114      	bne.n	8006108 <UART_Transmit_IT+0x48>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d110      	bne.n	8006108 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	461a      	mov	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	1c9a      	adds	r2, r3, #2
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	621a      	str	r2, [r3, #32]
 8006106:	e008      	b.n	800611a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	1c59      	adds	r1, r3, #1
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6211      	str	r1, [r2, #32]
 8006112:	781a      	ldrb	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800611e:	b29b      	uxth	r3, r3
 8006120:	3b01      	subs	r3, #1
 8006122:	b29b      	uxth	r3, r3
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	4619      	mov	r1, r3
 8006128:	84d1      	strh	r1, [r2, #38]	; 0x26
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10f      	bne.n	800614e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800613c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68da      	ldr	r2, [r3, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800614c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	e000      	b.n	8006154 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006152:	2302      	movs	r3, #2
  }
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	bc80      	pop	{r7}
 800615c:	4770      	bx	lr

0800615e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b082      	sub	sp, #8
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006174:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff ff38 	bl	8005ff4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b086      	sub	sp, #24
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b22      	cmp	r3, #34	; 0x22
 80061a0:	f040 8099 	bne.w	80062d6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ac:	d117      	bne.n	80061de <UART_Receive_IT+0x50>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d113      	bne.n	80061de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	1c9a      	adds	r2, r3, #2
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	629a      	str	r2, [r3, #40]	; 0x28
 80061dc:	e026      	b.n	800622c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80061e4:	2300      	movs	r3, #0
 80061e6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f0:	d007      	beq.n	8006202 <UART_Receive_IT+0x74>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10a      	bne.n	8006210 <UART_Receive_IT+0x82>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d106      	bne.n	8006210 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	b2da      	uxtb	r2, r3
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	701a      	strb	r2, [r3, #0]
 800620e:	e008      	b.n	8006222 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800621c:	b2da      	uxtb	r2, r3
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006230:	b29b      	uxth	r3, r3
 8006232:	3b01      	subs	r3, #1
 8006234:	b29b      	uxth	r3, r3
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	4619      	mov	r1, r3
 800623a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800623c:	2b00      	cmp	r3, #0
 800623e:	d148      	bne.n	80062d2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0220 	bic.w	r2, r2, #32
 800624e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800625e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	695a      	ldr	r2, [r3, #20]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0201 	bic.w	r2, r2, #1
 800626e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2220      	movs	r2, #32
 8006274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	2b01      	cmp	r3, #1
 800627e:	d123      	bne.n	80062c8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0210 	bic.w	r2, r2, #16
 8006294:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b10      	cmp	r3, #16
 80062a2:	d10a      	bne.n	80062ba <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062a4:	2300      	movs	r3, #0
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062be:	4619      	mov	r1, r3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff feb2 	bl	800602a <HAL_UARTEx_RxEventCallback>
 80062c6:	e002      	b.n	80062ce <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff fe9c 	bl	8006006 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e002      	b.n	80062d8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	e000      	b.n	80062d8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80062d6:	2302      	movs	r3, #2
  }
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	4313      	orrs	r3, r2
 800630e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800631a:	f023 030c 	bic.w	r3, r3, #12
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6812      	ldr	r2, [r2, #0]
 8006322:	68b9      	ldr	r1, [r7, #8]
 8006324:	430b      	orrs	r3, r1
 8006326:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699a      	ldr	r2, [r3, #24]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a2c      	ldr	r2, [pc, #176]	; (80063f4 <UART_SetConfig+0x114>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d103      	bne.n	8006350 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006348:	f7fe ff72 	bl	8005230 <HAL_RCC_GetPCLK2Freq>
 800634c:	60f8      	str	r0, [r7, #12]
 800634e:	e002      	b.n	8006356 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006350:	f7fe ff5a 	bl	8005208 <HAL_RCC_GetPCLK1Freq>
 8006354:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	009a      	lsls	r2, r3, #2
 8006360:	441a      	add	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	fbb2 f3f3 	udiv	r3, r2, r3
 800636c:	4a22      	ldr	r2, [pc, #136]	; (80063f8 <UART_SetConfig+0x118>)
 800636e:	fba2 2303 	umull	r2, r3, r2, r3
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	0119      	lsls	r1, r3, #4
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	009a      	lsls	r2, r3, #2
 8006380:	441a      	add	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	fbb2 f2f3 	udiv	r2, r2, r3
 800638c:	4b1a      	ldr	r3, [pc, #104]	; (80063f8 <UART_SetConfig+0x118>)
 800638e:	fba3 0302 	umull	r0, r3, r3, r2
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	2064      	movs	r0, #100	; 0x64
 8006396:	fb00 f303 	mul.w	r3, r0, r3
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	3332      	adds	r3, #50	; 0x32
 80063a0:	4a15      	ldr	r2, [pc, #84]	; (80063f8 <UART_SetConfig+0x118>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	095b      	lsrs	r3, r3, #5
 80063a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063ac:	4419      	add	r1, r3
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4613      	mov	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	009a      	lsls	r2, r3, #2
 80063b8:	441a      	add	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80063c4:	4b0c      	ldr	r3, [pc, #48]	; (80063f8 <UART_SetConfig+0x118>)
 80063c6:	fba3 0302 	umull	r0, r3, r3, r2
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	2064      	movs	r0, #100	; 0x64
 80063ce:	fb00 f303 	mul.w	r3, r0, r3
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	3332      	adds	r3, #50	; 0x32
 80063d8:	4a07      	ldr	r2, [pc, #28]	; (80063f8 <UART_SetConfig+0x118>)
 80063da:	fba2 2303 	umull	r2, r3, r2, r3
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	f003 020f 	and.w	r2, r3, #15
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	440a      	add	r2, r1
 80063ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80063ec:	bf00      	nop
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	40013800 	.word	0x40013800
 80063f8:	51eb851f 	.word	0x51eb851f

080063fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063fc:	b084      	sub	sp, #16
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	f107 0014 	add.w	r0, r7, #20
 800640a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	bc80      	pop	{r7}
 8006418:	b004      	add	sp, #16
 800641a:	4770      	bx	lr

0800641c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800642c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006430:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	b29a      	uxth	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr

08006448 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006450:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006454:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800645c:	b29a      	uxth	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	b29b      	uxth	r3, r3
 8006462:	43db      	mvns	r3, r3
 8006464:	b29b      	uxth	r3, r3
 8006466:	4013      	ands	r3, r2
 8006468:	b29a      	uxth	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	bc80      	pop	{r7}
 800647a:	4770      	bx	lr

0800647c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	bc80      	pop	{r7}
 8006492:	4770      	bx	lr

08006494 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006494:	b084      	sub	sp, #16
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	f107 0014 	add.w	r0, r7, #20
 80064a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bc80      	pop	{r7}
 80064d0:	b004      	add	sp, #16
 80064d2:	4770      	bx	lr

080064d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b09b      	sub	sp, #108	; 0x6c
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80064f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	78db      	ldrb	r3, [r3, #3]
 8006502:	2b03      	cmp	r3, #3
 8006504:	d81f      	bhi.n	8006546 <USB_ActivateEndpoint+0x72>
 8006506:	a201      	add	r2, pc, #4	; (adr r2, 800650c <USB_ActivateEndpoint+0x38>)
 8006508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650c:	0800651d 	.word	0x0800651d
 8006510:	08006539 	.word	0x08006539
 8006514:	0800654f 	.word	0x0800654f
 8006518:	0800652b 	.word	0x0800652b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800651c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006520:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006524:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006528:	e012      	b.n	8006550 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800652a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800652e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006532:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006536:	e00b      	b.n	8006550 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006538:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800653c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006540:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006544:	e004      	b.n	8006550 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800654c:	e000      	b.n	8006550 <USB_ActivateEndpoint+0x7c>
      break;
 800654e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	441a      	add	r2, r3
 800655a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800655e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800656a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656e:	b29b      	uxth	r3, r3
 8006570:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006588:	b29a      	uxth	r2, r3
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	b29b      	uxth	r3, r3
 8006590:	4313      	orrs	r3, r2
 8006592:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	441a      	add	r2, r3
 80065a0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80065a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	7b1b      	ldrb	r3, [r3, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f040 8149 	bne.w	8006854 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	785b      	ldrb	r3, [r3, #1]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 8084 	beq.w	80066d4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	4413      	add	r3, r2
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	011a      	lsls	r2, r3, #4
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	88db      	ldrh	r3, [r3, #6]
 80065f4:	085b      	lsrs	r3, r3, #1
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	81fb      	strh	r3, [r7, #14]
 800660e:	89fb      	ldrh	r3, [r7, #14]
 8006610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	d01b      	beq.n	8006650 <USB_ActivateEndpoint+0x17c>
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	b29b      	uxth	r3, r3
 8006626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800662a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662e:	81bb      	strh	r3, [r7, #12]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	441a      	add	r2, r3
 800663a:	89bb      	ldrh	r3, [r7, #12]
 800663c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006648:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800664c:	b29b      	uxth	r3, r3
 800664e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	78db      	ldrb	r3, [r3, #3]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d020      	beq.n	800669a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800666a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800666e:	813b      	strh	r3, [r7, #8]
 8006670:	893b      	ldrh	r3, [r7, #8]
 8006672:	f083 0320 	eor.w	r3, r3, #32
 8006676:	813b      	strh	r3, [r7, #8]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	441a      	add	r2, r3
 8006682:	893b      	ldrh	r3, [r7, #8]
 8006684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006694:	b29b      	uxth	r3, r3
 8006696:	8013      	strh	r3, [r2, #0]
 8006698:	e27f      	b.n	8006b9a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b0:	817b      	strh	r3, [r7, #10]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	441a      	add	r2, r3
 80066bc:	897b      	ldrh	r3, [r7, #10]
 80066be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	8013      	strh	r3, [r2, #0]
 80066d2:	e262      	b.n	8006b9a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066de:	b29b      	uxth	r3, r3
 80066e0:	461a      	mov	r2, r3
 80066e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e4:	4413      	add	r3, r2
 80066e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	011a      	lsls	r2, r3, #4
 80066ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80066f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	88db      	ldrh	r3, [r3, #6]
 80066fc:	085b      	lsrs	r3, r3, #1
 80066fe:	b29b      	uxth	r3, r3
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006706:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006712:	b29b      	uxth	r3, r3
 8006714:	461a      	mov	r2, r3
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	4413      	add	r3, r2
 800671a:	627b      	str	r3, [r7, #36]	; 0x24
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	011a      	lsls	r2, r3, #4
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	4413      	add	r3, r2
 8006726:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800672a:	623b      	str	r3, [r7, #32]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d112      	bne.n	800675a <USB_ActivateEndpoint+0x286>
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	881b      	ldrh	r3, [r3, #0]
 8006738:	b29b      	uxth	r3, r3
 800673a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800673e:	b29a      	uxth	r2, r3
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	801a      	strh	r2, [r3, #0]
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800674e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006752:	b29a      	uxth	r2, r3
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	e02f      	b.n	80067ba <USB_ActivateEndpoint+0x2e6>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	2b3e      	cmp	r3, #62	; 0x3e
 8006760:	d813      	bhi.n	800678a <USB_ActivateEndpoint+0x2b6>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	085b      	lsrs	r3, r3, #1
 8006768:	663b      	str	r3, [r7, #96]	; 0x60
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <USB_ActivateEndpoint+0x2a8>
 8006776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006778:	3301      	adds	r3, #1
 800677a:	663b      	str	r3, [r7, #96]	; 0x60
 800677c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800677e:	b29b      	uxth	r3, r3
 8006780:	029b      	lsls	r3, r3, #10
 8006782:	b29a      	uxth	r2, r3
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	801a      	strh	r2, [r3, #0]
 8006788:	e017      	b.n	80067ba <USB_ActivateEndpoint+0x2e6>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	095b      	lsrs	r3, r3, #5
 8006790:	663b      	str	r3, [r7, #96]	; 0x60
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 031f 	and.w	r3, r3, #31
 800679a:	2b00      	cmp	r3, #0
 800679c:	d102      	bne.n	80067a4 <USB_ActivateEndpoint+0x2d0>
 800679e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067a0:	3b01      	subs	r3, #1
 80067a2:	663b      	str	r3, [r7, #96]	; 0x60
 80067a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	029b      	lsls	r3, r3, #10
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	83fb      	strh	r3, [r7, #30]
 80067c8:	8bfb      	ldrh	r3, [r7, #30]
 80067ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d01b      	beq.n	800680a <USB_ActivateEndpoint+0x336>
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e8:	83bb      	strh	r3, [r7, #28]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	441a      	add	r2, r3
 80067f4:	8bbb      	ldrh	r3, [r7, #28]
 80067f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006806:	b29b      	uxth	r3, r3
 8006808:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	b29b      	uxth	r3, r3
 8006818:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800681c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006820:	837b      	strh	r3, [r7, #26]
 8006822:	8b7b      	ldrh	r3, [r7, #26]
 8006824:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006828:	837b      	strh	r3, [r7, #26]
 800682a:	8b7b      	ldrh	r3, [r7, #26]
 800682c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006830:	837b      	strh	r3, [r7, #26]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	441a      	add	r2, r3
 800683c:	8b7b      	ldrh	r3, [r7, #26]
 800683e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800684a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684e:	b29b      	uxth	r3, r3
 8006850:	8013      	strh	r3, [r2, #0]
 8006852:	e1a2      	b.n	8006b9a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	b29b      	uxth	r3, r3
 8006862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	441a      	add	r2, r3
 8006878:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800687c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006884:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688c:	b29b      	uxth	r3, r3
 800688e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	65bb      	str	r3, [r7, #88]	; 0x58
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800689a:	b29b      	uxth	r3, r3
 800689c:	461a      	mov	r2, r3
 800689e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068a0:	4413      	add	r3, r2
 80068a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	011a      	lsls	r2, r3, #4
 80068aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068b2:	657b      	str	r3, [r7, #84]	; 0x54
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	891b      	ldrh	r3, [r3, #8]
 80068b8:	085b      	lsrs	r3, r3, #1
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	b29a      	uxth	r2, r3
 80068c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068c2:	801a      	strh	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	653b      	str	r3, [r7, #80]	; 0x50
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	461a      	mov	r2, r3
 80068d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d4:	4413      	add	r3, r2
 80068d6:	653b      	str	r3, [r7, #80]	; 0x50
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	011a      	lsls	r2, r3, #4
 80068de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80068e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	895b      	ldrh	r3, [r3, #10]
 80068ec:	085b      	lsrs	r3, r3, #1
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	785b      	ldrb	r3, [r3, #1]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f040 8091 	bne.w	8006a24 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006910:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d01b      	beq.n	8006952 <USB_ActivateEndpoint+0x47e>
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	b29b      	uxth	r3, r3
 8006928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006930:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	441a      	add	r2, r3
 800693c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800693e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006946:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800694a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694e:	b29b      	uxth	r3, r3
 8006950:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006960:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006966:	2b00      	cmp	r3, #0
 8006968:	d01b      	beq.n	80069a2 <USB_ActivateEndpoint+0x4ce>
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	b29b      	uxth	r3, r3
 8006978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800697c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006980:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	441a      	add	r2, r3
 800698c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800698e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800699a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800699e:	b29b      	uxth	r3, r3
 80069a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80069ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069c0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80069c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	441a      	add	r2, r3
 80069d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a00:	867b      	strh	r3, [r7, #50]	; 0x32
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	441a      	add	r2, r3
 8006a0c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	8013      	strh	r3, [r2, #0]
 8006a22:	e0ba      	b.n	8006b9a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006a34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01d      	beq.n	8006a7c <USB_ActivateEndpoint+0x5a8>
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a56:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	441a      	add	r2, r3
 8006a64:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006a8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d01d      	beq.n	8006ad4 <USB_ActivateEndpoint+0x600>
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	441a      	add	r2, r3
 8006abc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006acc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	78db      	ldrb	r3, [r3, #3]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d024      	beq.n	8006b26 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006af6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006afa:	f083 0320 	eor.w	r3, r3, #32
 8006afe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	441a      	add	r2, r3
 8006b0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	8013      	strh	r3, [r2, #0]
 8006b24:	e01d      	b.n	8006b62 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	441a      	add	r2, r3
 8006b4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b78:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	441a      	add	r2, r3
 8006b84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006b9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	376c      	adds	r7, #108	; 0x6c
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bc80      	pop	{r7}
 8006ba6:	4770      	bx	lr

08006ba8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b08d      	sub	sp, #52	; 0x34
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	7b1b      	ldrb	r3, [r3, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f040 808e 	bne.w	8006cd8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	785b      	ldrb	r3, [r3, #1]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d044      	beq.n	8006c4e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	81bb      	strh	r3, [r7, #12]
 8006bd2:	89bb      	ldrh	r3, [r7, #12]
 8006bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d01b      	beq.n	8006c14 <USB_DeactivateEndpoint+0x6c>
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf2:	817b      	strh	r3, [r7, #10]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	441a      	add	r2, r3
 8006bfe:	897b      	ldrh	r3, [r7, #10]
 8006c00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c2a:	813b      	strh	r3, [r7, #8]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	441a      	add	r2, r3
 8006c36:	893b      	ldrh	r3, [r7, #8]
 8006c38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	8013      	strh	r3, [r2, #0]
 8006c4c:	e192      	b.n	8006f74 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	827b      	strh	r3, [r7, #18]
 8006c5c:	8a7b      	ldrh	r3, [r7, #18]
 8006c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d01b      	beq.n	8006c9e <USB_DeactivateEndpoint+0xf6>
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7c:	823b      	strh	r3, [r7, #16]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	441a      	add	r2, r3
 8006c88:	8a3b      	ldrh	r3, [r7, #16]
 8006c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb4:	81fb      	strh	r3, [r7, #14]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	441a      	add	r2, r3
 8006cc0:	89fb      	ldrh	r3, [r7, #14]
 8006cc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	8013      	strh	r3, [r2, #0]
 8006cd6:	e14d      	b.n	8006f74 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	785b      	ldrb	r3, [r3, #1]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f040 80a5 	bne.w	8006e2c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	843b      	strh	r3, [r7, #32]
 8006cf0:	8c3b      	ldrh	r3, [r7, #32]
 8006cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d01b      	beq.n	8006d32 <USB_DeactivateEndpoint+0x18a>
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d10:	83fb      	strh	r3, [r7, #30]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	441a      	add	r2, r3
 8006d1c:	8bfb      	ldrh	r3, [r7, #30]
 8006d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	83bb      	strh	r3, [r7, #28]
 8006d40:	8bbb      	ldrh	r3, [r7, #28]
 8006d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d01b      	beq.n	8006d82 <USB_DeactivateEndpoint+0x1da>
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d60:	837b      	strh	r3, [r7, #26]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	441a      	add	r2, r3
 8006d6c:	8b7b      	ldrh	r3, [r7, #26]
 8006d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d98:	833b      	strh	r3, [r7, #24]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	441a      	add	r2, r3
 8006da4:	8b3b      	ldrh	r3, [r7, #24]
 8006da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd0:	82fb      	strh	r3, [r7, #22]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	441a      	add	r2, r3
 8006ddc:	8afb      	ldrh	r3, [r7, #22]
 8006dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e08:	82bb      	strh	r3, [r7, #20]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	441a      	add	r2, r3
 8006e14:	8abb      	ldrh	r3, [r7, #20]
 8006e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	8013      	strh	r3, [r2, #0]
 8006e2a:	e0a3      	b.n	8006f74 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006e3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d01b      	beq.n	8006e7c <USB_DeactivateEndpoint+0x2d4>
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	441a      	add	r2, r3
 8006e66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006e8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01b      	beq.n	8006ecc <USB_DeactivateEndpoint+0x324>
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eaa:	853b      	strh	r3, [r7, #40]	; 0x28
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	441a      	add	r2, r3
 8006eb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ec4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	441a      	add	r2, r3
 8006eee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f1a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	441a      	add	r2, r3
 8006f26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f52:	847b      	strh	r3, [r7, #34]	; 0x22
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	441a      	add	r2, r3
 8006f5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3734      	adds	r7, #52	; 0x34
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bc80      	pop	{r7}
 8006f7e:	4770      	bx	lr

08006f80 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b0cc      	sub	sp, #304	; 0x130
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	1d3b      	adds	r3, r7, #4
 8006f88:	6018      	str	r0, [r3, #0]
 8006f8a:	463b      	mov	r3, r7
 8006f8c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f8e:	463b      	mov	r3, r7
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	785b      	ldrb	r3, [r3, #1]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	f040 872e 	bne.w	8007df6 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006f9a:	463b      	mov	r3, r7
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	699a      	ldr	r2, [r3, #24]
 8006fa0:	463b      	mov	r3, r7
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d905      	bls.n	8006fb6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006faa:	463b      	mov	r3, r7
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006fb4:	e004      	b.n	8006fc0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006fc0:	463b      	mov	r3, r7
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	7b1b      	ldrb	r3, [r3, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d134      	bne.n	8007034 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006fca:	463b      	mov	r3, r7
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6959      	ldr	r1, [r3, #20]
 8006fd0:	463b      	mov	r3, r7
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	88da      	ldrh	r2, [r3, #6]
 8006fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	1d38      	adds	r0, r7, #4
 8006fde:	6800      	ldr	r0, [r0, #0]
 8006fe0:	f001 fc03 	bl	80087ea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fe4:	f107 0310 	add.w	r3, r7, #16
 8006fe8:	1d3a      	adds	r2, r7, #4
 8006fea:	6812      	ldr	r2, [r2, #0]
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	1d3b      	adds	r3, r7, #4
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	f107 0310 	add.w	r3, r7, #16
 8006ffe:	f107 0210 	add.w	r2, r7, #16
 8007002:	6812      	ldr	r2, [r2, #0]
 8007004:	440a      	add	r2, r1
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	463b      	mov	r3, r7
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	011a      	lsls	r2, r3, #4
 8007010:	f107 0310 	add.w	r3, r7, #16
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4413      	add	r3, r2
 8007018:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800701c:	f107 030c 	add.w	r3, r7, #12
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007026:	b29a      	uxth	r2, r3
 8007028:	f107 030c 	add.w	r3, r7, #12
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	801a      	strh	r2, [r3, #0]
 8007030:	f000 beac 	b.w	8007d8c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007034:	463b      	mov	r3, r7
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	78db      	ldrb	r3, [r3, #3]
 800703a:	2b02      	cmp	r3, #2
 800703c:	f040 838c 	bne.w	8007758 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007040:	463b      	mov	r3, r7
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6a1a      	ldr	r2, [r3, #32]
 8007046:	463b      	mov	r3, r7
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	429a      	cmp	r2, r3
 800704e:	f240 8330 	bls.w	80076b2 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007052:	1d3b      	adds	r3, r7, #4
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	463b      	mov	r3, r7
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29b      	uxth	r3, r3
 8007064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007070:	1d3b      	adds	r3, r7, #4
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	463b      	mov	r3, r7
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	441a      	add	r2, r3
 800707e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800708a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800708e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007092:	b29b      	uxth	r3, r3
 8007094:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007096:	463b      	mov	r3, r7
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6a1a      	ldr	r2, [r3, #32]
 800709c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a0:	1ad2      	subs	r2, r2, r3
 80070a2:	463b      	mov	r3, r7
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80070a8:	1d3b      	adds	r3, r7, #4
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	463b      	mov	r3, r7
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 819e 	beq.w	8007400 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80070c8:	1d3a      	adds	r2, r7, #4
 80070ca:	6812      	ldr	r2, [r2, #0]
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	463b      	mov	r3, r7
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	785b      	ldrb	r3, [r3, #1]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d17a      	bne.n	80071ce <USB_EPStartXfer+0x24e>
 80070d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070dc:	1d3a      	adds	r2, r7, #4
 80070de:	6812      	ldr	r2, [r2, #0]
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	1d3b      	adds	r3, r7, #4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	4619      	mov	r1, r3
 80070ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80070f6:	6812      	ldr	r2, [r2, #0]
 80070f8:	440a      	add	r2, r1
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	463b      	mov	r3, r7
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	011a      	lsls	r2, r3, #4
 8007104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4413      	add	r3, r2
 800710c:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d11a      	bne.n	8007154 <USB_EPStartXfer+0x1d4>
 800711e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	b29b      	uxth	r3, r3
 8007128:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800712c:	b29a      	uxth	r2, r3
 800712e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	801a      	strh	r2, [r3, #0]
 8007136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	b29b      	uxth	r3, r3
 8007140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007148:	b29a      	uxth	r2, r3
 800714a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	801a      	strh	r2, [r3, #0]
 8007152:	e062      	b.n	800721a <USB_EPStartXfer+0x29a>
 8007154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007158:	2b3e      	cmp	r3, #62	; 0x3e
 800715a:	d819      	bhi.n	8007190 <USB_EPStartXfer+0x210>
 800715c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007160:	085b      	lsrs	r3, r3, #1
 8007162:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b00      	cmp	r3, #0
 8007170:	d004      	beq.n	800717c <USB_EPStartXfer+0x1fc>
 8007172:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007176:	3301      	adds	r3, #1
 8007178:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800717c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007180:	b29b      	uxth	r3, r3
 8007182:	029b      	lsls	r3, r3, #10
 8007184:	b29a      	uxth	r2, r3
 8007186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	801a      	strh	r2, [r3, #0]
 800718e:	e044      	b.n	800721a <USB_EPStartXfer+0x29a>
 8007190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007194:	095b      	lsrs	r3, r3, #5
 8007196:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800719a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800719e:	f003 031f 	and.w	r3, r3, #31
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d104      	bne.n	80071b0 <USB_EPStartXfer+0x230>
 80071a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071aa:	3b01      	subs	r3, #1
 80071ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80071b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	029b      	lsls	r3, r3, #10
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	801a      	strh	r2, [r3, #0]
 80071cc:	e025      	b.n	800721a <USB_EPStartXfer+0x29a>
 80071ce:	463b      	mov	r3, r7
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	785b      	ldrb	r3, [r3, #1]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d120      	bne.n	800721a <USB_EPStartXfer+0x29a>
 80071d8:	1d3b      	adds	r3, r7, #4
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	4619      	mov	r1, r3
 80071e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80071ec:	6812      	ldr	r2, [r2, #0]
 80071ee:	440a      	add	r2, r1
 80071f0:	601a      	str	r2, [r3, #0]
 80071f2:	463b      	mov	r3, r7
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	011a      	lsls	r2, r3, #4
 80071fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4413      	add	r3, r2
 8007202:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007206:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007210:	b29a      	uxth	r2, r3
 8007212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800721a:	463b      	mov	r3, r7
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	895b      	ldrh	r3, [r3, #10]
 8007220:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007224:	463b      	mov	r3, r7
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6959      	ldr	r1, [r3, #20]
 800722a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800722e:	b29b      	uxth	r3, r3
 8007230:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007234:	1d38      	adds	r0, r7, #4
 8007236:	6800      	ldr	r0, [r0, #0]
 8007238:	f001 fad7 	bl	80087ea <USB_WritePMA>
            ep->xfer_buff += len;
 800723c:	463b      	mov	r3, r7
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	695a      	ldr	r2, [r3, #20]
 8007242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007246:	441a      	add	r2, r3
 8007248:	463b      	mov	r3, r7
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800724e:	463b      	mov	r3, r7
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6a1a      	ldr	r2, [r3, #32]
 8007254:	463b      	mov	r3, r7
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	429a      	cmp	r2, r3
 800725c:	d909      	bls.n	8007272 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800725e:	463b      	mov	r3, r7
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6a1a      	ldr	r2, [r3, #32]
 8007264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007268:	1ad2      	subs	r2, r2, r3
 800726a:	463b      	mov	r3, r7
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	621a      	str	r2, [r3, #32]
 8007270:	e008      	b.n	8007284 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8007272:	463b      	mov	r3, r7
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800727c:	463b      	mov	r3, r7
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2200      	movs	r2, #0
 8007282:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007284:	463b      	mov	r3, r7
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	785b      	ldrb	r3, [r3, #1]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d17a      	bne.n	8007384 <USB_EPStartXfer+0x404>
 800728e:	f107 0318 	add.w	r3, r7, #24
 8007292:	1d3a      	adds	r2, r7, #4
 8007294:	6812      	ldr	r2, [r2, #0]
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	1d3b      	adds	r3, r7, #4
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	4619      	mov	r1, r3
 80072a4:	f107 0318 	add.w	r3, r7, #24
 80072a8:	f107 0218 	add.w	r2, r7, #24
 80072ac:	6812      	ldr	r2, [r2, #0]
 80072ae:	440a      	add	r2, r1
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	463b      	mov	r3, r7
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	011a      	lsls	r2, r3, #4
 80072ba:	f107 0318 	add.w	r3, r7, #24
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4413      	add	r3, r2
 80072c2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80072c6:	f107 0314 	add.w	r3, r7, #20
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d11a      	bne.n	800730a <USB_EPStartXfer+0x38a>
 80072d4:	f107 0314 	add.w	r3, r7, #20
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	f107 0314 	add.w	r3, r7, #20
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	801a      	strh	r2, [r3, #0]
 80072ec:	f107 0314 	add.w	r3, r7, #20
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072fe:	b29a      	uxth	r2, r3
 8007300:	f107 0314 	add.w	r3, r7, #20
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	801a      	strh	r2, [r3, #0]
 8007308:	e067      	b.n	80073da <USB_EPStartXfer+0x45a>
 800730a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800730e:	2b3e      	cmp	r3, #62	; 0x3e
 8007310:	d819      	bhi.n	8007346 <USB_EPStartXfer+0x3c6>
 8007312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007316:	085b      	lsrs	r3, r3, #1
 8007318:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800731c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	2b00      	cmp	r3, #0
 8007326:	d004      	beq.n	8007332 <USB_EPStartXfer+0x3b2>
 8007328:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800732c:	3301      	adds	r3, #1
 800732e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007332:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007336:	b29b      	uxth	r3, r3
 8007338:	029b      	lsls	r3, r3, #10
 800733a:	b29a      	uxth	r2, r3
 800733c:	f107 0314 	add.w	r3, r7, #20
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	801a      	strh	r2, [r3, #0]
 8007344:	e049      	b.n	80073da <USB_EPStartXfer+0x45a>
 8007346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007354:	f003 031f 	and.w	r3, r3, #31
 8007358:	2b00      	cmp	r3, #0
 800735a:	d104      	bne.n	8007366 <USB_EPStartXfer+0x3e6>
 800735c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007360:	3b01      	subs	r3, #1
 8007362:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007366:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800736a:	b29b      	uxth	r3, r3
 800736c:	029b      	lsls	r3, r3, #10
 800736e:	b29b      	uxth	r3, r3
 8007370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007378:	b29a      	uxth	r2, r3
 800737a:	f107 0314 	add.w	r3, r7, #20
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	801a      	strh	r2, [r3, #0]
 8007382:	e02a      	b.n	80073da <USB_EPStartXfer+0x45a>
 8007384:	463b      	mov	r3, r7
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	785b      	ldrb	r3, [r3, #1]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d125      	bne.n	80073da <USB_EPStartXfer+0x45a>
 800738e:	f107 0320 	add.w	r3, r7, #32
 8007392:	1d3a      	adds	r2, r7, #4
 8007394:	6812      	ldr	r2, [r2, #0]
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	1d3b      	adds	r3, r7, #4
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	4619      	mov	r1, r3
 80073a4:	f107 0320 	add.w	r3, r7, #32
 80073a8:	f107 0220 	add.w	r2, r7, #32
 80073ac:	6812      	ldr	r2, [r2, #0]
 80073ae:	440a      	add	r2, r1
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	463b      	mov	r3, r7
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	011a      	lsls	r2, r3, #4
 80073ba:	f107 0320 	add.w	r3, r7, #32
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4413      	add	r3, r2
 80073c2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80073c6:	f107 031c 	add.w	r3, r7, #28
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	f107 031c 	add.w	r3, r7, #28
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80073da:	463b      	mov	r3, r7
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	891b      	ldrh	r3, [r3, #8]
 80073e0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073e4:	463b      	mov	r3, r7
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6959      	ldr	r1, [r3, #20]
 80073ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80073f4:	1d38      	adds	r0, r7, #4
 80073f6:	6800      	ldr	r0, [r0, #0]
 80073f8:	f001 f9f7 	bl	80087ea <USB_WritePMA>
 80073fc:	f000 bcc6 	b.w	8007d8c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007400:	463b      	mov	r3, r7
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	785b      	ldrb	r3, [r3, #1]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d164      	bne.n	80074d4 <USB_EPStartXfer+0x554>
 800740a:	1d3b      	adds	r3, r7, #4
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007410:	1d3b      	adds	r3, r7, #4
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007418:	b29b      	uxth	r3, r3
 800741a:	461a      	mov	r2, r3
 800741c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800741e:	4413      	add	r3, r2
 8007420:	64bb      	str	r3, [r7, #72]	; 0x48
 8007422:	463b      	mov	r3, r7
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	011a      	lsls	r2, r3, #4
 800742a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800742c:	4413      	add	r3, r2
 800742e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007432:	647b      	str	r3, [r7, #68]	; 0x44
 8007434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007438:	2b00      	cmp	r3, #0
 800743a:	d112      	bne.n	8007462 <USB_EPStartXfer+0x4e2>
 800743c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	b29b      	uxth	r3, r3
 8007442:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007446:	b29a      	uxth	r2, r3
 8007448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800744a:	801a      	strh	r2, [r3, #0]
 800744c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800744e:	881b      	ldrh	r3, [r3, #0]
 8007450:	b29b      	uxth	r3, r3
 8007452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800745a:	b29a      	uxth	r2, r3
 800745c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800745e:	801a      	strh	r2, [r3, #0]
 8007460:	e057      	b.n	8007512 <USB_EPStartXfer+0x592>
 8007462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007466:	2b3e      	cmp	r3, #62	; 0x3e
 8007468:	d817      	bhi.n	800749a <USB_EPStartXfer+0x51a>
 800746a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800746e:	085b      	lsrs	r3, r3, #1
 8007470:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	2b00      	cmp	r3, #0
 800747e:	d004      	beq.n	800748a <USB_EPStartXfer+0x50a>
 8007480:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007484:	3301      	adds	r3, #1
 8007486:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800748a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800748e:	b29b      	uxth	r3, r3
 8007490:	029b      	lsls	r3, r3, #10
 8007492:	b29a      	uxth	r2, r3
 8007494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007496:	801a      	strh	r2, [r3, #0]
 8007498:	e03b      	b.n	8007512 <USB_EPStartXfer+0x592>
 800749a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800749e:	095b      	lsrs	r3, r3, #5
 80074a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80074a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a8:	f003 031f 	and.w	r3, r3, #31
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d104      	bne.n	80074ba <USB_EPStartXfer+0x53a>
 80074b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80074b4:	3b01      	subs	r3, #1
 80074b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80074ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80074be:	b29b      	uxth	r3, r3
 80074c0:	029b      	lsls	r3, r3, #10
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074d0:	801a      	strh	r2, [r3, #0]
 80074d2:	e01e      	b.n	8007512 <USB_EPStartXfer+0x592>
 80074d4:	463b      	mov	r3, r7
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	785b      	ldrb	r3, [r3, #1]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d119      	bne.n	8007512 <USB_EPStartXfer+0x592>
 80074de:	1d3b      	adds	r3, r7, #4
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	653b      	str	r3, [r7, #80]	; 0x50
 80074e4:	1d3b      	adds	r3, r7, #4
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	461a      	mov	r2, r3
 80074f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074f2:	4413      	add	r3, r2
 80074f4:	653b      	str	r3, [r7, #80]	; 0x50
 80074f6:	463b      	mov	r3, r7
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	011a      	lsls	r2, r3, #4
 80074fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007500:	4413      	add	r3, r2
 8007502:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800750c:	b29a      	uxth	r2, r3
 800750e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007510:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007512:	463b      	mov	r3, r7
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	891b      	ldrh	r3, [r3, #8]
 8007518:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800751c:	463b      	mov	r3, r7
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6959      	ldr	r1, [r3, #20]
 8007522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007526:	b29b      	uxth	r3, r3
 8007528:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800752c:	1d38      	adds	r0, r7, #4
 800752e:	6800      	ldr	r0, [r0, #0]
 8007530:	f001 f95b 	bl	80087ea <USB_WritePMA>
            ep->xfer_buff += len;
 8007534:	463b      	mov	r3, r7
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	695a      	ldr	r2, [r3, #20]
 800753a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800753e:	441a      	add	r2, r3
 8007540:	463b      	mov	r3, r7
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007546:	463b      	mov	r3, r7
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6a1a      	ldr	r2, [r3, #32]
 800754c:	463b      	mov	r3, r7
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	429a      	cmp	r2, r3
 8007554:	d909      	bls.n	800756a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8007556:	463b      	mov	r3, r7
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6a1a      	ldr	r2, [r3, #32]
 800755c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007560:	1ad2      	subs	r2, r2, r3
 8007562:	463b      	mov	r3, r7
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	621a      	str	r2, [r3, #32]
 8007568:	e008      	b.n	800757c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800756a:	463b      	mov	r3, r7
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007574:	463b      	mov	r3, r7
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2200      	movs	r2, #0
 800757a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800757c:	1d3b      	adds	r3, r7, #4
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	643b      	str	r3, [r7, #64]	; 0x40
 8007582:	463b      	mov	r3, r7
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	785b      	ldrb	r3, [r3, #1]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d164      	bne.n	8007656 <USB_EPStartXfer+0x6d6>
 800758c:	1d3b      	adds	r3, r7, #4
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	63bb      	str	r3, [r7, #56]	; 0x38
 8007592:	1d3b      	adds	r3, r7, #4
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800759a:	b29b      	uxth	r3, r3
 800759c:	461a      	mov	r2, r3
 800759e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a0:	4413      	add	r3, r2
 80075a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80075a4:	463b      	mov	r3, r7
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	011a      	lsls	r2, r3, #4
 80075ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ae:	4413      	add	r3, r2
 80075b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075b4:	637b      	str	r3, [r7, #52]	; 0x34
 80075b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d112      	bne.n	80075e4 <USB_EPStartXfer+0x664>
 80075be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075cc:	801a      	strh	r2, [r3, #0]
 80075ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075dc:	b29a      	uxth	r2, r3
 80075de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e0:	801a      	strh	r2, [r3, #0]
 80075e2:	e054      	b.n	800768e <USB_EPStartXfer+0x70e>
 80075e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e8:	2b3e      	cmp	r3, #62	; 0x3e
 80075ea:	d817      	bhi.n	800761c <USB_EPStartXfer+0x69c>
 80075ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f0:	085b      	lsrs	r3, r3, #1
 80075f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80075f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d004      	beq.n	800760c <USB_EPStartXfer+0x68c>
 8007602:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007606:	3301      	adds	r3, #1
 8007608:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800760c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007610:	b29b      	uxth	r3, r3
 8007612:	029b      	lsls	r3, r3, #10
 8007614:	b29a      	uxth	r2, r3
 8007616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007618:	801a      	strh	r2, [r3, #0]
 800761a:	e038      	b.n	800768e <USB_EPStartXfer+0x70e>
 800761c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007620:	095b      	lsrs	r3, r3, #5
 8007622:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800762a:	f003 031f 	and.w	r3, r3, #31
 800762e:	2b00      	cmp	r3, #0
 8007630:	d104      	bne.n	800763c <USB_EPStartXfer+0x6bc>
 8007632:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007636:	3b01      	subs	r3, #1
 8007638:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800763c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007640:	b29b      	uxth	r3, r3
 8007642:	029b      	lsls	r3, r3, #10
 8007644:	b29b      	uxth	r3, r3
 8007646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800764a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800764e:	b29a      	uxth	r2, r3
 8007650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007652:	801a      	strh	r2, [r3, #0]
 8007654:	e01b      	b.n	800768e <USB_EPStartXfer+0x70e>
 8007656:	463b      	mov	r3, r7
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	785b      	ldrb	r3, [r3, #1]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d116      	bne.n	800768e <USB_EPStartXfer+0x70e>
 8007660:	1d3b      	adds	r3, r7, #4
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007668:	b29b      	uxth	r3, r3
 800766a:	461a      	mov	r2, r3
 800766c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800766e:	4413      	add	r3, r2
 8007670:	643b      	str	r3, [r7, #64]	; 0x40
 8007672:	463b      	mov	r3, r7
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	011a      	lsls	r2, r3, #4
 800767a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800767c:	4413      	add	r3, r2
 800767e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007688:	b29a      	uxth	r2, r3
 800768a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800768c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800768e:	463b      	mov	r3, r7
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	895b      	ldrh	r3, [r3, #10]
 8007694:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007698:	463b      	mov	r3, r7
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6959      	ldr	r1, [r3, #20]
 800769e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80076a8:	1d38      	adds	r0, r7, #4
 80076aa:	6800      	ldr	r0, [r0, #0]
 80076ac:	f001 f89d 	bl	80087ea <USB_WritePMA>
 80076b0:	e36c      	b.n	8007d8c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80076b2:	463b      	mov	r3, r7
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80076bc:	1d3b      	adds	r3, r7, #4
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	463b      	mov	r3, r7
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80076d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80076da:	1d3b      	adds	r3, r7, #4
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	463b      	mov	r3, r7
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	441a      	add	r2, r3
 80076e8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80076ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007700:	1d3b      	adds	r3, r7, #4
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007706:	1d3b      	adds	r3, r7, #4
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800770e:	b29b      	uxth	r3, r3
 8007710:	461a      	mov	r2, r3
 8007712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007714:	4413      	add	r3, r2
 8007716:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007718:	463b      	mov	r3, r7
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	011a      	lsls	r2, r3, #4
 8007720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007722:	4413      	add	r3, r2
 8007724:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007728:	65bb      	str	r3, [r7, #88]	; 0x58
 800772a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800772e:	b29a      	uxth	r2, r3
 8007730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007732:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007734:	463b      	mov	r3, r7
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	891b      	ldrh	r3, [r3, #8]
 800773a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800773e:	463b      	mov	r3, r7
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6959      	ldr	r1, [r3, #20]
 8007744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007748:	b29b      	uxth	r3, r3
 800774a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800774e:	1d38      	adds	r0, r7, #4
 8007750:	6800      	ldr	r0, [r0, #0]
 8007752:	f001 f84a 	bl	80087ea <USB_WritePMA>
 8007756:	e319      	b.n	8007d8c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007758:	1d3b      	adds	r3, r7, #4
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	463b      	mov	r3, r7
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	b29b      	uxth	r3, r3
 800776a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800776e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007772:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007776:	1d3b      	adds	r3, r7, #4
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	463b      	mov	r3, r7
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	441a      	add	r2, r3
 8007784:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800778c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007790:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007798:	b29b      	uxth	r3, r3
 800779a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800779c:	463b      	mov	r3, r7
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6a1a      	ldr	r2, [r3, #32]
 80077a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077a6:	1ad2      	subs	r2, r2, r3
 80077a8:	463b      	mov	r3, r7
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80077ae:	1d3b      	adds	r3, r7, #4
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	463b      	mov	r3, r7
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 8162 	beq.w	8007a8e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077ca:	1d3b      	adds	r3, r7, #4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077d2:	463b      	mov	r3, r7
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	785b      	ldrb	r3, [r3, #1]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d164      	bne.n	80078a6 <USB_EPStartXfer+0x926>
 80077dc:	1d3b      	adds	r3, r7, #4
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80077e2:	1d3b      	adds	r3, r7, #4
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077f0:	4413      	add	r3, r2
 80077f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80077f4:	463b      	mov	r3, r7
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	011a      	lsls	r2, r3, #4
 80077fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077fe:	4413      	add	r3, r2
 8007800:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007804:	677b      	str	r3, [r7, #116]	; 0x74
 8007806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800780a:	2b00      	cmp	r3, #0
 800780c:	d112      	bne.n	8007834 <USB_EPStartXfer+0x8b4>
 800780e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	b29b      	uxth	r3, r3
 8007814:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007818:	b29a      	uxth	r2, r3
 800781a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800781c:	801a      	strh	r2, [r3, #0]
 800781e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	b29b      	uxth	r3, r3
 8007824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800782c:	b29a      	uxth	r2, r3
 800782e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007830:	801a      	strh	r2, [r3, #0]
 8007832:	e057      	b.n	80078e4 <USB_EPStartXfer+0x964>
 8007834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007838:	2b3e      	cmp	r3, #62	; 0x3e
 800783a:	d817      	bhi.n	800786c <USB_EPStartXfer+0x8ec>
 800783c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007840:	085b      	lsrs	r3, r3, #1
 8007842:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	d004      	beq.n	800785c <USB_EPStartXfer+0x8dc>
 8007852:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007856:	3301      	adds	r3, #1
 8007858:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800785c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007860:	b29b      	uxth	r3, r3
 8007862:	029b      	lsls	r3, r3, #10
 8007864:	b29a      	uxth	r2, r3
 8007866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007868:	801a      	strh	r2, [r3, #0]
 800786a:	e03b      	b.n	80078e4 <USB_EPStartXfer+0x964>
 800786c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007870:	095b      	lsrs	r3, r3, #5
 8007872:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800787a:	f003 031f 	and.w	r3, r3, #31
 800787e:	2b00      	cmp	r3, #0
 8007880:	d104      	bne.n	800788c <USB_EPStartXfer+0x90c>
 8007882:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007886:	3b01      	subs	r3, #1
 8007888:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800788c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007890:	b29b      	uxth	r3, r3
 8007892:	029b      	lsls	r3, r3, #10
 8007894:	b29b      	uxth	r3, r3
 8007896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800789a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800789e:	b29a      	uxth	r2, r3
 80078a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078a2:	801a      	strh	r2, [r3, #0]
 80078a4:	e01e      	b.n	80078e4 <USB_EPStartXfer+0x964>
 80078a6:	463b      	mov	r3, r7
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	785b      	ldrb	r3, [r3, #1]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d119      	bne.n	80078e4 <USB_EPStartXfer+0x964>
 80078b0:	1d3b      	adds	r3, r7, #4
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	461a      	mov	r2, r3
 80078bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078c0:	4413      	add	r3, r2
 80078c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078c6:	463b      	mov	r3, r7
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	011a      	lsls	r2, r3, #4
 80078ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078d2:	4413      	add	r3, r2
 80078d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80078da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078de:	b29a      	uxth	r2, r3
 80078e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80078e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80078e4:	463b      	mov	r3, r7
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	895b      	ldrh	r3, [r3, #10]
 80078ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078ee:	463b      	mov	r3, r7
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6959      	ldr	r1, [r3, #20]
 80078f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80078fe:	1d38      	adds	r0, r7, #4
 8007900:	6800      	ldr	r0, [r0, #0]
 8007902:	f000 ff72 	bl	80087ea <USB_WritePMA>
          ep->xfer_buff += len;
 8007906:	463b      	mov	r3, r7
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	695a      	ldr	r2, [r3, #20]
 800790c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007910:	441a      	add	r2, r3
 8007912:	463b      	mov	r3, r7
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007918:	463b      	mov	r3, r7
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6a1a      	ldr	r2, [r3, #32]
 800791e:	463b      	mov	r3, r7
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	429a      	cmp	r2, r3
 8007926:	d909      	bls.n	800793c <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8007928:	463b      	mov	r3, r7
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6a1a      	ldr	r2, [r3, #32]
 800792e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007932:	1ad2      	subs	r2, r2, r3
 8007934:	463b      	mov	r3, r7
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	621a      	str	r2, [r3, #32]
 800793a:	e008      	b.n	800794e <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800793c:	463b      	mov	r3, r7
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007946:	463b      	mov	r3, r7
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2200      	movs	r2, #0
 800794c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800794e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 821a 	beq.w	8007d8c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007958:	463b      	mov	r3, r7
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d164      	bne.n	8007a2c <USB_EPStartXfer+0xaac>
 8007962:	1d3b      	adds	r3, r7, #4
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	66bb      	str	r3, [r7, #104]	; 0x68
 8007968:	1d3b      	adds	r3, r7, #4
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007970:	b29b      	uxth	r3, r3
 8007972:	461a      	mov	r2, r3
 8007974:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007976:	4413      	add	r3, r2
 8007978:	66bb      	str	r3, [r7, #104]	; 0x68
 800797a:	463b      	mov	r3, r7
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	011a      	lsls	r2, r3, #4
 8007982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007984:	4413      	add	r3, r2
 8007986:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800798a:	667b      	str	r3, [r7, #100]	; 0x64
 800798c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007990:	2b00      	cmp	r3, #0
 8007992:	d112      	bne.n	80079ba <USB_EPStartXfer+0xa3a>
 8007994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	b29b      	uxth	r3, r3
 800799a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800799e:	b29a      	uxth	r2, r3
 80079a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079a2:	801a      	strh	r2, [r3, #0]
 80079a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079a6:	881b      	ldrh	r3, [r3, #0]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079b6:	801a      	strh	r2, [r3, #0]
 80079b8:	e057      	b.n	8007a6a <USB_EPStartXfer+0xaea>
 80079ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079be:	2b3e      	cmp	r3, #62	; 0x3e
 80079c0:	d817      	bhi.n	80079f2 <USB_EPStartXfer+0xa72>
 80079c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079c6:	085b      	lsrs	r3, r3, #1
 80079c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80079cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d004      	beq.n	80079e2 <USB_EPStartXfer+0xa62>
 80079d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079dc:	3301      	adds	r3, #1
 80079de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80079e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	029b      	lsls	r3, r3, #10
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079ee:	801a      	strh	r2, [r3, #0]
 80079f0:	e03b      	b.n	8007a6a <USB_EPStartXfer+0xaea>
 80079f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079f6:	095b      	lsrs	r3, r3, #5
 80079f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80079fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a00:	f003 031f 	and.w	r3, r3, #31
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d104      	bne.n	8007a12 <USB_EPStartXfer+0xa92>
 8007a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	029b      	lsls	r3, r3, #10
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a28:	801a      	strh	r2, [r3, #0]
 8007a2a:	e01e      	b.n	8007a6a <USB_EPStartXfer+0xaea>
 8007a2c:	463b      	mov	r3, r7
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	785b      	ldrb	r3, [r3, #1]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d119      	bne.n	8007a6a <USB_EPStartXfer+0xaea>
 8007a36:	1d3b      	adds	r3, r7, #4
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	673b      	str	r3, [r7, #112]	; 0x70
 8007a3c:	1d3b      	adds	r3, r7, #4
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	461a      	mov	r2, r3
 8007a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a4a:	4413      	add	r3, r2
 8007a4c:	673b      	str	r3, [r7, #112]	; 0x70
 8007a4e:	463b      	mov	r3, r7
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	011a      	lsls	r2, r3, #4
 8007a56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a58:	4413      	add	r3, r2
 8007a5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a6a:	463b      	mov	r3, r7
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	891b      	ldrh	r3, [r3, #8]
 8007a70:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a74:	463b      	mov	r3, r7
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6959      	ldr	r1, [r3, #20]
 8007a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a84:	1d38      	adds	r0, r7, #4
 8007a86:	6800      	ldr	r0, [r0, #0]
 8007a88:	f000 feaf 	bl	80087ea <USB_WritePMA>
 8007a8c:	e17e      	b.n	8007d8c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a8e:	463b      	mov	r3, r7
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	785b      	ldrb	r3, [r3, #1]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d16f      	bne.n	8007b78 <USB_EPStartXfer+0xbf8>
 8007a98:	1d3b      	adds	r3, r7, #4
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007aa0:	1d3b      	adds	r3, r7, #4
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ab6:	463b      	mov	r3, r7
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	011a      	lsls	r2, r3, #4
 8007abe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d116      	bne.n	8007b02 <USB_EPStartXfer+0xb82>
 8007ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ae6:	801a      	strh	r2, [r3, #0]
 8007ae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007afe:	801a      	strh	r2, [r3, #0]
 8007b00:	e05f      	b.n	8007bc2 <USB_EPStartXfer+0xc42>
 8007b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b06:	2b3e      	cmp	r3, #62	; 0x3e
 8007b08:	d818      	bhi.n	8007b3c <USB_EPStartXfer+0xbbc>
 8007b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b0e:	085b      	lsrs	r3, r3, #1
 8007b10:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d004      	beq.n	8007b2a <USB_EPStartXfer+0xbaa>
 8007b20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007b24:	3301      	adds	r3, #1
 8007b26:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007b2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	029b      	lsls	r3, r3, #10
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b38:	801a      	strh	r2, [r3, #0]
 8007b3a:	e042      	b.n	8007bc2 <USB_EPStartXfer+0xc42>
 8007b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b40:	095b      	lsrs	r3, r3, #5
 8007b42:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b4a:	f003 031f 	and.w	r3, r3, #31
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d104      	bne.n	8007b5c <USB_EPStartXfer+0xbdc>
 8007b52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007b56:	3b01      	subs	r3, #1
 8007b58:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007b5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	029b      	lsls	r3, r3, #10
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b74:	801a      	strh	r2, [r3, #0]
 8007b76:	e024      	b.n	8007bc2 <USB_EPStartXfer+0xc42>
 8007b78:	463b      	mov	r3, r7
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	785b      	ldrb	r3, [r3, #1]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d11f      	bne.n	8007bc2 <USB_EPStartXfer+0xc42>
 8007b82:	1d3b      	adds	r3, r7, #4
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b8a:	1d3b      	adds	r3, r7, #4
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	461a      	mov	r2, r3
 8007b96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ba0:	463b      	mov	r3, r7
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	011a      	lsls	r2, r3, #4
 8007ba8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007bac:	4413      	add	r3, r2
 8007bae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bc0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007bc2:	463b      	mov	r3, r7
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	891b      	ldrh	r3, [r3, #8]
 8007bc8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bcc:	463b      	mov	r3, r7
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6959      	ldr	r1, [r3, #20]
 8007bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007bdc:	1d38      	adds	r0, r7, #4
 8007bde:	6800      	ldr	r0, [r0, #0]
 8007be0:	f000 fe03 	bl	80087ea <USB_WritePMA>
          ep->xfer_buff += len;
 8007be4:	463b      	mov	r3, r7
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	695a      	ldr	r2, [r3, #20]
 8007bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bee:	441a      	add	r2, r3
 8007bf0:	463b      	mov	r3, r7
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007bf6:	463b      	mov	r3, r7
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6a1a      	ldr	r2, [r3, #32]
 8007bfc:	463b      	mov	r3, r7
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d909      	bls.n	8007c1a <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8007c06:	463b      	mov	r3, r7
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	6a1a      	ldr	r2, [r3, #32]
 8007c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c10:	1ad2      	subs	r2, r2, r3
 8007c12:	463b      	mov	r3, r7
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	621a      	str	r2, [r3, #32]
 8007c18:	e008      	b.n	8007c2c <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8007c1a:	463b      	mov	r3, r7
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007c24:	463b      	mov	r3, r7
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 80ab 	beq.w	8007d8c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c36:	1d3b      	adds	r3, r7, #4
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c3e:	463b      	mov	r3, r7
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	785b      	ldrb	r3, [r3, #1]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d16f      	bne.n	8007d28 <USB_EPStartXfer+0xda8>
 8007c48:	1d3b      	adds	r3, r7, #4
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c50:	1d3b      	adds	r3, r7, #4
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c60:	4413      	add	r3, r2
 8007c62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c66:	463b      	mov	r3, r7
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	011a      	lsls	r2, r3, #4
 8007c6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c72:	4413      	add	r3, r2
 8007c74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d116      	bne.n	8007cb2 <USB_EPStartXfer+0xd32>
 8007c84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c88:	881b      	ldrh	r3, [r3, #0]
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c96:	801a      	strh	r2, [r3, #0]
 8007c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cae:	801a      	strh	r2, [r3, #0]
 8007cb0:	e05b      	b.n	8007d6a <USB_EPStartXfer+0xdea>
 8007cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cb6:	2b3e      	cmp	r3, #62	; 0x3e
 8007cb8:	d818      	bhi.n	8007cec <USB_EPStartXfer+0xd6c>
 8007cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cbe:	085b      	lsrs	r3, r3, #1
 8007cc0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d004      	beq.n	8007cda <USB_EPStartXfer+0xd5a>
 8007cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	029b      	lsls	r3, r3, #10
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ce8:	801a      	strh	r2, [r3, #0]
 8007cea:	e03e      	b.n	8007d6a <USB_EPStartXfer+0xdea>
 8007cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf0:	095b      	lsrs	r3, r3, #5
 8007cf2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cfa:	f003 031f 	and.w	r3, r3, #31
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d104      	bne.n	8007d0c <USB_EPStartXfer+0xd8c>
 8007d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d06:	3b01      	subs	r3, #1
 8007d08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	029b      	lsls	r3, r3, #10
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d24:	801a      	strh	r2, [r3, #0]
 8007d26:	e020      	b.n	8007d6a <USB_EPStartXfer+0xdea>
 8007d28:	463b      	mov	r3, r7
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	785b      	ldrb	r3, [r3, #1]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d11b      	bne.n	8007d6a <USB_EPStartXfer+0xdea>
 8007d32:	1d3b      	adds	r3, r7, #4
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d42:	4413      	add	r3, r2
 8007d44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d48:	463b      	mov	r3, r7
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	011a      	lsls	r2, r3, #4
 8007d50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d54:	4413      	add	r3, r2
 8007d56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d6a:	463b      	mov	r3, r7
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	895b      	ldrh	r3, [r3, #10]
 8007d70:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d74:	463b      	mov	r3, r7
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6959      	ldr	r1, [r3, #20]
 8007d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d84:	1d38      	adds	r0, r7, #4
 8007d86:	6800      	ldr	r0, [r0, #0]
 8007d88:	f000 fd2f 	bl	80087ea <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007d8c:	1d3b      	adds	r3, r7, #4
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	463b      	mov	r3, r7
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	f107 020a 	add.w	r2, r7, #10
 8007da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007daa:	8013      	strh	r3, [r2, #0]
 8007dac:	f107 030a 	add.w	r3, r7, #10
 8007db0:	f107 020a 	add.w	r2, r7, #10
 8007db4:	8812      	ldrh	r2, [r2, #0]
 8007db6:	f082 0210 	eor.w	r2, r2, #16
 8007dba:	801a      	strh	r2, [r3, #0]
 8007dbc:	f107 030a 	add.w	r3, r7, #10
 8007dc0:	f107 020a 	add.w	r2, r7, #10
 8007dc4:	8812      	ldrh	r2, [r2, #0]
 8007dc6:	f082 0220 	eor.w	r2, r2, #32
 8007dca:	801a      	strh	r2, [r3, #0]
 8007dcc:	1d3b      	adds	r3, r7, #4
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	463b      	mov	r3, r7
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	441a      	add	r2, r3
 8007dda:	f107 030a 	add.w	r3, r7, #10
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	8013      	strh	r3, [r2, #0]
 8007df4:	e3b5      	b.n	8008562 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007df6:	463b      	mov	r3, r7
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	7b1b      	ldrb	r3, [r3, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f040 8090 	bne.w	8007f22 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007e02:	463b      	mov	r3, r7
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	699a      	ldr	r2, [r3, #24]
 8007e08:	463b      	mov	r3, r7
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d90e      	bls.n	8007e30 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8007e12:	463b      	mov	r3, r7
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007e1c:	463b      	mov	r3, r7
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	699a      	ldr	r2, [r3, #24]
 8007e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e26:	1ad2      	subs	r2, r2, r3
 8007e28:	463b      	mov	r3, r7
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	619a      	str	r2, [r3, #24]
 8007e2e:	e008      	b.n	8007e42 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8007e30:	463b      	mov	r3, r7
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007e3a:	463b      	mov	r3, r7
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007e42:	1d3b      	adds	r3, r7, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e4a:	1d3b      	adds	r3, r7, #4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	461a      	mov	r2, r3
 8007e56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e60:	463b      	mov	r3, r7
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	011a      	lsls	r2, r3, #4
 8007e68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d116      	bne.n	8007eac <USB_EPStartXfer+0xf2c>
 8007e7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e82:	881b      	ldrh	r3, [r3, #0]
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e90:	801a      	strh	r2, [r3, #0]
 8007e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ea8:	801a      	strh	r2, [r3, #0]
 8007eaa:	e32c      	b.n	8008506 <USB_EPStartXfer+0x1586>
 8007eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb0:	2b3e      	cmp	r3, #62	; 0x3e
 8007eb2:	d818      	bhi.n	8007ee6 <USB_EPStartXfer+0xf66>
 8007eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb8:	085b      	lsrs	r3, r3, #1
 8007eba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d004      	beq.n	8007ed4 <USB_EPStartXfer+0xf54>
 8007eca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ece:	3301      	adds	r3, #1
 8007ed0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007ed4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	029b      	lsls	r3, r3, #10
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ee2:	801a      	strh	r2, [r3, #0]
 8007ee4:	e30f      	b.n	8008506 <USB_EPStartXfer+0x1586>
 8007ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eea:	095b      	lsrs	r3, r3, #5
 8007eec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ef4:	f003 031f 	and.w	r3, r3, #31
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d104      	bne.n	8007f06 <USB_EPStartXfer+0xf86>
 8007efc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f00:	3b01      	subs	r3, #1
 8007f02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007f06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	029b      	lsls	r3, r3, #10
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f1e:	801a      	strh	r2, [r3, #0]
 8007f20:	e2f1      	b.n	8008506 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007f22:	463b      	mov	r3, r7
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	78db      	ldrb	r3, [r3, #3]
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	f040 818f 	bne.w	800824c <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007f2e:	463b      	mov	r3, r7
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	785b      	ldrb	r3, [r3, #1]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d175      	bne.n	8008024 <USB_EPStartXfer+0x10a4>
 8007f38:	1d3b      	adds	r3, r7, #4
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f40:	1d3b      	adds	r3, r7, #4
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f50:	4413      	add	r3, r2
 8007f52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f56:	463b      	mov	r3, r7
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	011a      	lsls	r2, r3, #4
 8007f5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f62:	4413      	add	r3, r2
 8007f64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f6c:	463b      	mov	r3, r7
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d116      	bne.n	8007fa4 <USB_EPStartXfer+0x1024>
 8007f76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f88:	801a      	strh	r2, [r3, #0]
 8007f8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fa0:	801a      	strh	r2, [r3, #0]
 8007fa2:	e065      	b.n	8008070 <USB_EPStartXfer+0x10f0>
 8007fa4:	463b      	mov	r3, r7
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	2b3e      	cmp	r3, #62	; 0x3e
 8007fac:	d81a      	bhi.n	8007fe4 <USB_EPStartXfer+0x1064>
 8007fae:	463b      	mov	r3, r7
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	085b      	lsrs	r3, r3, #1
 8007fb6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007fba:	463b      	mov	r3, r7
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d004      	beq.n	8007fd2 <USB_EPStartXfer+0x1052>
 8007fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fcc:	3301      	adds	r3, #1
 8007fce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	029b      	lsls	r3, r3, #10
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fe0:	801a      	strh	r2, [r3, #0]
 8007fe2:	e045      	b.n	8008070 <USB_EPStartXfer+0x10f0>
 8007fe4:	463b      	mov	r3, r7
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	095b      	lsrs	r3, r3, #5
 8007fec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ff0:	463b      	mov	r3, r7
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	f003 031f 	and.w	r3, r3, #31
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d104      	bne.n	8008008 <USB_EPStartXfer+0x1088>
 8007ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008002:	3b01      	subs	r3, #1
 8008004:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800800c:	b29b      	uxth	r3, r3
 800800e:	029b      	lsls	r3, r3, #10
 8008010:	b29b      	uxth	r3, r3
 8008012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800801a:	b29a      	uxth	r2, r3
 800801c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008020:	801a      	strh	r2, [r3, #0]
 8008022:	e025      	b.n	8008070 <USB_EPStartXfer+0x10f0>
 8008024:	463b      	mov	r3, r7
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	785b      	ldrb	r3, [r3, #1]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d120      	bne.n	8008070 <USB_EPStartXfer+0x10f0>
 800802e:	1d3b      	adds	r3, r7, #4
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008036:	1d3b      	adds	r3, r7, #4
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800803e:	b29b      	uxth	r3, r3
 8008040:	461a      	mov	r2, r3
 8008042:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008046:	4413      	add	r3, r2
 8008048:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800804c:	463b      	mov	r3, r7
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	011a      	lsls	r2, r3, #4
 8008054:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008058:	4413      	add	r3, r2
 800805a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800805e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008062:	463b      	mov	r3, r7
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	b29a      	uxth	r2, r3
 800806a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800806e:	801a      	strh	r2, [r3, #0]
 8008070:	1d3b      	adds	r3, r7, #4
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008078:	463b      	mov	r3, r7
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	785b      	ldrb	r3, [r3, #1]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d175      	bne.n	800816e <USB_EPStartXfer+0x11ee>
 8008082:	1d3b      	adds	r3, r7, #4
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800808a:	1d3b      	adds	r3, r7, #4
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008092:	b29b      	uxth	r3, r3
 8008094:	461a      	mov	r2, r3
 8008096:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800809a:	4413      	add	r3, r2
 800809c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80080a0:	463b      	mov	r3, r7
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	011a      	lsls	r2, r3, #4
 80080a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80080ac:	4413      	add	r3, r2
 80080ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080b6:	463b      	mov	r3, r7
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d116      	bne.n	80080ee <USB_EPStartXfer+0x116e>
 80080c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080d2:	801a      	strh	r2, [r3, #0]
 80080d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080d8:	881b      	ldrh	r3, [r3, #0]
 80080da:	b29b      	uxth	r3, r3
 80080dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080ea:	801a      	strh	r2, [r3, #0]
 80080ec:	e061      	b.n	80081b2 <USB_EPStartXfer+0x1232>
 80080ee:	463b      	mov	r3, r7
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	2b3e      	cmp	r3, #62	; 0x3e
 80080f6:	d81a      	bhi.n	800812e <USB_EPStartXfer+0x11ae>
 80080f8:	463b      	mov	r3, r7
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	085b      	lsrs	r3, r3, #1
 8008100:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008104:	463b      	mov	r3, r7
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	2b00      	cmp	r3, #0
 8008110:	d004      	beq.n	800811c <USB_EPStartXfer+0x119c>
 8008112:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008116:	3301      	adds	r3, #1
 8008118:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800811c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008120:	b29b      	uxth	r3, r3
 8008122:	029b      	lsls	r3, r3, #10
 8008124:	b29a      	uxth	r2, r3
 8008126:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800812a:	801a      	strh	r2, [r3, #0]
 800812c:	e041      	b.n	80081b2 <USB_EPStartXfer+0x1232>
 800812e:	463b      	mov	r3, r7
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	095b      	lsrs	r3, r3, #5
 8008136:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800813a:	463b      	mov	r3, r7
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	f003 031f 	and.w	r3, r3, #31
 8008144:	2b00      	cmp	r3, #0
 8008146:	d104      	bne.n	8008152 <USB_EPStartXfer+0x11d2>
 8008148:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800814c:	3b01      	subs	r3, #1
 800814e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008152:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008156:	b29b      	uxth	r3, r3
 8008158:	029b      	lsls	r3, r3, #10
 800815a:	b29b      	uxth	r3, r3
 800815c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008164:	b29a      	uxth	r2, r3
 8008166:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800816a:	801a      	strh	r2, [r3, #0]
 800816c:	e021      	b.n	80081b2 <USB_EPStartXfer+0x1232>
 800816e:	463b      	mov	r3, r7
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	785b      	ldrb	r3, [r3, #1]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d11c      	bne.n	80081b2 <USB_EPStartXfer+0x1232>
 8008178:	1d3b      	adds	r3, r7, #4
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008180:	b29b      	uxth	r3, r3
 8008182:	461a      	mov	r2, r3
 8008184:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008188:	4413      	add	r3, r2
 800818a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800818e:	463b      	mov	r3, r7
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	011a      	lsls	r2, r3, #4
 8008196:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800819a:	4413      	add	r3, r2
 800819c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081a4:	463b      	mov	r3, r7
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081b0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80081b2:	463b      	mov	r3, r7
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 81a4 	beq.w	8008506 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80081be:	1d3b      	adds	r3, r7, #4
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	463b      	mov	r3, r7
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	881b      	ldrh	r3, [r3, #0]
 80081ce:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80081d2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80081d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d005      	beq.n	80081ea <USB_EPStartXfer+0x126a>
 80081de:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80081e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10d      	bne.n	8008206 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80081ea:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80081ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f040 8187 	bne.w	8008506 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80081f8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80081fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008200:	2b00      	cmp	r3, #0
 8008202:	f040 8180 	bne.w	8008506 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008206:	1d3b      	adds	r3, r7, #4
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	463b      	mov	r3, r7
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	b29b      	uxth	r3, r3
 8008218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800821c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008220:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008224:	1d3b      	adds	r3, r7, #4
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	463b      	mov	r3, r7
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	441a      	add	r2, r3
 8008232:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800823a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800823e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008242:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008246:	b29b      	uxth	r3, r3
 8008248:	8013      	strh	r3, [r2, #0]
 800824a:	e15c      	b.n	8008506 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800824c:	463b      	mov	r3, r7
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	78db      	ldrb	r3, [r3, #3]
 8008252:	2b01      	cmp	r3, #1
 8008254:	f040 8155 	bne.w	8008502 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008258:	463b      	mov	r3, r7
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	699a      	ldr	r2, [r3, #24]
 800825e:	463b      	mov	r3, r7
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	429a      	cmp	r2, r3
 8008266:	d90e      	bls.n	8008286 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8008268:	463b      	mov	r3, r7
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008272:	463b      	mov	r3, r7
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	699a      	ldr	r2, [r3, #24]
 8008278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800827c:	1ad2      	subs	r2, r2, r3
 800827e:	463b      	mov	r3, r7
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	619a      	str	r2, [r3, #24]
 8008284:	e008      	b.n	8008298 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8008286:	463b      	mov	r3, r7
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008290:	463b      	mov	r3, r7
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2200      	movs	r2, #0
 8008296:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008298:	463b      	mov	r3, r7
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	785b      	ldrb	r3, [r3, #1]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d16f      	bne.n	8008382 <USB_EPStartXfer+0x1402>
 80082a2:	1d3b      	adds	r3, r7, #4
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80082aa:	1d3b      	adds	r3, r7, #4
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	461a      	mov	r2, r3
 80082b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80082ba:	4413      	add	r3, r2
 80082bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80082c0:	463b      	mov	r3, r7
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	011a      	lsls	r2, r3, #4
 80082c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80082cc:	4413      	add	r3, r2
 80082ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d116      	bne.n	800830c <USB_EPStartXfer+0x138c>
 80082de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082f0:	801a      	strh	r2, [r3, #0]
 80082f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008302:	b29a      	uxth	r2, r3
 8008304:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008308:	801a      	strh	r2, [r3, #0]
 800830a:	e05f      	b.n	80083cc <USB_EPStartXfer+0x144c>
 800830c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008310:	2b3e      	cmp	r3, #62	; 0x3e
 8008312:	d818      	bhi.n	8008346 <USB_EPStartXfer+0x13c6>
 8008314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008318:	085b      	lsrs	r3, r3, #1
 800831a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800831e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b00      	cmp	r3, #0
 8008328:	d004      	beq.n	8008334 <USB_EPStartXfer+0x13b4>
 800832a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800832e:	3301      	adds	r3, #1
 8008330:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008338:	b29b      	uxth	r3, r3
 800833a:	029b      	lsls	r3, r3, #10
 800833c:	b29a      	uxth	r2, r3
 800833e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008342:	801a      	strh	r2, [r3, #0]
 8008344:	e042      	b.n	80083cc <USB_EPStartXfer+0x144c>
 8008346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800834a:	095b      	lsrs	r3, r3, #5
 800834c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008354:	f003 031f 	and.w	r3, r3, #31
 8008358:	2b00      	cmp	r3, #0
 800835a:	d104      	bne.n	8008366 <USB_EPStartXfer+0x13e6>
 800835c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008360:	3b01      	subs	r3, #1
 8008362:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800836a:	b29b      	uxth	r3, r3
 800836c:	029b      	lsls	r3, r3, #10
 800836e:	b29b      	uxth	r3, r3
 8008370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008378:	b29a      	uxth	r2, r3
 800837a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800837e:	801a      	strh	r2, [r3, #0]
 8008380:	e024      	b.n	80083cc <USB_EPStartXfer+0x144c>
 8008382:	463b      	mov	r3, r7
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	785b      	ldrb	r3, [r3, #1]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d11f      	bne.n	80083cc <USB_EPStartXfer+0x144c>
 800838c:	1d3b      	adds	r3, r7, #4
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008394:	1d3b      	adds	r3, r7, #4
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800839c:	b29b      	uxth	r3, r3
 800839e:	461a      	mov	r2, r3
 80083a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083a4:	4413      	add	r3, r2
 80083a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80083aa:	463b      	mov	r3, r7
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	011a      	lsls	r2, r3, #4
 80083b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b6:	4413      	add	r3, r2
 80083b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80083c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80083ca:	801a      	strh	r2, [r3, #0]
 80083cc:	1d3b      	adds	r3, r7, #4
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083d4:	463b      	mov	r3, r7
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	785b      	ldrb	r3, [r3, #1]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d16f      	bne.n	80084be <USB_EPStartXfer+0x153e>
 80083de:	1d3b      	adds	r3, r7, #4
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80083e6:	1d3b      	adds	r3, r7, #4
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	461a      	mov	r2, r3
 80083f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083f6:	4413      	add	r3, r2
 80083f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80083fc:	463b      	mov	r3, r7
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	011a      	lsls	r2, r3, #4
 8008404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008408:	4413      	add	r3, r2
 800840a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800840e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008416:	2b00      	cmp	r3, #0
 8008418:	d116      	bne.n	8008448 <USB_EPStartXfer+0x14c8>
 800841a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	b29b      	uxth	r3, r3
 8008422:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008426:	b29a      	uxth	r2, r3
 8008428:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800842c:	801a      	strh	r2, [r3, #0]
 800842e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008432:	881b      	ldrh	r3, [r3, #0]
 8008434:	b29b      	uxth	r3, r3
 8008436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800843a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800843e:	b29a      	uxth	r2, r3
 8008440:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008444:	801a      	strh	r2, [r3, #0]
 8008446:	e05e      	b.n	8008506 <USB_EPStartXfer+0x1586>
 8008448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800844c:	2b3e      	cmp	r3, #62	; 0x3e
 800844e:	d818      	bhi.n	8008482 <USB_EPStartXfer+0x1502>
 8008450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008454:	085b      	lsrs	r3, r3, #1
 8008456:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800845a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	d004      	beq.n	8008470 <USB_EPStartXfer+0x14f0>
 8008466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800846a:	3301      	adds	r3, #1
 800846c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008470:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008474:	b29b      	uxth	r3, r3
 8008476:	029b      	lsls	r3, r3, #10
 8008478:	b29a      	uxth	r2, r3
 800847a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800847e:	801a      	strh	r2, [r3, #0]
 8008480:	e041      	b.n	8008506 <USB_EPStartXfer+0x1586>
 8008482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008486:	095b      	lsrs	r3, r3, #5
 8008488:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800848c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008490:	f003 031f 	and.w	r3, r3, #31
 8008494:	2b00      	cmp	r3, #0
 8008496:	d104      	bne.n	80084a2 <USB_EPStartXfer+0x1522>
 8008498:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800849c:	3b01      	subs	r3, #1
 800849e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80084a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	029b      	lsls	r3, r3, #10
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084ba:	801a      	strh	r2, [r3, #0]
 80084bc:	e023      	b.n	8008506 <USB_EPStartXfer+0x1586>
 80084be:	463b      	mov	r3, r7
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	785b      	ldrb	r3, [r3, #1]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d11e      	bne.n	8008506 <USB_EPStartXfer+0x1586>
 80084c8:	1d3b      	adds	r3, r7, #4
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	461a      	mov	r2, r3
 80084d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d8:	4413      	add	r3, r2
 80084da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084de:	463b      	mov	r3, r7
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	011a      	lsls	r2, r3, #4
 80084e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ea:	4413      	add	r3, r2
 80084ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084fe:	801a      	strh	r2, [r3, #0]
 8008500:	e001      	b.n	8008506 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e02e      	b.n	8008564 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008506:	1d3b      	adds	r3, r7, #4
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	463b      	mov	r3, r7
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	b29b      	uxth	r3, r3
 8008518:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800851c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008520:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008524:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008528:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800852c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008530:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008534:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008538:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800853c:	1d3b      	adds	r3, r7, #4
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	463b      	mov	r3, r7
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	441a      	add	r2, r3
 800854a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800854e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800855a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800855e:	b29b      	uxth	r3, r3
 8008560:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800856e:	b480      	push	{r7}
 8008570:	b085      	sub	sp, #20
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	785b      	ldrb	r3, [r3, #1]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d020      	beq.n	80085c2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	b29b      	uxth	r3, r3
 800858e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008596:	81bb      	strh	r3, [r7, #12]
 8008598:	89bb      	ldrh	r3, [r7, #12]
 800859a:	f083 0310 	eor.w	r3, r3, #16
 800859e:	81bb      	strh	r3, [r7, #12]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	441a      	add	r2, r3
 80085aa:	89bb      	ldrh	r3, [r7, #12]
 80085ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085bc:	b29b      	uxth	r3, r3
 80085be:	8013      	strh	r3, [r2, #0]
 80085c0:	e01f      	b.n	8008602 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085d8:	81fb      	strh	r3, [r7, #14]
 80085da:	89fb      	ldrh	r3, [r7, #14]
 80085dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80085e0:	81fb      	strh	r3, [r7, #14]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	441a      	add	r2, r3
 80085ec:	89fb      	ldrh	r3, [r7, #14]
 80085ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085fe:	b29b      	uxth	r3, r3
 8008600:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	bc80      	pop	{r7}
 800860c:	4770      	bx	lr

0800860e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800860e:	b480      	push	{r7}
 8008610:	b087      	sub	sp, #28
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	7b1b      	ldrb	r3, [r3, #12]
 800861c:	2b00      	cmp	r3, #0
 800861e:	f040 809d 	bne.w	800875c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	785b      	ldrb	r3, [r3, #1]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d04c      	beq.n	80086c4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	881b      	ldrh	r3, [r3, #0]
 8008636:	823b      	strh	r3, [r7, #16]
 8008638:	8a3b      	ldrh	r3, [r7, #16]
 800863a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800863e:	2b00      	cmp	r3, #0
 8008640:	d01b      	beq.n	800867a <USB_EPClearStall+0x6c>
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	b29b      	uxth	r3, r3
 8008650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008658:	81fb      	strh	r3, [r7, #14]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	441a      	add	r2, r3
 8008664:	89fb      	ldrh	r3, [r7, #14]
 8008666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800866a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800866e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008672:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008676:	b29b      	uxth	r3, r3
 8008678:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	78db      	ldrb	r3, [r3, #3]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d06c      	beq.n	800875c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	b29b      	uxth	r3, r3
 8008690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008698:	81bb      	strh	r3, [r7, #12]
 800869a:	89bb      	ldrh	r3, [r7, #12]
 800869c:	f083 0320 	eor.w	r3, r3, #32
 80086a0:	81bb      	strh	r3, [r7, #12]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	441a      	add	r2, r3
 80086ac:	89bb      	ldrh	r3, [r7, #12]
 80086ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086be:	b29b      	uxth	r3, r3
 80086c0:	8013      	strh	r3, [r2, #0]
 80086c2:	e04b      	b.n	800875c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	82fb      	strh	r3, [r7, #22]
 80086d2:	8afb      	ldrh	r3, [r7, #22]
 80086d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d01b      	beq.n	8008714 <USB_EPClearStall+0x106>
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f2:	82bb      	strh	r3, [r7, #20]
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	441a      	add	r2, r3
 80086fe:	8abb      	ldrh	r3, [r7, #20]
 8008700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800870c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008710:	b29b      	uxth	r3, r3
 8008712:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4413      	add	r3, r2
 800871e:	881b      	ldrh	r3, [r3, #0]
 8008720:	b29b      	uxth	r3, r3
 8008722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800872a:	827b      	strh	r3, [r7, #18]
 800872c:	8a7b      	ldrh	r3, [r7, #18]
 800872e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008732:	827b      	strh	r3, [r7, #18]
 8008734:	8a7b      	ldrh	r3, [r7, #18]
 8008736:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800873a:	827b      	strh	r3, [r7, #18]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	441a      	add	r2, r3
 8008746:	8a7b      	ldrh	r3, [r7, #18]
 8008748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800874c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008758:	b29b      	uxth	r3, r3
 800875a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	bc80      	pop	{r7}
 8008766:	4770      	bx	lr

08008768 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d103      	bne.n	8008782 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2280      	movs	r2, #128	; 0x80
 800877e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	bc80      	pop	{r7}
 800878c:	4770      	bx	lr

0800878e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800878e:	b480      	push	{r7}
 8008790:	b083      	sub	sp, #12
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	bc80      	pop	{r7}
 80087a0:	4770      	bx	lr

080087a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80087a2:	b480      	push	{r7}
 80087a4:	b083      	sub	sp, #12
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bc80      	pop	{r7}
 80087b4:	4770      	bx	lr

080087b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b085      	sub	sp, #20
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80087c8:	68fb      	ldr	r3, [r7, #12]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bc80      	pop	{r7}
 80087d2:	4770      	bx	lr

080087d4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bc80      	pop	{r7}
 80087e8:	4770      	bx	lr

080087ea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b08d      	sub	sp, #52	; 0x34
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	60f8      	str	r0, [r7, #12]
 80087f2:	60b9      	str	r1, [r7, #8]
 80087f4:	4611      	mov	r1, r2
 80087f6:	461a      	mov	r2, r3
 80087f8:	460b      	mov	r3, r1
 80087fa:	80fb      	strh	r3, [r7, #6]
 80087fc:	4613      	mov	r3, r2
 80087fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008800:	88bb      	ldrh	r3, [r7, #4]
 8008802:	3301      	adds	r3, #1
 8008804:	085b      	lsrs	r3, r3, #1
 8008806:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008810:	88fb      	ldrh	r3, [r7, #6]
 8008812:	005a      	lsls	r2, r3, #1
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800881c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800881e:	6a3b      	ldr	r3, [r7, #32]
 8008820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008822:	e01e      	b.n	8008862 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	3301      	adds	r3, #1
 800882e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	b29b      	uxth	r3, r3
 8008836:	021b      	lsls	r3, r3, #8
 8008838:	b29b      	uxth	r3, r3
 800883a:	461a      	mov	r2, r3
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	4313      	orrs	r3, r2
 8008840:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	b29a      	uxth	r2, r3
 8008846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008848:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800884a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884c:	3302      	adds	r3, #2
 800884e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008852:	3302      	adds	r3, #2
 8008854:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	3301      	adds	r3, #1
 800885a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800885c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885e:	3b01      	subs	r3, #1
 8008860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1dd      	bne.n	8008824 <USB_WritePMA+0x3a>
  }
}
 8008868:	bf00      	nop
 800886a:	bf00      	nop
 800886c:	3734      	adds	r7, #52	; 0x34
 800886e:	46bd      	mov	sp, r7
 8008870:	bc80      	pop	{r7}
 8008872:	4770      	bx	lr

08008874 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008874:	b480      	push	{r7}
 8008876:	b08b      	sub	sp, #44	; 0x2c
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	4611      	mov	r1, r2
 8008880:	461a      	mov	r2, r3
 8008882:	460b      	mov	r3, r1
 8008884:	80fb      	strh	r3, [r7, #6]
 8008886:	4613      	mov	r3, r2
 8008888:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800888a:	88bb      	ldrh	r3, [r7, #4]
 800888c:	085b      	lsrs	r3, r3, #1
 800888e:	b29b      	uxth	r3, r3
 8008890:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800889a:	88fb      	ldrh	r3, [r7, #6]
 800889c:	005a      	lsls	r2, r3, #1
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	4413      	add	r3, r2
 80088a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088a6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	627b      	str	r3, [r7, #36]	; 0x24
 80088ac:	e01b      	b.n	80088e6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80088ae:	6a3b      	ldr	r3, [r7, #32]
 80088b0:	881b      	ldrh	r3, [r3, #0]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	3302      	adds	r3, #2
 80088ba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	b2da      	uxtb	r2, r3
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	3301      	adds	r3, #1
 80088c8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	0a1b      	lsrs	r3, r3, #8
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	3301      	adds	r3, #1
 80088d8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	3302      	adds	r3, #2
 80088de:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	3b01      	subs	r3, #1
 80088e4:	627b      	str	r3, [r7, #36]	; 0x24
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e0      	bne.n	80088ae <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80088ec:	88bb      	ldrh	r3, [r7, #4]
 80088ee:	f003 0301 	and.w	r3, r3, #1
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d007      	beq.n	8008908 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80088f8:	6a3b      	ldr	r3, [r7, #32]
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	b2da      	uxtb	r2, r3
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	701a      	strb	r2, [r3, #0]
  }
}
 8008908:	bf00      	nop
 800890a:	372c      	adds	r7, #44	; 0x2c
 800890c:	46bd      	mov	sp, r7
 800890e:	bc80      	pop	{r7}
 8008910:	4770      	bx	lr
	...

08008914 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008918:	4904      	ldr	r1, [pc, #16]	; (800892c <MX_FATFS_Init+0x18>)
 800891a:	4805      	ldr	r0, [pc, #20]	; (8008930 <MX_FATFS_Init+0x1c>)
 800891c:	f001 fbe6 	bl	800a0ec <FATFS_LinkDriver>
 8008920:	4603      	mov	r3, r0
 8008922:	461a      	mov	r2, r3
 8008924:	4b03      	ldr	r3, [pc, #12]	; (8008934 <MX_FATFS_Init+0x20>)
 8008926:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008928:	bf00      	nop
 800892a:	bd80      	pop	{r7, pc}
 800892c:	20001fd0 	.word	0x20001fd0
 8008930:	2000000c 	.word	0x2000000c
 8008934:	20001fd4 	.word	0x20001fd4

08008938 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	4603      	mov	r3, r0
 8008940:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008942:	4b05      	ldr	r3, [pc, #20]	; (8008958 <USER_initialize+0x20>)
 8008944:	2201      	movs	r2, #1
 8008946:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008948:	4b03      	ldr	r3, [pc, #12]	; (8008958 <USER_initialize+0x20>)
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800894e:	4618      	mov	r0, r3
 8008950:	370c      	adds	r7, #12
 8008952:	46bd      	mov	sp, r7
 8008954:	bc80      	pop	{r7}
 8008956:	4770      	bx	lr
 8008958:	20000009 	.word	0x20000009

0800895c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008966:	4b05      	ldr	r3, [pc, #20]	; (800897c <USER_status+0x20>)
 8008968:	2201      	movs	r2, #1
 800896a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800896c:	4b03      	ldr	r3, [pc, #12]	; (800897c <USER_status+0x20>)
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008972:	4618      	mov	r0, r3
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	bc80      	pop	{r7}
 800897a:	4770      	bx	lr
 800897c:	20000009 	.word	0x20000009

08008980 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	607a      	str	r2, [r7, #4]
 800898a:	603b      	str	r3, [r7, #0]
 800898c:	4603      	mov	r3, r0
 800898e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008990:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8008992:	4618      	mov	r0, r3
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	bc80      	pop	{r7}
 800899a:	4770      	bx	lr

0800899c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60b9      	str	r1, [r7, #8]
 80089a4:	607a      	str	r2, [r7, #4]
 80089a6:	603b      	str	r3, [r7, #0]
 80089a8:	4603      	mov	r3, r0
 80089aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80089ac:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bc80      	pop	{r7}
 80089b6:	4770      	bx	lr

080089b8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	4603      	mov	r3, r0
 80089c0:	603a      	str	r2, [r7, #0]
 80089c2:	71fb      	strb	r3, [r7, #7]
 80089c4:	460b      	mov	r3, r1
 80089c6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	73fb      	strb	r3, [r7, #15]
    return res;
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bc80      	pop	{r7}
 80089d6:	4770      	bx	lr

080089d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80089e4:	2300      	movs	r3, #0
 80089e6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	7c1b      	ldrb	r3, [r3, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d115      	bne.n	8008a1c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80089f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089f4:	2202      	movs	r2, #2
 80089f6:	2181      	movs	r1, #129	; 0x81
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f004 fb92 	bl	800d122 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a08:	2202      	movs	r2, #2
 8008a0a:	2101      	movs	r1, #1
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f004 fb88 	bl	800d122 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008a1a:	e012      	b.n	8008a42 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a1c:	2340      	movs	r3, #64	; 0x40
 8008a1e:	2202      	movs	r2, #2
 8008a20:	2181      	movs	r1, #129	; 0x81
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f004 fb7d 	bl	800d122 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a2e:	2340      	movs	r3, #64	; 0x40
 8008a30:	2202      	movs	r2, #2
 8008a32:	2101      	movs	r1, #1
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f004 fb74 	bl	800d122 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a42:	2308      	movs	r3, #8
 8008a44:	2203      	movs	r2, #3
 8008a46:	2182      	movs	r1, #130	; 0x82
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f004 fb6a 	bl	800d122 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008a54:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008a58:	f004 fc8a 	bl	800d370 <USBD_static_malloc>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d102      	bne.n	8008a74 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	73fb      	strb	r3, [r7, #15]
 8008a72:	e026      	b.n	8008ac2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	7c1b      	ldrb	r3, [r3, #16]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d109      	bne.n	8008ab2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f004 fc2a 	bl	800d304 <USBD_LL_PrepareReceive>
 8008ab0:	e007      	b.n	8008ac2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ab8:	2340      	movs	r3, #64	; 0x40
 8008aba:	2101      	movs	r1, #1
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f004 fc21 	bl	800d304 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008adc:	2181      	movs	r1, #129	; 0x81
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f004 fb45 	bl	800d16e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008aea:	2101      	movs	r1, #1
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f004 fb3e 	bl	800d16e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008afa:	2182      	movs	r1, #130	; 0x82
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f004 fb36 	bl	800d16e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00e      	beq.n	8008b30 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b22:	4618      	mov	r0, r3
 8008b24:	f004 fc30 	bl	800d388 <USBD_static_free>
    pdev->pClassData = NULL;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b086      	sub	sp, #24
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b4a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008b50:	2300      	movs	r3, #0
 8008b52:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d039      	beq.n	8008bd8 <USBD_CDC_Setup+0x9e>
 8008b64:	2b20      	cmp	r3, #32
 8008b66:	d17f      	bne.n	8008c68 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	88db      	ldrh	r3, [r3, #6]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d029      	beq.n	8008bc4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	b25b      	sxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	da11      	bge.n	8008b9e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008b86:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	88d2      	ldrh	r2, [r2, #6]
 8008b8c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b8e:	6939      	ldr	r1, [r7, #16]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	88db      	ldrh	r3, [r3, #6]
 8008b94:	461a      	mov	r2, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f001 f9d9 	bl	8009f4e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008b9c:	e06b      	b.n	8008c76 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	785a      	ldrb	r2, [r3, #1]
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	88db      	ldrh	r3, [r3, #6]
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008bb4:	6939      	ldr	r1, [r7, #16]
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	88db      	ldrh	r3, [r3, #6]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f001 f9f4 	bl	8009faa <USBD_CtlPrepareRx>
      break;
 8008bc2:	e058      	b.n	8008c76 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	7850      	ldrb	r0, [r2, #1]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	6839      	ldr	r1, [r7, #0]
 8008bd4:	4798      	blx	r3
      break;
 8008bd6:	e04e      	b.n	8008c76 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	785b      	ldrb	r3, [r3, #1]
 8008bdc:	2b0b      	cmp	r3, #11
 8008bde:	d02e      	beq.n	8008c3e <USBD_CDC_Setup+0x104>
 8008be0:	2b0b      	cmp	r3, #11
 8008be2:	dc38      	bgt.n	8008c56 <USBD_CDC_Setup+0x11c>
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <USBD_CDC_Setup+0xb4>
 8008be8:	2b0a      	cmp	r3, #10
 8008bea:	d014      	beq.n	8008c16 <USBD_CDC_Setup+0xdc>
 8008bec:	e033      	b.n	8008c56 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf4:	2b03      	cmp	r3, #3
 8008bf6:	d107      	bne.n	8008c08 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008bf8:	f107 030c 	add.w	r3, r7, #12
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 f9a4 	bl	8009f4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c06:	e02e      	b.n	8008c66 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f001 f935 	bl	8009e7a <USBD_CtlError>
            ret = USBD_FAIL;
 8008c10:	2302      	movs	r3, #2
 8008c12:	75fb      	strb	r3, [r7, #23]
          break;
 8008c14:	e027      	b.n	8008c66 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	d107      	bne.n	8008c30 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c20:	f107 030f 	add.w	r3, r7, #15
 8008c24:	2201      	movs	r2, #1
 8008c26:	4619      	mov	r1, r3
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f001 f990 	bl	8009f4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c2e:	e01a      	b.n	8008c66 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f001 f921 	bl	8009e7a <USBD_CtlError>
            ret = USBD_FAIL;
 8008c38:	2302      	movs	r3, #2
 8008c3a:	75fb      	strb	r3, [r7, #23]
          break;
 8008c3c:	e013      	b.n	8008c66 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d00d      	beq.n	8008c64 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f001 f915 	bl	8009e7a <USBD_CtlError>
            ret = USBD_FAIL;
 8008c50:	2302      	movs	r3, #2
 8008c52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008c54:	e006      	b.n	8008c64 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008c56:	6839      	ldr	r1, [r7, #0]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f001 f90e 	bl	8009e7a <USBD_CtlError>
          ret = USBD_FAIL;
 8008c5e:	2302      	movs	r3, #2
 8008c60:	75fb      	strb	r3, [r7, #23]
          break;
 8008c62:	e000      	b.n	8008c66 <USBD_CDC_Setup+0x12c>
          break;
 8008c64:	bf00      	nop
      }
      break;
 8008c66:	e006      	b.n	8008c76 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f001 f905 	bl	8009e7a <USBD_CtlError>
      ret = USBD_FAIL;
 8008c70:	2302      	movs	r3, #2
 8008c72:	75fb      	strb	r3, [r7, #23]
      break;
 8008c74:	bf00      	nop
  }

  return ret;
 8008c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3718      	adds	r7, #24
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c92:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c9a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d03a      	beq.n	8008d1c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008ca6:	78fa      	ldrb	r2, [r7, #3]
 8008ca8:	6879      	ldr	r1, [r7, #4]
 8008caa:	4613      	mov	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	440b      	add	r3, r1
 8008cb4:	331c      	adds	r3, #28
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d029      	beq.n	8008d10 <USBD_CDC_DataIn+0x90>
 8008cbc:	78fa      	ldrb	r2, [r7, #3]
 8008cbe:	6879      	ldr	r1, [r7, #4]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	440b      	add	r3, r1
 8008cca:	331c      	adds	r3, #28
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	78f9      	ldrb	r1, [r7, #3]
 8008cd0:	68b8      	ldr	r0, [r7, #8]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	440b      	add	r3, r1
 8008cd8:	00db      	lsls	r3, r3, #3
 8008cda:	4403      	add	r3, r0
 8008cdc:	3338      	adds	r3, #56	; 0x38
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	fbb2 f1f3 	udiv	r1, r2, r3
 8008ce4:	fb03 f301 	mul.w	r3, r3, r1
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d110      	bne.n	8008d10 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008cee:	78fa      	ldrb	r2, [r7, #3]
 8008cf0:	6879      	ldr	r1, [r7, #4]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	440b      	add	r3, r1
 8008cfc:	331c      	adds	r3, #28
 8008cfe:	2200      	movs	r2, #0
 8008d00:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d02:	78f9      	ldrb	r1, [r7, #3]
 8008d04:	2300      	movs	r3, #0
 8008d06:	2200      	movs	r2, #0
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f004 fad8 	bl	800d2be <USBD_LL_Transmit>
 8008d0e:	e003      	b.n	8008d18 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	e000      	b.n	8008d1e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008d1c:	2302      	movs	r3, #2
  }
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b084      	sub	sp, #16
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	460b      	mov	r3, r1
 8008d30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d38:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f004 fb03 	bl	800d34a <USBD_LL_GetRxDataSize>
 8008d44:	4602      	mov	r2, r0
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00d      	beq.n	8008d72 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	4798      	blx	r3

    return USBD_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e000      	b.n	8008d74 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008d72:	2302      	movs	r3, #2
  }
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d015      	beq.n	8008dc2 <USBD_CDC_EP0_RxReady+0x46>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008d9c:	2bff      	cmp	r3, #255	; 0xff
 8008d9e:	d010      	beq.n	8008dc2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008dae:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008db6:	b292      	uxth	r2, r2
 8008db8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	22ff      	movs	r2, #255	; 0xff
 8008dbe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2243      	movs	r2, #67	; 0x43
 8008dd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008dda:	4b03      	ldr	r3, [pc, #12]	; (8008de8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bc80      	pop	{r7}
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	200000a8 	.word	0x200000a8

08008dec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2243      	movs	r2, #67	; 0x43
 8008df8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008dfa:	4b03      	ldr	r3, [pc, #12]	; (8008e08 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bc80      	pop	{r7}
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	20000064 	.word	0x20000064

08008e0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2243      	movs	r2, #67	; 0x43
 8008e18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008e1a:	4b03      	ldr	r3, [pc, #12]	; (8008e28 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bc80      	pop	{r7}
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	200000ec 	.word	0x200000ec

08008e2c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	220a      	movs	r2, #10
 8008e38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008e3a:	4b03      	ldr	r3, [pc, #12]	; (8008e48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bc80      	pop	{r7}
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	20000020 	.word	0x20000020

08008e4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008e56:	2302      	movs	r3, #2
 8008e58:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d005      	beq.n	8008e6c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bc80      	pop	{r7}
 8008e76:	4770      	bx	lr

08008e78 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	4613      	mov	r3, r2
 8008e84:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e8c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008e96:	88fa      	ldrh	r2, [r7, #6]
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	371c      	adds	r7, #28
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bc80      	pop	{r7}
 8008ea8:	4770      	bx	lr

08008eaa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b085      	sub	sp, #20
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3714      	adds	r7, #20
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bc80      	pop	{r7}
 8008ece:	4770      	bx	lr

08008ed0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d017      	beq.n	8008f1a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	7c1b      	ldrb	r3, [r3, #16]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d109      	bne.n	8008f06 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008efc:	2101      	movs	r1, #1
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f004 fa00 	bl	800d304 <USBD_LL_PrepareReceive>
 8008f04:	e007      	b.n	8008f16 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f0c:	2340      	movs	r3, #64	; 0x40
 8008f0e:	2101      	movs	r1, #1
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f004 f9f7 	bl	800d304 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	e000      	b.n	8008f1c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008f1a:	2302      	movs	r3, #2
  }
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008f38:	2302      	movs	r3, #2
 8008f3a:	e01a      	b.n	8008f72 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d003      	beq.n	8008f5c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	79fa      	ldrb	r2, [r7, #7]
 8008f68:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f004 f864 	bl	800d038 <USBD_LL_Init>

  return USBD_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b085      	sub	sp, #20
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d006      	beq.n	8008f9c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]
 8008f9a:	e001      	b.n	8008fa0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3714      	adds	r7, #20
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bc80      	pop	{r7}
 8008faa:	4770      	bx	lr

08008fac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f004 f899 	bl	800d0ec <USBD_LL_Start>

  return USBD_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bc80      	pop	{r7}
 8008fd6:	4770      	bx	lr

08008fd8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00c      	beq.n	800900c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	78fa      	ldrb	r2, [r7, #3]
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	4798      	blx	r3
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d101      	bne.n	800900c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009008:	2300      	movs	r3, #0
 800900a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800900c:	7bfb      	ldrb	r3, [r7, #15]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b082      	sub	sp, #8
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	460b      	mov	r3, r1
 8009020:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	78fa      	ldrb	r2, [r7, #3]
 800902c:	4611      	mov	r1, r2
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	4798      	blx	r3

  return USBD_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	4618      	mov	r0, r3
 8009050:	f000 fed7 	bl	8009e02 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009062:	461a      	mov	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009070:	f003 031f 	and.w	r3, r3, #31
 8009074:	2b02      	cmp	r3, #2
 8009076:	d016      	beq.n	80090a6 <USBD_LL_SetupStage+0x6a>
 8009078:	2b02      	cmp	r3, #2
 800907a:	d81c      	bhi.n	80090b6 <USBD_LL_SetupStage+0x7a>
 800907c:	2b00      	cmp	r3, #0
 800907e:	d002      	beq.n	8009086 <USBD_LL_SetupStage+0x4a>
 8009080:	2b01      	cmp	r3, #1
 8009082:	d008      	beq.n	8009096 <USBD_LL_SetupStage+0x5a>
 8009084:	e017      	b.n	80090b6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f9ca 	bl	8009428 <USBD_StdDevReq>
      break;
 8009094:	e01a      	b.n	80090cc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800909c:	4619      	mov	r1, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fa2c 	bl	80094fc <USBD_StdItfReq>
      break;
 80090a4:	e012      	b.n	80090cc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80090ac:	4619      	mov	r1, r3
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa6c 	bl	800958c <USBD_StdEPReq>
      break;
 80090b4:	e00a      	b.n	80090cc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80090bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	4619      	mov	r1, r3
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f004 f871 	bl	800d1ac <USBD_LL_StallEP>
      break;
 80090ca:	bf00      	nop
  }

  return USBD_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b086      	sub	sp, #24
 80090da:	af00      	add	r7, sp, #0
 80090dc:	60f8      	str	r0, [r7, #12]
 80090de:	460b      	mov	r3, r1
 80090e0:	607a      	str	r2, [r7, #4]
 80090e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80090e4:	7afb      	ldrb	r3, [r7, #11]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d14b      	bne.n	8009182 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80090f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090f8:	2b03      	cmp	r3, #3
 80090fa:	d134      	bne.n	8009166 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	68da      	ldr	r2, [r3, #12]
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	691b      	ldr	r3, [r3, #16]
 8009104:	429a      	cmp	r2, r3
 8009106:	d919      	bls.n	800913c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	68da      	ldr	r2, [r3, #12]
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	1ad2      	subs	r2, r2, r3
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	68da      	ldr	r2, [r3, #12]
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800911e:	429a      	cmp	r2, r3
 8009120:	d203      	bcs.n	800912a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009126:	b29b      	uxth	r3, r3
 8009128:	e002      	b.n	8009130 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800912e:	b29b      	uxth	r3, r3
 8009130:	461a      	mov	r2, r3
 8009132:	6879      	ldr	r1, [r7, #4]
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 ff56 	bl	8009fe6 <USBD_CtlContinueRx>
 800913a:	e038      	b.n	80091ae <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00a      	beq.n	800915e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800914e:	2b03      	cmp	r3, #3
 8009150:	d105      	bne.n	800915e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f000 ff53 	bl	800a00a <USBD_CtlSendStatus>
 8009164:	e023      	b.n	80091ae <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800916c:	2b05      	cmp	r3, #5
 800916e:	d11e      	bne.n	80091ae <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009178:	2100      	movs	r1, #0
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f004 f816 	bl	800d1ac <USBD_LL_StallEP>
 8009180:	e015      	b.n	80091ae <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00d      	beq.n	80091aa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009194:	2b03      	cmp	r3, #3
 8009196:	d108      	bne.n	80091aa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	7afa      	ldrb	r2, [r7, #11]
 80091a2:	4611      	mov	r1, r2
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	4798      	blx	r3
 80091a8:	e001      	b.n	80091ae <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80091aa:	2302      	movs	r3, #2
 80091ac:	e000      	b.n	80091b0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3718      	adds	r7, #24
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	460b      	mov	r3, r1
 80091c2:	607a      	str	r2, [r7, #4]
 80091c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80091c6:	7afb      	ldrb	r3, [r7, #11]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d17f      	bne.n	80092cc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	3314      	adds	r3, #20
 80091d0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d15c      	bne.n	8009296 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	68da      	ldr	r2, [r3, #12]
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d915      	bls.n	8009214 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	68da      	ldr	r2, [r3, #12]
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	1ad2      	subs	r2, r2, r3
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	461a      	mov	r2, r3
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f000 fec0 	bl	8009f86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009206:	2300      	movs	r3, #0
 8009208:	2200      	movs	r2, #0
 800920a:	2100      	movs	r1, #0
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f004 f879 	bl	800d304 <USBD_LL_PrepareReceive>
 8009212:	e04e      	b.n	80092b2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	697a      	ldr	r2, [r7, #20]
 800921a:	6912      	ldr	r2, [r2, #16]
 800921c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009220:	fb02 f201 	mul.w	r2, r2, r1
 8009224:	1a9b      	subs	r3, r3, r2
 8009226:	2b00      	cmp	r3, #0
 8009228:	d11c      	bne.n	8009264 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	689a      	ldr	r2, [r3, #8]
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009232:	429a      	cmp	r2, r3
 8009234:	d316      	bcc.n	8009264 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	689a      	ldr	r2, [r3, #8]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009240:	429a      	cmp	r2, r3
 8009242:	d20f      	bcs.n	8009264 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009244:	2200      	movs	r2, #0
 8009246:	2100      	movs	r1, #0
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f000 fe9c 	bl	8009f86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009256:	2300      	movs	r3, #0
 8009258:	2200      	movs	r2, #0
 800925a:	2100      	movs	r1, #0
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f004 f851 	bl	800d304 <USBD_LL_PrepareReceive>
 8009262:	e026      	b.n	80092b2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00a      	beq.n	8009286 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009276:	2b03      	cmp	r3, #3
 8009278:	d105      	bne.n	8009286 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009286:	2180      	movs	r1, #128	; 0x80
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f003 ff8f 	bl	800d1ac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f000 fece 	bl	800a030 <USBD_CtlReceiveStatus>
 8009294:	e00d      	b.n	80092b2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800929c:	2b04      	cmp	r3, #4
 800929e:	d004      	beq.n	80092aa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d103      	bne.n	80092b2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80092aa:	2180      	movs	r1, #128	; 0x80
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f003 ff7d 	bl	800d1ac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d11d      	bne.n	80092f8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f7ff fe81 	bl	8008fc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80092ca:	e015      	b.n	80092f8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092d2:	695b      	ldr	r3, [r3, #20]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00d      	beq.n	80092f4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80092de:	2b03      	cmp	r3, #3
 80092e0:	d108      	bne.n	80092f4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092e8:	695b      	ldr	r3, [r3, #20]
 80092ea:	7afa      	ldrb	r2, [r7, #11]
 80092ec:	4611      	mov	r1, r2
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	4798      	blx	r3
 80092f2:	e001      	b.n	80092f8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80092f4:	2302      	movs	r3, #2
 80092f6:	e000      	b.n	80092fa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800930a:	2340      	movs	r3, #64	; 0x40
 800930c:	2200      	movs	r2, #0
 800930e:	2100      	movs	r1, #0
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f003 ff06 	bl	800d122 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2240      	movs	r2, #64	; 0x40
 8009322:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009326:	2340      	movs	r3, #64	; 0x40
 8009328:	2200      	movs	r2, #0
 800932a:	2180      	movs	r1, #128	; 0x80
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f003 fef8 	bl	800d122 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2240      	movs	r2, #64	; 0x40
 800933c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009362:	2b00      	cmp	r3, #0
 8009364:	d009      	beq.n	800937a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	6852      	ldr	r2, [r2, #4]
 8009372:	b2d2      	uxtb	r2, r2
 8009374:	4611      	mov	r1, r2
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	4798      	blx	r3
  }

  return USBD_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	78fa      	ldrb	r2, [r7, #3]
 8009394:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	bc80      	pop	{r7}
 80093a0:	4770      	bx	lr

080093a2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80093a2:	b480      	push	{r7}
 80093a4:	b083      	sub	sp, #12
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2204      	movs	r2, #4
 80093ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bc80      	pop	{r7}
 80093c8:	4770      	bx	lr

080093ca <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b083      	sub	sp, #12
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d8:	2b04      	cmp	r3, #4
 80093da:	d105      	bne.n	80093e8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bc80      	pop	{r7}
 80093f2:	4770      	bx	lr

080093f4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009402:	2b03      	cmp	r3, #3
 8009404:	d10b      	bne.n	800941e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800940c:	69db      	ldr	r3, [r3, #28]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d005      	beq.n	800941e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800943e:	2b40      	cmp	r3, #64	; 0x40
 8009440:	d005      	beq.n	800944e <USBD_StdDevReq+0x26>
 8009442:	2b40      	cmp	r3, #64	; 0x40
 8009444:	d84f      	bhi.n	80094e6 <USBD_StdDevReq+0xbe>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d009      	beq.n	800945e <USBD_StdDevReq+0x36>
 800944a:	2b20      	cmp	r3, #32
 800944c:	d14b      	bne.n	80094e6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	4798      	blx	r3
      break;
 800945c:	e048      	b.n	80094f0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	785b      	ldrb	r3, [r3, #1]
 8009462:	2b09      	cmp	r3, #9
 8009464:	d839      	bhi.n	80094da <USBD_StdDevReq+0xb2>
 8009466:	a201      	add	r2, pc, #4	; (adr r2, 800946c <USBD_StdDevReq+0x44>)
 8009468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946c:	080094bd 	.word	0x080094bd
 8009470:	080094d1 	.word	0x080094d1
 8009474:	080094db 	.word	0x080094db
 8009478:	080094c7 	.word	0x080094c7
 800947c:	080094db 	.word	0x080094db
 8009480:	0800949f 	.word	0x0800949f
 8009484:	08009495 	.word	0x08009495
 8009488:	080094db 	.word	0x080094db
 800948c:	080094b3 	.word	0x080094b3
 8009490:	080094a9 	.word	0x080094a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f9dc 	bl	8009854 <USBD_GetDescriptor>
          break;
 800949c:	e022      	b.n	80094e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 fb3f 	bl	8009b24 <USBD_SetAddress>
          break;
 80094a6:	e01d      	b.n	80094e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fb7e 	bl	8009bac <USBD_SetConfig>
          break;
 80094b0:	e018      	b.n	80094e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fc07 	bl	8009cc8 <USBD_GetConfig>
          break;
 80094ba:	e013      	b.n	80094e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fc37 	bl	8009d32 <USBD_GetStatus>
          break;
 80094c4:	e00e      	b.n	80094e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80094c6:	6839      	ldr	r1, [r7, #0]
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fc65 	bl	8009d98 <USBD_SetFeature>
          break;
 80094ce:	e009      	b.n	80094e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 fc74 	bl	8009dc0 <USBD_ClrFeature>
          break;
 80094d8:	e004      	b.n	80094e4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 fccc 	bl	8009e7a <USBD_CtlError>
          break;
 80094e2:	bf00      	nop
      }
      break;
 80094e4:	e004      	b.n	80094f0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fcc6 	bl	8009e7a <USBD_CtlError>
      break;
 80094ee:	bf00      	nop
  }

  return ret;
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop

080094fc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009512:	2b40      	cmp	r3, #64	; 0x40
 8009514:	d005      	beq.n	8009522 <USBD_StdItfReq+0x26>
 8009516:	2b40      	cmp	r3, #64	; 0x40
 8009518:	d82e      	bhi.n	8009578 <USBD_StdItfReq+0x7c>
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <USBD_StdItfReq+0x26>
 800951e:	2b20      	cmp	r3, #32
 8009520:	d12a      	bne.n	8009578 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009528:	3b01      	subs	r3, #1
 800952a:	2b02      	cmp	r3, #2
 800952c:	d81d      	bhi.n	800956a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	889b      	ldrh	r3, [r3, #4]
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b01      	cmp	r3, #1
 8009536:	d813      	bhi.n	8009560 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	6839      	ldr	r1, [r7, #0]
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	4798      	blx	r3
 8009546:	4603      	mov	r3, r0
 8009548:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	88db      	ldrh	r3, [r3, #6]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d110      	bne.n	8009574 <USBD_StdItfReq+0x78>
 8009552:	7bfb      	ldrb	r3, [r7, #15]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10d      	bne.n	8009574 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fd56 	bl	800a00a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800955e:	e009      	b.n	8009574 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fc89 	bl	8009e7a <USBD_CtlError>
          break;
 8009568:	e004      	b.n	8009574 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fc84 	bl	8009e7a <USBD_CtlError>
          break;
 8009572:	e000      	b.n	8009576 <USBD_StdItfReq+0x7a>
          break;
 8009574:	bf00      	nop
      }
      break;
 8009576:	e004      	b.n	8009582 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fc7d 	bl	8009e7a <USBD_CtlError>
      break;
 8009580:	bf00      	nop
  }

  return USBD_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	889b      	ldrh	r3, [r3, #4]
 800959e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095a8:	2b40      	cmp	r3, #64	; 0x40
 80095aa:	d007      	beq.n	80095bc <USBD_StdEPReq+0x30>
 80095ac:	2b40      	cmp	r3, #64	; 0x40
 80095ae:	f200 8146 	bhi.w	800983e <USBD_StdEPReq+0x2b2>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00a      	beq.n	80095cc <USBD_StdEPReq+0x40>
 80095b6:	2b20      	cmp	r3, #32
 80095b8:	f040 8141 	bne.w	800983e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	4798      	blx	r3
      break;
 80095ca:	e13d      	b.n	8009848 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095d4:	2b20      	cmp	r3, #32
 80095d6:	d10a      	bne.n	80095ee <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	4798      	blx	r3
 80095e6:	4603      	mov	r3, r0
 80095e8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
 80095ec:	e12d      	b.n	800984a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	785b      	ldrb	r3, [r3, #1]
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d007      	beq.n	8009606 <USBD_StdEPReq+0x7a>
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	f300 811b 	bgt.w	8009832 <USBD_StdEPReq+0x2a6>
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d072      	beq.n	80096e6 <USBD_StdEPReq+0x15a>
 8009600:	2b01      	cmp	r3, #1
 8009602:	d03a      	beq.n	800967a <USBD_StdEPReq+0xee>
 8009604:	e115      	b.n	8009832 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800960c:	2b02      	cmp	r3, #2
 800960e:	d002      	beq.n	8009616 <USBD_StdEPReq+0x8a>
 8009610:	2b03      	cmp	r3, #3
 8009612:	d015      	beq.n	8009640 <USBD_StdEPReq+0xb4>
 8009614:	e02b      	b.n	800966e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009616:	7bbb      	ldrb	r3, [r7, #14]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00c      	beq.n	8009636 <USBD_StdEPReq+0xaa>
 800961c:	7bbb      	ldrb	r3, [r7, #14]
 800961e:	2b80      	cmp	r3, #128	; 0x80
 8009620:	d009      	beq.n	8009636 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009622:	7bbb      	ldrb	r3, [r7, #14]
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f003 fdc0 	bl	800d1ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800962c:	2180      	movs	r1, #128	; 0x80
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f003 fdbc 	bl	800d1ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009634:	e020      	b.n	8009678 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009636:	6839      	ldr	r1, [r7, #0]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fc1e 	bl	8009e7a <USBD_CtlError>
              break;
 800963e:	e01b      	b.n	8009678 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	885b      	ldrh	r3, [r3, #2]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10e      	bne.n	8009666 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009648:	7bbb      	ldrb	r3, [r7, #14]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00b      	beq.n	8009666 <USBD_StdEPReq+0xda>
 800964e:	7bbb      	ldrb	r3, [r7, #14]
 8009650:	2b80      	cmp	r3, #128	; 0x80
 8009652:	d008      	beq.n	8009666 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	88db      	ldrh	r3, [r3, #6]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d104      	bne.n	8009666 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800965c:	7bbb      	ldrb	r3, [r7, #14]
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f003 fda3 	bl	800d1ac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fccf 	bl	800a00a <USBD_CtlSendStatus>

              break;
 800966c:	e004      	b.n	8009678 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fc02 	bl	8009e7a <USBD_CtlError>
              break;
 8009676:	bf00      	nop
          }
          break;
 8009678:	e0e0      	b.n	800983c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009680:	2b02      	cmp	r3, #2
 8009682:	d002      	beq.n	800968a <USBD_StdEPReq+0xfe>
 8009684:	2b03      	cmp	r3, #3
 8009686:	d015      	beq.n	80096b4 <USBD_StdEPReq+0x128>
 8009688:	e026      	b.n	80096d8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800968a:	7bbb      	ldrb	r3, [r7, #14]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00c      	beq.n	80096aa <USBD_StdEPReq+0x11e>
 8009690:	7bbb      	ldrb	r3, [r7, #14]
 8009692:	2b80      	cmp	r3, #128	; 0x80
 8009694:	d009      	beq.n	80096aa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009696:	7bbb      	ldrb	r3, [r7, #14]
 8009698:	4619      	mov	r1, r3
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f003 fd86 	bl	800d1ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80096a0:	2180      	movs	r1, #128	; 0x80
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f003 fd82 	bl	800d1ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096a8:	e01c      	b.n	80096e4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fbe4 	bl	8009e7a <USBD_CtlError>
              break;
 80096b2:	e017      	b.n	80096e4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	885b      	ldrh	r3, [r3, #2]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d112      	bne.n	80096e2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d004      	beq.n	80096d0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
 80096c8:	4619      	mov	r1, r3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f003 fd8d 	bl	800d1ea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fc9a 	bl	800a00a <USBD_CtlSendStatus>
              }
              break;
 80096d6:	e004      	b.n	80096e2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fbcd 	bl	8009e7a <USBD_CtlError>
              break;
 80096e0:	e000      	b.n	80096e4 <USBD_StdEPReq+0x158>
              break;
 80096e2:	bf00      	nop
          }
          break;
 80096e4:	e0aa      	b.n	800983c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d002      	beq.n	80096f6 <USBD_StdEPReq+0x16a>
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d032      	beq.n	800975a <USBD_StdEPReq+0x1ce>
 80096f4:	e097      	b.n	8009826 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d007      	beq.n	800970c <USBD_StdEPReq+0x180>
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
 80096fe:	2b80      	cmp	r3, #128	; 0x80
 8009700:	d004      	beq.n	800970c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fbb8 	bl	8009e7a <USBD_CtlError>
                break;
 800970a:	e091      	b.n	8009830 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800970c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009710:	2b00      	cmp	r3, #0
 8009712:	da0b      	bge.n	800972c <USBD_StdEPReq+0x1a0>
 8009714:	7bbb      	ldrb	r3, [r7, #14]
 8009716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800971a:	4613      	mov	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	3310      	adds	r3, #16
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	4413      	add	r3, r2
 8009728:	3304      	adds	r3, #4
 800972a:	e00b      	b.n	8009744 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800972c:	7bbb      	ldrb	r3, [r7, #14]
 800972e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009732:	4613      	mov	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4413      	add	r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	4413      	add	r3, r2
 8009742:	3304      	adds	r3, #4
 8009744:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	2200      	movs	r2, #0
 800974a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	2202      	movs	r2, #2
 8009750:	4619      	mov	r1, r3
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 fbfb 	bl	8009f4e <USBD_CtlSendData>
              break;
 8009758:	e06a      	b.n	8009830 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800975a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800975e:	2b00      	cmp	r3, #0
 8009760:	da11      	bge.n	8009786 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009762:	7bbb      	ldrb	r3, [r7, #14]
 8009764:	f003 020f 	and.w	r2, r3, #15
 8009768:	6879      	ldr	r1, [r7, #4]
 800976a:	4613      	mov	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	440b      	add	r3, r1
 8009774:	3318      	adds	r3, #24
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d117      	bne.n	80097ac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fb7b 	bl	8009e7a <USBD_CtlError>
                  break;
 8009784:	e054      	b.n	8009830 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009786:	7bbb      	ldrb	r3, [r7, #14]
 8009788:	f003 020f 	and.w	r2, r3, #15
 800978c:	6879      	ldr	r1, [r7, #4]
 800978e:	4613      	mov	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	440b      	add	r3, r1
 8009798:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d104      	bne.n	80097ac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fb68 	bl	8009e7a <USBD_CtlError>
                  break;
 80097aa:	e041      	b.n	8009830 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	da0b      	bge.n	80097cc <USBD_StdEPReq+0x240>
 80097b4:	7bbb      	ldrb	r3, [r7, #14]
 80097b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097ba:	4613      	mov	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	3310      	adds	r3, #16
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	4413      	add	r3, r2
 80097c8:	3304      	adds	r3, #4
 80097ca:	e00b      	b.n	80097e4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
 80097ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097d2:	4613      	mov	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	4413      	add	r3, r2
 80097e2:	3304      	adds	r3, #4
 80097e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80097e6:	7bbb      	ldrb	r3, [r7, #14]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d002      	beq.n	80097f2 <USBD_StdEPReq+0x266>
 80097ec:	7bbb      	ldrb	r3, [r7, #14]
 80097ee:	2b80      	cmp	r3, #128	; 0x80
 80097f0:	d103      	bne.n	80097fa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	2200      	movs	r2, #0
 80097f6:	601a      	str	r2, [r3, #0]
 80097f8:	e00e      	b.n	8009818 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80097fa:	7bbb      	ldrb	r3, [r7, #14]
 80097fc:	4619      	mov	r1, r3
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f003 fd12 	bl	800d228 <USBD_LL_IsStallEP>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d003      	beq.n	8009812 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	2201      	movs	r2, #1
 800980e:	601a      	str	r2, [r3, #0]
 8009810:	e002      	b.n	8009818 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	2200      	movs	r2, #0
 8009816:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2202      	movs	r2, #2
 800981c:	4619      	mov	r1, r3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fb95 	bl	8009f4e <USBD_CtlSendData>
              break;
 8009824:	e004      	b.n	8009830 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009826:	6839      	ldr	r1, [r7, #0]
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fb26 	bl	8009e7a <USBD_CtlError>
              break;
 800982e:	bf00      	nop
          }
          break;
 8009830:	e004      	b.n	800983c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fb20 	bl	8009e7a <USBD_CtlError>
          break;
 800983a:	bf00      	nop
      }
      break;
 800983c:	e004      	b.n	8009848 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fb1a 	bl	8009e7a <USBD_CtlError>
      break;
 8009846:	bf00      	nop
  }

  return ret;
 8009848:	7bfb      	ldrb	r3, [r7, #15]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
	...

08009854 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800985e:	2300      	movs	r3, #0
 8009860:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009862:	2300      	movs	r3, #0
 8009864:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009866:	2300      	movs	r3, #0
 8009868:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	885b      	ldrh	r3, [r3, #2]
 800986e:	0a1b      	lsrs	r3, r3, #8
 8009870:	b29b      	uxth	r3, r3
 8009872:	3b01      	subs	r3, #1
 8009874:	2b06      	cmp	r3, #6
 8009876:	f200 8128 	bhi.w	8009aca <USBD_GetDescriptor+0x276>
 800987a:	a201      	add	r2, pc, #4	; (adr r2, 8009880 <USBD_GetDescriptor+0x2c>)
 800987c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009880:	0800989d 	.word	0x0800989d
 8009884:	080098b5 	.word	0x080098b5
 8009888:	080098f5 	.word	0x080098f5
 800988c:	08009acb 	.word	0x08009acb
 8009890:	08009acb 	.word	0x08009acb
 8009894:	08009a6b 	.word	0x08009a6b
 8009898:	08009a97 	.word	0x08009a97
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	7c12      	ldrb	r2, [r2, #16]
 80098a8:	f107 0108 	add.w	r1, r7, #8
 80098ac:	4610      	mov	r0, r2
 80098ae:	4798      	blx	r3
 80098b0:	60f8      	str	r0, [r7, #12]
      break;
 80098b2:	e112      	b.n	8009ada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	7c1b      	ldrb	r3, [r3, #16]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d10d      	bne.n	80098d8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c4:	f107 0208 	add.w	r2, r7, #8
 80098c8:	4610      	mov	r0, r2
 80098ca:	4798      	blx	r3
 80098cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3301      	adds	r3, #1
 80098d2:	2202      	movs	r2, #2
 80098d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80098d6:	e100      	b.n	8009ada <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	f107 0208 	add.w	r2, r7, #8
 80098e4:	4610      	mov	r0, r2
 80098e6:	4798      	blx	r3
 80098e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3301      	adds	r3, #1
 80098ee:	2202      	movs	r2, #2
 80098f0:	701a      	strb	r2, [r3, #0]
      break;
 80098f2:	e0f2      	b.n	8009ada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	885b      	ldrh	r3, [r3, #2]
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2b05      	cmp	r3, #5
 80098fc:	f200 80ac 	bhi.w	8009a58 <USBD_GetDescriptor+0x204>
 8009900:	a201      	add	r2, pc, #4	; (adr r2, 8009908 <USBD_GetDescriptor+0xb4>)
 8009902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009906:	bf00      	nop
 8009908:	08009921 	.word	0x08009921
 800990c:	08009955 	.word	0x08009955
 8009910:	08009989 	.word	0x08009989
 8009914:	080099bd 	.word	0x080099bd
 8009918:	080099f1 	.word	0x080099f1
 800991c:	08009a25 	.word	0x08009a25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00b      	beq.n	8009944 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	7c12      	ldrb	r2, [r2, #16]
 8009938:	f107 0108 	add.w	r1, r7, #8
 800993c:	4610      	mov	r0, r2
 800993e:	4798      	blx	r3
 8009940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009942:	e091      	b.n	8009a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009944:	6839      	ldr	r1, [r7, #0]
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 fa97 	bl	8009e7a <USBD_CtlError>
            err++;
 800994c:	7afb      	ldrb	r3, [r7, #11]
 800994e:	3301      	adds	r3, #1
 8009950:	72fb      	strb	r3, [r7, #11]
          break;
 8009952:	e089      	b.n	8009a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00b      	beq.n	8009978 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	7c12      	ldrb	r2, [r2, #16]
 800996c:	f107 0108 	add.w	r1, r7, #8
 8009970:	4610      	mov	r0, r2
 8009972:	4798      	blx	r3
 8009974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009976:	e077      	b.n	8009a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fa7d 	bl	8009e7a <USBD_CtlError>
            err++;
 8009980:	7afb      	ldrb	r3, [r7, #11]
 8009982:	3301      	adds	r3, #1
 8009984:	72fb      	strb	r3, [r7, #11]
          break;
 8009986:	e06f      	b.n	8009a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00b      	beq.n	80099ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	7c12      	ldrb	r2, [r2, #16]
 80099a0:	f107 0108 	add.w	r1, r7, #8
 80099a4:	4610      	mov	r0, r2
 80099a6:	4798      	blx	r3
 80099a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099aa:	e05d      	b.n	8009a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fa63 	bl	8009e7a <USBD_CtlError>
            err++;
 80099b4:	7afb      	ldrb	r3, [r7, #11]
 80099b6:	3301      	adds	r3, #1
 80099b8:	72fb      	strb	r3, [r7, #11]
          break;
 80099ba:	e055      	b.n	8009a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00b      	beq.n	80099e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	7c12      	ldrb	r2, [r2, #16]
 80099d4:	f107 0108 	add.w	r1, r7, #8
 80099d8:	4610      	mov	r0, r2
 80099da:	4798      	blx	r3
 80099dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099de:	e043      	b.n	8009a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fa49 	bl	8009e7a <USBD_CtlError>
            err++;
 80099e8:	7afb      	ldrb	r3, [r7, #11]
 80099ea:	3301      	adds	r3, #1
 80099ec:	72fb      	strb	r3, [r7, #11]
          break;
 80099ee:	e03b      	b.n	8009a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099f6:	695b      	ldr	r3, [r3, #20]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00b      	beq.n	8009a14 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a02:	695b      	ldr	r3, [r3, #20]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	7c12      	ldrb	r2, [r2, #16]
 8009a08:	f107 0108 	add.w	r1, r7, #8
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	4798      	blx	r3
 8009a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a12:	e029      	b.n	8009a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a14:	6839      	ldr	r1, [r7, #0]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 fa2f 	bl	8009e7a <USBD_CtlError>
            err++;
 8009a1c:	7afb      	ldrb	r3, [r7, #11]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	72fb      	strb	r3, [r7, #11]
          break;
 8009a22:	e021      	b.n	8009a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00b      	beq.n	8009a48 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	7c12      	ldrb	r2, [r2, #16]
 8009a3c:	f107 0108 	add.w	r1, r7, #8
 8009a40:	4610      	mov	r0, r2
 8009a42:	4798      	blx	r3
 8009a44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a46:	e00f      	b.n	8009a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a48:	6839      	ldr	r1, [r7, #0]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fa15 	bl	8009e7a <USBD_CtlError>
            err++;
 8009a50:	7afb      	ldrb	r3, [r7, #11]
 8009a52:	3301      	adds	r3, #1
 8009a54:	72fb      	strb	r3, [r7, #11]
          break;
 8009a56:	e007      	b.n	8009a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fa0d 	bl	8009e7a <USBD_CtlError>
          err++;
 8009a60:	7afb      	ldrb	r3, [r7, #11]
 8009a62:	3301      	adds	r3, #1
 8009a64:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009a66:	e038      	b.n	8009ada <USBD_GetDescriptor+0x286>
 8009a68:	e037      	b.n	8009ada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	7c1b      	ldrb	r3, [r3, #16]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d109      	bne.n	8009a86 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7a:	f107 0208 	add.w	r2, r7, #8
 8009a7e:	4610      	mov	r0, r2
 8009a80:	4798      	blx	r3
 8009a82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a84:	e029      	b.n	8009ada <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f9f6 	bl	8009e7a <USBD_CtlError>
        err++;
 8009a8e:	7afb      	ldrb	r3, [r7, #11]
 8009a90:	3301      	adds	r3, #1
 8009a92:	72fb      	strb	r3, [r7, #11]
      break;
 8009a94:	e021      	b.n	8009ada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	7c1b      	ldrb	r3, [r3, #16]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d10d      	bne.n	8009aba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa6:	f107 0208 	add.w	r2, r7, #8
 8009aaa:	4610      	mov	r0, r2
 8009aac:	4798      	blx	r3
 8009aae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	2207      	movs	r2, #7
 8009ab6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ab8:	e00f      	b.n	8009ada <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f9dc 	bl	8009e7a <USBD_CtlError>
        err++;
 8009ac2:	7afb      	ldrb	r3, [r7, #11]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ac8:	e007      	b.n	8009ada <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 f9d4 	bl	8009e7a <USBD_CtlError>
      err++;
 8009ad2:	7afb      	ldrb	r3, [r7, #11]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ad8:	bf00      	nop
  }

  if (err != 0U)
 8009ada:	7afb      	ldrb	r3, [r7, #11]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d11c      	bne.n	8009b1a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009ae0:	893b      	ldrh	r3, [r7, #8]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d011      	beq.n	8009b0a <USBD_GetDescriptor+0x2b6>
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	88db      	ldrh	r3, [r3, #6]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00d      	beq.n	8009b0a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	88da      	ldrh	r2, [r3, #6]
 8009af2:	893b      	ldrh	r3, [r7, #8]
 8009af4:	4293      	cmp	r3, r2
 8009af6:	bf28      	it	cs
 8009af8:	4613      	movcs	r3, r2
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009afe:	893b      	ldrh	r3, [r7, #8]
 8009b00:	461a      	mov	r2, r3
 8009b02:	68f9      	ldr	r1, [r7, #12]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 fa22 	bl	8009f4e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	88db      	ldrh	r3, [r3, #6]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d104      	bne.n	8009b1c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fa79 	bl	800a00a <USBD_CtlSendStatus>
 8009b18:	e000      	b.n	8009b1c <USBD_GetDescriptor+0x2c8>
    return;
 8009b1a:	bf00      	nop
    }
  }
}
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop

08009b24 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	889b      	ldrh	r3, [r3, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d130      	bne.n	8009b98 <USBD_SetAddress+0x74>
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	88db      	ldrh	r3, [r3, #6]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d12c      	bne.n	8009b98 <USBD_SetAddress+0x74>
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	885b      	ldrh	r3, [r3, #2]
 8009b42:	2b7f      	cmp	r3, #127	; 0x7f
 8009b44:	d828      	bhi.n	8009b98 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	885b      	ldrh	r3, [r3, #2]
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b58:	2b03      	cmp	r3, #3
 8009b5a:	d104      	bne.n	8009b66 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f98b 	bl	8009e7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b64:	e01d      	b.n	8009ba2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	7bfa      	ldrb	r2, [r7, #15]
 8009b6a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
 8009b70:	4619      	mov	r1, r3
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f003 fb84 	bl	800d280 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 fa46 	bl	800a00a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d004      	beq.n	8009b8e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2202      	movs	r2, #2
 8009b88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b8c:	e009      	b.n	8009ba2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b96:	e004      	b.n	8009ba2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b98:	6839      	ldr	r1, [r7, #0]
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f96d 	bl	8009e7a <USBD_CtlError>
  }
}
 8009ba0:	bf00      	nop
 8009ba2:	bf00      	nop
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
	...

08009bac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	885b      	ldrh	r3, [r3, #2]
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	4b41      	ldr	r3, [pc, #260]	; (8009cc4 <USBD_SetConfig+0x118>)
 8009bbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009bc0:	4b40      	ldr	r3, [pc, #256]	; (8009cc4 <USBD_SetConfig+0x118>)
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d904      	bls.n	8009bd2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009bc8:	6839      	ldr	r1, [r7, #0]
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f955 	bl	8009e7a <USBD_CtlError>
 8009bd0:	e075      	b.n	8009cbe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d002      	beq.n	8009be2 <USBD_SetConfig+0x36>
 8009bdc:	2b03      	cmp	r3, #3
 8009bde:	d023      	beq.n	8009c28 <USBD_SetConfig+0x7c>
 8009be0:	e062      	b.n	8009ca8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009be2:	4b38      	ldr	r3, [pc, #224]	; (8009cc4 <USBD_SetConfig+0x118>)
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d01a      	beq.n	8009c20 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009bea:	4b36      	ldr	r3, [pc, #216]	; (8009cc4 <USBD_SetConfig+0x118>)
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2203      	movs	r2, #3
 8009bf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009bfc:	4b31      	ldr	r3, [pc, #196]	; (8009cc4 <USBD_SetConfig+0x118>)
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	4619      	mov	r1, r3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff f9e8 	bl	8008fd8 <USBD_SetClassConfig>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d104      	bne.n	8009c18 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f932 	bl	8009e7a <USBD_CtlError>
            return;
 8009c16:	e052      	b.n	8009cbe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f9f6 	bl	800a00a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009c1e:	e04e      	b.n	8009cbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f9f2 	bl	800a00a <USBD_CtlSendStatus>
        break;
 8009c26:	e04a      	b.n	8009cbe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009c28:	4b26      	ldr	r3, [pc, #152]	; (8009cc4 <USBD_SetConfig+0x118>)
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d112      	bne.n	8009c56 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2202      	movs	r2, #2
 8009c34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009c38:	4b22      	ldr	r3, [pc, #136]	; (8009cc4 <USBD_SetConfig+0x118>)
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009c42:	4b20      	ldr	r3, [pc, #128]	; (8009cc4 <USBD_SetConfig+0x118>)
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7ff f9e4 	bl	8009016 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f9db 	bl	800a00a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009c54:	e033      	b.n	8009cbe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009c56:	4b1b      	ldr	r3, [pc, #108]	; (8009cc4 <USBD_SetConfig+0x118>)
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d01d      	beq.n	8009ca0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7ff f9d2 	bl	8009016 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009c72:	4b14      	ldr	r3, [pc, #80]	; (8009cc4 <USBD_SetConfig+0x118>)
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	461a      	mov	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009c7c:	4b11      	ldr	r3, [pc, #68]	; (8009cc4 <USBD_SetConfig+0x118>)
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	4619      	mov	r1, r3
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f7ff f9a8 	bl	8008fd8 <USBD_SetClassConfig>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d104      	bne.n	8009c98 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 f8f2 	bl	8009e7a <USBD_CtlError>
            return;
 8009c96:	e012      	b.n	8009cbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f9b6 	bl	800a00a <USBD_CtlSendStatus>
        break;
 8009c9e:	e00e      	b.n	8009cbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f9b2 	bl	800a00a <USBD_CtlSendStatus>
        break;
 8009ca6:	e00a      	b.n	8009cbe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f8e5 	bl	8009e7a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009cb0:	4b04      	ldr	r3, [pc, #16]	; (8009cc4 <USBD_SetConfig+0x118>)
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7ff f9ad 	bl	8009016 <USBD_ClrClassConfig>
        break;
 8009cbc:	bf00      	nop
    }
  }
}
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	20000220 	.word	0x20000220

08009cc8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	88db      	ldrh	r3, [r3, #6]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d004      	beq.n	8009ce4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f8cc 	bl	8009e7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ce2:	e022      	b.n	8009d2a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	dc02      	bgt.n	8009cf4 <USBD_GetConfig+0x2c>
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	dc03      	bgt.n	8009cfa <USBD_GetConfig+0x32>
 8009cf2:	e015      	b.n	8009d20 <USBD_GetConfig+0x58>
 8009cf4:	2b03      	cmp	r3, #3
 8009cf6:	d00b      	beq.n	8009d10 <USBD_GetConfig+0x48>
 8009cf8:	e012      	b.n	8009d20 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	3308      	adds	r3, #8
 8009d04:	2201      	movs	r2, #1
 8009d06:	4619      	mov	r1, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 f920 	bl	8009f4e <USBD_CtlSendData>
        break;
 8009d0e:	e00c      	b.n	8009d2a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	3304      	adds	r3, #4
 8009d14:	2201      	movs	r2, #1
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f918 	bl	8009f4e <USBD_CtlSendData>
        break;
 8009d1e:	e004      	b.n	8009d2a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f8a9 	bl	8009e7a <USBD_CtlError>
        break;
 8009d28:	bf00      	nop
}
 8009d2a:	bf00      	nop
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b082      	sub	sp, #8
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
 8009d3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d42:	3b01      	subs	r3, #1
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	d81e      	bhi.n	8009d86 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	88db      	ldrh	r3, [r3, #6]
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d004      	beq.n	8009d5a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f891 	bl	8009e7a <USBD_CtlError>
        break;
 8009d58:	e01a      	b.n	8009d90 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d005      	beq.n	8009d76 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	f043 0202 	orr.w	r2, r3, #2
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	330c      	adds	r3, #12
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f8e5 	bl	8009f4e <USBD_CtlSendData>
      break;
 8009d84:	e004      	b.n	8009d90 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f876 	bl	8009e7a <USBD_CtlError>
      break;
 8009d8e:	bf00      	nop
  }
}
 8009d90:	bf00      	nop
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	885b      	ldrh	r3, [r3, #2]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d106      	bne.n	8009db8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f929 	bl	800a00a <USBD_CtlSendStatus>
  }
}
 8009db8:	bf00      	nop
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d80b      	bhi.n	8009dee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	885b      	ldrh	r3, [r3, #2]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d10c      	bne.n	8009df8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f90f 	bl	800a00a <USBD_CtlSendStatus>
      }
      break;
 8009dec:	e004      	b.n	8009df8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 f842 	bl	8009e7a <USBD_CtlError>
      break;
 8009df6:	e000      	b.n	8009dfa <USBD_ClrFeature+0x3a>
      break;
 8009df8:	bf00      	nop
  }
}
 8009dfa:	bf00      	nop
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e02:	b480      	push	{r7}
 8009e04:	b083      	sub	sp, #12
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	781a      	ldrb	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	785a      	ldrb	r2, [r3, #1]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	3302      	adds	r3, #2
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	3303      	adds	r3, #3
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	021b      	lsls	r3, r3, #8
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	4413      	add	r3, r2
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	b29a      	uxth	r2, r3
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	3305      	adds	r3, #5
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	021b      	lsls	r3, r3, #8
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	4413      	add	r3, r2
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	3306      	adds	r3, #6
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	3307      	adds	r3, #7
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	021b      	lsls	r3, r3, #8
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	4413      	add	r3, r2
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	80da      	strh	r2, [r3, #6]

}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bc80      	pop	{r7}
 8009e78:	4770      	bx	lr

08009e7a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b082      	sub	sp, #8
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009e84:	2180      	movs	r1, #128	; 0x80
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f003 f990 	bl	800d1ac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f003 f98c 	bl	800d1ac <USBD_LL_StallEP>
}
 8009e94:	bf00      	nop
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b086      	sub	sp, #24
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d032      	beq.n	8009f18 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f000 f834 	bl	8009f20 <USBD_GetLen>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	3301      	adds	r3, #1
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	005b      	lsls	r3, r3, #1
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009ec6:	7dfb      	ldrb	r3, [r7, #23]
 8009ec8:	1c5a      	adds	r2, r3, #1
 8009eca:	75fa      	strb	r2, [r7, #23]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	7812      	ldrb	r2, [r2, #0]
 8009ed6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009ed8:	7dfb      	ldrb	r3, [r7, #23]
 8009eda:	1c5a      	adds	r2, r3, #1
 8009edc:	75fa      	strb	r2, [r7, #23]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	2203      	movs	r2, #3
 8009ee6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009ee8:	e012      	b.n	8009f10 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	1c5a      	adds	r2, r3, #1
 8009eee:	60fa      	str	r2, [r7, #12]
 8009ef0:	7dfa      	ldrb	r2, [r7, #23]
 8009ef2:	1c51      	adds	r1, r2, #1
 8009ef4:	75f9      	strb	r1, [r7, #23]
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	440a      	add	r2, r1
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009f00:	7dfb      	ldrb	r3, [r7, #23]
 8009f02:	1c5a      	adds	r2, r3, #1
 8009f04:	75fa      	strb	r2, [r7, #23]
 8009f06:	461a      	mov	r2, r3
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1e8      	bne.n	8009eea <USBD_GetString+0x4e>
    }
  }
}
 8009f18:	bf00      	nop
 8009f1a:	3718      	adds	r7, #24
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009f2c:	e005      	b.n	8009f3a <USBD_GetLen+0x1a>
  {
    len++;
 8009f2e:	7bfb      	ldrb	r3, [r7, #15]
 8009f30:	3301      	adds	r3, #1
 8009f32:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	3301      	adds	r3, #1
 8009f38:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1f5      	bne.n	8009f2e <USBD_GetLen+0xe>
  }

  return len;
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bc80      	pop	{r7}
 8009f4c:	4770      	bx	lr

08009f4e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b084      	sub	sp, #16
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	60f8      	str	r0, [r7, #12]
 8009f56:	60b9      	str	r1, [r7, #8]
 8009f58:	4613      	mov	r3, r2
 8009f5a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2202      	movs	r2, #2
 8009f60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009f64:	88fa      	ldrh	r2, [r7, #6]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009f6a:	88fa      	ldrh	r2, [r7, #6]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f70:	88fb      	ldrh	r3, [r7, #6]
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	2100      	movs	r1, #0
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f003 f9a1 	bl	800d2be <USBD_LL_Transmit>

  return USBD_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b084      	sub	sp, #16
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	60f8      	str	r0, [r7, #12]
 8009f8e:	60b9      	str	r1, [r7, #8]
 8009f90:	4613      	mov	r3, r2
 8009f92:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f94:	88fb      	ldrh	r3, [r7, #6]
 8009f96:	68ba      	ldr	r2, [r7, #8]
 8009f98:	2100      	movs	r1, #0
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f003 f98f 	bl	800d2be <USBD_LL_Transmit>

  return USBD_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b084      	sub	sp, #16
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	60f8      	str	r0, [r7, #12]
 8009fb2:	60b9      	str	r1, [r7, #8]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2203      	movs	r2, #3
 8009fbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009fc0:	88fa      	ldrh	r2, [r7, #6]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009fc8:	88fa      	ldrh	r2, [r7, #6]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009fd0:	88fb      	ldrh	r3, [r7, #6]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f003 f994 	bl	800d304 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b084      	sub	sp, #16
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	60f8      	str	r0, [r7, #12]
 8009fee:	60b9      	str	r1, [r7, #8]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ff4:	88fb      	ldrh	r3, [r7, #6]
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f003 f982 	bl	800d304 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b082      	sub	sp, #8
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2204      	movs	r2, #4
 800a016:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a01a:	2300      	movs	r3, #0
 800a01c:	2200      	movs	r2, #0
 800a01e:	2100      	movs	r1, #0
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f003 f94c 	bl	800d2be <USBD_LL_Transmit>

  return USBD_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2205      	movs	r2, #5
 800a03c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a040:	2300      	movs	r3, #0
 800a042:	2200      	movs	r2, #0
 800a044:	2100      	movs	r1, #0
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f003 f95c 	bl	800d304 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
	...

0800a058 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a058:	b480      	push	{r7}
 800a05a:	b087      	sub	sp, #28
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	4613      	mov	r3, r2
 800a064:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a066:	2301      	movs	r3, #1
 800a068:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800a06e:	4b1e      	ldr	r3, [pc, #120]	; (800a0e8 <FATFS_LinkDriverEx+0x90>)
 800a070:	7a5b      	ldrb	r3, [r3, #9]
 800a072:	b2db      	uxtb	r3, r3
 800a074:	2b01      	cmp	r3, #1
 800a076:	d831      	bhi.n	800a0dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a078:	4b1b      	ldr	r3, [pc, #108]	; (800a0e8 <FATFS_LinkDriverEx+0x90>)
 800a07a:	7a5b      	ldrb	r3, [r3, #9]
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	461a      	mov	r2, r3
 800a080:	4b19      	ldr	r3, [pc, #100]	; (800a0e8 <FATFS_LinkDriverEx+0x90>)
 800a082:	2100      	movs	r1, #0
 800a084:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800a086:	4b18      	ldr	r3, [pc, #96]	; (800a0e8 <FATFS_LinkDriverEx+0x90>)
 800a088:	7a5b      	ldrb	r3, [r3, #9]
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	4a16      	ldr	r2, [pc, #88]	; (800a0e8 <FATFS_LinkDriverEx+0x90>)
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800a096:	4b14      	ldr	r3, [pc, #80]	; (800a0e8 <FATFS_LinkDriverEx+0x90>)
 800a098:	7a5b      	ldrb	r3, [r3, #9]
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	461a      	mov	r2, r3
 800a09e:	4b12      	ldr	r3, [pc, #72]	; (800a0e8 <FATFS_LinkDriverEx+0x90>)
 800a0a0:	4413      	add	r3, r2
 800a0a2:	79fa      	ldrb	r2, [r7, #7]
 800a0a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a0a6:	4b10      	ldr	r3, [pc, #64]	; (800a0e8 <FATFS_LinkDriverEx+0x90>)
 800a0a8:	7a5b      	ldrb	r3, [r3, #9]
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	1c5a      	adds	r2, r3, #1
 800a0ae:	b2d1      	uxtb	r1, r2
 800a0b0:	4a0d      	ldr	r2, [pc, #52]	; (800a0e8 <FATFS_LinkDriverEx+0x90>)
 800a0b2:	7251      	strb	r1, [r2, #9]
 800a0b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a0b6:	7dbb      	ldrb	r3, [r7, #22]
 800a0b8:	3330      	adds	r3, #48	; 0x30
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	223a      	movs	r2, #58	; 0x3a
 800a0c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	3302      	adds	r3, #2
 800a0cc:	222f      	movs	r2, #47	; 0x2f
 800a0ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	3303      	adds	r3, #3
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800a0dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	371c      	adds	r7, #28
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bc80      	pop	{r7}
 800a0e6:	4770      	bx	lr
 800a0e8:	20000224 	.word	0x20000224

0800a0ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f7ff ffac 	bl	800a058 <FATFS_LinkDriverEx>
 800a100:	4603      	mov	r3, r0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
	...

0800a10c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a112:	f3ef 8305 	mrs	r3, IPSR
 800a116:	60bb      	str	r3, [r7, #8]
  return(result);
 800a118:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d10f      	bne.n	800a13e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a11e:	f3ef 8310 	mrs	r3, PRIMASK
 800a122:	607b      	str	r3, [r7, #4]
  return(result);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d109      	bne.n	800a13e <osKernelInitialize+0x32>
 800a12a:	4b10      	ldr	r3, [pc, #64]	; (800a16c <osKernelInitialize+0x60>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d109      	bne.n	800a146 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a132:	f3ef 8311 	mrs	r3, BASEPRI
 800a136:	603b      	str	r3, [r7, #0]
  return(result);
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d003      	beq.n	800a146 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a13e:	f06f 0305 	mvn.w	r3, #5
 800a142:	60fb      	str	r3, [r7, #12]
 800a144:	e00c      	b.n	800a160 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a146:	4b09      	ldr	r3, [pc, #36]	; (800a16c <osKernelInitialize+0x60>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d105      	bne.n	800a15a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800a14e:	4b07      	ldr	r3, [pc, #28]	; (800a16c <osKernelInitialize+0x60>)
 800a150:	2201      	movs	r2, #1
 800a152:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a154:	2300      	movs	r3, #0
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	e002      	b.n	800a160 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a15a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a15e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a160:	68fb      	ldr	r3, [r7, #12]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3714      	adds	r7, #20
 800a166:	46bd      	mov	sp, r7
 800a168:	bc80      	pop	{r7}
 800a16a:	4770      	bx	lr
 800a16c:	20000230 	.word	0x20000230

0800a170 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a176:	f3ef 8305 	mrs	r3, IPSR
 800a17a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a17c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10f      	bne.n	800a1a2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a182:	f3ef 8310 	mrs	r3, PRIMASK
 800a186:	607b      	str	r3, [r7, #4]
  return(result);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d109      	bne.n	800a1a2 <osKernelStart+0x32>
 800a18e:	4b11      	ldr	r3, [pc, #68]	; (800a1d4 <osKernelStart+0x64>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b02      	cmp	r3, #2
 800a194:	d109      	bne.n	800a1aa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a196:	f3ef 8311 	mrs	r3, BASEPRI
 800a19a:	603b      	str	r3, [r7, #0]
  return(result);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d003      	beq.n	800a1aa <osKernelStart+0x3a>
    stat = osErrorISR;
 800a1a2:	f06f 0305 	mvn.w	r3, #5
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	e00e      	b.n	800a1c8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800a1aa:	4b0a      	ldr	r3, [pc, #40]	; (800a1d4 <osKernelStart+0x64>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d107      	bne.n	800a1c2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800a1b2:	4b08      	ldr	r3, [pc, #32]	; (800a1d4 <osKernelStart+0x64>)
 800a1b4:	2202      	movs	r2, #2
 800a1b6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800a1b8:	f001 f890 	bl	800b2dc <vTaskStartScheduler>
      stat = osOK;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	60fb      	str	r3, [r7, #12]
 800a1c0:	e002      	b.n	800a1c8 <osKernelStart+0x58>
    } else {
      stat = osError;
 800a1c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a1c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20000230 	.word	0x20000230

0800a1d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b092      	sub	sp, #72	; 0x48
 800a1dc:	af04      	add	r7, sp, #16
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1e8:	f3ef 8305 	mrs	r3, IPSR
 800a1ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f040 8094 	bne.w	800a31e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1f6:	f3ef 8310 	mrs	r3, PRIMASK
 800a1fa:	623b      	str	r3, [r7, #32]
  return(result);
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f040 808d 	bne.w	800a31e <osThreadNew+0x146>
 800a204:	4b48      	ldr	r3, [pc, #288]	; (800a328 <osThreadNew+0x150>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d106      	bne.n	800a21a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a20c:	f3ef 8311 	mrs	r3, BASEPRI
 800a210:	61fb      	str	r3, [r7, #28]
  return(result);
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	2b00      	cmp	r3, #0
 800a216:	f040 8082 	bne.w	800a31e <osThreadNew+0x146>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d07e      	beq.n	800a31e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800a220:	2380      	movs	r3, #128	; 0x80
 800a222:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800a224:	2318      	movs	r3, #24
 800a226:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800a228:	2300      	movs	r3, #0
 800a22a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800a22c:	f107 031b 	add.w	r3, r7, #27
 800a230:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800a232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a236:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d045      	beq.n	800a2ca <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d002      	beq.n	800a24c <osThreadNew+0x74>
        name = attr->name;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	699b      	ldr	r3, [r3, #24]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d008      	beq.n	800a272 <osThreadNew+0x9a>
 800a260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a262:	2b38      	cmp	r3, #56	; 0x38
 800a264:	d805      	bhi.n	800a272 <osThreadNew+0x9a>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	f003 0301 	and.w	r3, r3, #1
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <osThreadNew+0x9e>
        return (NULL);
 800a272:	2300      	movs	r3, #0
 800a274:	e054      	b.n	800a320 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	695b      	ldr	r3, [r3, #20]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d003      	beq.n	800a286 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	695b      	ldr	r3, [r3, #20]
 800a282:	089b      	lsrs	r3, r3, #2
 800a284:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00e      	beq.n	800a2ac <osThreadNew+0xd4>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	2bbb      	cmp	r3, #187	; 0xbb
 800a294:	d90a      	bls.n	800a2ac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d006      	beq.n	800a2ac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	695b      	ldr	r3, [r3, #20]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d002      	beq.n	800a2ac <osThreadNew+0xd4>
        mem = 1;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2aa:	e010      	b.n	800a2ce <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10c      	bne.n	800a2ce <osThreadNew+0xf6>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d108      	bne.n	800a2ce <osThreadNew+0xf6>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d104      	bne.n	800a2ce <osThreadNew+0xf6>
          mem = 0;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2c8:	e001      	b.n	800a2ce <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800a2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d110      	bne.n	800a2f6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2dc:	9202      	str	r2, [sp, #8]
 800a2de:	9301      	str	r3, [sp, #4]
 800a2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e2:	9300      	str	r3, [sp, #0]
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f000 fe12 	bl	800af14 <xTaskCreateStatic>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	617b      	str	r3, [r7, #20]
 800a2f4:	e013      	b.n	800a31e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800a2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d110      	bne.n	800a31e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	f107 0314 	add.w	r3, r7, #20
 800a304:	9301      	str	r3, [sp, #4]
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f000 fe5c 	bl	800afcc <xTaskCreate>
 800a314:	4603      	mov	r3, r0
 800a316:	2b01      	cmp	r3, #1
 800a318:	d001      	beq.n	800a31e <osThreadNew+0x146>
          hTask = NULL;
 800a31a:	2300      	movs	r3, #0
 800a31c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a31e:	697b      	ldr	r3, [r7, #20]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3738      	adds	r7, #56	; 0x38
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	20000230 	.word	0x20000230

0800a32c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b086      	sub	sp, #24
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a334:	f3ef 8305 	mrs	r3, IPSR
 800a338:	613b      	str	r3, [r7, #16]
  return(result);
 800a33a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d10f      	bne.n	800a360 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a340:	f3ef 8310 	mrs	r3, PRIMASK
 800a344:	60fb      	str	r3, [r7, #12]
  return(result);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d109      	bne.n	800a360 <osDelay+0x34>
 800a34c:	4b0d      	ldr	r3, [pc, #52]	; (800a384 <osDelay+0x58>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2b02      	cmp	r3, #2
 800a352:	d109      	bne.n	800a368 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a354:	f3ef 8311 	mrs	r3, BASEPRI
 800a358:	60bb      	str	r3, [r7, #8]
  return(result);
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d003      	beq.n	800a368 <osDelay+0x3c>
    stat = osErrorISR;
 800a360:	f06f 0305 	mvn.w	r3, #5
 800a364:	617b      	str	r3, [r7, #20]
 800a366:	e007      	b.n	800a378 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a368:	2300      	movs	r3, #0
 800a36a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d002      	beq.n	800a378 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 ff7e 	bl	800b274 <vTaskDelay>
    }
  }

  return (stat);
 800a378:	697b      	ldr	r3, [r7, #20]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3718      	adds	r7, #24
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	20000230 	.word	0x20000230

0800a388 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	4a06      	ldr	r2, [pc, #24]	; (800a3b0 <vApplicationGetIdleTaskMemory+0x28>)
 800a398:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	4a05      	ldr	r2, [pc, #20]	; (800a3b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800a39e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2280      	movs	r2, #128	; 0x80
 800a3a4:	601a      	str	r2, [r3, #0]
}
 800a3a6:	bf00      	nop
 800a3a8:	3714      	adds	r7, #20
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bc80      	pop	{r7}
 800a3ae:	4770      	bx	lr
 800a3b0:	20000234 	.word	0x20000234
 800a3b4:	200002f0 	.word	0x200002f0

0800a3b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	4a07      	ldr	r2, [pc, #28]	; (800a3e4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a3c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	4a06      	ldr	r2, [pc, #24]	; (800a3e8 <vApplicationGetTimerTaskMemory+0x30>)
 800a3ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a3d6:	601a      	str	r2, [r3, #0]
}
 800a3d8:	bf00      	nop
 800a3da:	3714      	adds	r7, #20
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bc80      	pop	{r7}
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	200004f0 	.word	0x200004f0
 800a3e8:	200005ac 	.word	0x200005ac

0800a3ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f103 0208 	add.w	r2, r3, #8
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a404:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f103 0208 	add.w	r2, r3, #8
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f103 0208 	add.w	r2, r3, #8
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	bc80      	pop	{r7}
 800a428:	4770      	bx	lr

0800a42a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a42a:	b480      	push	{r7}
 800a42c:	b083      	sub	sp, #12
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a438:	bf00      	nop
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bc80      	pop	{r7}
 800a440:	4770      	bx	lr

0800a442 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a442:	b480      	push	{r7}
 800a444:	b085      	sub	sp, #20
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
 800a44a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	689a      	ldr	r2, [r3, #8]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	683a      	ldr	r2, [r7, #0]
 800a466:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	683a      	ldr	r2, [r7, #0]
 800a46c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	1c5a      	adds	r2, r3, #1
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	601a      	str	r2, [r3, #0]
}
 800a47e:	bf00      	nop
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	bc80      	pop	{r7}
 800a486:	4770      	bx	lr

0800a488 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a49e:	d103      	bne.n	800a4a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	60fb      	str	r3, [r7, #12]
 800a4a6:	e00c      	b.n	800a4c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	3308      	adds	r3, #8
 800a4ac:	60fb      	str	r3, [r7, #12]
 800a4ae:	e002      	b.n	800a4b6 <vListInsert+0x2e>
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	60fb      	str	r3, [r7, #12]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d2f6      	bcs.n	800a4b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	685a      	ldr	r2, [r3, #4]
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	683a      	ldr	r2, [r7, #0]
 800a4dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	1c5a      	adds	r2, r3, #1
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	601a      	str	r2, [r3, #0]
}
 800a4ee:	bf00      	nop
 800a4f0:	3714      	adds	r7, #20
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bc80      	pop	{r7}
 800a4f6:	4770      	bx	lr

0800a4f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	691b      	ldr	r3, [r3, #16]
 800a504:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	6892      	ldr	r2, [r2, #8]
 800a50e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	6852      	ldr	r2, [r2, #4]
 800a518:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	429a      	cmp	r2, r3
 800a522:	d103      	bne.n	800a52c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	689a      	ldr	r2, [r3, #8]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	1e5a      	subs	r2, r3, #1
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
}
 800a540:	4618      	mov	r0, r3
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	bc80      	pop	{r7}
 800a548:	4770      	bx	lr
	...

0800a54c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10a      	bne.n	800a576 <xQueueGenericReset+0x2a>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	60bb      	str	r3, [r7, #8]
}
 800a572:	bf00      	nop
 800a574:	e7fe      	b.n	800a574 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a576:	f001 fff9 	bl	800c56c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a582:	68f9      	ldr	r1, [r7, #12]
 800a584:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a586:	fb01 f303 	mul.w	r3, r1, r3
 800a58a:	441a      	add	r2, r3
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	68f9      	ldr	r1, [r7, #12]
 800a5aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a5ac:	fb01 f303 	mul.w	r3, r1, r3
 800a5b0:	441a      	add	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	22ff      	movs	r2, #255	; 0xff
 800a5ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	22ff      	movs	r2, #255	; 0xff
 800a5c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d114      	bne.n	800a5f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	691b      	ldr	r3, [r3, #16]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d01a      	beq.n	800a60a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	3310      	adds	r3, #16
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f001 f91b 	bl	800b814 <xTaskRemoveFromEventList>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d012      	beq.n	800a60a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a5e4:	4b0c      	ldr	r3, [pc, #48]	; (800a618 <xQueueGenericReset+0xcc>)
 800a5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ea:	601a      	str	r2, [r3, #0]
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	e009      	b.n	800a60a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	3310      	adds	r3, #16
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7ff fef6 	bl	800a3ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	3324      	adds	r3, #36	; 0x24
 800a604:	4618      	mov	r0, r3
 800a606:	f7ff fef1 	bl	800a3ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a60a:	f001 ffdf 	bl	800c5cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a60e:	2301      	movs	r3, #1
}
 800a610:	4618      	mov	r0, r3
 800a612:	3710      	adds	r7, #16
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	e000ed04 	.word	0xe000ed04

0800a61c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b08e      	sub	sp, #56	; 0x38
 800a620:	af02      	add	r7, sp, #8
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
 800a628:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10a      	bne.n	800a646 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a634:	f383 8811 	msr	BASEPRI, r3
 800a638:	f3bf 8f6f 	isb	sy
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a642:	bf00      	nop
 800a644:	e7fe      	b.n	800a644 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10a      	bne.n	800a662 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a65e:	bf00      	nop
 800a660:	e7fe      	b.n	800a660 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d002      	beq.n	800a66e <xQueueGenericCreateStatic+0x52>
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <xQueueGenericCreateStatic+0x56>
 800a66e:	2301      	movs	r3, #1
 800a670:	e000      	b.n	800a674 <xQueueGenericCreateStatic+0x58>
 800a672:	2300      	movs	r3, #0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d10a      	bne.n	800a68e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67c:	f383 8811 	msr	BASEPRI, r3
 800a680:	f3bf 8f6f 	isb	sy
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	623b      	str	r3, [r7, #32]
}
 800a68a:	bf00      	nop
 800a68c:	e7fe      	b.n	800a68c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d102      	bne.n	800a69a <xQueueGenericCreateStatic+0x7e>
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d101      	bne.n	800a69e <xQueueGenericCreateStatic+0x82>
 800a69a:	2301      	movs	r3, #1
 800a69c:	e000      	b.n	800a6a0 <xQueueGenericCreateStatic+0x84>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10a      	bne.n	800a6ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	61fb      	str	r3, [r7, #28]
}
 800a6b6:	bf00      	nop
 800a6b8:	e7fe      	b.n	800a6b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a6ba:	2350      	movs	r3, #80	; 0x50
 800a6bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	2b50      	cmp	r3, #80	; 0x50
 800a6c2:	d00a      	beq.n	800a6da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	61bb      	str	r3, [r7, #24]
}
 800a6d6:	bf00      	nop
 800a6d8:	e7fe      	b.n	800a6d8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00d      	beq.n	800a700 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6ec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f2:	9300      	str	r3, [sp, #0]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	68b9      	ldr	r1, [r7, #8]
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f000 f805 	bl	800a70a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a702:	4618      	mov	r0, r3
 800a704:	3730      	adds	r7, #48	; 0x30
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b084      	sub	sp, #16
 800a70e:	af00      	add	r7, sp, #0
 800a710:	60f8      	str	r0, [r7, #12]
 800a712:	60b9      	str	r1, [r7, #8]
 800a714:	607a      	str	r2, [r7, #4]
 800a716:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d103      	bne.n	800a726 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	69ba      	ldr	r2, [r7, #24]
 800a722:	601a      	str	r2, [r3, #0]
 800a724:	e002      	b.n	800a72c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a738:	2101      	movs	r1, #1
 800a73a:	69b8      	ldr	r0, [r7, #24]
 800a73c:	f7ff ff06 	bl	800a54c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	78fa      	ldrb	r2, [r7, #3]
 800a744:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a748:	bf00      	nop
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b08e      	sub	sp, #56	; 0x38
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
 800a75c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a75e:	2300      	movs	r3, #0
 800a760:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10a      	bne.n	800a782 <xQueueGenericSend+0x32>
	__asm volatile
 800a76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a77e:	bf00      	nop
 800a780:	e7fe      	b.n	800a780 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d103      	bne.n	800a790 <xQueueGenericSend+0x40>
 800a788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d101      	bne.n	800a794 <xQueueGenericSend+0x44>
 800a790:	2301      	movs	r3, #1
 800a792:	e000      	b.n	800a796 <xQueueGenericSend+0x46>
 800a794:	2300      	movs	r3, #0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d10a      	bne.n	800a7b0 <xQueueGenericSend+0x60>
	__asm volatile
 800a79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79e:	f383 8811 	msr	BASEPRI, r3
 800a7a2:	f3bf 8f6f 	isb	sy
 800a7a6:	f3bf 8f4f 	dsb	sy
 800a7aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a7ac:	bf00      	nop
 800a7ae:	e7fe      	b.n	800a7ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	d103      	bne.n	800a7be <xQueueGenericSend+0x6e>
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d101      	bne.n	800a7c2 <xQueueGenericSend+0x72>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e000      	b.n	800a7c4 <xQueueGenericSend+0x74>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10a      	bne.n	800a7de <xQueueGenericSend+0x8e>
	__asm volatile
 800a7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	623b      	str	r3, [r7, #32]
}
 800a7da:	bf00      	nop
 800a7dc:	e7fe      	b.n	800a7dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7de:	f001 f9df 	bl	800bba0 <xTaskGetSchedulerState>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d102      	bne.n	800a7ee <xQueueGenericSend+0x9e>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d101      	bne.n	800a7f2 <xQueueGenericSend+0xa2>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e000      	b.n	800a7f4 <xQueueGenericSend+0xa4>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10a      	bne.n	800a80e <xQueueGenericSend+0xbe>
	__asm volatile
 800a7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	61fb      	str	r3, [r7, #28]
}
 800a80a:	bf00      	nop
 800a80c:	e7fe      	b.n	800a80c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a80e:	f001 fead 	bl	800c56c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d302      	bcc.n	800a824 <xQueueGenericSend+0xd4>
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2b02      	cmp	r3, #2
 800a822:	d129      	bne.n	800a878 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	68b9      	ldr	r1, [r7, #8]
 800a828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a82a:	f000 fa07 	bl	800ac3c <prvCopyDataToQueue>
 800a82e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a834:	2b00      	cmp	r3, #0
 800a836:	d010      	beq.n	800a85a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83a:	3324      	adds	r3, #36	; 0x24
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 ffe9 	bl	800b814 <xTaskRemoveFromEventList>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d013      	beq.n	800a870 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a848:	4b3f      	ldr	r3, [pc, #252]	; (800a948 <xQueueGenericSend+0x1f8>)
 800a84a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	e00a      	b.n	800a870 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d007      	beq.n	800a870 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a860:	4b39      	ldr	r3, [pc, #228]	; (800a948 <xQueueGenericSend+0x1f8>)
 800a862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a866:	601a      	str	r2, [r3, #0]
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a870:	f001 feac 	bl	800c5cc <vPortExitCritical>
				return pdPASS;
 800a874:	2301      	movs	r3, #1
 800a876:	e063      	b.n	800a940 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d103      	bne.n	800a886 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a87e:	f001 fea5 	bl	800c5cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a882:	2300      	movs	r3, #0
 800a884:	e05c      	b.n	800a940 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d106      	bne.n	800a89a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a88c:	f107 0314 	add.w	r3, r7, #20
 800a890:	4618      	mov	r0, r3
 800a892:	f001 f823 	bl	800b8dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a896:	2301      	movs	r3, #1
 800a898:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a89a:	f001 fe97 	bl	800c5cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a89e:	f000 fd8d 	bl	800b3bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8a2:	f001 fe63 	bl	800c56c <vPortEnterCritical>
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8ac:	b25b      	sxtb	r3, r3
 800a8ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8b2:	d103      	bne.n	800a8bc <xQueueGenericSend+0x16c>
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8c2:	b25b      	sxtb	r3, r3
 800a8c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8c8:	d103      	bne.n	800a8d2 <xQueueGenericSend+0x182>
 800a8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8d2:	f001 fe7b 	bl	800c5cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8d6:	1d3a      	adds	r2, r7, #4
 800a8d8:	f107 0314 	add.w	r3, r7, #20
 800a8dc:	4611      	mov	r1, r2
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f001 f812 	bl	800b908 <xTaskCheckForTimeOut>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d124      	bne.n	800a934 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a8ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8ec:	f000 fa9e 	bl	800ae2c <prvIsQueueFull>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d018      	beq.n	800a928 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f8:	3310      	adds	r3, #16
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	4611      	mov	r1, r2
 800a8fe:	4618      	mov	r0, r3
 800a900:	f000 ff38 	bl	800b774 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a906:	f000 fa29 	bl	800ad5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a90a:	f000 fd65 	bl	800b3d8 <xTaskResumeAll>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	f47f af7c 	bne.w	800a80e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a916:	4b0c      	ldr	r3, [pc, #48]	; (800a948 <xQueueGenericSend+0x1f8>)
 800a918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a91c:	601a      	str	r2, [r3, #0]
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	e772      	b.n	800a80e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a92a:	f000 fa17 	bl	800ad5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a92e:	f000 fd53 	bl	800b3d8 <xTaskResumeAll>
 800a932:	e76c      	b.n	800a80e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a936:	f000 fa11 	bl	800ad5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a93a:	f000 fd4d 	bl	800b3d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a93e:	2300      	movs	r3, #0
		}
	}
}
 800a940:	4618      	mov	r0, r3
 800a942:	3738      	adds	r7, #56	; 0x38
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	e000ed04 	.word	0xe000ed04

0800a94c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b08e      	sub	sp, #56	; 0x38
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
 800a958:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10a      	bne.n	800a97a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a976:	bf00      	nop
 800a978:	e7fe      	b.n	800a978 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d103      	bne.n	800a988 <xQueueGenericSendFromISR+0x3c>
 800a980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a984:	2b00      	cmp	r3, #0
 800a986:	d101      	bne.n	800a98c <xQueueGenericSendFromISR+0x40>
 800a988:	2301      	movs	r3, #1
 800a98a:	e000      	b.n	800a98e <xQueueGenericSendFromISR+0x42>
 800a98c:	2300      	movs	r3, #0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10a      	bne.n	800a9a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	623b      	str	r3, [r7, #32]
}
 800a9a4:	bf00      	nop
 800a9a6:	e7fe      	b.n	800a9a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	d103      	bne.n	800a9b6 <xQueueGenericSendFromISR+0x6a>
 800a9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d101      	bne.n	800a9ba <xQueueGenericSendFromISR+0x6e>
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e000      	b.n	800a9bc <xQueueGenericSendFromISR+0x70>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10a      	bne.n	800a9d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c4:	f383 8811 	msr	BASEPRI, r3
 800a9c8:	f3bf 8f6f 	isb	sy
 800a9cc:	f3bf 8f4f 	dsb	sy
 800a9d0:	61fb      	str	r3, [r7, #28]
}
 800a9d2:	bf00      	nop
 800a9d4:	e7fe      	b.n	800a9d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9d6:	f001 fe8b 	bl	800c6f0 <vPortValidateInterruptPriority>
	__asm volatile
 800a9da:	f3ef 8211 	mrs	r2, BASEPRI
 800a9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e2:	f383 8811 	msr	BASEPRI, r3
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	61ba      	str	r2, [r7, #24]
 800a9f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a9f2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d302      	bcc.n	800aa08 <xQueueGenericSendFromISR+0xbc>
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	2b02      	cmp	r3, #2
 800aa06:	d12c      	bne.n	800aa62 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	68b9      	ldr	r1, [r7, #8]
 800aa16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa18:	f000 f910 	bl	800ac3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa1c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800aa20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa24:	d112      	bne.n	800aa4c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d016      	beq.n	800aa5c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa30:	3324      	adds	r3, #36	; 0x24
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 feee 	bl	800b814 <xTaskRemoveFromEventList>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00e      	beq.n	800aa5c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00b      	beq.n	800aa5c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	601a      	str	r2, [r3, #0]
 800aa4a:	e007      	b.n	800aa5c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa50:	3301      	adds	r3, #1
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	b25a      	sxtb	r2, r3
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800aa60:	e001      	b.n	800aa66 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa62:	2300      	movs	r3, #0
 800aa64:	637b      	str	r3, [r7, #52]	; 0x34
 800aa66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa68:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	f383 8811 	msr	BASEPRI, r3
}
 800aa70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3738      	adds	r7, #56	; 0x38
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b08c      	sub	sp, #48	; 0x30
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d10a      	bne.n	800aaac <xQueueReceive+0x30>
	__asm volatile
 800aa96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9a:	f383 8811 	msr	BASEPRI, r3
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	f3bf 8f4f 	dsb	sy
 800aaa6:	623b      	str	r3, [r7, #32]
}
 800aaa8:	bf00      	nop
 800aaaa:	e7fe      	b.n	800aaaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d103      	bne.n	800aaba <xQueueReceive+0x3e>
 800aab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d101      	bne.n	800aabe <xQueueReceive+0x42>
 800aaba:	2301      	movs	r3, #1
 800aabc:	e000      	b.n	800aac0 <xQueueReceive+0x44>
 800aabe:	2300      	movs	r3, #0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10a      	bne.n	800aada <xQueueReceive+0x5e>
	__asm volatile
 800aac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	61fb      	str	r3, [r7, #28]
}
 800aad6:	bf00      	nop
 800aad8:	e7fe      	b.n	800aad8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aada:	f001 f861 	bl	800bba0 <xTaskGetSchedulerState>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d102      	bne.n	800aaea <xQueueReceive+0x6e>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <xQueueReceive+0x72>
 800aaea:	2301      	movs	r3, #1
 800aaec:	e000      	b.n	800aaf0 <xQueueReceive+0x74>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10a      	bne.n	800ab0a <xQueueReceive+0x8e>
	__asm volatile
 800aaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf8:	f383 8811 	msr	BASEPRI, r3
 800aafc:	f3bf 8f6f 	isb	sy
 800ab00:	f3bf 8f4f 	dsb	sy
 800ab04:	61bb      	str	r3, [r7, #24]
}
 800ab06:	bf00      	nop
 800ab08:	e7fe      	b.n	800ab08 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab0a:	f001 fd2f 	bl	800c56c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d01f      	beq.n	800ab5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab1a:	68b9      	ldr	r1, [r7, #8]
 800ab1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab1e:	f000 f8f7 	bl	800ad10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab24:	1e5a      	subs	r2, r3, #1
 800ab26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d00f      	beq.n	800ab52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	3310      	adds	r3, #16
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 fe6c 	bl	800b814 <xTaskRemoveFromEventList>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d007      	beq.n	800ab52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab42:	4b3d      	ldr	r3, [pc, #244]	; (800ac38 <xQueueReceive+0x1bc>)
 800ab44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab48:	601a      	str	r2, [r3, #0]
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab52:	f001 fd3b 	bl	800c5cc <vPortExitCritical>
				return pdPASS;
 800ab56:	2301      	movs	r3, #1
 800ab58:	e069      	b.n	800ac2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d103      	bne.n	800ab68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab60:	f001 fd34 	bl	800c5cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab64:	2300      	movs	r3, #0
 800ab66:	e062      	b.n	800ac2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d106      	bne.n	800ab7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab6e:	f107 0310 	add.w	r3, r7, #16
 800ab72:	4618      	mov	r0, r3
 800ab74:	f000 feb2 	bl	800b8dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab7c:	f001 fd26 	bl	800c5cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab80:	f000 fc1c 	bl	800b3bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab84:	f001 fcf2 	bl	800c56c <vPortEnterCritical>
 800ab88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab8e:	b25b      	sxtb	r3, r3
 800ab90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab94:	d103      	bne.n	800ab9e <xQueueReceive+0x122>
 800ab96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aba4:	b25b      	sxtb	r3, r3
 800aba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abaa:	d103      	bne.n	800abb4 <xQueueReceive+0x138>
 800abac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abae:	2200      	movs	r2, #0
 800abb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abb4:	f001 fd0a 	bl	800c5cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abb8:	1d3a      	adds	r2, r7, #4
 800abba:	f107 0310 	add.w	r3, r7, #16
 800abbe:	4611      	mov	r1, r2
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 fea1 	bl	800b908 <xTaskCheckForTimeOut>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d123      	bne.n	800ac14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abce:	f000 f917 	bl	800ae00 <prvIsQueueEmpty>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d017      	beq.n	800ac08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abda:	3324      	adds	r3, #36	; 0x24
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	4611      	mov	r1, r2
 800abe0:	4618      	mov	r0, r3
 800abe2:	f000 fdc7 	bl	800b774 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abe8:	f000 f8b8 	bl	800ad5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abec:	f000 fbf4 	bl	800b3d8 <xTaskResumeAll>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d189      	bne.n	800ab0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800abf6:	4b10      	ldr	r3, [pc, #64]	; (800ac38 <xQueueReceive+0x1bc>)
 800abf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	f3bf 8f4f 	dsb	sy
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	e780      	b.n	800ab0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ac08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac0a:	f000 f8a7 	bl	800ad5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac0e:	f000 fbe3 	bl	800b3d8 <xTaskResumeAll>
 800ac12:	e77a      	b.n	800ab0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ac14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac16:	f000 f8a1 	bl	800ad5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac1a:	f000 fbdd 	bl	800b3d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac20:	f000 f8ee 	bl	800ae00 <prvIsQueueEmpty>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	f43f af6f 	beq.w	800ab0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3730      	adds	r7, #48	; 0x30
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	e000ed04 	.word	0xe000ed04

0800ac3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b086      	sub	sp, #24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d10d      	bne.n	800ac76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d14d      	bne.n	800acfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	4618      	mov	r0, r3
 800ac68:	f000 ffb8 	bl	800bbdc <xTaskPriorityDisinherit>
 800ac6c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	605a      	str	r2, [r3, #4]
 800ac74:	e043      	b.n	800acfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d119      	bne.n	800acb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6898      	ldr	r0, [r3, #8]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac84:	461a      	mov	r2, r3
 800ac86:	68b9      	ldr	r1, [r7, #8]
 800ac88:	f002 fbe2 	bl	800d450 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	689a      	ldr	r2, [r3, #8]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac94:	441a      	add	r2, r3
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	689a      	ldr	r2, [r3, #8]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d32b      	bcc.n	800acfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	609a      	str	r2, [r3, #8]
 800acae:	e026      	b.n	800acfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	68d8      	ldr	r0, [r3, #12]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb8:	461a      	mov	r2, r3
 800acba:	68b9      	ldr	r1, [r7, #8]
 800acbc:	f002 fbc8 	bl	800d450 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	68da      	ldr	r2, [r3, #12]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc8:	425b      	negs	r3, r3
 800acca:	441a      	add	r2, r3
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	68da      	ldr	r2, [r3, #12]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d207      	bcs.n	800acec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	685a      	ldr	r2, [r3, #4]
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace4:	425b      	negs	r3, r3
 800ace6:	441a      	add	r2, r3
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d105      	bne.n	800acfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d002      	beq.n	800acfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	3b01      	subs	r3, #1
 800acfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	1c5a      	adds	r2, r3, #1
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ad06:	697b      	ldr	r3, [r7, #20]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3718      	adds	r7, #24
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d018      	beq.n	800ad54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68da      	ldr	r2, [r3, #12]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2a:	441a      	add	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	68da      	ldr	r2, [r3, #12]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d303      	bcc.n	800ad44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	68d9      	ldr	r1, [r3, #12]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	6838      	ldr	r0, [r7, #0]
 800ad50:	f002 fb7e 	bl	800d450 <memcpy>
	}
}
 800ad54:	bf00      	nop
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad64:	f001 fc02 	bl	800c56c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad70:	e011      	b.n	800ad96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d012      	beq.n	800ada0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	3324      	adds	r3, #36	; 0x24
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f000 fd48 	bl	800b814 <xTaskRemoveFromEventList>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad8a:	f000 fe1f 	bl	800b9cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad8e:	7bfb      	ldrb	r3, [r7, #15]
 800ad90:	3b01      	subs	r3, #1
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	dce9      	bgt.n	800ad72 <prvUnlockQueue+0x16>
 800ad9e:	e000      	b.n	800ada2 <prvUnlockQueue+0x46>
					break;
 800ada0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	22ff      	movs	r2, #255	; 0xff
 800ada6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800adaa:	f001 fc0f 	bl	800c5cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800adae:	f001 fbdd 	bl	800c56c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800adba:	e011      	b.n	800ade0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d012      	beq.n	800adea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	3310      	adds	r3, #16
 800adc8:	4618      	mov	r0, r3
 800adca:	f000 fd23 	bl	800b814 <xTaskRemoveFromEventList>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d001      	beq.n	800add8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800add4:	f000 fdfa 	bl	800b9cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800add8:	7bbb      	ldrb	r3, [r7, #14]
 800adda:	3b01      	subs	r3, #1
 800addc:	b2db      	uxtb	r3, r3
 800adde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ade0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	dce9      	bgt.n	800adbc <prvUnlockQueue+0x60>
 800ade8:	e000      	b.n	800adec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800adea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	22ff      	movs	r2, #255	; 0xff
 800adf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800adf4:	f001 fbea 	bl	800c5cc <vPortExitCritical>
}
 800adf8:	bf00      	nop
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae08:	f001 fbb0 	bl	800c56c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d102      	bne.n	800ae1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ae14:	2301      	movs	r3, #1
 800ae16:	60fb      	str	r3, [r7, #12]
 800ae18:	e001      	b.n	800ae1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae1e:	f001 fbd5 	bl	800c5cc <vPortExitCritical>

	return xReturn;
 800ae22:	68fb      	ldr	r3, [r7, #12]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3710      	adds	r7, #16
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae34:	f001 fb9a 	bl	800c56c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d102      	bne.n	800ae4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae44:	2301      	movs	r3, #1
 800ae46:	60fb      	str	r3, [r7, #12]
 800ae48:	e001      	b.n	800ae4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae4e:	f001 fbbd 	bl	800c5cc <vPortExitCritical>

	return xReturn;
 800ae52:	68fb      	ldr	r3, [r7, #12]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae66:	2300      	movs	r3, #0
 800ae68:	60fb      	str	r3, [r7, #12]
 800ae6a:	e014      	b.n	800ae96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae6c:	4a0e      	ldr	r2, [pc, #56]	; (800aea8 <vQueueAddToRegistry+0x4c>)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d10b      	bne.n	800ae90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae78:	490b      	ldr	r1, [pc, #44]	; (800aea8 <vQueueAddToRegistry+0x4c>)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	683a      	ldr	r2, [r7, #0]
 800ae7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae82:	4a09      	ldr	r2, [pc, #36]	; (800aea8 <vQueueAddToRegistry+0x4c>)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	00db      	lsls	r3, r3, #3
 800ae88:	4413      	add	r3, r2
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ae8e:	e006      	b.n	800ae9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	3301      	adds	r3, #1
 800ae94:	60fb      	str	r3, [r7, #12]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2b07      	cmp	r3, #7
 800ae9a:	d9e7      	bls.n	800ae6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae9c:	bf00      	nop
 800ae9e:	bf00      	nop
 800aea0:	3714      	adds	r7, #20
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bc80      	pop	{r7}
 800aea6:	4770      	bx	lr
 800aea8:	20002438 	.word	0x20002438

0800aeac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aebc:	f001 fb56 	bl	800c56c <vPortEnterCritical>
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aec6:	b25b      	sxtb	r3, r3
 800aec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aecc:	d103      	bne.n	800aed6 <vQueueWaitForMessageRestricted+0x2a>
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aedc:	b25b      	sxtb	r3, r3
 800aede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aee2:	d103      	bne.n	800aeec <vQueueWaitForMessageRestricted+0x40>
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeec:	f001 fb6e 	bl	800c5cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d106      	bne.n	800af06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	3324      	adds	r3, #36	; 0x24
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	68b9      	ldr	r1, [r7, #8]
 800af00:	4618      	mov	r0, r3
 800af02:	f000 fc5b 	bl	800b7bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800af06:	6978      	ldr	r0, [r7, #20]
 800af08:	f7ff ff28 	bl	800ad5c <prvUnlockQueue>
	}
 800af0c:	bf00      	nop
 800af0e:	3718      	adds	r7, #24
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af14:	b580      	push	{r7, lr}
 800af16:	b08e      	sub	sp, #56	; 0x38
 800af18:	af04      	add	r7, sp, #16
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
 800af20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af24:	2b00      	cmp	r3, #0
 800af26:	d10a      	bne.n	800af3e <xTaskCreateStatic+0x2a>
	__asm volatile
 800af28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2c:	f383 8811 	msr	BASEPRI, r3
 800af30:	f3bf 8f6f 	isb	sy
 800af34:	f3bf 8f4f 	dsb	sy
 800af38:	623b      	str	r3, [r7, #32]
}
 800af3a:	bf00      	nop
 800af3c:	e7fe      	b.n	800af3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10a      	bne.n	800af5a <xTaskCreateStatic+0x46>
	__asm volatile
 800af44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af48:	f383 8811 	msr	BASEPRI, r3
 800af4c:	f3bf 8f6f 	isb	sy
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	61fb      	str	r3, [r7, #28]
}
 800af56:	bf00      	nop
 800af58:	e7fe      	b.n	800af58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af5a:	23bc      	movs	r3, #188	; 0xbc
 800af5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	2bbc      	cmp	r3, #188	; 0xbc
 800af62:	d00a      	beq.n	800af7a <xTaskCreateStatic+0x66>
	__asm volatile
 800af64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af68:	f383 8811 	msr	BASEPRI, r3
 800af6c:	f3bf 8f6f 	isb	sy
 800af70:	f3bf 8f4f 	dsb	sy
 800af74:	61bb      	str	r3, [r7, #24]
}
 800af76:	bf00      	nop
 800af78:	e7fe      	b.n	800af78 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800af7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d01e      	beq.n	800afbe <xTaskCreateStatic+0xaa>
 800af80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af82:	2b00      	cmp	r3, #0
 800af84:	d01b      	beq.n	800afbe <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af88:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800af8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af8e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af92:	2202      	movs	r2, #2
 800af94:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800af98:	2300      	movs	r3, #0
 800af9a:	9303      	str	r3, [sp, #12]
 800af9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9e:	9302      	str	r3, [sp, #8]
 800afa0:	f107 0314 	add.w	r3, r7, #20
 800afa4:	9301      	str	r3, [sp, #4]
 800afa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	68b9      	ldr	r1, [r7, #8]
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f000 f851 	bl	800b058 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800afb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afb8:	f000 f8ec 	bl	800b194 <prvAddNewTaskToReadyList>
 800afbc:	e001      	b.n	800afc2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800afbe:	2300      	movs	r3, #0
 800afc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800afc2:	697b      	ldr	r3, [r7, #20]
	}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3728      	adds	r7, #40	; 0x28
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b08c      	sub	sp, #48	; 0x30
 800afd0:	af04      	add	r7, sp, #16
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	603b      	str	r3, [r7, #0]
 800afd8:	4613      	mov	r3, r2
 800afda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afdc:	88fb      	ldrh	r3, [r7, #6]
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4618      	mov	r0, r3
 800afe2:	f001 fbc3 	bl	800c76c <pvPortMalloc>
 800afe6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00e      	beq.n	800b00c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800afee:	20bc      	movs	r0, #188	; 0xbc
 800aff0:	f001 fbbc 	bl	800c76c <pvPortMalloc>
 800aff4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d003      	beq.n	800b004 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	697a      	ldr	r2, [r7, #20]
 800b000:	631a      	str	r2, [r3, #48]	; 0x30
 800b002:	e005      	b.n	800b010 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b004:	6978      	ldr	r0, [r7, #20]
 800b006:	f001 fc75 	bl	800c8f4 <vPortFree>
 800b00a:	e001      	b.n	800b010 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b00c:	2300      	movs	r3, #0
 800b00e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d017      	beq.n	800b046 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	2200      	movs	r2, #0
 800b01a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b01e:	88fa      	ldrh	r2, [r7, #6]
 800b020:	2300      	movs	r3, #0
 800b022:	9303      	str	r3, [sp, #12]
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	9302      	str	r3, [sp, #8]
 800b028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02a:	9301      	str	r3, [sp, #4]
 800b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02e:	9300      	str	r3, [sp, #0]
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	68b9      	ldr	r1, [r7, #8]
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f000 f80f 	bl	800b058 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b03a:	69f8      	ldr	r0, [r7, #28]
 800b03c:	f000 f8aa 	bl	800b194 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b040:	2301      	movs	r3, #1
 800b042:	61bb      	str	r3, [r7, #24]
 800b044:	e002      	b.n	800b04c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b04a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b04c:	69bb      	ldr	r3, [r7, #24]
	}
 800b04e:	4618      	mov	r0, r3
 800b050:	3720      	adds	r7, #32
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
	...

0800b058 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b088      	sub	sp, #32
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
 800b064:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b068:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	461a      	mov	r2, r3
 800b070:	21a5      	movs	r1, #165	; 0xa5
 800b072:	f002 f9fb 	bl	800d46c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b080:	3b01      	subs	r3, #1
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	4413      	add	r3, r2
 800b086:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	f023 0307 	bic.w	r3, r3, #7
 800b08e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	f003 0307 	and.w	r3, r3, #7
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00a      	beq.n	800b0b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09e:	f383 8811 	msr	BASEPRI, r3
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	617b      	str	r3, [r7, #20]
}
 800b0ac:	bf00      	nop
 800b0ae:	e7fe      	b.n	800b0ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	61fb      	str	r3, [r7, #28]
 800b0b4:	e012      	b.n	800b0dc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b0b6:	68ba      	ldr	r2, [r7, #8]
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	7819      	ldrb	r1, [r3, #0]
 800b0be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	3334      	adds	r3, #52	; 0x34
 800b0c6:	460a      	mov	r2, r1
 800b0c8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b0ca:	68ba      	ldr	r2, [r7, #8]
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d006      	beq.n	800b0e4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	61fb      	str	r3, [r7, #28]
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	2b0f      	cmp	r3, #15
 800b0e0:	d9e9      	bls.n	800b0b6 <prvInitialiseNewTask+0x5e>
 800b0e2:	e000      	b.n	800b0e6 <prvInitialiseNewTask+0x8e>
		{
			break;
 800b0e4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f0:	2b37      	cmp	r3, #55	; 0x37
 800b0f2:	d901      	bls.n	800b0f8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b0f4:	2337      	movs	r3, #55	; 0x37
 800b0f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b102:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b106:	2200      	movs	r2, #0
 800b108:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10c:	3304      	adds	r3, #4
 800b10e:	4618      	mov	r0, r3
 800b110:	f7ff f98b 	bl	800a42a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b116:	3318      	adds	r3, #24
 800b118:	4618      	mov	r0, r3
 800b11a:	f7ff f986 	bl	800a42a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b122:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b132:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b136:	2200      	movs	r2, #0
 800b138:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b146:	3354      	adds	r3, #84	; 0x54
 800b148:	2260      	movs	r2, #96	; 0x60
 800b14a:	2100      	movs	r1, #0
 800b14c:	4618      	mov	r0, r3
 800b14e:	f002 f98d 	bl	800d46c <memset>
 800b152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b154:	4a0c      	ldr	r2, [pc, #48]	; (800b188 <prvInitialiseNewTask+0x130>)
 800b156:	659a      	str	r2, [r3, #88]	; 0x58
 800b158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15a:	4a0c      	ldr	r2, [pc, #48]	; (800b18c <prvInitialiseNewTask+0x134>)
 800b15c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b160:	4a0b      	ldr	r2, [pc, #44]	; (800b190 <prvInitialiseNewTask+0x138>)
 800b162:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b164:	683a      	ldr	r2, [r7, #0]
 800b166:	68f9      	ldr	r1, [r7, #12]
 800b168:	69b8      	ldr	r0, [r7, #24]
 800b16a:	f001 f90b 	bl	800c384 <pxPortInitialiseStack>
 800b16e:	4602      	mov	r2, r0
 800b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b172:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b176:	2b00      	cmp	r3, #0
 800b178:	d002      	beq.n	800b180 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b17e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b180:	bf00      	nop
 800b182:	3720      	adds	r7, #32
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	0800d6f0 	.word	0x0800d6f0
 800b18c:	0800d710 	.word	0x0800d710
 800b190:	0800d6d0 	.word	0x0800d6d0

0800b194 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b19c:	f001 f9e6 	bl	800c56c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b1a0:	4b2d      	ldr	r3, [pc, #180]	; (800b258 <prvAddNewTaskToReadyList+0xc4>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	4a2c      	ldr	r2, [pc, #176]	; (800b258 <prvAddNewTaskToReadyList+0xc4>)
 800b1a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1aa:	4b2c      	ldr	r3, [pc, #176]	; (800b25c <prvAddNewTaskToReadyList+0xc8>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d109      	bne.n	800b1c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b1b2:	4a2a      	ldr	r2, [pc, #168]	; (800b25c <prvAddNewTaskToReadyList+0xc8>)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b1b8:	4b27      	ldr	r3, [pc, #156]	; (800b258 <prvAddNewTaskToReadyList+0xc4>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d110      	bne.n	800b1e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b1c0:	f000 fc28 	bl	800ba14 <prvInitialiseTaskLists>
 800b1c4:	e00d      	b.n	800b1e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b1c6:	4b26      	ldr	r3, [pc, #152]	; (800b260 <prvAddNewTaskToReadyList+0xcc>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d109      	bne.n	800b1e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b1ce:	4b23      	ldr	r3, [pc, #140]	; (800b25c <prvAddNewTaskToReadyList+0xc8>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d802      	bhi.n	800b1e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b1dc:	4a1f      	ldr	r2, [pc, #124]	; (800b25c <prvAddNewTaskToReadyList+0xc8>)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b1e2:	4b20      	ldr	r3, [pc, #128]	; (800b264 <prvAddNewTaskToReadyList+0xd0>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	4a1e      	ldr	r2, [pc, #120]	; (800b264 <prvAddNewTaskToReadyList+0xd0>)
 800b1ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b1ec:	4b1d      	ldr	r3, [pc, #116]	; (800b264 <prvAddNewTaskToReadyList+0xd0>)
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f8:	4b1b      	ldr	r3, [pc, #108]	; (800b268 <prvAddNewTaskToReadyList+0xd4>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d903      	bls.n	800b208 <prvAddNewTaskToReadyList+0x74>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b204:	4a18      	ldr	r2, [pc, #96]	; (800b268 <prvAddNewTaskToReadyList+0xd4>)
 800b206:	6013      	str	r3, [r2, #0]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b20c:	4613      	mov	r3, r2
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	4413      	add	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	4a15      	ldr	r2, [pc, #84]	; (800b26c <prvAddNewTaskToReadyList+0xd8>)
 800b216:	441a      	add	r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	3304      	adds	r3, #4
 800b21c:	4619      	mov	r1, r3
 800b21e:	4610      	mov	r0, r2
 800b220:	f7ff f90f 	bl	800a442 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b224:	f001 f9d2 	bl	800c5cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b228:	4b0d      	ldr	r3, [pc, #52]	; (800b260 <prvAddNewTaskToReadyList+0xcc>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00e      	beq.n	800b24e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b230:	4b0a      	ldr	r3, [pc, #40]	; (800b25c <prvAddNewTaskToReadyList+0xc8>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d207      	bcs.n	800b24e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b23e:	4b0c      	ldr	r3, [pc, #48]	; (800b270 <prvAddNewTaskToReadyList+0xdc>)
 800b240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b244:	601a      	str	r2, [r3, #0]
 800b246:	f3bf 8f4f 	dsb	sy
 800b24a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b24e:	bf00      	nop
 800b250:	3708      	adds	r7, #8
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	20000e80 	.word	0x20000e80
 800b25c:	200009ac 	.word	0x200009ac
 800b260:	20000e8c 	.word	0x20000e8c
 800b264:	20000e9c 	.word	0x20000e9c
 800b268:	20000e88 	.word	0x20000e88
 800b26c:	200009b0 	.word	0x200009b0
 800b270:	e000ed04 	.word	0xe000ed04

0800b274 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b27c:	2300      	movs	r3, #0
 800b27e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d017      	beq.n	800b2b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b286:	4b13      	ldr	r3, [pc, #76]	; (800b2d4 <vTaskDelay+0x60>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00a      	beq.n	800b2a4 <vTaskDelay+0x30>
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	60bb      	str	r3, [r7, #8]
}
 800b2a0:	bf00      	nop
 800b2a2:	e7fe      	b.n	800b2a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b2a4:	f000 f88a 	bl	800b3bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b2a8:	2100      	movs	r1, #0
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fd04 	bl	800bcb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b2b0:	f000 f892 	bl	800b3d8 <xTaskResumeAll>
 800b2b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d107      	bne.n	800b2cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b2bc:	4b06      	ldr	r3, [pc, #24]	; (800b2d8 <vTaskDelay+0x64>)
 800b2be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2c2:	601a      	str	r2, [r3, #0]
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2cc:	bf00      	nop
 800b2ce:	3710      	adds	r7, #16
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	20000ea8 	.word	0x20000ea8
 800b2d8:	e000ed04 	.word	0xe000ed04

0800b2dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b08a      	sub	sp, #40	; 0x28
 800b2e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b2ea:	463a      	mov	r2, r7
 800b2ec:	1d39      	adds	r1, r7, #4
 800b2ee:	f107 0308 	add.w	r3, r7, #8
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7ff f848 	bl	800a388 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b2f8:	6839      	ldr	r1, [r7, #0]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	9202      	str	r2, [sp, #8]
 800b300:	9301      	str	r3, [sp, #4]
 800b302:	2300      	movs	r3, #0
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	2300      	movs	r3, #0
 800b308:	460a      	mov	r2, r1
 800b30a:	4924      	ldr	r1, [pc, #144]	; (800b39c <vTaskStartScheduler+0xc0>)
 800b30c:	4824      	ldr	r0, [pc, #144]	; (800b3a0 <vTaskStartScheduler+0xc4>)
 800b30e:	f7ff fe01 	bl	800af14 <xTaskCreateStatic>
 800b312:	4603      	mov	r3, r0
 800b314:	4a23      	ldr	r2, [pc, #140]	; (800b3a4 <vTaskStartScheduler+0xc8>)
 800b316:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b318:	4b22      	ldr	r3, [pc, #136]	; (800b3a4 <vTaskStartScheduler+0xc8>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b320:	2301      	movs	r3, #1
 800b322:	617b      	str	r3, [r7, #20]
 800b324:	e001      	b.n	800b32a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b326:	2300      	movs	r3, #0
 800b328:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d102      	bne.n	800b336 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b330:	f000 fd16 	bl	800bd60 <xTimerCreateTimerTask>
 800b334:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d11b      	bne.n	800b374 <vTaskStartScheduler+0x98>
	__asm volatile
 800b33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b340:	f383 8811 	msr	BASEPRI, r3
 800b344:	f3bf 8f6f 	isb	sy
 800b348:	f3bf 8f4f 	dsb	sy
 800b34c:	613b      	str	r3, [r7, #16]
}
 800b34e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b350:	4b15      	ldr	r3, [pc, #84]	; (800b3a8 <vTaskStartScheduler+0xcc>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	3354      	adds	r3, #84	; 0x54
 800b356:	4a15      	ldr	r2, [pc, #84]	; (800b3ac <vTaskStartScheduler+0xd0>)
 800b358:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b35a:	4b15      	ldr	r3, [pc, #84]	; (800b3b0 <vTaskStartScheduler+0xd4>)
 800b35c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b360:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b362:	4b14      	ldr	r3, [pc, #80]	; (800b3b4 <vTaskStartScheduler+0xd8>)
 800b364:	2201      	movs	r2, #1
 800b366:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b368:	4b13      	ldr	r3, [pc, #76]	; (800b3b8 <vTaskStartScheduler+0xdc>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b36e:	f001 f88b 	bl	800c488 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b372:	e00e      	b.n	800b392 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b37a:	d10a      	bne.n	800b392 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	60fb      	str	r3, [r7, #12]
}
 800b38e:	bf00      	nop
 800b390:	e7fe      	b.n	800b390 <vTaskStartScheduler+0xb4>
}
 800b392:	bf00      	nop
 800b394:	3718      	adds	r7, #24
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	0800d634 	.word	0x0800d634
 800b3a0:	0800b9e5 	.word	0x0800b9e5
 800b3a4:	20000ea4 	.word	0x20000ea4
 800b3a8:	200009ac 	.word	0x200009ac
 800b3ac:	20000194 	.word	0x20000194
 800b3b0:	20000ea0 	.word	0x20000ea0
 800b3b4:	20000e8c 	.word	0x20000e8c
 800b3b8:	20000e84 	.word	0x20000e84

0800b3bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b3c0:	4b04      	ldr	r3, [pc, #16]	; (800b3d4 <vTaskSuspendAll+0x18>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	4a03      	ldr	r2, [pc, #12]	; (800b3d4 <vTaskSuspendAll+0x18>)
 800b3c8:	6013      	str	r3, [r2, #0]
}
 800b3ca:	bf00      	nop
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bc80      	pop	{r7}
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	20000ea8 	.word	0x20000ea8

0800b3d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3e6:	4b42      	ldr	r3, [pc, #264]	; (800b4f0 <xTaskResumeAll+0x118>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d10a      	bne.n	800b404 <xTaskResumeAll+0x2c>
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	603b      	str	r3, [r7, #0]
}
 800b400:	bf00      	nop
 800b402:	e7fe      	b.n	800b402 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b404:	f001 f8b2 	bl	800c56c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b408:	4b39      	ldr	r3, [pc, #228]	; (800b4f0 <xTaskResumeAll+0x118>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	3b01      	subs	r3, #1
 800b40e:	4a38      	ldr	r2, [pc, #224]	; (800b4f0 <xTaskResumeAll+0x118>)
 800b410:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b412:	4b37      	ldr	r3, [pc, #220]	; (800b4f0 <xTaskResumeAll+0x118>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d162      	bne.n	800b4e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b41a:	4b36      	ldr	r3, [pc, #216]	; (800b4f4 <xTaskResumeAll+0x11c>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d05e      	beq.n	800b4e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b422:	e02f      	b.n	800b484 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b424:	4b34      	ldr	r3, [pc, #208]	; (800b4f8 <xTaskResumeAll+0x120>)
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	3318      	adds	r3, #24
 800b430:	4618      	mov	r0, r3
 800b432:	f7ff f861 	bl	800a4f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	3304      	adds	r3, #4
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7ff f85c 	bl	800a4f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b444:	4b2d      	ldr	r3, [pc, #180]	; (800b4fc <xTaskResumeAll+0x124>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d903      	bls.n	800b454 <xTaskResumeAll+0x7c>
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b450:	4a2a      	ldr	r2, [pc, #168]	; (800b4fc <xTaskResumeAll+0x124>)
 800b452:	6013      	str	r3, [r2, #0]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b458:	4613      	mov	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4413      	add	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4a27      	ldr	r2, [pc, #156]	; (800b500 <xTaskResumeAll+0x128>)
 800b462:	441a      	add	r2, r3
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	3304      	adds	r3, #4
 800b468:	4619      	mov	r1, r3
 800b46a:	4610      	mov	r0, r2
 800b46c:	f7fe ffe9 	bl	800a442 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b474:	4b23      	ldr	r3, [pc, #140]	; (800b504 <xTaskResumeAll+0x12c>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d302      	bcc.n	800b484 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b47e:	4b22      	ldr	r3, [pc, #136]	; (800b508 <xTaskResumeAll+0x130>)
 800b480:	2201      	movs	r2, #1
 800b482:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b484:	4b1c      	ldr	r3, [pc, #112]	; (800b4f8 <xTaskResumeAll+0x120>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1cb      	bne.n	800b424 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d001      	beq.n	800b496 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b492:	f000 fb61 	bl	800bb58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b496:	4b1d      	ldr	r3, [pc, #116]	; (800b50c <xTaskResumeAll+0x134>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d010      	beq.n	800b4c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b4a2:	f000 f845 	bl	800b530 <xTaskIncrementTick>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d002      	beq.n	800b4b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b4ac:	4b16      	ldr	r3, [pc, #88]	; (800b508 <xTaskResumeAll+0x130>)
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d1f1      	bne.n	800b4a2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b4be:	4b13      	ldr	r3, [pc, #76]	; (800b50c <xTaskResumeAll+0x134>)
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b4c4:	4b10      	ldr	r3, [pc, #64]	; (800b508 <xTaskResumeAll+0x130>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d009      	beq.n	800b4e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4d0:	4b0f      	ldr	r3, [pc, #60]	; (800b510 <xTaskResumeAll+0x138>)
 800b4d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4d6:	601a      	str	r2, [r3, #0]
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4e0:	f001 f874 	bl	800c5cc <vPortExitCritical>

	return xAlreadyYielded;
 800b4e4:	68bb      	ldr	r3, [r7, #8]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	20000ea8 	.word	0x20000ea8
 800b4f4:	20000e80 	.word	0x20000e80
 800b4f8:	20000e40 	.word	0x20000e40
 800b4fc:	20000e88 	.word	0x20000e88
 800b500:	200009b0 	.word	0x200009b0
 800b504:	200009ac 	.word	0x200009ac
 800b508:	20000e94 	.word	0x20000e94
 800b50c:	20000e90 	.word	0x20000e90
 800b510:	e000ed04 	.word	0xe000ed04

0800b514 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b51a:	4b04      	ldr	r3, [pc, #16]	; (800b52c <xTaskGetTickCount+0x18>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b520:	687b      	ldr	r3, [r7, #4]
}
 800b522:	4618      	mov	r0, r3
 800b524:	370c      	adds	r7, #12
 800b526:	46bd      	mov	sp, r7
 800b528:	bc80      	pop	{r7}
 800b52a:	4770      	bx	lr
 800b52c:	20000e84 	.word	0x20000e84

0800b530 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b536:	2300      	movs	r3, #0
 800b538:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b53a:	4b51      	ldr	r3, [pc, #324]	; (800b680 <xTaskIncrementTick+0x150>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f040 808e 	bne.w	800b660 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b544:	4b4f      	ldr	r3, [pc, #316]	; (800b684 <xTaskIncrementTick+0x154>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3301      	adds	r3, #1
 800b54a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b54c:	4a4d      	ldr	r2, [pc, #308]	; (800b684 <xTaskIncrementTick+0x154>)
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d120      	bne.n	800b59a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b558:	4b4b      	ldr	r3, [pc, #300]	; (800b688 <xTaskIncrementTick+0x158>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00a      	beq.n	800b578 <xTaskIncrementTick+0x48>
	__asm volatile
 800b562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b566:	f383 8811 	msr	BASEPRI, r3
 800b56a:	f3bf 8f6f 	isb	sy
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	603b      	str	r3, [r7, #0]
}
 800b574:	bf00      	nop
 800b576:	e7fe      	b.n	800b576 <xTaskIncrementTick+0x46>
 800b578:	4b43      	ldr	r3, [pc, #268]	; (800b688 <xTaskIncrementTick+0x158>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	60fb      	str	r3, [r7, #12]
 800b57e:	4b43      	ldr	r3, [pc, #268]	; (800b68c <xTaskIncrementTick+0x15c>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a41      	ldr	r2, [pc, #260]	; (800b688 <xTaskIncrementTick+0x158>)
 800b584:	6013      	str	r3, [r2, #0]
 800b586:	4a41      	ldr	r2, [pc, #260]	; (800b68c <xTaskIncrementTick+0x15c>)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6013      	str	r3, [r2, #0]
 800b58c:	4b40      	ldr	r3, [pc, #256]	; (800b690 <xTaskIncrementTick+0x160>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	3301      	adds	r3, #1
 800b592:	4a3f      	ldr	r2, [pc, #252]	; (800b690 <xTaskIncrementTick+0x160>)
 800b594:	6013      	str	r3, [r2, #0]
 800b596:	f000 fadf 	bl	800bb58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b59a:	4b3e      	ldr	r3, [pc, #248]	; (800b694 <xTaskIncrementTick+0x164>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	693a      	ldr	r2, [r7, #16]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d34e      	bcc.n	800b642 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5a4:	4b38      	ldr	r3, [pc, #224]	; (800b688 <xTaskIncrementTick+0x158>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d101      	bne.n	800b5b2 <xTaskIncrementTick+0x82>
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e000      	b.n	800b5b4 <xTaskIncrementTick+0x84>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d004      	beq.n	800b5c2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5b8:	4b36      	ldr	r3, [pc, #216]	; (800b694 <xTaskIncrementTick+0x164>)
 800b5ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5be:	601a      	str	r2, [r3, #0]
					break;
 800b5c0:	e03f      	b.n	800b642 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b5c2:	4b31      	ldr	r3, [pc, #196]	; (800b688 <xTaskIncrementTick+0x158>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b5d2:	693a      	ldr	r2, [r7, #16]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d203      	bcs.n	800b5e2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b5da:	4a2e      	ldr	r2, [pc, #184]	; (800b694 <xTaskIncrementTick+0x164>)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6013      	str	r3, [r2, #0]
						break;
 800b5e0:	e02f      	b.n	800b642 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	3304      	adds	r3, #4
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7fe ff86 	bl	800a4f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d004      	beq.n	800b5fe <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	3318      	adds	r3, #24
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7fe ff7d 	bl	800a4f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b602:	4b25      	ldr	r3, [pc, #148]	; (800b698 <xTaskIncrementTick+0x168>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	429a      	cmp	r2, r3
 800b608:	d903      	bls.n	800b612 <xTaskIncrementTick+0xe2>
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60e:	4a22      	ldr	r2, [pc, #136]	; (800b698 <xTaskIncrementTick+0x168>)
 800b610:	6013      	str	r3, [r2, #0]
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b616:	4613      	mov	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4413      	add	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4a1f      	ldr	r2, [pc, #124]	; (800b69c <xTaskIncrementTick+0x16c>)
 800b620:	441a      	add	r2, r3
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	3304      	adds	r3, #4
 800b626:	4619      	mov	r1, r3
 800b628:	4610      	mov	r0, r2
 800b62a:	f7fe ff0a 	bl	800a442 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b632:	4b1b      	ldr	r3, [pc, #108]	; (800b6a0 <xTaskIncrementTick+0x170>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b638:	429a      	cmp	r2, r3
 800b63a:	d3b3      	bcc.n	800b5a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b63c:	2301      	movs	r3, #1
 800b63e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b640:	e7b0      	b.n	800b5a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b642:	4b17      	ldr	r3, [pc, #92]	; (800b6a0 <xTaskIncrementTick+0x170>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b648:	4914      	ldr	r1, [pc, #80]	; (800b69c <xTaskIncrementTick+0x16c>)
 800b64a:	4613      	mov	r3, r2
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	4413      	add	r3, r2
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	440b      	add	r3, r1
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2b01      	cmp	r3, #1
 800b658:	d907      	bls.n	800b66a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b65a:	2301      	movs	r3, #1
 800b65c:	617b      	str	r3, [r7, #20]
 800b65e:	e004      	b.n	800b66a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b660:	4b10      	ldr	r3, [pc, #64]	; (800b6a4 <xTaskIncrementTick+0x174>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3301      	adds	r3, #1
 800b666:	4a0f      	ldr	r2, [pc, #60]	; (800b6a4 <xTaskIncrementTick+0x174>)
 800b668:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b66a:	4b0f      	ldr	r3, [pc, #60]	; (800b6a8 <xTaskIncrementTick+0x178>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d001      	beq.n	800b676 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b672:	2301      	movs	r3, #1
 800b674:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b676:	697b      	ldr	r3, [r7, #20]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3718      	adds	r7, #24
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	20000ea8 	.word	0x20000ea8
 800b684:	20000e84 	.word	0x20000e84
 800b688:	20000e38 	.word	0x20000e38
 800b68c:	20000e3c 	.word	0x20000e3c
 800b690:	20000e98 	.word	0x20000e98
 800b694:	20000ea0 	.word	0x20000ea0
 800b698:	20000e88 	.word	0x20000e88
 800b69c:	200009b0 	.word	0x200009b0
 800b6a0:	200009ac 	.word	0x200009ac
 800b6a4:	20000e90 	.word	0x20000e90
 800b6a8:	20000e94 	.word	0x20000e94

0800b6ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b6b2:	4b2a      	ldr	r3, [pc, #168]	; (800b75c <vTaskSwitchContext+0xb0>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d003      	beq.n	800b6c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b6ba:	4b29      	ldr	r3, [pc, #164]	; (800b760 <vTaskSwitchContext+0xb4>)
 800b6bc:	2201      	movs	r2, #1
 800b6be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b6c0:	e046      	b.n	800b750 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b6c2:	4b27      	ldr	r3, [pc, #156]	; (800b760 <vTaskSwitchContext+0xb4>)
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b6c8:	4b26      	ldr	r3, [pc, #152]	; (800b764 <vTaskSwitchContext+0xb8>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	60fb      	str	r3, [r7, #12]
 800b6ce:	e010      	b.n	800b6f2 <vTaskSwitchContext+0x46>
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d10a      	bne.n	800b6ec <vTaskSwitchContext+0x40>
	__asm volatile
 800b6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6da:	f383 8811 	msr	BASEPRI, r3
 800b6de:	f3bf 8f6f 	isb	sy
 800b6e2:	f3bf 8f4f 	dsb	sy
 800b6e6:	607b      	str	r3, [r7, #4]
}
 800b6e8:	bf00      	nop
 800b6ea:	e7fe      	b.n	800b6ea <vTaskSwitchContext+0x3e>
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	60fb      	str	r3, [r7, #12]
 800b6f2:	491d      	ldr	r1, [pc, #116]	; (800b768 <vTaskSwitchContext+0xbc>)
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	4413      	add	r3, r2
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	440b      	add	r3, r1
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d0e4      	beq.n	800b6d0 <vTaskSwitchContext+0x24>
 800b706:	68fa      	ldr	r2, [r7, #12]
 800b708:	4613      	mov	r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	4413      	add	r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	4a15      	ldr	r2, [pc, #84]	; (800b768 <vTaskSwitchContext+0xbc>)
 800b712:	4413      	add	r3, r2
 800b714:	60bb      	str	r3, [r7, #8]
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	685a      	ldr	r2, [r3, #4]
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	605a      	str	r2, [r3, #4]
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	685a      	ldr	r2, [r3, #4]
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	3308      	adds	r3, #8
 800b728:	429a      	cmp	r2, r3
 800b72a:	d104      	bne.n	800b736 <vTaskSwitchContext+0x8a>
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	685a      	ldr	r2, [r3, #4]
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	605a      	str	r2, [r3, #4]
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	4a0b      	ldr	r2, [pc, #44]	; (800b76c <vTaskSwitchContext+0xc0>)
 800b73e:	6013      	str	r3, [r2, #0]
 800b740:	4a08      	ldr	r2, [pc, #32]	; (800b764 <vTaskSwitchContext+0xb8>)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b746:	4b09      	ldr	r3, [pc, #36]	; (800b76c <vTaskSwitchContext+0xc0>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	3354      	adds	r3, #84	; 0x54
 800b74c:	4a08      	ldr	r2, [pc, #32]	; (800b770 <vTaskSwitchContext+0xc4>)
 800b74e:	6013      	str	r3, [r2, #0]
}
 800b750:	bf00      	nop
 800b752:	3714      	adds	r7, #20
 800b754:	46bd      	mov	sp, r7
 800b756:	bc80      	pop	{r7}
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	20000ea8 	.word	0x20000ea8
 800b760:	20000e94 	.word	0x20000e94
 800b764:	20000e88 	.word	0x20000e88
 800b768:	200009b0 	.word	0x200009b0
 800b76c:	200009ac 	.word	0x200009ac
 800b770:	20000194 	.word	0x20000194

0800b774 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d10a      	bne.n	800b79a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b788:	f383 8811 	msr	BASEPRI, r3
 800b78c:	f3bf 8f6f 	isb	sy
 800b790:	f3bf 8f4f 	dsb	sy
 800b794:	60fb      	str	r3, [r7, #12]
}
 800b796:	bf00      	nop
 800b798:	e7fe      	b.n	800b798 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b79a:	4b07      	ldr	r3, [pc, #28]	; (800b7b8 <vTaskPlaceOnEventList+0x44>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	3318      	adds	r3, #24
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f7fe fe70 	bl	800a488 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b7a8:	2101      	movs	r1, #1
 800b7aa:	6838      	ldr	r0, [r7, #0]
 800b7ac:	f000 fa84 	bl	800bcb8 <prvAddCurrentTaskToDelayedList>
}
 800b7b0:	bf00      	nop
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	200009ac 	.word	0x200009ac

0800b7bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d10a      	bne.n	800b7e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d2:	f383 8811 	msr	BASEPRI, r3
 800b7d6:	f3bf 8f6f 	isb	sy
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	617b      	str	r3, [r7, #20]
}
 800b7e0:	bf00      	nop
 800b7e2:	e7fe      	b.n	800b7e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7e4:	4b0a      	ldr	r3, [pc, #40]	; (800b810 <vTaskPlaceOnEventListRestricted+0x54>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	3318      	adds	r3, #24
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f7fe fe28 	bl	800a442 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d002      	beq.n	800b7fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b7f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b7fe:	6879      	ldr	r1, [r7, #4]
 800b800:	68b8      	ldr	r0, [r7, #8]
 800b802:	f000 fa59 	bl	800bcb8 <prvAddCurrentTaskToDelayedList>
	}
 800b806:	bf00      	nop
 800b808:	3718      	adds	r7, #24
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	200009ac 	.word	0x200009ac

0800b814 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b086      	sub	sp, #24
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10a      	bne.n	800b840 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82e:	f383 8811 	msr	BASEPRI, r3
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	f3bf 8f4f 	dsb	sy
 800b83a:	60fb      	str	r3, [r7, #12]
}
 800b83c:	bf00      	nop
 800b83e:	e7fe      	b.n	800b83e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	3318      	adds	r3, #24
 800b844:	4618      	mov	r0, r3
 800b846:	f7fe fe57 	bl	800a4f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b84a:	4b1e      	ldr	r3, [pc, #120]	; (800b8c4 <xTaskRemoveFromEventList+0xb0>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d11d      	bne.n	800b88e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	3304      	adds	r3, #4
 800b856:	4618      	mov	r0, r3
 800b858:	f7fe fe4e 	bl	800a4f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b860:	4b19      	ldr	r3, [pc, #100]	; (800b8c8 <xTaskRemoveFromEventList+0xb4>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	429a      	cmp	r2, r3
 800b866:	d903      	bls.n	800b870 <xTaskRemoveFromEventList+0x5c>
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86c:	4a16      	ldr	r2, [pc, #88]	; (800b8c8 <xTaskRemoveFromEventList+0xb4>)
 800b86e:	6013      	str	r3, [r2, #0]
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b874:	4613      	mov	r3, r2
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	4413      	add	r3, r2
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	4a13      	ldr	r2, [pc, #76]	; (800b8cc <xTaskRemoveFromEventList+0xb8>)
 800b87e:	441a      	add	r2, r3
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	3304      	adds	r3, #4
 800b884:	4619      	mov	r1, r3
 800b886:	4610      	mov	r0, r2
 800b888:	f7fe fddb 	bl	800a442 <vListInsertEnd>
 800b88c:	e005      	b.n	800b89a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	3318      	adds	r3, #24
 800b892:	4619      	mov	r1, r3
 800b894:	480e      	ldr	r0, [pc, #56]	; (800b8d0 <xTaskRemoveFromEventList+0xbc>)
 800b896:	f7fe fdd4 	bl	800a442 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b89e:	4b0d      	ldr	r3, [pc, #52]	; (800b8d4 <xTaskRemoveFromEventList+0xc0>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d905      	bls.n	800b8b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b8ac:	4b0a      	ldr	r3, [pc, #40]	; (800b8d8 <xTaskRemoveFromEventList+0xc4>)
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	601a      	str	r2, [r3, #0]
 800b8b2:	e001      	b.n	800b8b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b8b8:	697b      	ldr	r3, [r7, #20]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3718      	adds	r7, #24
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	20000ea8 	.word	0x20000ea8
 800b8c8:	20000e88 	.word	0x20000e88
 800b8cc:	200009b0 	.word	0x200009b0
 800b8d0:	20000e40 	.word	0x20000e40
 800b8d4:	200009ac 	.word	0x200009ac
 800b8d8:	20000e94 	.word	0x20000e94

0800b8dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8e4:	4b06      	ldr	r3, [pc, #24]	; (800b900 <vTaskInternalSetTimeOutState+0x24>)
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b8ec:	4b05      	ldr	r3, [pc, #20]	; (800b904 <vTaskInternalSetTimeOutState+0x28>)
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	605a      	str	r2, [r3, #4]
}
 800b8f4:	bf00      	nop
 800b8f6:	370c      	adds	r7, #12
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bc80      	pop	{r7}
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop
 800b900:	20000e98 	.word	0x20000e98
 800b904:	20000e84 	.word	0x20000e84

0800b908 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b088      	sub	sp, #32
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10a      	bne.n	800b92e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91c:	f383 8811 	msr	BASEPRI, r3
 800b920:	f3bf 8f6f 	isb	sy
 800b924:	f3bf 8f4f 	dsb	sy
 800b928:	613b      	str	r3, [r7, #16]
}
 800b92a:	bf00      	nop
 800b92c:	e7fe      	b.n	800b92c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d10a      	bne.n	800b94a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	60fb      	str	r3, [r7, #12]
}
 800b946:	bf00      	nop
 800b948:	e7fe      	b.n	800b948 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b94a:	f000 fe0f 	bl	800c56c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b94e:	4b1d      	ldr	r3, [pc, #116]	; (800b9c4 <xTaskCheckForTimeOut+0xbc>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	69ba      	ldr	r2, [r7, #24]
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b966:	d102      	bne.n	800b96e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b968:	2300      	movs	r3, #0
 800b96a:	61fb      	str	r3, [r7, #28]
 800b96c:	e023      	b.n	800b9b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	4b15      	ldr	r3, [pc, #84]	; (800b9c8 <xTaskCheckForTimeOut+0xc0>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	429a      	cmp	r2, r3
 800b978:	d007      	beq.n	800b98a <xTaskCheckForTimeOut+0x82>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	69ba      	ldr	r2, [r7, #24]
 800b980:	429a      	cmp	r2, r3
 800b982:	d302      	bcc.n	800b98a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b984:	2301      	movs	r3, #1
 800b986:	61fb      	str	r3, [r7, #28]
 800b988:	e015      	b.n	800b9b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	429a      	cmp	r2, r3
 800b992:	d20b      	bcs.n	800b9ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	1ad2      	subs	r2, r2, r3
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f7ff ff9b 	bl	800b8dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	61fb      	str	r3, [r7, #28]
 800b9aa:	e004      	b.n	800b9b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b9b6:	f000 fe09 	bl	800c5cc <vPortExitCritical>

	return xReturn;
 800b9ba:	69fb      	ldr	r3, [r7, #28]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3720      	adds	r7, #32
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	20000e84 	.word	0x20000e84
 800b9c8:	20000e98 	.word	0x20000e98

0800b9cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9d0:	4b03      	ldr	r3, [pc, #12]	; (800b9e0 <vTaskMissedYield+0x14>)
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	601a      	str	r2, [r3, #0]
}
 800b9d6:	bf00      	nop
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bc80      	pop	{r7}
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop
 800b9e0:	20000e94 	.word	0x20000e94

0800b9e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b9ec:	f000 f852 	bl	800ba94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b9f0:	4b06      	ldr	r3, [pc, #24]	; (800ba0c <prvIdleTask+0x28>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d9f9      	bls.n	800b9ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800b9f8:	4b05      	ldr	r3, [pc, #20]	; (800ba10 <prvIdleTask+0x2c>)
 800b9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9fe:	601a      	str	r2, [r3, #0]
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba08:	e7f0      	b.n	800b9ec <prvIdleTask+0x8>
 800ba0a:	bf00      	nop
 800ba0c:	200009b0 	.word	0x200009b0
 800ba10:	e000ed04 	.word	0xe000ed04

0800ba14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	607b      	str	r3, [r7, #4]
 800ba1e:	e00c      	b.n	800ba3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	4613      	mov	r3, r2
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	4413      	add	r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	4a12      	ldr	r2, [pc, #72]	; (800ba74 <prvInitialiseTaskLists+0x60>)
 800ba2c:	4413      	add	r3, r2
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fe fcdc 	bl	800a3ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	3301      	adds	r3, #1
 800ba38:	607b      	str	r3, [r7, #4]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2b37      	cmp	r3, #55	; 0x37
 800ba3e:	d9ef      	bls.n	800ba20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba40:	480d      	ldr	r0, [pc, #52]	; (800ba78 <prvInitialiseTaskLists+0x64>)
 800ba42:	f7fe fcd3 	bl	800a3ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba46:	480d      	ldr	r0, [pc, #52]	; (800ba7c <prvInitialiseTaskLists+0x68>)
 800ba48:	f7fe fcd0 	bl	800a3ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba4c:	480c      	ldr	r0, [pc, #48]	; (800ba80 <prvInitialiseTaskLists+0x6c>)
 800ba4e:	f7fe fccd 	bl	800a3ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba52:	480c      	ldr	r0, [pc, #48]	; (800ba84 <prvInitialiseTaskLists+0x70>)
 800ba54:	f7fe fcca 	bl	800a3ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba58:	480b      	ldr	r0, [pc, #44]	; (800ba88 <prvInitialiseTaskLists+0x74>)
 800ba5a:	f7fe fcc7 	bl	800a3ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba5e:	4b0b      	ldr	r3, [pc, #44]	; (800ba8c <prvInitialiseTaskLists+0x78>)
 800ba60:	4a05      	ldr	r2, [pc, #20]	; (800ba78 <prvInitialiseTaskLists+0x64>)
 800ba62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba64:	4b0a      	ldr	r3, [pc, #40]	; (800ba90 <prvInitialiseTaskLists+0x7c>)
 800ba66:	4a05      	ldr	r2, [pc, #20]	; (800ba7c <prvInitialiseTaskLists+0x68>)
 800ba68:	601a      	str	r2, [r3, #0]
}
 800ba6a:	bf00      	nop
 800ba6c:	3708      	adds	r7, #8
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	200009b0 	.word	0x200009b0
 800ba78:	20000e10 	.word	0x20000e10
 800ba7c:	20000e24 	.word	0x20000e24
 800ba80:	20000e40 	.word	0x20000e40
 800ba84:	20000e54 	.word	0x20000e54
 800ba88:	20000e6c 	.word	0x20000e6c
 800ba8c:	20000e38 	.word	0x20000e38
 800ba90:	20000e3c 	.word	0x20000e3c

0800ba94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba9a:	e019      	b.n	800bad0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba9c:	f000 fd66 	bl	800c56c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800baa0:	4b10      	ldr	r3, [pc, #64]	; (800bae4 <prvCheckTasksWaitingTermination+0x50>)
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	68db      	ldr	r3, [r3, #12]
 800baa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	3304      	adds	r3, #4
 800baac:	4618      	mov	r0, r3
 800baae:	f7fe fd23 	bl	800a4f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bab2:	4b0d      	ldr	r3, [pc, #52]	; (800bae8 <prvCheckTasksWaitingTermination+0x54>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	3b01      	subs	r3, #1
 800bab8:	4a0b      	ldr	r2, [pc, #44]	; (800bae8 <prvCheckTasksWaitingTermination+0x54>)
 800baba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800babc:	4b0b      	ldr	r3, [pc, #44]	; (800baec <prvCheckTasksWaitingTermination+0x58>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	3b01      	subs	r3, #1
 800bac2:	4a0a      	ldr	r2, [pc, #40]	; (800baec <prvCheckTasksWaitingTermination+0x58>)
 800bac4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bac6:	f000 fd81 	bl	800c5cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 f810 	bl	800baf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bad0:	4b06      	ldr	r3, [pc, #24]	; (800baec <prvCheckTasksWaitingTermination+0x58>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1e1      	bne.n	800ba9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bad8:	bf00      	nop
 800bada:	bf00      	nop
 800badc:	3708      	adds	r7, #8
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	20000e54 	.word	0x20000e54
 800bae8:	20000e80 	.word	0x20000e80
 800baec:	20000e68 	.word	0x20000e68

0800baf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	3354      	adds	r3, #84	; 0x54
 800bafc:	4618      	mov	r0, r3
 800bafe:	f001 fd17 	bl	800d530 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d108      	bne.n	800bb1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb10:	4618      	mov	r0, r3
 800bb12:	f000 feef 	bl	800c8f4 <vPortFree>
				vPortFree( pxTCB );
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 feec 	bl	800c8f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb1c:	e018      	b.n	800bb50 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d103      	bne.n	800bb30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 fee3 	bl	800c8f4 <vPortFree>
	}
 800bb2e:	e00f      	b.n	800bb50 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bb36:	2b02      	cmp	r3, #2
 800bb38:	d00a      	beq.n	800bb50 <prvDeleteTCB+0x60>
	__asm volatile
 800bb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	60fb      	str	r3, [r7, #12]
}
 800bb4c:	bf00      	nop
 800bb4e:	e7fe      	b.n	800bb4e <prvDeleteTCB+0x5e>
	}
 800bb50:	bf00      	nop
 800bb52:	3710      	adds	r7, #16
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb5e:	4b0e      	ldr	r3, [pc, #56]	; (800bb98 <prvResetNextTaskUnblockTime+0x40>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d101      	bne.n	800bb6c <prvResetNextTaskUnblockTime+0x14>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e000      	b.n	800bb6e <prvResetNextTaskUnblockTime+0x16>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d004      	beq.n	800bb7c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb72:	4b0a      	ldr	r3, [pc, #40]	; (800bb9c <prvResetNextTaskUnblockTime+0x44>)
 800bb74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb78:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb7a:	e008      	b.n	800bb8e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bb7c:	4b06      	ldr	r3, [pc, #24]	; (800bb98 <prvResetNextTaskUnblockTime+0x40>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	4a04      	ldr	r2, [pc, #16]	; (800bb9c <prvResetNextTaskUnblockTime+0x44>)
 800bb8c:	6013      	str	r3, [r2, #0]
}
 800bb8e:	bf00      	nop
 800bb90:	370c      	adds	r7, #12
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bc80      	pop	{r7}
 800bb96:	4770      	bx	lr
 800bb98:	20000e38 	.word	0x20000e38
 800bb9c:	20000ea0 	.word	0x20000ea0

0800bba0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bba6:	4b0b      	ldr	r3, [pc, #44]	; (800bbd4 <xTaskGetSchedulerState+0x34>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d102      	bne.n	800bbb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bbae:	2301      	movs	r3, #1
 800bbb0:	607b      	str	r3, [r7, #4]
 800bbb2:	e008      	b.n	800bbc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbb4:	4b08      	ldr	r3, [pc, #32]	; (800bbd8 <xTaskGetSchedulerState+0x38>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d102      	bne.n	800bbc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bbbc:	2302      	movs	r3, #2
 800bbbe:	607b      	str	r3, [r7, #4]
 800bbc0:	e001      	b.n	800bbc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bbc6:	687b      	ldr	r3, [r7, #4]
	}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bc80      	pop	{r7}
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	20000e8c 	.word	0x20000e8c
 800bbd8:	20000ea8 	.word	0x20000ea8

0800bbdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b086      	sub	sp, #24
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d056      	beq.n	800bca0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bbf2:	4b2e      	ldr	r3, [pc, #184]	; (800bcac <xTaskPriorityDisinherit+0xd0>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	693a      	ldr	r2, [r7, #16]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d00a      	beq.n	800bc12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	60fb      	str	r3, [r7, #12]
}
 800bc0e:	bf00      	nop
 800bc10:	e7fe      	b.n	800bc10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d10a      	bne.n	800bc30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1e:	f383 8811 	msr	BASEPRI, r3
 800bc22:	f3bf 8f6f 	isb	sy
 800bc26:	f3bf 8f4f 	dsb	sy
 800bc2a:	60bb      	str	r3, [r7, #8]
}
 800bc2c:	bf00      	nop
 800bc2e:	e7fe      	b.n	800bc2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc34:	1e5a      	subs	r2, r3, #1
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d02c      	beq.n	800bca0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d128      	bne.n	800bca0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	3304      	adds	r3, #4
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fe fc50 	bl	800a4f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc70:	4b0f      	ldr	r3, [pc, #60]	; (800bcb0 <xTaskPriorityDisinherit+0xd4>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d903      	bls.n	800bc80 <xTaskPriorityDisinherit+0xa4>
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc7c:	4a0c      	ldr	r2, [pc, #48]	; (800bcb0 <xTaskPriorityDisinherit+0xd4>)
 800bc7e:	6013      	str	r3, [r2, #0]
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc84:	4613      	mov	r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	4413      	add	r3, r2
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	4a09      	ldr	r2, [pc, #36]	; (800bcb4 <xTaskPriorityDisinherit+0xd8>)
 800bc8e:	441a      	add	r2, r3
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	3304      	adds	r3, #4
 800bc94:	4619      	mov	r1, r3
 800bc96:	4610      	mov	r0, r2
 800bc98:	f7fe fbd3 	bl	800a442 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bca0:	697b      	ldr	r3, [r7, #20]
	}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3718      	adds	r7, #24
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	200009ac 	.word	0x200009ac
 800bcb0:	20000e88 	.word	0x20000e88
 800bcb4:	200009b0 	.word	0x200009b0

0800bcb8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bcc2:	4b21      	ldr	r3, [pc, #132]	; (800bd48 <prvAddCurrentTaskToDelayedList+0x90>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcc8:	4b20      	ldr	r3, [pc, #128]	; (800bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	3304      	adds	r3, #4
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7fe fc12 	bl	800a4f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcda:	d10a      	bne.n	800bcf2 <prvAddCurrentTaskToDelayedList+0x3a>
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d007      	beq.n	800bcf2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bce2:	4b1a      	ldr	r3, [pc, #104]	; (800bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	3304      	adds	r3, #4
 800bce8:	4619      	mov	r1, r3
 800bcea:	4819      	ldr	r0, [pc, #100]	; (800bd50 <prvAddCurrentTaskToDelayedList+0x98>)
 800bcec:	f7fe fba9 	bl	800a442 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bcf0:	e026      	b.n	800bd40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bcfa:	4b14      	ldr	r3, [pc, #80]	; (800bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd02:	68ba      	ldr	r2, [r7, #8]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d209      	bcs.n	800bd1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd0a:	4b12      	ldr	r3, [pc, #72]	; (800bd54 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	4b0f      	ldr	r3, [pc, #60]	; (800bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	3304      	adds	r3, #4
 800bd14:	4619      	mov	r1, r3
 800bd16:	4610      	mov	r0, r2
 800bd18:	f7fe fbb6 	bl	800a488 <vListInsert>
}
 800bd1c:	e010      	b.n	800bd40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd1e:	4b0e      	ldr	r3, [pc, #56]	; (800bd58 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	4b0a      	ldr	r3, [pc, #40]	; (800bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	3304      	adds	r3, #4
 800bd28:	4619      	mov	r1, r3
 800bd2a:	4610      	mov	r0, r2
 800bd2c:	f7fe fbac 	bl	800a488 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd30:	4b0a      	ldr	r3, [pc, #40]	; (800bd5c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	68ba      	ldr	r2, [r7, #8]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d202      	bcs.n	800bd40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bd3a:	4a08      	ldr	r2, [pc, #32]	; (800bd5c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	6013      	str	r3, [r2, #0]
}
 800bd40:	bf00      	nop
 800bd42:	3710      	adds	r7, #16
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	20000e84 	.word	0x20000e84
 800bd4c:	200009ac 	.word	0x200009ac
 800bd50:	20000e6c 	.word	0x20000e6c
 800bd54:	20000e3c 	.word	0x20000e3c
 800bd58:	20000e38 	.word	0x20000e38
 800bd5c:	20000ea0 	.word	0x20000ea0

0800bd60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b08a      	sub	sp, #40	; 0x28
 800bd64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bd66:	2300      	movs	r3, #0
 800bd68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bd6a:	f000 facb 	bl	800c304 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bd6e:	4b1c      	ldr	r3, [pc, #112]	; (800bde0 <xTimerCreateTimerTask+0x80>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d021      	beq.n	800bdba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bd76:	2300      	movs	r3, #0
 800bd78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd7e:	1d3a      	adds	r2, r7, #4
 800bd80:	f107 0108 	add.w	r1, r7, #8
 800bd84:	f107 030c 	add.w	r3, r7, #12
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7fe fb15 	bl	800a3b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd8e:	6879      	ldr	r1, [r7, #4]
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	9202      	str	r2, [sp, #8]
 800bd96:	9301      	str	r3, [sp, #4]
 800bd98:	2302      	movs	r3, #2
 800bd9a:	9300      	str	r3, [sp, #0]
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	460a      	mov	r2, r1
 800bda0:	4910      	ldr	r1, [pc, #64]	; (800bde4 <xTimerCreateTimerTask+0x84>)
 800bda2:	4811      	ldr	r0, [pc, #68]	; (800bde8 <xTimerCreateTimerTask+0x88>)
 800bda4:	f7ff f8b6 	bl	800af14 <xTaskCreateStatic>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	4a10      	ldr	r2, [pc, #64]	; (800bdec <xTimerCreateTimerTask+0x8c>)
 800bdac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bdae:	4b0f      	ldr	r3, [pc, #60]	; (800bdec <xTimerCreateTimerTask+0x8c>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d001      	beq.n	800bdba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10a      	bne.n	800bdd6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	613b      	str	r3, [r7, #16]
}
 800bdd2:	bf00      	nop
 800bdd4:	e7fe      	b.n	800bdd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bdd6:	697b      	ldr	r3, [r7, #20]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3718      	adds	r7, #24
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	20000edc 	.word	0x20000edc
 800bde4:	0800d63c 	.word	0x0800d63c
 800bde8:	0800bf0d 	.word	0x0800bf0d
 800bdec:	20000ee0 	.word	0x20000ee0

0800bdf0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b08a      	sub	sp, #40	; 0x28
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
 800bdfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bdfe:	2300      	movs	r3, #0
 800be00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10a      	bne.n	800be1e <xTimerGenericCommand+0x2e>
	__asm volatile
 800be08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0c:	f383 8811 	msr	BASEPRI, r3
 800be10:	f3bf 8f6f 	isb	sy
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	623b      	str	r3, [r7, #32]
}
 800be1a:	bf00      	nop
 800be1c:	e7fe      	b.n	800be1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800be1e:	4b1a      	ldr	r3, [pc, #104]	; (800be88 <xTimerGenericCommand+0x98>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d02a      	beq.n	800be7c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	2b05      	cmp	r3, #5
 800be36:	dc18      	bgt.n	800be6a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800be38:	f7ff feb2 	bl	800bba0 <xTaskGetSchedulerState>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b02      	cmp	r3, #2
 800be40:	d109      	bne.n	800be56 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800be42:	4b11      	ldr	r3, [pc, #68]	; (800be88 <xTimerGenericCommand+0x98>)
 800be44:	6818      	ldr	r0, [r3, #0]
 800be46:	f107 0110 	add.w	r1, r7, #16
 800be4a:	2300      	movs	r3, #0
 800be4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be4e:	f7fe fc7f 	bl	800a750 <xQueueGenericSend>
 800be52:	6278      	str	r0, [r7, #36]	; 0x24
 800be54:	e012      	b.n	800be7c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800be56:	4b0c      	ldr	r3, [pc, #48]	; (800be88 <xTimerGenericCommand+0x98>)
 800be58:	6818      	ldr	r0, [r3, #0]
 800be5a:	f107 0110 	add.w	r1, r7, #16
 800be5e:	2300      	movs	r3, #0
 800be60:	2200      	movs	r2, #0
 800be62:	f7fe fc75 	bl	800a750 <xQueueGenericSend>
 800be66:	6278      	str	r0, [r7, #36]	; 0x24
 800be68:	e008      	b.n	800be7c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800be6a:	4b07      	ldr	r3, [pc, #28]	; (800be88 <xTimerGenericCommand+0x98>)
 800be6c:	6818      	ldr	r0, [r3, #0]
 800be6e:	f107 0110 	add.w	r1, r7, #16
 800be72:	2300      	movs	r3, #0
 800be74:	683a      	ldr	r2, [r7, #0]
 800be76:	f7fe fd69 	bl	800a94c <xQueueGenericSendFromISR>
 800be7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800be7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3728      	adds	r7, #40	; 0x28
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	20000edc 	.word	0x20000edc

0800be8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b088      	sub	sp, #32
 800be90:	af02      	add	r7, sp, #8
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be96:	4b1c      	ldr	r3, [pc, #112]	; (800bf08 <prvProcessExpiredTimer+0x7c>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	3304      	adds	r3, #4
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7fe fb27 	bl	800a4f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	69db      	ldr	r3, [r3, #28]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d122      	bne.n	800bef8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	699a      	ldr	r2, [r3, #24]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	18d1      	adds	r1, r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	683a      	ldr	r2, [r7, #0]
 800bebe:	6978      	ldr	r0, [r7, #20]
 800bec0:	f000 f8c8 	bl	800c054 <prvInsertTimerInActiveList>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d016      	beq.n	800bef8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800beca:	2300      	movs	r3, #0
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	2300      	movs	r3, #0
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	2100      	movs	r1, #0
 800bed4:	6978      	ldr	r0, [r7, #20]
 800bed6:	f7ff ff8b 	bl	800bdf0 <xTimerGenericCommand>
 800beda:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d10a      	bne.n	800bef8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800bee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee6:	f383 8811 	msr	BASEPRI, r3
 800beea:	f3bf 8f6f 	isb	sy
 800beee:	f3bf 8f4f 	dsb	sy
 800bef2:	60fb      	str	r3, [r7, #12]
}
 800bef4:	bf00      	nop
 800bef6:	e7fe      	b.n	800bef6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befc:	6978      	ldr	r0, [r7, #20]
 800befe:	4798      	blx	r3
}
 800bf00:	bf00      	nop
 800bf02:	3718      	adds	r7, #24
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	20000ed4 	.word	0x20000ed4

0800bf0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf14:	f107 0308 	add.w	r3, r7, #8
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f000 f857 	bl	800bfcc <prvGetNextExpireTime>
 800bf1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	4619      	mov	r1, r3
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	f000 f803 	bl	800bf30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bf2a:	f000 f8d5 	bl	800c0d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf2e:	e7f1      	b.n	800bf14 <prvTimerTask+0x8>

0800bf30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bf3a:	f7ff fa3f 	bl	800b3bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf3e:	f107 0308 	add.w	r3, r7, #8
 800bf42:	4618      	mov	r0, r3
 800bf44:	f000 f866 	bl	800c014 <prvSampleTimeNow>
 800bf48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d130      	bne.n	800bfb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10a      	bne.n	800bf6c <prvProcessTimerOrBlockTask+0x3c>
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d806      	bhi.n	800bf6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bf5e:	f7ff fa3b 	bl	800b3d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bf62:	68f9      	ldr	r1, [r7, #12]
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f7ff ff91 	bl	800be8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bf6a:	e024      	b.n	800bfb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d008      	beq.n	800bf84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf72:	4b13      	ldr	r3, [pc, #76]	; (800bfc0 <prvProcessTimerOrBlockTask+0x90>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	bf0c      	ite	eq
 800bf7c:	2301      	moveq	r3, #1
 800bf7e:	2300      	movne	r3, #0
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bf84:	4b0f      	ldr	r3, [pc, #60]	; (800bfc4 <prvProcessTimerOrBlockTask+0x94>)
 800bf86:	6818      	ldr	r0, [r3, #0]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	1ad3      	subs	r3, r2, r3
 800bf8e:	683a      	ldr	r2, [r7, #0]
 800bf90:	4619      	mov	r1, r3
 800bf92:	f7fe ff8b 	bl	800aeac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bf96:	f7ff fa1f 	bl	800b3d8 <xTaskResumeAll>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d10a      	bne.n	800bfb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bfa0:	4b09      	ldr	r3, [pc, #36]	; (800bfc8 <prvProcessTimerOrBlockTask+0x98>)
 800bfa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfa6:	601a      	str	r2, [r3, #0]
 800bfa8:	f3bf 8f4f 	dsb	sy
 800bfac:	f3bf 8f6f 	isb	sy
}
 800bfb0:	e001      	b.n	800bfb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bfb2:	f7ff fa11 	bl	800b3d8 <xTaskResumeAll>
}
 800bfb6:	bf00      	nop
 800bfb8:	3710      	adds	r7, #16
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	20000ed8 	.word	0x20000ed8
 800bfc4:	20000edc 	.word	0x20000edc
 800bfc8:	e000ed04 	.word	0xe000ed04

0800bfcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b085      	sub	sp, #20
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bfd4:	4b0e      	ldr	r3, [pc, #56]	; (800c010 <prvGetNextExpireTime+0x44>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	bf0c      	ite	eq
 800bfde:	2301      	moveq	r3, #1
 800bfe0:	2300      	movne	r3, #0
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d105      	bne.n	800bffe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bff2:	4b07      	ldr	r3, [pc, #28]	; (800c010 <prvGetNextExpireTime+0x44>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	60fb      	str	r3, [r7, #12]
 800bffc:	e001      	b.n	800c002 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bffe:	2300      	movs	r3, #0
 800c000:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c002:	68fb      	ldr	r3, [r7, #12]
}
 800c004:	4618      	mov	r0, r3
 800c006:	3714      	adds	r7, #20
 800c008:	46bd      	mov	sp, r7
 800c00a:	bc80      	pop	{r7}
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop
 800c010:	20000ed4 	.word	0x20000ed4

0800c014 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c01c:	f7ff fa7a 	bl	800b514 <xTaskGetTickCount>
 800c020:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c022:	4b0b      	ldr	r3, [pc, #44]	; (800c050 <prvSampleTimeNow+0x3c>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d205      	bcs.n	800c038 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c02c:	f000 f908 	bl	800c240 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	601a      	str	r2, [r3, #0]
 800c036:	e002      	b.n	800c03e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c03e:	4a04      	ldr	r2, [pc, #16]	; (800c050 <prvSampleTimeNow+0x3c>)
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c044:	68fb      	ldr	r3, [r7, #12]
}
 800c046:	4618      	mov	r0, r3
 800c048:	3710      	adds	r7, #16
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	20000ee4 	.word	0x20000ee4

0800c054 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b086      	sub	sp, #24
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	607a      	str	r2, [r7, #4]
 800c060:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c062:	2300      	movs	r3, #0
 800c064:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	68ba      	ldr	r2, [r7, #8]
 800c06a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	68fa      	ldr	r2, [r7, #12]
 800c070:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c072:	68ba      	ldr	r2, [r7, #8]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	429a      	cmp	r2, r3
 800c078:	d812      	bhi.n	800c0a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	1ad2      	subs	r2, r2, r3
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	699b      	ldr	r3, [r3, #24]
 800c084:	429a      	cmp	r2, r3
 800c086:	d302      	bcc.n	800c08e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c088:	2301      	movs	r3, #1
 800c08a:	617b      	str	r3, [r7, #20]
 800c08c:	e01b      	b.n	800c0c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c08e:	4b10      	ldr	r3, [pc, #64]	; (800c0d0 <prvInsertTimerInActiveList+0x7c>)
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	3304      	adds	r3, #4
 800c096:	4619      	mov	r1, r3
 800c098:	4610      	mov	r0, r2
 800c09a:	f7fe f9f5 	bl	800a488 <vListInsert>
 800c09e:	e012      	b.n	800c0c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d206      	bcs.n	800c0b6 <prvInsertTimerInActiveList+0x62>
 800c0a8:	68ba      	ldr	r2, [r7, #8]
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d302      	bcc.n	800c0b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	617b      	str	r3, [r7, #20]
 800c0b4:	e007      	b.n	800c0c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0b6:	4b07      	ldr	r3, [pc, #28]	; (800c0d4 <prvInsertTimerInActiveList+0x80>)
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	3304      	adds	r3, #4
 800c0be:	4619      	mov	r1, r3
 800c0c0:	4610      	mov	r0, r2
 800c0c2:	f7fe f9e1 	bl	800a488 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c0c6:	697b      	ldr	r3, [r7, #20]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3718      	adds	r7, #24
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	20000ed8 	.word	0x20000ed8
 800c0d4:	20000ed4 	.word	0x20000ed4

0800c0d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b08e      	sub	sp, #56	; 0x38
 800c0dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c0de:	e09d      	b.n	800c21c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	da18      	bge.n	800c118 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c0e6:	1d3b      	adds	r3, r7, #4
 800c0e8:	3304      	adds	r3, #4
 800c0ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d10a      	bne.n	800c108 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f6:	f383 8811 	msr	BASEPRI, r3
 800c0fa:	f3bf 8f6f 	isb	sy
 800c0fe:	f3bf 8f4f 	dsb	sy
 800c102:	61fb      	str	r3, [r7, #28]
}
 800c104:	bf00      	nop
 800c106:	e7fe      	b.n	800c106 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c10e:	6850      	ldr	r0, [r2, #4]
 800c110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c112:	6892      	ldr	r2, [r2, #8]
 800c114:	4611      	mov	r1, r2
 800c116:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	db7d      	blt.n	800c21a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c124:	695b      	ldr	r3, [r3, #20]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d004      	beq.n	800c134 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	3304      	adds	r3, #4
 800c12e:	4618      	mov	r0, r3
 800c130:	f7fe f9e2 	bl	800a4f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c134:	463b      	mov	r3, r7
 800c136:	4618      	mov	r0, r3
 800c138:	f7ff ff6c 	bl	800c014 <prvSampleTimeNow>
 800c13c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2b09      	cmp	r3, #9
 800c142:	d86b      	bhi.n	800c21c <prvProcessReceivedCommands+0x144>
 800c144:	a201      	add	r2, pc, #4	; (adr r2, 800c14c <prvProcessReceivedCommands+0x74>)
 800c146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c14a:	bf00      	nop
 800c14c:	0800c175 	.word	0x0800c175
 800c150:	0800c175 	.word	0x0800c175
 800c154:	0800c175 	.word	0x0800c175
 800c158:	0800c21d 	.word	0x0800c21d
 800c15c:	0800c1d1 	.word	0x0800c1d1
 800c160:	0800c209 	.word	0x0800c209
 800c164:	0800c175 	.word	0x0800c175
 800c168:	0800c175 	.word	0x0800c175
 800c16c:	0800c21d 	.word	0x0800c21d
 800c170:	0800c1d1 	.word	0x0800c1d1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c174:	68ba      	ldr	r2, [r7, #8]
 800c176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c178:	699b      	ldr	r3, [r3, #24]
 800c17a:	18d1      	adds	r1, r2, r3
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c182:	f7ff ff67 	bl	800c054 <prvInsertTimerInActiveList>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d047      	beq.n	800c21c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c192:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c196:	69db      	ldr	r3, [r3, #28]
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d13f      	bne.n	800c21c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c19c:	68ba      	ldr	r2, [r7, #8]
 800c19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a0:	699b      	ldr	r3, [r3, #24]
 800c1a2:	441a      	add	r2, r3
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	9300      	str	r3, [sp, #0]
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	2100      	movs	r1, #0
 800c1ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1ae:	f7ff fe1f 	bl	800bdf0 <xTimerGenericCommand>
 800c1b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c1b4:	6a3b      	ldr	r3, [r7, #32]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d130      	bne.n	800c21c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800c1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1be:	f383 8811 	msr	BASEPRI, r3
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	f3bf 8f4f 	dsb	sy
 800c1ca:	61bb      	str	r3, [r7, #24]
}
 800c1cc:	bf00      	nop
 800c1ce:	e7fe      	b.n	800c1ce <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c1d0:	68ba      	ldr	r2, [r7, #8]
 800c1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d8:	699b      	ldr	r3, [r3, #24]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d10a      	bne.n	800c1f4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	617b      	str	r3, [r7, #20]
}
 800c1f0:	bf00      	nop
 800c1f2:	e7fe      	b.n	800c1f2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f6:	699a      	ldr	r2, [r3, #24]
 800c1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fa:	18d1      	adds	r1, r2, r3
 800c1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c202:	f7ff ff27 	bl	800c054 <prvInsertTimerInActiveList>
					break;
 800c206:	e009      	b.n	800c21c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d104      	bne.n	800c21c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800c212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c214:	f000 fb6e 	bl	800c8f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c218:	e000      	b.n	800c21c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c21a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c21c:	4b07      	ldr	r3, [pc, #28]	; (800c23c <prvProcessReceivedCommands+0x164>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	1d39      	adds	r1, r7, #4
 800c222:	2200      	movs	r2, #0
 800c224:	4618      	mov	r0, r3
 800c226:	f7fe fc29 	bl	800aa7c <xQueueReceive>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f47f af57 	bne.w	800c0e0 <prvProcessReceivedCommands+0x8>
	}
}
 800c232:	bf00      	nop
 800c234:	bf00      	nop
 800c236:	3730      	adds	r7, #48	; 0x30
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	20000edc 	.word	0x20000edc

0800c240 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b088      	sub	sp, #32
 800c244:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c246:	e045      	b.n	800c2d4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c248:	4b2c      	ldr	r3, [pc, #176]	; (800c2fc <prvSwitchTimerLists+0xbc>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c252:	4b2a      	ldr	r3, [pc, #168]	; (800c2fc <prvSwitchTimerLists+0xbc>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	3304      	adds	r3, #4
 800c260:	4618      	mov	r0, r3
 800c262:	f7fe f949 	bl	800a4f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	69db      	ldr	r3, [r3, #28]
 800c272:	2b01      	cmp	r3, #1
 800c274:	d12e      	bne.n	800c2d4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	699b      	ldr	r3, [r3, #24]
 800c27a:	693a      	ldr	r2, [r7, #16]
 800c27c:	4413      	add	r3, r2
 800c27e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c280:	68ba      	ldr	r2, [r7, #8]
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	429a      	cmp	r2, r3
 800c286:	d90e      	bls.n	800c2a6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	68ba      	ldr	r2, [r7, #8]
 800c28c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c294:	4b19      	ldr	r3, [pc, #100]	; (800c2fc <prvSwitchTimerLists+0xbc>)
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	3304      	adds	r3, #4
 800c29c:	4619      	mov	r1, r3
 800c29e:	4610      	mov	r0, r2
 800c2a0:	f7fe f8f2 	bl	800a488 <vListInsert>
 800c2a4:	e016      	b.n	800c2d4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	693a      	ldr	r2, [r7, #16]
 800c2ae:	2100      	movs	r1, #0
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	f7ff fd9d 	bl	800bdf0 <xTimerGenericCommand>
 800c2b6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d10a      	bne.n	800c2d4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800c2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c2:	f383 8811 	msr	BASEPRI, r3
 800c2c6:	f3bf 8f6f 	isb	sy
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	603b      	str	r3, [r7, #0]
}
 800c2d0:	bf00      	nop
 800c2d2:	e7fe      	b.n	800c2d2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2d4:	4b09      	ldr	r3, [pc, #36]	; (800c2fc <prvSwitchTimerLists+0xbc>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d1b4      	bne.n	800c248 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c2de:	4b07      	ldr	r3, [pc, #28]	; (800c2fc <prvSwitchTimerLists+0xbc>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2e4:	4b06      	ldr	r3, [pc, #24]	; (800c300 <prvSwitchTimerLists+0xc0>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a04      	ldr	r2, [pc, #16]	; (800c2fc <prvSwitchTimerLists+0xbc>)
 800c2ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c2ec:	4a04      	ldr	r2, [pc, #16]	; (800c300 <prvSwitchTimerLists+0xc0>)
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	6013      	str	r3, [r2, #0]
}
 800c2f2:	bf00      	nop
 800c2f4:	3718      	adds	r7, #24
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	20000ed4 	.word	0x20000ed4
 800c300:	20000ed8 	.word	0x20000ed8

0800c304 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c30a:	f000 f92f 	bl	800c56c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c30e:	4b15      	ldr	r3, [pc, #84]	; (800c364 <prvCheckForValidListAndQueue+0x60>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d120      	bne.n	800c358 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c316:	4814      	ldr	r0, [pc, #80]	; (800c368 <prvCheckForValidListAndQueue+0x64>)
 800c318:	f7fe f868 	bl	800a3ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c31c:	4813      	ldr	r0, [pc, #76]	; (800c36c <prvCheckForValidListAndQueue+0x68>)
 800c31e:	f7fe f865 	bl	800a3ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c322:	4b13      	ldr	r3, [pc, #76]	; (800c370 <prvCheckForValidListAndQueue+0x6c>)
 800c324:	4a10      	ldr	r2, [pc, #64]	; (800c368 <prvCheckForValidListAndQueue+0x64>)
 800c326:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c328:	4b12      	ldr	r3, [pc, #72]	; (800c374 <prvCheckForValidListAndQueue+0x70>)
 800c32a:	4a10      	ldr	r2, [pc, #64]	; (800c36c <prvCheckForValidListAndQueue+0x68>)
 800c32c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c32e:	2300      	movs	r3, #0
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	4b11      	ldr	r3, [pc, #68]	; (800c378 <prvCheckForValidListAndQueue+0x74>)
 800c334:	4a11      	ldr	r2, [pc, #68]	; (800c37c <prvCheckForValidListAndQueue+0x78>)
 800c336:	2110      	movs	r1, #16
 800c338:	200a      	movs	r0, #10
 800c33a:	f7fe f96f 	bl	800a61c <xQueueGenericCreateStatic>
 800c33e:	4603      	mov	r3, r0
 800c340:	4a08      	ldr	r2, [pc, #32]	; (800c364 <prvCheckForValidListAndQueue+0x60>)
 800c342:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c344:	4b07      	ldr	r3, [pc, #28]	; (800c364 <prvCheckForValidListAndQueue+0x60>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d005      	beq.n	800c358 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c34c:	4b05      	ldr	r3, [pc, #20]	; (800c364 <prvCheckForValidListAndQueue+0x60>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	490b      	ldr	r1, [pc, #44]	; (800c380 <prvCheckForValidListAndQueue+0x7c>)
 800c352:	4618      	mov	r0, r3
 800c354:	f7fe fd82 	bl	800ae5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c358:	f000 f938 	bl	800c5cc <vPortExitCritical>
}
 800c35c:	bf00      	nop
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	20000edc 	.word	0x20000edc
 800c368:	20000eac 	.word	0x20000eac
 800c36c:	20000ec0 	.word	0x20000ec0
 800c370:	20000ed4 	.word	0x20000ed4
 800c374:	20000ed8 	.word	0x20000ed8
 800c378:	20000f88 	.word	0x20000f88
 800c37c:	20000ee8 	.word	0x20000ee8
 800c380:	0800d644 	.word	0x0800d644

0800c384 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c384:	b480      	push	{r7}
 800c386:	b085      	sub	sp, #20
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	3b04      	subs	r3, #4
 800c394:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c39c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	3b04      	subs	r3, #4
 800c3a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	f023 0201 	bic.w	r2, r3, #1
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	3b04      	subs	r3, #4
 800c3b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c3b4:	4a08      	ldr	r2, [pc, #32]	; (800c3d8 <pxPortInitialiseStack+0x54>)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	3b14      	subs	r3, #20
 800c3be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	3b20      	subs	r3, #32
 800c3ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3714      	adds	r7, #20
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bc80      	pop	{r7}
 800c3d6:	4770      	bx	lr
 800c3d8:	0800c3dd 	.word	0x0800c3dd

0800c3dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c3e6:	4b12      	ldr	r3, [pc, #72]	; (800c430 <prvTaskExitError+0x54>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3ee:	d00a      	beq.n	800c406 <prvTaskExitError+0x2a>
	__asm volatile
 800c3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	60fb      	str	r3, [r7, #12]
}
 800c402:	bf00      	nop
 800c404:	e7fe      	b.n	800c404 <prvTaskExitError+0x28>
	__asm volatile
 800c406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	60bb      	str	r3, [r7, #8]
}
 800c418:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c41a:	bf00      	nop
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d0fc      	beq.n	800c41c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c422:	bf00      	nop
 800c424:	bf00      	nop
 800c426:	3714      	adds	r7, #20
 800c428:	46bd      	mov	sp, r7
 800c42a:	bc80      	pop	{r7}
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop
 800c430:	20000130 	.word	0x20000130
	...

0800c440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c440:	4b07      	ldr	r3, [pc, #28]	; (800c460 <pxCurrentTCBConst2>)
 800c442:	6819      	ldr	r1, [r3, #0]
 800c444:	6808      	ldr	r0, [r1, #0]
 800c446:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c44a:	f380 8809 	msr	PSP, r0
 800c44e:	f3bf 8f6f 	isb	sy
 800c452:	f04f 0000 	mov.w	r0, #0
 800c456:	f380 8811 	msr	BASEPRI, r0
 800c45a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c45e:	4770      	bx	lr

0800c460 <pxCurrentTCBConst2>:
 800c460:	200009ac 	.word	0x200009ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c464:	bf00      	nop
 800c466:	bf00      	nop

0800c468 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c468:	4806      	ldr	r0, [pc, #24]	; (800c484 <prvPortStartFirstTask+0x1c>)
 800c46a:	6800      	ldr	r0, [r0, #0]
 800c46c:	6800      	ldr	r0, [r0, #0]
 800c46e:	f380 8808 	msr	MSP, r0
 800c472:	b662      	cpsie	i
 800c474:	b661      	cpsie	f
 800c476:	f3bf 8f4f 	dsb	sy
 800c47a:	f3bf 8f6f 	isb	sy
 800c47e:	df00      	svc	0
 800c480:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c482:	bf00      	nop
 800c484:	e000ed08 	.word	0xe000ed08

0800c488 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c48e:	4b32      	ldr	r3, [pc, #200]	; (800c558 <xPortStartScheduler+0xd0>)
 800c490:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	b2db      	uxtb	r3, r3
 800c498:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	22ff      	movs	r2, #255	; 0xff
 800c49e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4a8:	78fb      	ldrb	r3, [r7, #3]
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c4b0:	b2da      	uxtb	r2, r3
 800c4b2:	4b2a      	ldr	r3, [pc, #168]	; (800c55c <xPortStartScheduler+0xd4>)
 800c4b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4b6:	4b2a      	ldr	r3, [pc, #168]	; (800c560 <xPortStartScheduler+0xd8>)
 800c4b8:	2207      	movs	r2, #7
 800c4ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4bc:	e009      	b.n	800c4d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c4be:	4b28      	ldr	r3, [pc, #160]	; (800c560 <xPortStartScheduler+0xd8>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	3b01      	subs	r3, #1
 800c4c4:	4a26      	ldr	r2, [pc, #152]	; (800c560 <xPortStartScheduler+0xd8>)
 800c4c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4c8:	78fb      	ldrb	r3, [r7, #3]
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	005b      	lsls	r3, r3, #1
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4d2:	78fb      	ldrb	r3, [r7, #3]
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4da:	2b80      	cmp	r3, #128	; 0x80
 800c4dc:	d0ef      	beq.n	800c4be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4de:	4b20      	ldr	r3, [pc, #128]	; (800c560 <xPortStartScheduler+0xd8>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f1c3 0307 	rsb	r3, r3, #7
 800c4e6:	2b04      	cmp	r3, #4
 800c4e8:	d00a      	beq.n	800c500 <xPortStartScheduler+0x78>
	__asm volatile
 800c4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ee:	f383 8811 	msr	BASEPRI, r3
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	60bb      	str	r3, [r7, #8]
}
 800c4fc:	bf00      	nop
 800c4fe:	e7fe      	b.n	800c4fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c500:	4b17      	ldr	r3, [pc, #92]	; (800c560 <xPortStartScheduler+0xd8>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	021b      	lsls	r3, r3, #8
 800c506:	4a16      	ldr	r2, [pc, #88]	; (800c560 <xPortStartScheduler+0xd8>)
 800c508:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c50a:	4b15      	ldr	r3, [pc, #84]	; (800c560 <xPortStartScheduler+0xd8>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c512:	4a13      	ldr	r2, [pc, #76]	; (800c560 <xPortStartScheduler+0xd8>)
 800c514:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	b2da      	uxtb	r2, r3
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c51e:	4b11      	ldr	r3, [pc, #68]	; (800c564 <xPortStartScheduler+0xdc>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a10      	ldr	r2, [pc, #64]	; (800c564 <xPortStartScheduler+0xdc>)
 800c524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c528:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c52a:	4b0e      	ldr	r3, [pc, #56]	; (800c564 <xPortStartScheduler+0xdc>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4a0d      	ldr	r2, [pc, #52]	; (800c564 <xPortStartScheduler+0xdc>)
 800c530:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c534:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c536:	f000 f8b9 	bl	800c6ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c53a:	4b0b      	ldr	r3, [pc, #44]	; (800c568 <xPortStartScheduler+0xe0>)
 800c53c:	2200      	movs	r2, #0
 800c53e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c540:	f7ff ff92 	bl	800c468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c544:	f7ff f8b2 	bl	800b6ac <vTaskSwitchContext>
	prvTaskExitError();
 800c548:	f7ff ff48 	bl	800c3dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c54c:	2300      	movs	r3, #0
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3710      	adds	r7, #16
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	e000e400 	.word	0xe000e400
 800c55c:	20000fd8 	.word	0x20000fd8
 800c560:	20000fdc 	.word	0x20000fdc
 800c564:	e000ed20 	.word	0xe000ed20
 800c568:	20000130 	.word	0x20000130

0800c56c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
	__asm volatile
 800c572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c576:	f383 8811 	msr	BASEPRI, r3
 800c57a:	f3bf 8f6f 	isb	sy
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	607b      	str	r3, [r7, #4]
}
 800c584:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c586:	4b0f      	ldr	r3, [pc, #60]	; (800c5c4 <vPortEnterCritical+0x58>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	3301      	adds	r3, #1
 800c58c:	4a0d      	ldr	r2, [pc, #52]	; (800c5c4 <vPortEnterCritical+0x58>)
 800c58e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c590:	4b0c      	ldr	r3, [pc, #48]	; (800c5c4 <vPortEnterCritical+0x58>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	2b01      	cmp	r3, #1
 800c596:	d10f      	bne.n	800c5b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c598:	4b0b      	ldr	r3, [pc, #44]	; (800c5c8 <vPortEnterCritical+0x5c>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d00a      	beq.n	800c5b8 <vPortEnterCritical+0x4c>
	__asm volatile
 800c5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a6:	f383 8811 	msr	BASEPRI, r3
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	f3bf 8f4f 	dsb	sy
 800c5b2:	603b      	str	r3, [r7, #0]
}
 800c5b4:	bf00      	nop
 800c5b6:	e7fe      	b.n	800c5b6 <vPortEnterCritical+0x4a>
	}
}
 800c5b8:	bf00      	nop
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bc80      	pop	{r7}
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	20000130 	.word	0x20000130
 800c5c8:	e000ed04 	.word	0xe000ed04

0800c5cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b083      	sub	sp, #12
 800c5d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5d2:	4b11      	ldr	r3, [pc, #68]	; (800c618 <vPortExitCritical+0x4c>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d10a      	bne.n	800c5f0 <vPortExitCritical+0x24>
	__asm volatile
 800c5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	f3bf 8f4f 	dsb	sy
 800c5ea:	607b      	str	r3, [r7, #4]
}
 800c5ec:	bf00      	nop
 800c5ee:	e7fe      	b.n	800c5ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c5f0:	4b09      	ldr	r3, [pc, #36]	; (800c618 <vPortExitCritical+0x4c>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	3b01      	subs	r3, #1
 800c5f6:	4a08      	ldr	r2, [pc, #32]	; (800c618 <vPortExitCritical+0x4c>)
 800c5f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5fa:	4b07      	ldr	r3, [pc, #28]	; (800c618 <vPortExitCritical+0x4c>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d105      	bne.n	800c60e <vPortExitCritical+0x42>
 800c602:	2300      	movs	r3, #0
 800c604:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	f383 8811 	msr	BASEPRI, r3
}
 800c60c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c60e:	bf00      	nop
 800c610:	370c      	adds	r7, #12
 800c612:	46bd      	mov	sp, r7
 800c614:	bc80      	pop	{r7}
 800c616:	4770      	bx	lr
 800c618:	20000130 	.word	0x20000130
 800c61c:	00000000 	.word	0x00000000

0800c620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c620:	f3ef 8009 	mrs	r0, PSP
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	4b0d      	ldr	r3, [pc, #52]	; (800c660 <pxCurrentTCBConst>)
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c630:	6010      	str	r0, [r2, #0]
 800c632:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c636:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c63a:	f380 8811 	msr	BASEPRI, r0
 800c63e:	f7ff f835 	bl	800b6ac <vTaskSwitchContext>
 800c642:	f04f 0000 	mov.w	r0, #0
 800c646:	f380 8811 	msr	BASEPRI, r0
 800c64a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c64e:	6819      	ldr	r1, [r3, #0]
 800c650:	6808      	ldr	r0, [r1, #0]
 800c652:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c656:	f380 8809 	msr	PSP, r0
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	4770      	bx	lr

0800c660 <pxCurrentTCBConst>:
 800c660:	200009ac 	.word	0x200009ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c664:	bf00      	nop
 800c666:	bf00      	nop

0800c668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
	__asm volatile
 800c66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c672:	f383 8811 	msr	BASEPRI, r3
 800c676:	f3bf 8f6f 	isb	sy
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	607b      	str	r3, [r7, #4]
}
 800c680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c682:	f7fe ff55 	bl	800b530 <xTaskIncrementTick>
 800c686:	4603      	mov	r3, r0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d003      	beq.n	800c694 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c68c:	4b06      	ldr	r3, [pc, #24]	; (800c6a8 <SysTick_Handler+0x40>)
 800c68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	2300      	movs	r3, #0
 800c696:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	f383 8811 	msr	BASEPRI, r3
}
 800c69e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6a0:	bf00      	nop
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	e000ed04 	.word	0xe000ed04

0800c6ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6b0:	4b0a      	ldr	r3, [pc, #40]	; (800c6dc <vPortSetupTimerInterrupt+0x30>)
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6b6:	4b0a      	ldr	r3, [pc, #40]	; (800c6e0 <vPortSetupTimerInterrupt+0x34>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6bc:	4b09      	ldr	r3, [pc, #36]	; (800c6e4 <vPortSetupTimerInterrupt+0x38>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a09      	ldr	r2, [pc, #36]	; (800c6e8 <vPortSetupTimerInterrupt+0x3c>)
 800c6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6c6:	099b      	lsrs	r3, r3, #6
 800c6c8:	4a08      	ldr	r2, [pc, #32]	; (800c6ec <vPortSetupTimerInterrupt+0x40>)
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6ce:	4b03      	ldr	r3, [pc, #12]	; (800c6dc <vPortSetupTimerInterrupt+0x30>)
 800c6d0:	2207      	movs	r2, #7
 800c6d2:	601a      	str	r2, [r3, #0]
}
 800c6d4:	bf00      	nop
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bc80      	pop	{r7}
 800c6da:	4770      	bx	lr
 800c6dc:	e000e010 	.word	0xe000e010
 800c6e0:	e000e018 	.word	0xe000e018
 800c6e4:	20000000 	.word	0x20000000
 800c6e8:	10624dd3 	.word	0x10624dd3
 800c6ec:	e000e014 	.word	0xe000e014

0800c6f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b085      	sub	sp, #20
 800c6f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c6f6:	f3ef 8305 	mrs	r3, IPSR
 800c6fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2b0f      	cmp	r3, #15
 800c700:	d914      	bls.n	800c72c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c702:	4a16      	ldr	r2, [pc, #88]	; (800c75c <vPortValidateInterruptPriority+0x6c>)
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	4413      	add	r3, r2
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c70c:	4b14      	ldr	r3, [pc, #80]	; (800c760 <vPortValidateInterruptPriority+0x70>)
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	7afa      	ldrb	r2, [r7, #11]
 800c712:	429a      	cmp	r2, r3
 800c714:	d20a      	bcs.n	800c72c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71a:	f383 8811 	msr	BASEPRI, r3
 800c71e:	f3bf 8f6f 	isb	sy
 800c722:	f3bf 8f4f 	dsb	sy
 800c726:	607b      	str	r3, [r7, #4]
}
 800c728:	bf00      	nop
 800c72a:	e7fe      	b.n	800c72a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c72c:	4b0d      	ldr	r3, [pc, #52]	; (800c764 <vPortValidateInterruptPriority+0x74>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c734:	4b0c      	ldr	r3, [pc, #48]	; (800c768 <vPortValidateInterruptPriority+0x78>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d90a      	bls.n	800c752 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c740:	f383 8811 	msr	BASEPRI, r3
 800c744:	f3bf 8f6f 	isb	sy
 800c748:	f3bf 8f4f 	dsb	sy
 800c74c:	603b      	str	r3, [r7, #0]
}
 800c74e:	bf00      	nop
 800c750:	e7fe      	b.n	800c750 <vPortValidateInterruptPriority+0x60>
	}
 800c752:	bf00      	nop
 800c754:	3714      	adds	r7, #20
 800c756:	46bd      	mov	sp, r7
 800c758:	bc80      	pop	{r7}
 800c75a:	4770      	bx	lr
 800c75c:	e000e3f0 	.word	0xe000e3f0
 800c760:	20000fd8 	.word	0x20000fd8
 800c764:	e000ed0c 	.word	0xe000ed0c
 800c768:	20000fdc 	.word	0x20000fdc

0800c76c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b08a      	sub	sp, #40	; 0x28
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c774:	2300      	movs	r3, #0
 800c776:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c778:	f7fe fe20 	bl	800b3bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c77c:	4b58      	ldr	r3, [pc, #352]	; (800c8e0 <pvPortMalloc+0x174>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d101      	bne.n	800c788 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c784:	f000 f910 	bl	800c9a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c788:	4b56      	ldr	r3, [pc, #344]	; (800c8e4 <pvPortMalloc+0x178>)
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	4013      	ands	r3, r2
 800c790:	2b00      	cmp	r3, #0
 800c792:	f040 808e 	bne.w	800c8b2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d01d      	beq.n	800c7d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c79c:	2208      	movs	r2, #8
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f003 0307 	and.w	r3, r3, #7
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d014      	beq.n	800c7d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f023 0307 	bic.w	r3, r3, #7
 800c7b4:	3308      	adds	r3, #8
 800c7b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f003 0307 	and.w	r3, r3, #7
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d00a      	beq.n	800c7d8 <pvPortMalloc+0x6c>
	__asm volatile
 800c7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c6:	f383 8811 	msr	BASEPRI, r3
 800c7ca:	f3bf 8f6f 	isb	sy
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	617b      	str	r3, [r7, #20]
}
 800c7d4:	bf00      	nop
 800c7d6:	e7fe      	b.n	800c7d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d069      	beq.n	800c8b2 <pvPortMalloc+0x146>
 800c7de:	4b42      	ldr	r3, [pc, #264]	; (800c8e8 <pvPortMalloc+0x17c>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d864      	bhi.n	800c8b2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c7e8:	4b40      	ldr	r3, [pc, #256]	; (800c8ec <pvPortMalloc+0x180>)
 800c7ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c7ec:	4b3f      	ldr	r3, [pc, #252]	; (800c8ec <pvPortMalloc+0x180>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7f2:	e004      	b.n	800c7fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	429a      	cmp	r2, r3
 800c806:	d903      	bls.n	800c810 <pvPortMalloc+0xa4>
 800c808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d1f1      	bne.n	800c7f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c810:	4b33      	ldr	r3, [pc, #204]	; (800c8e0 <pvPortMalloc+0x174>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c816:	429a      	cmp	r2, r3
 800c818:	d04b      	beq.n	800c8b2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c81a:	6a3b      	ldr	r3, [r7, #32]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2208      	movs	r2, #8
 800c820:	4413      	add	r3, r2
 800c822:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	6a3b      	ldr	r3, [r7, #32]
 800c82a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82e:	685a      	ldr	r2, [r3, #4]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	1ad2      	subs	r2, r2, r3
 800c834:	2308      	movs	r3, #8
 800c836:	005b      	lsls	r3, r3, #1
 800c838:	429a      	cmp	r2, r3
 800c83a:	d91f      	bls.n	800c87c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c83c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	4413      	add	r3, r2
 800c842:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c844:	69bb      	ldr	r3, [r7, #24]
 800c846:	f003 0307 	and.w	r3, r3, #7
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00a      	beq.n	800c864 <pvPortMalloc+0xf8>
	__asm volatile
 800c84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	613b      	str	r3, [r7, #16]
}
 800c860:	bf00      	nop
 800c862:	e7fe      	b.n	800c862 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c866:	685a      	ldr	r2, [r3, #4]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	1ad2      	subs	r2, r2, r3
 800c86c:	69bb      	ldr	r3, [r7, #24]
 800c86e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c876:	69b8      	ldr	r0, [r7, #24]
 800c878:	f000 f8f8 	bl	800ca6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c87c:	4b1a      	ldr	r3, [pc, #104]	; (800c8e8 <pvPortMalloc+0x17c>)
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	1ad3      	subs	r3, r2, r3
 800c886:	4a18      	ldr	r2, [pc, #96]	; (800c8e8 <pvPortMalloc+0x17c>)
 800c888:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c88a:	4b17      	ldr	r3, [pc, #92]	; (800c8e8 <pvPortMalloc+0x17c>)
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	4b18      	ldr	r3, [pc, #96]	; (800c8f0 <pvPortMalloc+0x184>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	429a      	cmp	r2, r3
 800c894:	d203      	bcs.n	800c89e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c896:	4b14      	ldr	r3, [pc, #80]	; (800c8e8 <pvPortMalloc+0x17c>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a15      	ldr	r2, [pc, #84]	; (800c8f0 <pvPortMalloc+0x184>)
 800c89c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a0:	685a      	ldr	r2, [r3, #4]
 800c8a2:	4b10      	ldr	r3, [pc, #64]	; (800c8e4 <pvPortMalloc+0x178>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	431a      	orrs	r2, r3
 800c8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c8b2:	f7fe fd91 	bl	800b3d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	f003 0307 	and.w	r3, r3, #7
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d00a      	beq.n	800c8d6 <pvPortMalloc+0x16a>
	__asm volatile
 800c8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c4:	f383 8811 	msr	BASEPRI, r3
 800c8c8:	f3bf 8f6f 	isb	sy
 800c8cc:	f3bf 8f4f 	dsb	sy
 800c8d0:	60fb      	str	r3, [r7, #12]
}
 800c8d2:	bf00      	nop
 800c8d4:	e7fe      	b.n	800c8d4 <pvPortMalloc+0x168>
	return pvReturn;
 800c8d6:	69fb      	ldr	r3, [r7, #28]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3728      	adds	r7, #40	; 0x28
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	20001be8 	.word	0x20001be8
 800c8e4:	20001bf4 	.word	0x20001bf4
 800c8e8:	20001bec 	.word	0x20001bec
 800c8ec:	20001be0 	.word	0x20001be0
 800c8f0:	20001bf0 	.word	0x20001bf0

0800c8f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b086      	sub	sp, #24
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d048      	beq.n	800c998 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c906:	2308      	movs	r3, #8
 800c908:	425b      	negs	r3, r3
 800c90a:	697a      	ldr	r2, [r7, #20]
 800c90c:	4413      	add	r3, r2
 800c90e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	685a      	ldr	r2, [r3, #4]
 800c918:	4b21      	ldr	r3, [pc, #132]	; (800c9a0 <vPortFree+0xac>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4013      	ands	r3, r2
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d10a      	bne.n	800c938 <vPortFree+0x44>
	__asm volatile
 800c922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c926:	f383 8811 	msr	BASEPRI, r3
 800c92a:	f3bf 8f6f 	isb	sy
 800c92e:	f3bf 8f4f 	dsb	sy
 800c932:	60fb      	str	r3, [r7, #12]
}
 800c934:	bf00      	nop
 800c936:	e7fe      	b.n	800c936 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00a      	beq.n	800c956 <vPortFree+0x62>
	__asm volatile
 800c940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c944:	f383 8811 	msr	BASEPRI, r3
 800c948:	f3bf 8f6f 	isb	sy
 800c94c:	f3bf 8f4f 	dsb	sy
 800c950:	60bb      	str	r3, [r7, #8]
}
 800c952:	bf00      	nop
 800c954:	e7fe      	b.n	800c954 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	685a      	ldr	r2, [r3, #4]
 800c95a:	4b11      	ldr	r3, [pc, #68]	; (800c9a0 <vPortFree+0xac>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4013      	ands	r3, r2
 800c960:	2b00      	cmp	r3, #0
 800c962:	d019      	beq.n	800c998 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d115      	bne.n	800c998 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	685a      	ldr	r2, [r3, #4]
 800c970:	4b0b      	ldr	r3, [pc, #44]	; (800c9a0 <vPortFree+0xac>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	43db      	mvns	r3, r3
 800c976:	401a      	ands	r2, r3
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c97c:	f7fe fd1e 	bl	800b3bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	685a      	ldr	r2, [r3, #4]
 800c984:	4b07      	ldr	r3, [pc, #28]	; (800c9a4 <vPortFree+0xb0>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4413      	add	r3, r2
 800c98a:	4a06      	ldr	r2, [pc, #24]	; (800c9a4 <vPortFree+0xb0>)
 800c98c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c98e:	6938      	ldr	r0, [r7, #16]
 800c990:	f000 f86c 	bl	800ca6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c994:	f7fe fd20 	bl	800b3d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c998:	bf00      	nop
 800c99a:	3718      	adds	r7, #24
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	20001bf4 	.word	0x20001bf4
 800c9a4:	20001bec 	.word	0x20001bec

0800c9a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b085      	sub	sp, #20
 800c9ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c9ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c9b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c9b4:	4b27      	ldr	r3, [pc, #156]	; (800ca54 <prvHeapInit+0xac>)
 800c9b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f003 0307 	and.w	r3, r3, #7
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00c      	beq.n	800c9dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	3307      	adds	r3, #7
 800c9c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f023 0307 	bic.w	r3, r3, #7
 800c9ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c9d0:	68ba      	ldr	r2, [r7, #8]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	1ad3      	subs	r3, r2, r3
 800c9d6:	4a1f      	ldr	r2, [pc, #124]	; (800ca54 <prvHeapInit+0xac>)
 800c9d8:	4413      	add	r3, r2
 800c9da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c9e0:	4a1d      	ldr	r2, [pc, #116]	; (800ca58 <prvHeapInit+0xb0>)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c9e6:	4b1c      	ldr	r3, [pc, #112]	; (800ca58 <prvHeapInit+0xb0>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	68ba      	ldr	r2, [r7, #8]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c9f4:	2208      	movs	r2, #8
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	1a9b      	subs	r3, r3, r2
 800c9fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f023 0307 	bic.w	r3, r3, #7
 800ca02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	4a15      	ldr	r2, [pc, #84]	; (800ca5c <prvHeapInit+0xb4>)
 800ca08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca0a:	4b14      	ldr	r3, [pc, #80]	; (800ca5c <prvHeapInit+0xb4>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca12:	4b12      	ldr	r3, [pc, #72]	; (800ca5c <prvHeapInit+0xb4>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2200      	movs	r2, #0
 800ca18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	68fa      	ldr	r2, [r7, #12]
 800ca22:	1ad2      	subs	r2, r2, r3
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca28:	4b0c      	ldr	r3, [pc, #48]	; (800ca5c <prvHeapInit+0xb4>)
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	4a0a      	ldr	r2, [pc, #40]	; (800ca60 <prvHeapInit+0xb8>)
 800ca36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	4a09      	ldr	r2, [pc, #36]	; (800ca64 <prvHeapInit+0xbc>)
 800ca3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca40:	4b09      	ldr	r3, [pc, #36]	; (800ca68 <prvHeapInit+0xc0>)
 800ca42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ca46:	601a      	str	r2, [r3, #0]
}
 800ca48:	bf00      	nop
 800ca4a:	3714      	adds	r7, #20
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bc80      	pop	{r7}
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	20000fe0 	.word	0x20000fe0
 800ca58:	20001be0 	.word	0x20001be0
 800ca5c:	20001be8 	.word	0x20001be8
 800ca60:	20001bf0 	.word	0x20001bf0
 800ca64:	20001bec 	.word	0x20001bec
 800ca68:	20001bf4 	.word	0x20001bf4

0800ca6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b085      	sub	sp, #20
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ca74:	4b27      	ldr	r3, [pc, #156]	; (800cb14 <prvInsertBlockIntoFreeList+0xa8>)
 800ca76:	60fb      	str	r3, [r7, #12]
 800ca78:	e002      	b.n	800ca80 <prvInsertBlockIntoFreeList+0x14>
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	60fb      	str	r3, [r7, #12]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d8f7      	bhi.n	800ca7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	68ba      	ldr	r2, [r7, #8]
 800ca94:	4413      	add	r3, r2
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d108      	bne.n	800caae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	685a      	ldr	r2, [r3, #4]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	441a      	add	r2, r3
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	68ba      	ldr	r2, [r7, #8]
 800cab8:	441a      	add	r2, r3
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d118      	bne.n	800caf4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	4b14      	ldr	r3, [pc, #80]	; (800cb18 <prvInsertBlockIntoFreeList+0xac>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d00d      	beq.n	800caea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	685a      	ldr	r2, [r3, #4]
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	441a      	add	r2, r3
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	601a      	str	r2, [r3, #0]
 800cae8:	e008      	b.n	800cafc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800caea:	4b0b      	ldr	r3, [pc, #44]	; (800cb18 <prvInsertBlockIntoFreeList+0xac>)
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	601a      	str	r2, [r3, #0]
 800caf2:	e003      	b.n	800cafc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cafc:	68fa      	ldr	r2, [r7, #12]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d002      	beq.n	800cb0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb0a:	bf00      	nop
 800cb0c:	3714      	adds	r7, #20
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bc80      	pop	{r7}
 800cb12:	4770      	bx	lr
 800cb14:	20001be0 	.word	0x20001be0
 800cb18:	20001be8 	.word	0x20001be8

0800cb1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cb20:	2200      	movs	r2, #0
 800cb22:	4912      	ldr	r1, [pc, #72]	; (800cb6c <MX_USB_DEVICE_Init+0x50>)
 800cb24:	4812      	ldr	r0, [pc, #72]	; (800cb70 <MX_USB_DEVICE_Init+0x54>)
 800cb26:	f7fc f9fd 	bl	8008f24 <USBD_Init>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d001      	beq.n	800cb34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cb30:	f7f3 fd44 	bl	80005bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cb34:	490f      	ldr	r1, [pc, #60]	; (800cb74 <MX_USB_DEVICE_Init+0x58>)
 800cb36:	480e      	ldr	r0, [pc, #56]	; (800cb70 <MX_USB_DEVICE_Init+0x54>)
 800cb38:	f7fc fa1f 	bl	8008f7a <USBD_RegisterClass>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d001      	beq.n	800cb46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cb42:	f7f3 fd3b 	bl	80005bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cb46:	490c      	ldr	r1, [pc, #48]	; (800cb78 <MX_USB_DEVICE_Init+0x5c>)
 800cb48:	4809      	ldr	r0, [pc, #36]	; (800cb70 <MX_USB_DEVICE_Init+0x54>)
 800cb4a:	f7fc f97f 	bl	8008e4c <USBD_CDC_RegisterInterface>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d001      	beq.n	800cb58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cb54:	f7f3 fd32 	bl	80005bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cb58:	4805      	ldr	r0, [pc, #20]	; (800cb70 <MX_USB_DEVICE_Init+0x54>)
 800cb5a:	f7fc fa27 	bl	8008fac <USBD_Start>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d001      	beq.n	800cb68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cb64:	f7f3 fd2a 	bl	80005bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cb68:	bf00      	nop
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	20000144 	.word	0x20000144
 800cb70:	20002478 	.word	0x20002478
 800cb74:	2000002c 	.word	0x2000002c
 800cb78:	20000134 	.word	0x20000134

0800cb7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cb80:	2200      	movs	r2, #0
 800cb82:	4905      	ldr	r1, [pc, #20]	; (800cb98 <CDC_Init_FS+0x1c>)
 800cb84:	4805      	ldr	r0, [pc, #20]	; (800cb9c <CDC_Init_FS+0x20>)
 800cb86:	f7fc f977 	bl	8008e78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cb8a:	4905      	ldr	r1, [pc, #20]	; (800cba0 <CDC_Init_FS+0x24>)
 800cb8c:	4803      	ldr	r0, [pc, #12]	; (800cb9c <CDC_Init_FS+0x20>)
 800cb8e:	f7fc f98c 	bl	8008eaa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cb92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	20002b24 	.word	0x20002b24
 800cb9c:	20002478 	.word	0x20002478
 800cba0:	2000273c 	.word	0x2000273c

0800cba4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cba4:	b480      	push	{r7}
 800cba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cba8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bc80      	pop	{r7}
 800cbb0:	4770      	bx	lr
	...

0800cbb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	4603      	mov	r3, r0
 800cbbc:	6039      	str	r1, [r7, #0]
 800cbbe:	71fb      	strb	r3, [r7, #7]
 800cbc0:	4613      	mov	r3, r2
 800cbc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cbc4:	79fb      	ldrb	r3, [r7, #7]
 800cbc6:	2b23      	cmp	r3, #35	; 0x23
 800cbc8:	d84a      	bhi.n	800cc60 <CDC_Control_FS+0xac>
 800cbca:	a201      	add	r2, pc, #4	; (adr r2, 800cbd0 <CDC_Control_FS+0x1c>)
 800cbcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd0:	0800cc61 	.word	0x0800cc61
 800cbd4:	0800cc61 	.word	0x0800cc61
 800cbd8:	0800cc61 	.word	0x0800cc61
 800cbdc:	0800cc61 	.word	0x0800cc61
 800cbe0:	0800cc61 	.word	0x0800cc61
 800cbe4:	0800cc61 	.word	0x0800cc61
 800cbe8:	0800cc61 	.word	0x0800cc61
 800cbec:	0800cc61 	.word	0x0800cc61
 800cbf0:	0800cc61 	.word	0x0800cc61
 800cbf4:	0800cc61 	.word	0x0800cc61
 800cbf8:	0800cc61 	.word	0x0800cc61
 800cbfc:	0800cc61 	.word	0x0800cc61
 800cc00:	0800cc61 	.word	0x0800cc61
 800cc04:	0800cc61 	.word	0x0800cc61
 800cc08:	0800cc61 	.word	0x0800cc61
 800cc0c:	0800cc61 	.word	0x0800cc61
 800cc10:	0800cc61 	.word	0x0800cc61
 800cc14:	0800cc61 	.word	0x0800cc61
 800cc18:	0800cc61 	.word	0x0800cc61
 800cc1c:	0800cc61 	.word	0x0800cc61
 800cc20:	0800cc61 	.word	0x0800cc61
 800cc24:	0800cc61 	.word	0x0800cc61
 800cc28:	0800cc61 	.word	0x0800cc61
 800cc2c:	0800cc61 	.word	0x0800cc61
 800cc30:	0800cc61 	.word	0x0800cc61
 800cc34:	0800cc61 	.word	0x0800cc61
 800cc38:	0800cc61 	.word	0x0800cc61
 800cc3c:	0800cc61 	.word	0x0800cc61
 800cc40:	0800cc61 	.word	0x0800cc61
 800cc44:	0800cc61 	.word	0x0800cc61
 800cc48:	0800cc61 	.word	0x0800cc61
 800cc4c:	0800cc61 	.word	0x0800cc61
 800cc50:	0800cc61 	.word	0x0800cc61
 800cc54:	0800cc61 	.word	0x0800cc61
 800cc58:	0800cc61 	.word	0x0800cc61
 800cc5c:	0800cc61 	.word	0x0800cc61
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cc60:	bf00      	nop
  }

  return (USBD_OK);
 800cc62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	370c      	adds	r7, #12
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bc80      	pop	{r7}
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop

0800cc70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cc7a:	6879      	ldr	r1, [r7, #4]
 800cc7c:	4805      	ldr	r0, [pc, #20]	; (800cc94 <CDC_Receive_FS+0x24>)
 800cc7e:	f7fc f914 	bl	8008eaa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cc82:	4804      	ldr	r0, [pc, #16]	; (800cc94 <CDC_Receive_FS+0x24>)
 800cc84:	f7fc f924 	bl	8008ed0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cc88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3708      	adds	r7, #8
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	20002478 	.word	0x20002478

0800cc98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b083      	sub	sp, #12
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	4603      	mov	r3, r0
 800cca0:	6039      	str	r1, [r7, #0]
 800cca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	2212      	movs	r2, #18
 800cca8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ccaa:	4b03      	ldr	r3, [pc, #12]	; (800ccb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bc80      	pop	{r7}
 800ccb4:	4770      	bx	lr
 800ccb6:	bf00      	nop
 800ccb8:	20000160 	.word	0x20000160

0800ccbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	6039      	str	r1, [r7, #0]
 800ccc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	2204      	movs	r2, #4
 800cccc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ccce:	4b03      	ldr	r3, [pc, #12]	; (800ccdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	370c      	adds	r7, #12
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bc80      	pop	{r7}
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	20000174 	.word	0x20000174

0800cce0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	4603      	mov	r3, r0
 800cce8:	6039      	str	r1, [r7, #0]
 800ccea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccec:	79fb      	ldrb	r3, [r7, #7]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d105      	bne.n	800ccfe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ccf2:	683a      	ldr	r2, [r7, #0]
 800ccf4:	4907      	ldr	r1, [pc, #28]	; (800cd14 <USBD_FS_ProductStrDescriptor+0x34>)
 800ccf6:	4808      	ldr	r0, [pc, #32]	; (800cd18 <USBD_FS_ProductStrDescriptor+0x38>)
 800ccf8:	f7fd f8d0 	bl	8009e9c <USBD_GetString>
 800ccfc:	e004      	b.n	800cd08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	4904      	ldr	r1, [pc, #16]	; (800cd14 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd02:	4805      	ldr	r0, [pc, #20]	; (800cd18 <USBD_FS_ProductStrDescriptor+0x38>)
 800cd04:	f7fd f8ca 	bl	8009e9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd08:	4b02      	ldr	r3, [pc, #8]	; (800cd14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	20002f0c 	.word	0x20002f0c
 800cd18:	0800d64c 	.word	0x0800d64c

0800cd1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	4603      	mov	r3, r0
 800cd24:	6039      	str	r1, [r7, #0]
 800cd26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cd28:	683a      	ldr	r2, [r7, #0]
 800cd2a:	4904      	ldr	r1, [pc, #16]	; (800cd3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cd2c:	4804      	ldr	r0, [pc, #16]	; (800cd40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cd2e:	f7fd f8b5 	bl	8009e9c <USBD_GetString>
  return USBD_StrDesc;
 800cd32:	4b02      	ldr	r3, [pc, #8]	; (800cd3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3708      	adds	r7, #8
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	20002f0c 	.word	0x20002f0c
 800cd40:	0800d664 	.word	0x0800d664

0800cd44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	6039      	str	r1, [r7, #0]
 800cd4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	221a      	movs	r2, #26
 800cd54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cd56:	f000 f843 	bl	800cde0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cd5a:	4b02      	ldr	r3, [pc, #8]	; (800cd64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3708      	adds	r7, #8
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	20000178 	.word	0x20000178

0800cd68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	4603      	mov	r3, r0
 800cd70:	6039      	str	r1, [r7, #0]
 800cd72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cd74:	79fb      	ldrb	r3, [r7, #7]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d105      	bne.n	800cd86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd7a:	683a      	ldr	r2, [r7, #0]
 800cd7c:	4907      	ldr	r1, [pc, #28]	; (800cd9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd7e:	4808      	ldr	r0, [pc, #32]	; (800cda0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd80:	f7fd f88c 	bl	8009e9c <USBD_GetString>
 800cd84:	e004      	b.n	800cd90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd86:	683a      	ldr	r2, [r7, #0]
 800cd88:	4904      	ldr	r1, [pc, #16]	; (800cd9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd8a:	4805      	ldr	r0, [pc, #20]	; (800cda0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd8c:	f7fd f886 	bl	8009e9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd90:	4b02      	ldr	r3, [pc, #8]	; (800cd9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3708      	adds	r7, #8
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	20002f0c 	.word	0x20002f0c
 800cda0:	0800d678 	.word	0x0800d678

0800cda4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	4603      	mov	r3, r0
 800cdac:	6039      	str	r1, [r7, #0]
 800cdae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cdb0:	79fb      	ldrb	r3, [r7, #7]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d105      	bne.n	800cdc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cdb6:	683a      	ldr	r2, [r7, #0]
 800cdb8:	4907      	ldr	r1, [pc, #28]	; (800cdd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cdba:	4808      	ldr	r0, [pc, #32]	; (800cddc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cdbc:	f7fd f86e 	bl	8009e9c <USBD_GetString>
 800cdc0:	e004      	b.n	800cdcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cdc2:	683a      	ldr	r2, [r7, #0]
 800cdc4:	4904      	ldr	r1, [pc, #16]	; (800cdd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cdc6:	4805      	ldr	r0, [pc, #20]	; (800cddc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cdc8:	f7fd f868 	bl	8009e9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cdcc:	4b02      	ldr	r3, [pc, #8]	; (800cdd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3708      	adds	r7, #8
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	20002f0c 	.word	0x20002f0c
 800cddc:	0800d684 	.word	0x0800d684

0800cde0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b084      	sub	sp, #16
 800cde4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cde6:	4b0f      	ldr	r3, [pc, #60]	; (800ce24 <Get_SerialNum+0x44>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cdec:	4b0e      	ldr	r3, [pc, #56]	; (800ce28 <Get_SerialNum+0x48>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cdf2:	4b0e      	ldr	r3, [pc, #56]	; (800ce2c <Get_SerialNum+0x4c>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cdf8:	68fa      	ldr	r2, [r7, #12]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d009      	beq.n	800ce1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ce06:	2208      	movs	r2, #8
 800ce08:	4909      	ldr	r1, [pc, #36]	; (800ce30 <Get_SerialNum+0x50>)
 800ce0a:	68f8      	ldr	r0, [r7, #12]
 800ce0c:	f000 f814 	bl	800ce38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ce10:	2204      	movs	r2, #4
 800ce12:	4908      	ldr	r1, [pc, #32]	; (800ce34 <Get_SerialNum+0x54>)
 800ce14:	68b8      	ldr	r0, [r7, #8]
 800ce16:	f000 f80f 	bl	800ce38 <IntToUnicode>
  }
}
 800ce1a:	bf00      	nop
 800ce1c:	3710      	adds	r7, #16
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}
 800ce22:	bf00      	nop
 800ce24:	1ffff7e8 	.word	0x1ffff7e8
 800ce28:	1ffff7ec 	.word	0x1ffff7ec
 800ce2c:	1ffff7f0 	.word	0x1ffff7f0
 800ce30:	2000017a 	.word	0x2000017a
 800ce34:	2000018a 	.word	0x2000018a

0800ce38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b087      	sub	sp, #28
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	4613      	mov	r3, r2
 800ce44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ce46:	2300      	movs	r3, #0
 800ce48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	75fb      	strb	r3, [r7, #23]
 800ce4e:	e027      	b.n	800cea0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	0f1b      	lsrs	r3, r3, #28
 800ce54:	2b09      	cmp	r3, #9
 800ce56:	d80b      	bhi.n	800ce70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	0f1b      	lsrs	r3, r3, #28
 800ce5c:	b2da      	uxtb	r2, r3
 800ce5e:	7dfb      	ldrb	r3, [r7, #23]
 800ce60:	005b      	lsls	r3, r3, #1
 800ce62:	4619      	mov	r1, r3
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	440b      	add	r3, r1
 800ce68:	3230      	adds	r2, #48	; 0x30
 800ce6a:	b2d2      	uxtb	r2, r2
 800ce6c:	701a      	strb	r2, [r3, #0]
 800ce6e:	e00a      	b.n	800ce86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	0f1b      	lsrs	r3, r3, #28
 800ce74:	b2da      	uxtb	r2, r3
 800ce76:	7dfb      	ldrb	r3, [r7, #23]
 800ce78:	005b      	lsls	r3, r3, #1
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	440b      	add	r3, r1
 800ce80:	3237      	adds	r2, #55	; 0x37
 800ce82:	b2d2      	uxtb	r2, r2
 800ce84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	011b      	lsls	r3, r3, #4
 800ce8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ce8c:	7dfb      	ldrb	r3, [r7, #23]
 800ce8e:	005b      	lsls	r3, r3, #1
 800ce90:	3301      	adds	r3, #1
 800ce92:	68ba      	ldr	r2, [r7, #8]
 800ce94:	4413      	add	r3, r2
 800ce96:	2200      	movs	r2, #0
 800ce98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ce9a:	7dfb      	ldrb	r3, [r7, #23]
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	75fb      	strb	r3, [r7, #23]
 800cea0:	7dfa      	ldrb	r2, [r7, #23]
 800cea2:	79fb      	ldrb	r3, [r7, #7]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d3d3      	bcc.n	800ce50 <IntToUnicode+0x18>
  }
}
 800cea8:	bf00      	nop
 800ceaa:	bf00      	nop
 800ceac:	371c      	adds	r7, #28
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bc80      	pop	{r7}
 800ceb2:	4770      	bx	lr

0800ceb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a0d      	ldr	r2, [pc, #52]	; (800cef8 <HAL_PCD_MspInit+0x44>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d113      	bne.n	800ceee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cec6:	4b0d      	ldr	r3, [pc, #52]	; (800cefc <HAL_PCD_MspInit+0x48>)
 800cec8:	69db      	ldr	r3, [r3, #28]
 800ceca:	4a0c      	ldr	r2, [pc, #48]	; (800cefc <HAL_PCD_MspInit+0x48>)
 800cecc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ced0:	61d3      	str	r3, [r2, #28]
 800ced2:	4b0a      	ldr	r3, [pc, #40]	; (800cefc <HAL_PCD_MspInit+0x48>)
 800ced4:	69db      	ldr	r3, [r3, #28]
 800ced6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ceda:	60fb      	str	r3, [r7, #12]
 800cedc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800cede:	2200      	movs	r2, #0
 800cee0:	2105      	movs	r1, #5
 800cee2:	2014      	movs	r0, #20
 800cee4:	f7f4 f977 	bl	80011d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800cee8:	2014      	movs	r0, #20
 800ceea:	f7f4 f990 	bl	800120e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ceee:	bf00      	nop
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	40005c00 	.word	0x40005c00
 800cefc:	40021000 	.word	0x40021000

0800cf00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cf14:	4619      	mov	r1, r3
 800cf16:	4610      	mov	r0, r2
 800cf18:	f7fc f890 	bl	800903c <USBD_LL_SetupStage>
}
 800cf1c:	bf00      	nop
 800cf1e:	3708      	adds	r7, #8
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800cf36:	78fa      	ldrb	r2, [r7, #3]
 800cf38:	6879      	ldr	r1, [r7, #4]
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	4413      	add	r3, r2
 800cf40:	00db      	lsls	r3, r3, #3
 800cf42:	440b      	add	r3, r1
 800cf44:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	78fb      	ldrb	r3, [r7, #3]
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	f7fc f8c2 	bl	80090d6 <USBD_LL_DataOutStage>
}
 800cf52:	bf00      	nop
 800cf54:	3708      	adds	r7, #8
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b082      	sub	sp, #8
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
 800cf62:	460b      	mov	r3, r1
 800cf64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800cf6c:	78fa      	ldrb	r2, [r7, #3]
 800cf6e:	6879      	ldr	r1, [r7, #4]
 800cf70:	4613      	mov	r3, r2
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	4413      	add	r3, r2
 800cf76:	00db      	lsls	r3, r3, #3
 800cf78:	440b      	add	r3, r1
 800cf7a:	333c      	adds	r3, #60	; 0x3c
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	78fb      	ldrb	r3, [r7, #3]
 800cf80:	4619      	mov	r1, r3
 800cf82:	f7fc f919 	bl	80091b8 <USBD_LL_DataInStage>
}
 800cf86:	bf00      	nop
 800cf88:	3708      	adds	r7, #8
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}

0800cf8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf8e:	b580      	push	{r7, lr}
 800cf90:	b082      	sub	sp, #8
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f7fc fa29 	bl	80093f4 <USBD_LL_SOF>
}
 800cfa2:	bf00      	nop
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b084      	sub	sp, #16
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	689b      	ldr	r3, [r3, #8]
 800cfba:	2b02      	cmp	r3, #2
 800cfbc:	d001      	beq.n	800cfc2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cfbe:	f7f3 fafd 	bl	80005bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cfc8:	7bfa      	ldrb	r2, [r7, #15]
 800cfca:	4611      	mov	r1, r2
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7fc f9d9 	bl	8009384 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7fc f992 	bl	8009302 <USBD_LL_Reset>
}
 800cfde:	bf00      	nop
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
	...

0800cfe8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7fc f9d3 	bl	80093a2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	699b      	ldr	r3, [r3, #24]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d005      	beq.n	800d010 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d004:	4b04      	ldr	r3, [pc, #16]	; (800d018 <HAL_PCD_SuspendCallback+0x30>)
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	4a03      	ldr	r2, [pc, #12]	; (800d018 <HAL_PCD_SuspendCallback+0x30>)
 800d00a:	f043 0306 	orr.w	r3, r3, #6
 800d00e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d010:	bf00      	nop
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	e000ed00 	.word	0xe000ed00

0800d01c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fc f9cd 	bl	80093ca <USBD_LL_Resume>
}
 800d030:	bf00      	nop
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d040:	4a28      	ldr	r2, [pc, #160]	; (800d0e4 <USBD_LL_Init+0xac>)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	4a26      	ldr	r2, [pc, #152]	; (800d0e4 <USBD_LL_Init+0xac>)
 800d04c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d050:	4b24      	ldr	r3, [pc, #144]	; (800d0e4 <USBD_LL_Init+0xac>)
 800d052:	4a25      	ldr	r2, [pc, #148]	; (800d0e8 <USBD_LL_Init+0xb0>)
 800d054:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d056:	4b23      	ldr	r3, [pc, #140]	; (800d0e4 <USBD_LL_Init+0xac>)
 800d058:	2208      	movs	r2, #8
 800d05a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d05c:	4b21      	ldr	r3, [pc, #132]	; (800d0e4 <USBD_LL_Init+0xac>)
 800d05e:	2202      	movs	r2, #2
 800d060:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d062:	4b20      	ldr	r3, [pc, #128]	; (800d0e4 <USBD_LL_Init+0xac>)
 800d064:	2200      	movs	r2, #0
 800d066:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d068:	4b1e      	ldr	r3, [pc, #120]	; (800d0e4 <USBD_LL_Init+0xac>)
 800d06a:	2200      	movs	r2, #0
 800d06c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d06e:	4b1d      	ldr	r3, [pc, #116]	; (800d0e4 <USBD_LL_Init+0xac>)
 800d070:	2200      	movs	r2, #0
 800d072:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d074:	481b      	ldr	r0, [pc, #108]	; (800d0e4 <USBD_LL_Init+0xac>)
 800d076:	f7f6 f82b 	bl	80030d0 <HAL_PCD_Init>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d001      	beq.n	800d084 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d080:	f7f3 fa9c 	bl	80005bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d08a:	2318      	movs	r3, #24
 800d08c:	2200      	movs	r2, #0
 800d08e:	2100      	movs	r1, #0
 800d090:	f7f7 fca1 	bl	80049d6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d09a:	2358      	movs	r3, #88	; 0x58
 800d09c:	2200      	movs	r2, #0
 800d09e:	2180      	movs	r1, #128	; 0x80
 800d0a0:	f7f7 fc99 	bl	80049d6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d0aa:	23c0      	movs	r3, #192	; 0xc0
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	2181      	movs	r1, #129	; 0x81
 800d0b0:	f7f7 fc91 	bl	80049d6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d0ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d0be:	2200      	movs	r2, #0
 800d0c0:	2101      	movs	r1, #1
 800d0c2:	f7f7 fc88 	bl	80049d6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d0cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	2182      	movs	r1, #130	; 0x82
 800d0d4:	f7f7 fc7f 	bl	80049d6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d0d8:	2300      	movs	r3, #0
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3708      	adds	r7, #8
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	2000310c 	.word	0x2000310c
 800d0e8:	40005c00 	.word	0x40005c00

0800d0ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d102:	4618      	mov	r0, r3
 800d104:	f7f6 f8ef 	bl	80032e6 <HAL_PCD_Start>
 800d108:	4603      	mov	r3, r0
 800d10a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d10c:	7bfb      	ldrb	r3, [r7, #15]
 800d10e:	4618      	mov	r0, r3
 800d110:	f000 f94e 	bl	800d3b0 <USBD_Get_USB_Status>
 800d114:	4603      	mov	r3, r0
 800d116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d118:	7bbb      	ldrb	r3, [r7, #14]
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3710      	adds	r7, #16
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b084      	sub	sp, #16
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
 800d12a:	4608      	mov	r0, r1
 800d12c:	4611      	mov	r1, r2
 800d12e:	461a      	mov	r2, r3
 800d130:	4603      	mov	r3, r0
 800d132:	70fb      	strb	r3, [r7, #3]
 800d134:	460b      	mov	r3, r1
 800d136:	70bb      	strb	r3, [r7, #2]
 800d138:	4613      	mov	r3, r2
 800d13a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d13c:	2300      	movs	r3, #0
 800d13e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d140:	2300      	movs	r3, #0
 800d142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d14a:	78bb      	ldrb	r3, [r7, #2]
 800d14c:	883a      	ldrh	r2, [r7, #0]
 800d14e:	78f9      	ldrb	r1, [r7, #3]
 800d150:	f7f6 fa69 	bl	8003626 <HAL_PCD_EP_Open>
 800d154:	4603      	mov	r3, r0
 800d156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d158:	7bfb      	ldrb	r3, [r7, #15]
 800d15a:	4618      	mov	r0, r3
 800d15c:	f000 f928 	bl	800d3b0 <USBD_Get_USB_Status>
 800d160:	4603      	mov	r3, r0
 800d162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d164:	7bbb      	ldrb	r3, [r7, #14]
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b084      	sub	sp, #16
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
 800d176:	460b      	mov	r3, r1
 800d178:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d17a:	2300      	movs	r3, #0
 800d17c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d17e:	2300      	movs	r3, #0
 800d180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d188:	78fa      	ldrb	r2, [r7, #3]
 800d18a:	4611      	mov	r1, r2
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7f6 fab0 	bl	80036f2 <HAL_PCD_EP_Close>
 800d192:	4603      	mov	r3, r0
 800d194:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d196:	7bfb      	ldrb	r3, [r7, #15]
 800d198:	4618      	mov	r0, r3
 800d19a:	f000 f909 	bl	800d3b0 <USBD_Get_USB_Status>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3710      	adds	r7, #16
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1c6:	78fa      	ldrb	r2, [r7, #3]
 800d1c8:	4611      	mov	r1, r2
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7f6 fb70 	bl	80038b0 <HAL_PCD_EP_SetStall>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1d4:	7bfb      	ldrb	r3, [r7, #15]
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f000 f8ea 	bl	800d3b0 <USBD_Get_USB_Status>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b084      	sub	sp, #16
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d204:	78fa      	ldrb	r2, [r7, #3]
 800d206:	4611      	mov	r1, r2
 800d208:	4618      	mov	r0, r3
 800d20a:	f7f6 fbb1 	bl	8003970 <HAL_PCD_EP_ClrStall>
 800d20e:	4603      	mov	r3, r0
 800d210:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d212:	7bfb      	ldrb	r3, [r7, #15]
 800d214:	4618      	mov	r0, r3
 800d216:	f000 f8cb 	bl	800d3b0 <USBD_Get_USB_Status>
 800d21a:	4603      	mov	r3, r0
 800d21c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d21e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d220:	4618      	mov	r0, r3
 800d222:	3710      	adds	r7, #16
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	460b      	mov	r3, r1
 800d232:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d23a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d23c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d240:	2b00      	cmp	r3, #0
 800d242:	da0c      	bge.n	800d25e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d244:	78fb      	ldrb	r3, [r7, #3]
 800d246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d24a:	68f9      	ldr	r1, [r7, #12]
 800d24c:	1c5a      	adds	r2, r3, #1
 800d24e:	4613      	mov	r3, r2
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	4413      	add	r3, r2
 800d254:	00db      	lsls	r3, r3, #3
 800d256:	440b      	add	r3, r1
 800d258:	3302      	adds	r3, #2
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	e00b      	b.n	800d276 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d25e:	78fb      	ldrb	r3, [r7, #3]
 800d260:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d264:	68f9      	ldr	r1, [r7, #12]
 800d266:	4613      	mov	r3, r2
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	4413      	add	r3, r2
 800d26c:	00db      	lsls	r3, r3, #3
 800d26e:	440b      	add	r3, r1
 800d270:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d274:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d276:	4618      	mov	r0, r3
 800d278:	3714      	adds	r7, #20
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bc80      	pop	{r7}
 800d27e:	4770      	bx	lr

0800d280 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	460b      	mov	r3, r1
 800d28a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d28c:	2300      	movs	r3, #0
 800d28e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d290:	2300      	movs	r3, #0
 800d292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d29a:	78fa      	ldrb	r2, [r7, #3]
 800d29c:	4611      	mov	r1, r2
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7f6 f99c 	bl	80035dc <HAL_PCD_SetAddress>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2a8:	7bfb      	ldrb	r3, [r7, #15]
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f000 f880 	bl	800d3b0 <USBD_Get_USB_Status>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3710      	adds	r7, #16
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}

0800d2be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d2be:	b580      	push	{r7, lr}
 800d2c0:	b086      	sub	sp, #24
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	60f8      	str	r0, [r7, #12]
 800d2c6:	607a      	str	r2, [r7, #4]
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	460b      	mov	r3, r1
 800d2cc:	72fb      	strb	r3, [r7, #11]
 800d2ce:	4613      	mov	r3, r2
 800d2d0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d2e0:	893b      	ldrh	r3, [r7, #8]
 800d2e2:	7af9      	ldrb	r1, [r7, #11]
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	f7f6 faa0 	bl	800382a <HAL_PCD_EP_Transmit>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2ee:	7dfb      	ldrb	r3, [r7, #23]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f000 f85d 	bl	800d3b0 <USBD_Get_USB_Status>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3718      	adds	r7, #24
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b086      	sub	sp, #24
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	607a      	str	r2, [r7, #4]
 800d30e:	461a      	mov	r2, r3
 800d310:	460b      	mov	r3, r1
 800d312:	72fb      	strb	r3, [r7, #11]
 800d314:	4613      	mov	r3, r2
 800d316:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d318:	2300      	movs	r3, #0
 800d31a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d31c:	2300      	movs	r3, #0
 800d31e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d326:	893b      	ldrh	r3, [r7, #8]
 800d328:	7af9      	ldrb	r1, [r7, #11]
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	f7f6 fa29 	bl	8003782 <HAL_PCD_EP_Receive>
 800d330:	4603      	mov	r3, r0
 800d332:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d334:	7dfb      	ldrb	r3, [r7, #23]
 800d336:	4618      	mov	r0, r3
 800d338:	f000 f83a 	bl	800d3b0 <USBD_Get_USB_Status>
 800d33c:	4603      	mov	r3, r0
 800d33e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d340:	7dbb      	ldrb	r3, [r7, #22]
}
 800d342:	4618      	mov	r0, r3
 800d344:	3718      	adds	r7, #24
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}

0800d34a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b082      	sub	sp, #8
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
 800d352:	460b      	mov	r3, r1
 800d354:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d35c:	78fa      	ldrb	r2, [r7, #3]
 800d35e:	4611      	mov	r1, r2
 800d360:	4618      	mov	r0, r3
 800d362:	f7f6 fa4b 	bl	80037fc <HAL_PCD_EP_GetRxCount>
 800d366:	4603      	mov	r3, r0
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3708      	adds	r7, #8
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d378:	4b02      	ldr	r3, [pc, #8]	; (800d384 <USBD_static_malloc+0x14>)
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	370c      	adds	r7, #12
 800d37e:	46bd      	mov	sp, r7
 800d380:	bc80      	pop	{r7}
 800d382:	4770      	bx	lr
 800d384:	20001bf8 	.word	0x20001bf8

0800d388 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d388:	b480      	push	{r7}
 800d38a:	b083      	sub	sp, #12
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]

}
 800d390:	bf00      	nop
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	bc80      	pop	{r7}
 800d398:	4770      	bx	lr

0800d39a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d39a:	b480      	push	{r7}
 800d39c:	b083      	sub	sp, #12
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	6078      	str	r0, [r7, #4]
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d3a6:	bf00      	nop
 800d3a8:	370c      	adds	r7, #12
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bc80      	pop	{r7}
 800d3ae:	4770      	bx	lr

0800d3b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b085      	sub	sp, #20
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d3be:	79fb      	ldrb	r3, [r7, #7]
 800d3c0:	2b03      	cmp	r3, #3
 800d3c2:	d817      	bhi.n	800d3f4 <USBD_Get_USB_Status+0x44>
 800d3c4:	a201      	add	r2, pc, #4	; (adr r2, 800d3cc <USBD_Get_USB_Status+0x1c>)
 800d3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ca:	bf00      	nop
 800d3cc:	0800d3dd 	.word	0x0800d3dd
 800d3d0:	0800d3e3 	.word	0x0800d3e3
 800d3d4:	0800d3e9 	.word	0x0800d3e9
 800d3d8:	0800d3ef 	.word	0x0800d3ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	73fb      	strb	r3, [r7, #15]
    break;
 800d3e0:	e00b      	b.n	800d3fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d3e2:	2302      	movs	r3, #2
 800d3e4:	73fb      	strb	r3, [r7, #15]
    break;
 800d3e6:	e008      	b.n	800d3fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d3ec:	e005      	b.n	800d3fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3ee:	2302      	movs	r3, #2
 800d3f0:	73fb      	strb	r3, [r7, #15]
    break;
 800d3f2:	e002      	b.n	800d3fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d3f4:	2302      	movs	r3, #2
 800d3f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d3f8:	bf00      	nop
  }
  return usb_status;
 800d3fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3714      	adds	r7, #20
 800d400:	46bd      	mov	sp, r7
 800d402:	bc80      	pop	{r7}
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop

0800d408 <__libc_init_array>:
 800d408:	b570      	push	{r4, r5, r6, lr}
 800d40a:	2600      	movs	r6, #0
 800d40c:	4d0c      	ldr	r5, [pc, #48]	; (800d440 <__libc_init_array+0x38>)
 800d40e:	4c0d      	ldr	r4, [pc, #52]	; (800d444 <__libc_init_array+0x3c>)
 800d410:	1b64      	subs	r4, r4, r5
 800d412:	10a4      	asrs	r4, r4, #2
 800d414:	42a6      	cmp	r6, r4
 800d416:	d109      	bne.n	800d42c <__libc_init_array+0x24>
 800d418:	f000 f8f2 	bl	800d600 <_init>
 800d41c:	2600      	movs	r6, #0
 800d41e:	4d0a      	ldr	r5, [pc, #40]	; (800d448 <__libc_init_array+0x40>)
 800d420:	4c0a      	ldr	r4, [pc, #40]	; (800d44c <__libc_init_array+0x44>)
 800d422:	1b64      	subs	r4, r4, r5
 800d424:	10a4      	asrs	r4, r4, #2
 800d426:	42a6      	cmp	r6, r4
 800d428:	d105      	bne.n	800d436 <__libc_init_array+0x2e>
 800d42a:	bd70      	pop	{r4, r5, r6, pc}
 800d42c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d430:	4798      	blx	r3
 800d432:	3601      	adds	r6, #1
 800d434:	e7ee      	b.n	800d414 <__libc_init_array+0xc>
 800d436:	f855 3b04 	ldr.w	r3, [r5], #4
 800d43a:	4798      	blx	r3
 800d43c:	3601      	adds	r6, #1
 800d43e:	e7f2      	b.n	800d426 <__libc_init_array+0x1e>
 800d440:	0800d730 	.word	0x0800d730
 800d444:	0800d730 	.word	0x0800d730
 800d448:	0800d730 	.word	0x0800d730
 800d44c:	0800d734 	.word	0x0800d734

0800d450 <memcpy>:
 800d450:	440a      	add	r2, r1
 800d452:	4291      	cmp	r1, r2
 800d454:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d458:	d100      	bne.n	800d45c <memcpy+0xc>
 800d45a:	4770      	bx	lr
 800d45c:	b510      	push	{r4, lr}
 800d45e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d462:	4291      	cmp	r1, r2
 800d464:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d468:	d1f9      	bne.n	800d45e <memcpy+0xe>
 800d46a:	bd10      	pop	{r4, pc}

0800d46c <memset>:
 800d46c:	4603      	mov	r3, r0
 800d46e:	4402      	add	r2, r0
 800d470:	4293      	cmp	r3, r2
 800d472:	d100      	bne.n	800d476 <memset+0xa>
 800d474:	4770      	bx	lr
 800d476:	f803 1b01 	strb.w	r1, [r3], #1
 800d47a:	e7f9      	b.n	800d470 <memset+0x4>

0800d47c <_free_r>:
 800d47c:	b538      	push	{r3, r4, r5, lr}
 800d47e:	4605      	mov	r5, r0
 800d480:	2900      	cmp	r1, #0
 800d482:	d043      	beq.n	800d50c <_free_r+0x90>
 800d484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d488:	1f0c      	subs	r4, r1, #4
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	bfb8      	it	lt
 800d48e:	18e4      	addlt	r4, r4, r3
 800d490:	f000 f8aa 	bl	800d5e8 <__malloc_lock>
 800d494:	4a1e      	ldr	r2, [pc, #120]	; (800d510 <_free_r+0x94>)
 800d496:	6813      	ldr	r3, [r2, #0]
 800d498:	4610      	mov	r0, r2
 800d49a:	b933      	cbnz	r3, 800d4aa <_free_r+0x2e>
 800d49c:	6063      	str	r3, [r4, #4]
 800d49e:	6014      	str	r4, [r2, #0]
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4a6:	f000 b8a5 	b.w	800d5f4 <__malloc_unlock>
 800d4aa:	42a3      	cmp	r3, r4
 800d4ac:	d90a      	bls.n	800d4c4 <_free_r+0x48>
 800d4ae:	6821      	ldr	r1, [r4, #0]
 800d4b0:	1862      	adds	r2, r4, r1
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	bf01      	itttt	eq
 800d4b6:	681a      	ldreq	r2, [r3, #0]
 800d4b8:	685b      	ldreq	r3, [r3, #4]
 800d4ba:	1852      	addeq	r2, r2, r1
 800d4bc:	6022      	streq	r2, [r4, #0]
 800d4be:	6063      	str	r3, [r4, #4]
 800d4c0:	6004      	str	r4, [r0, #0]
 800d4c2:	e7ed      	b.n	800d4a0 <_free_r+0x24>
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	b10b      	cbz	r3, 800d4ce <_free_r+0x52>
 800d4ca:	42a3      	cmp	r3, r4
 800d4cc:	d9fa      	bls.n	800d4c4 <_free_r+0x48>
 800d4ce:	6811      	ldr	r1, [r2, #0]
 800d4d0:	1850      	adds	r0, r2, r1
 800d4d2:	42a0      	cmp	r0, r4
 800d4d4:	d10b      	bne.n	800d4ee <_free_r+0x72>
 800d4d6:	6820      	ldr	r0, [r4, #0]
 800d4d8:	4401      	add	r1, r0
 800d4da:	1850      	adds	r0, r2, r1
 800d4dc:	4283      	cmp	r3, r0
 800d4de:	6011      	str	r1, [r2, #0]
 800d4e0:	d1de      	bne.n	800d4a0 <_free_r+0x24>
 800d4e2:	6818      	ldr	r0, [r3, #0]
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	4401      	add	r1, r0
 800d4e8:	6011      	str	r1, [r2, #0]
 800d4ea:	6053      	str	r3, [r2, #4]
 800d4ec:	e7d8      	b.n	800d4a0 <_free_r+0x24>
 800d4ee:	d902      	bls.n	800d4f6 <_free_r+0x7a>
 800d4f0:	230c      	movs	r3, #12
 800d4f2:	602b      	str	r3, [r5, #0]
 800d4f4:	e7d4      	b.n	800d4a0 <_free_r+0x24>
 800d4f6:	6820      	ldr	r0, [r4, #0]
 800d4f8:	1821      	adds	r1, r4, r0
 800d4fa:	428b      	cmp	r3, r1
 800d4fc:	bf01      	itttt	eq
 800d4fe:	6819      	ldreq	r1, [r3, #0]
 800d500:	685b      	ldreq	r3, [r3, #4]
 800d502:	1809      	addeq	r1, r1, r0
 800d504:	6021      	streq	r1, [r4, #0]
 800d506:	6063      	str	r3, [r4, #4]
 800d508:	6054      	str	r4, [r2, #4]
 800d50a:	e7c9      	b.n	800d4a0 <_free_r+0x24>
 800d50c:	bd38      	pop	{r3, r4, r5, pc}
 800d50e:	bf00      	nop
 800d510:	20001e18 	.word	0x20001e18

0800d514 <cleanup_glue>:
 800d514:	b538      	push	{r3, r4, r5, lr}
 800d516:	460c      	mov	r4, r1
 800d518:	6809      	ldr	r1, [r1, #0]
 800d51a:	4605      	mov	r5, r0
 800d51c:	b109      	cbz	r1, 800d522 <cleanup_glue+0xe>
 800d51e:	f7ff fff9 	bl	800d514 <cleanup_glue>
 800d522:	4621      	mov	r1, r4
 800d524:	4628      	mov	r0, r5
 800d526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d52a:	f7ff bfa7 	b.w	800d47c <_free_r>
	...

0800d530 <_reclaim_reent>:
 800d530:	4b2c      	ldr	r3, [pc, #176]	; (800d5e4 <_reclaim_reent+0xb4>)
 800d532:	b570      	push	{r4, r5, r6, lr}
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	4604      	mov	r4, r0
 800d538:	4283      	cmp	r3, r0
 800d53a:	d051      	beq.n	800d5e0 <_reclaim_reent+0xb0>
 800d53c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d53e:	b143      	cbz	r3, 800d552 <_reclaim_reent+0x22>
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d14a      	bne.n	800d5dc <_reclaim_reent+0xac>
 800d546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d548:	6819      	ldr	r1, [r3, #0]
 800d54a:	b111      	cbz	r1, 800d552 <_reclaim_reent+0x22>
 800d54c:	4620      	mov	r0, r4
 800d54e:	f7ff ff95 	bl	800d47c <_free_r>
 800d552:	6961      	ldr	r1, [r4, #20]
 800d554:	b111      	cbz	r1, 800d55c <_reclaim_reent+0x2c>
 800d556:	4620      	mov	r0, r4
 800d558:	f7ff ff90 	bl	800d47c <_free_r>
 800d55c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d55e:	b111      	cbz	r1, 800d566 <_reclaim_reent+0x36>
 800d560:	4620      	mov	r0, r4
 800d562:	f7ff ff8b 	bl	800d47c <_free_r>
 800d566:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d568:	b111      	cbz	r1, 800d570 <_reclaim_reent+0x40>
 800d56a:	4620      	mov	r0, r4
 800d56c:	f7ff ff86 	bl	800d47c <_free_r>
 800d570:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d572:	b111      	cbz	r1, 800d57a <_reclaim_reent+0x4a>
 800d574:	4620      	mov	r0, r4
 800d576:	f7ff ff81 	bl	800d47c <_free_r>
 800d57a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d57c:	b111      	cbz	r1, 800d584 <_reclaim_reent+0x54>
 800d57e:	4620      	mov	r0, r4
 800d580:	f7ff ff7c 	bl	800d47c <_free_r>
 800d584:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d586:	b111      	cbz	r1, 800d58e <_reclaim_reent+0x5e>
 800d588:	4620      	mov	r0, r4
 800d58a:	f7ff ff77 	bl	800d47c <_free_r>
 800d58e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d590:	b111      	cbz	r1, 800d598 <_reclaim_reent+0x68>
 800d592:	4620      	mov	r0, r4
 800d594:	f7ff ff72 	bl	800d47c <_free_r>
 800d598:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d59a:	b111      	cbz	r1, 800d5a2 <_reclaim_reent+0x72>
 800d59c:	4620      	mov	r0, r4
 800d59e:	f7ff ff6d 	bl	800d47c <_free_r>
 800d5a2:	69a3      	ldr	r3, [r4, #24]
 800d5a4:	b1e3      	cbz	r3, 800d5e0 <_reclaim_reent+0xb0>
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d5aa:	4798      	blx	r3
 800d5ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d5ae:	b1b9      	cbz	r1, 800d5e0 <_reclaim_reent+0xb0>
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d5b6:	f7ff bfad 	b.w	800d514 <cleanup_glue>
 800d5ba:	5949      	ldr	r1, [r1, r5]
 800d5bc:	b941      	cbnz	r1, 800d5d0 <_reclaim_reent+0xa0>
 800d5be:	3504      	adds	r5, #4
 800d5c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5c2:	2d80      	cmp	r5, #128	; 0x80
 800d5c4:	68d9      	ldr	r1, [r3, #12]
 800d5c6:	d1f8      	bne.n	800d5ba <_reclaim_reent+0x8a>
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	f7ff ff57 	bl	800d47c <_free_r>
 800d5ce:	e7ba      	b.n	800d546 <_reclaim_reent+0x16>
 800d5d0:	680e      	ldr	r6, [r1, #0]
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f7ff ff52 	bl	800d47c <_free_r>
 800d5d8:	4631      	mov	r1, r6
 800d5da:	e7ef      	b.n	800d5bc <_reclaim_reent+0x8c>
 800d5dc:	2500      	movs	r5, #0
 800d5de:	e7ef      	b.n	800d5c0 <_reclaim_reent+0x90>
 800d5e0:	bd70      	pop	{r4, r5, r6, pc}
 800d5e2:	bf00      	nop
 800d5e4:	20000194 	.word	0x20000194

0800d5e8 <__malloc_lock>:
 800d5e8:	4801      	ldr	r0, [pc, #4]	; (800d5f0 <__malloc_lock+0x8>)
 800d5ea:	f7f3 bad2 	b.w	8000b92 <__retarget_lock_acquire_recursive>
 800d5ee:	bf00      	nop
 800d5f0:	20000214 	.word	0x20000214

0800d5f4 <__malloc_unlock>:
 800d5f4:	4801      	ldr	r0, [pc, #4]	; (800d5fc <__malloc_unlock+0x8>)
 800d5f6:	f7f3 bae0 	b.w	8000bba <__retarget_lock_release_recursive>
 800d5fa:	bf00      	nop
 800d5fc:	20000214 	.word	0x20000214

0800d600 <_init>:
 800d600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d602:	bf00      	nop
 800d604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d606:	bc08      	pop	{r3}
 800d608:	469e      	mov	lr, r3
 800d60a:	4770      	bx	lr

0800d60c <_fini>:
 800d60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60e:	bf00      	nop
 800d610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d612:	bc08      	pop	{r3}
 800d614:	469e      	mov	lr, r3
 800d616:	4770      	bx	lr
