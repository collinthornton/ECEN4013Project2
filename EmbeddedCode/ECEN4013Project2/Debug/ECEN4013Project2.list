
ECEN4013Project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfb4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800c0c4  0800c0c4  0001c0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c21c  0800c21c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c21c  0800c21c  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c21c  0800c21c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c21c  0800c21c  0001c21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c220  0800c220  0001c220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800c224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031a0  200001f8  0800c41c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20003398  0800c41c  00023398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f121  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006499  00000000  00000000  0004f342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002020  00000000  00000000  000557e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001da0  00000000  00000000  00057800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a721  00000000  00000000  000595a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a5eb  00000000  00000000  00063cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5517  00000000  00000000  0008e2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001337c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000886c  00000000  00000000  00133818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c0ac 	.word	0x0800c0ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800c0ac 	.word	0x0800c0ac

08000150 <_ZN3IMUC1Ev>:
 *      Author: cthornton
 */

#include "IMU.h"

IMU::IMU() {
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	4618      	mov	r0, r3
 800015c:	f000 f860 	bl	8000220 <_ZN6SensorC1Ev>
 8000160:	4a03      	ldr	r2, [pc, #12]	; (8000170 <_ZN3IMUC1Ev+0x20>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	4618      	mov	r0, r3
 800016a:	3708      	adds	r7, #8
 800016c:	46bd      	mov	sp, r7
 800016e:	bd80      	pop	{r7, pc}
 8000170:	0800c158 	.word	0x0800c158

08000174 <_ZN3IMUD1Ev>:

IMU::~IMU() {
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
 800017c:	4a05      	ldr	r2, [pc, #20]	; (8000194 <_ZN3IMUD1Ev+0x20>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	601a      	str	r2, [r3, #0]
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4618      	mov	r0, r3
 8000186:	f000 f85b 	bl	8000240 <_ZN6SensorD1Ev>
	// TODO Auto-generated destructor stub
}
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4618      	mov	r0, r3
 800018e:	3708      	adds	r7, #8
 8000190:	46bd      	mov	sp, r7
 8000192:	bd80      	pop	{r7, pc}
 8000194:	0800c158 	.word	0x0800c158

08000198 <_ZN3IMUD0Ev>:
IMU::~IMU() {
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
}
 80001a0:	6878      	ldr	r0, [r7, #4]
 80001a2:	f7ff ffe7 	bl	8000174 <_ZN3IMUD1Ev>
 80001a6:	2104      	movs	r1, #4
 80001a8:	6878      	ldr	r0, [r7, #4]
 80001aa:	f00b fe75 	bl	800be98 <_ZdlPvj>
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4618      	mov	r0, r3
 80001b2:	3708      	adds	r7, #8
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}

080001b8 <_ZN7MPU6050C1Ev>:
 *      Author: cthornton
 */

#include "MPU6050.h"

MPU6050::MPU6050() {
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	4618      	mov	r0, r3
 80001c4:	f7ff ffc4 	bl	8000150 <_ZN3IMUC1Ev>
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <_ZN7MPU6050C1Ev+0x20>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	4618      	mov	r0, r3
 80001d2:	3708      	adds	r7, #8
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	0800c168 	.word	0x0800c168

080001dc <_ZN7MPU6050D1Ev>:

MPU6050::~MPU6050() {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	4a05      	ldr	r2, [pc, #20]	; (80001fc <_ZN7MPU6050D1Ev+0x20>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4618      	mov	r0, r3
 80001ee:	f7ff ffc1 	bl	8000174 <_ZN3IMUD1Ev>
	// TODO Auto-generated destructor stub
}
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	0800c168 	.word	0x0800c168

08000200 <_ZN7MPU6050D0Ev>:
MPU6050::~MPU6050() {
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
}
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f7ff ffe7 	bl	80001dc <_ZN7MPU6050D1Ev>
 800020e:	2104      	movs	r1, #4
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f00b fe41 	bl	800be98 <_ZdlPvj>
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4618      	mov	r0, r3
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}

08000220 <_ZN6SensorC1Ev>:
 *      Author: cthornton
 */

#include "Sensor.h"

Sensor::Sensor() {
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	4a04      	ldr	r2, [pc, #16]	; (800023c <_ZN6SensorC1Ev+0x1c>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4618      	mov	r0, r3
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	0800c178 	.word	0x0800c178

08000240 <_ZN6SensorD1Ev>:

Sensor::~Sensor() {
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	4a04      	ldr	r2, [pc, #16]	; (800025c <_ZN6SensorD1Ev+0x1c>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4618      	mov	r0, r3
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	0800c178 	.word	0x0800c178

08000260 <_ZN6SensorD0Ev>:
Sensor::~Sensor() {
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
}
 8000268:	6878      	ldr	r0, [r7, #4]
 800026a:	f7ff ffe9 	bl	8000240 <_ZN6SensorD1Ev>
 800026e:	2104      	movs	r1, #4
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f00b fe11 	bl	800be98 <_ZdlPvj>
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4618      	mov	r0, r3
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <_ZN6SensorC1ERKS_>:
 */

#ifndef SRC_SENSOR_H_
#define SRC_SENSOR_H_

class Sensor {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
 800028a:	4a04      	ldr	r2, [pc, #16]	; (800029c <_ZN6SensorC1ERKS_+0x1c>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	4618      	mov	r0, r3
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	0800c178 	.word	0x0800c178

080002a0 <_ZN3IMUC1ERKS_>:
#ifndef INC_IMU_H_
#define INC_IMU_H_

#include <Sensor.h>

class IMU : public Sensor {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	683a      	ldr	r2, [r7, #0]
 80002ae:	4611      	mov	r1, r2
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ffe5 	bl	8000280 <_ZN6SensorC1ERKS_>
 80002b6:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <_ZN3IMUC1ERKS_+0x28>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4618      	mov	r0, r3
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	0800c158 	.word	0x0800c158

080002cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d2:	f000 fc57 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d6:	f000 f82f 	bl	8000338 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002da:	f000 f9f1 	bl	80006c0 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80002de:	f000 f89b 	bl	8000418 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 80002e2:	f000 f8e1 	bl	80004a8 <_ZL12MX_I2C1_Initv>
  MX_RTC_Init();
 80002e6:	f000 f913 	bl	8000510 <_ZL11MX_RTC_Initv>
  MX_SPI1_Init();
 80002ea:	f000 f989 	bl	8000600 <_ZL12MX_SPI1_Initv>
  MX_WWDG_Init();
 80002ee:	f000 f9c3 	bl	8000678 <_ZL12MX_WWDG_Initv>
  MX_FATFS_Init();
 80002f2:	f007 f857 	bl	80073a4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002f6:	f008 fc51 	bl	8008b9c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80002fa:	4a0c      	ldr	r2, [pc, #48]	; (800032c <main+0x60>)
 80002fc:	2100      	movs	r1, #0
 80002fe:	480c      	ldr	r0, [pc, #48]	; (8000330 <main+0x64>)
 8000300:	f008 fcb2 	bl	8008c68 <osThreadNew>
 8000304:	4603      	mov	r3, r0
 8000306:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <main+0x68>)
 8000308:	6013      	str	r3, [r2, #0]


  IMU mpu = MPU6050();
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff53 	bl	80001b8 <_ZN7MPU6050C1Ev>
 8000312:	1d3a      	adds	r2, r7, #4
 8000314:	463b      	mov	r3, r7
 8000316:	4611      	mov	r1, r2
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ffc1 	bl	80002a0 <_ZN3IMUC1ERKS_>
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff5b 	bl	80001dc <_ZN7MPU6050D1Ev>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000326:	f008 fc6b 	bl	8008c00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800032a:	e7fe      	b.n	800032a <main+0x5e>
 800032c:	0800c180 	.word	0x0800c180
 8000330:	0800076d 	.word	0x0800076d
 8000334:	20000318 	.word	0x20000318

08000338 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b094      	sub	sp, #80	; 0x50
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000342:	2228      	movs	r2, #40	; 0x28
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f00b fde6 	bl	800bf18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	f107 0314 	add.w	r3, r7, #20
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
 8000358:	60da      	str	r2, [r3, #12]
 800035a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000368:	2309      	movs	r3, #9
 800036a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800036c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000370:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000376:	2301      	movs	r3, #1
 8000378:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800037a:	2301      	movs	r3, #1
 800037c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037e:	2302      	movs	r3, #2
 8000380:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000382:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000386:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000388:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800038c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000392:	4618      	mov	r0, r3
 8000394:	f002 fecc 	bl	8003130 <HAL_RCC_OscConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	bf14      	ite	ne
 800039e:	2301      	movne	r3, #1
 80003a0:	2300      	moveq	r3, #0
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 80003a8:	f000 f9fc 	bl	80007a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ac:	230f      	movs	r3, #15
 80003ae:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80003b0:	2301      	movs	r3, #1
 80003b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003c0:	f107 0314 	add.w	r3, r7, #20
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f003 f932 	bl	8003630 <HAL_RCC_ClockConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	bf14      	ite	ne
 80003d2:	2301      	movne	r3, #1
 80003d4:	2300      	moveq	r3, #0
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 80003dc:	f000 f9e2 	bl	80007a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 80003e0:	2313      	movs	r3, #19
 80003e2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80003e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80003ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003f2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	4618      	mov	r0, r3
 80003f8:	f003 fae6 	bl	80039c8 <HAL_RCCEx_PeriphCLKConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	bf14      	ite	ne
 8000402:	2301      	movne	r3, #1
 8000404:	2300      	moveq	r3, #0
 8000406:	b2db      	uxtb	r3, r3
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 800040c:	f000 f9ca 	bl	80007a4 <Error_Handler>
  }
}
 8000410:	bf00      	nop
 8000412:	3750      	adds	r7, #80	; 0x50
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000428:	4b1d      	ldr	r3, [pc, #116]	; (80004a0 <_ZL12MX_ADC1_Initv+0x88>)
 800042a:	4a1e      	ldr	r2, [pc, #120]	; (80004a4 <_ZL12MX_ADC1_Initv+0x8c>)
 800042c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800042e:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <_ZL12MX_ADC1_Initv+0x88>)
 8000430:	2200      	movs	r2, #0
 8000432:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000434:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <_ZL12MX_ADC1_Initv+0x88>)
 8000436:	2200      	movs	r2, #0
 8000438:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800043a:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <_ZL12MX_ADC1_Initv+0x88>)
 800043c:	2200      	movs	r2, #0
 800043e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000440:	4b17      	ldr	r3, [pc, #92]	; (80004a0 <_ZL12MX_ADC1_Initv+0x88>)
 8000442:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000446:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000448:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <_ZL12MX_ADC1_Initv+0x88>)
 800044a:	2200      	movs	r2, #0
 800044c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800044e:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <_ZL12MX_ADC1_Initv+0x88>)
 8000450:	2201      	movs	r2, #1
 8000452:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000454:	4812      	ldr	r0, [pc, #72]	; (80004a0 <_ZL12MX_ADC1_Initv+0x88>)
 8000456:	f000 fbc7 	bl	8000be8 <HAL_ADC_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	bf14      	ite	ne
 8000460:	2301      	movne	r3, #1
 8000462:	2300      	moveq	r3, #0
 8000464:	b2db      	uxtb	r3, r3
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 800046a:	f000 f99b 	bl	80007a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800046e:	2300      	movs	r3, #0
 8000470:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000472:	2301      	movs	r3, #1
 8000474:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000476:	2300      	movs	r3, #0
 8000478:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	4619      	mov	r1, r3
 800047e:	4808      	ldr	r0, [pc, #32]	; (80004a0 <_ZL12MX_ADC1_Initv+0x88>)
 8000480:	f000 fc8a 	bl	8000d98 <HAL_ADC_ConfigChannel>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	bf14      	ite	ne
 800048a:	2301      	movne	r3, #1
 800048c:	2300      	moveq	r3, #0
 800048e:	b2db      	uxtb	r3, r3
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8000494:	f000 f986 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000498:	bf00      	nop
 800049a:	3710      	adds	r7, #16
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20000214 	.word	0x20000214
 80004a4:	40012400 	.word	0x40012400

080004a8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <_ZL12MX_I2C1_Initv+0x5c>)
 80004ae:	4a16      	ldr	r2, [pc, #88]	; (8000508 <_ZL12MX_I2C1_Initv+0x60>)
 80004b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004b2:	4b14      	ldr	r3, [pc, #80]	; (8000504 <_ZL12MX_I2C1_Initv+0x5c>)
 80004b4:	4a15      	ldr	r2, [pc, #84]	; (800050c <_ZL12MX_I2C1_Initv+0x64>)
 80004b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <_ZL12MX_I2C1_Initv+0x5c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <_ZL12MX_I2C1_Initv+0x5c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <_ZL12MX_I2C1_Initv+0x5c>)
 80004c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004cc:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <_ZL12MX_I2C1_Initv+0x5c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <_ZL12MX_I2C1_Initv+0x5c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004d8:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <_ZL12MX_I2C1_Initv+0x5c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <_ZL12MX_I2C1_Initv+0x5c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004e4:	4807      	ldr	r0, [pc, #28]	; (8000504 <_ZL12MX_I2C1_Initv+0x5c>)
 80004e6:	f001 f80d 	bl	8001504 <HAL_I2C_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	bf14      	ite	ne
 80004f0:	2301      	movne	r3, #1
 80004f2:	2300      	moveq	r3, #0
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80004fa:	f000 f953 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000244 	.word	0x20000244
 8000508:	40005400 	.word	0x40005400
 800050c:	000186a0 	.word	0x000186a0

08000510 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	2100      	movs	r1, #0
 800051c:	460a      	mov	r2, r1
 800051e:	801a      	strh	r2, [r3, #0]
 8000520:	460a      	mov	r2, r1
 8000522:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000530:	4b31      	ldr	r3, [pc, #196]	; (80005f8 <_ZL11MX_RTC_Initv+0xe8>)
 8000532:	4a32      	ldr	r2, [pc, #200]	; (80005fc <_ZL11MX_RTC_Initv+0xec>)
 8000534:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000536:	4b30      	ldr	r3, [pc, #192]	; (80005f8 <_ZL11MX_RTC_Initv+0xe8>)
 8000538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800053c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800053e:	4b2e      	ldr	r3, [pc, #184]	; (80005f8 <_ZL11MX_RTC_Initv+0xe8>)
 8000540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000544:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000546:	482c      	ldr	r0, [pc, #176]	; (80005f8 <_ZL11MX_RTC_Initv+0xe8>)
 8000548:	f003 fbb8 	bl	8003cbc <HAL_RTC_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	bf14      	ite	ne
 8000552:	2301      	movne	r3, #1
 8000554:	2300      	moveq	r3, #0
 8000556:	b2db      	uxtb	r3, r3
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <_ZL11MX_RTC_Initv+0x50>
  {
    Error_Handler();
 800055c:	f000 f922 	bl	80007a4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000560:	2300      	movs	r3, #0
 8000562:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8000564:	2300      	movs	r3, #0
 8000566:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8000568:	2300      	movs	r3, #0
 800056a:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2201      	movs	r2, #1
 8000572:	4619      	mov	r1, r3
 8000574:	4820      	ldr	r0, [pc, #128]	; (80005f8 <_ZL11MX_RTC_Initv+0xe8>)
 8000576:	f003 fc37 	bl	8003de8 <HAL_RTC_SetTime>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	bf14      	ite	ne
 8000580:	2301      	movne	r3, #1
 8000582:	2300      	moveq	r3, #0
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <_ZL11MX_RTC_Initv+0x7e>
  {
    Error_Handler();
 800058a:	f000 f90b 	bl	80007a4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800058e:	2301      	movs	r3, #1
 8000590:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000592:	2301      	movs	r3, #1
 8000594:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8000596:	2301      	movs	r3, #1
 8000598:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 800059a:	2300      	movs	r3, #0
 800059c:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	2201      	movs	r2, #1
 80005a4:	4619      	mov	r1, r3
 80005a6:	4814      	ldr	r0, [pc, #80]	; (80005f8 <_ZL11MX_RTC_Initv+0xe8>)
 80005a8:	f003 fd8e 	bl	80040c8 <HAL_RTC_SetDate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	bf14      	ite	ne
 80005b2:	2301      	movne	r3, #1
 80005b4:	2300      	moveq	r3, #0
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <_ZL11MX_RTC_Initv+0xb0>
  {
    Error_Handler();
 80005bc:	f000 f8f2 	bl	80007a4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4808      	ldr	r0, [pc, #32]	; (80005f8 <_ZL11MX_RTC_Initv+0xe8>)
 80005d8:	f003 fe2c 	bl	8004234 <HAL_RTC_SetAlarm>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	bf14      	ite	ne
 80005e2:	2301      	movne	r3, #1
 80005e4:	2300      	moveq	r3, #0
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <_ZL11MX_RTC_Initv+0xe0>
  {
    Error_Handler();
 80005ec:	f000 f8da 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000298 	.word	0x20000298
 80005fc:	40002800 	.word	0x40002800

08000600 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000604:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <_ZL12MX_SPI1_Initv+0x70>)
 8000606:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <_ZL12MX_SPI1_Initv+0x74>)
 8000608:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800060a:	4b19      	ldr	r3, [pc, #100]	; (8000670 <_ZL12MX_SPI1_Initv+0x70>)
 800060c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000610:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <_ZL12MX_SPI1_Initv+0x70>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <_ZL12MX_SPI1_Initv+0x70>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <_ZL12MX_SPI1_Initv+0x70>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <_ZL12MX_SPI1_Initv+0x70>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <_ZL12MX_SPI1_Initv+0x70>)
 800062c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000630:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <_ZL12MX_SPI1_Initv+0x70>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <_ZL12MX_SPI1_Initv+0x70>)
 800063a:	2200      	movs	r2, #0
 800063c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <_ZL12MX_SPI1_Initv+0x70>)
 8000640:	2200      	movs	r2, #0
 8000642:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <_ZL12MX_SPI1_Initv+0x70>)
 8000646:	2200      	movs	r2, #0
 8000648:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <_ZL12MX_SPI1_Initv+0x70>)
 800064c:	220a      	movs	r2, #10
 800064e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000650:	4807      	ldr	r0, [pc, #28]	; (8000670 <_ZL12MX_SPI1_Initv+0x70>)
 8000652:	f004 f929 	bl	80048a8 <HAL_SPI_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	bf14      	ite	ne
 800065c:	2301      	movne	r3, #1
 800065e:	2300      	moveq	r3, #0
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000666:	f000 f89d 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200002ac 	.word	0x200002ac
 8000674:	40013000 	.word	0x40013000

08000678 <_ZL12MX_WWDG_Initv>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <_ZL12MX_WWDG_Initv+0x40>)
 800067e:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <_ZL12MX_WWDG_Initv+0x44>)
 8000680:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <_ZL12MX_WWDG_Initv+0x40>)
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <_ZL12MX_WWDG_Initv+0x40>)
 800068a:	2240      	movs	r2, #64	; 0x40
 800068c:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <_ZL12MX_WWDG_Initv+0x40>)
 8000690:	2240      	movs	r2, #64	; 0x40
 8000692:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <_ZL12MX_WWDG_Initv+0x40>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 800069a:	4807      	ldr	r0, [pc, #28]	; (80006b8 <_ZL12MX_WWDG_Initv+0x40>)
 800069c:	f004 fbd2 	bl	8004e44 <HAL_WWDG_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	bf14      	ite	ne
 80006a6:	2301      	movne	r3, #1
 80006a8:	2300      	moveq	r3, #0
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <_ZL12MX_WWDG_Initv+0x3c>
  {
    Error_Handler();
 80006b0:	f000 f878 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000304 	.word	0x20000304
 80006bc:	40002c00 	.word	0x40002c00

080006c0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <_ZL12MX_GPIO_Initv+0xa4>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a22      	ldr	r2, [pc, #136]	; (8000764 <_ZL12MX_GPIO_Initv+0xa4>)
 80006da:	f043 0310 	orr.w	r3, r3, #16
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <_ZL12MX_GPIO_Initv+0xa4>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0310 	and.w	r3, r3, #16
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <_ZL12MX_GPIO_Initv+0xa4>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <_ZL12MX_GPIO_Initv+0xa4>)
 80006f2:	f043 0320 	orr.w	r3, r3, #32
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <_ZL12MX_GPIO_Initv+0xa4>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0320 	and.w	r3, r3, #32
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <_ZL12MX_GPIO_Initv+0xa4>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a16      	ldr	r2, [pc, #88]	; (8000764 <_ZL12MX_GPIO_Initv+0xa4>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <_ZL12MX_GPIO_Initv+0xa4>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <_ZL12MX_GPIO_Initv+0xa4>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a10      	ldr	r2, [pc, #64]	; (8000764 <_ZL12MX_GPIO_Initv+0xa4>)
 8000722:	f043 0308 	orr.w	r3, r3, #8
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <_ZL12MX_GPIO_Initv+0xa4>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0308 	and.w	r3, r3, #8
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SD_Sel_GPIO_Port, SPI_SD_Sel_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2101      	movs	r1, #1
 8000738:	480b      	ldr	r0, [pc, #44]	; (8000768 <_ZL12MX_GPIO_Initv+0xa8>)
 800073a:	f000 fecb 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_SD_Sel_Pin */
  GPIO_InitStruct.Pin = SPI_SD_Sel_Pin;
 800073e:	2301      	movs	r3, #1
 8000740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800074a:	2301      	movs	r3, #1
 800074c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_SD_Sel_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	4619      	mov	r1, r3
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <_ZL12MX_GPIO_Initv+0xa8>)
 8000756:	f000 fd39 	bl	80011cc <HAL_GPIO_Init>

}
 800075a:	bf00      	nop
 800075c:	3720      	adds	r7, #32
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000
 8000768:	40010c00 	.word	0x40010c00

0800076c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000774:	f00a ff1a 	bl	800b5ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f008 fb1f 	bl	8008dbc <osDelay>
 800077e:	e7fb      	b.n	8000778 <_Z16StartDefaultTaskPv+0xc>

08000780 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d101      	bne.n	8000796 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000792:	f000 fa0d 	bl	8000bb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40000800 	.word	0x40000800

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <HAL_MspInit+0x68>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	4a17      	ldr	r2, [pc, #92]	; (8000818 <HAL_MspInit+0x68>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6193      	str	r3, [r2, #24]
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <HAL_MspInit+0x68>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_MspInit+0x68>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	4a11      	ldr	r2, [pc, #68]	; (8000818 <HAL_MspInit+0x68>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	61d3      	str	r3, [r2, #28]
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <HAL_MspInit+0x68>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	210f      	movs	r1, #15
 80007ea:	f06f 0001 	mvn.w	r0, #1
 80007ee:	f000 fcc2 	bl	8001176 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_MspInit+0x6c>)
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <HAL_MspInit+0x6c>)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40021000 	.word	0x40021000
 800081c:	40010000 	.word	0x40010000

08000820 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <HAL_ADC_MspInit+0x6c>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d121      	bne.n	8000884 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <HAL_ADC_MspInit+0x70>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a12      	ldr	r2, [pc, #72]	; (8000890 <HAL_ADC_MspInit+0x70>)
 8000846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <HAL_ADC_MspInit+0x70>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <HAL_ADC_MspInit+0x70>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <HAL_ADC_MspInit+0x70>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <HAL_ADC_MspInit+0x70>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0304 	and.w	r3, r3, #4
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000870:	2301      	movs	r3, #1
 8000872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000874:	2303      	movs	r3, #3
 8000876:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	4619      	mov	r1, r3
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <HAL_ADC_MspInit+0x74>)
 8000880:	f000 fca4 	bl	80011cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000884:	bf00      	nop
 8000886:	3720      	adds	r7, #32
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40012400 	.word	0x40012400
 8000890:	40021000 	.word	0x40021000
 8000894:	40010800 	.word	0x40010800

08000898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a15      	ldr	r2, [pc, #84]	; (8000908 <HAL_I2C_MspInit+0x70>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d123      	bne.n	8000900 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <HAL_I2C_MspInit+0x74>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a13      	ldr	r2, [pc, #76]	; (800090c <HAL_I2C_MspInit+0x74>)
 80008be:	f043 0308 	orr.w	r3, r3, #8
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <HAL_I2C_MspInit+0x74>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0308 	and.w	r3, r3, #8
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008d0:	23c0      	movs	r3, #192	; 0xc0
 80008d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d4:	2312      	movs	r3, #18
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	4619      	mov	r1, r3
 80008e2:	480b      	ldr	r0, [pc, #44]	; (8000910 <HAL_I2C_MspInit+0x78>)
 80008e4:	f000 fc72 	bl	80011cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_I2C_MspInit+0x74>)
 80008ea:	69db      	ldr	r3, [r3, #28]
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <HAL_I2C_MspInit+0x74>)
 80008ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008f2:	61d3      	str	r3, [r2, #28]
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_I2C_MspInit+0x74>)
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40005400 	.word	0x40005400
 800090c:	40021000 	.word	0x40021000
 8000910:	40010c00 	.word	0x40010c00

08000914 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <HAL_RTC_MspInit+0x3c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d110      	bne.n	8000948 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000926:	f002 fbf7 	bl	8003118 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_RTC_MspInit+0x40>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4a09      	ldr	r2, [pc, #36]	; (8000954 <HAL_RTC_MspInit+0x40>)
 8000930:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000934:	61d3      	str	r3, [r2, #28]
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <HAL_RTC_MspInit+0x40>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_RTC_MspInit+0x44>)
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40002800 	.word	0x40002800
 8000954:	40021000 	.word	0x40021000
 8000958:	4242043c 	.word	0x4242043c

0800095c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <HAL_SPI_MspInit+0x88>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d12f      	bne.n	80009dc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <HAL_SPI_MspInit+0x8c>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a19      	ldr	r2, [pc, #100]	; (80009e8 <HAL_SPI_MspInit+0x8c>)
 8000982:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <HAL_SPI_MspInit+0x8c>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_SPI_MspInit+0x8c>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <HAL_SPI_MspInit+0x8c>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_SPI_MspInit+0x8c>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80009ac:	23a0      	movs	r3, #160	; 0xa0
 80009ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4619      	mov	r1, r3
 80009be:	480b      	ldr	r0, [pc, #44]	; (80009ec <HAL_SPI_MspInit+0x90>)
 80009c0:	f000 fc04 	bl	80011cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009c4:	2340      	movs	r3, #64	; 0x40
 80009c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <HAL_SPI_MspInit+0x90>)
 80009d8:	f000 fbf8 	bl	80011cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40013000 	.word	0x40013000
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40010800 	.word	0x40010800

080009f0 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <HAL_WWDG_MspInit+0x34>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d10b      	bne.n	8000a1a <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_WWDG_MspInit+0x38>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_WWDG_MspInit+0x38>)
 8000a08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a0c:	61d3      	str	r3, [r2, #28]
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_WWDG_MspInit+0x38>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	40002c00 	.word	0x40002c00
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08c      	sub	sp, #48	; 0x30
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	201e      	movs	r0, #30
 8000a42:	f000 fb98 	bl	8001176 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a46:	201e      	movs	r0, #30
 8000a48:	f000 fbb1 	bl	80011ae <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <HAL_InitTick+0x9c>)
 8000a4e:	69db      	ldr	r3, [r3, #28]
 8000a50:	4a1d      	ldr	r2, [pc, #116]	; (8000ac8 <HAL_InitTick+0x9c>)
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	61d3      	str	r3, [r2, #28]
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <HAL_InitTick+0x9c>)
 8000a5a:	69db      	ldr	r3, [r3, #28]
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a64:	f107 0210 	add.w	r2, r7, #16
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 ff5c 	bl	800392c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a74:	f002 ff32 	bl	80038dc <HAL_RCC_GetPCLK1Freq>
 8000a78:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a7c:	4a13      	ldr	r2, [pc, #76]	; (8000acc <HAL_InitTick+0xa0>)
 8000a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a82:	0c9b      	lsrs	r3, r3, #18
 8000a84:	3b01      	subs	r3, #1
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_InitTick+0xa4>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <HAL_InitTick+0xa8>)
 8000a8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <HAL_InitTick+0xa4>)
 8000a90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a94:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_InitTick+0xa4>)
 8000a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <HAL_InitTick+0xa4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_InitTick+0xa4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000aa8:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <HAL_InitTick+0xa4>)
 8000aaa:	f003 ff81 	bl	80049b0 <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d104      	bne.n	8000abe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000ab4:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <HAL_InitTick+0xa4>)
 8000ab6:	f003 ffd3 	bl	8004a60 <HAL_TIM_Base_Start_IT>
 8000aba:	4603      	mov	r3, r0
 8000abc:	e000      	b.n	8000ac0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3730      	adds	r7, #48	; 0x30
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	431bde83 	.word	0x431bde83
 8000ad0:	20001f18 	.word	0x20001f18
 8000ad4:	40000800 	.word	0x40000800

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <NMI_Handler+0x4>

08000ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
	...

08000b04 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b0a:	f000 ff70 	bl	80019ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200030a0 	.word	0x200030a0

08000b18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <TIM4_IRQHandler+0x10>)
 8000b1e:	f003 fff1 	bl	8004b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20001f18 	.word	0x20001f18

08000b2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b3a:	490d      	ldr	r1, [pc, #52]	; (8000b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b50:	4c0a      	ldr	r4, [pc, #40]	; (8000b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b5e:	f7ff ffe5 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b62:	f00b f99d 	bl	800bea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b66:	f7ff fbb1 	bl	80002cc <main>
  bx lr
 8000b6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8000b74:	0800c224 	.word	0x0800c224
  ldr r2, =_sbss
 8000b78:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8000b7c:	20003398 	.word	0x20003398

08000b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC1_2_IRQHandler>
	...

08000b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_Init+0x28>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_Init+0x28>)
 8000b8e:	f043 0310 	orr.w	r3, r3, #16
 8000b92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 fae3 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9a:	200f      	movs	r0, #15
 8000b9c:	f7ff ff46 	bl	8000a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba0:	f7ff fe06 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40022000 	.word	0x40022000

08000bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_IncTick+0x1c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a03      	ldr	r2, [pc, #12]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20001f60 	.word	0x20001f60

08000bd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <HAL_GetTick+0x10>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	20001f60 	.word	0x20001f60

08000be8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d101      	bne.n	8000c0a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e0be      	b.n	8000d88 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d109      	bne.n	8000c2c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff fdfa 	bl	8000820 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f000 f9ab 	bl	8000f88 <ADC_ConversionStop_Disable>
 8000c32:	4603      	mov	r3, r0
 8000c34:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f040 8099 	bne.w	8000d76 <HAL_ADC_Init+0x18e>
 8000c44:	7dfb      	ldrb	r3, [r7, #23]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 8095 	bne.w	8000d76 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c54:	f023 0302 	bic.w	r3, r3, #2
 8000c58:	f043 0202 	orr.w	r2, r3, #2
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c68:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7b1b      	ldrb	r3, [r3, #12]
 8000c6e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c70:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c80:	d003      	beq.n	8000c8a <HAL_ADC_Init+0xa2>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d102      	bne.n	8000c90 <HAL_ADC_Init+0xa8>
 8000c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c8e:	e000      	b.n	8000c92 <HAL_ADC_Init+0xaa>
 8000c90:	2300      	movs	r3, #0
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7d1b      	ldrb	r3, [r3, #20]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d119      	bne.n	8000cd4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	7b1b      	ldrb	r3, [r3, #12]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d109      	bne.n	8000cbc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	035a      	lsls	r2, r3, #13
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	e00b      	b.n	8000cd4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc0:	f043 0220 	orr.w	r2, r3, #32
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ccc:	f043 0201 	orr.w	r2, r3, #1
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <HAL_ADC_Init+0x1a8>)
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	6812      	ldr	r2, [r2, #0]
 8000cf6:	68b9      	ldr	r1, [r7, #8]
 8000cf8:	430b      	orrs	r3, r1
 8000cfa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d04:	d003      	beq.n	8000d0e <HAL_ADC_Init+0x126>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d104      	bne.n	8000d18 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	051b      	lsls	r3, r3, #20
 8000d16:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <HAL_ADC_Init+0x1ac>)
 8000d34:	4013      	ands	r3, r2
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d10b      	bne.n	8000d54 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d46:	f023 0303 	bic.w	r3, r3, #3
 8000d4a:	f043 0201 	orr.w	r2, r3, #1
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d52:	e018      	b.n	8000d86 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d58:	f023 0312 	bic.w	r3, r3, #18
 8000d5c:	f043 0210 	orr.w	r2, r3, #16
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d68:	f043 0201 	orr.w	r2, r3, #1
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d74:	e007      	b.n	8000d86 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7a:	f043 0210 	orr.w	r2, r3, #16
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	ffe1f7fd 	.word	0xffe1f7fd
 8000d94:	ff1f0efe 	.word	0xff1f0efe

08000d98 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d101      	bne.n	8000db8 <HAL_ADC_ConfigChannel+0x20>
 8000db4:	2302      	movs	r3, #2
 8000db6:	e0dc      	b.n	8000f72 <HAL_ADC_ConfigChannel+0x1da>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b06      	cmp	r3, #6
 8000dc6:	d81c      	bhi.n	8000e02 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3b05      	subs	r3, #5
 8000dda:	221f      	movs	r2, #31
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	4019      	ands	r1, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	4613      	mov	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	3b05      	subs	r3, #5
 8000df4:	fa00 f203 	lsl.w	r2, r0, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	635a      	str	r2, [r3, #52]	; 0x34
 8000e00:	e03c      	b.n	8000e7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b0c      	cmp	r3, #12
 8000e08:	d81c      	bhi.n	8000e44 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685a      	ldr	r2, [r3, #4]
 8000e14:	4613      	mov	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	3b23      	subs	r3, #35	; 0x23
 8000e1c:	221f      	movs	r2, #31
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	4019      	ands	r1, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	3b23      	subs	r3, #35	; 0x23
 8000e36:	fa00 f203 	lsl.w	r2, r0, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	631a      	str	r2, [r3, #48]	; 0x30
 8000e42:	e01b      	b.n	8000e7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	3b41      	subs	r3, #65	; 0x41
 8000e56:	221f      	movs	r2, #31
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	4019      	ands	r1, r3
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	6818      	ldr	r0, [r3, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	3b41      	subs	r3, #65	; 0x41
 8000e70:	fa00 f203 	lsl.w	r2, r0, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b09      	cmp	r3, #9
 8000e82:	d91c      	bls.n	8000ebe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	68d9      	ldr	r1, [r3, #12]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	4413      	add	r3, r2
 8000e94:	3b1e      	subs	r3, #30
 8000e96:	2207      	movs	r2, #7
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	4019      	ands	r1, r3
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	6898      	ldr	r0, [r3, #8]
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	3b1e      	subs	r3, #30
 8000eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	e019      	b.n	8000ef2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6919      	ldr	r1, [r3, #16]
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	2207      	movs	r2, #7
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	4019      	ands	r1, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	6898      	ldr	r0, [r3, #8]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	fa00 f203 	lsl.w	r2, r0, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b10      	cmp	r3, #16
 8000ef8:	d003      	beq.n	8000f02 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000efe:	2b11      	cmp	r3, #17
 8000f00:	d132      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <HAL_ADC_ConfigChannel+0x1e4>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d125      	bne.n	8000f58 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d126      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f28:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b10      	cmp	r3, #16
 8000f30:	d11a      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f38:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3c:	0c9a      	lsrs	r2, r3, #18
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f48:	e002      	b.n	8000f50 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f9      	bne.n	8000f4a <HAL_ADC_ConfigChannel+0x1b2>
 8000f56:	e007      	b.n	8000f68 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5c:	f043 0220 	orr.w	r2, r3, #32
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	40012400 	.word	0x40012400
 8000f80:	20000000 	.word	0x20000000
 8000f84:	431bde83 	.word	0x431bde83

08000f88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d12e      	bne.n	8001000 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0201 	bic.w	r2, r2, #1
 8000fb0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fb2:	f7ff fe0f 	bl	8000bd4 <HAL_GetTick>
 8000fb6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fb8:	e01b      	b.n	8000ff2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fba:	f7ff fe0b 	bl	8000bd4 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d914      	bls.n	8000ff2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d10d      	bne.n	8000ff2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fda:	f043 0210 	orr.w	r2, r3, #16
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe6:	f043 0201 	orr.w	r2, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e007      	b.n	8001002 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d0dc      	beq.n	8000fba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4906      	ldr	r1, [pc, #24]	; (80010a4 <__NVIC_EnableIRQ+0x34>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff4f 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff64 	bl	8001054 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ffb2 	bl	80010fc <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff81 	bl	80010a8 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff57 	bl	8001070 <__NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b08b      	sub	sp, #44	; 0x2c
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011de:	e169      	b.n	80014b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011e0:	2201      	movs	r2, #1
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	f040 8158 	bne.w	80014ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4a9a      	ldr	r2, [pc, #616]	; (800146c <HAL_GPIO_Init+0x2a0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d05e      	beq.n	80012c6 <HAL_GPIO_Init+0xfa>
 8001208:	4a98      	ldr	r2, [pc, #608]	; (800146c <HAL_GPIO_Init+0x2a0>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d875      	bhi.n	80012fa <HAL_GPIO_Init+0x12e>
 800120e:	4a98      	ldr	r2, [pc, #608]	; (8001470 <HAL_GPIO_Init+0x2a4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d058      	beq.n	80012c6 <HAL_GPIO_Init+0xfa>
 8001214:	4a96      	ldr	r2, [pc, #600]	; (8001470 <HAL_GPIO_Init+0x2a4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d86f      	bhi.n	80012fa <HAL_GPIO_Init+0x12e>
 800121a:	4a96      	ldr	r2, [pc, #600]	; (8001474 <HAL_GPIO_Init+0x2a8>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d052      	beq.n	80012c6 <HAL_GPIO_Init+0xfa>
 8001220:	4a94      	ldr	r2, [pc, #592]	; (8001474 <HAL_GPIO_Init+0x2a8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d869      	bhi.n	80012fa <HAL_GPIO_Init+0x12e>
 8001226:	4a94      	ldr	r2, [pc, #592]	; (8001478 <HAL_GPIO_Init+0x2ac>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d04c      	beq.n	80012c6 <HAL_GPIO_Init+0xfa>
 800122c:	4a92      	ldr	r2, [pc, #584]	; (8001478 <HAL_GPIO_Init+0x2ac>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d863      	bhi.n	80012fa <HAL_GPIO_Init+0x12e>
 8001232:	4a92      	ldr	r2, [pc, #584]	; (800147c <HAL_GPIO_Init+0x2b0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d046      	beq.n	80012c6 <HAL_GPIO_Init+0xfa>
 8001238:	4a90      	ldr	r2, [pc, #576]	; (800147c <HAL_GPIO_Init+0x2b0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d85d      	bhi.n	80012fa <HAL_GPIO_Init+0x12e>
 800123e:	2b12      	cmp	r3, #18
 8001240:	d82a      	bhi.n	8001298 <HAL_GPIO_Init+0xcc>
 8001242:	2b12      	cmp	r3, #18
 8001244:	d859      	bhi.n	80012fa <HAL_GPIO_Init+0x12e>
 8001246:	a201      	add	r2, pc, #4	; (adr r2, 800124c <HAL_GPIO_Init+0x80>)
 8001248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124c:	080012c7 	.word	0x080012c7
 8001250:	080012a1 	.word	0x080012a1
 8001254:	080012b3 	.word	0x080012b3
 8001258:	080012f5 	.word	0x080012f5
 800125c:	080012fb 	.word	0x080012fb
 8001260:	080012fb 	.word	0x080012fb
 8001264:	080012fb 	.word	0x080012fb
 8001268:	080012fb 	.word	0x080012fb
 800126c:	080012fb 	.word	0x080012fb
 8001270:	080012fb 	.word	0x080012fb
 8001274:	080012fb 	.word	0x080012fb
 8001278:	080012fb 	.word	0x080012fb
 800127c:	080012fb 	.word	0x080012fb
 8001280:	080012fb 	.word	0x080012fb
 8001284:	080012fb 	.word	0x080012fb
 8001288:	080012fb 	.word	0x080012fb
 800128c:	080012fb 	.word	0x080012fb
 8001290:	080012a9 	.word	0x080012a9
 8001294:	080012bd 	.word	0x080012bd
 8001298:	4a79      	ldr	r2, [pc, #484]	; (8001480 <HAL_GPIO_Init+0x2b4>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d013      	beq.n	80012c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800129e:	e02c      	b.n	80012fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	623b      	str	r3, [r7, #32]
          break;
 80012a6:	e029      	b.n	80012fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	3304      	adds	r3, #4
 80012ae:	623b      	str	r3, [r7, #32]
          break;
 80012b0:	e024      	b.n	80012fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	3308      	adds	r3, #8
 80012b8:	623b      	str	r3, [r7, #32]
          break;
 80012ba:	e01f      	b.n	80012fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	330c      	adds	r3, #12
 80012c2:	623b      	str	r3, [r7, #32]
          break;
 80012c4:	e01a      	b.n	80012fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d102      	bne.n	80012d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ce:	2304      	movs	r3, #4
 80012d0:	623b      	str	r3, [r7, #32]
          break;
 80012d2:	e013      	b.n	80012fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d105      	bne.n	80012e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012dc:	2308      	movs	r3, #8
 80012de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	611a      	str	r2, [r3, #16]
          break;
 80012e6:	e009      	b.n	80012fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e8:	2308      	movs	r3, #8
 80012ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	615a      	str	r2, [r3, #20]
          break;
 80012f2:	e003      	b.n	80012fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
          break;
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x130>
          break;
 80012fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2bff      	cmp	r3, #255	; 0xff
 8001300:	d801      	bhi.n	8001306 <HAL_GPIO_Init+0x13a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	e001      	b.n	800130a <HAL_GPIO_Init+0x13e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3304      	adds	r3, #4
 800130a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	2bff      	cmp	r3, #255	; 0xff
 8001310:	d802      	bhi.n	8001318 <HAL_GPIO_Init+0x14c>
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	e002      	b.n	800131e <HAL_GPIO_Init+0x152>
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	3b08      	subs	r3, #8
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	210f      	movs	r1, #15
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	401a      	ands	r2, r3
 8001330:	6a39      	ldr	r1, [r7, #32]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	431a      	orrs	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 80b1 	beq.w	80014ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800134c:	4b4d      	ldr	r3, [pc, #308]	; (8001484 <HAL_GPIO_Init+0x2b8>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a4c      	ldr	r2, [pc, #304]	; (8001484 <HAL_GPIO_Init+0x2b8>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b4a      	ldr	r3, [pc, #296]	; (8001484 <HAL_GPIO_Init+0x2b8>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001364:	4a48      	ldr	r2, [pc, #288]	; (8001488 <HAL_GPIO_Init+0x2bc>)
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	3302      	adds	r3, #2
 800136c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001370:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	220f      	movs	r2, #15
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a40      	ldr	r2, [pc, #256]	; (800148c <HAL_GPIO_Init+0x2c0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d013      	beq.n	80013b8 <HAL_GPIO_Init+0x1ec>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a3f      	ldr	r2, [pc, #252]	; (8001490 <HAL_GPIO_Init+0x2c4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d00d      	beq.n	80013b4 <HAL_GPIO_Init+0x1e8>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a3e      	ldr	r2, [pc, #248]	; (8001494 <HAL_GPIO_Init+0x2c8>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d007      	beq.n	80013b0 <HAL_GPIO_Init+0x1e4>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a3d      	ldr	r2, [pc, #244]	; (8001498 <HAL_GPIO_Init+0x2cc>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d101      	bne.n	80013ac <HAL_GPIO_Init+0x1e0>
 80013a8:	2303      	movs	r3, #3
 80013aa:	e006      	b.n	80013ba <HAL_GPIO_Init+0x1ee>
 80013ac:	2304      	movs	r3, #4
 80013ae:	e004      	b.n	80013ba <HAL_GPIO_Init+0x1ee>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e002      	b.n	80013ba <HAL_GPIO_Init+0x1ee>
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <HAL_GPIO_Init+0x1ee>
 80013b8:	2300      	movs	r3, #0
 80013ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013bc:	f002 0203 	and.w	r2, r2, #3
 80013c0:	0092      	lsls	r2, r2, #2
 80013c2:	4093      	lsls	r3, r2
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013ca:	492f      	ldr	r1, [pc, #188]	; (8001488 <HAL_GPIO_Init+0x2bc>)
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d006      	beq.n	80013f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013e4:	4b2d      	ldr	r3, [pc, #180]	; (800149c <HAL_GPIO_Init+0x2d0>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	492c      	ldr	r1, [pc, #176]	; (800149c <HAL_GPIO_Init+0x2d0>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]
 80013f0:	e006      	b.n	8001400 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013f2:	4b2a      	ldr	r3, [pc, #168]	; (800149c <HAL_GPIO_Init+0x2d0>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	4928      	ldr	r1, [pc, #160]	; (800149c <HAL_GPIO_Init+0x2d0>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d006      	beq.n	800141a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800140c:	4b23      	ldr	r3, [pc, #140]	; (800149c <HAL_GPIO_Init+0x2d0>)
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	4922      	ldr	r1, [pc, #136]	; (800149c <HAL_GPIO_Init+0x2d0>)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
 8001418:	e006      	b.n	8001428 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_GPIO_Init+0x2d0>)
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	43db      	mvns	r3, r3
 8001422:	491e      	ldr	r1, [pc, #120]	; (800149c <HAL_GPIO_Init+0x2d0>)
 8001424:	4013      	ands	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d006      	beq.n	8001442 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_GPIO_Init+0x2d0>)
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	4918      	ldr	r1, [pc, #96]	; (800149c <HAL_GPIO_Init+0x2d0>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	608b      	str	r3, [r1, #8]
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001442:	4b16      	ldr	r3, [pc, #88]	; (800149c <HAL_GPIO_Init+0x2d0>)
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	43db      	mvns	r3, r3
 800144a:	4914      	ldr	r1, [pc, #80]	; (800149c <HAL_GPIO_Init+0x2d0>)
 800144c:	4013      	ands	r3, r2
 800144e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d021      	beq.n	80014a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <HAL_GPIO_Init+0x2d0>)
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	490e      	ldr	r1, [pc, #56]	; (800149c <HAL_GPIO_Init+0x2d0>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	60cb      	str	r3, [r1, #12]
 8001468:	e021      	b.n	80014ae <HAL_GPIO_Init+0x2e2>
 800146a:	bf00      	nop
 800146c:	10320000 	.word	0x10320000
 8001470:	10310000 	.word	0x10310000
 8001474:	10220000 	.word	0x10220000
 8001478:	10210000 	.word	0x10210000
 800147c:	10120000 	.word	0x10120000
 8001480:	10110000 	.word	0x10110000
 8001484:	40021000 	.word	0x40021000
 8001488:	40010000 	.word	0x40010000
 800148c:	40010800 	.word	0x40010800
 8001490:	40010c00 	.word	0x40010c00
 8001494:	40011000 	.word	0x40011000
 8001498:	40011400 	.word	0x40011400
 800149c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_GPIO_Init+0x304>)
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	4909      	ldr	r1, [pc, #36]	; (80014d0 <HAL_GPIO_Init+0x304>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	3301      	adds	r3, #1
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	fa22 f303 	lsr.w	r3, r2, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f47f ae8e 	bne.w	80011e0 <HAL_GPIO_Init+0x14>
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	372c      	adds	r7, #44	; 0x2c
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	40010400 	.word	0x40010400

080014d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
 80014e0:	4613      	mov	r3, r2
 80014e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014e4:	787b      	ldrb	r3, [r7, #1]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ea:	887a      	ldrh	r2, [r7, #2]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014f0:	e003      	b.n	80014fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014f2:	887b      	ldrh	r3, [r7, #2]
 80014f4:	041a      	lsls	r2, r3, #16
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	611a      	str	r2, [r3, #16]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e12b      	b.n	800176e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d106      	bne.n	8001530 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff f9b4 	bl	8000898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2224      	movs	r2, #36	; 0x24
 8001534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0201 	bic.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001556:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001566:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001568:	f002 f9b8 	bl	80038dc <HAL_RCC_GetPCLK1Freq>
 800156c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	4a81      	ldr	r2, [pc, #516]	; (8001778 <HAL_I2C_Init+0x274>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d807      	bhi.n	8001588 <HAL_I2C_Init+0x84>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4a80      	ldr	r2, [pc, #512]	; (800177c <HAL_I2C_Init+0x278>)
 800157c:	4293      	cmp	r3, r2
 800157e:	bf94      	ite	ls
 8001580:	2301      	movls	r3, #1
 8001582:	2300      	movhi	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	e006      	b.n	8001596 <HAL_I2C_Init+0x92>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4a7d      	ldr	r2, [pc, #500]	; (8001780 <HAL_I2C_Init+0x27c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	bf94      	ite	ls
 8001590:	2301      	movls	r3, #1
 8001592:	2300      	movhi	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e0e7      	b.n	800176e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4a78      	ldr	r2, [pc, #480]	; (8001784 <HAL_I2C_Init+0x280>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	0c9b      	lsrs	r3, r3, #18
 80015a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4a6a      	ldr	r2, [pc, #424]	; (8001778 <HAL_I2C_Init+0x274>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d802      	bhi.n	80015d8 <HAL_I2C_Init+0xd4>
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	3301      	adds	r3, #1
 80015d6:	e009      	b.n	80015ec <HAL_I2C_Init+0xe8>
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	4a69      	ldr	r2, [pc, #420]	; (8001788 <HAL_I2C_Init+0x284>)
 80015e4:	fba2 2303 	umull	r2, r3, r2, r3
 80015e8:	099b      	lsrs	r3, r3, #6
 80015ea:	3301      	adds	r3, #1
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	430b      	orrs	r3, r1
 80015f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	495c      	ldr	r1, [pc, #368]	; (8001778 <HAL_I2C_Init+0x274>)
 8001608:	428b      	cmp	r3, r1
 800160a:	d819      	bhi.n	8001640 <HAL_I2C_Init+0x13c>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	1e59      	subs	r1, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fbb1 f3f3 	udiv	r3, r1, r3
 800161a:	1c59      	adds	r1, r3, #1
 800161c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001620:	400b      	ands	r3, r1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00a      	beq.n	800163c <HAL_I2C_Init+0x138>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1e59      	subs	r1, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fbb1 f3f3 	udiv	r3, r1, r3
 8001634:	3301      	adds	r3, #1
 8001636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800163a:	e051      	b.n	80016e0 <HAL_I2C_Init+0x1dc>
 800163c:	2304      	movs	r3, #4
 800163e:	e04f      	b.n	80016e0 <HAL_I2C_Init+0x1dc>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d111      	bne.n	800166c <HAL_I2C_Init+0x168>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1e58      	subs	r0, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	440b      	add	r3, r1
 8001656:	fbb0 f3f3 	udiv	r3, r0, r3
 800165a:	3301      	adds	r3, #1
 800165c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	e012      	b.n	8001692 <HAL_I2C_Init+0x18e>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1e58      	subs	r0, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	0099      	lsls	r1, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001682:	3301      	adds	r3, #1
 8001684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001688:	2b00      	cmp	r3, #0
 800168a:	bf0c      	ite	eq
 800168c:	2301      	moveq	r3, #1
 800168e:	2300      	movne	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_Init+0x196>
 8001696:	2301      	movs	r3, #1
 8001698:	e022      	b.n	80016e0 <HAL_I2C_Init+0x1dc>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10e      	bne.n	80016c0 <HAL_I2C_Init+0x1bc>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1e58      	subs	r0, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6859      	ldr	r1, [r3, #4]
 80016aa:	460b      	mov	r3, r1
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	440b      	add	r3, r1
 80016b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b4:	3301      	adds	r3, #1
 80016b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016be:	e00f      	b.n	80016e0 <HAL_I2C_Init+0x1dc>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	1e58      	subs	r0, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6859      	ldr	r1, [r3, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	0099      	lsls	r1, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d6:	3301      	adds	r3, #1
 80016d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	6809      	ldr	r1, [r1, #0]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69da      	ldr	r2, [r3, #28]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800170e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6911      	ldr	r1, [r2, #16]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68d2      	ldr	r2, [r2, #12]
 800171a:	4311      	orrs	r1, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	430b      	orrs	r3, r1
 8001722:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0201 	orr.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2220      	movs	r2, #32
 800175a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	000186a0 	.word	0x000186a0
 800177c:	001e847f 	.word	0x001e847f
 8001780:	003d08ff 	.word	0x003d08ff
 8001784:	431bde83 	.word	0x431bde83
 8001788:	10624dd3 	.word	0x10624dd3

0800178c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800178c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178e:	b08b      	sub	sp, #44	; 0x2c
 8001790:	af06      	add	r7, sp, #24
 8001792:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e0fd      	b.n	800199a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d106      	bne.n	80017b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f00a f8c6 	bl	800b944 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2203      	movs	r2, #3
 80017bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 fb87 	bl	8004ed8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	687e      	ldr	r6, [r7, #4]
 80017d2:	466d      	mov	r5, sp
 80017d4:	f106 0410 	add.w	r4, r6, #16
 80017d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017dc:	6823      	ldr	r3, [r4, #0]
 80017de:	602b      	str	r3, [r5, #0]
 80017e0:	1d33      	adds	r3, r6, #4
 80017e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e4:	6838      	ldr	r0, [r7, #0]
 80017e6:	f003 fb51 	bl	8004e8c <USB_CoreInit>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2202      	movs	r2, #2
 80017f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0ce      	b.n	800199a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f003 fb82 	bl	8004f0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001808:	2300      	movs	r3, #0
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e04c      	b.n	80018a8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	3301      	adds	r3, #1
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001838:	7bfa      	ldrb	r2, [r7, #15]
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	b298      	uxth	r0, r3
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	3336      	adds	r3, #54	; 0x36
 800184c:	4602      	mov	r2, r0
 800184e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	3303      	adds	r3, #3
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	3338      	adds	r3, #56	; 0x38
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	440b      	add	r3, r1
 8001888:	333c      	adds	r3, #60	; 0x3c
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	3340      	adds	r3, #64	; 0x40
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	3301      	adds	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d3ad      	bcc.n	800180e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	73fb      	strb	r3, [r7, #15]
 80018b6:	e044      	b.n	8001942 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	440b      	add	r3, r1
 80018c6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	440b      	add	r3, r1
 80018dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	440b      	add	r3, r1
 8001908:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001926:	7bfa      	ldrb	r2, [r7, #15]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	3301      	adds	r3, #1
 8001940:	73fb      	strb	r3, [r7, #15]
 8001942:	7bfa      	ldrb	r2, [r7, #15]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	d3b5      	bcc.n	80018b8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	687e      	ldr	r6, [r7, #4]
 8001954:	466d      	mov	r5, sp
 8001956:	f106 0410 	add.w	r4, r6, #16
 800195a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800195c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	602b      	str	r3, [r5, #0]
 8001962:	1d33      	adds	r3, r6, #4
 8001964:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001966:	6838      	ldr	r0, [r7, #0]
 8001968:	f003 fadc 	bl	8004f24 <USB_DevInit>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2202      	movs	r2, #2
 8001976:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e00d      	b.n	800199a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f005 fc4d 	bl	8007232 <USB_DevDisconnect>

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_PCD_Start+0x16>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e016      	b.n	80019e6 <HAL_PCD_Start+0x44>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 fa71 	bl	8004eac <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80019ca:	2101      	movs	r1, #1
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f00a fa2c 	bl	800be2a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f005 fc21 	bl	800721e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b088      	sub	sp, #32
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f005 fc23 	bl	8007246 <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a0a:	d102      	bne.n	8001a12 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fb61 	bl	80020d4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f005 fc15 	bl	8007246 <USB_ReadInterrupts>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a26:	d112      	bne.n	8001a4e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a3a:	b292      	uxth	r2, r2
 8001a3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f009 fffa 	bl	800ba3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a46:	2100      	movs	r1, #0
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f925 	bl	8001c98 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f005 fbf7 	bl	8007246 <USB_ReadInterrupts>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a62:	d10b      	bne.n	8001a7c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a76:	b292      	uxth	r2, r2
 8001a78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f005 fbe0 	bl	8007246 <USB_ReadInterrupts>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a90:	d10b      	bne.n	8001aaa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aa4:	b292      	uxth	r2, r2
 8001aa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f005 fbc9 	bl	8007246 <USB_ReadInterrupts>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001abe:	d126      	bne.n	8001b0e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0204 	bic.w	r2, r2, #4
 8001ad2:	b292      	uxth	r2, r2
 8001ad4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0208 	bic.w	r2, r2, #8
 8001aea:	b292      	uxth	r2, r2
 8001aec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f009 ffdb 	bl	800baac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b08:	b292      	uxth	r2, r2
 8001b0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f005 fb97 	bl	8007246 <USB_ReadInterrupts>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b22:	f040 8084 	bne.w	8001c2e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	77fb      	strb	r3, [r7, #31]
 8001b2a:	e011      	b.n	8001b50 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	7ffb      	ldrb	r3, [r7, #31]
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	441a      	add	r2, r3
 8001b38:	7ffb      	ldrb	r3, [r7, #31]
 8001b3a:	8812      	ldrh	r2, [r2, #0]
 8001b3c:	b292      	uxth	r2, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	f107 0120 	add.w	r1, r7, #32
 8001b44:	440b      	add	r3, r1
 8001b46:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001b4a:	7ffb      	ldrb	r3, [r7, #31]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	77fb      	strb	r3, [r7, #31]
 8001b50:	7ffb      	ldrb	r3, [r7, #31]
 8001b52:	2b07      	cmp	r3, #7
 8001b54:	d9ea      	bls.n	8001b2c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 0201 	orr.w	r2, r2, #1
 8001b68:	b292      	uxth	r2, r2
 8001b6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0201 	bic.w	r2, r2, #1
 8001b80:	b292      	uxth	r2, r2
 8001b82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001b86:	bf00      	nop
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f6      	beq.n	8001b88 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bac:	b292      	uxth	r2, r2
 8001bae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	77fb      	strb	r3, [r7, #31]
 8001bb6:	e010      	b.n	8001bda <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001bb8:	7ffb      	ldrb	r3, [r7, #31]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	7ffa      	ldrb	r2, [r7, #31]
 8001bc2:	0092      	lsls	r2, r2, #2
 8001bc4:	440a      	add	r2, r1
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	f107 0120 	add.w	r1, r7, #32
 8001bcc:	440b      	add	r3, r1
 8001bce:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001bd2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001bd4:	7ffb      	ldrb	r3, [r7, #31]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	77fb      	strb	r3, [r7, #31]
 8001bda:	7ffb      	ldrb	r3, [r7, #31]
 8001bdc:	2b07      	cmp	r3, #7
 8001bde:	d9eb      	bls.n	8001bb8 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0208 	orr.w	r2, r2, #8
 8001bf2:	b292      	uxth	r2, r2
 8001bf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c0a:	b292      	uxth	r2, r2
 8001c0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0204 	orr.w	r2, r2, #4
 8001c22:	b292      	uxth	r2, r2
 8001c24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f009 ff25 	bl	800ba78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f005 fb07 	bl	8007246 <USB_ReadInterrupts>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c42:	d10e      	bne.n	8001c62 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c56:	b292      	uxth	r2, r2
 8001c58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f009 fede 	bl	800ba1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f005 faed 	bl	8007246 <USB_ReadInterrupts>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c76:	d10b      	bne.n	8001c90 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c8a:	b292      	uxth	r2, r2
 8001c8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001c90:	bf00      	nop
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_PCD_SetAddress+0x1a>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e013      	b.n	8001cda <HAL_PCD_SetAddress+0x42>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	78fa      	ldrb	r2, [r7, #3]
 8001cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	78fa      	ldrb	r2, [r7, #3]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f005 fa94 	bl	80071f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	4608      	mov	r0, r1
 8001cec:	4611      	mov	r1, r2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	70fb      	strb	r3, [r7, #3]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	803b      	strh	r3, [r7, #0]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	da0e      	bge.n	8001d26 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2201      	movs	r2, #1
 8001d22:	705a      	strb	r2, [r3, #1]
 8001d24:	e00e      	b.n	8001d44 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	f003 0207 	and.w	r2, r3, #7
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d50:	883a      	ldrh	r2, [r7, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	78ba      	ldrb	r2, [r7, #2]
 8001d5a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	785b      	ldrb	r3, [r3, #1]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d004      	beq.n	8001d6e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d6e:	78bb      	ldrb	r3, [r7, #2]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d102      	bne.n	8001d7a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_PCD_EP_Open+0xa6>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e00e      	b.n	8001da6 <HAL_PCD_EP_Open+0xc4>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68f9      	ldr	r1, [r7, #12]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 f8e4 	bl	8004f64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001da4:	7afb      	ldrb	r3, [r7, #11]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	da0e      	bge.n	8001de0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	705a      	strb	r2, [r3, #1]
 8001dde:	e00e      	b.n	8001dfe <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	f003 0207 	and.w	r2, r3, #7
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001dfe:	78fb      	ldrb	r3, [r7, #3]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_PCD_EP_Close+0x6a>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e00e      	b.n	8001e36 <HAL_PCD_EP_Close+0x88>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68f9      	ldr	r1, [r7, #12]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 fc06 	bl	8005638 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e4e:	7afb      	ldrb	r3, [r7, #11]
 8001e50:	f003 0207 	and.w	r2, r3, #7
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2200      	movs	r2, #0
 8001e76:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e7e:	7afb      	ldrb	r3, [r7, #11]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e8a:	7afb      	ldrb	r3, [r7, #11]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d106      	bne.n	8001ea2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6979      	ldr	r1, [r7, #20]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f003 fdb8 	bl	8005a10 <USB_EPStartXfer>
 8001ea0:	e005      	b.n	8001eae <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6979      	ldr	r1, [r7, #20]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f003 fdb1 	bl	8005a10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	f003 0207 	and.w	r2, r3, #7
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	440b      	add	r3, r1
 8001ed6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b086      	sub	sp, #24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef6:	7afb      	ldrb	r3, [r7, #11]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4413      	add	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f32:	7afb      	ldrb	r3, [r7, #11]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f3e:	7afb      	ldrb	r3, [r7, #11]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d106      	bne.n	8001f56 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6979      	ldr	r1, [r7, #20]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 fd5e 	bl	8005a10 <USB_EPStartXfer>
 8001f54:	e005      	b.n	8001f62 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6979      	ldr	r1, [r7, #20]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f003 fd57 	bl	8005a10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	f003 0207 	and.w	r2, r3, #7
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d901      	bls.n	8001f8a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e04c      	b.n	8002024 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	da0e      	bge.n	8001fb0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2201      	movs	r2, #1
 8001fac:	705a      	strb	r2, [r3, #1]
 8001fae:	e00c      	b.n	8001fca <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_PCD_EP_SetStall+0x7e>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e01c      	b.n	8002024 <HAL_PCD_EP_SetStall+0xb8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68f9      	ldr	r1, [r7, #12]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f005 f800 	bl	8006ffe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	2b00      	cmp	r3, #0
 8002006:	d108      	bne.n	800201a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002012:	4619      	mov	r1, r3
 8002014:	4610      	mov	r0, r2
 8002016:	f005 f925 	bl	8007264 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	f003 020f 	and.w	r2, r3, #15
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	429a      	cmp	r2, r3
 8002044:	d901      	bls.n	800204a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e040      	b.n	80020cc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800204a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800204e:	2b00      	cmp	r3, #0
 8002050:	da0e      	bge.n	8002070 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	705a      	strb	r2, [r3, #1]
 800206e:	e00e      	b.n	800208e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	f003 0207 	and.w	r2, r3, #7
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	b2da      	uxtb	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_PCD_EP_ClrStall+0x82>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e00e      	b.n	80020cc <HAL_PCD_EP_ClrStall+0xa0>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68f9      	ldr	r1, [r7, #12]
 80020bc:	4618      	mov	r0, r3
 80020be:	f004 ffee 	bl	800709e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08e      	sub	sp, #56	; 0x38
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020dc:	e2ec      	b.n	80026b8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020e6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80020e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80020f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f040 8161 	bne.w	80023c0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80020fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	d152      	bne.n	80021ae <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	b29b      	uxth	r3, r3
 8002110:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002118:	81fb      	strh	r3, [r7, #14]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	89fb      	ldrh	r3, [r7, #14]
 8002120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002128:	b29b      	uxth	r3, r3
 800212a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3328      	adds	r3, #40	; 0x28
 8002130:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800213a:	b29b      	uxth	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	3302      	adds	r3, #2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	4413      	add	r3, r2
 8002150:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	441a      	add	r2, r3
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800216c:	2100      	movs	r1, #0
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f009 fc3b 	bl	800b9ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 829b 	beq.w	80026b8 <PCD_EP_ISR_Handler+0x5e4>
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	f040 8296 	bne.w	80026b8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002198:	b2da      	uxtb	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	b292      	uxth	r2, r2
 80021a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021ac:	e284      	b.n	80026b8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80021be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d034      	beq.n	8002232 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	3306      	adds	r3, #6
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002206:	b29b      	uxth	r3, r3
 8002208:	f005 f87c 	bl	8007304 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	b29a      	uxth	r2, r3
 8002214:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002218:	4013      	ands	r3, r2
 800221a:	823b      	strh	r3, [r7, #16]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	8a3a      	ldrh	r2, [r7, #16]
 8002222:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002226:	b292      	uxth	r2, r2
 8002228:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f009 fbb0 	bl	800b990 <HAL_PCD_SetupStageCallback>
 8002230:	e242      	b.n	80026b8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002232:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002236:	2b00      	cmp	r3, #0
 8002238:	f280 823e 	bge.w	80026b8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	b29a      	uxth	r2, r3
 8002244:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002248:	4013      	ands	r3, r2
 800224a:	83bb      	strh	r3, [r7, #28]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	8bba      	ldrh	r2, [r7, #28]
 8002252:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002256:	b292      	uxth	r2, r2
 8002258:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002262:	b29b      	uxth	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	3306      	adds	r3, #6
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	4413      	add	r3, r2
 8002278:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d019      	beq.n	80022c2 <PCD_EP_ISR_Handler+0x1ee>
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d015      	beq.n	80022c2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	6959      	ldr	r1, [r3, #20]
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	f005 f82c 	bl	8007304 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	441a      	add	r2, r3
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80022ba:	2100      	movs	r1, #0
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f009 fb79 	bl	800b9b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 81f2 	bne.w	80026b8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	61bb      	str	r3, [r7, #24]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	4413      	add	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d112      	bne.n	8002322 <PCD_EP_ISR_Handler+0x24e>
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b29b      	uxth	r3, r3
 8002302:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002306:	b29a      	uxth	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	801a      	strh	r2, [r3, #0]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	b29b      	uxth	r3, r3
 8002312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800231a:	b29a      	uxth	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	801a      	strh	r2, [r3, #0]
 8002320:	e02f      	b.n	8002382 <PCD_EP_ISR_Handler+0x2ae>
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	2b3e      	cmp	r3, #62	; 0x3e
 8002328:	d813      	bhi.n	8002352 <PCD_EP_ISR_Handler+0x27e>
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	085b      	lsrs	r3, r3, #1
 8002330:	633b      	str	r3, [r7, #48]	; 0x30
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <PCD_EP_ISR_Handler+0x270>
 800233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002340:	3301      	adds	r3, #1
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002346:	b29b      	uxth	r3, r3
 8002348:	029b      	lsls	r3, r3, #10
 800234a:	b29a      	uxth	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	801a      	strh	r2, [r3, #0]
 8002350:	e017      	b.n	8002382 <PCD_EP_ISR_Handler+0x2ae>
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	633b      	str	r3, [r7, #48]	; 0x30
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <PCD_EP_ISR_Handler+0x298>
 8002366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002368:	3b01      	subs	r3, #1
 800236a:	633b      	str	r3, [r7, #48]	; 0x30
 800236c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236e:	b29b      	uxth	r3, r3
 8002370:	029b      	lsls	r3, r3, #10
 8002372:	b29b      	uxth	r3, r3
 8002374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800237c:	b29a      	uxth	r2, r3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	b29b      	uxth	r3, r3
 800238a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800238e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002392:	827b      	strh	r3, [r7, #18]
 8002394:	8a7b      	ldrh	r3, [r7, #18]
 8002396:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800239a:	827b      	strh	r3, [r7, #18]
 800239c:	8a7b      	ldrh	r3, [r7, #18]
 800239e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023a2:	827b      	strh	r3, [r7, #18]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	8a7b      	ldrh	r3, [r7, #18]
 80023aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	8013      	strh	r3, [r2, #0]
 80023be:	e17b      	b.n	80026b8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023d2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f280 80ea 	bge.w	80025b0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023f2:	4013      	ands	r3, r2
 80023f4:	853b      	strh	r3, [r7, #40]	; 0x28
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002406:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800240a:	b292      	uxth	r2, r2
 800240c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800240e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	7b1b      	ldrb	r3, [r3, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d122      	bne.n	8002472 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002434:	b29b      	uxth	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	3306      	adds	r3, #6
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	4413      	add	r3, r2
 800244a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002454:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002456:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 8087 	beq.w	800256c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	6959      	ldr	r1, [r3, #20]
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	88da      	ldrh	r2, [r3, #6]
 800246a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800246c:	f004 ff4a 	bl	8007304 <USB_ReadPMA>
 8002470:	e07c      	b.n	800256c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	78db      	ldrb	r3, [r3, #3]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d108      	bne.n	800248c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800247a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800247c:	461a      	mov	r2, r3
 800247e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f927 	bl	80026d4 <HAL_PCD_EP_DB_Receive>
 8002486:	4603      	mov	r3, r0
 8002488:	86fb      	strh	r3, [r7, #54]	; 0x36
 800248a:	e06f      	b.n	800256c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	441a      	add	r2, r3
 80024b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d021      	beq.n	800252a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	3302      	adds	r3, #2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	4413      	add	r3, r2
 8002504:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800250e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002510:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002512:	2b00      	cmp	r3, #0
 8002514:	d02a      	beq.n	800256c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	6959      	ldr	r1, [r3, #20]
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	891a      	ldrh	r2, [r3, #8]
 8002522:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002524:	f004 feee 	bl	8007304 <USB_ReadPMA>
 8002528:	e020      	b.n	800256c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002532:	b29b      	uxth	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	3306      	adds	r3, #6
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	4413      	add	r3, r2
 8002548:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002552:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002554:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	6959      	ldr	r1, [r3, #20]
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	895a      	ldrh	r2, [r3, #10]
 8002566:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002568:	f004 fecc 	bl	8007304 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	69da      	ldr	r2, [r3, #28]
 8002570:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002572:	441a      	add	r2, r3
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800257e:	441a      	add	r2, r3
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d004      	beq.n	8002596 <PCD_EP_ISR_Handler+0x4c2>
 800258c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	429a      	cmp	r2, r3
 8002594:	d206      	bcs.n	80025a4 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	4619      	mov	r1, r3
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f009 fa09 	bl	800b9b4 <HAL_PCD_DataOutStageCallback>
 80025a2:	e005      	b.n	80025b0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 fa30 	bl	8005a10 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d07e      	beq.n	80026b8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80025ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e8:	843b      	strh	r3, [r7, #32]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	441a      	add	r2, r3
 80025f8:	8c3b      	ldrh	r3, [r7, #32]
 80025fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002602:	b29b      	uxth	r3, r3
 8002604:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	78db      	ldrb	r3, [r3, #3]
 800260a:	2b03      	cmp	r3, #3
 800260c:	d00c      	beq.n	8002628 <PCD_EP_ISR_Handler+0x554>
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	78db      	ldrb	r3, [r3, #3]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d008      	beq.n	8002628 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800261a:	2b02      	cmp	r3, #2
 800261c:	d146      	bne.n	80026ac <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800261e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d141      	bne.n	80026ac <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002630:	b29b      	uxth	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4413      	add	r3, r2
 800263c:	3302      	adds	r3, #2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	4413      	add	r3, r2
 8002646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002650:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	8bfb      	ldrh	r3, [r7, #30]
 8002658:	429a      	cmp	r2, r3
 800265a:	d906      	bls.n	800266a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	699a      	ldr	r2, [r3, #24]
 8002660:	8bfb      	ldrh	r3, [r7, #30]
 8002662:	1ad2      	subs	r2, r2, r3
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	619a      	str	r2, [r3, #24]
 8002668:	e002      	b.n	8002670 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d106      	bne.n	8002686 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	4619      	mov	r1, r3
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f009 f9b3 	bl	800b9ea <HAL_PCD_DataInStageCallback>
 8002684:	e018      	b.n	80026b8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	8bfb      	ldrh	r3, [r7, #30]
 800268c:	441a      	add	r2, r3
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	69da      	ldr	r2, [r3, #28]
 8002696:	8bfb      	ldrh	r3, [r7, #30]
 8002698:	441a      	add	r2, r3
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026a4:	4618      	mov	r0, r3
 80026a6:	f003 f9b3 	bl	8005a10 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80026aa:	e005      	b.n	80026b8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026ae:	461a      	mov	r2, r3
 80026b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f91b 	bl	80028ee <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	b21b      	sxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f6ff ad0a 	blt.w	80020de <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3738      	adds	r7, #56	; 0x38
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	4613      	mov	r3, r2
 80026e0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d07e      	beq.n	80027ea <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	3302      	adds	r3, #2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	4413      	add	r3, r2
 800270a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002714:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	8b7b      	ldrh	r3, [r7, #26]
 800271c:	429a      	cmp	r2, r3
 800271e:	d306      	bcc.n	800272e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	699a      	ldr	r2, [r3, #24]
 8002724:	8b7b      	ldrh	r3, [r7, #26]
 8002726:	1ad2      	subs	r2, r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	619a      	str	r2, [r3, #24]
 800272c:	e002      	b.n	8002734 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2200      	movs	r2, #0
 8002732:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d123      	bne.n	8002784 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	b29b      	uxth	r3, r3
 800274e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002756:	833b      	strh	r3, [r7, #24]
 8002758:	8b3b      	ldrh	r3, [r7, #24]
 800275a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800275e:	833b      	strh	r3, [r7, #24]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	441a      	add	r2, r3
 800276e:	8b3b      	ldrh	r3, [r7, #24]
 8002770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800277c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002780:	b29b      	uxth	r3, r3
 8002782:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01f      	beq.n	80027ce <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a8:	82fb      	strh	r3, [r7, #22]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	441a      	add	r2, r3
 80027b8:	8afb      	ldrh	r3, [r7, #22]
 80027ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027ce:	8b7b      	ldrh	r3, [r7, #26]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 8087 	beq.w	80028e4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	6959      	ldr	r1, [r3, #20]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	891a      	ldrh	r2, [r3, #8]
 80027e2:	8b7b      	ldrh	r3, [r7, #26]
 80027e4:	f004 fd8e 	bl	8007304 <USB_ReadPMA>
 80027e8:	e07c      	b.n	80028e4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	3306      	adds	r3, #6
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	4413      	add	r3, r2
 8002808:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002812:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	699a      	ldr	r2, [r3, #24]
 8002818:	8b7b      	ldrh	r3, [r7, #26]
 800281a:	429a      	cmp	r2, r3
 800281c:	d306      	bcc.n	800282c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	8b7b      	ldrh	r3, [r7, #26]
 8002824:	1ad2      	subs	r2, r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	619a      	str	r2, [r3, #24]
 800282a:	e002      	b.n	8002832 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2200      	movs	r2, #0
 8002830:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d123      	bne.n	8002882 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002854:	83fb      	strh	r3, [r7, #30]
 8002856:	8bfb      	ldrh	r3, [r7, #30]
 8002858:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800285c:	83fb      	strh	r3, [r7, #30]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	441a      	add	r2, r3
 800286c:	8bfb      	ldrh	r3, [r7, #30]
 800286e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800287a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287e:	b29b      	uxth	r3, r3
 8002880:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002888:	2b00      	cmp	r3, #0
 800288a:	d11f      	bne.n	80028cc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	b29b      	uxth	r3, r3
 800289e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a6:	83bb      	strh	r3, [r7, #28]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	441a      	add	r2, r3
 80028b6:	8bbb      	ldrh	r3, [r7, #28]
 80028b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028cc:	8b7b      	ldrh	r3, [r7, #26]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d008      	beq.n	80028e4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	6959      	ldr	r1, [r3, #20]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	895a      	ldrh	r2, [r3, #10]
 80028de:	8b7b      	ldrh	r3, [r7, #26]
 80028e0:	f004 fd10 	bl	8007304 <USB_ReadPMA>
    }
  }

  return count;
 80028e4:	8b7b      	ldrh	r3, [r7, #26]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3720      	adds	r7, #32
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b0a2      	sub	sp, #136	; 0x88
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	4613      	mov	r3, r2
 80028fa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 81c7 	beq.w	8002c96 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002910:	b29b      	uxth	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	3302      	adds	r3, #2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	4413      	add	r3, r2
 8002926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002930:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	699a      	ldr	r2, [r3, #24]
 8002938:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800293c:	429a      	cmp	r2, r3
 800293e:	d907      	bls.n	8002950 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	699a      	ldr	r2, [r3, #24]
 8002944:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002948:	1ad2      	subs	r2, r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	619a      	str	r2, [r3, #24]
 800294e:	e002      	b.n	8002956 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2200      	movs	r2, #0
 8002954:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	f040 80b9 	bne.w	8002ad2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	785b      	ldrb	r3, [r3, #1]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d126      	bne.n	80029b6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002976:	b29b      	uxth	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	4413      	add	r3, r2
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	011a      	lsls	r2, r3, #4
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	4413      	add	r3, r2
 800298a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800299a:	b29a      	uxth	r2, r3
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	801a      	strh	r2, [r3, #0]
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	801a      	strh	r2, [r3, #0]
 80029b4:	e01a      	b.n	80029ec <HAL_PCD_EP_DB_Transmit+0xfe>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	785b      	ldrb	r3, [r3, #1]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d116      	bne.n	80029ec <HAL_PCD_EP_DB_Transmit+0xfe>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	633b      	str	r3, [r7, #48]	; 0x30
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d2:	4413      	add	r3, r2
 80029d4:	633b      	str	r3, [r7, #48]	; 0x30
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	011a      	lsls	r2, r3, #4
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	4413      	add	r3, r2
 80029e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	2200      	movs	r2, #0
 80029ea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	623b      	str	r3, [r7, #32]
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	785b      	ldrb	r3, [r3, #1]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d126      	bne.n	8002a48 <HAL_PCD_EP_DB_Transmit+0x15a>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	61bb      	str	r3, [r7, #24]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	4413      	add	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	011a      	lsls	r2, r3, #4
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	801a      	strh	r2, [r3, #0]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	e017      	b.n	8002a78 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	785b      	ldrb	r3, [r3, #1]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d113      	bne.n	8002a78 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	4413      	add	r3, r2
 8002a60:	623b      	str	r3, [r7, #32]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	011a      	lsls	r2, r3, #4
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	2200      	movs	r2, #0
 8002a76:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f008 ffb3 	bl	800b9ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 82d4 	beq.w	8003038 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aaa:	827b      	strh	r3, [r7, #18]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	441a      	add	r2, r3
 8002aba:	8a7b      	ldrh	r3, [r7, #18]
 8002abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	8013      	strh	r3, [r2, #0]
 8002ad0:	e2b2      	b.n	8003038 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d021      	beq.n	8002b20 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	441a      	add	r2, r3
 8002b08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	f040 8286 	bne.w	8003038 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	695a      	ldr	r2, [r3, #20]
 8002b30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b34:	441a      	add	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b42:	441a      	add	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	6a1a      	ldr	r2, [r3, #32]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d309      	bcc.n	8002b68 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	6a1a      	ldr	r2, [r3, #32]
 8002b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b60:	1ad2      	subs	r2, r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	621a      	str	r2, [r3, #32]
 8002b66:	e015      	b.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d107      	bne.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002b70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b74:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b7e:	e009      	b.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2200      	movs	r2, #0
 8002b92:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	785b      	ldrb	r3, [r3, #1]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d155      	bne.n	8002c48 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	461a      	mov	r2, r3
 8002bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb0:	4413      	add	r3, r2
 8002bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	011a      	lsls	r2, r3, #4
 8002bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d112      	bne.n	8002bf0 <HAL_PCD_EP_DB_Transmit+0x302>
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd8:	801a      	strh	r2, [r3, #0]
 8002bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bec:	801a      	strh	r2, [r3, #0]
 8002bee:	e047      	b.n	8002c80 <HAL_PCD_EP_DB_Transmit+0x392>
 8002bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf2:	2b3e      	cmp	r3, #62	; 0x3e
 8002bf4:	d811      	bhi.n	8002c1a <HAL_PCD_EP_DB_Transmit+0x32c>
 8002bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_PCD_EP_DB_Transmit+0x31e>
 8002c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c08:	3301      	adds	r3, #1
 8002c0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	029b      	lsls	r3, r3, #10
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c16:	801a      	strh	r2, [r3, #0]
 8002c18:	e032      	b.n	8002c80 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <HAL_PCD_EP_DB_Transmit+0x342>
 8002c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	029b      	lsls	r3, r3, #10
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c44:	801a      	strh	r2, [r3, #0]
 8002c46:	e01b      	b.n	8002c80 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	785b      	ldrb	r3, [r3, #1]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d117      	bne.n	8002c80 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	643b      	str	r3, [r7, #64]	; 0x40
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c64:	4413      	add	r3, r2
 8002c66:	643b      	str	r3, [r7, #64]	; 0x40
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	011a      	lsls	r2, r3, #4
 8002c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c70:	4413      	add	r3, r2
 8002c72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	6959      	ldr	r1, [r3, #20]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	891a      	ldrh	r2, [r3, #8]
 8002c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f004 faf3 	bl	800727a <USB_WritePMA>
 8002c94:	e1d0      	b.n	8003038 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3306      	adds	r3, #6
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cbe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d307      	bcc.n	8002cde <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cd6:	1ad2      	subs	r2, r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	619a      	str	r2, [r3, #24]
 8002cdc:	e002      	b.n	8002ce4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f040 80c4 	bne.w	8002e76 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d126      	bne.n	8002d44 <HAL_PCD_EP_DB_Transmit+0x456>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d0a:	4413      	add	r3, r2
 8002d0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	011a      	lsls	r2, r3, #4
 8002d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d16:	4413      	add	r3, r2
 8002d18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d2c:	801a      	strh	r2, [r3, #0]
 8002d2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d40:	801a      	strh	r2, [r3, #0]
 8002d42:	e01a      	b.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	785b      	ldrb	r3, [r3, #1]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d116      	bne.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	677b      	str	r3, [r7, #116]	; 0x74
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d60:	4413      	add	r3, r2
 8002d62:	677b      	str	r3, [r7, #116]	; 0x74
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	011a      	lsls	r2, r3, #4
 8002d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d72:	673b      	str	r3, [r7, #112]	; 0x70
 8002d74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d76:	2200      	movs	r2, #0
 8002d78:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	785b      	ldrb	r3, [r3, #1]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d12f      	bne.n	8002de8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002da0:	4413      	add	r3, r2
 8002da2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	011a      	lsls	r2, r3, #4
 8002dac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002db0:	4413      	add	r3, r2
 8002db2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002db6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dcc:	801a      	strh	r2, [r3, #0]
 8002dce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002de4:	801a      	strh	r2, [r3, #0]
 8002de6:	e017      	b.n	8002e18 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	785b      	ldrb	r3, [r3, #1]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d113      	bne.n	8002e18 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dfe:	4413      	add	r3, r2
 8002e00:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	011a      	lsls	r2, r3, #4
 8002e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e14:	2200      	movs	r2, #0
 8002e16:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f008 fde3 	bl	800b9ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f040 8104 	bne.w	8003038 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	441a      	add	r2, r3
 8002e5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	8013      	strh	r3, [r2, #0]
 8002e74:	e0e0      	b.n	8003038 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d121      	bne.n	8002ec4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	441a      	add	r2, r3
 8002eac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	f040 80b4 	bne.w	8003038 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ed8:	441a      	add	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	69da      	ldr	r2, [r3, #28]
 8002ee2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ee6:	441a      	add	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	6a1a      	ldr	r2, [r3, #32]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d309      	bcc.n	8002f0c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f04:	1ad2      	subs	r2, r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	621a      	str	r2, [r3, #32]
 8002f0a:	e015      	b.n	8002f38 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d107      	bne.n	8002f24 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002f14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f18:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f22:	e009      	b.n	8002f38 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	667b      	str	r3, [r7, #100]	; 0x64
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	785b      	ldrb	r3, [r3, #1]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d155      	bne.n	8002ff2 <HAL_PCD_EP_DB_Transmit+0x704>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f5a:	4413      	add	r3, r2
 8002f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	011a      	lsls	r2, r3, #4
 8002f64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f66:	4413      	add	r3, r2
 8002f68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d112      	bne.n	8002f9a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002f74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f82:	801a      	strh	r2, [r3, #0]
 8002f84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f96:	801a      	strh	r2, [r3, #0]
 8002f98:	e044      	b.n	8003024 <HAL_PCD_EP_DB_Transmit+0x736>
 8002f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9c:	2b3e      	cmp	r3, #62	; 0x3e
 8002f9e:	d811      	bhi.n	8002fc4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	657b      	str	r3, [r7, #84]	; 0x54
 8002fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	657b      	str	r3, [r7, #84]	; 0x54
 8002fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	029b      	lsls	r3, r3, #10
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc0:	801a      	strh	r2, [r3, #0]
 8002fc2:	e02f      	b.n	8003024 <HAL_PCD_EP_DB_Transmit+0x736>
 8002fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	657b      	str	r3, [r7, #84]	; 0x54
 8002fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d102      	bne.n	8002fda <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	657b      	str	r3, [r7, #84]	; 0x54
 8002fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	029b      	lsls	r3, r3, #10
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fee:	801a      	strh	r2, [r3, #0]
 8002ff0:	e018      	b.n	8003024 <HAL_PCD_EP_DB_Transmit+0x736>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	785b      	ldrb	r3, [r3, #1]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d114      	bne.n	8003024 <HAL_PCD_EP_DB_Transmit+0x736>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003002:	b29b      	uxth	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003008:	4413      	add	r3, r2
 800300a:	667b      	str	r3, [r7, #100]	; 0x64
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	011a      	lsls	r2, r3, #4
 8003012:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003014:	4413      	add	r3, r2
 8003016:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800301a:	663b      	str	r3, [r7, #96]	; 0x60
 800301c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800301e:	b29a      	uxth	r2, r3
 8003020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003022:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	6959      	ldr	r1, [r3, #20]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	895a      	ldrh	r2, [r3, #10]
 8003030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003032:	b29b      	uxth	r3, r3
 8003034:	f004 f921 	bl	800727a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	b29b      	uxth	r3, r3
 800304a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800304e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003052:	823b      	strh	r3, [r7, #16]
 8003054:	8a3b      	ldrh	r3, [r7, #16]
 8003056:	f083 0310 	eor.w	r3, r3, #16
 800305a:	823b      	strh	r3, [r7, #16]
 800305c:	8a3b      	ldrh	r3, [r7, #16]
 800305e:	f083 0320 	eor.w	r3, r3, #32
 8003062:	823b      	strh	r3, [r7, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	441a      	add	r2, r3
 8003072:	8a3b      	ldrh	r3, [r7, #16]
 8003074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800307c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003084:	b29b      	uxth	r3, r3
 8003086:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3788      	adds	r7, #136	; 0x88
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003092:	b480      	push	{r7}
 8003094:	b087      	sub	sp, #28
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	817b      	strh	r3, [r7, #10]
 80030a0:	4613      	mov	r3, r2
 80030a2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80030a4:	897b      	ldrh	r3, [r7, #10]
 80030a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00b      	beq.n	80030c8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b0:	897b      	ldrh	r3, [r7, #10]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	e009      	b.n	80030dc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030c8:	897a      	ldrh	r2, [r7, #10]
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4413      	add	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80030dc:	893b      	ldrh	r3, [r7, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d107      	bne.n	80030f2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2200      	movs	r2, #0
 80030e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	80da      	strh	r2, [r3, #6]
 80030f0:	e00b      	b.n	800310a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2201      	movs	r2, #1
 80030f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	0c1b      	lsrs	r3, r3, #16
 8003104:	b29a      	uxth	r2, r3
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
	...

08003118 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800311c:	4b03      	ldr	r3, [pc, #12]	; (800312c <HAL_PWR_EnableBkUpAccess+0x14>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]
}
 8003122:	bf00      	nop
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	420e0020 	.word	0x420e0020

08003130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e26c      	b.n	800361c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 8087 	beq.w	800325e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003150:	4b92      	ldr	r3, [pc, #584]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b04      	cmp	r3, #4
 800315a:	d00c      	beq.n	8003176 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800315c:	4b8f      	ldr	r3, [pc, #572]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 030c 	and.w	r3, r3, #12
 8003164:	2b08      	cmp	r3, #8
 8003166:	d112      	bne.n	800318e <HAL_RCC_OscConfig+0x5e>
 8003168:	4b8c      	ldr	r3, [pc, #560]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003174:	d10b      	bne.n	800318e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003176:	4b89      	ldr	r3, [pc, #548]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d06c      	beq.n	800325c <HAL_RCC_OscConfig+0x12c>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d168      	bne.n	800325c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e246      	b.n	800361c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003196:	d106      	bne.n	80031a6 <HAL_RCC_OscConfig+0x76>
 8003198:	4b80      	ldr	r3, [pc, #512]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a7f      	ldr	r2, [pc, #508]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 800319e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	e02e      	b.n	8003204 <HAL_RCC_OscConfig+0xd4>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x98>
 80031ae:	4b7b      	ldr	r3, [pc, #492]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a7a      	ldr	r2, [pc, #488]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 80031b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	4b78      	ldr	r3, [pc, #480]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a77      	ldr	r2, [pc, #476]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 80031c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e01d      	b.n	8003204 <HAL_RCC_OscConfig+0xd4>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d0:	d10c      	bne.n	80031ec <HAL_RCC_OscConfig+0xbc>
 80031d2:	4b72      	ldr	r3, [pc, #456]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a71      	ldr	r2, [pc, #452]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 80031d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b6f      	ldr	r3, [pc, #444]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a6e      	ldr	r2, [pc, #440]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e00b      	b.n	8003204 <HAL_RCC_OscConfig+0xd4>
 80031ec:	4b6b      	ldr	r3, [pc, #428]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a6a      	ldr	r2, [pc, #424]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 80031f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	4b68      	ldr	r3, [pc, #416]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a67      	ldr	r2, [pc, #412]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 80031fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003202:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d013      	beq.n	8003234 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fd fce2 	bl	8000bd4 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003214:	f7fd fcde 	bl	8000bd4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e1fa      	b.n	800361c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	4b5d      	ldr	r3, [pc, #372]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0xe4>
 8003232:	e014      	b.n	800325e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fd fcce 	bl	8000bd4 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800323c:	f7fd fcca 	bl	8000bd4 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b64      	cmp	r3, #100	; 0x64
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e1e6      	b.n	800361c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324e:	4b53      	ldr	r3, [pc, #332]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x10c>
 800325a:	e000      	b.n	800325e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d063      	beq.n	8003332 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800326a:	4b4c      	ldr	r3, [pc, #304]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003276:	4b49      	ldr	r3, [pc, #292]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b08      	cmp	r3, #8
 8003280:	d11c      	bne.n	80032bc <HAL_RCC_OscConfig+0x18c>
 8003282:	4b46      	ldr	r3, [pc, #280]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d116      	bne.n	80032bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328e:	4b43      	ldr	r3, [pc, #268]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_RCC_OscConfig+0x176>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d001      	beq.n	80032a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e1ba      	b.n	800361c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a6:	4b3d      	ldr	r3, [pc, #244]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4939      	ldr	r1, [pc, #228]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ba:	e03a      	b.n	8003332 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d020      	beq.n	8003306 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c4:	4b36      	ldr	r3, [pc, #216]	; (80033a0 <HAL_RCC_OscConfig+0x270>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ca:	f7fd fc83 	bl	8000bd4 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d2:	f7fd fc7f 	bl	8000bd4 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e19b      	b.n	800361c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e4:	4b2d      	ldr	r3, [pc, #180]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f0:	4b2a      	ldr	r3, [pc, #168]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	4927      	ldr	r1, [pc, #156]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 8003300:	4313      	orrs	r3, r2
 8003302:	600b      	str	r3, [r1, #0]
 8003304:	e015      	b.n	8003332 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003306:	4b26      	ldr	r3, [pc, #152]	; (80033a0 <HAL_RCC_OscConfig+0x270>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7fd fc62 	bl	8000bd4 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003314:	f7fd fc5e 	bl	8000bd4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e17a      	b.n	800361c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003326:	4b1d      	ldr	r3, [pc, #116]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d03a      	beq.n	80033b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d019      	beq.n	800337a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003346:	4b17      	ldr	r3, [pc, #92]	; (80033a4 <HAL_RCC_OscConfig+0x274>)
 8003348:	2201      	movs	r2, #1
 800334a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334c:	f7fd fc42 	bl	8000bd4 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003354:	f7fd fc3e 	bl	8000bd4 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e15a      	b.n	800361c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003366:	4b0d      	ldr	r3, [pc, #52]	; (800339c <HAL_RCC_OscConfig+0x26c>)
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003372:	2001      	movs	r0, #1
 8003374:	f000 fb0a 	bl	800398c <RCC_Delay>
 8003378:	e01c      	b.n	80033b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <HAL_RCC_OscConfig+0x274>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003380:	f7fd fc28 	bl	8000bd4 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003386:	e00f      	b.n	80033a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003388:	f7fd fc24 	bl	8000bd4 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d908      	bls.n	80033a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e140      	b.n	800361c <HAL_RCC_OscConfig+0x4ec>
 800339a:	bf00      	nop
 800339c:	40021000 	.word	0x40021000
 80033a0:	42420000 	.word	0x42420000
 80033a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a8:	4b9e      	ldr	r3, [pc, #632]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e9      	bne.n	8003388 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 80a6 	beq.w	800350e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c2:	2300      	movs	r3, #0
 80033c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c6:	4b97      	ldr	r3, [pc, #604]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10d      	bne.n	80033ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d2:	4b94      	ldr	r3, [pc, #592]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	4a93      	ldr	r2, [pc, #588]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 80033d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033dc:	61d3      	str	r3, [r2, #28]
 80033de:	4b91      	ldr	r3, [pc, #580]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ea:	2301      	movs	r3, #1
 80033ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ee:	4b8e      	ldr	r3, [pc, #568]	; (8003628 <HAL_RCC_OscConfig+0x4f8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d118      	bne.n	800342c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033fa:	4b8b      	ldr	r3, [pc, #556]	; (8003628 <HAL_RCC_OscConfig+0x4f8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a8a      	ldr	r2, [pc, #552]	; (8003628 <HAL_RCC_OscConfig+0x4f8>)
 8003400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003406:	f7fd fbe5 	bl	8000bd4 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340e:	f7fd fbe1 	bl	8000bd4 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b64      	cmp	r3, #100	; 0x64
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e0fd      	b.n	800361c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003420:	4b81      	ldr	r3, [pc, #516]	; (8003628 <HAL_RCC_OscConfig+0x4f8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d106      	bne.n	8003442 <HAL_RCC_OscConfig+0x312>
 8003434:	4b7b      	ldr	r3, [pc, #492]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	4a7a      	ldr	r2, [pc, #488]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	6213      	str	r3, [r2, #32]
 8003440:	e02d      	b.n	800349e <HAL_RCC_OscConfig+0x36e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10c      	bne.n	8003464 <HAL_RCC_OscConfig+0x334>
 800344a:	4b76      	ldr	r3, [pc, #472]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	4a75      	ldr	r2, [pc, #468]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 8003450:	f023 0301 	bic.w	r3, r3, #1
 8003454:	6213      	str	r3, [r2, #32]
 8003456:	4b73      	ldr	r3, [pc, #460]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	4a72      	ldr	r2, [pc, #456]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 800345c:	f023 0304 	bic.w	r3, r3, #4
 8003460:	6213      	str	r3, [r2, #32]
 8003462:	e01c      	b.n	800349e <HAL_RCC_OscConfig+0x36e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2b05      	cmp	r3, #5
 800346a:	d10c      	bne.n	8003486 <HAL_RCC_OscConfig+0x356>
 800346c:	4b6d      	ldr	r3, [pc, #436]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	4a6c      	ldr	r2, [pc, #432]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 8003472:	f043 0304 	orr.w	r3, r3, #4
 8003476:	6213      	str	r3, [r2, #32]
 8003478:	4b6a      	ldr	r3, [pc, #424]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4a69      	ldr	r2, [pc, #420]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	6213      	str	r3, [r2, #32]
 8003484:	e00b      	b.n	800349e <HAL_RCC_OscConfig+0x36e>
 8003486:	4b67      	ldr	r3, [pc, #412]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	4a66      	ldr	r2, [pc, #408]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	6213      	str	r3, [r2, #32]
 8003492:	4b64      	ldr	r3, [pc, #400]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4a63      	ldr	r2, [pc, #396]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 8003498:	f023 0304 	bic.w	r3, r3, #4
 800349c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d015      	beq.n	80034d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a6:	f7fd fb95 	bl	8000bd4 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ac:	e00a      	b.n	80034c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ae:	f7fd fb91 	bl	8000bd4 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034bc:	4293      	cmp	r3, r2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e0ab      	b.n	800361c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c4:	4b57      	ldr	r3, [pc, #348]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0ee      	beq.n	80034ae <HAL_RCC_OscConfig+0x37e>
 80034d0:	e014      	b.n	80034fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d2:	f7fd fb7f 	bl	8000bd4 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d8:	e00a      	b.n	80034f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034da:	f7fd fb7b 	bl	8000bd4 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e095      	b.n	800361c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f0:	4b4c      	ldr	r3, [pc, #304]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1ee      	bne.n	80034da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d105      	bne.n	800350e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003502:	4b48      	ldr	r3, [pc, #288]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	4a47      	ldr	r2, [pc, #284]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 8003508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800350c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 8081 	beq.w	800361a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003518:	4b42      	ldr	r3, [pc, #264]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 030c 	and.w	r3, r3, #12
 8003520:	2b08      	cmp	r3, #8
 8003522:	d061      	beq.n	80035e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	2b02      	cmp	r3, #2
 800352a:	d146      	bne.n	80035ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352c:	4b3f      	ldr	r3, [pc, #252]	; (800362c <HAL_RCC_OscConfig+0x4fc>)
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003532:	f7fd fb4f 	bl	8000bd4 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353a:	f7fd fb4b 	bl	8000bd4 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e067      	b.n	800361c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800354c:	4b35      	ldr	r3, [pc, #212]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1f0      	bne.n	800353a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003560:	d108      	bne.n	8003574 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003562:	4b30      	ldr	r3, [pc, #192]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	492d      	ldr	r1, [pc, #180]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 8003570:	4313      	orrs	r3, r2
 8003572:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003574:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a19      	ldr	r1, [r3, #32]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	430b      	orrs	r3, r1
 8003586:	4927      	ldr	r1, [pc, #156]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 8003588:	4313      	orrs	r3, r2
 800358a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800358c:	4b27      	ldr	r3, [pc, #156]	; (800362c <HAL_RCC_OscConfig+0x4fc>)
 800358e:	2201      	movs	r2, #1
 8003590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003592:	f7fd fb1f 	bl	8000bd4 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359a:	f7fd fb1b 	bl	8000bd4 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e037      	b.n	800361c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035ac:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0f0      	beq.n	800359a <HAL_RCC_OscConfig+0x46a>
 80035b8:	e02f      	b.n	800361a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ba:	4b1c      	ldr	r3, [pc, #112]	; (800362c <HAL_RCC_OscConfig+0x4fc>)
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7fd fb08 	bl	8000bd4 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fd fb04 	bl	8000bd4 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e020      	b.n	800361c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035da:	4b12      	ldr	r3, [pc, #72]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x498>
 80035e6:	e018      	b.n	800361a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e013      	b.n	800361c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_RCC_OscConfig+0x4f4>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	429a      	cmp	r2, r3
 8003606:	d106      	bne.n	8003616 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d001      	beq.n	800361a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	40007000 	.word	0x40007000
 800362c:	42420060 	.word	0x42420060

08003630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0d0      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003644:	4b6a      	ldr	r3, [pc, #424]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d910      	bls.n	8003674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003652:	4b67      	ldr	r3, [pc, #412]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 0207 	bic.w	r2, r3, #7
 800365a:	4965      	ldr	r1, [pc, #404]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	4313      	orrs	r3, r2
 8003660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b63      	ldr	r3, [pc, #396]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0b8      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d020      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800368c:	4b59      	ldr	r3, [pc, #356]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4a58      	ldr	r2, [pc, #352]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003696:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a4:	4b53      	ldr	r3, [pc, #332]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4a52      	ldr	r2, [pc, #328]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4b50      	ldr	r3, [pc, #320]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	494d      	ldr	r1, [pc, #308]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d040      	beq.n	8003750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d107      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d115      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e07f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ee:	4b41      	ldr	r3, [pc, #260]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e073      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fe:	4b3d      	ldr	r3, [pc, #244]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e06b      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370e:	4b39      	ldr	r3, [pc, #228]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f023 0203 	bic.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4936      	ldr	r1, [pc, #216]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003720:	f7fd fa58 	bl	8000bd4 <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	e00a      	b.n	800373e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003728:	f7fd fa54 	bl	8000bd4 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	; 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e053      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373e:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 020c 	and.w	r2, r3, #12
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	429a      	cmp	r2, r3
 800374e:	d1eb      	bne.n	8003728 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003750:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d210      	bcs.n	8003780 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375e:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 0207 	bic.w	r2, r3, #7
 8003766:	4922      	ldr	r1, [pc, #136]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e032      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800378c:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4916      	ldr	r1, [pc, #88]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037aa:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	490e      	ldr	r1, [pc, #56]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037be:	f000 f821 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 80037c2:	4602      	mov	r2, r0
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	490a      	ldr	r1, [pc, #40]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037d0:	5ccb      	ldrb	r3, [r1, r3]
 80037d2:	fa22 f303 	lsr.w	r3, r2, r3
 80037d6:	4a09      	ldr	r2, [pc, #36]	; (80037fc <HAL_RCC_ClockConfig+0x1cc>)
 80037d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_RCC_ClockConfig+0x1d0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd f924 	bl	8000a2c <HAL_InitTick>

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40022000 	.word	0x40022000
 80037f4:	40021000 	.word	0x40021000
 80037f8:	0800c1a4 	.word	0x0800c1a4
 80037fc:	20000000 	.word	0x20000000
 8003800:	20000004 	.word	0x20000004

08003804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003804:	b490      	push	{r4, r7}
 8003806:	b08a      	sub	sp, #40	; 0x28
 8003808:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800380a:	4b2a      	ldr	r3, [pc, #168]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800380c:	1d3c      	adds	r4, r7, #4
 800380e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003810:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003814:	f240 2301 	movw	r3, #513	; 0x201
 8003818:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	2300      	movs	r3, #0
 8003820:	61bb      	str	r3, [r7, #24]
 8003822:	2300      	movs	r3, #0
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800382e:	4b22      	ldr	r3, [pc, #136]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b04      	cmp	r3, #4
 800383c:	d002      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x40>
 800383e:	2b08      	cmp	r3, #8
 8003840:	d003      	beq.n	800384a <HAL_RCC_GetSysClockFreq+0x46>
 8003842:	e02d      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003844:	4b1d      	ldr	r3, [pc, #116]	; (80038bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003846:	623b      	str	r3, [r7, #32]
      break;
 8003848:	e02d      	b.n	80038a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	0c9b      	lsrs	r3, r3, #18
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003856:	4413      	add	r3, r2
 8003858:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800385c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d013      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003868:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	0c5b      	lsrs	r3, r3, #17
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003876:	4413      	add	r3, r2
 8003878:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800387c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	4a0e      	ldr	r2, [pc, #56]	; (80038bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003882:	fb02 f203 	mul.w	r2, r2, r3
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	fbb2 f3f3 	udiv	r3, r2, r3
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
 800388e:	e004      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	4a0b      	ldr	r2, [pc, #44]	; (80038c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003894:	fb02 f303 	mul.w	r3, r2, r3
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	623b      	str	r3, [r7, #32]
      break;
 800389e:	e002      	b.n	80038a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038a0:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038a2:	623b      	str	r3, [r7, #32]
      break;
 80038a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038a6:	6a3b      	ldr	r3, [r7, #32]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3728      	adds	r7, #40	; 0x28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc90      	pop	{r4, r7}
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	0800c0d0 	.word	0x0800c0d0
 80038b8:	40021000 	.word	0x40021000
 80038bc:	00f42400 	.word	0x00f42400
 80038c0:	003d0900 	.word	0x003d0900
 80038c4:	007a1200 	.word	0x007a1200

080038c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038cc:	4b02      	ldr	r3, [pc, #8]	; (80038d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr
 80038d8:	20000000 	.word	0x20000000

080038dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038e0:	f7ff fff2 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 80038e4:	4602      	mov	r2, r0
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	0a1b      	lsrs	r3, r3, #8
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	4903      	ldr	r1, [pc, #12]	; (8003900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f2:	5ccb      	ldrb	r3, [r1, r3]
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40021000 	.word	0x40021000
 8003900:	0800c1b4 	.word	0x0800c1b4

08003904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003908:	f7ff ffde 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	0adb      	lsrs	r3, r3, #11
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4903      	ldr	r1, [pc, #12]	; (8003928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	0800c1b4 	.word	0x0800c1b4

0800392c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	220f      	movs	r2, #15
 800393a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800393c:	4b11      	ldr	r3, [pc, #68]	; (8003984 <HAL_RCC_GetClockConfig+0x58>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0203 	and.w	r2, r3, #3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003948:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <HAL_RCC_GetClockConfig+0x58>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_RCC_GetClockConfig+0x58>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003960:	4b08      	ldr	r3, [pc, #32]	; (8003984 <HAL_RCC_GetClockConfig+0x58>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	08db      	lsrs	r3, r3, #3
 8003966:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCC_GetClockConfig+0x5c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0207 	and.w	r2, r3, #7
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	40021000 	.word	0x40021000
 8003988:	40022000 	.word	0x40022000

0800398c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003994:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <RCC_Delay+0x34>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <RCC_Delay+0x38>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	0a5b      	lsrs	r3, r3, #9
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039a8:	bf00      	nop
  }
  while (Delay --);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1e5a      	subs	r2, r3, #1
 80039ae:	60fa      	str	r2, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1f9      	bne.n	80039a8 <RCC_Delay+0x1c>
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr
 80039c0:	20000000 	.word	0x20000000
 80039c4:	10624dd3 	.word	0x10624dd3

080039c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	2300      	movs	r3, #0
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d07d      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039e4:	2300      	movs	r3, #0
 80039e6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e8:	4b4f      	ldr	r3, [pc, #316]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10d      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f4:	4b4c      	ldr	r3, [pc, #304]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	4a4b      	ldr	r2, [pc, #300]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fe:	61d3      	str	r3, [r2, #28]
 8003a00:	4b49      	ldr	r3, [pc, #292]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a10:	4b46      	ldr	r3, [pc, #280]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d118      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a1c:	4b43      	ldr	r3, [pc, #268]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a42      	ldr	r2, [pc, #264]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a28:	f7fd f8d4 	bl	8000bd4 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2e:	e008      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a30:	f7fd f8d0 	bl	8000bd4 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	; 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e06d      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a42:	4b3a      	ldr	r3, [pc, #232]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a4e:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d02e      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d027      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a6c:	4b2e      	ldr	r3, [pc, #184]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a76:	4b2e      	ldr	r3, [pc, #184]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a78:	2201      	movs	r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a7c:	4b2c      	ldr	r3, [pc, #176]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a82:	4a29      	ldr	r2, [pc, #164]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d014      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a92:	f7fd f89f 	bl	8000bd4 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f7fd f89b 	bl	8000bd4 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e036      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0ee      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003abc:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	4917      	ldr	r1, [pc, #92]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ace:	7dfb      	ldrb	r3, [r7, #23]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d105      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad4:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ade:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aec:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	490b      	ldr	r1, [pc, #44]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b0a:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	4904      	ldr	r1, [pc, #16]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40007000 	.word	0x40007000
 8003b30:	42420440 	.word	0x42420440

08003b34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b34:	b590      	push	{r4, r7, lr}
 8003b36:	b08d      	sub	sp, #52	; 0x34
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b3c:	4b59      	ldr	r3, [pc, #356]	; (8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003b3e:	f107 040c 	add.w	r4, r7, #12
 8003b42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b48:	f240 2301 	movw	r3, #513	; 0x201
 8003b4c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
 8003b52:	2300      	movs	r3, #0
 8003b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b56:	2300      	movs	r3, #0
 8003b58:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b10      	cmp	r3, #16
 8003b66:	d00a      	beq.n	8003b7e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b10      	cmp	r3, #16
 8003b6c:	f200 8090 	bhi.w	8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d04c      	beq.n	8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d07b      	beq.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003b7c:	e088      	b.n	8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->CFGR;
 8003b7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003b84:	4b48      	ldr	r3, [pc, #288]	; (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8081 	beq.w	8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	0c9b      	lsrs	r3, r3, #18
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ba4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d018      	beq.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bb0:	4b3d      	ldr	r3, [pc, #244]	; (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	0c5b      	lsrs	r3, r3, #17
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00d      	beq.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003bd0:	4a36      	ldr	r2, [pc, #216]	; (8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	fb02 f303 	mul.w	r3, r2, r3
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003be0:	e004      	b.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	4a32      	ldr	r2, [pc, #200]	; (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003be6:	fb02 f303 	mul.w	r3, r2, r3
 8003bea:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003bec:	4b2e      	ldr	r3, [pc, #184]	; (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf8:	d102      	bne.n	8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003bfe:	e049      	b.n	8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
          frequency = (pllclk * 2) / 3;
 8003c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	4a2b      	ldr	r2, [pc, #172]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c0e:	e041      	b.n	8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      temp_reg = RCC->BDCR;
 8003c10:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c20:	d108      	bne.n	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003c2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c32:	e01e      	b.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c3e:	d109      	bne.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003c40:	4b19      	ldr	r3, [pc, #100]	; (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003c4c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c52:	e00e      	b.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c5e:	d11b      	bne.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 8003c60:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d015      	beq.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
        frequency = HSE_VALUE / 128U;
 8003c6c:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c70:	e012      	b.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 8003c72:	e011      	b.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c74:	f7ff fe46 	bl	8003904 <HAL_RCC_GetPCLK2Freq>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	0b9b      	lsrs	r3, r3, #14
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	3301      	adds	r3, #1
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c8e:	e004      	b.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      break;
 8003c90:	bf00      	nop
 8003c92:	e002      	b.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      break;
 8003c94:	bf00      	nop
 8003c96:	e000      	b.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      break;
 8003c98:	bf00      	nop
    }
  }
  return (frequency);
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3734      	adds	r7, #52	; 0x34
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd90      	pop	{r4, r7, pc}
 8003ca4:	0800c0e0 	.word	0x0800c0e0
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	00f42400 	.word	0x00f42400
 8003cb0:	003d0900 	.word	0x003d0900
 8003cb4:	aaaaaaab 	.word	0xaaaaaaab
 8003cb8:	0001e848 	.word	0x0001e848

08003cbc <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e084      	b.n	8003ddc <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	7c5b      	ldrb	r3, [r3, #17]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d105      	bne.n	8003ce8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7fc fe16 	bl	8000914 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fb39 	bl	8004366 <HAL_RTC_WaitForSynchro>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d004      	beq.n	8003d04 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2204      	movs	r2, #4
 8003cfe:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e06b      	b.n	8003ddc <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fbf2 	bl	80044ee <RTC_EnterInitMode>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d004      	beq.n	8003d1a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2204      	movs	r2, #4
 8003d14:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e060      	b.n	8003ddc <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0207 	bic.w	r2, r2, #7
 8003d28:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d005      	beq.n	8003d3e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003d32:	4b2c      	ldr	r3, [pc, #176]	; (8003de4 <HAL_RTC_Init+0x128>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	4a2b      	ldr	r2, [pc, #172]	; (8003de4 <HAL_RTC_Init+0x128>)
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003d3e:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <HAL_RTC_Init+0x128>)
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	4926      	ldr	r1, [pc, #152]	; (8003de4 <HAL_RTC_Init+0x128>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d58:	d003      	beq.n	8003d62 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	e00e      	b.n	8003d80 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003d62:	2001      	movs	r0, #1
 8003d64:	f7ff fee6 	bl	8003b34 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d68:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d104      	bne.n	8003d7a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2204      	movs	r2, #4
 8003d74:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e030      	b.n	8003ddc <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f023 010f 	bic.w	r1, r3, #15
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	0c1a      	lsrs	r2, r3, #16
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	0c1b      	lsrs	r3, r3, #16
 8003d9e:	041b      	lsls	r3, r3, #16
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	b291      	uxth	r1, r2
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	430b      	orrs	r3, r1
 8003daa:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fbc6 	bl	800453e <RTC_ExitInitMode>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d004      	beq.n	8003dc2 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2204      	movs	r2, #4
 8003dbc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e00c      	b.n	8003ddc <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003dda:	2300      	movs	r3, #0
  }
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40006c00 	.word	0x40006c00

08003de8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_RTC_SetTime+0x20>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e080      	b.n	8003f0e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	7c1b      	ldrb	r3, [r3, #16]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_RTC_SetTime+0x30>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e07a      	b.n	8003f0e <HAL_RTC_SetTime+0x126>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2202      	movs	r2, #2
 8003e22:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d113      	bne.n	8003e52 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003e34:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	785b      	ldrb	r3, [r3, #1]
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	460b      	mov	r3, r1
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	1a5b      	subs	r3, r3, r1
 8003e44:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003e46:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003e4c:	4413      	add	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	e01e      	b.n	8003e90 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fbb6 	bl	80045c8 <RTC_Bcd2ToByte>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003e64:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	785b      	ldrb	r3, [r3, #1]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fbab 	bl	80045c8 <RTC_Bcd2ToByte>
 8003e72:	4603      	mov	r3, r0
 8003e74:	461a      	mov	r2, r3
 8003e76:	4613      	mov	r3, r2
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003e7e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	789b      	ldrb	r3, [r3, #2]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fb9f 	bl	80045c8 <RTC_Bcd2ToByte>
 8003e8a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003e8c:	4423      	add	r3, r4
 8003e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003e90:	6979      	ldr	r1, [r7, #20]
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fac4 	bl	8004420 <RTC_WriteTimeCounter>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d007      	beq.n	8003eae <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e02f      	b.n	8003f0e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0205 	bic.w	r2, r2, #5
 8003ebc:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fad5 	bl	800446e <RTC_ReadAlarmCounter>
 8003ec4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ecc:	d018      	beq.n	8003f00 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d214      	bcs.n	8003f00 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003edc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003ee0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003ee2:	6939      	ldr	r1, [r7, #16]
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 fadb 	bl	80044a0 <RTC_WriteAlarmCounter>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d007      	beq.n	8003f00 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e006      	b.n	8003f0e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
  }
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd90      	pop	{r4, r7, pc}
	...

08003f18 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61fb      	str	r3, [r7, #28]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	2300      	movs	r3, #0
 8003f32:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <HAL_RTC_GetTime+0x28>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0b5      	b.n	80040b0 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0ac      	b.n	80040b0 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fa32 	bl	80043c0 <RTC_ReadTimeCounter>
 8003f5c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	4a55      	ldr	r2, [pc, #340]	; (80040b8 <HAL_RTC_GetTime+0x1a0>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	0adb      	lsrs	r3, r3, #11
 8003f68:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4b52      	ldr	r3, [pc, #328]	; (80040b8 <HAL_RTC_GetTime+0x1a0>)
 8003f6e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f72:	0adb      	lsrs	r3, r3, #11
 8003f74:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	4a4f      	ldr	r2, [pc, #316]	; (80040bc <HAL_RTC_GetTime+0x1a4>)
 8003f80:	fba2 2303 	umull	r2, r3, r2, r3
 8003f84:	095b      	lsrs	r3, r3, #5
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	4a4a      	ldr	r2, [pc, #296]	; (80040b8 <HAL_RTC_GetTime+0x1a0>)
 8003f90:	fba2 1203 	umull	r1, r2, r2, r3
 8003f94:	0ad2      	lsrs	r2, r2, #11
 8003f96:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003f9a:	fb01 f202 	mul.w	r2, r1, r2
 8003f9e:	1a9a      	subs	r2, r3, r2
 8003fa0:	4b46      	ldr	r3, [pc, #280]	; (80040bc <HAL_RTC_GetTime+0x1a4>)
 8003fa2:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa6:	0959      	lsrs	r1, r3, #5
 8003fa8:	460b      	mov	r3, r1
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	1a5b      	subs	r3, r3, r1
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	1ad1      	subs	r1, r2, r3
 8003fb2:	b2ca      	uxtb	r2, r1
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	2b17      	cmp	r3, #23
 8003fbc:	d955      	bls.n	800406a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4a3f      	ldr	r2, [pc, #252]	; (80040c0 <HAL_RTC_GetTime+0x1a8>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003fca:	6939      	ldr	r1, [r7, #16]
 8003fcc:	4b3c      	ldr	r3, [pc, #240]	; (80040c0 <HAL_RTC_GetTime+0x1a8>)
 8003fce:	fba3 2301 	umull	r2, r3, r3, r1
 8003fd2:	091a      	lsrs	r2, r3, #4
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	4413      	add	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	1aca      	subs	r2, r1, r3
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fa42 	bl	800446e <RTC_ReadAlarmCounter>
 8003fea:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ff2:	d008      	beq.n	8004006 <HAL_RTC_GetTime+0xee>
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d904      	bls.n	8004006 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	e002      	b.n	800400c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800400a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	4a2d      	ldr	r2, [pc, #180]	; (80040c4 <HAL_RTC_GetTime+0x1ac>)
 8004010:	fb02 f303 	mul.w	r3, r2, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800401a:	69b9      	ldr	r1, [r7, #24]
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 f9ff 	bl	8004420 <RTC_WriteTimeCounter>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e041      	b.n	80040b0 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004032:	d00c      	beq.n	800404e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	4413      	add	r3, r2
 800403a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800403c:	69f9      	ldr	r1, [r7, #28]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fa2e 	bl	80044a0 <RTC_WriteAlarmCounter>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e030      	b.n	80040b0 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800404e:	69f9      	ldr	r1, [r7, #28]
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 fa25 	bl	80044a0 <RTC_WriteAlarmCounter>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e027      	b.n	80040b0 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004060:	6979      	ldr	r1, [r7, #20]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 facd 	bl	8004602 <RTC_DateUpdate>
 8004068:	e003      	b.n	8004072 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	b2da      	uxtb	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01a      	beq.n	80040ae <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fa86 	bl	800458e <RTC_ByteToBcd2>
 8004082:	4603      	mov	r3, r0
 8004084:	461a      	mov	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	785b      	ldrb	r3, [r3, #1]
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fa7d 	bl	800458e <RTC_ByteToBcd2>
 8004094:	4603      	mov	r3, r0
 8004096:	461a      	mov	r2, r3
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	789b      	ldrb	r3, [r3, #2]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fa74 	bl	800458e <RTC_ByteToBcd2>
 80040a6:	4603      	mov	r3, r0
 80040a8:	461a      	mov	r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3720      	adds	r7, #32
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	91a2b3c5 	.word	0x91a2b3c5
 80040bc:	88888889 	.word	0x88888889
 80040c0:	aaaaaaab 	.word	0xaaaaaaab
 80040c4:	00015180 	.word	0x00015180

080040c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	2300      	movs	r3, #0
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_RTC_SetDate+0x24>
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e097      	b.n	8004220 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	7c1b      	ldrb	r3, [r3, #16]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_RTC_SetDate+0x34>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e091      	b.n	8004220 <HAL_RTC_SetDate+0x158>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2202      	movs	r2, #2
 8004106:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10c      	bne.n	8004128 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	78da      	ldrb	r2, [r3, #3]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	785a      	ldrb	r2, [r3, #1]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	789a      	ldrb	r2, [r3, #2]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	739a      	strb	r2, [r3, #14]
 8004126:	e01a      	b.n	800415e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	78db      	ldrb	r3, [r3, #3]
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fa4b 	bl	80045c8 <RTC_Bcd2ToByte>
 8004132:	4603      	mov	r3, r0
 8004134:	461a      	mov	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	785b      	ldrb	r3, [r3, #1]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fa42 	bl	80045c8 <RTC_Bcd2ToByte>
 8004144:	4603      	mov	r3, r0
 8004146:	461a      	mov	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fa39 	bl	80045c8 <RTC_Bcd2ToByte>
 8004156:	4603      	mov	r3, r0
 8004158:	461a      	mov	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	7bdb      	ldrb	r3, [r3, #15]
 8004162:	4618      	mov	r0, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	7b59      	ldrb	r1, [r3, #13]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	7b9b      	ldrb	r3, [r3, #14]
 800416c:	461a      	mov	r2, r3
 800416e:	f000 fb23 	bl	80047b8 <RTC_WeekDayNum>
 8004172:	4603      	mov	r3, r0
 8004174:	461a      	mov	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	7b1a      	ldrb	r2, [r3, #12]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f91c 	bl	80043c0 <RTC_ReadTimeCounter>
 8004188:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	4a26      	ldr	r2, [pc, #152]	; (8004228 <HAL_RTC_SetDate+0x160>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	0adb      	lsrs	r3, r3, #11
 8004194:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b18      	cmp	r3, #24
 800419a:	d93a      	bls.n	8004212 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	4a23      	ldr	r2, [pc, #140]	; (800422c <HAL_RTC_SetDate+0x164>)
 80041a0:	fba2 2303 	umull	r2, r3, r2, r3
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	4a22      	ldr	r2, [pc, #136]	; (8004230 <HAL_RTC_SetDate+0x168>)
 80041a8:	fb02 f303 	mul.w	r3, r2, r3
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80041b2:	69f9      	ldr	r1, [r7, #28]
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f933 	bl	8004420 <RTC_WriteTimeCounter>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2204      	movs	r2, #4
 80041c4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e027      	b.n	8004220 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f94c 	bl	800446e <RTC_ReadAlarmCounter>
 80041d6:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041de:	d018      	beq.n	8004212 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d214      	bcs.n	8004212 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80041ee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80041f2:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80041f4:	69b9      	ldr	r1, [r7, #24]
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 f952 	bl	80044a0 <RTC_WriteAlarmCounter>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2204      	movs	r2, #4
 8004206:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e006      	b.n	8004220 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	91a2b3c5 	.word	0x91a2b3c5
 800422c:	aaaaaaab 	.word	0xaaaaaaab
 8004230:	00015180 	.word	0x00015180

08004234 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004234:	b590      	push	{r4, r7, lr}
 8004236:	b089      	sub	sp, #36	; 0x24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8004244:	f107 0314 	add.w	r3, r7, #20
 8004248:	2100      	movs	r1, #0
 800424a:	460a      	mov	r2, r1
 800424c:	801a      	strh	r2, [r3, #0]
 800424e:	460a      	mov	r2, r1
 8004250:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_RTC_SetAlarm+0x2a>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e07d      	b.n	800435e <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	7c1b      	ldrb	r3, [r3, #16]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_RTC_SetAlarm+0x3a>
 800426a:	2302      	movs	r3, #2
 800426c:	e077      	b.n	800435e <HAL_RTC_SetAlarm+0x12a>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2201      	movs	r2, #1
 8004272:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2202      	movs	r2, #2
 8004278:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800427a:	f107 0314 	add.w	r3, r7, #20
 800427e:	2200      	movs	r2, #0
 8004280:	4619      	mov	r1, r3
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f7ff fe48 	bl	8003f18 <HAL_RTC_GetTime>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e065      	b.n	800435e <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004292:	7d3b      	ldrb	r3, [r7, #20]
 8004294:	461a      	mov	r2, r3
 8004296:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800429a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 800429e:	7d7b      	ldrb	r3, [r7, #21]
 80042a0:	4619      	mov	r1, r3
 80042a2:	460b      	mov	r3, r1
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a5b      	subs	r3, r3, r1
 80042a8:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80042aa:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80042ac:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80042ae:	4413      	add	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d113      	bne.n	80042e0 <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80042c2:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	785b      	ldrb	r3, [r3, #1]
 80042ca:	4619      	mov	r1, r3
 80042cc:	460b      	mov	r3, r1
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	1a5b      	subs	r3, r3, r1
 80042d2:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80042d4:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80042da:	4413      	add	r3, r2
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	e01e      	b.n	800431e <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 f96f 	bl	80045c8 <RTC_Bcd2ToByte>
 80042ea:	4603      	mov	r3, r0
 80042ec:	461a      	mov	r2, r3
 80042ee:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80042f2:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	785b      	ldrb	r3, [r3, #1]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 f964 	bl	80045c8 <RTC_Bcd2ToByte>
 8004300:	4603      	mov	r3, r0
 8004302:	461a      	mov	r2, r3
 8004304:	4613      	mov	r3, r2
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800430c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	789b      	ldrb	r3, [r3, #2]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f958 	bl	80045c8 <RTC_Bcd2ToByte>
 8004318:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800431a:	4423      	add	r3, r4
 800431c:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	429a      	cmp	r2, r3
 8004324:	d205      	bcs.n	8004332 <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800432c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004330:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004332:	69f9      	ldr	r1, [r7, #28]
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f8b3 	bl	80044a0 <RTC_WriteAlarmCounter>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d007      	beq.n	8004350 <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2204      	movs	r2, #4
 8004344:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e006      	b.n	800435e <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2201      	movs	r2, #1
 8004354:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800435c:	2300      	movs	r3, #0
  }
}
 800435e:	4618      	mov	r0, r3
 8004360:	3724      	adds	r7, #36	; 0x24
 8004362:	46bd      	mov	sp, r7
 8004364:	bd90      	pop	{r4, r7, pc}

08004366 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e01d      	b.n	80043b8 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0208 	bic.w	r2, r2, #8
 800438a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800438c:	f7fc fc22 	bl	8000bd4 <HAL_GetTick>
 8004390:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004392:	e009      	b.n	80043a8 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004394:	f7fc fc1e 	bl	8000bd4 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043a2:	d901      	bls.n	80043a8 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e007      	b.n	80043b8 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0ee      	beq.n	8004394 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	827b      	strh	r3, [r7, #18]
 80043cc:	2300      	movs	r3, #0
 80043ce:	823b      	strh	r3, [r7, #16]
 80043d0:	2300      	movs	r3, #0
 80043d2:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80043f0:	8a7a      	ldrh	r2, [r7, #18]
 80043f2:	8a3b      	ldrh	r3, [r7, #16]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d008      	beq.n	800440a <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80043f8:	8a3b      	ldrh	r3, [r7, #16]
 80043fa:	041a      	lsls	r2, r3, #16
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	b29b      	uxth	r3, r3
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	e004      	b.n	8004414 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800440a:	8a7b      	ldrh	r3, [r7, #18]
 800440c:	041a      	lsls	r2, r3, #16
 800440e:	89fb      	ldrh	r3, [r7, #14]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004414:	697b      	ldr	r3, [r7, #20]
}
 8004416:	4618      	mov	r0, r3
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr

08004420 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f85d 	bl	80044ee <RTC_EnterInitMode>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	73fb      	strb	r3, [r7, #15]
 800443e:	e011      	b.n	8004464 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	0c12      	lsrs	r2, r2, #16
 8004448:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	b292      	uxth	r2, r2
 8004452:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f872 	bl	800453e <RTC_ExitInitMode>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800446e:	b480      	push	{r7}
 8004470:	b085      	sub	sp, #20
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	81fb      	strh	r3, [r7, #14]
 800447a:	2300      	movs	r3, #0
 800447c:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800448e:	89fb      	ldrh	r3, [r7, #14]
 8004490:	041a      	lsls	r2, r3, #16
 8004492:	89bb      	ldrh	r3, [r7, #12]
 8004494:	4313      	orrs	r3, r2
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr

080044a0 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f81d 	bl	80044ee <RTC_EnterInitMode>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
 80044be:	e011      	b.n	80044e4 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	0c12      	lsrs	r2, r2, #16
 80044c8:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	b292      	uxth	r2, r2
 80044d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f832 	bl	800453e <RTC_ExitInitMode>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b084      	sub	sp, #16
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80044fa:	f7fc fb6b 	bl	8000bd4 <HAL_GetTick>
 80044fe:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004500:	e009      	b.n	8004516 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004502:	f7fc fb67 	bl	8000bd4 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004510:	d901      	bls.n	8004516 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e00f      	b.n	8004536 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0ee      	beq.n	8004502 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0210 	orr.w	r2, r2, #16
 8004532:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0210 	bic.w	r2, r2, #16
 8004558:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800455a:	f7fc fb3b 	bl	8000bd4 <HAL_GetTick>
 800455e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004560:	e009      	b.n	8004576 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004562:	f7fc fb37 	bl	8000bd4 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004570:	d901      	bls.n	8004576 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e007      	b.n	8004586 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 0320 	and.w	r3, r3, #32
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0ee      	beq.n	8004562 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800458e:	b480      	push	{r7}
 8004590:	b085      	sub	sp, #20
 8004592:	af00      	add	r7, sp, #0
 8004594:	4603      	mov	r3, r0
 8004596:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800459c:	e005      	b.n	80045aa <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3301      	adds	r3, #1
 80045a2:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80045a4:	79fb      	ldrb	r3, [r7, #7]
 80045a6:	3b0a      	subs	r3, #10
 80045a8:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	2b09      	cmp	r3, #9
 80045ae:	d8f6      	bhi.n	800459e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	79fb      	ldrb	r3, [r7, #7]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	b2db      	uxtb	r3, r3
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr

080045c8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	091b      	lsrs	r3, r3, #4
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	4413      	add	r3, r2
 80045f6:	b2db      	uxtb	r3, r3
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr

08004602 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b086      	sub	sp, #24
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	2300      	movs	r3, #0
 8004612:	613b      	str	r3, [r7, #16]
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	7bdb      	ldrb	r3, [r3, #15]
 8004620:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	7b5b      	ldrb	r3, [r3, #13]
 8004626:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	7b9b      	ldrb	r3, [r3, #14]
 800462c:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800462e:	2300      	movs	r3, #0
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	e06f      	b.n	8004714 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d011      	beq.n	800465e <RTC_DateUpdate+0x5c>
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2b03      	cmp	r3, #3
 800463e:	d00e      	beq.n	800465e <RTC_DateUpdate+0x5c>
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	2b05      	cmp	r3, #5
 8004644:	d00b      	beq.n	800465e <RTC_DateUpdate+0x5c>
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b07      	cmp	r3, #7
 800464a:	d008      	beq.n	800465e <RTC_DateUpdate+0x5c>
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2b08      	cmp	r3, #8
 8004650:	d005      	beq.n	800465e <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	2b0a      	cmp	r3, #10
 8004656:	d002      	beq.n	800465e <RTC_DateUpdate+0x5c>
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b0c      	cmp	r3, #12
 800465c:	d117      	bne.n	800468e <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b1e      	cmp	r3, #30
 8004662:	d803      	bhi.n	800466c <RTC_DateUpdate+0x6a>
      {
        day++;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3301      	adds	r3, #1
 8004668:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800466a:	e050      	b.n	800470e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2b0c      	cmp	r3, #12
 8004670:	d005      	beq.n	800467e <RTC_DateUpdate+0x7c>
        {
          month++;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	3301      	adds	r3, #1
 8004676:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004678:	2301      	movs	r3, #1
 800467a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800467c:	e047      	b.n	800470e <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800467e:	2301      	movs	r3, #1
 8004680:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004682:	2301      	movs	r3, #1
 8004684:	60fb      	str	r3, [r7, #12]
          year++;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	3301      	adds	r3, #1
 800468a:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800468c:	e03f      	b.n	800470e <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b04      	cmp	r3, #4
 8004692:	d008      	beq.n	80046a6 <RTC_DateUpdate+0xa4>
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	2b06      	cmp	r3, #6
 8004698:	d005      	beq.n	80046a6 <RTC_DateUpdate+0xa4>
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b09      	cmp	r3, #9
 800469e:	d002      	beq.n	80046a6 <RTC_DateUpdate+0xa4>
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	2b0b      	cmp	r3, #11
 80046a4:	d10c      	bne.n	80046c0 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b1d      	cmp	r3, #29
 80046aa:	d803      	bhi.n	80046b4 <RTC_DateUpdate+0xb2>
      {
        day++;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	3301      	adds	r3, #1
 80046b0:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80046b2:	e02c      	b.n	800470e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	3301      	adds	r3, #1
 80046b8:	613b      	str	r3, [r7, #16]
        day = 1U;
 80046ba:	2301      	movs	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80046be:	e026      	b.n	800470e <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d123      	bne.n	800470e <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b1b      	cmp	r3, #27
 80046ca:	d803      	bhi.n	80046d4 <RTC_DateUpdate+0xd2>
      {
        day++;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3301      	adds	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	e01c      	b.n	800470e <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b1c      	cmp	r3, #28
 80046d8:	d111      	bne.n	80046fe <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 f838 	bl	8004754 <RTC_IsLeapYear>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <RTC_DateUpdate+0xf0>
        {
          day++;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3301      	adds	r3, #1
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e00d      	b.n	800470e <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	3301      	adds	r3, #1
 80046f6:	613b      	str	r3, [r7, #16]
          day = 1U;
 80046f8:	2301      	movs	r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	e007      	b.n	800470e <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b1d      	cmp	r3, #29
 8004702:	d104      	bne.n	800470e <RTC_DateUpdate+0x10c>
      {
        month++;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	3301      	adds	r3, #1
 8004708:	613b      	str	r3, [r7, #16]
        day = 1U;
 800470a:	2301      	movs	r3, #1
 800470c:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	3301      	adds	r3, #1
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	429a      	cmp	r2, r3
 800471a:	d38b      	bcc.n	8004634 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	b2da      	uxtb	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	b2da      	uxtb	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	b2da      	uxtb	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	4619      	mov	r1, r3
 800473e:	6978      	ldr	r0, [r7, #20]
 8004740:	f000 f83a 	bl	80047b8 <RTC_WeekDayNum>
 8004744:	4603      	mov	r3, r0
 8004746:	461a      	mov	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	731a      	strb	r2, [r3, #12]
}
 800474c:	bf00      	nop
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	4603      	mov	r3, r0
 800475c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800475e:	88fb      	ldrh	r3, [r7, #6]
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	e01d      	b.n	80047aa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	4a10      	ldr	r2, [pc, #64]	; (80047b4 <RTC_IsLeapYear+0x60>)
 8004772:	fba2 1203 	umull	r1, r2, r2, r3
 8004776:	0952      	lsrs	r2, r2, #5
 8004778:	2164      	movs	r1, #100	; 0x64
 800477a:	fb01 f202 	mul.w	r2, r1, r2
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004786:	2301      	movs	r3, #1
 8004788:	e00f      	b.n	80047aa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800478a:	88fb      	ldrh	r3, [r7, #6]
 800478c:	4a09      	ldr	r2, [pc, #36]	; (80047b4 <RTC_IsLeapYear+0x60>)
 800478e:	fba2 1203 	umull	r1, r2, r2, r3
 8004792:	09d2      	lsrs	r2, r2, #7
 8004794:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004798:	fb01 f202 	mul.w	r2, r1, r2
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80047a8:	2300      	movs	r3, #0
  }
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr
 80047b4:	51eb851f 	.word	0x51eb851f

080047b8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	70fb      	strb	r3, [r7, #3]
 80047c4:	4613      	mov	r3, r2
 80047c6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80047d6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d82d      	bhi.n	800483a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80047de:	78fa      	ldrb	r2, [r7, #3]
 80047e0:	4613      	mov	r3, r2
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	4413      	add	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	4a2c      	ldr	r2, [pc, #176]	; (800489c <RTC_WeekDayNum+0xe4>)
 80047ec:	fba2 2303 	umull	r2, r3, r2, r3
 80047f0:	085a      	lsrs	r2, r3, #1
 80047f2:	78bb      	ldrb	r3, [r7, #2]
 80047f4:	441a      	add	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	441a      	add	r2, r3
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	089b      	lsrs	r3, r3, #2
 8004800:	441a      	add	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	3b01      	subs	r3, #1
 8004806:	4926      	ldr	r1, [pc, #152]	; (80048a0 <RTC_WeekDayNum+0xe8>)
 8004808:	fba1 1303 	umull	r1, r3, r1, r3
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	1ad2      	subs	r2, r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	3b01      	subs	r3, #1
 8004814:	4922      	ldr	r1, [pc, #136]	; (80048a0 <RTC_WeekDayNum+0xe8>)
 8004816:	fba1 1303 	umull	r1, r3, r1, r3
 800481a:	09db      	lsrs	r3, r3, #7
 800481c:	4413      	add	r3, r2
 800481e:	1d1a      	adds	r2, r3, #4
 8004820:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <RTC_WeekDayNum+0xec>)
 8004822:	fba3 1302 	umull	r1, r3, r3, r2
 8004826:	1ad1      	subs	r1, r2, r3
 8004828:	0849      	lsrs	r1, r1, #1
 800482a:	440b      	add	r3, r1
 800482c:	0899      	lsrs	r1, r3, #2
 800482e:	460b      	mov	r3, r1
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	1a5b      	subs	r3, r3, r1
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	e029      	b.n	800488e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800483a:	78fa      	ldrb	r2, [r7, #3]
 800483c:	4613      	mov	r3, r2
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	4413      	add	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	4a15      	ldr	r2, [pc, #84]	; (800489c <RTC_WeekDayNum+0xe4>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	085a      	lsrs	r2, r3, #1
 800484e:	78bb      	ldrb	r3, [r7, #2]
 8004850:	441a      	add	r2, r3
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	441a      	add	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	089b      	lsrs	r3, r3, #2
 800485a:	441a      	add	r2, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4910      	ldr	r1, [pc, #64]	; (80048a0 <RTC_WeekDayNum+0xe8>)
 8004860:	fba1 1303 	umull	r1, r3, r1, r3
 8004864:	095b      	lsrs	r3, r3, #5
 8004866:	1ad2      	subs	r2, r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	490d      	ldr	r1, [pc, #52]	; (80048a0 <RTC_WeekDayNum+0xe8>)
 800486c:	fba1 1303 	umull	r1, r3, r1, r3
 8004870:	09db      	lsrs	r3, r3, #7
 8004872:	4413      	add	r3, r2
 8004874:	1c9a      	adds	r2, r3, #2
 8004876:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <RTC_WeekDayNum+0xec>)
 8004878:	fba3 1302 	umull	r1, r3, r3, r2
 800487c:	1ad1      	subs	r1, r2, r3
 800487e:	0849      	lsrs	r1, r1, #1
 8004880:	440b      	add	r3, r1
 8004882:	0899      	lsrs	r1, r3, #2
 8004884:	460b      	mov	r3, r1
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	1a5b      	subs	r3, r3, r1
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	b2db      	uxtb	r3, r3
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr
 800489c:	38e38e39 	.word	0x38e38e39
 80048a0:	51eb851f 	.word	0x51eb851f
 80048a4:	24924925 	.word	0x24924925

080048a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e076      	b.n	80049a8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d108      	bne.n	80048d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ca:	d009      	beq.n	80048e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	61da      	str	r2, [r3, #28]
 80048d2:	e005      	b.n	80048e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fc f82e 	bl	800095c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004916:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004964:	ea42 0103 	orr.w	r1, r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	0c1a      	lsrs	r2, r3, #16
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f002 0204 	and.w	r2, r2, #4
 8004986:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	69da      	ldr	r2, [r3, #28]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004996:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e041      	b.n	8004a46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f839 	bl	8004a4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4619      	mov	r1, r3
 80049ee:	4610      	mov	r0, r2
 80049f0:	f000 f9b4 	bl	8004d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr

08004a60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d001      	beq.n	8004a78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e03a      	b.n	8004aee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a18      	ldr	r2, [pc, #96]	; (8004af8 <HAL_TIM_Base_Start_IT+0x98>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00e      	beq.n	8004ab8 <HAL_TIM_Base_Start_IT+0x58>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa2:	d009      	beq.n	8004ab8 <HAL_TIM_Base_Start_IT+0x58>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a14      	ldr	r2, [pc, #80]	; (8004afc <HAL_TIM_Base_Start_IT+0x9c>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d004      	beq.n	8004ab8 <HAL_TIM_Base_Start_IT+0x58>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a13      	ldr	r2, [pc, #76]	; (8004b00 <HAL_TIM_Base_Start_IT+0xa0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d111      	bne.n	8004adc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b06      	cmp	r3, #6
 8004ac8:	d010      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 0201 	orr.w	r2, r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ada:	e007      	b.n	8004aec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800

08004b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d122      	bne.n	8004b60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d11b      	bne.n	8004b60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0202 	mvn.w	r2, #2
 8004b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f8ed 	bl	8004d26 <HAL_TIM_IC_CaptureCallback>
 8004b4c:	e005      	b.n	8004b5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f8e0 	bl	8004d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f8ef 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d122      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d11b      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f06f 0204 	mvn.w	r2, #4
 8004b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f8c3 	bl	8004d26 <HAL_TIM_IC_CaptureCallback>
 8004ba0:	e005      	b.n	8004bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f8b6 	bl	8004d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f8c5 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d122      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d11b      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0208 	mvn.w	r2, #8
 8004bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2204      	movs	r2, #4
 8004bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f899 	bl	8004d26 <HAL_TIM_IC_CaptureCallback>
 8004bf4:	e005      	b.n	8004c02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f88c 	bl	8004d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f89b 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0310 	and.w	r3, r3, #16
 8004c12:	2b10      	cmp	r3, #16
 8004c14:	d122      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0310 	and.w	r3, r3, #16
 8004c20:	2b10      	cmp	r3, #16
 8004c22:	d11b      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0210 	mvn.w	r2, #16
 8004c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2208      	movs	r2, #8
 8004c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f86f 	bl	8004d26 <HAL_TIM_IC_CaptureCallback>
 8004c48:	e005      	b.n	8004c56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f862 	bl	8004d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f871 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d10e      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d107      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0201 	mvn.w	r2, #1
 8004c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fb fd7c 	bl	8000780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c92:	2b80      	cmp	r3, #128	; 0x80
 8004c94:	d10e      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca0:	2b80      	cmp	r3, #128	; 0x80
 8004ca2:	d107      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f8bf 	bl	8004e32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbe:	2b40      	cmp	r3, #64	; 0x40
 8004cc0:	d10e      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ccc:	2b40      	cmp	r3, #64	; 0x40
 8004cce:	d107      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f835 	bl	8004d4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	d10e      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	d107      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0220 	mvn.w	r2, #32
 8004d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f88a 	bl	8004e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bc80      	pop	{r7}
 8004d24:	4770      	bx	lr

08004d26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bc80      	pop	{r7}
 8004d48:	4770      	bx	lr

08004d4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc80      	pop	{r7}
 8004d5a:	4770      	bx	lr

08004d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a29      	ldr	r2, [pc, #164]	; (8004e14 <TIM_Base_SetConfig+0xb8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00b      	beq.n	8004d8c <TIM_Base_SetConfig+0x30>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7a:	d007      	beq.n	8004d8c <TIM_Base_SetConfig+0x30>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a26      	ldr	r2, [pc, #152]	; (8004e18 <TIM_Base_SetConfig+0xbc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d003      	beq.n	8004d8c <TIM_Base_SetConfig+0x30>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a25      	ldr	r2, [pc, #148]	; (8004e1c <TIM_Base_SetConfig+0xc0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d108      	bne.n	8004d9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a1c      	ldr	r2, [pc, #112]	; (8004e14 <TIM_Base_SetConfig+0xb8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00b      	beq.n	8004dbe <TIM_Base_SetConfig+0x62>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dac:	d007      	beq.n	8004dbe <TIM_Base_SetConfig+0x62>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a19      	ldr	r2, [pc, #100]	; (8004e18 <TIM_Base_SetConfig+0xbc>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d003      	beq.n	8004dbe <TIM_Base_SetConfig+0x62>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a18      	ldr	r2, [pc, #96]	; (8004e1c <TIM_Base_SetConfig+0xc0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d108      	bne.n	8004dd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a07      	ldr	r2, [pc, #28]	; (8004e14 <TIM_Base_SetConfig+0xb8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d103      	bne.n	8004e04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	615a      	str	r2, [r3, #20]
}
 8004e0a:	bf00      	nop
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr
 8004e14:	40012c00 	.word	0x40012c00
 8004e18:	40000400 	.word	0x40000400
 8004e1c:	40000800 	.word	0x40000800

08004e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr

08004e32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr

08004e44 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e016      	b.n	8004e84 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7fb fdca 	bl	80009f0 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e68:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	ea42 0103 	orr.w	r1, r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	f107 0014 	add.w	r0, r7, #20
 8004e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bc80      	pop	{r7}
 8004ea8:	b004      	add	sp, #16
 8004eaa:	4770      	bx	lr

08004eac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ebc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004ec0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr

08004ed8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ee0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004ee4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr

08004f0c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr

08004f24 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f24:	b084      	sub	sp, #16
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	f107 0014 	add.w	r0, r7, #20
 8004f32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	b004      	add	sp, #16
 8004f62:	4770      	bx	lr

08004f64 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b09b      	sub	sp, #108	; 0x6c
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	78db      	ldrb	r3, [r3, #3]
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d81f      	bhi.n	8004fd6 <USB_ActivateEndpoint+0x72>
 8004f96:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <USB_ActivateEndpoint+0x38>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	08004fad 	.word	0x08004fad
 8004fa0:	08004fc9 	.word	0x08004fc9
 8004fa4:	08004fdf 	.word	0x08004fdf
 8004fa8:	08004fbb 	.word	0x08004fbb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004fac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004fb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fb4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004fb8:	e012      	b.n	8004fe0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004fba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004fbe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004fc2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004fc6:	e00b      	b.n	8004fe0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004fc8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004fcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fd0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004fd4:	e004      	b.n	8004fe0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004fdc:	e000      	b.n	8004fe0 <USB_ActivateEndpoint+0x7c>
      break;
 8004fde:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	441a      	add	r2, r3
 8004fea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005018:	b29a      	uxth	r2, r3
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	4313      	orrs	r3, r2
 8005022:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	441a      	add	r2, r3
 8005030:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005044:	b29b      	uxth	r3, r3
 8005046:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	7b1b      	ldrb	r3, [r3, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	f040 8149 	bne.w	80052e4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	785b      	ldrb	r3, [r3, #1]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 8084 	beq.w	8005164 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005066:	b29b      	uxth	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	4413      	add	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	011a      	lsls	r2, r3, #4
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	88db      	ldrh	r3, [r3, #6]
 8005084:	085b      	lsrs	r3, r3, #1
 8005086:	b29b      	uxth	r3, r3
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	81fb      	strh	r3, [r7, #14]
 800509e:	89fb      	ldrh	r3, [r7, #14]
 80050a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01b      	beq.n	80050e0 <USB_ActivateEndpoint+0x17c>
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050be:	81bb      	strh	r3, [r7, #12]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	441a      	add	r2, r3
 80050ca:	89bb      	ldrh	r3, [r7, #12]
 80050cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050dc:	b29b      	uxth	r3, r3
 80050de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	78db      	ldrb	r3, [r3, #3]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d020      	beq.n	800512a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050fe:	813b      	strh	r3, [r7, #8]
 8005100:	893b      	ldrh	r3, [r7, #8]
 8005102:	f083 0320 	eor.w	r3, r3, #32
 8005106:	813b      	strh	r3, [r7, #8]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	441a      	add	r2, r3
 8005112:	893b      	ldrh	r3, [r7, #8]
 8005114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800511c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005124:	b29b      	uxth	r3, r3
 8005126:	8013      	strh	r3, [r2, #0]
 8005128:	e27f      	b.n	800562a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800513c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005140:	817b      	strh	r3, [r7, #10]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	441a      	add	r2, r3
 800514c:	897b      	ldrh	r3, [r7, #10]
 800514e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515e:	b29b      	uxth	r3, r3
 8005160:	8013      	strh	r3, [r2, #0]
 8005162:	e262      	b.n	800562a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516e:	b29b      	uxth	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005174:	4413      	add	r3, r2
 8005176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	011a      	lsls	r2, r3, #4
 800517e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005180:	4413      	add	r3, r2
 8005182:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	88db      	ldrh	r3, [r3, #6]
 800518c:	085b      	lsrs	r3, r3, #1
 800518e:	b29b      	uxth	r3, r3
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005196:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	4413      	add	r3, r2
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	011a      	lsls	r2, r3, #4
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	4413      	add	r3, r2
 80051b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051ba:	623b      	str	r3, [r7, #32]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d112      	bne.n	80051ea <USB_ActivateEndpoint+0x286>
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	801a      	strh	r2, [r3, #0]
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	801a      	strh	r2, [r3, #0]
 80051e8:	e02f      	b.n	800524a <USB_ActivateEndpoint+0x2e6>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	2b3e      	cmp	r3, #62	; 0x3e
 80051f0:	d813      	bhi.n	800521a <USB_ActivateEndpoint+0x2b6>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	085b      	lsrs	r3, r3, #1
 80051f8:	663b      	str	r3, [r7, #96]	; 0x60
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <USB_ActivateEndpoint+0x2a8>
 8005206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005208:	3301      	adds	r3, #1
 800520a:	663b      	str	r3, [r7, #96]	; 0x60
 800520c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800520e:	b29b      	uxth	r3, r3
 8005210:	029b      	lsls	r3, r3, #10
 8005212:	b29a      	uxth	r2, r3
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	801a      	strh	r2, [r3, #0]
 8005218:	e017      	b.n	800524a <USB_ActivateEndpoint+0x2e6>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	663b      	str	r3, [r7, #96]	; 0x60
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 031f 	and.w	r3, r3, #31
 800522a:	2b00      	cmp	r3, #0
 800522c:	d102      	bne.n	8005234 <USB_ActivateEndpoint+0x2d0>
 800522e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005230:	3b01      	subs	r3, #1
 8005232:	663b      	str	r3, [r7, #96]	; 0x60
 8005234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005236:	b29b      	uxth	r3, r3
 8005238:	029b      	lsls	r3, r3, #10
 800523a:	b29b      	uxth	r3, r3
 800523c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005244:	b29a      	uxth	r2, r3
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	83fb      	strh	r3, [r7, #30]
 8005258:	8bfb      	ldrh	r3, [r7, #30]
 800525a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d01b      	beq.n	800529a <USB_ActivateEndpoint+0x336>
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	b29b      	uxth	r3, r3
 8005270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005278:	83bb      	strh	r3, [r7, #28]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	441a      	add	r2, r3
 8005284:	8bbb      	ldrh	r3, [r7, #28]
 8005286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800528a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800528e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005296:	b29b      	uxth	r3, r3
 8005298:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b0:	837b      	strh	r3, [r7, #26]
 80052b2:	8b7b      	ldrh	r3, [r7, #26]
 80052b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052b8:	837b      	strh	r3, [r7, #26]
 80052ba:	8b7b      	ldrh	r3, [r7, #26]
 80052bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052c0:	837b      	strh	r3, [r7, #26]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	441a      	add	r2, r3
 80052cc:	8b7b      	ldrh	r3, [r7, #26]
 80052ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052de:	b29b      	uxth	r3, r3
 80052e0:	8013      	strh	r3, [r2, #0]
 80052e2:	e1a2      	b.n	800562a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	441a      	add	r2, r3
 8005308:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800530c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005314:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531c:	b29b      	uxth	r3, r3
 800531e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	65bb      	str	r3, [r7, #88]	; 0x58
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800532a:	b29b      	uxth	r3, r3
 800532c:	461a      	mov	r2, r3
 800532e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005330:	4413      	add	r3, r2
 8005332:	65bb      	str	r3, [r7, #88]	; 0x58
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	011a      	lsls	r2, r3, #4
 800533a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800533c:	4413      	add	r3, r2
 800533e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005342:	657b      	str	r3, [r7, #84]	; 0x54
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	891b      	ldrh	r3, [r3, #8]
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	b29b      	uxth	r3, r3
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005352:	801a      	strh	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	653b      	str	r3, [r7, #80]	; 0x50
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800535e:	b29b      	uxth	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005364:	4413      	add	r3, r2
 8005366:	653b      	str	r3, [r7, #80]	; 0x50
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	011a      	lsls	r2, r3, #4
 800536e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005370:	4413      	add	r3, r2
 8005372:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	895b      	ldrh	r3, [r3, #10]
 800537c:	085b      	lsrs	r3, r3, #1
 800537e:	b29b      	uxth	r3, r3
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	b29a      	uxth	r2, r3
 8005384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005386:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	2b00      	cmp	r3, #0
 800538e:	f040 8091 	bne.w	80054b4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80053a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80053a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d01b      	beq.n	80053e2 <USB_ActivateEndpoint+0x47e>
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	441a      	add	r2, r3
 80053cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80053ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053de:	b29b      	uxth	r3, r3
 80053e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	873b      	strh	r3, [r7, #56]	; 0x38
 80053f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80053f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01b      	beq.n	8005432 <USB_ActivateEndpoint+0x4ce>
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	b29b      	uxth	r3, r3
 8005408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005410:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	441a      	add	r2, r3
 800541c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800541e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800542e:	b29b      	uxth	r3, r3
 8005430:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	b29b      	uxth	r3, r3
 8005440:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005448:	86bb      	strh	r3, [r7, #52]	; 0x34
 800544a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800544c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005450:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005452:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005454:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005458:	86bb      	strh	r3, [r7, #52]	; 0x34
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	441a      	add	r2, r3
 8005464:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800546a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005476:	b29b      	uxth	r3, r3
 8005478:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	b29b      	uxth	r3, r3
 8005488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800548c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005490:	867b      	strh	r3, [r7, #50]	; 0x32
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	441a      	add	r2, r3
 800549c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800549e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	8013      	strh	r3, [r2, #0]
 80054b2:	e0ba      	b.n	800562a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80054c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80054c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01d      	beq.n	800550c <USB_ActivateEndpoint+0x5a8>
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	441a      	add	r2, r3
 80054f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005500:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005508:	b29b      	uxth	r3, r3
 800550a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800551c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01d      	beq.n	8005564 <USB_ActivateEndpoint+0x600>
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	441a      	add	r2, r3
 800554c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800555c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005560:	b29b      	uxth	r3, r3
 8005562:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	78db      	ldrb	r3, [r3, #3]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d024      	beq.n	80055b6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	b29b      	uxth	r3, r3
 800557a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800557e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005582:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005586:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800558a:	f083 0320 	eor.w	r3, r3, #32
 800558e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	441a      	add	r2, r3
 800559c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80055a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	8013      	strh	r3, [r2, #0]
 80055b4:	e01d      	b.n	80055f2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	441a      	add	r2, r3
 80055da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80055de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005608:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	441a      	add	r2, r3
 8005614:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800561e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005626:	b29b      	uxth	r3, r3
 8005628:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800562a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800562e:	4618      	mov	r0, r3
 8005630:	376c      	adds	r7, #108	; 0x6c
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr

08005638 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005638:	b480      	push	{r7}
 800563a:	b08d      	sub	sp, #52	; 0x34
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	7b1b      	ldrb	r3, [r3, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	f040 808e 	bne.w	8005768 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	785b      	ldrb	r3, [r3, #1]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d044      	beq.n	80056de <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	81bb      	strh	r3, [r7, #12]
 8005662:	89bb      	ldrh	r3, [r7, #12]
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d01b      	beq.n	80056a4 <USB_DeactivateEndpoint+0x6c>
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005682:	817b      	strh	r3, [r7, #10]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	441a      	add	r2, r3
 800568e:	897b      	ldrh	r3, [r7, #10]
 8005690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800569c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ba:	813b      	strh	r3, [r7, #8]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	441a      	add	r2, r3
 80056c6:	893b      	ldrh	r3, [r7, #8]
 80056c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d8:	b29b      	uxth	r3, r3
 80056da:	8013      	strh	r3, [r2, #0]
 80056dc:	e192      	b.n	8005a04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	827b      	strh	r3, [r7, #18]
 80056ec:	8a7b      	ldrh	r3, [r7, #18]
 80056ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d01b      	beq.n	800572e <USB_DeactivateEndpoint+0xf6>
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	b29b      	uxth	r3, r3
 8005704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570c:	823b      	strh	r3, [r7, #16]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	441a      	add	r2, r3
 8005718:	8a3b      	ldrh	r3, [r7, #16]
 800571a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800571e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800572a:	b29b      	uxth	r3, r3
 800572c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	b29b      	uxth	r3, r3
 800573c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005744:	81fb      	strh	r3, [r7, #14]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	441a      	add	r2, r3
 8005750:	89fb      	ldrh	r3, [r7, #14]
 8005752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800575a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800575e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005762:	b29b      	uxth	r3, r3
 8005764:	8013      	strh	r3, [r2, #0]
 8005766:	e14d      	b.n	8005a04 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	785b      	ldrb	r3, [r3, #1]
 800576c:	2b00      	cmp	r3, #0
 800576e:	f040 80a5 	bne.w	80058bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	843b      	strh	r3, [r7, #32]
 8005780:	8c3b      	ldrh	r3, [r7, #32]
 8005782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d01b      	beq.n	80057c2 <USB_DeactivateEndpoint+0x18a>
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a0:	83fb      	strh	r3, [r7, #30]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	441a      	add	r2, r3
 80057ac:	8bfb      	ldrh	r3, [r7, #30]
 80057ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057be:	b29b      	uxth	r3, r3
 80057c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	83bb      	strh	r3, [r7, #28]
 80057d0:	8bbb      	ldrh	r3, [r7, #28]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d01b      	beq.n	8005812 <USB_DeactivateEndpoint+0x1da>
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f0:	837b      	strh	r3, [r7, #26]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	441a      	add	r2, r3
 80057fc:	8b7b      	ldrh	r3, [r7, #26]
 80057fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800580a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800580e:	b29b      	uxth	r3, r3
 8005810:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b29b      	uxth	r3, r3
 8005820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005828:	833b      	strh	r3, [r7, #24]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	441a      	add	r2, r3
 8005834:	8b3b      	ldrh	r3, [r7, #24]
 8005836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800583a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800583e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005842:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005846:	b29b      	uxth	r3, r3
 8005848:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	b29b      	uxth	r3, r3
 8005858:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800585c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005860:	82fb      	strh	r3, [r7, #22]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	441a      	add	r2, r3
 800586c:	8afb      	ldrh	r3, [r7, #22]
 800586e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800587a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800587e:	b29b      	uxth	r3, r3
 8005880:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29b      	uxth	r3, r3
 8005890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005898:	82bb      	strh	r3, [r7, #20]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	441a      	add	r2, r3
 80058a4:	8abb      	ldrh	r3, [r7, #20]
 80058a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	8013      	strh	r3, [r2, #0]
 80058ba:	e0a3      	b.n	8005a04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80058ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80058cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01b      	beq.n	800590c <USB_DeactivateEndpoint+0x2d4>
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	441a      	add	r2, r3
 80058f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80058f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005900:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005908:	b29b      	uxth	r3, r3
 800590a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	857b      	strh	r3, [r7, #42]	; 0x2a
 800591a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800591c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01b      	beq.n	800595c <USB_DeactivateEndpoint+0x324>
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	b29b      	uxth	r3, r3
 8005932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593a:	853b      	strh	r3, [r7, #40]	; 0x28
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	441a      	add	r2, r3
 8005946:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800594c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005954:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005958:	b29b      	uxth	r3, r3
 800595a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	b29b      	uxth	r3, r3
 800596a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800596e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005972:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	441a      	add	r2, r3
 800597e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005988:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800598c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005990:	b29b      	uxth	r3, r3
 8005992:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	441a      	add	r2, r3
 80059b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	441a      	add	r2, r3
 80059ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3734      	adds	r7, #52	; 0x34
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr

08005a10 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b0cc      	sub	sp, #304	; 0x130
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	1d3b      	adds	r3, r7, #4
 8005a18:	6018      	str	r0, [r3, #0]
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a1e:	463b      	mov	r3, r7
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	785b      	ldrb	r3, [r3, #1]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	f040 872e 	bne.w	8006886 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005a2a:	463b      	mov	r3, r7
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699a      	ldr	r2, [r3, #24]
 8005a30:	463b      	mov	r3, r7
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d905      	bls.n	8005a46 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005a3a:	463b      	mov	r3, r7
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005a44:	e004      	b.n	8005a50 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005a46:	463b      	mov	r3, r7
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005a50:	463b      	mov	r3, r7
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	7b1b      	ldrb	r3, [r3, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d134      	bne.n	8005ac4 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005a5a:	463b      	mov	r3, r7
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6959      	ldr	r1, [r3, #20]
 8005a60:	463b      	mov	r3, r7
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	88da      	ldrh	r2, [r3, #6]
 8005a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	1d38      	adds	r0, r7, #4
 8005a6e:	6800      	ldr	r0, [r0, #0]
 8005a70:	f001 fc03 	bl	800727a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a74:	f107 0310 	add.w	r3, r7, #16
 8005a78:	1d3a      	adds	r2, r7, #4
 8005a7a:	6812      	ldr	r2, [r2, #0]
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	1d3b      	adds	r3, r7, #4
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	4619      	mov	r1, r3
 8005a8a:	f107 0310 	add.w	r3, r7, #16
 8005a8e:	f107 0210 	add.w	r2, r7, #16
 8005a92:	6812      	ldr	r2, [r2, #0]
 8005a94:	440a      	add	r2, r1
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	463b      	mov	r3, r7
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	011a      	lsls	r2, r3, #4
 8005aa0:	f107 0310 	add.w	r3, r7, #16
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005aac:	f107 030c 	add.w	r3, r7, #12
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	f107 030c 	add.w	r3, r7, #12
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	801a      	strh	r2, [r3, #0]
 8005ac0:	f000 beac 	b.w	800681c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005ac4:	463b      	mov	r3, r7
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	78db      	ldrb	r3, [r3, #3]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	f040 838c 	bne.w	80061e8 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005ad0:	463b      	mov	r3, r7
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6a1a      	ldr	r2, [r3, #32]
 8005ad6:	463b      	mov	r3, r7
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	f240 8330 	bls.w	8006142 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005ae2:	1d3b      	adds	r3, r7, #4
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	463b      	mov	r3, r7
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005b00:	1d3b      	adds	r3, r7, #4
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	463b      	mov	r3, r7
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	441a      	add	r2, r3
 8005b0e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b1a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005b26:	463b      	mov	r3, r7
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6a1a      	ldr	r2, [r3, #32]
 8005b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b30:	1ad2      	subs	r2, r2, r3
 8005b32:	463b      	mov	r3, r7
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b38:	1d3b      	adds	r3, r7, #4
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 819e 	beq.w	8005e90 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b58:	1d3a      	adds	r2, r7, #4
 8005b5a:	6812      	ldr	r2, [r2, #0]
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	463b      	mov	r3, r7
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d17a      	bne.n	8005c5e <USB_EPStartXfer+0x24e>
 8005b68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b6c:	1d3a      	adds	r2, r7, #4
 8005b6e:	6812      	ldr	r2, [r2, #0]
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	1d3b      	adds	r3, r7, #4
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005b86:	6812      	ldr	r2, [r2, #0]
 8005b88:	440a      	add	r2, r1
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	011a      	lsls	r2, r3, #4
 8005b94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d11a      	bne.n	8005be4 <USB_EPStartXfer+0x1d4>
 8005bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	801a      	strh	r2, [r3, #0]
 8005bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	801a      	strh	r2, [r3, #0]
 8005be2:	e062      	b.n	8005caa <USB_EPStartXfer+0x29a>
 8005be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be8:	2b3e      	cmp	r3, #62	; 0x3e
 8005bea:	d819      	bhi.n	8005c20 <USB_EPStartXfer+0x210>
 8005bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf0:	085b      	lsrs	r3, r3, #1
 8005bf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d004      	beq.n	8005c0c <USB_EPStartXfer+0x1fc>
 8005c02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c06:	3301      	adds	r3, #1
 8005c08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005c0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	029b      	lsls	r3, r3, #10
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	801a      	strh	r2, [r3, #0]
 8005c1e:	e044      	b.n	8005caa <USB_EPStartXfer+0x29a>
 8005c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c24:	095b      	lsrs	r3, r3, #5
 8005c26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2e:	f003 031f 	and.w	r3, r3, #31
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d104      	bne.n	8005c40 <USB_EPStartXfer+0x230>
 8005c36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005c40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	029b      	lsls	r3, r3, #10
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	801a      	strh	r2, [r3, #0]
 8005c5c:	e025      	b.n	8005caa <USB_EPStartXfer+0x29a>
 8005c5e:	463b      	mov	r3, r7
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d120      	bne.n	8005caa <USB_EPStartXfer+0x29a>
 8005c68:	1d3b      	adds	r3, r7, #4
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	4619      	mov	r1, r3
 8005c74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c78:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	440a      	add	r2, r1
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	463b      	mov	r3, r7
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	011a      	lsls	r2, r3, #4
 8005c8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4413      	add	r3, r2
 8005c92:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005caa:	463b      	mov	r3, r7
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	895b      	ldrh	r3, [r3, #10]
 8005cb0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cb4:	463b      	mov	r3, r7
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6959      	ldr	r1, [r3, #20]
 8005cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cc4:	1d38      	adds	r0, r7, #4
 8005cc6:	6800      	ldr	r0, [r0, #0]
 8005cc8:	f001 fad7 	bl	800727a <USB_WritePMA>
            ep->xfer_buff += len;
 8005ccc:	463b      	mov	r3, r7
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	695a      	ldr	r2, [r3, #20]
 8005cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd6:	441a      	add	r2, r3
 8005cd8:	463b      	mov	r3, r7
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005cde:	463b      	mov	r3, r7
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6a1a      	ldr	r2, [r3, #32]
 8005ce4:	463b      	mov	r3, r7
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d909      	bls.n	8005d02 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005cee:	463b      	mov	r3, r7
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6a1a      	ldr	r2, [r3, #32]
 8005cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf8:	1ad2      	subs	r2, r2, r3
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	621a      	str	r2, [r3, #32]
 8005d00:	e008      	b.n	8005d14 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d02:	463b      	mov	r3, r7
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005d0c:	463b      	mov	r3, r7
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2200      	movs	r2, #0
 8005d12:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d14:	463b      	mov	r3, r7
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	785b      	ldrb	r3, [r3, #1]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d17a      	bne.n	8005e14 <USB_EPStartXfer+0x404>
 8005d1e:	f107 0318 	add.w	r3, r7, #24
 8005d22:	1d3a      	adds	r2, r7, #4
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	1d3b      	adds	r3, r7, #4
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	4619      	mov	r1, r3
 8005d34:	f107 0318 	add.w	r3, r7, #24
 8005d38:	f107 0218 	add.w	r2, r7, #24
 8005d3c:	6812      	ldr	r2, [r2, #0]
 8005d3e:	440a      	add	r2, r1
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	463b      	mov	r3, r7
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	011a      	lsls	r2, r3, #4
 8005d4a:	f107 0318 	add.w	r3, r7, #24
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4413      	add	r3, r2
 8005d52:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005d56:	f107 0314 	add.w	r3, r7, #20
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d11a      	bne.n	8005d9a <USB_EPStartXfer+0x38a>
 8005d64:	f107 0314 	add.w	r3, r7, #20
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	f107 0314 	add.w	r3, r7, #20
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	801a      	strh	r2, [r3, #0]
 8005d7c:	f107 0314 	add.w	r3, r7, #20
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	f107 0314 	add.w	r3, r7, #20
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	801a      	strh	r2, [r3, #0]
 8005d98:	e067      	b.n	8005e6a <USB_EPStartXfer+0x45a>
 8005d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8005da0:	d819      	bhi.n	8005dd6 <USB_EPStartXfer+0x3c6>
 8005da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da6:	085b      	lsrs	r3, r3, #1
 8005da8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d004      	beq.n	8005dc2 <USB_EPStartXfer+0x3b2>
 8005db8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005dc2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	029b      	lsls	r3, r3, #10
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	f107 0314 	add.w	r3, r7, #20
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	801a      	strh	r2, [r3, #0]
 8005dd4:	e049      	b.n	8005e6a <USB_EPStartXfer+0x45a>
 8005dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dda:	095b      	lsrs	r3, r3, #5
 8005ddc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de4:	f003 031f 	and.w	r3, r3, #31
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d104      	bne.n	8005df6 <USB_EPStartXfer+0x3e6>
 8005dec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005df0:	3b01      	subs	r3, #1
 8005df2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005df6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	029b      	lsls	r3, r3, #10
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	f107 0314 	add.w	r3, r7, #20
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	e02a      	b.n	8005e6a <USB_EPStartXfer+0x45a>
 8005e14:	463b      	mov	r3, r7
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	785b      	ldrb	r3, [r3, #1]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d125      	bne.n	8005e6a <USB_EPStartXfer+0x45a>
 8005e1e:	f107 0320 	add.w	r3, r7, #32
 8005e22:	1d3a      	adds	r2, r7, #4
 8005e24:	6812      	ldr	r2, [r2, #0]
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	1d3b      	adds	r3, r7, #4
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	4619      	mov	r1, r3
 8005e34:	f107 0320 	add.w	r3, r7, #32
 8005e38:	f107 0220 	add.w	r2, r7, #32
 8005e3c:	6812      	ldr	r2, [r2, #0]
 8005e3e:	440a      	add	r2, r1
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	463b      	mov	r3, r7
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	011a      	lsls	r2, r3, #4
 8005e4a:	f107 0320 	add.w	r3, r7, #32
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4413      	add	r3, r2
 8005e52:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005e56:	f107 031c 	add.w	r3, r7, #28
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	f107 031c 	add.w	r3, r7, #28
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	891b      	ldrh	r3, [r3, #8]
 8005e70:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e74:	463b      	mov	r3, r7
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6959      	ldr	r1, [r3, #20]
 8005e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e84:	1d38      	adds	r0, r7, #4
 8005e86:	6800      	ldr	r0, [r0, #0]
 8005e88:	f001 f9f7 	bl	800727a <USB_WritePMA>
 8005e8c:	f000 bcc6 	b.w	800681c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e90:	463b      	mov	r3, r7
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	785b      	ldrb	r3, [r3, #1]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d164      	bne.n	8005f64 <USB_EPStartXfer+0x554>
 8005e9a:	1d3b      	adds	r3, r7, #4
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ea0:	1d3b      	adds	r3, r7, #4
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	461a      	mov	r2, r3
 8005eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eae:	4413      	add	r3, r2
 8005eb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eb2:	463b      	mov	r3, r7
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	011a      	lsls	r2, r3, #4
 8005eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d112      	bne.n	8005ef2 <USB_EPStartXfer+0x4e2>
 8005ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eda:	801a      	strh	r2, [r3, #0]
 8005edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eee:	801a      	strh	r2, [r3, #0]
 8005ef0:	e057      	b.n	8005fa2 <USB_EPStartXfer+0x592>
 8005ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ef8:	d817      	bhi.n	8005f2a <USB_EPStartXfer+0x51a>
 8005efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005efe:	085b      	lsrs	r3, r3, #1
 8005f00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d004      	beq.n	8005f1a <USB_EPStartXfer+0x50a>
 8005f10:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f14:	3301      	adds	r3, #1
 8005f16:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005f1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	029b      	lsls	r3, r3, #10
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f26:	801a      	strh	r2, [r3, #0]
 8005f28:	e03b      	b.n	8005fa2 <USB_EPStartXfer+0x592>
 8005f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f38:	f003 031f 	and.w	r3, r3, #31
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <USB_EPStartXfer+0x53a>
 8005f40:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f44:	3b01      	subs	r3, #1
 8005f46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005f4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	029b      	lsls	r3, r3, #10
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f60:	801a      	strh	r2, [r3, #0]
 8005f62:	e01e      	b.n	8005fa2 <USB_EPStartXfer+0x592>
 8005f64:	463b      	mov	r3, r7
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	785b      	ldrb	r3, [r3, #1]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d119      	bne.n	8005fa2 <USB_EPStartXfer+0x592>
 8005f6e:	1d3b      	adds	r3, r7, #4
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	653b      	str	r3, [r7, #80]	; 0x50
 8005f74:	1d3b      	adds	r3, r7, #4
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	461a      	mov	r2, r3
 8005f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f82:	4413      	add	r3, r2
 8005f84:	653b      	str	r3, [r7, #80]	; 0x50
 8005f86:	463b      	mov	r3, r7
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	011a      	lsls	r2, r3, #4
 8005f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f90:	4413      	add	r3, r2
 8005f92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005fa2:	463b      	mov	r3, r7
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	891b      	ldrh	r3, [r3, #8]
 8005fa8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fac:	463b      	mov	r3, r7
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6959      	ldr	r1, [r3, #20]
 8005fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005fbc:	1d38      	adds	r0, r7, #4
 8005fbe:	6800      	ldr	r0, [r0, #0]
 8005fc0:	f001 f95b 	bl	800727a <USB_WritePMA>
            ep->xfer_buff += len;
 8005fc4:	463b      	mov	r3, r7
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	695a      	ldr	r2, [r3, #20]
 8005fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fce:	441a      	add	r2, r3
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005fd6:	463b      	mov	r3, r7
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6a1a      	ldr	r2, [r3, #32]
 8005fdc:	463b      	mov	r3, r7
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d909      	bls.n	8005ffa <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6a1a      	ldr	r2, [r3, #32]
 8005fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff0:	1ad2      	subs	r2, r2, r3
 8005ff2:	463b      	mov	r3, r7
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	621a      	str	r2, [r3, #32]
 8005ff8:	e008      	b.n	800600c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ffa:	463b      	mov	r3, r7
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006004:	463b      	mov	r3, r7
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2200      	movs	r2, #0
 800600a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800600c:	1d3b      	adds	r3, r7, #4
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	643b      	str	r3, [r7, #64]	; 0x40
 8006012:	463b      	mov	r3, r7
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	785b      	ldrb	r3, [r3, #1]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d164      	bne.n	80060e6 <USB_EPStartXfer+0x6d6>
 800601c:	1d3b      	adds	r3, r7, #4
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	63bb      	str	r3, [r7, #56]	; 0x38
 8006022:	1d3b      	adds	r3, r7, #4
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800602a:	b29b      	uxth	r3, r3
 800602c:	461a      	mov	r2, r3
 800602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006030:	4413      	add	r3, r2
 8006032:	63bb      	str	r3, [r7, #56]	; 0x38
 8006034:	463b      	mov	r3, r7
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	011a      	lsls	r2, r3, #4
 800603c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603e:	4413      	add	r3, r2
 8006040:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006044:	637b      	str	r3, [r7, #52]	; 0x34
 8006046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800604a:	2b00      	cmp	r3, #0
 800604c:	d112      	bne.n	8006074 <USB_EPStartXfer+0x664>
 800604e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006058:	b29a      	uxth	r2, r3
 800605a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605c:	801a      	strh	r2, [r3, #0]
 800605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	b29b      	uxth	r3, r3
 8006064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800606c:	b29a      	uxth	r2, r3
 800606e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006070:	801a      	strh	r2, [r3, #0]
 8006072:	e054      	b.n	800611e <USB_EPStartXfer+0x70e>
 8006074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006078:	2b3e      	cmp	r3, #62	; 0x3e
 800607a:	d817      	bhi.n	80060ac <USB_EPStartXfer+0x69c>
 800607c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d004      	beq.n	800609c <USB_EPStartXfer+0x68c>
 8006092:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006096:	3301      	adds	r3, #1
 8006098:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800609c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	029b      	lsls	r3, r3, #10
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a8:	801a      	strh	r2, [r3, #0]
 80060aa:	e038      	b.n	800611e <USB_EPStartXfer+0x70e>
 80060ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80060b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ba:	f003 031f 	and.w	r3, r3, #31
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d104      	bne.n	80060cc <USB_EPStartXfer+0x6bc>
 80060c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060c6:	3b01      	subs	r3, #1
 80060c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80060cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	029b      	lsls	r3, r3, #10
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060de:	b29a      	uxth	r2, r3
 80060e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e2:	801a      	strh	r2, [r3, #0]
 80060e4:	e01b      	b.n	800611e <USB_EPStartXfer+0x70e>
 80060e6:	463b      	mov	r3, r7
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	785b      	ldrb	r3, [r3, #1]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d116      	bne.n	800611e <USB_EPStartXfer+0x70e>
 80060f0:	1d3b      	adds	r3, r7, #4
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060fe:	4413      	add	r3, r2
 8006100:	643b      	str	r3, [r7, #64]	; 0x40
 8006102:	463b      	mov	r3, r7
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	011a      	lsls	r2, r3, #4
 800610a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800610c:	4413      	add	r3, r2
 800610e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006118:	b29a      	uxth	r2, r3
 800611a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800611e:	463b      	mov	r3, r7
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	895b      	ldrh	r3, [r3, #10]
 8006124:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006128:	463b      	mov	r3, r7
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6959      	ldr	r1, [r3, #20]
 800612e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006132:	b29b      	uxth	r3, r3
 8006134:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006138:	1d38      	adds	r0, r7, #4
 800613a:	6800      	ldr	r0, [r0, #0]
 800613c:	f001 f89d 	bl	800727a <USB_WritePMA>
 8006140:	e36c      	b.n	800681c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006142:	463b      	mov	r3, r7
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800614c:	1d3b      	adds	r3, r7, #4
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	463b      	mov	r3, r7
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	b29b      	uxth	r3, r3
 800615e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006166:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800616a:	1d3b      	adds	r3, r7, #4
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	463b      	mov	r3, r7
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	441a      	add	r2, r3
 8006178:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800617c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618c:	b29b      	uxth	r3, r3
 800618e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006190:	1d3b      	adds	r3, r7, #4
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006196:	1d3b      	adds	r3, r7, #4
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800619e:	b29b      	uxth	r3, r3
 80061a0:	461a      	mov	r2, r3
 80061a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061a4:	4413      	add	r3, r2
 80061a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061a8:	463b      	mov	r3, r7
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	011a      	lsls	r2, r3, #4
 80061b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061b2:	4413      	add	r3, r2
 80061b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80061ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061be:	b29a      	uxth	r2, r3
 80061c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061c4:	463b      	mov	r3, r7
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	891b      	ldrh	r3, [r3, #8]
 80061ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061ce:	463b      	mov	r3, r7
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6959      	ldr	r1, [r3, #20]
 80061d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80061de:	1d38      	adds	r0, r7, #4
 80061e0:	6800      	ldr	r0, [r0, #0]
 80061e2:	f001 f84a 	bl	800727a <USB_WritePMA>
 80061e6:	e319      	b.n	800681c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80061e8:	1d3b      	adds	r3, r7, #4
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	463b      	mov	r3, r7
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006202:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006206:	1d3b      	adds	r3, r7, #4
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	463b      	mov	r3, r7
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	441a      	add	r2, r3
 8006214:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800621c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006220:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006228:	b29b      	uxth	r3, r3
 800622a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800622c:	463b      	mov	r3, r7
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6a1a      	ldr	r2, [r3, #32]
 8006232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006236:	1ad2      	subs	r2, r2, r3
 8006238:	463b      	mov	r3, r7
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800623e:	1d3b      	adds	r3, r7, #4
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	463b      	mov	r3, r7
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	b29b      	uxth	r3, r3
 8006250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 8162 	beq.w	800651e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800625a:	1d3b      	adds	r3, r7, #4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006262:	463b      	mov	r3, r7
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	785b      	ldrb	r3, [r3, #1]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d164      	bne.n	8006336 <USB_EPStartXfer+0x926>
 800626c:	1d3b      	adds	r3, r7, #4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	67bb      	str	r3, [r7, #120]	; 0x78
 8006272:	1d3b      	adds	r3, r7, #4
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800627a:	b29b      	uxth	r3, r3
 800627c:	461a      	mov	r2, r3
 800627e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006280:	4413      	add	r3, r2
 8006282:	67bb      	str	r3, [r7, #120]	; 0x78
 8006284:	463b      	mov	r3, r7
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	011a      	lsls	r2, r3, #4
 800628c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800628e:	4413      	add	r3, r2
 8006290:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006294:	677b      	str	r3, [r7, #116]	; 0x74
 8006296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d112      	bne.n	80062c4 <USB_EPStartXfer+0x8b4>
 800629e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062ac:	801a      	strh	r2, [r3, #0]
 80062ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062bc:	b29a      	uxth	r2, r3
 80062be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062c0:	801a      	strh	r2, [r3, #0]
 80062c2:	e057      	b.n	8006374 <USB_EPStartXfer+0x964>
 80062c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c8:	2b3e      	cmp	r3, #62	; 0x3e
 80062ca:	d817      	bhi.n	80062fc <USB_EPStartXfer+0x8ec>
 80062cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062d0:	085b      	lsrs	r3, r3, #1
 80062d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80062d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d004      	beq.n	80062ec <USB_EPStartXfer+0x8dc>
 80062e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80062e6:	3301      	adds	r3, #1
 80062e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80062ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	029b      	lsls	r3, r3, #10
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062f8:	801a      	strh	r2, [r3, #0]
 80062fa:	e03b      	b.n	8006374 <USB_EPStartXfer+0x964>
 80062fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006300:	095b      	lsrs	r3, r3, #5
 8006302:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	2b00      	cmp	r3, #0
 8006310:	d104      	bne.n	800631c <USB_EPStartXfer+0x90c>
 8006312:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006316:	3b01      	subs	r3, #1
 8006318:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800631c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006320:	b29b      	uxth	r3, r3
 8006322:	029b      	lsls	r3, r3, #10
 8006324:	b29b      	uxth	r3, r3
 8006326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800632a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800632e:	b29a      	uxth	r2, r3
 8006330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006332:	801a      	strh	r2, [r3, #0]
 8006334:	e01e      	b.n	8006374 <USB_EPStartXfer+0x964>
 8006336:	463b      	mov	r3, r7
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d119      	bne.n	8006374 <USB_EPStartXfer+0x964>
 8006340:	1d3b      	adds	r3, r7, #4
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006348:	b29b      	uxth	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006350:	4413      	add	r3, r2
 8006352:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006356:	463b      	mov	r3, r7
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	011a      	lsls	r2, r3, #4
 800635e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006362:	4413      	add	r3, r2
 8006364:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006368:	67fb      	str	r3, [r7, #124]	; 0x7c
 800636a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800636e:	b29a      	uxth	r2, r3
 8006370:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006372:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006374:	463b      	mov	r3, r7
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	895b      	ldrh	r3, [r3, #10]
 800637a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800637e:	463b      	mov	r3, r7
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6959      	ldr	r1, [r3, #20]
 8006384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006388:	b29b      	uxth	r3, r3
 800638a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800638e:	1d38      	adds	r0, r7, #4
 8006390:	6800      	ldr	r0, [r0, #0]
 8006392:	f000 ff72 	bl	800727a <USB_WritePMA>
          ep->xfer_buff += len;
 8006396:	463b      	mov	r3, r7
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	695a      	ldr	r2, [r3, #20]
 800639c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063a0:	441a      	add	r2, r3
 80063a2:	463b      	mov	r3, r7
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80063a8:	463b      	mov	r3, r7
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6a1a      	ldr	r2, [r3, #32]
 80063ae:	463b      	mov	r3, r7
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d909      	bls.n	80063cc <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80063b8:	463b      	mov	r3, r7
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6a1a      	ldr	r2, [r3, #32]
 80063be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c2:	1ad2      	subs	r2, r2, r3
 80063c4:	463b      	mov	r3, r7
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	621a      	str	r2, [r3, #32]
 80063ca:	e008      	b.n	80063de <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80063cc:	463b      	mov	r3, r7
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80063d6:	463b      	mov	r3, r7
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2200      	movs	r2, #0
 80063dc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80063de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 821a 	beq.w	800681c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063e8:	463b      	mov	r3, r7
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	785b      	ldrb	r3, [r3, #1]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d164      	bne.n	80064bc <USB_EPStartXfer+0xaac>
 80063f2:	1d3b      	adds	r3, r7, #4
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80063f8:	1d3b      	adds	r3, r7, #4
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006400:	b29b      	uxth	r3, r3
 8006402:	461a      	mov	r2, r3
 8006404:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006406:	4413      	add	r3, r2
 8006408:	66bb      	str	r3, [r7, #104]	; 0x68
 800640a:	463b      	mov	r3, r7
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	011a      	lsls	r2, r3, #4
 8006412:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006414:	4413      	add	r3, r2
 8006416:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800641a:	667b      	str	r3, [r7, #100]	; 0x64
 800641c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006420:	2b00      	cmp	r3, #0
 8006422:	d112      	bne.n	800644a <USB_EPStartXfer+0xa3a>
 8006424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	b29b      	uxth	r3, r3
 800642a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800642e:	b29a      	uxth	r2, r3
 8006430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006432:	801a      	strh	r2, [r3, #0]
 8006434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	b29b      	uxth	r3, r3
 800643a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006442:	b29a      	uxth	r2, r3
 8006444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006446:	801a      	strh	r2, [r3, #0]
 8006448:	e057      	b.n	80064fa <USB_EPStartXfer+0xaea>
 800644a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800644e:	2b3e      	cmp	r3, #62	; 0x3e
 8006450:	d817      	bhi.n	8006482 <USB_EPStartXfer+0xa72>
 8006452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006456:	085b      	lsrs	r3, r3, #1
 8006458:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800645c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <USB_EPStartXfer+0xa62>
 8006468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800646c:	3301      	adds	r3, #1
 800646e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006476:	b29b      	uxth	r3, r3
 8006478:	029b      	lsls	r3, r3, #10
 800647a:	b29a      	uxth	r2, r3
 800647c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800647e:	801a      	strh	r2, [r3, #0]
 8006480:	e03b      	b.n	80064fa <USB_EPStartXfer+0xaea>
 8006482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006486:	095b      	lsrs	r3, r3, #5
 8006488:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800648c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006490:	f003 031f 	and.w	r3, r3, #31
 8006494:	2b00      	cmp	r3, #0
 8006496:	d104      	bne.n	80064a2 <USB_EPStartXfer+0xa92>
 8006498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800649c:	3b01      	subs	r3, #1
 800649e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80064a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	029b      	lsls	r3, r3, #10
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064b8:	801a      	strh	r2, [r3, #0]
 80064ba:	e01e      	b.n	80064fa <USB_EPStartXfer+0xaea>
 80064bc:	463b      	mov	r3, r7
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	785b      	ldrb	r3, [r3, #1]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d119      	bne.n	80064fa <USB_EPStartXfer+0xaea>
 80064c6:	1d3b      	adds	r3, r7, #4
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	673b      	str	r3, [r7, #112]	; 0x70
 80064cc:	1d3b      	adds	r3, r7, #4
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	461a      	mov	r2, r3
 80064d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064da:	4413      	add	r3, r2
 80064dc:	673b      	str	r3, [r7, #112]	; 0x70
 80064de:	463b      	mov	r3, r7
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	011a      	lsls	r2, r3, #4
 80064e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064e8:	4413      	add	r3, r2
 80064ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064fa:	463b      	mov	r3, r7
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	891b      	ldrh	r3, [r3, #8]
 8006500:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006504:	463b      	mov	r3, r7
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6959      	ldr	r1, [r3, #20]
 800650a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800650e:	b29b      	uxth	r3, r3
 8006510:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006514:	1d38      	adds	r0, r7, #4
 8006516:	6800      	ldr	r0, [r0, #0]
 8006518:	f000 feaf 	bl	800727a <USB_WritePMA>
 800651c:	e17e      	b.n	800681c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800651e:	463b      	mov	r3, r7
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	785b      	ldrb	r3, [r3, #1]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d16f      	bne.n	8006608 <USB_EPStartXfer+0xbf8>
 8006528:	1d3b      	adds	r3, r7, #4
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006530:	1d3b      	adds	r3, r7, #4
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006538:	b29b      	uxth	r3, r3
 800653a:	461a      	mov	r2, r3
 800653c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006540:	4413      	add	r3, r2
 8006542:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006546:	463b      	mov	r3, r7
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	011a      	lsls	r2, r3, #4
 800654e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006552:	4413      	add	r3, r2
 8006554:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800655c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006560:	2b00      	cmp	r3, #0
 8006562:	d116      	bne.n	8006592 <USB_EPStartXfer+0xb82>
 8006564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29b      	uxth	r3, r3
 800656c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006570:	b29a      	uxth	r2, r3
 8006572:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006576:	801a      	strh	r2, [r3, #0]
 8006578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006588:	b29a      	uxth	r2, r3
 800658a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800658e:	801a      	strh	r2, [r3, #0]
 8006590:	e05f      	b.n	8006652 <USB_EPStartXfer+0xc42>
 8006592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006596:	2b3e      	cmp	r3, #62	; 0x3e
 8006598:	d818      	bhi.n	80065cc <USB_EPStartXfer+0xbbc>
 800659a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800659e:	085b      	lsrs	r3, r3, #1
 80065a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80065a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d004      	beq.n	80065ba <USB_EPStartXfer+0xbaa>
 80065b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065b4:	3301      	adds	r3, #1
 80065b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80065ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065be:	b29b      	uxth	r3, r3
 80065c0:	029b      	lsls	r3, r3, #10
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	e042      	b.n	8006652 <USB_EPStartXfer+0xc42>
 80065cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d0:	095b      	lsrs	r3, r3, #5
 80065d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80065d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065da:	f003 031f 	and.w	r3, r3, #31
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <USB_EPStartXfer+0xbdc>
 80065e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065e6:	3b01      	subs	r3, #1
 80065e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80065ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	029b      	lsls	r3, r3, #10
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fe:	b29a      	uxth	r2, r3
 8006600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006604:	801a      	strh	r2, [r3, #0]
 8006606:	e024      	b.n	8006652 <USB_EPStartXfer+0xc42>
 8006608:	463b      	mov	r3, r7
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	785b      	ldrb	r3, [r3, #1]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d11f      	bne.n	8006652 <USB_EPStartXfer+0xc42>
 8006612:	1d3b      	adds	r3, r7, #4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800661a:	1d3b      	adds	r3, r7, #4
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006622:	b29b      	uxth	r3, r3
 8006624:	461a      	mov	r2, r3
 8006626:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800662a:	4413      	add	r3, r2
 800662c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006630:	463b      	mov	r3, r7
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	011a      	lsls	r2, r3, #4
 8006638:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800663c:	4413      	add	r3, r2
 800663e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006642:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800664a:	b29a      	uxth	r2, r3
 800664c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006650:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006652:	463b      	mov	r3, r7
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	891b      	ldrh	r3, [r3, #8]
 8006658:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800665c:	463b      	mov	r3, r7
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6959      	ldr	r1, [r3, #20]
 8006662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006666:	b29b      	uxth	r3, r3
 8006668:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800666c:	1d38      	adds	r0, r7, #4
 800666e:	6800      	ldr	r0, [r0, #0]
 8006670:	f000 fe03 	bl	800727a <USB_WritePMA>
          ep->xfer_buff += len;
 8006674:	463b      	mov	r3, r7
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695a      	ldr	r2, [r3, #20]
 800667a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800667e:	441a      	add	r2, r3
 8006680:	463b      	mov	r3, r7
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006686:	463b      	mov	r3, r7
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6a1a      	ldr	r2, [r3, #32]
 800668c:	463b      	mov	r3, r7
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	429a      	cmp	r2, r3
 8006694:	d909      	bls.n	80066aa <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8006696:	463b      	mov	r3, r7
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6a1a      	ldr	r2, [r3, #32]
 800669c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a0:	1ad2      	subs	r2, r2, r3
 80066a2:	463b      	mov	r3, r7
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	621a      	str	r2, [r3, #32]
 80066a8:	e008      	b.n	80066bc <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80066aa:	463b      	mov	r3, r7
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80066b4:	463b      	mov	r3, r7
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2200      	movs	r2, #0
 80066ba:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80066bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 80ab 	beq.w	800681c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066c6:	1d3b      	adds	r3, r7, #4
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066ce:	463b      	mov	r3, r7
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	785b      	ldrb	r3, [r3, #1]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d16f      	bne.n	80067b8 <USB_EPStartXfer+0xda8>
 80066d8:	1d3b      	adds	r3, r7, #4
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066e0:	1d3b      	adds	r3, r7, #4
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	461a      	mov	r2, r3
 80066ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066f0:	4413      	add	r3, r2
 80066f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066f6:	463b      	mov	r3, r7
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	011a      	lsls	r2, r3, #4
 80066fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006702:	4413      	add	r3, r2
 8006704:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800670c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006710:	2b00      	cmp	r3, #0
 8006712:	d116      	bne.n	8006742 <USB_EPStartXfer+0xd32>
 8006714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006720:	b29a      	uxth	r2, r3
 8006722:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006726:	801a      	strh	r2, [r3, #0]
 8006728:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	b29b      	uxth	r3, r3
 8006730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006738:	b29a      	uxth	r2, r3
 800673a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800673e:	801a      	strh	r2, [r3, #0]
 8006740:	e05b      	b.n	80067fa <USB_EPStartXfer+0xdea>
 8006742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006746:	2b3e      	cmp	r3, #62	; 0x3e
 8006748:	d818      	bhi.n	800677c <USB_EPStartXfer+0xd6c>
 800674a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800674e:	085b      	lsrs	r3, r3, #1
 8006750:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d004      	beq.n	800676a <USB_EPStartXfer+0xd5a>
 8006760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006764:	3301      	adds	r3, #1
 8006766:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800676a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800676e:	b29b      	uxth	r3, r3
 8006770:	029b      	lsls	r3, r3, #10
 8006772:	b29a      	uxth	r2, r3
 8006774:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006778:	801a      	strh	r2, [r3, #0]
 800677a:	e03e      	b.n	80067fa <USB_EPStartXfer+0xdea>
 800677c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006780:	095b      	lsrs	r3, r3, #5
 8006782:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006786:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800678a:	f003 031f 	and.w	r3, r3, #31
 800678e:	2b00      	cmp	r3, #0
 8006790:	d104      	bne.n	800679c <USB_EPStartXfer+0xd8c>
 8006792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006796:	3b01      	subs	r3, #1
 8006798:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800679c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	029b      	lsls	r3, r3, #10
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067b4:	801a      	strh	r2, [r3, #0]
 80067b6:	e020      	b.n	80067fa <USB_EPStartXfer+0xdea>
 80067b8:	463b      	mov	r3, r7
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	785b      	ldrb	r3, [r3, #1]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d11b      	bne.n	80067fa <USB_EPStartXfer+0xdea>
 80067c2:	1d3b      	adds	r3, r7, #4
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	461a      	mov	r2, r3
 80067ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067d2:	4413      	add	r3, r2
 80067d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067d8:	463b      	mov	r3, r7
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	011a      	lsls	r2, r3, #4
 80067e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067e4:	4413      	add	r3, r2
 80067e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80067ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067fa:	463b      	mov	r3, r7
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	895b      	ldrh	r3, [r3, #10]
 8006800:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006804:	463b      	mov	r3, r7
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6959      	ldr	r1, [r3, #20]
 800680a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800680e:	b29b      	uxth	r3, r3
 8006810:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006814:	1d38      	adds	r0, r7, #4
 8006816:	6800      	ldr	r0, [r0, #0]
 8006818:	f000 fd2f 	bl	800727a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800681c:	1d3b      	adds	r3, r7, #4
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	463b      	mov	r3, r7
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b29b      	uxth	r3, r3
 800682e:	f107 020a 	add.w	r2, r7, #10
 8006832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800683a:	8013      	strh	r3, [r2, #0]
 800683c:	f107 030a 	add.w	r3, r7, #10
 8006840:	f107 020a 	add.w	r2, r7, #10
 8006844:	8812      	ldrh	r2, [r2, #0]
 8006846:	f082 0210 	eor.w	r2, r2, #16
 800684a:	801a      	strh	r2, [r3, #0]
 800684c:	f107 030a 	add.w	r3, r7, #10
 8006850:	f107 020a 	add.w	r2, r7, #10
 8006854:	8812      	ldrh	r2, [r2, #0]
 8006856:	f082 0220 	eor.w	r2, r2, #32
 800685a:	801a      	strh	r2, [r3, #0]
 800685c:	1d3b      	adds	r3, r7, #4
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	463b      	mov	r3, r7
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	441a      	add	r2, r3
 800686a:	f107 030a 	add.w	r3, r7, #10
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006880:	b29b      	uxth	r3, r3
 8006882:	8013      	strh	r3, [r2, #0]
 8006884:	e3b5      	b.n	8006ff2 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006886:	463b      	mov	r3, r7
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	7b1b      	ldrb	r3, [r3, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	f040 8090 	bne.w	80069b2 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006892:	463b      	mov	r3, r7
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	699a      	ldr	r2, [r3, #24]
 8006898:	463b      	mov	r3, r7
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d90e      	bls.n	80068c0 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80068a2:	463b      	mov	r3, r7
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80068ac:	463b      	mov	r3, r7
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699a      	ldr	r2, [r3, #24]
 80068b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b6:	1ad2      	subs	r2, r2, r3
 80068b8:	463b      	mov	r3, r7
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	619a      	str	r2, [r3, #24]
 80068be:	e008      	b.n	80068d2 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80068c0:	463b      	mov	r3, r7
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80068ca:	463b      	mov	r3, r7
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2200      	movs	r2, #0
 80068d0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80068d2:	1d3b      	adds	r3, r7, #4
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068da:	1d3b      	adds	r3, r7, #4
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	461a      	mov	r2, r3
 80068e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80068ea:	4413      	add	r3, r2
 80068ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068f0:	463b      	mov	r3, r7
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	011a      	lsls	r2, r3, #4
 80068f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80068fc:	4413      	add	r3, r2
 80068fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006902:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800690a:	2b00      	cmp	r3, #0
 800690c:	d116      	bne.n	800693c <USB_EPStartXfer+0xf2c>
 800690e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	b29b      	uxth	r3, r3
 8006916:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800691a:	b29a      	uxth	r2, r3
 800691c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006920:	801a      	strh	r2, [r3, #0]
 8006922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800692e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006932:	b29a      	uxth	r2, r3
 8006934:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006938:	801a      	strh	r2, [r3, #0]
 800693a:	e32c      	b.n	8006f96 <USB_EPStartXfer+0x1586>
 800693c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006940:	2b3e      	cmp	r3, #62	; 0x3e
 8006942:	d818      	bhi.n	8006976 <USB_EPStartXfer+0xf66>
 8006944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006948:	085b      	lsrs	r3, r3, #1
 800694a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800694e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d004      	beq.n	8006964 <USB_EPStartXfer+0xf54>
 800695a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800695e:	3301      	adds	r3, #1
 8006960:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006964:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006968:	b29b      	uxth	r3, r3
 800696a:	029b      	lsls	r3, r3, #10
 800696c:	b29a      	uxth	r2, r3
 800696e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006972:	801a      	strh	r2, [r3, #0]
 8006974:	e30f      	b.n	8006f96 <USB_EPStartXfer+0x1586>
 8006976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800697a:	095b      	lsrs	r3, r3, #5
 800697c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006984:	f003 031f 	and.w	r3, r3, #31
 8006988:	2b00      	cmp	r3, #0
 800698a:	d104      	bne.n	8006996 <USB_EPStartXfer+0xf86>
 800698c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006990:	3b01      	subs	r3, #1
 8006992:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006996:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800699a:	b29b      	uxth	r3, r3
 800699c:	029b      	lsls	r3, r3, #10
 800699e:	b29b      	uxth	r3, r3
 80069a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069ae:	801a      	strh	r2, [r3, #0]
 80069b0:	e2f1      	b.n	8006f96 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80069b2:	463b      	mov	r3, r7
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	78db      	ldrb	r3, [r3, #3]
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	f040 818f 	bne.w	8006cdc <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80069be:	463b      	mov	r3, r7
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	785b      	ldrb	r3, [r3, #1]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d175      	bne.n	8006ab4 <USB_EPStartXfer+0x10a4>
 80069c8:	1d3b      	adds	r3, r7, #4
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069d0:	1d3b      	adds	r3, r7, #4
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d8:	b29b      	uxth	r3, r3
 80069da:	461a      	mov	r2, r3
 80069dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80069e0:	4413      	add	r3, r2
 80069e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069e6:	463b      	mov	r3, r7
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	011a      	lsls	r2, r3, #4
 80069ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80069f2:	4413      	add	r3, r2
 80069f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069fc:	463b      	mov	r3, r7
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d116      	bne.n	8006a34 <USB_EPStartXfer+0x1024>
 8006a06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a18:	801a      	strh	r2, [r3, #0]
 8006a1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a30:	801a      	strh	r2, [r3, #0]
 8006a32:	e065      	b.n	8006b00 <USB_EPStartXfer+0x10f0>
 8006a34:	463b      	mov	r3, r7
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	2b3e      	cmp	r3, #62	; 0x3e
 8006a3c:	d81a      	bhi.n	8006a74 <USB_EPStartXfer+0x1064>
 8006a3e:	463b      	mov	r3, r7
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	085b      	lsrs	r3, r3, #1
 8006a46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a4a:	463b      	mov	r3, r7
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d004      	beq.n	8006a62 <USB_EPStartXfer+0x1052>
 8006a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	029b      	lsls	r3, r3, #10
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a70:	801a      	strh	r2, [r3, #0]
 8006a72:	e045      	b.n	8006b00 <USB_EPStartXfer+0x10f0>
 8006a74:	463b      	mov	r3, r7
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	095b      	lsrs	r3, r3, #5
 8006a7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a80:	463b      	mov	r3, r7
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f003 031f 	and.w	r3, r3, #31
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d104      	bne.n	8006a98 <USB_EPStartXfer+0x1088>
 8006a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a92:	3b01      	subs	r3, #1
 8006a94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	029b      	lsls	r3, r3, #10
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ab0:	801a      	strh	r2, [r3, #0]
 8006ab2:	e025      	b.n	8006b00 <USB_EPStartXfer+0x10f0>
 8006ab4:	463b      	mov	r3, r7
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	785b      	ldrb	r3, [r3, #1]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d120      	bne.n	8006b00 <USB_EPStartXfer+0x10f0>
 8006abe:	1d3b      	adds	r3, r7, #4
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ac6:	1d3b      	adds	r3, r7, #4
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006adc:	463b      	mov	r3, r7
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	011a      	lsls	r2, r3, #4
 8006ae4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ae8:	4413      	add	r3, r2
 8006aea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006aee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006af2:	463b      	mov	r3, r7
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006afe:	801a      	strh	r2, [r3, #0]
 8006b00:	1d3b      	adds	r3, r7, #4
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b08:	463b      	mov	r3, r7
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	785b      	ldrb	r3, [r3, #1]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d175      	bne.n	8006bfe <USB_EPStartXfer+0x11ee>
 8006b12:	1d3b      	adds	r3, r7, #4
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b1a:	1d3b      	adds	r3, r7, #4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	461a      	mov	r2, r3
 8006b26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b30:	463b      	mov	r3, r7
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	011a      	lsls	r2, r3, #4
 8006b38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b46:	463b      	mov	r3, r7
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d116      	bne.n	8006b7e <USB_EPStartXfer+0x116e>
 8006b50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b62:	801a      	strh	r2, [r3, #0]
 8006b64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b7a:	801a      	strh	r2, [r3, #0]
 8006b7c:	e061      	b.n	8006c42 <USB_EPStartXfer+0x1232>
 8006b7e:	463b      	mov	r3, r7
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	2b3e      	cmp	r3, #62	; 0x3e
 8006b86:	d81a      	bhi.n	8006bbe <USB_EPStartXfer+0x11ae>
 8006b88:	463b      	mov	r3, r7
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	085b      	lsrs	r3, r3, #1
 8006b90:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b94:	463b      	mov	r3, r7
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d004      	beq.n	8006bac <USB_EPStartXfer+0x119c>
 8006ba2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006bac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	029b      	lsls	r3, r3, #10
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bba:	801a      	strh	r2, [r3, #0]
 8006bbc:	e041      	b.n	8006c42 <USB_EPStartXfer+0x1232>
 8006bbe:	463b      	mov	r3, r7
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	095b      	lsrs	r3, r3, #5
 8006bc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006bca:	463b      	mov	r3, r7
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f003 031f 	and.w	r3, r3, #31
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d104      	bne.n	8006be2 <USB_EPStartXfer+0x11d2>
 8006bd8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006be2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	029b      	lsls	r3, r3, #10
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bfa:	801a      	strh	r2, [r3, #0]
 8006bfc:	e021      	b.n	8006c42 <USB_EPStartXfer+0x1232>
 8006bfe:	463b      	mov	r3, r7
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	785b      	ldrb	r3, [r3, #1]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d11c      	bne.n	8006c42 <USB_EPStartXfer+0x1232>
 8006c08:	1d3b      	adds	r3, r7, #4
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	461a      	mov	r2, r3
 8006c14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c18:	4413      	add	r3, r2
 8006c1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c1e:	463b      	mov	r3, r7
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	011a      	lsls	r2, r3, #4
 8006c26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c34:	463b      	mov	r3, r7
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c40:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006c42:	463b      	mov	r3, r7
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 81a4 	beq.w	8006f96 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006c4e:	1d3b      	adds	r3, r7, #4
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	463b      	mov	r3, r7
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c62:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <USB_EPStartXfer+0x126a>
 8006c6e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10d      	bne.n	8006c96 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006c7a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f040 8187 	bne.w	8006f96 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006c88:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f040 8180 	bne.w	8006f96 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006c96:	1d3b      	adds	r3, r7, #4
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	463b      	mov	r3, r7
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006cb4:	1d3b      	adds	r3, r7, #4
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	463b      	mov	r3, r7
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	441a      	add	r2, r3
 8006cc2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	8013      	strh	r3, [r2, #0]
 8006cda:	e15c      	b.n	8006f96 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006cdc:	463b      	mov	r3, r7
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	78db      	ldrb	r3, [r3, #3]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	f040 8155 	bne.w	8006f92 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006ce8:	463b      	mov	r3, r7
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699a      	ldr	r2, [r3, #24]
 8006cee:	463b      	mov	r3, r7
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d90e      	bls.n	8006d16 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006cf8:	463b      	mov	r3, r7
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006d02:	463b      	mov	r3, r7
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	699a      	ldr	r2, [r3, #24]
 8006d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d0c:	1ad2      	subs	r2, r2, r3
 8006d0e:	463b      	mov	r3, r7
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	619a      	str	r2, [r3, #24]
 8006d14:	e008      	b.n	8006d28 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006d16:	463b      	mov	r3, r7
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006d20:	463b      	mov	r3, r7
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2200      	movs	r2, #0
 8006d26:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006d28:	463b      	mov	r3, r7
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	785b      	ldrb	r3, [r3, #1]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d16f      	bne.n	8006e12 <USB_EPStartXfer+0x1402>
 8006d32:	1d3b      	adds	r3, r7, #4
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d3a:	1d3b      	adds	r3, r7, #4
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	461a      	mov	r2, r3
 8006d46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d50:	463b      	mov	r3, r7
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	011a      	lsls	r2, r3, #4
 8006d58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d116      	bne.n	8006d9c <USB_EPStartXfer+0x138c>
 8006d6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d80:	801a      	strh	r2, [r3, #0]
 8006d82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d98:	801a      	strh	r2, [r3, #0]
 8006d9a:	e05f      	b.n	8006e5c <USB_EPStartXfer+0x144c>
 8006d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006da0:	2b3e      	cmp	r3, #62	; 0x3e
 8006da2:	d818      	bhi.n	8006dd6 <USB_EPStartXfer+0x13c6>
 8006da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006da8:	085b      	lsrs	r3, r3, #1
 8006daa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d004      	beq.n	8006dc4 <USB_EPStartXfer+0x13b4>
 8006dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	029b      	lsls	r3, r3, #10
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006dd2:	801a      	strh	r2, [r3, #0]
 8006dd4:	e042      	b.n	8006e5c <USB_EPStartXfer+0x144c>
 8006dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dda:	095b      	lsrs	r3, r3, #5
 8006ddc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de4:	f003 031f 	and.w	r3, r3, #31
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d104      	bne.n	8006df6 <USB_EPStartXfer+0x13e6>
 8006dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006df0:	3b01      	subs	r3, #1
 8006df2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	029b      	lsls	r3, r3, #10
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e0e:	801a      	strh	r2, [r3, #0]
 8006e10:	e024      	b.n	8006e5c <USB_EPStartXfer+0x144c>
 8006e12:	463b      	mov	r3, r7
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	785b      	ldrb	r3, [r3, #1]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d11f      	bne.n	8006e5c <USB_EPStartXfer+0x144c>
 8006e1c:	1d3b      	adds	r3, r7, #4
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e24:	1d3b      	adds	r3, r7, #4
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e34:	4413      	add	r3, r2
 8006e36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e3a:	463b      	mov	r3, r7
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	011a      	lsls	r2, r3, #4
 8006e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e46:	4413      	add	r3, r2
 8006e48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e5a:	801a      	strh	r2, [r3, #0]
 8006e5c:	1d3b      	adds	r3, r7, #4
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e64:	463b      	mov	r3, r7
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	785b      	ldrb	r3, [r3, #1]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d16f      	bne.n	8006f4e <USB_EPStartXfer+0x153e>
 8006e6e:	1d3b      	adds	r3, r7, #4
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e76:	1d3b      	adds	r3, r7, #4
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	461a      	mov	r2, r3
 8006e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e86:	4413      	add	r3, r2
 8006e88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e8c:	463b      	mov	r3, r7
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	011a      	lsls	r2, r3, #4
 8006e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e98:	4413      	add	r3, r2
 8006e9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d116      	bne.n	8006ed8 <USB_EPStartXfer+0x14c8>
 8006eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ebc:	801a      	strh	r2, [r3, #0]
 8006ebe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ed4:	801a      	strh	r2, [r3, #0]
 8006ed6:	e05e      	b.n	8006f96 <USB_EPStartXfer+0x1586>
 8006ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006edc:	2b3e      	cmp	r3, #62	; 0x3e
 8006ede:	d818      	bhi.n	8006f12 <USB_EPStartXfer+0x1502>
 8006ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ee4:	085b      	lsrs	r3, r3, #1
 8006ee6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d004      	beq.n	8006f00 <USB_EPStartXfer+0x14f0>
 8006ef6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006efa:	3301      	adds	r3, #1
 8006efc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	029b      	lsls	r3, r3, #10
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f0e:	801a      	strh	r2, [r3, #0]
 8006f10:	e041      	b.n	8006f96 <USB_EPStartXfer+0x1586>
 8006f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f16:	095b      	lsrs	r3, r3, #5
 8006f18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f20:	f003 031f 	and.w	r3, r3, #31
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d104      	bne.n	8006f32 <USB_EPStartXfer+0x1522>
 8006f28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	029b      	lsls	r3, r3, #10
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f4a:	801a      	strh	r2, [r3, #0]
 8006f4c:	e023      	b.n	8006f96 <USB_EPStartXfer+0x1586>
 8006f4e:	463b      	mov	r3, r7
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	785b      	ldrb	r3, [r3, #1]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d11e      	bne.n	8006f96 <USB_EPStartXfer+0x1586>
 8006f58:	1d3b      	adds	r3, r7, #4
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	461a      	mov	r2, r3
 8006f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f68:	4413      	add	r3, r2
 8006f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f6e:	463b      	mov	r3, r7
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	011a      	lsls	r2, r3, #4
 8006f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f8e:	801a      	strh	r2, [r3, #0]
 8006f90:	e001      	b.n	8006f96 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e02e      	b.n	8006ff4 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f96:	1d3b      	adds	r3, r7, #4
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	463b      	mov	r3, r7
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006fb4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006fb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fbc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006fc0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006fc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fc8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006fcc:	1d3b      	adds	r3, r7, #4
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	463b      	mov	r3, r7
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	441a      	add	r2, r3
 8006fda:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b085      	sub	sp, #20
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	785b      	ldrb	r3, [r3, #1]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d020      	beq.n	8007052 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29b      	uxth	r3, r3
 800701e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007026:	81bb      	strh	r3, [r7, #12]
 8007028:	89bb      	ldrh	r3, [r7, #12]
 800702a:	f083 0310 	eor.w	r3, r3, #16
 800702e:	81bb      	strh	r3, [r7, #12]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	441a      	add	r2, r3
 800703a:	89bb      	ldrh	r3, [r7, #12]
 800703c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800704c:	b29b      	uxth	r3, r3
 800704e:	8013      	strh	r3, [r2, #0]
 8007050:	e01f      	b.n	8007092 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	b29b      	uxth	r3, r3
 8007060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007068:	81fb      	strh	r3, [r7, #14]
 800706a:	89fb      	ldrh	r3, [r7, #14]
 800706c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007070:	81fb      	strh	r3, [r7, #14]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	441a      	add	r2, r3
 800707c:	89fb      	ldrh	r3, [r7, #14]
 800707e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800708a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800708e:	b29b      	uxth	r3, r3
 8007090:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	bc80      	pop	{r7}
 800709c:	4770      	bx	lr

0800709e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800709e:	b480      	push	{r7}
 80070a0:	b087      	sub	sp, #28
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	7b1b      	ldrb	r3, [r3, #12]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f040 809d 	bne.w	80071ec <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	785b      	ldrb	r3, [r3, #1]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d04c      	beq.n	8007154 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	823b      	strh	r3, [r7, #16]
 80070c8:	8a3b      	ldrh	r3, [r7, #16]
 80070ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d01b      	beq.n	800710a <USB_EPClearStall+0x6c>
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e8:	81fb      	strh	r3, [r7, #14]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	441a      	add	r2, r3
 80070f4:	89fb      	ldrh	r3, [r7, #14]
 80070f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007102:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007106:	b29b      	uxth	r3, r3
 8007108:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	78db      	ldrb	r3, [r3, #3]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d06c      	beq.n	80071ec <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	b29b      	uxth	r3, r3
 8007120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007128:	81bb      	strh	r3, [r7, #12]
 800712a:	89bb      	ldrh	r3, [r7, #12]
 800712c:	f083 0320 	eor.w	r3, r3, #32
 8007130:	81bb      	strh	r3, [r7, #12]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	441a      	add	r2, r3
 800713c:	89bb      	ldrh	r3, [r7, #12]
 800713e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800714a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714e:	b29b      	uxth	r3, r3
 8007150:	8013      	strh	r3, [r2, #0]
 8007152:	e04b      	b.n	80071ec <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	82fb      	strh	r3, [r7, #22]
 8007162:	8afb      	ldrh	r3, [r7, #22]
 8007164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d01b      	beq.n	80071a4 <USB_EPClearStall+0x106>
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800717e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007182:	82bb      	strh	r3, [r7, #20]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	441a      	add	r2, r3
 800718e:	8abb      	ldrh	r3, [r7, #20]
 8007190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800719c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ba:	827b      	strh	r3, [r7, #18]
 80071bc:	8a7b      	ldrh	r3, [r7, #18]
 80071be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071c2:	827b      	strh	r3, [r7, #18]
 80071c4:	8a7b      	ldrh	r3, [r7, #18]
 80071c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071ca:	827b      	strh	r3, [r7, #18]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	441a      	add	r2, r3
 80071d6:	8a7b      	ldrh	r3, [r7, #18]
 80071d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bc80      	pop	{r7}
 80071f6:	4770      	bx	lr

080071f8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	460b      	mov	r3, r1
 8007202:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d103      	bne.n	8007212 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2280      	movs	r2, #128	; 0x80
 800720e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	bc80      	pop	{r7}
 800721c:	4770      	bx	lr

0800721e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	bc80      	pop	{r7}
 8007230:	4770      	bx	lr

08007232 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	bc80      	pop	{r7}
 8007244:	4770      	bx	lr

08007246 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007246:	b480      	push	{r7}
 8007248:	b085      	sub	sp, #20
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007254:	b29b      	uxth	r3, r3
 8007256:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007258:	68fb      	ldr	r3, [r7, #12]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	bc80      	pop	{r7}
 8007262:	4770      	bx	lr

08007264 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	bc80      	pop	{r7}
 8007278:	4770      	bx	lr

0800727a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800727a:	b480      	push	{r7}
 800727c:	b08d      	sub	sp, #52	; 0x34
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	4611      	mov	r1, r2
 8007286:	461a      	mov	r2, r3
 8007288:	460b      	mov	r3, r1
 800728a:	80fb      	strh	r3, [r7, #6]
 800728c:	4613      	mov	r3, r2
 800728e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007290:	88bb      	ldrh	r3, [r7, #4]
 8007292:	3301      	adds	r3, #1
 8007294:	085b      	lsrs	r3, r3, #1
 8007296:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80072a0:	88fb      	ldrh	r3, [r7, #6]
 80072a2:	005a      	lsls	r2, r3, #1
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072ac:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072b2:	e01e      	b.n	80072f2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	3301      	adds	r3, #1
 80072be:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	021b      	lsls	r3, r3, #8
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	461a      	mov	r2, r3
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80072da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072dc:	3302      	adds	r3, #2
 80072de:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80072e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e2:	3302      	adds	r3, #2
 80072e4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	3301      	adds	r3, #1
 80072ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80072ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ee:	3b01      	subs	r3, #1
 80072f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1dd      	bne.n	80072b4 <USB_WritePMA+0x3a>
  }
}
 80072f8:	bf00      	nop
 80072fa:	bf00      	nop
 80072fc:	3734      	adds	r7, #52	; 0x34
 80072fe:	46bd      	mov	sp, r7
 8007300:	bc80      	pop	{r7}
 8007302:	4770      	bx	lr

08007304 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007304:	b480      	push	{r7}
 8007306:	b08b      	sub	sp, #44	; 0x2c
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	4611      	mov	r1, r2
 8007310:	461a      	mov	r2, r3
 8007312:	460b      	mov	r3, r1
 8007314:	80fb      	strh	r3, [r7, #6]
 8007316:	4613      	mov	r3, r2
 8007318:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800731a:	88bb      	ldrh	r3, [r7, #4]
 800731c:	085b      	lsrs	r3, r3, #1
 800731e:	b29b      	uxth	r3, r3
 8007320:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800732a:	88fb      	ldrh	r3, [r7, #6]
 800732c:	005a      	lsls	r2, r3, #1
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	4413      	add	r3, r2
 8007332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007336:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
 800733c:	e01b      	b.n	8007376 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	881b      	ldrh	r3, [r3, #0]
 8007342:	b29b      	uxth	r3, r3
 8007344:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	3302      	adds	r3, #2
 800734a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	b2da      	uxtb	r2, r3
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	3301      	adds	r3, #1
 8007358:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	0a1b      	lsrs	r3, r3, #8
 800735e:	b2da      	uxtb	r2, r3
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	3301      	adds	r3, #1
 8007368:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	3302      	adds	r3, #2
 800736e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	3b01      	subs	r3, #1
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e0      	bne.n	800733e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800737c:	88bb      	ldrh	r3, [r7, #4]
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	b29b      	uxth	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d007      	beq.n	8007398 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	b2da      	uxtb	r2, r3
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	701a      	strb	r2, [r3, #0]
  }
}
 8007398:	bf00      	nop
 800739a:	372c      	adds	r7, #44	; 0x2c
 800739c:	46bd      	mov	sp, r7
 800739e:	bc80      	pop	{r7}
 80073a0:	4770      	bx	lr
	...

080073a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80073a8:	4904      	ldr	r1, [pc, #16]	; (80073bc <MX_FATFS_Init+0x18>)
 80073aa:	4805      	ldr	r0, [pc, #20]	; (80073c0 <MX_FATFS_Init+0x1c>)
 80073ac:	f001 fbe6 	bl	8008b7c <FATFS_LinkDriver>
 80073b0:	4603      	mov	r3, r0
 80073b2:	461a      	mov	r2, r3
 80073b4:	4b03      	ldr	r3, [pc, #12]	; (80073c4 <MX_FATFS_Init+0x20>)
 80073b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80073b8:	bf00      	nop
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	20001f64 	.word	0x20001f64
 80073c0:	2000000c 	.word	0x2000000c
 80073c4:	20001f68 	.word	0x20001f68

080073c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	4603      	mov	r3, r0
 80073d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80073d2:	4b05      	ldr	r3, [pc, #20]	; (80073e8 <USER_initialize+0x20>)
 80073d4:	2201      	movs	r2, #1
 80073d6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80073d8:	4b03      	ldr	r3, [pc, #12]	; (80073e8 <USER_initialize+0x20>)
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80073de:	4618      	mov	r0, r3
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bc80      	pop	{r7}
 80073e6:	4770      	bx	lr
 80073e8:	20000009 	.word	0x20000009

080073ec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	4603      	mov	r3, r0
 80073f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80073f6:	4b05      	ldr	r3, [pc, #20]	; (800740c <USER_status+0x20>)
 80073f8:	2201      	movs	r2, #1
 80073fa:	701a      	strb	r2, [r3, #0]
    return Stat;
 80073fc:	4b03      	ldr	r3, [pc, #12]	; (800740c <USER_status+0x20>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007402:	4618      	mov	r0, r3
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	bc80      	pop	{r7}
 800740a:	4770      	bx	lr
 800740c:	20000009 	.word	0x20000009

08007410 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	607a      	str	r2, [r7, #4]
 800741a:	603b      	str	r3, [r7, #0]
 800741c:	4603      	mov	r3, r0
 800741e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8007420:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	bc80      	pop	{r7}
 800742a:	4770      	bx	lr

0800742c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	60b9      	str	r1, [r7, #8]
 8007434:	607a      	str	r2, [r7, #4]
 8007436:	603b      	str	r3, [r7, #0]
 8007438:	4603      	mov	r3, r0
 800743a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800743c:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	bc80      	pop	{r7}
 8007446:	4770      	bx	lr

08007448 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	603a      	str	r2, [r7, #0]
 8007452:	71fb      	strb	r3, [r7, #7]
 8007454:	460b      	mov	r3, r1
 8007456:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	73fb      	strb	r3, [r7, #15]
    return res;
 800745c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	bc80      	pop	{r7}
 8007466:	4770      	bx	lr

08007468 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007474:	2300      	movs	r3, #0
 8007476:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	7c1b      	ldrb	r3, [r3, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d115      	bne.n	80074ac <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007484:	2202      	movs	r2, #2
 8007486:	2181      	movs	r1, #129	; 0x81
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f004 fb92 	bl	800bbb2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007498:	2202      	movs	r2, #2
 800749a:	2101      	movs	r1, #1
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f004 fb88 	bl	800bbb2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80074aa:	e012      	b.n	80074d2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80074ac:	2340      	movs	r3, #64	; 0x40
 80074ae:	2202      	movs	r2, #2
 80074b0:	2181      	movs	r1, #129	; 0x81
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f004 fb7d 	bl	800bbb2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80074be:	2340      	movs	r3, #64	; 0x40
 80074c0:	2202      	movs	r2, #2
 80074c2:	2101      	movs	r1, #1
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f004 fb74 	bl	800bbb2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80074d2:	2308      	movs	r3, #8
 80074d4:	2203      	movs	r2, #3
 80074d6:	2182      	movs	r1, #130	; 0x82
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f004 fb6a 	bl	800bbb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80074e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80074e8:	f004 fc8a 	bl	800be00 <USBD_static_malloc>
 80074ec:	4602      	mov	r2, r0
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d102      	bne.n	8007504 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80074fe:	2301      	movs	r3, #1
 8007500:	73fb      	strb	r3, [r7, #15]
 8007502:	e026      	b.n	8007552 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2200      	movs	r2, #0
 800751a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2200      	movs	r2, #0
 8007522:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	7c1b      	ldrb	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d109      	bne.n	8007542 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007538:	2101      	movs	r1, #1
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f004 fc2a 	bl	800bd94 <USBD_LL_PrepareReceive>
 8007540:	e007      	b.n	8007552 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007548:	2340      	movs	r3, #64	; 0x40
 800754a:	2101      	movs	r1, #1
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f004 fc21 	bl	800bd94 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007552:	7bfb      	ldrb	r3, [r7, #15]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800756c:	2181      	movs	r1, #129	; 0x81
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f004 fb45 	bl	800bbfe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800757a:	2101      	movs	r1, #1
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f004 fb3e 	bl	800bbfe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800758a:	2182      	movs	r1, #130	; 0x82
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f004 fb36 	bl	800bbfe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00e      	beq.n	80075c0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b2:	4618      	mov	r0, r3
 80075b4:	f004 fc30 	bl	800be18 <USBD_static_free>
    pdev->pClassData = NULL;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b086      	sub	sp, #24
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075da:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d039      	beq.n	8007668 <USBD_CDC_Setup+0x9e>
 80075f4:	2b20      	cmp	r3, #32
 80075f6:	d17f      	bne.n	80076f8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	88db      	ldrh	r3, [r3, #6]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d029      	beq.n	8007654 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	b25b      	sxtb	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	da11      	bge.n	800762e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007616:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	88d2      	ldrh	r2, [r2, #6]
 800761c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800761e:	6939      	ldr	r1, [r7, #16]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	88db      	ldrh	r3, [r3, #6]
 8007624:	461a      	mov	r2, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 f9d9 	bl	80089de <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800762c:	e06b      	b.n	8007706 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	785a      	ldrb	r2, [r3, #1]
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	88db      	ldrh	r3, [r3, #6]
 800763c:	b2da      	uxtb	r2, r3
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007644:	6939      	ldr	r1, [r7, #16]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	88db      	ldrh	r3, [r3, #6]
 800764a:	461a      	mov	r2, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 f9f4 	bl	8008a3a <USBD_CtlPrepareRx>
      break;
 8007652:	e058      	b.n	8007706 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	7850      	ldrb	r0, [r2, #1]
 8007660:	2200      	movs	r2, #0
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	4798      	blx	r3
      break;
 8007666:	e04e      	b.n	8007706 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	785b      	ldrb	r3, [r3, #1]
 800766c:	2b0b      	cmp	r3, #11
 800766e:	d02e      	beq.n	80076ce <USBD_CDC_Setup+0x104>
 8007670:	2b0b      	cmp	r3, #11
 8007672:	dc38      	bgt.n	80076e6 <USBD_CDC_Setup+0x11c>
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <USBD_CDC_Setup+0xb4>
 8007678:	2b0a      	cmp	r3, #10
 800767a:	d014      	beq.n	80076a6 <USBD_CDC_Setup+0xdc>
 800767c:	e033      	b.n	80076e6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007684:	2b03      	cmp	r3, #3
 8007686:	d107      	bne.n	8007698 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007688:	f107 030c 	add.w	r3, r7, #12
 800768c:	2202      	movs	r2, #2
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f001 f9a4 	bl	80089de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007696:	e02e      	b.n	80076f6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f001 f935 	bl	800890a <USBD_CtlError>
            ret = USBD_FAIL;
 80076a0:	2302      	movs	r3, #2
 80076a2:	75fb      	strb	r3, [r7, #23]
          break;
 80076a4:	e027      	b.n	80076f6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d107      	bne.n	80076c0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80076b0:	f107 030f 	add.w	r3, r7, #15
 80076b4:	2201      	movs	r2, #1
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f001 f990 	bl	80089de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076be:	e01a      	b.n	80076f6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f001 f921 	bl	800890a <USBD_CtlError>
            ret = USBD_FAIL;
 80076c8:	2302      	movs	r3, #2
 80076ca:	75fb      	strb	r3, [r7, #23]
          break;
 80076cc:	e013      	b.n	80076f6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d00d      	beq.n	80076f4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f001 f915 	bl	800890a <USBD_CtlError>
            ret = USBD_FAIL;
 80076e0:	2302      	movs	r3, #2
 80076e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80076e4:	e006      	b.n	80076f4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f001 f90e 	bl	800890a <USBD_CtlError>
          ret = USBD_FAIL;
 80076ee:	2302      	movs	r3, #2
 80076f0:	75fb      	strb	r3, [r7, #23]
          break;
 80076f2:	e000      	b.n	80076f6 <USBD_CDC_Setup+0x12c>
          break;
 80076f4:	bf00      	nop
      }
      break;
 80076f6:	e006      	b.n	8007706 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 f905 	bl	800890a <USBD_CtlError>
      ret = USBD_FAIL;
 8007700:	2302      	movs	r3, #2
 8007702:	75fb      	strb	r3, [r7, #23]
      break;
 8007704:	bf00      	nop
  }

  return ret;
 8007706:	7dfb      	ldrb	r3, [r7, #23]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007722:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800772a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d03a      	beq.n	80077ac <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007736:	78fa      	ldrb	r2, [r7, #3]
 8007738:	6879      	ldr	r1, [r7, #4]
 800773a:	4613      	mov	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	440b      	add	r3, r1
 8007744:	331c      	adds	r3, #28
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d029      	beq.n	80077a0 <USBD_CDC_DataIn+0x90>
 800774c:	78fa      	ldrb	r2, [r7, #3]
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	4613      	mov	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	440b      	add	r3, r1
 800775a:	331c      	adds	r3, #28
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	78f9      	ldrb	r1, [r7, #3]
 8007760:	68b8      	ldr	r0, [r7, #8]
 8007762:	460b      	mov	r3, r1
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	440b      	add	r3, r1
 8007768:	00db      	lsls	r3, r3, #3
 800776a:	4403      	add	r3, r0
 800776c:	3338      	adds	r3, #56	; 0x38
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	fbb2 f1f3 	udiv	r1, r2, r3
 8007774:	fb03 f301 	mul.w	r3, r3, r1
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d110      	bne.n	80077a0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800777e:	78fa      	ldrb	r2, [r7, #3]
 8007780:	6879      	ldr	r1, [r7, #4]
 8007782:	4613      	mov	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	440b      	add	r3, r1
 800778c:	331c      	adds	r3, #28
 800778e:	2200      	movs	r2, #0
 8007790:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007792:	78f9      	ldrb	r1, [r7, #3]
 8007794:	2300      	movs	r3, #0
 8007796:	2200      	movs	r2, #0
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f004 fad8 	bl	800bd4e <USBD_LL_Transmit>
 800779e:	e003      	b.n	80077a8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	e000      	b.n	80077ae <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80077ac:	2302      	movs	r3, #2
  }
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	460b      	mov	r3, r1
 80077c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077ca:	78fb      	ldrb	r3, [r7, #3]
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f004 fb03 	bl	800bdda <USBD_LL_GetRxDataSize>
 80077d4:	4602      	mov	r2, r0
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00d      	beq.n	8007802 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80077fa:	4611      	mov	r1, r2
 80077fc:	4798      	blx	r3

    return USBD_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	e000      	b.n	8007804 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007802:	2302      	movs	r3, #2
  }
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800781a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007822:	2b00      	cmp	r3, #0
 8007824:	d015      	beq.n	8007852 <USBD_CDC_EP0_RxReady+0x46>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800782c:	2bff      	cmp	r3, #255	; 0xff
 800782e:	d010      	beq.n	8007852 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800783e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007846:	b292      	uxth	r2, r2
 8007848:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	22ff      	movs	r2, #255	; 0xff
 800784e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2243      	movs	r2, #67	; 0x43
 8007868:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800786a:	4b03      	ldr	r3, [pc, #12]	; (8007878 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800786c:	4618      	mov	r0, r3
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	bc80      	pop	{r7}
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	200000a8 	.word	0x200000a8

0800787c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2243      	movs	r2, #67	; 0x43
 8007888:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800788a:	4b03      	ldr	r3, [pc, #12]	; (8007898 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800788c:	4618      	mov	r0, r3
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	bc80      	pop	{r7}
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	20000064 	.word	0x20000064

0800789c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2243      	movs	r2, #67	; 0x43
 80078a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80078aa:	4b03      	ldr	r3, [pc, #12]	; (80078b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bc80      	pop	{r7}
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	200000ec 	.word	0x200000ec

080078bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	220a      	movs	r2, #10
 80078c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80078ca:	4b03      	ldr	r3, [pc, #12]	; (80078d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bc80      	pop	{r7}
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	20000020 	.word	0x20000020

080078dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80078e6:	2302      	movs	r3, #2
 80078e8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d005      	beq.n	80078fc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	bc80      	pop	{r7}
 8007906:	4770      	bx	lr

08007908 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	4613      	mov	r3, r2
 8007914:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007926:	88fa      	ldrh	r2, [r7, #6]
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	371c      	adds	r7, #28
 8007934:	46bd      	mov	sp, r7
 8007936:	bc80      	pop	{r7}
 8007938:	4770      	bx	lr

0800793a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800793a:	b480      	push	{r7}
 800793c:	b085      	sub	sp, #20
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3714      	adds	r7, #20
 800795a:	46bd      	mov	sp, r7
 800795c:	bc80      	pop	{r7}
 800795e:	4770      	bx	lr

08007960 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007976:	2b00      	cmp	r3, #0
 8007978:	d017      	beq.n	80079aa <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	7c1b      	ldrb	r3, [r3, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d109      	bne.n	8007996 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800798c:	2101      	movs	r1, #1
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f004 fa00 	bl	800bd94 <USBD_LL_PrepareReceive>
 8007994:	e007      	b.n	80079a6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800799c:	2340      	movs	r3, #64	; 0x40
 800799e:	2101      	movs	r1, #1
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f004 f9f7 	bl	800bd94 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	e000      	b.n	80079ac <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80079aa:	2302      	movs	r3, #2
  }
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	4613      	mov	r3, r2
 80079c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80079c8:	2302      	movs	r3, #2
 80079ca:	e01a      	b.n	8007a02 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	79fa      	ldrb	r2, [r7, #7]
 80079f8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f004 f864 	bl	800bac8 <USBD_LL_Init>

  return USBD_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d006      	beq.n	8007a2c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	683a      	ldr	r2, [r7, #0]
 8007a22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]
 8007a2a:	e001      	b.n	8007a30 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bc80      	pop	{r7}
 8007a3a:	4770      	bx	lr

08007a3c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f004 f899 	bl	800bb7c <USBD_LL_Start>

  return USBD_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bc80      	pop	{r7}
 8007a66:	4770      	bx	lr

08007a68 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a74:	2302      	movs	r3, #2
 8007a76:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00c      	beq.n	8007a9c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	78fa      	ldrb	r2, [r7, #3]
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	4798      	blx	r3
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	78fa      	ldrb	r2, [r7, #3]
 8007abc:	4611      	mov	r1, r2
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	4798      	blx	r3

  return USBD_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 fed7 	bl	8008892 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007af2:	461a      	mov	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b00:	f003 031f 	and.w	r3, r3, #31
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d016      	beq.n	8007b36 <USBD_LL_SetupStage+0x6a>
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d81c      	bhi.n	8007b46 <USBD_LL_SetupStage+0x7a>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <USBD_LL_SetupStage+0x4a>
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d008      	beq.n	8007b26 <USBD_LL_SetupStage+0x5a>
 8007b14:	e017      	b.n	8007b46 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f9ca 	bl	8007eb8 <USBD_StdDevReq>
      break;
 8007b24:	e01a      	b.n	8007b5c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fa2c 	bl	8007f8c <USBD_StdItfReq>
      break;
 8007b34:	e012      	b.n	8007b5c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fa6c 	bl	800801c <USBD_StdEPReq>
      break;
 8007b44:	e00a      	b.n	8007b5c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f004 f871 	bl	800bc3c <USBD_LL_StallEP>
      break;
 8007b5a:	bf00      	nop
  }

  return USBD_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b086      	sub	sp, #24
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	60f8      	str	r0, [r7, #12]
 8007b6e:	460b      	mov	r3, r1
 8007b70:	607a      	str	r2, [r7, #4]
 8007b72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b74:	7afb      	ldrb	r3, [r7, #11]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d14b      	bne.n	8007c12 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b80:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b88:	2b03      	cmp	r3, #3
 8007b8a:	d134      	bne.n	8007bf6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	68da      	ldr	r2, [r3, #12]
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d919      	bls.n	8007bcc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	1ad2      	subs	r2, r2, r3
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d203      	bcs.n	8007bba <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	e002      	b.n	8007bc0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	6879      	ldr	r1, [r7, #4]
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 ff56 	bl	8008a76 <USBD_CtlContinueRx>
 8007bca:	e038      	b.n	8007c3e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00a      	beq.n	8007bee <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d105      	bne.n	8007bee <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 ff53 	bl	8008a9a <USBD_CtlSendStatus>
 8007bf4:	e023      	b.n	8007c3e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bfc:	2b05      	cmp	r3, #5
 8007bfe:	d11e      	bne.n	8007c3e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007c08:	2100      	movs	r1, #0
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f004 f816 	bl	800bc3c <USBD_LL_StallEP>
 8007c10:	e015      	b.n	8007c3e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00d      	beq.n	8007c3a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c24:	2b03      	cmp	r3, #3
 8007c26:	d108      	bne.n	8007c3a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	7afa      	ldrb	r2, [r7, #11]
 8007c32:	4611      	mov	r1, r2
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	4798      	blx	r3
 8007c38:	e001      	b.n	8007c3e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	e000      	b.n	8007c40 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	460b      	mov	r3, r1
 8007c52:	607a      	str	r2, [r7, #4]
 8007c54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c56:	7afb      	ldrb	r3, [r7, #11]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d17f      	bne.n	8007d5c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3314      	adds	r3, #20
 8007c60:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d15c      	bne.n	8007d26 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	68da      	ldr	r2, [r3, #12]
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d915      	bls.n	8007ca4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	68da      	ldr	r2, [r3, #12]
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	1ad2      	subs	r2, r2, r3
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 fec0 	bl	8008a16 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c96:	2300      	movs	r3, #0
 8007c98:	2200      	movs	r2, #0
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f004 f879 	bl	800bd94 <USBD_LL_PrepareReceive>
 8007ca2:	e04e      	b.n	8007d42 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	6912      	ldr	r2, [r2, #16]
 8007cac:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cb0:	fb02 f201 	mul.w	r2, r2, r1
 8007cb4:	1a9b      	subs	r3, r3, r2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d11c      	bne.n	8007cf4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	689a      	ldr	r2, [r3, #8]
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d316      	bcc.n	8007cf4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	689a      	ldr	r2, [r3, #8]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d20f      	bcs.n	8007cf4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 fe9c 	bl	8008a16 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2100      	movs	r1, #0
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f004 f851 	bl	800bd94 <USBD_LL_PrepareReceive>
 8007cf2:	e026      	b.n	8007d42 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00a      	beq.n	8007d16 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d105      	bne.n	8007d16 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007d16:	2180      	movs	r1, #128	; 0x80
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f003 ff8f 	bl	800bc3c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f000 fece 	bl	8008ac0 <USBD_CtlReceiveStatus>
 8007d24:	e00d      	b.n	8007d42 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d004      	beq.n	8007d3a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d103      	bne.n	8007d42 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007d3a:	2180      	movs	r1, #128	; 0x80
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f003 ff7d 	bl	800bc3c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d11d      	bne.n	8007d88 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f7ff fe81 	bl	8007a54 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007d5a:	e015      	b.n	8007d88 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00d      	beq.n	8007d84 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d108      	bne.n	8007d84 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	7afa      	ldrb	r2, [r7, #11]
 8007d7c:	4611      	mov	r1, r2
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	4798      	blx	r3
 8007d82:	e001      	b.n	8007d88 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d84:	2302      	movs	r3, #2
 8007d86:	e000      	b.n	8007d8a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3718      	adds	r7, #24
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d9a:	2340      	movs	r3, #64	; 0x40
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2100      	movs	r1, #0
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f003 ff06 	bl	800bbb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2240      	movs	r2, #64	; 0x40
 8007db2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007db6:	2340      	movs	r3, #64	; 0x40
 8007db8:	2200      	movs	r2, #0
 8007dba:	2180      	movs	r1, #128	; 0x80
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f003 fef8 	bl	800bbb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2240      	movs	r2, #64	; 0x40
 8007dcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d009      	beq.n	8007e0a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	6852      	ldr	r2, [r2, #4]
 8007e02:	b2d2      	uxtb	r2, r2
 8007e04:	4611      	mov	r1, r2
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	4798      	blx	r3
  }

  return USBD_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	78fa      	ldrb	r2, [r7, #3]
 8007e24:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bc80      	pop	{r7}
 8007e30:	4770      	bx	lr

08007e32 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2204      	movs	r2, #4
 8007e4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bc80      	pop	{r7}
 8007e58:	4770      	bx	lr

08007e5a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e68:	2b04      	cmp	r3, #4
 8007e6a:	d105      	bne.n	8007e78 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bc80      	pop	{r7}
 8007e82:	4770      	bx	lr

08007e84 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d10b      	bne.n	8007eae <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d005      	beq.n	8007eae <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ece:	2b40      	cmp	r3, #64	; 0x40
 8007ed0:	d005      	beq.n	8007ede <USBD_StdDevReq+0x26>
 8007ed2:	2b40      	cmp	r3, #64	; 0x40
 8007ed4:	d84f      	bhi.n	8007f76 <USBD_StdDevReq+0xbe>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d009      	beq.n	8007eee <USBD_StdDevReq+0x36>
 8007eda:	2b20      	cmp	r3, #32
 8007edc:	d14b      	bne.n	8007f76 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	4798      	blx	r3
      break;
 8007eec:	e048      	b.n	8007f80 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	785b      	ldrb	r3, [r3, #1]
 8007ef2:	2b09      	cmp	r3, #9
 8007ef4:	d839      	bhi.n	8007f6a <USBD_StdDevReq+0xb2>
 8007ef6:	a201      	add	r2, pc, #4	; (adr r2, 8007efc <USBD_StdDevReq+0x44>)
 8007ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efc:	08007f4d 	.word	0x08007f4d
 8007f00:	08007f61 	.word	0x08007f61
 8007f04:	08007f6b 	.word	0x08007f6b
 8007f08:	08007f57 	.word	0x08007f57
 8007f0c:	08007f6b 	.word	0x08007f6b
 8007f10:	08007f2f 	.word	0x08007f2f
 8007f14:	08007f25 	.word	0x08007f25
 8007f18:	08007f6b 	.word	0x08007f6b
 8007f1c:	08007f43 	.word	0x08007f43
 8007f20:	08007f39 	.word	0x08007f39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f9dc 	bl	80082e4 <USBD_GetDescriptor>
          break;
 8007f2c:	e022      	b.n	8007f74 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fb3f 	bl	80085b4 <USBD_SetAddress>
          break;
 8007f36:	e01d      	b.n	8007f74 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fb7e 	bl	800863c <USBD_SetConfig>
          break;
 8007f40:	e018      	b.n	8007f74 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fc07 	bl	8008758 <USBD_GetConfig>
          break;
 8007f4a:	e013      	b.n	8007f74 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fc37 	bl	80087c2 <USBD_GetStatus>
          break;
 8007f54:	e00e      	b.n	8007f74 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fc65 	bl	8008828 <USBD_SetFeature>
          break;
 8007f5e:	e009      	b.n	8007f74 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fc74 	bl	8008850 <USBD_ClrFeature>
          break;
 8007f68:	e004      	b.n	8007f74 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fccc 	bl	800890a <USBD_CtlError>
          break;
 8007f72:	bf00      	nop
      }
      break;
 8007f74:	e004      	b.n	8007f80 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fcc6 	bl	800890a <USBD_CtlError>
      break;
 8007f7e:	bf00      	nop
  }

  return ret;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop

08007f8c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fa2:	2b40      	cmp	r3, #64	; 0x40
 8007fa4:	d005      	beq.n	8007fb2 <USBD_StdItfReq+0x26>
 8007fa6:	2b40      	cmp	r3, #64	; 0x40
 8007fa8:	d82e      	bhi.n	8008008 <USBD_StdItfReq+0x7c>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <USBD_StdItfReq+0x26>
 8007fae:	2b20      	cmp	r3, #32
 8007fb0:	d12a      	bne.n	8008008 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d81d      	bhi.n	8007ffa <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	889b      	ldrh	r3, [r3, #4]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d813      	bhi.n	8007ff0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	4798      	blx	r3
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	88db      	ldrh	r3, [r3, #6]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d110      	bne.n	8008004 <USBD_StdItfReq+0x78>
 8007fe2:	7bfb      	ldrb	r3, [r7, #15]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10d      	bne.n	8008004 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fd56 	bl	8008a9a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007fee:	e009      	b.n	8008004 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fc89 	bl	800890a <USBD_CtlError>
          break;
 8007ff8:	e004      	b.n	8008004 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fc84 	bl	800890a <USBD_CtlError>
          break;
 8008002:	e000      	b.n	8008006 <USBD_StdItfReq+0x7a>
          break;
 8008004:	bf00      	nop
      }
      break;
 8008006:	e004      	b.n	8008012 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fc7d 	bl	800890a <USBD_CtlError>
      break;
 8008010:	bf00      	nop
  }

  return USBD_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	889b      	ldrh	r3, [r3, #4]
 800802e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008038:	2b40      	cmp	r3, #64	; 0x40
 800803a:	d007      	beq.n	800804c <USBD_StdEPReq+0x30>
 800803c:	2b40      	cmp	r3, #64	; 0x40
 800803e:	f200 8146 	bhi.w	80082ce <USBD_StdEPReq+0x2b2>
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <USBD_StdEPReq+0x40>
 8008046:	2b20      	cmp	r3, #32
 8008048:	f040 8141 	bne.w	80082ce <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	4798      	blx	r3
      break;
 800805a:	e13d      	b.n	80082d8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008064:	2b20      	cmp	r3, #32
 8008066:	d10a      	bne.n	800807e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	4798      	blx	r3
 8008076:	4603      	mov	r3, r0
 8008078:	73fb      	strb	r3, [r7, #15]

        return ret;
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	e12d      	b.n	80082da <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	785b      	ldrb	r3, [r3, #1]
 8008082:	2b03      	cmp	r3, #3
 8008084:	d007      	beq.n	8008096 <USBD_StdEPReq+0x7a>
 8008086:	2b03      	cmp	r3, #3
 8008088:	f300 811b 	bgt.w	80082c2 <USBD_StdEPReq+0x2a6>
 800808c:	2b00      	cmp	r3, #0
 800808e:	d072      	beq.n	8008176 <USBD_StdEPReq+0x15a>
 8008090:	2b01      	cmp	r3, #1
 8008092:	d03a      	beq.n	800810a <USBD_StdEPReq+0xee>
 8008094:	e115      	b.n	80082c2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800809c:	2b02      	cmp	r3, #2
 800809e:	d002      	beq.n	80080a6 <USBD_StdEPReq+0x8a>
 80080a0:	2b03      	cmp	r3, #3
 80080a2:	d015      	beq.n	80080d0 <USBD_StdEPReq+0xb4>
 80080a4:	e02b      	b.n	80080fe <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00c      	beq.n	80080c6 <USBD_StdEPReq+0xaa>
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	2b80      	cmp	r3, #128	; 0x80
 80080b0:	d009      	beq.n	80080c6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f003 fdc0 	bl	800bc3c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80080bc:	2180      	movs	r1, #128	; 0x80
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f003 fdbc 	bl	800bc3c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080c4:	e020      	b.n	8008108 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80080c6:	6839      	ldr	r1, [r7, #0]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fc1e 	bl	800890a <USBD_CtlError>
              break;
 80080ce:	e01b      	b.n	8008108 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	885b      	ldrh	r3, [r3, #2]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10e      	bne.n	80080f6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80080d8:	7bbb      	ldrb	r3, [r7, #14]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00b      	beq.n	80080f6 <USBD_StdEPReq+0xda>
 80080de:	7bbb      	ldrb	r3, [r7, #14]
 80080e0:	2b80      	cmp	r3, #128	; 0x80
 80080e2:	d008      	beq.n	80080f6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	88db      	ldrh	r3, [r3, #6]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d104      	bne.n	80080f6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f003 fda3 	bl	800bc3c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fccf 	bl	8008a9a <USBD_CtlSendStatus>

              break;
 80080fc:	e004      	b.n	8008108 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fc02 	bl	800890a <USBD_CtlError>
              break;
 8008106:	bf00      	nop
          }
          break;
 8008108:	e0e0      	b.n	80082cc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008110:	2b02      	cmp	r3, #2
 8008112:	d002      	beq.n	800811a <USBD_StdEPReq+0xfe>
 8008114:	2b03      	cmp	r3, #3
 8008116:	d015      	beq.n	8008144 <USBD_StdEPReq+0x128>
 8008118:	e026      	b.n	8008168 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00c      	beq.n	800813a <USBD_StdEPReq+0x11e>
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	2b80      	cmp	r3, #128	; 0x80
 8008124:	d009      	beq.n	800813a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f003 fd86 	bl	800bc3c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008130:	2180      	movs	r1, #128	; 0x80
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f003 fd82 	bl	800bc3c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008138:	e01c      	b.n	8008174 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fbe4 	bl	800890a <USBD_CtlError>
              break;
 8008142:	e017      	b.n	8008174 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	885b      	ldrh	r3, [r3, #2]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d112      	bne.n	8008172 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800814c:	7bbb      	ldrb	r3, [r7, #14]
 800814e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008152:	2b00      	cmp	r3, #0
 8008154:	d004      	beq.n	8008160 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008156:	7bbb      	ldrb	r3, [r7, #14]
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f003 fd8d 	bl	800bc7a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fc9a 	bl	8008a9a <USBD_CtlSendStatus>
              }
              break;
 8008166:	e004      	b.n	8008172 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fbcd 	bl	800890a <USBD_CtlError>
              break;
 8008170:	e000      	b.n	8008174 <USBD_StdEPReq+0x158>
              break;
 8008172:	bf00      	nop
          }
          break;
 8008174:	e0aa      	b.n	80082cc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800817c:	2b02      	cmp	r3, #2
 800817e:	d002      	beq.n	8008186 <USBD_StdEPReq+0x16a>
 8008180:	2b03      	cmp	r3, #3
 8008182:	d032      	beq.n	80081ea <USBD_StdEPReq+0x1ce>
 8008184:	e097      	b.n	80082b6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d007      	beq.n	800819c <USBD_StdEPReq+0x180>
 800818c:	7bbb      	ldrb	r3, [r7, #14]
 800818e:	2b80      	cmp	r3, #128	; 0x80
 8008190:	d004      	beq.n	800819c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fbb8 	bl	800890a <USBD_CtlError>
                break;
 800819a:	e091      	b.n	80082c0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800819c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	da0b      	bge.n	80081bc <USBD_StdEPReq+0x1a0>
 80081a4:	7bbb      	ldrb	r3, [r7, #14]
 80081a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081aa:	4613      	mov	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4413      	add	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	3310      	adds	r3, #16
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	4413      	add	r3, r2
 80081b8:	3304      	adds	r3, #4
 80081ba:	e00b      	b.n	80081d4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081c2:	4613      	mov	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	4413      	add	r3, r2
 80081d2:	3304      	adds	r3, #4
 80081d4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	2202      	movs	r2, #2
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fbfb 	bl	80089de <USBD_CtlSendData>
              break;
 80081e8:	e06a      	b.n	80082c0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	da11      	bge.n	8008216 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
 80081f4:	f003 020f 	and.w	r2, r3, #15
 80081f8:	6879      	ldr	r1, [r7, #4]
 80081fa:	4613      	mov	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	440b      	add	r3, r1
 8008204:	3318      	adds	r3, #24
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d117      	bne.n	800823c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fb7b 	bl	800890a <USBD_CtlError>
                  break;
 8008214:	e054      	b.n	80082c0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008216:	7bbb      	ldrb	r3, [r7, #14]
 8008218:	f003 020f 	and.w	r2, r3, #15
 800821c:	6879      	ldr	r1, [r7, #4]
 800821e:	4613      	mov	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	440b      	add	r3, r1
 8008228:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d104      	bne.n	800823c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fb68 	bl	800890a <USBD_CtlError>
                  break;
 800823a:	e041      	b.n	80082c0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800823c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008240:	2b00      	cmp	r3, #0
 8008242:	da0b      	bge.n	800825c <USBD_StdEPReq+0x240>
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800824a:	4613      	mov	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	3310      	adds	r3, #16
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	4413      	add	r3, r2
 8008258:	3304      	adds	r3, #4
 800825a:	e00b      	b.n	8008274 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800825c:	7bbb      	ldrb	r3, [r7, #14]
 800825e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008262:	4613      	mov	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	4413      	add	r3, r2
 8008272:	3304      	adds	r3, #4
 8008274:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008276:	7bbb      	ldrb	r3, [r7, #14]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d002      	beq.n	8008282 <USBD_StdEPReq+0x266>
 800827c:	7bbb      	ldrb	r3, [r7, #14]
 800827e:	2b80      	cmp	r3, #128	; 0x80
 8008280:	d103      	bne.n	800828a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2200      	movs	r2, #0
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	e00e      	b.n	80082a8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800828a:	7bbb      	ldrb	r3, [r7, #14]
 800828c:	4619      	mov	r1, r3
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f003 fd12 	bl	800bcb8 <USBD_LL_IsStallEP>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	2201      	movs	r2, #1
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	e002      	b.n	80082a8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	2200      	movs	r2, #0
 80082a6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	2202      	movs	r2, #2
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fb95 	bl	80089de <USBD_CtlSendData>
              break;
 80082b4:	e004      	b.n	80082c0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fb26 	bl	800890a <USBD_CtlError>
              break;
 80082be:	bf00      	nop
          }
          break;
 80082c0:	e004      	b.n	80082cc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fb20 	bl	800890a <USBD_CtlError>
          break;
 80082ca:	bf00      	nop
      }
      break;
 80082cc:	e004      	b.n	80082d8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fb1a 	bl	800890a <USBD_CtlError>
      break;
 80082d6:	bf00      	nop
  }

  return ret;
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
	...

080082e4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082ee:	2300      	movs	r3, #0
 80082f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082f2:	2300      	movs	r3, #0
 80082f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	885b      	ldrh	r3, [r3, #2]
 80082fe:	0a1b      	lsrs	r3, r3, #8
 8008300:	b29b      	uxth	r3, r3
 8008302:	3b01      	subs	r3, #1
 8008304:	2b06      	cmp	r3, #6
 8008306:	f200 8128 	bhi.w	800855a <USBD_GetDescriptor+0x276>
 800830a:	a201      	add	r2, pc, #4	; (adr r2, 8008310 <USBD_GetDescriptor+0x2c>)
 800830c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008310:	0800832d 	.word	0x0800832d
 8008314:	08008345 	.word	0x08008345
 8008318:	08008385 	.word	0x08008385
 800831c:	0800855b 	.word	0x0800855b
 8008320:	0800855b 	.word	0x0800855b
 8008324:	080084fb 	.word	0x080084fb
 8008328:	08008527 	.word	0x08008527
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	7c12      	ldrb	r2, [r2, #16]
 8008338:	f107 0108 	add.w	r1, r7, #8
 800833c:	4610      	mov	r0, r2
 800833e:	4798      	blx	r3
 8008340:	60f8      	str	r0, [r7, #12]
      break;
 8008342:	e112      	b.n	800856a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	7c1b      	ldrb	r3, [r3, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10d      	bne.n	8008368 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008354:	f107 0208 	add.w	r2, r7, #8
 8008358:	4610      	mov	r0, r2
 800835a:	4798      	blx	r3
 800835c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	3301      	adds	r3, #1
 8008362:	2202      	movs	r2, #2
 8008364:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008366:	e100      	b.n	800856a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800836e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008370:	f107 0208 	add.w	r2, r7, #8
 8008374:	4610      	mov	r0, r2
 8008376:	4798      	blx	r3
 8008378:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3301      	adds	r3, #1
 800837e:	2202      	movs	r2, #2
 8008380:	701a      	strb	r2, [r3, #0]
      break;
 8008382:	e0f2      	b.n	800856a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	885b      	ldrh	r3, [r3, #2]
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b05      	cmp	r3, #5
 800838c:	f200 80ac 	bhi.w	80084e8 <USBD_GetDescriptor+0x204>
 8008390:	a201      	add	r2, pc, #4	; (adr r2, 8008398 <USBD_GetDescriptor+0xb4>)
 8008392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008396:	bf00      	nop
 8008398:	080083b1 	.word	0x080083b1
 800839c:	080083e5 	.word	0x080083e5
 80083a0:	08008419 	.word	0x08008419
 80083a4:	0800844d 	.word	0x0800844d
 80083a8:	08008481 	.word	0x08008481
 80083ac:	080084b5 	.word	0x080084b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00b      	beq.n	80083d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	7c12      	ldrb	r2, [r2, #16]
 80083c8:	f107 0108 	add.w	r1, r7, #8
 80083cc:	4610      	mov	r0, r2
 80083ce:	4798      	blx	r3
 80083d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083d2:	e091      	b.n	80084f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa97 	bl	800890a <USBD_CtlError>
            err++;
 80083dc:	7afb      	ldrb	r3, [r7, #11]
 80083de:	3301      	adds	r3, #1
 80083e0:	72fb      	strb	r3, [r7, #11]
          break;
 80083e2:	e089      	b.n	80084f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00b      	beq.n	8008408 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	7c12      	ldrb	r2, [r2, #16]
 80083fc:	f107 0108 	add.w	r1, r7, #8
 8008400:	4610      	mov	r0, r2
 8008402:	4798      	blx	r3
 8008404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008406:	e077      	b.n	80084f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fa7d 	bl	800890a <USBD_CtlError>
            err++;
 8008410:	7afb      	ldrb	r3, [r7, #11]
 8008412:	3301      	adds	r3, #1
 8008414:	72fb      	strb	r3, [r7, #11]
          break;
 8008416:	e06f      	b.n	80084f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00b      	beq.n	800843c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	7c12      	ldrb	r2, [r2, #16]
 8008430:	f107 0108 	add.w	r1, r7, #8
 8008434:	4610      	mov	r0, r2
 8008436:	4798      	blx	r3
 8008438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800843a:	e05d      	b.n	80084f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fa63 	bl	800890a <USBD_CtlError>
            err++;
 8008444:	7afb      	ldrb	r3, [r7, #11]
 8008446:	3301      	adds	r3, #1
 8008448:	72fb      	strb	r3, [r7, #11]
          break;
 800844a:	e055      	b.n	80084f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00b      	beq.n	8008470 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	7c12      	ldrb	r2, [r2, #16]
 8008464:	f107 0108 	add.w	r1, r7, #8
 8008468:	4610      	mov	r0, r2
 800846a:	4798      	blx	r3
 800846c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800846e:	e043      	b.n	80084f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fa49 	bl	800890a <USBD_CtlError>
            err++;
 8008478:	7afb      	ldrb	r3, [r7, #11]
 800847a:	3301      	adds	r3, #1
 800847c:	72fb      	strb	r3, [r7, #11]
          break;
 800847e:	e03b      	b.n	80084f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00b      	beq.n	80084a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	7c12      	ldrb	r2, [r2, #16]
 8008498:	f107 0108 	add.w	r1, r7, #8
 800849c:	4610      	mov	r0, r2
 800849e:	4798      	blx	r3
 80084a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084a2:	e029      	b.n	80084f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fa2f 	bl	800890a <USBD_CtlError>
            err++;
 80084ac:	7afb      	ldrb	r3, [r7, #11]
 80084ae:	3301      	adds	r3, #1
 80084b0:	72fb      	strb	r3, [r7, #11]
          break;
 80084b2:	e021      	b.n	80084f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00b      	beq.n	80084d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	7c12      	ldrb	r2, [r2, #16]
 80084cc:	f107 0108 	add.w	r1, r7, #8
 80084d0:	4610      	mov	r0, r2
 80084d2:	4798      	blx	r3
 80084d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084d6:	e00f      	b.n	80084f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fa15 	bl	800890a <USBD_CtlError>
            err++;
 80084e0:	7afb      	ldrb	r3, [r7, #11]
 80084e2:	3301      	adds	r3, #1
 80084e4:	72fb      	strb	r3, [r7, #11]
          break;
 80084e6:	e007      	b.n	80084f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fa0d 	bl	800890a <USBD_CtlError>
          err++;
 80084f0:	7afb      	ldrb	r3, [r7, #11]
 80084f2:	3301      	adds	r3, #1
 80084f4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80084f6:	e038      	b.n	800856a <USBD_GetDescriptor+0x286>
 80084f8:	e037      	b.n	800856a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	7c1b      	ldrb	r3, [r3, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d109      	bne.n	8008516 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800850a:	f107 0208 	add.w	r2, r7, #8
 800850e:	4610      	mov	r0, r2
 8008510:	4798      	blx	r3
 8008512:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008514:	e029      	b.n	800856a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f9f6 	bl	800890a <USBD_CtlError>
        err++;
 800851e:	7afb      	ldrb	r3, [r7, #11]
 8008520:	3301      	adds	r3, #1
 8008522:	72fb      	strb	r3, [r7, #11]
      break;
 8008524:	e021      	b.n	800856a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	7c1b      	ldrb	r3, [r3, #16]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10d      	bne.n	800854a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008536:	f107 0208 	add.w	r2, r7, #8
 800853a:	4610      	mov	r0, r2
 800853c:	4798      	blx	r3
 800853e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	3301      	adds	r3, #1
 8008544:	2207      	movs	r2, #7
 8008546:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008548:	e00f      	b.n	800856a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f9dc 	bl	800890a <USBD_CtlError>
        err++;
 8008552:	7afb      	ldrb	r3, [r7, #11]
 8008554:	3301      	adds	r3, #1
 8008556:	72fb      	strb	r3, [r7, #11]
      break;
 8008558:	e007      	b.n	800856a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f9d4 	bl	800890a <USBD_CtlError>
      err++;
 8008562:	7afb      	ldrb	r3, [r7, #11]
 8008564:	3301      	adds	r3, #1
 8008566:	72fb      	strb	r3, [r7, #11]
      break;
 8008568:	bf00      	nop
  }

  if (err != 0U)
 800856a:	7afb      	ldrb	r3, [r7, #11]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d11c      	bne.n	80085aa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008570:	893b      	ldrh	r3, [r7, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d011      	beq.n	800859a <USBD_GetDescriptor+0x2b6>
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	88db      	ldrh	r3, [r3, #6]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00d      	beq.n	800859a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	88da      	ldrh	r2, [r3, #6]
 8008582:	893b      	ldrh	r3, [r7, #8]
 8008584:	4293      	cmp	r3, r2
 8008586:	bf28      	it	cs
 8008588:	4613      	movcs	r3, r2
 800858a:	b29b      	uxth	r3, r3
 800858c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800858e:	893b      	ldrh	r3, [r7, #8]
 8008590:	461a      	mov	r2, r3
 8008592:	68f9      	ldr	r1, [r7, #12]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fa22 	bl	80089de <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	88db      	ldrh	r3, [r3, #6]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d104      	bne.n	80085ac <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fa79 	bl	8008a9a <USBD_CtlSendStatus>
 80085a8:	e000      	b.n	80085ac <USBD_GetDescriptor+0x2c8>
    return;
 80085aa:	bf00      	nop
    }
  }
}
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop

080085b4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	889b      	ldrh	r3, [r3, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d130      	bne.n	8008628 <USBD_SetAddress+0x74>
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	88db      	ldrh	r3, [r3, #6]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d12c      	bne.n	8008628 <USBD_SetAddress+0x74>
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	885b      	ldrh	r3, [r3, #2]
 80085d2:	2b7f      	cmp	r3, #127	; 0x7f
 80085d4:	d828      	bhi.n	8008628 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	885b      	ldrh	r3, [r3, #2]
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e8:	2b03      	cmp	r3, #3
 80085ea:	d104      	bne.n	80085f6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f98b 	bl	800890a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085f4:	e01d      	b.n	8008632 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	7bfa      	ldrb	r2, [r7, #15]
 80085fa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f003 fb84 	bl	800bd10 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fa46 	bl	8008a9a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d004      	beq.n	800861e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2202      	movs	r2, #2
 8008618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800861c:	e009      	b.n	8008632 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008626:	e004      	b.n	8008632 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f96d 	bl	800890a <USBD_CtlError>
  }
}
 8008630:	bf00      	nop
 8008632:	bf00      	nop
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
	...

0800863c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	885b      	ldrh	r3, [r3, #2]
 800864a:	b2da      	uxtb	r2, r3
 800864c:	4b41      	ldr	r3, [pc, #260]	; (8008754 <USBD_SetConfig+0x118>)
 800864e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008650:	4b40      	ldr	r3, [pc, #256]	; (8008754 <USBD_SetConfig+0x118>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d904      	bls.n	8008662 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f955 	bl	800890a <USBD_CtlError>
 8008660:	e075      	b.n	800874e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008668:	2b02      	cmp	r3, #2
 800866a:	d002      	beq.n	8008672 <USBD_SetConfig+0x36>
 800866c:	2b03      	cmp	r3, #3
 800866e:	d023      	beq.n	80086b8 <USBD_SetConfig+0x7c>
 8008670:	e062      	b.n	8008738 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008672:	4b38      	ldr	r3, [pc, #224]	; (8008754 <USBD_SetConfig+0x118>)
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d01a      	beq.n	80086b0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800867a:	4b36      	ldr	r3, [pc, #216]	; (8008754 <USBD_SetConfig+0x118>)
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2203      	movs	r2, #3
 8008688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800868c:	4b31      	ldr	r3, [pc, #196]	; (8008754 <USBD_SetConfig+0x118>)
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7ff f9e8 	bl	8007a68 <USBD_SetClassConfig>
 8008698:	4603      	mov	r3, r0
 800869a:	2b02      	cmp	r3, #2
 800869c:	d104      	bne.n	80086a8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f932 	bl	800890a <USBD_CtlError>
            return;
 80086a6:	e052      	b.n	800874e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f9f6 	bl	8008a9a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80086ae:	e04e      	b.n	800874e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f9f2 	bl	8008a9a <USBD_CtlSendStatus>
        break;
 80086b6:	e04a      	b.n	800874e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80086b8:	4b26      	ldr	r3, [pc, #152]	; (8008754 <USBD_SetConfig+0x118>)
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d112      	bne.n	80086e6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2202      	movs	r2, #2
 80086c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80086c8:	4b22      	ldr	r3, [pc, #136]	; (8008754 <USBD_SetConfig+0x118>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	461a      	mov	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80086d2:	4b20      	ldr	r3, [pc, #128]	; (8008754 <USBD_SetConfig+0x118>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7ff f9e4 	bl	8007aa6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f9db 	bl	8008a9a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80086e4:	e033      	b.n	800874e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80086e6:	4b1b      	ldr	r3, [pc, #108]	; (8008754 <USBD_SetConfig+0x118>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	461a      	mov	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d01d      	beq.n	8008730 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f7ff f9d2 	bl	8007aa6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008702:	4b14      	ldr	r3, [pc, #80]	; (8008754 <USBD_SetConfig+0x118>)
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800870c:	4b11      	ldr	r3, [pc, #68]	; (8008754 <USBD_SetConfig+0x118>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7ff f9a8 	bl	8007a68 <USBD_SetClassConfig>
 8008718:	4603      	mov	r3, r0
 800871a:	2b02      	cmp	r3, #2
 800871c:	d104      	bne.n	8008728 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f8f2 	bl	800890a <USBD_CtlError>
            return;
 8008726:	e012      	b.n	800874e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f9b6 	bl	8008a9a <USBD_CtlSendStatus>
        break;
 800872e:	e00e      	b.n	800874e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f9b2 	bl	8008a9a <USBD_CtlSendStatus>
        break;
 8008736:	e00a      	b.n	800874e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f8e5 	bl	800890a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008740:	4b04      	ldr	r3, [pc, #16]	; (8008754 <USBD_SetConfig+0x118>)
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	4619      	mov	r1, r3
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7ff f9ad 	bl	8007aa6 <USBD_ClrClassConfig>
        break;
 800874c:	bf00      	nop
    }
  }
}
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	2000031c 	.word	0x2000031c

08008758 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	88db      	ldrh	r3, [r3, #6]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d004      	beq.n	8008774 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f8cc 	bl	800890a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008772:	e022      	b.n	80087ba <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800877a:	2b02      	cmp	r3, #2
 800877c:	dc02      	bgt.n	8008784 <USBD_GetConfig+0x2c>
 800877e:	2b00      	cmp	r3, #0
 8008780:	dc03      	bgt.n	800878a <USBD_GetConfig+0x32>
 8008782:	e015      	b.n	80087b0 <USBD_GetConfig+0x58>
 8008784:	2b03      	cmp	r3, #3
 8008786:	d00b      	beq.n	80087a0 <USBD_GetConfig+0x48>
 8008788:	e012      	b.n	80087b0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	3308      	adds	r3, #8
 8008794:	2201      	movs	r2, #1
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f920 	bl	80089de <USBD_CtlSendData>
        break;
 800879e:	e00c      	b.n	80087ba <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	3304      	adds	r3, #4
 80087a4:	2201      	movs	r2, #1
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f918 	bl	80089de <USBD_CtlSendData>
        break;
 80087ae:	e004      	b.n	80087ba <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f8a9 	bl	800890a <USBD_CtlError>
        break;
 80087b8:	bf00      	nop
}
 80087ba:	bf00      	nop
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b082      	sub	sp, #8
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d2:	3b01      	subs	r3, #1
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d81e      	bhi.n	8008816 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	88db      	ldrh	r3, [r3, #6]
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d004      	beq.n	80087ea <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f891 	bl	800890a <USBD_CtlError>
        break;
 80087e8:	e01a      	b.n	8008820 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	f043 0202 	orr.w	r2, r3, #2
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	330c      	adds	r3, #12
 800880a:	2202      	movs	r2, #2
 800880c:	4619      	mov	r1, r3
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f8e5 	bl	80089de <USBD_CtlSendData>
      break;
 8008814:	e004      	b.n	8008820 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f876 	bl	800890a <USBD_CtlError>
      break;
 800881e:	bf00      	nop
  }
}
 8008820:	bf00      	nop
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	885b      	ldrh	r3, [r3, #2]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d106      	bne.n	8008848 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f929 	bl	8008a9a <USBD_CtlSendStatus>
  }
}
 8008848:	bf00      	nop
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008860:	3b01      	subs	r3, #1
 8008862:	2b02      	cmp	r3, #2
 8008864:	d80b      	bhi.n	800887e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	885b      	ldrh	r3, [r3, #2]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d10c      	bne.n	8008888 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f90f 	bl	8008a9a <USBD_CtlSendStatus>
      }
      break;
 800887c:	e004      	b.n	8008888 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f842 	bl	800890a <USBD_CtlError>
      break;
 8008886:	e000      	b.n	800888a <USBD_ClrFeature+0x3a>
      break;
 8008888:	bf00      	nop
  }
}
 800888a:	bf00      	nop
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008892:	b480      	push	{r7}
 8008894:	b083      	sub	sp, #12
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781a      	ldrb	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	785a      	ldrb	r2, [r3, #1]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	3302      	adds	r3, #2
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	3303      	adds	r3, #3
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	021b      	lsls	r3, r3, #8
 80088be:	b29b      	uxth	r3, r3
 80088c0:	4413      	add	r3, r2
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	3304      	adds	r3, #4
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	3305      	adds	r3, #5
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	021b      	lsls	r3, r3, #8
 80088da:	b29b      	uxth	r3, r3
 80088dc:	4413      	add	r3, r2
 80088de:	b29a      	uxth	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	3306      	adds	r3, #6
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	3307      	adds	r3, #7
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	021b      	lsls	r3, r3, #8
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	4413      	add	r3, r2
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	80da      	strh	r2, [r3, #6]

}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	bc80      	pop	{r7}
 8008908:	4770      	bx	lr

0800890a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b082      	sub	sp, #8
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008914:	2180      	movs	r1, #128	; 0x80
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f003 f990 	bl	800bc3c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800891c:	2100      	movs	r1, #0
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f003 f98c 	bl	800bc3c <USBD_LL_StallEP>
}
 8008924:	bf00      	nop
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008938:	2300      	movs	r3, #0
 800893a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d032      	beq.n	80089a8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f000 f834 	bl	80089b0 <USBD_GetLen>
 8008948:	4603      	mov	r3, r0
 800894a:	3301      	adds	r3, #1
 800894c:	b29b      	uxth	r3, r3
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	b29a      	uxth	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008956:	7dfb      	ldrb	r3, [r7, #23]
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	75fa      	strb	r2, [r7, #23]
 800895c:	461a      	mov	r2, r3
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	4413      	add	r3, r2
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	7812      	ldrb	r2, [r2, #0]
 8008966:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008968:	7dfb      	ldrb	r3, [r7, #23]
 800896a:	1c5a      	adds	r2, r3, #1
 800896c:	75fa      	strb	r2, [r7, #23]
 800896e:	461a      	mov	r2, r3
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	4413      	add	r3, r2
 8008974:	2203      	movs	r2, #3
 8008976:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008978:	e012      	b.n	80089a0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	1c5a      	adds	r2, r3, #1
 800897e:	60fa      	str	r2, [r7, #12]
 8008980:	7dfa      	ldrb	r2, [r7, #23]
 8008982:	1c51      	adds	r1, r2, #1
 8008984:	75f9      	strb	r1, [r7, #23]
 8008986:	4611      	mov	r1, r2
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	440a      	add	r2, r1
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008990:	7dfb      	ldrb	r3, [r7, #23]
 8008992:	1c5a      	adds	r2, r3, #1
 8008994:	75fa      	strb	r2, [r7, #23]
 8008996:	461a      	mov	r2, r3
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	4413      	add	r3, r2
 800899c:	2200      	movs	r2, #0
 800899e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1e8      	bne.n	800897a <USBD_GetString+0x4e>
    }
  }
}
 80089a8:	bf00      	nop
 80089aa:	3718      	adds	r7, #24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80089bc:	e005      	b.n	80089ca <USBD_GetLen+0x1a>
  {
    len++;
 80089be:	7bfb      	ldrb	r3, [r7, #15]
 80089c0:	3301      	adds	r3, #1
 80089c2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	3301      	adds	r3, #1
 80089c8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1f5      	bne.n	80089be <USBD_GetLen+0xe>
  }

  return len;
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3714      	adds	r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	bc80      	pop	{r7}
 80089dc:	4770      	bx	lr

080089de <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	4613      	mov	r3, r2
 80089ea:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2202      	movs	r2, #2
 80089f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80089f4:	88fa      	ldrh	r2, [r7, #6]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80089fa:	88fa      	ldrh	r2, [r7, #6]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a00:	88fb      	ldrh	r3, [r7, #6]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	2100      	movs	r1, #0
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f003 f9a1 	bl	800bd4e <USBD_LL_Transmit>

  return USBD_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b084      	sub	sp, #16
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	60f8      	str	r0, [r7, #12]
 8008a1e:	60b9      	str	r1, [r7, #8]
 8008a20:	4613      	mov	r3, r2
 8008a22:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a24:	88fb      	ldrh	r3, [r7, #6]
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	2100      	movs	r1, #0
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f003 f98f 	bl	800bd4e <USBD_LL_Transmit>

  return USBD_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b084      	sub	sp, #16
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	60f8      	str	r0, [r7, #12]
 8008a42:	60b9      	str	r1, [r7, #8]
 8008a44:	4613      	mov	r3, r2
 8008a46:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2203      	movs	r2, #3
 8008a4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a50:	88fa      	ldrh	r2, [r7, #6]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008a58:	88fa      	ldrh	r2, [r7, #6]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a60:	88fb      	ldrh	r3, [r7, #6]
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	2100      	movs	r1, #0
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f003 f994 	bl	800bd94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b084      	sub	sp, #16
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	60f8      	str	r0, [r7, #12]
 8008a7e:	60b9      	str	r1, [r7, #8]
 8008a80:	4613      	mov	r3, r2
 8008a82:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a84:	88fb      	ldrh	r3, [r7, #6]
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	2100      	movs	r1, #0
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f003 f982 	bl	800bd94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b082      	sub	sp, #8
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2204      	movs	r2, #4
 8008aa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008aaa:	2300      	movs	r3, #0
 8008aac:	2200      	movs	r2, #0
 8008aae:	2100      	movs	r1, #0
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f003 f94c 	bl	800bd4e <USBD_LL_Transmit>

  return USBD_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2205      	movs	r2, #5
 8008acc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f003 f95c 	bl	800bd94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
	...

08008ae8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	4613      	mov	r3, r2
 8008af4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008af6:	2301      	movs	r3, #1
 8008af8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008afa:	2300      	movs	r3, #0
 8008afc:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008afe:	4b1e      	ldr	r3, [pc, #120]	; (8008b78 <FATFS_LinkDriverEx+0x90>)
 8008b00:	7a5b      	ldrb	r3, [r3, #9]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d831      	bhi.n	8008b6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008b08:	4b1b      	ldr	r3, [pc, #108]	; (8008b78 <FATFS_LinkDriverEx+0x90>)
 8008b0a:	7a5b      	ldrb	r3, [r3, #9]
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	461a      	mov	r2, r3
 8008b10:	4b19      	ldr	r3, [pc, #100]	; (8008b78 <FATFS_LinkDriverEx+0x90>)
 8008b12:	2100      	movs	r1, #0
 8008b14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008b16:	4b18      	ldr	r3, [pc, #96]	; (8008b78 <FATFS_LinkDriverEx+0x90>)
 8008b18:	7a5b      	ldrb	r3, [r3, #9]
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	4a16      	ldr	r2, [pc, #88]	; (8008b78 <FATFS_LinkDriverEx+0x90>)
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008b26:	4b14      	ldr	r3, [pc, #80]	; (8008b78 <FATFS_LinkDriverEx+0x90>)
 8008b28:	7a5b      	ldrb	r3, [r3, #9]
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	4b12      	ldr	r3, [pc, #72]	; (8008b78 <FATFS_LinkDriverEx+0x90>)
 8008b30:	4413      	add	r3, r2
 8008b32:	79fa      	ldrb	r2, [r7, #7]
 8008b34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008b36:	4b10      	ldr	r3, [pc, #64]	; (8008b78 <FATFS_LinkDriverEx+0x90>)
 8008b38:	7a5b      	ldrb	r3, [r3, #9]
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	b2d1      	uxtb	r1, r2
 8008b40:	4a0d      	ldr	r2, [pc, #52]	; (8008b78 <FATFS_LinkDriverEx+0x90>)
 8008b42:	7251      	strb	r1, [r2, #9]
 8008b44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008b46:	7dbb      	ldrb	r3, [r7, #22]
 8008b48:	3330      	adds	r3, #48	; 0x30
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	3301      	adds	r3, #1
 8008b54:	223a      	movs	r2, #58	; 0x3a
 8008b56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	3302      	adds	r3, #2
 8008b5c:	222f      	movs	r2, #47	; 0x2f
 8008b5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	3303      	adds	r3, #3
 8008b64:	2200      	movs	r2, #0
 8008b66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	371c      	adds	r7, #28
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bc80      	pop	{r7}
 8008b76:	4770      	bx	lr
 8008b78:	20000320 	.word	0x20000320

08008b7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008b86:	2200      	movs	r2, #0
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7ff ffac 	bl	8008ae8 <FATFS_LinkDriverEx>
 8008b90:	4603      	mov	r3, r0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
	...

08008b9c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ba2:	f3ef 8305 	mrs	r3, IPSR
 8008ba6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ba8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10f      	bne.n	8008bce <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bae:	f3ef 8310 	mrs	r3, PRIMASK
 8008bb2:	607b      	str	r3, [r7, #4]
  return(result);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d109      	bne.n	8008bce <osKernelInitialize+0x32>
 8008bba:	4b10      	ldr	r3, [pc, #64]	; (8008bfc <osKernelInitialize+0x60>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d109      	bne.n	8008bd6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008bc2:	f3ef 8311 	mrs	r3, BASEPRI
 8008bc6:	603b      	str	r3, [r7, #0]
  return(result);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d003      	beq.n	8008bd6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008bce:	f06f 0305 	mvn.w	r3, #5
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	e00c      	b.n	8008bf0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008bd6:	4b09      	ldr	r3, [pc, #36]	; (8008bfc <osKernelInitialize+0x60>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d105      	bne.n	8008bea <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8008bde:	4b07      	ldr	r3, [pc, #28]	; (8008bfc <osKernelInitialize+0x60>)
 8008be0:	2201      	movs	r2, #1
 8008be2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	60fb      	str	r3, [r7, #12]
 8008be8:	e002      	b.n	8008bf0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3714      	adds	r7, #20
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bc80      	pop	{r7}
 8008bfa:	4770      	bx	lr
 8008bfc:	2000032c 	.word	0x2000032c

08008c00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c06:	f3ef 8305 	mrs	r3, IPSR
 8008c0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10f      	bne.n	8008c32 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c12:	f3ef 8310 	mrs	r3, PRIMASK
 8008c16:	607b      	str	r3, [r7, #4]
  return(result);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d109      	bne.n	8008c32 <osKernelStart+0x32>
 8008c1e:	4b11      	ldr	r3, [pc, #68]	; (8008c64 <osKernelStart+0x64>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d109      	bne.n	8008c3a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c26:	f3ef 8311 	mrs	r3, BASEPRI
 8008c2a:	603b      	str	r3, [r7, #0]
  return(result);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d003      	beq.n	8008c3a <osKernelStart+0x3a>
    stat = osErrorISR;
 8008c32:	f06f 0305 	mvn.w	r3, #5
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	e00e      	b.n	8008c58 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8008c3a:	4b0a      	ldr	r3, [pc, #40]	; (8008c64 <osKernelStart+0x64>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d107      	bne.n	8008c52 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8008c42:	4b08      	ldr	r3, [pc, #32]	; (8008c64 <osKernelStart+0x64>)
 8008c44:	2202      	movs	r2, #2
 8008c46:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008c48:	f001 f890 	bl	8009d6c <vTaskStartScheduler>
      stat = osOK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	e002      	b.n	8008c58 <osKernelStart+0x58>
    } else {
      stat = osError;
 8008c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008c58:	68fb      	ldr	r3, [r7, #12]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	2000032c 	.word	0x2000032c

08008c68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b092      	sub	sp, #72	; 0x48
 8008c6c:	af04      	add	r7, sp, #16
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008c74:	2300      	movs	r3, #0
 8008c76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c78:	f3ef 8305 	mrs	r3, IPSR
 8008c7c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f040 8094 	bne.w	8008dae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c86:	f3ef 8310 	mrs	r3, PRIMASK
 8008c8a:	623b      	str	r3, [r7, #32]
  return(result);
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f040 808d 	bne.w	8008dae <osThreadNew+0x146>
 8008c94:	4b48      	ldr	r3, [pc, #288]	; (8008db8 <osThreadNew+0x150>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d106      	bne.n	8008caa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c9c:	f3ef 8311 	mrs	r3, BASEPRI
 8008ca0:	61fb      	str	r3, [r7, #28]
  return(result);
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f040 8082 	bne.w	8008dae <osThreadNew+0x146>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d07e      	beq.n	8008dae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008cb0:	2380      	movs	r3, #128	; 0x80
 8008cb2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008cb4:	2318      	movs	r3, #24
 8008cb6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008cb8:	2300      	movs	r3, #0
 8008cba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008cbc:	f107 031b 	add.w	r3, r7, #27
 8008cc0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8008cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cc6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d045      	beq.n	8008d5a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d002      	beq.n	8008cdc <osThreadNew+0x74>
        name = attr->name;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d002      	beq.n	8008cea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d008      	beq.n	8008d02 <osThreadNew+0x9a>
 8008cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf2:	2b38      	cmp	r3, #56	; 0x38
 8008cf4:	d805      	bhi.n	8008d02 <osThreadNew+0x9a>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <osThreadNew+0x9e>
        return (NULL);
 8008d02:	2300      	movs	r3, #0
 8008d04:	e054      	b.n	8008db0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	089b      	lsrs	r3, r3, #2
 8008d14:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00e      	beq.n	8008d3c <osThreadNew+0xd4>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	2bbb      	cmp	r3, #187	; 0xbb
 8008d24:	d90a      	bls.n	8008d3c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d006      	beq.n	8008d3c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d002      	beq.n	8008d3c <osThreadNew+0xd4>
        mem = 1;
 8008d36:	2301      	movs	r3, #1
 8008d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d3a:	e010      	b.n	8008d5e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10c      	bne.n	8008d5e <osThreadNew+0xf6>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d108      	bne.n	8008d5e <osThreadNew+0xf6>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d104      	bne.n	8008d5e <osThreadNew+0xf6>
          mem = 0;
 8008d54:	2300      	movs	r3, #0
 8008d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d58:	e001      	b.n	8008d5e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8008d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d110      	bne.n	8008d86 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d6c:	9202      	str	r2, [sp, #8]
 8008d6e:	9301      	str	r3, [sp, #4]
 8008d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 fe12 	bl	80099a4 <xTaskCreateStatic>
 8008d80:	4603      	mov	r3, r0
 8008d82:	617b      	str	r3, [r7, #20]
 8008d84:	e013      	b.n	8008dae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d110      	bne.n	8008dae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	f107 0314 	add.w	r3, r7, #20
 8008d94:	9301      	str	r3, [sp, #4]
 8008d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f000 fe5c 	bl	8009a5c <xTaskCreate>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d001      	beq.n	8008dae <osThreadNew+0x146>
          hTask = NULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008dae:	697b      	ldr	r3, [r7, #20]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3738      	adds	r7, #56	; 0x38
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	2000032c 	.word	0x2000032c

08008dbc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dc4:	f3ef 8305 	mrs	r3, IPSR
 8008dc8:	613b      	str	r3, [r7, #16]
  return(result);
 8008dca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10f      	bne.n	8008df0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8008dd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d109      	bne.n	8008df0 <osDelay+0x34>
 8008ddc:	4b0d      	ldr	r3, [pc, #52]	; (8008e14 <osDelay+0x58>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d109      	bne.n	8008df8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008de4:	f3ef 8311 	mrs	r3, BASEPRI
 8008de8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d003      	beq.n	8008df8 <osDelay+0x3c>
    stat = osErrorISR;
 8008df0:	f06f 0305 	mvn.w	r3, #5
 8008df4:	617b      	str	r3, [r7, #20]
 8008df6:	e007      	b.n	8008e08 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d002      	beq.n	8008e08 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 ff7e 	bl	8009d04 <vTaskDelay>
    }
  }

  return (stat);
 8008e08:	697b      	ldr	r3, [r7, #20]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	2000032c 	.word	0x2000032c

08008e18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	4a06      	ldr	r2, [pc, #24]	; (8008e40 <vApplicationGetIdleTaskMemory+0x28>)
 8008e28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	4a05      	ldr	r2, [pc, #20]	; (8008e44 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2280      	movs	r2, #128	; 0x80
 8008e34:	601a      	str	r2, [r3, #0]
}
 8008e36:	bf00      	nop
 8008e38:	3714      	adds	r7, #20
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bc80      	pop	{r7}
 8008e3e:	4770      	bx	lr
 8008e40:	20000330 	.word	0x20000330
 8008e44:	200003ec 	.word	0x200003ec

08008e48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4a07      	ldr	r2, [pc, #28]	; (8008e74 <vApplicationGetTimerTaskMemory+0x2c>)
 8008e58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	4a06      	ldr	r2, [pc, #24]	; (8008e78 <vApplicationGetTimerTaskMemory+0x30>)
 8008e5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e66:	601a      	str	r2, [r3, #0]
}
 8008e68:	bf00      	nop
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bc80      	pop	{r7}
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	200005ec 	.word	0x200005ec
 8008e78:	200006a8 	.word	0x200006a8

08008e7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f103 0208 	add.w	r2, r3, #8
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f103 0208 	add.w	r2, r3, #8
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f103 0208 	add.w	r2, r3, #8
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bc80      	pop	{r7}
 8008eb8:	4770      	bx	lr

08008eba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b083      	sub	sp, #12
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bc80      	pop	{r7}
 8008ed0:	4770      	bx	lr

08008ed2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b085      	sub	sp, #20
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	689a      	ldr	r2, [r3, #8]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	683a      	ldr	r2, [r7, #0]
 8008ef6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	1c5a      	adds	r2, r3, #1
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	601a      	str	r2, [r3, #0]
}
 8008f0e:	bf00      	nop
 8008f10:	3714      	adds	r7, #20
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bc80      	pop	{r7}
 8008f16:	4770      	bx	lr

08008f18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f2e:	d103      	bne.n	8008f38 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	60fb      	str	r3, [r7, #12]
 8008f36:	e00c      	b.n	8008f52 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	3308      	adds	r3, #8
 8008f3c:	60fb      	str	r3, [r7, #12]
 8008f3e:	e002      	b.n	8008f46 <vListInsert+0x2e>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	60fb      	str	r3, [r7, #12]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d2f6      	bcs.n	8008f40 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	685a      	ldr	r2, [r3, #4]
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	683a      	ldr	r2, [r7, #0]
 8008f6c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	1c5a      	adds	r2, r3, #1
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	601a      	str	r2, [r3, #0]
}
 8008f7e:	bf00      	nop
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bc80      	pop	{r7}
 8008f86:	4770      	bx	lr

08008f88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	6892      	ldr	r2, [r2, #8]
 8008f9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	6852      	ldr	r2, [r2, #4]
 8008fa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d103      	bne.n	8008fbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	689a      	ldr	r2, [r3, #8]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	1e5a      	subs	r2, r3, #1
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bc80      	pop	{r7}
 8008fd8:	4770      	bx	lr
	...

08008fdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10a      	bne.n	8009006 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009002:	bf00      	nop
 8009004:	e7fe      	b.n	8009004 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009006:	f001 fff9 	bl	800affc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009012:	68f9      	ldr	r1, [r7, #12]
 8009014:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009016:	fb01 f303 	mul.w	r3, r1, r3
 800901a:	441a      	add	r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2200      	movs	r2, #0
 8009024:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009036:	3b01      	subs	r3, #1
 8009038:	68f9      	ldr	r1, [r7, #12]
 800903a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800903c:	fb01 f303 	mul.w	r3, r1, r3
 8009040:	441a      	add	r2, r3
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	22ff      	movs	r2, #255	; 0xff
 800904a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	22ff      	movs	r2, #255	; 0xff
 8009052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d114      	bne.n	8009086 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d01a      	beq.n	800909a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	3310      	adds	r3, #16
 8009068:	4618      	mov	r0, r3
 800906a:	f001 f91b 	bl	800a2a4 <xTaskRemoveFromEventList>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d012      	beq.n	800909a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009074:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <xQueueGenericReset+0xcc>)
 8009076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800907a:	601a      	str	r2, [r3, #0]
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	f3bf 8f6f 	isb	sy
 8009084:	e009      	b.n	800909a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	3310      	adds	r3, #16
 800908a:	4618      	mov	r0, r3
 800908c:	f7ff fef6 	bl	8008e7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	3324      	adds	r3, #36	; 0x24
 8009094:	4618      	mov	r0, r3
 8009096:	f7ff fef1 	bl	8008e7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800909a:	f001 ffdf 	bl	800b05c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800909e:	2301      	movs	r3, #1
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	e000ed04 	.word	0xe000ed04

080090ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b08e      	sub	sp, #56	; 0x38
 80090b0:	af02      	add	r7, sp, #8
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
 80090b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10a      	bne.n	80090d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090d2:	bf00      	nop
 80090d4:	e7fe      	b.n	80090d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10a      	bne.n	80090f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80090dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e0:	f383 8811 	msr	BASEPRI, r3
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090ee:	bf00      	nop
 80090f0:	e7fe      	b.n	80090f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d002      	beq.n	80090fe <xQueueGenericCreateStatic+0x52>
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d001      	beq.n	8009102 <xQueueGenericCreateStatic+0x56>
 80090fe:	2301      	movs	r3, #1
 8009100:	e000      	b.n	8009104 <xQueueGenericCreateStatic+0x58>
 8009102:	2300      	movs	r3, #0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10a      	bne.n	800911e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	623b      	str	r3, [r7, #32]
}
 800911a:	bf00      	nop
 800911c:	e7fe      	b.n	800911c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d102      	bne.n	800912a <xQueueGenericCreateStatic+0x7e>
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <xQueueGenericCreateStatic+0x82>
 800912a:	2301      	movs	r3, #1
 800912c:	e000      	b.n	8009130 <xQueueGenericCreateStatic+0x84>
 800912e:	2300      	movs	r3, #0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10a      	bne.n	800914a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	61fb      	str	r3, [r7, #28]
}
 8009146:	bf00      	nop
 8009148:	e7fe      	b.n	8009148 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800914a:	2350      	movs	r3, #80	; 0x50
 800914c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	2b50      	cmp	r3, #80	; 0x50
 8009152:	d00a      	beq.n	800916a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	61bb      	str	r3, [r7, #24]
}
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800916e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00d      	beq.n	8009190 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800917c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	4613      	mov	r3, r2
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	68b9      	ldr	r1, [r7, #8]
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f000 f805 	bl	800919a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009192:	4618      	mov	r0, r3
 8009194:	3730      	adds	r7, #48	; 0x30
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	60f8      	str	r0, [r7, #12]
 80091a2:	60b9      	str	r1, [r7, #8]
 80091a4:	607a      	str	r2, [r7, #4]
 80091a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d103      	bne.n	80091b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	69ba      	ldr	r2, [r7, #24]
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	e002      	b.n	80091bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80091c8:	2101      	movs	r1, #1
 80091ca:	69b8      	ldr	r0, [r7, #24]
 80091cc:	f7ff ff06 	bl	8008fdc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	78fa      	ldrb	r2, [r7, #3]
 80091d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80091d8:	bf00      	nop
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b08e      	sub	sp, #56	; 0x38
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	607a      	str	r2, [r7, #4]
 80091ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80091ee:	2300      	movs	r3, #0
 80091f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80091f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10a      	bne.n	8009212 <xQueueGenericSend+0x32>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800920e:	bf00      	nop
 8009210:	e7fe      	b.n	8009210 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d103      	bne.n	8009220 <xQueueGenericSend+0x40>
 8009218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921c:	2b00      	cmp	r3, #0
 800921e:	d101      	bne.n	8009224 <xQueueGenericSend+0x44>
 8009220:	2301      	movs	r3, #1
 8009222:	e000      	b.n	8009226 <xQueueGenericSend+0x46>
 8009224:	2300      	movs	r3, #0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10a      	bne.n	8009240 <xQueueGenericSend+0x60>
	__asm volatile
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800923c:	bf00      	nop
 800923e:	e7fe      	b.n	800923e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2b02      	cmp	r3, #2
 8009244:	d103      	bne.n	800924e <xQueueGenericSend+0x6e>
 8009246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800924a:	2b01      	cmp	r3, #1
 800924c:	d101      	bne.n	8009252 <xQueueGenericSend+0x72>
 800924e:	2301      	movs	r3, #1
 8009250:	e000      	b.n	8009254 <xQueueGenericSend+0x74>
 8009252:	2300      	movs	r3, #0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10a      	bne.n	800926e <xQueueGenericSend+0x8e>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	623b      	str	r3, [r7, #32]
}
 800926a:	bf00      	nop
 800926c:	e7fe      	b.n	800926c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800926e:	f001 f9df 	bl	800a630 <xTaskGetSchedulerState>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d102      	bne.n	800927e <xQueueGenericSend+0x9e>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <xQueueGenericSend+0xa2>
 800927e:	2301      	movs	r3, #1
 8009280:	e000      	b.n	8009284 <xQueueGenericSend+0xa4>
 8009282:	2300      	movs	r3, #0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10a      	bne.n	800929e <xQueueGenericSend+0xbe>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	61fb      	str	r3, [r7, #28]
}
 800929a:	bf00      	nop
 800929c:	e7fe      	b.n	800929c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800929e:	f001 fead 	bl	800affc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d302      	bcc.n	80092b4 <xQueueGenericSend+0xd4>
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d129      	bne.n	8009308 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092ba:	f000 fa07 	bl	80096cc <prvCopyDataToQueue>
 80092be:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d010      	beq.n	80092ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ca:	3324      	adds	r3, #36	; 0x24
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 ffe9 	bl	800a2a4 <xTaskRemoveFromEventList>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d013      	beq.n	8009300 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80092d8:	4b3f      	ldr	r3, [pc, #252]	; (80093d8 <xQueueGenericSend+0x1f8>)
 80092da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092de:	601a      	str	r2, [r3, #0]
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	e00a      	b.n	8009300 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80092ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d007      	beq.n	8009300 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80092f0:	4b39      	ldr	r3, [pc, #228]	; (80093d8 <xQueueGenericSend+0x1f8>)
 80092f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092f6:	601a      	str	r2, [r3, #0]
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009300:	f001 feac 	bl	800b05c <vPortExitCritical>
				return pdPASS;
 8009304:	2301      	movs	r3, #1
 8009306:	e063      	b.n	80093d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d103      	bne.n	8009316 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800930e:	f001 fea5 	bl	800b05c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009312:	2300      	movs	r3, #0
 8009314:	e05c      	b.n	80093d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009318:	2b00      	cmp	r3, #0
 800931a:	d106      	bne.n	800932a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800931c:	f107 0314 	add.w	r3, r7, #20
 8009320:	4618      	mov	r0, r3
 8009322:	f001 f823 	bl	800a36c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009326:	2301      	movs	r3, #1
 8009328:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800932a:	f001 fe97 	bl	800b05c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800932e:	f000 fd8d 	bl	8009e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009332:	f001 fe63 	bl	800affc <vPortEnterCritical>
 8009336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009338:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800933c:	b25b      	sxtb	r3, r3
 800933e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009342:	d103      	bne.n	800934c <xQueueGenericSend+0x16c>
 8009344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800934c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009352:	b25b      	sxtb	r3, r3
 8009354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009358:	d103      	bne.n	8009362 <xQueueGenericSend+0x182>
 800935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009362:	f001 fe7b 	bl	800b05c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009366:	1d3a      	adds	r2, r7, #4
 8009368:	f107 0314 	add.w	r3, r7, #20
 800936c:	4611      	mov	r1, r2
 800936e:	4618      	mov	r0, r3
 8009370:	f001 f812 	bl	800a398 <xTaskCheckForTimeOut>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d124      	bne.n	80093c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800937a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800937c:	f000 fa9e 	bl	80098bc <prvIsQueueFull>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d018      	beq.n	80093b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009388:	3310      	adds	r3, #16
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	4611      	mov	r1, r2
 800938e:	4618      	mov	r0, r3
 8009390:	f000 ff38 	bl	800a204 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009396:	f000 fa29 	bl	80097ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800939a:	f000 fd65 	bl	8009e68 <xTaskResumeAll>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f47f af7c 	bne.w	800929e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80093a6:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <xQueueGenericSend+0x1f8>)
 80093a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	e772      	b.n	800929e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80093b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093ba:	f000 fa17 	bl	80097ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093be:	f000 fd53 	bl	8009e68 <xTaskResumeAll>
 80093c2:	e76c      	b.n	800929e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80093c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093c6:	f000 fa11 	bl	80097ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093ca:	f000 fd4d 	bl	8009e68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80093ce:	2300      	movs	r3, #0
		}
	}
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3738      	adds	r7, #56	; 0x38
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	e000ed04 	.word	0xe000ed04

080093dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b08e      	sub	sp, #56	; 0x38
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
 80093e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80093ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10a      	bne.n	800940a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80093f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009406:	bf00      	nop
 8009408:	e7fe      	b.n	8009408 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d103      	bne.n	8009418 <xQueueGenericSendFromISR+0x3c>
 8009410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <xQueueGenericSendFromISR+0x40>
 8009418:	2301      	movs	r3, #1
 800941a:	e000      	b.n	800941e <xQueueGenericSendFromISR+0x42>
 800941c:	2300      	movs	r3, #0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10a      	bne.n	8009438 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	623b      	str	r3, [r7, #32]
}
 8009434:	bf00      	nop
 8009436:	e7fe      	b.n	8009436 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2b02      	cmp	r3, #2
 800943c:	d103      	bne.n	8009446 <xQueueGenericSendFromISR+0x6a>
 800943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009442:	2b01      	cmp	r3, #1
 8009444:	d101      	bne.n	800944a <xQueueGenericSendFromISR+0x6e>
 8009446:	2301      	movs	r3, #1
 8009448:	e000      	b.n	800944c <xQueueGenericSendFromISR+0x70>
 800944a:	2300      	movs	r3, #0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10a      	bne.n	8009466 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	61fb      	str	r3, [r7, #28]
}
 8009462:	bf00      	nop
 8009464:	e7fe      	b.n	8009464 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009466:	f001 fe8b 	bl	800b180 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800946a:	f3ef 8211 	mrs	r2, BASEPRI
 800946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	61ba      	str	r2, [r7, #24]
 8009480:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009482:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009484:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800948a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800948e:	429a      	cmp	r2, r3
 8009490:	d302      	bcc.n	8009498 <xQueueGenericSendFromISR+0xbc>
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b02      	cmp	r3, #2
 8009496:	d12c      	bne.n	80094f2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800949e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	68b9      	ldr	r1, [r7, #8]
 80094a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094a8:	f000 f910 	bl	80096cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80094ac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80094b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094b4:	d112      	bne.n	80094dc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d016      	beq.n	80094ec <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c0:	3324      	adds	r3, #36	; 0x24
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 feee 	bl	800a2a4 <xTaskRemoveFromEventList>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00e      	beq.n	80094ec <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00b      	beq.n	80094ec <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	601a      	str	r2, [r3, #0]
 80094da:	e007      	b.n	80094ec <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80094dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80094e0:	3301      	adds	r3, #1
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	b25a      	sxtb	r2, r3
 80094e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80094ec:	2301      	movs	r3, #1
 80094ee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80094f0:	e001      	b.n	80094f6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	637b      	str	r3, [r7, #52]	; 0x34
 80094f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009500:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009504:	4618      	mov	r0, r3
 8009506:	3738      	adds	r7, #56	; 0x38
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b08c      	sub	sp, #48	; 0x30
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009518:	2300      	movs	r3, #0
 800951a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10a      	bne.n	800953c <xQueueReceive+0x30>
	__asm volatile
 8009526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	623b      	str	r3, [r7, #32]
}
 8009538:	bf00      	nop
 800953a:	e7fe      	b.n	800953a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d103      	bne.n	800954a <xQueueReceive+0x3e>
 8009542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <xQueueReceive+0x42>
 800954a:	2301      	movs	r3, #1
 800954c:	e000      	b.n	8009550 <xQueueReceive+0x44>
 800954e:	2300      	movs	r3, #0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10a      	bne.n	800956a <xQueueReceive+0x5e>
	__asm volatile
 8009554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	61fb      	str	r3, [r7, #28]
}
 8009566:	bf00      	nop
 8009568:	e7fe      	b.n	8009568 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800956a:	f001 f861 	bl	800a630 <xTaskGetSchedulerState>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d102      	bne.n	800957a <xQueueReceive+0x6e>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d101      	bne.n	800957e <xQueueReceive+0x72>
 800957a:	2301      	movs	r3, #1
 800957c:	e000      	b.n	8009580 <xQueueReceive+0x74>
 800957e:	2300      	movs	r3, #0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d10a      	bne.n	800959a <xQueueReceive+0x8e>
	__asm volatile
 8009584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009588:	f383 8811 	msr	BASEPRI, r3
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	61bb      	str	r3, [r7, #24]
}
 8009596:	bf00      	nop
 8009598:	e7fe      	b.n	8009598 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800959a:	f001 fd2f 	bl	800affc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800959e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d01f      	beq.n	80095ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80095aa:	68b9      	ldr	r1, [r7, #8]
 80095ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095ae:	f000 f8f7 	bl	80097a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80095b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b4:	1e5a      	subs	r2, r3, #1
 80095b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00f      	beq.n	80095e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c4:	3310      	adds	r3, #16
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 fe6c 	bl	800a2a4 <xTaskRemoveFromEventList>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d007      	beq.n	80095e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80095d2:	4b3d      	ldr	r3, [pc, #244]	; (80096c8 <xQueueReceive+0x1bc>)
 80095d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d8:	601a      	str	r2, [r3, #0]
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80095e2:	f001 fd3b 	bl	800b05c <vPortExitCritical>
				return pdPASS;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e069      	b.n	80096be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d103      	bne.n	80095f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095f0:	f001 fd34 	bl	800b05c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80095f4:	2300      	movs	r3, #0
 80095f6:	e062      	b.n	80096be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d106      	bne.n	800960c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095fe:	f107 0310 	add.w	r3, r7, #16
 8009602:	4618      	mov	r0, r3
 8009604:	f000 feb2 	bl	800a36c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009608:	2301      	movs	r3, #1
 800960a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800960c:	f001 fd26 	bl	800b05c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009610:	f000 fc1c 	bl	8009e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009614:	f001 fcf2 	bl	800affc <vPortEnterCritical>
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800961e:	b25b      	sxtb	r3, r3
 8009620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009624:	d103      	bne.n	800962e <xQueueReceive+0x122>
 8009626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009628:	2200      	movs	r2, #0
 800962a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800962e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009634:	b25b      	sxtb	r3, r3
 8009636:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800963a:	d103      	bne.n	8009644 <xQueueReceive+0x138>
 800963c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009644:	f001 fd0a 	bl	800b05c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009648:	1d3a      	adds	r2, r7, #4
 800964a:	f107 0310 	add.w	r3, r7, #16
 800964e:	4611      	mov	r1, r2
 8009650:	4618      	mov	r0, r3
 8009652:	f000 fea1 	bl	800a398 <xTaskCheckForTimeOut>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d123      	bne.n	80096a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800965c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800965e:	f000 f917 	bl	8009890 <prvIsQueueEmpty>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d017      	beq.n	8009698 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966a:	3324      	adds	r3, #36	; 0x24
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	4611      	mov	r1, r2
 8009670:	4618      	mov	r0, r3
 8009672:	f000 fdc7 	bl	800a204 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009678:	f000 f8b8 	bl	80097ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800967c:	f000 fbf4 	bl	8009e68 <xTaskResumeAll>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d189      	bne.n	800959a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009686:	4b10      	ldr	r3, [pc, #64]	; (80096c8 <xQueueReceive+0x1bc>)
 8009688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800968c:	601a      	str	r2, [r3, #0]
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	e780      	b.n	800959a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800969a:	f000 f8a7 	bl	80097ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800969e:	f000 fbe3 	bl	8009e68 <xTaskResumeAll>
 80096a2:	e77a      	b.n	800959a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80096a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096a6:	f000 f8a1 	bl	80097ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096aa:	f000 fbdd 	bl	8009e68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096b0:	f000 f8ee 	bl	8009890 <prvIsQueueEmpty>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f43f af6f 	beq.w	800959a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80096bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3730      	adds	r7, #48	; 0x30
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	e000ed04 	.word	0xe000ed04

080096cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80096d8:	2300      	movs	r3, #0
 80096da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d10d      	bne.n	8009706 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d14d      	bne.n	800978e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 ffb8 	bl	800a66c <xTaskPriorityDisinherit>
 80096fc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	605a      	str	r2, [r3, #4]
 8009704:	e043      	b.n	800978e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d119      	bne.n	8009740 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6898      	ldr	r0, [r3, #8]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009714:	461a      	mov	r2, r3
 8009716:	68b9      	ldr	r1, [r7, #8]
 8009718:	f002 fbf0 	bl	800befc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	689a      	ldr	r2, [r3, #8]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009724:	441a      	add	r2, r3
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	689a      	ldr	r2, [r3, #8]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	429a      	cmp	r2, r3
 8009734:	d32b      	bcc.n	800978e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	609a      	str	r2, [r3, #8]
 800973e:	e026      	b.n	800978e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	68d8      	ldr	r0, [r3, #12]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009748:	461a      	mov	r2, r3
 800974a:	68b9      	ldr	r1, [r7, #8]
 800974c:	f002 fbd6 	bl	800befc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	68da      	ldr	r2, [r3, #12]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009758:	425b      	negs	r3, r3
 800975a:	441a      	add	r2, r3
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	68da      	ldr	r2, [r3, #12]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	429a      	cmp	r2, r3
 800976a:	d207      	bcs.n	800977c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009774:	425b      	negs	r3, r3
 8009776:	441a      	add	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b02      	cmp	r3, #2
 8009780:	d105      	bne.n	800978e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d002      	beq.n	800978e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	3b01      	subs	r3, #1
 800978c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	1c5a      	adds	r2, r3, #1
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009796:	697b      	ldr	r3, [r7, #20]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3718      	adds	r7, #24
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d018      	beq.n	80097e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	68da      	ldr	r2, [r3, #12]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ba:	441a      	add	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	68da      	ldr	r2, [r3, #12]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d303      	bcc.n	80097d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	68d9      	ldr	r1, [r3, #12]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097dc:	461a      	mov	r2, r3
 80097de:	6838      	ldr	r0, [r7, #0]
 80097e0:	f002 fb8c 	bl	800befc <memcpy>
	}
}
 80097e4:	bf00      	nop
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80097f4:	f001 fc02 	bl	800affc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009800:	e011      	b.n	8009826 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009806:	2b00      	cmp	r3, #0
 8009808:	d012      	beq.n	8009830 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	3324      	adds	r3, #36	; 0x24
 800980e:	4618      	mov	r0, r3
 8009810:	f000 fd48 	bl	800a2a4 <xTaskRemoveFromEventList>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800981a:	f000 fe1f 	bl	800a45c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800981e:	7bfb      	ldrb	r3, [r7, #15]
 8009820:	3b01      	subs	r3, #1
 8009822:	b2db      	uxtb	r3, r3
 8009824:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800982a:	2b00      	cmp	r3, #0
 800982c:	dce9      	bgt.n	8009802 <prvUnlockQueue+0x16>
 800982e:	e000      	b.n	8009832 <prvUnlockQueue+0x46>
					break;
 8009830:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	22ff      	movs	r2, #255	; 0xff
 8009836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800983a:	f001 fc0f 	bl	800b05c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800983e:	f001 fbdd 	bl	800affc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009848:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800984a:	e011      	b.n	8009870 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d012      	beq.n	800987a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	3310      	adds	r3, #16
 8009858:	4618      	mov	r0, r3
 800985a:	f000 fd23 	bl	800a2a4 <xTaskRemoveFromEventList>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009864:	f000 fdfa 	bl	800a45c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009868:	7bbb      	ldrb	r3, [r7, #14]
 800986a:	3b01      	subs	r3, #1
 800986c:	b2db      	uxtb	r3, r3
 800986e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009874:	2b00      	cmp	r3, #0
 8009876:	dce9      	bgt.n	800984c <prvUnlockQueue+0x60>
 8009878:	e000      	b.n	800987c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800987a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	22ff      	movs	r2, #255	; 0xff
 8009880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009884:	f001 fbea 	bl	800b05c <vPortExitCritical>
}
 8009888:	bf00      	nop
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009898:	f001 fbb0 	bl	800affc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d102      	bne.n	80098aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80098a4:	2301      	movs	r3, #1
 80098a6:	60fb      	str	r3, [r7, #12]
 80098a8:	e001      	b.n	80098ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80098aa:	2300      	movs	r3, #0
 80098ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80098ae:	f001 fbd5 	bl	800b05c <vPortExitCritical>

	return xReturn;
 80098b2:	68fb      	ldr	r3, [r7, #12]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80098c4:	f001 fb9a 	bl	800affc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d102      	bne.n	80098da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80098d4:	2301      	movs	r3, #1
 80098d6:	60fb      	str	r3, [r7, #12]
 80098d8:	e001      	b.n	80098de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80098da:	2300      	movs	r3, #0
 80098dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80098de:	f001 fbbd 	bl	800b05c <vPortExitCritical>

	return xReturn;
 80098e2:	68fb      	ldr	r3, [r7, #12]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098f6:	2300      	movs	r3, #0
 80098f8:	60fb      	str	r3, [r7, #12]
 80098fa:	e014      	b.n	8009926 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80098fc:	4a0e      	ldr	r2, [pc, #56]	; (8009938 <vQueueAddToRegistry+0x4c>)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10b      	bne.n	8009920 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009908:	490b      	ldr	r1, [pc, #44]	; (8009938 <vQueueAddToRegistry+0x4c>)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	683a      	ldr	r2, [r7, #0]
 800990e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009912:	4a09      	ldr	r2, [pc, #36]	; (8009938 <vQueueAddToRegistry+0x4c>)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	00db      	lsls	r3, r3, #3
 8009918:	4413      	add	r3, r2
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800991e:	e006      	b.n	800992e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	3301      	adds	r3, #1
 8009924:	60fb      	str	r3, [r7, #12]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2b07      	cmp	r3, #7
 800992a:	d9e7      	bls.n	80098fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800992c:	bf00      	nop
 800992e:	bf00      	nop
 8009930:	3714      	adds	r7, #20
 8009932:	46bd      	mov	sp, r7
 8009934:	bc80      	pop	{r7}
 8009936:	4770      	bx	lr
 8009938:	200023cc 	.word	0x200023cc

0800993c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800993c:	b580      	push	{r7, lr}
 800993e:	b086      	sub	sp, #24
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800994c:	f001 fb56 	bl	800affc <vPortEnterCritical>
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009956:	b25b      	sxtb	r3, r3
 8009958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800995c:	d103      	bne.n	8009966 <vQueueWaitForMessageRestricted+0x2a>
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800996c:	b25b      	sxtb	r3, r3
 800996e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009972:	d103      	bne.n	800997c <vQueueWaitForMessageRestricted+0x40>
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800997c:	f001 fb6e 	bl	800b05c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009984:	2b00      	cmp	r3, #0
 8009986:	d106      	bne.n	8009996 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	3324      	adds	r3, #36	; 0x24
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	68b9      	ldr	r1, [r7, #8]
 8009990:	4618      	mov	r0, r3
 8009992:	f000 fc5b 	bl	800a24c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009996:	6978      	ldr	r0, [r7, #20]
 8009998:	f7ff ff28 	bl	80097ec <prvUnlockQueue>
	}
 800999c:	bf00      	nop
 800999e:	3718      	adds	r7, #24
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b08e      	sub	sp, #56	; 0x38
 80099a8:	af04      	add	r7, sp, #16
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
 80099b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80099b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10a      	bne.n	80099ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80099b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099bc:	f383 8811 	msr	BASEPRI, r3
 80099c0:	f3bf 8f6f 	isb	sy
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	623b      	str	r3, [r7, #32]
}
 80099ca:	bf00      	nop
 80099cc:	e7fe      	b.n	80099cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80099ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10a      	bne.n	80099ea <xTaskCreateStatic+0x46>
	__asm volatile
 80099d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	61fb      	str	r3, [r7, #28]
}
 80099e6:	bf00      	nop
 80099e8:	e7fe      	b.n	80099e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80099ea:	23bc      	movs	r3, #188	; 0xbc
 80099ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	2bbc      	cmp	r3, #188	; 0xbc
 80099f2:	d00a      	beq.n	8009a0a <xTaskCreateStatic+0x66>
	__asm volatile
 80099f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f8:	f383 8811 	msr	BASEPRI, r3
 80099fc:	f3bf 8f6f 	isb	sy
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	61bb      	str	r3, [r7, #24]
}
 8009a06:	bf00      	nop
 8009a08:	e7fe      	b.n	8009a08 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d01e      	beq.n	8009a4e <xTaskCreateStatic+0xaa>
 8009a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d01b      	beq.n	8009a4e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a18:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a1e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a22:	2202      	movs	r2, #2
 8009a24:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a28:	2300      	movs	r3, #0
 8009a2a:	9303      	str	r3, [sp, #12]
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	9302      	str	r3, [sp, #8]
 8009a30:	f107 0314 	add.w	r3, r7, #20
 8009a34:	9301      	str	r3, [sp, #4]
 8009a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	68b9      	ldr	r1, [r7, #8]
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f000 f851 	bl	8009ae8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a48:	f000 f8ec 	bl	8009c24 <prvAddNewTaskToReadyList>
 8009a4c:	e001      	b.n	8009a52 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009a52:	697b      	ldr	r3, [r7, #20]
	}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3728      	adds	r7, #40	; 0x28
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b08c      	sub	sp, #48	; 0x30
 8009a60:	af04      	add	r7, sp, #16
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	603b      	str	r3, [r7, #0]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a6c:	88fb      	ldrh	r3, [r7, #6]
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4618      	mov	r0, r3
 8009a72:	f001 fbc3 	bl	800b1fc <pvPortMalloc>
 8009a76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00e      	beq.n	8009a9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009a7e:	20bc      	movs	r0, #188	; 0xbc
 8009a80:	f001 fbbc 	bl	800b1fc <pvPortMalloc>
 8009a84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d003      	beq.n	8009a94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	631a      	str	r2, [r3, #48]	; 0x30
 8009a92:	e005      	b.n	8009aa0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009a94:	6978      	ldr	r0, [r7, #20]
 8009a96:	f001 fc75 	bl	800b384 <vPortFree>
 8009a9a:	e001      	b.n	8009aa0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d017      	beq.n	8009ad6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009aae:	88fa      	ldrh	r2, [r7, #6]
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	9303      	str	r3, [sp, #12]
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	9302      	str	r3, [sp, #8]
 8009ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aba:	9301      	str	r3, [sp, #4]
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	68b9      	ldr	r1, [r7, #8]
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f000 f80f 	bl	8009ae8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009aca:	69f8      	ldr	r0, [r7, #28]
 8009acc:	f000 f8aa 	bl	8009c24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	61bb      	str	r3, [r7, #24]
 8009ad4:	e002      	b.n	8009adc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ada:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009adc:	69bb      	ldr	r3, [r7, #24]
	}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3720      	adds	r7, #32
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
	...

08009ae8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b088      	sub	sp, #32
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
 8009af4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	461a      	mov	r2, r3
 8009b00:	21a5      	movs	r1, #165	; 0xa5
 8009b02:	f002 fa09 	bl	800bf18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b10:	3b01      	subs	r3, #1
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	f023 0307 	bic.w	r3, r3, #7
 8009b1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	f003 0307 	and.w	r3, r3, #7
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	617b      	str	r3, [r7, #20]
}
 8009b3c:	bf00      	nop
 8009b3e:	e7fe      	b.n	8009b3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b40:	2300      	movs	r3, #0
 8009b42:	61fb      	str	r3, [r7, #28]
 8009b44:	e012      	b.n	8009b6c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b46:	68ba      	ldr	r2, [r7, #8]
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	7819      	ldrb	r1, [r3, #0]
 8009b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	4413      	add	r3, r2
 8009b54:	3334      	adds	r3, #52	; 0x34
 8009b56:	460a      	mov	r2, r1
 8009b58:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	4413      	add	r3, r2
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d006      	beq.n	8009b74 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	61fb      	str	r3, [r7, #28]
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	2b0f      	cmp	r3, #15
 8009b70:	d9e9      	bls.n	8009b46 <prvInitialiseNewTask+0x5e>
 8009b72:	e000      	b.n	8009b76 <prvInitialiseNewTask+0x8e>
		{
			break;
 8009b74:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b80:	2b37      	cmp	r3, #55	; 0x37
 8009b82:	d901      	bls.n	8009b88 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b84:	2337      	movs	r3, #55	; 0x37
 8009b86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b96:	2200      	movs	r2, #0
 8009b98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7ff f98b 	bl	8008eba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba6:	3318      	adds	r3, #24
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7ff f986 	bl	8008eba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd6:	3354      	adds	r3, #84	; 0x54
 8009bd8:	2260      	movs	r2, #96	; 0x60
 8009bda:	2100      	movs	r1, #0
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f002 f99b 	bl	800bf18 <memset>
 8009be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be4:	4a0c      	ldr	r2, [pc, #48]	; (8009c18 <prvInitialiseNewTask+0x130>)
 8009be6:	659a      	str	r2, [r3, #88]	; 0x58
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	4a0c      	ldr	r2, [pc, #48]	; (8009c1c <prvInitialiseNewTask+0x134>)
 8009bec:	65da      	str	r2, [r3, #92]	; 0x5c
 8009bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf0:	4a0b      	ldr	r2, [pc, #44]	; (8009c20 <prvInitialiseNewTask+0x138>)
 8009bf2:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	68f9      	ldr	r1, [r7, #12]
 8009bf8:	69b8      	ldr	r0, [r7, #24]
 8009bfa:	f001 f90b 	bl	800ae14 <pxPortInitialiseStack>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c02:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d002      	beq.n	8009c10 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c10:	bf00      	nop
 8009c12:	3720      	adds	r7, #32
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	0800c1dc 	.word	0x0800c1dc
 8009c1c:	0800c1fc 	.word	0x0800c1fc
 8009c20:	0800c1bc 	.word	0x0800c1bc

08009c24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009c2c:	f001 f9e6 	bl	800affc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009c30:	4b2d      	ldr	r3, [pc, #180]	; (8009ce8 <prvAddNewTaskToReadyList+0xc4>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	3301      	adds	r3, #1
 8009c36:	4a2c      	ldr	r2, [pc, #176]	; (8009ce8 <prvAddNewTaskToReadyList+0xc4>)
 8009c38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c3a:	4b2c      	ldr	r3, [pc, #176]	; (8009cec <prvAddNewTaskToReadyList+0xc8>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d109      	bne.n	8009c56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c42:	4a2a      	ldr	r2, [pc, #168]	; (8009cec <prvAddNewTaskToReadyList+0xc8>)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c48:	4b27      	ldr	r3, [pc, #156]	; (8009ce8 <prvAddNewTaskToReadyList+0xc4>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d110      	bne.n	8009c72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c50:	f000 fc28 	bl	800a4a4 <prvInitialiseTaskLists>
 8009c54:	e00d      	b.n	8009c72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c56:	4b26      	ldr	r3, [pc, #152]	; (8009cf0 <prvAddNewTaskToReadyList+0xcc>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d109      	bne.n	8009c72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c5e:	4b23      	ldr	r3, [pc, #140]	; (8009cec <prvAddNewTaskToReadyList+0xc8>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d802      	bhi.n	8009c72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c6c:	4a1f      	ldr	r2, [pc, #124]	; (8009cec <prvAddNewTaskToReadyList+0xc8>)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c72:	4b20      	ldr	r3, [pc, #128]	; (8009cf4 <prvAddNewTaskToReadyList+0xd0>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	3301      	adds	r3, #1
 8009c78:	4a1e      	ldr	r2, [pc, #120]	; (8009cf4 <prvAddNewTaskToReadyList+0xd0>)
 8009c7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c7c:	4b1d      	ldr	r3, [pc, #116]	; (8009cf4 <prvAddNewTaskToReadyList+0xd0>)
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c88:	4b1b      	ldr	r3, [pc, #108]	; (8009cf8 <prvAddNewTaskToReadyList+0xd4>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d903      	bls.n	8009c98 <prvAddNewTaskToReadyList+0x74>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c94:	4a18      	ldr	r2, [pc, #96]	; (8009cf8 <prvAddNewTaskToReadyList+0xd4>)
 8009c96:	6013      	str	r3, [r2, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4413      	add	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4a15      	ldr	r2, [pc, #84]	; (8009cfc <prvAddNewTaskToReadyList+0xd8>)
 8009ca6:	441a      	add	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	3304      	adds	r3, #4
 8009cac:	4619      	mov	r1, r3
 8009cae:	4610      	mov	r0, r2
 8009cb0:	f7ff f90f 	bl	8008ed2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009cb4:	f001 f9d2 	bl	800b05c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009cb8:	4b0d      	ldr	r3, [pc, #52]	; (8009cf0 <prvAddNewTaskToReadyList+0xcc>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00e      	beq.n	8009cde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009cc0:	4b0a      	ldr	r3, [pc, #40]	; (8009cec <prvAddNewTaskToReadyList+0xc8>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d207      	bcs.n	8009cde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009cce:	4b0c      	ldr	r3, [pc, #48]	; (8009d00 <prvAddNewTaskToReadyList+0xdc>)
 8009cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cd4:	601a      	str	r2, [r3, #0]
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	20000f7c 	.word	0x20000f7c
 8009cec:	20000aa8 	.word	0x20000aa8
 8009cf0:	20000f88 	.word	0x20000f88
 8009cf4:	20000f98 	.word	0x20000f98
 8009cf8:	20000f84 	.word	0x20000f84
 8009cfc:	20000aac 	.word	0x20000aac
 8009d00:	e000ed04 	.word	0xe000ed04

08009d04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d017      	beq.n	8009d46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009d16:	4b13      	ldr	r3, [pc, #76]	; (8009d64 <vTaskDelay+0x60>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00a      	beq.n	8009d34 <vTaskDelay+0x30>
	__asm volatile
 8009d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	60bb      	str	r3, [r7, #8]
}
 8009d30:	bf00      	nop
 8009d32:	e7fe      	b.n	8009d32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009d34:	f000 f88a 	bl	8009e4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009d38:	2100      	movs	r1, #0
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fd04 	bl	800a748 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009d40:	f000 f892 	bl	8009e68 <xTaskResumeAll>
 8009d44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d107      	bne.n	8009d5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009d4c:	4b06      	ldr	r3, [pc, #24]	; (8009d68 <vTaskDelay+0x64>)
 8009d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d52:	601a      	str	r2, [r3, #0]
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d5c:	bf00      	nop
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	20000fa4 	.word	0x20000fa4
 8009d68:	e000ed04 	.word	0xe000ed04

08009d6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b08a      	sub	sp, #40	; 0x28
 8009d70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d72:	2300      	movs	r3, #0
 8009d74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d76:	2300      	movs	r3, #0
 8009d78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d7a:	463a      	mov	r2, r7
 8009d7c:	1d39      	adds	r1, r7, #4
 8009d7e:	f107 0308 	add.w	r3, r7, #8
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7ff f848 	bl	8008e18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d88:	6839      	ldr	r1, [r7, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	9202      	str	r2, [sp, #8]
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	2300      	movs	r3, #0
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	2300      	movs	r3, #0
 8009d98:	460a      	mov	r2, r1
 8009d9a:	4924      	ldr	r1, [pc, #144]	; (8009e2c <vTaskStartScheduler+0xc0>)
 8009d9c:	4824      	ldr	r0, [pc, #144]	; (8009e30 <vTaskStartScheduler+0xc4>)
 8009d9e:	f7ff fe01 	bl	80099a4 <xTaskCreateStatic>
 8009da2:	4603      	mov	r3, r0
 8009da4:	4a23      	ldr	r2, [pc, #140]	; (8009e34 <vTaskStartScheduler+0xc8>)
 8009da6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009da8:	4b22      	ldr	r3, [pc, #136]	; (8009e34 <vTaskStartScheduler+0xc8>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d002      	beq.n	8009db6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009db0:	2301      	movs	r3, #1
 8009db2:	617b      	str	r3, [r7, #20]
 8009db4:	e001      	b.n	8009dba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009db6:	2300      	movs	r3, #0
 8009db8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d102      	bne.n	8009dc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009dc0:	f000 fd16 	bl	800a7f0 <xTimerCreateTimerTask>
 8009dc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d11b      	bne.n	8009e04 <vTaskStartScheduler+0x98>
	__asm volatile
 8009dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	613b      	str	r3, [r7, #16]
}
 8009dde:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009de0:	4b15      	ldr	r3, [pc, #84]	; (8009e38 <vTaskStartScheduler+0xcc>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	3354      	adds	r3, #84	; 0x54
 8009de6:	4a15      	ldr	r2, [pc, #84]	; (8009e3c <vTaskStartScheduler+0xd0>)
 8009de8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009dea:	4b15      	ldr	r3, [pc, #84]	; (8009e40 <vTaskStartScheduler+0xd4>)
 8009dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009df0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009df2:	4b14      	ldr	r3, [pc, #80]	; (8009e44 <vTaskStartScheduler+0xd8>)
 8009df4:	2201      	movs	r2, #1
 8009df6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009df8:	4b13      	ldr	r3, [pc, #76]	; (8009e48 <vTaskStartScheduler+0xdc>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009dfe:	f001 f88b 	bl	800af18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e02:	e00e      	b.n	8009e22 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e0a:	d10a      	bne.n	8009e22 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	60fb      	str	r3, [r7, #12]
}
 8009e1e:	bf00      	nop
 8009e20:	e7fe      	b.n	8009e20 <vTaskStartScheduler+0xb4>
}
 8009e22:	bf00      	nop
 8009e24:	3718      	adds	r7, #24
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	0800c0f0 	.word	0x0800c0f0
 8009e30:	0800a475 	.word	0x0800a475
 8009e34:	20000fa0 	.word	0x20000fa0
 8009e38:	20000aa8 	.word	0x20000aa8
 8009e3c:	20000194 	.word	0x20000194
 8009e40:	20000f9c 	.word	0x20000f9c
 8009e44:	20000f88 	.word	0x20000f88
 8009e48:	20000f80 	.word	0x20000f80

08009e4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009e50:	4b04      	ldr	r3, [pc, #16]	; (8009e64 <vTaskSuspendAll+0x18>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3301      	adds	r3, #1
 8009e56:	4a03      	ldr	r2, [pc, #12]	; (8009e64 <vTaskSuspendAll+0x18>)
 8009e58:	6013      	str	r3, [r2, #0]
}
 8009e5a:	bf00      	nop
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bc80      	pop	{r7}
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	20000fa4 	.word	0x20000fa4

08009e68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e72:	2300      	movs	r3, #0
 8009e74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e76:	4b42      	ldr	r3, [pc, #264]	; (8009f80 <xTaskResumeAll+0x118>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10a      	bne.n	8009e94 <xTaskResumeAll+0x2c>
	__asm volatile
 8009e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	603b      	str	r3, [r7, #0]
}
 8009e90:	bf00      	nop
 8009e92:	e7fe      	b.n	8009e92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e94:	f001 f8b2 	bl	800affc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e98:	4b39      	ldr	r3, [pc, #228]	; (8009f80 <xTaskResumeAll+0x118>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	4a38      	ldr	r2, [pc, #224]	; (8009f80 <xTaskResumeAll+0x118>)
 8009ea0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ea2:	4b37      	ldr	r3, [pc, #220]	; (8009f80 <xTaskResumeAll+0x118>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d162      	bne.n	8009f70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009eaa:	4b36      	ldr	r3, [pc, #216]	; (8009f84 <xTaskResumeAll+0x11c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d05e      	beq.n	8009f70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009eb2:	e02f      	b.n	8009f14 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009eb4:	4b34      	ldr	r3, [pc, #208]	; (8009f88 <xTaskResumeAll+0x120>)
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	3318      	adds	r3, #24
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7ff f861 	bl	8008f88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	3304      	adds	r3, #4
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7ff f85c 	bl	8008f88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed4:	4b2d      	ldr	r3, [pc, #180]	; (8009f8c <xTaskResumeAll+0x124>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d903      	bls.n	8009ee4 <xTaskResumeAll+0x7c>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee0:	4a2a      	ldr	r2, [pc, #168]	; (8009f8c <xTaskResumeAll+0x124>)
 8009ee2:	6013      	str	r3, [r2, #0]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee8:	4613      	mov	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4a27      	ldr	r2, [pc, #156]	; (8009f90 <xTaskResumeAll+0x128>)
 8009ef2:	441a      	add	r2, r3
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	4619      	mov	r1, r3
 8009efa:	4610      	mov	r0, r2
 8009efc:	f7fe ffe9 	bl	8008ed2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f04:	4b23      	ldr	r3, [pc, #140]	; (8009f94 <xTaskResumeAll+0x12c>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d302      	bcc.n	8009f14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009f0e:	4b22      	ldr	r3, [pc, #136]	; (8009f98 <xTaskResumeAll+0x130>)
 8009f10:	2201      	movs	r2, #1
 8009f12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f14:	4b1c      	ldr	r3, [pc, #112]	; (8009f88 <xTaskResumeAll+0x120>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1cb      	bne.n	8009eb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009f22:	f000 fb61 	bl	800a5e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009f26:	4b1d      	ldr	r3, [pc, #116]	; (8009f9c <xTaskResumeAll+0x134>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d010      	beq.n	8009f54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009f32:	f000 f845 	bl	8009fc0 <xTaskIncrementTick>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009f3c:	4b16      	ldr	r3, [pc, #88]	; (8009f98 <xTaskResumeAll+0x130>)
 8009f3e:	2201      	movs	r2, #1
 8009f40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	3b01      	subs	r3, #1
 8009f46:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1f1      	bne.n	8009f32 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009f4e:	4b13      	ldr	r3, [pc, #76]	; (8009f9c <xTaskResumeAll+0x134>)
 8009f50:	2200      	movs	r2, #0
 8009f52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f54:	4b10      	ldr	r3, [pc, #64]	; (8009f98 <xTaskResumeAll+0x130>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d009      	beq.n	8009f70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f60:	4b0f      	ldr	r3, [pc, #60]	; (8009fa0 <xTaskResumeAll+0x138>)
 8009f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f70:	f001 f874 	bl	800b05c <vPortExitCritical>

	return xAlreadyYielded;
 8009f74:	68bb      	ldr	r3, [r7, #8]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	20000fa4 	.word	0x20000fa4
 8009f84:	20000f7c 	.word	0x20000f7c
 8009f88:	20000f3c 	.word	0x20000f3c
 8009f8c:	20000f84 	.word	0x20000f84
 8009f90:	20000aac 	.word	0x20000aac
 8009f94:	20000aa8 	.word	0x20000aa8
 8009f98:	20000f90 	.word	0x20000f90
 8009f9c:	20000f8c 	.word	0x20000f8c
 8009fa0:	e000ed04 	.word	0xe000ed04

08009fa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009faa:	4b04      	ldr	r3, [pc, #16]	; (8009fbc <xTaskGetTickCount+0x18>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009fb0:	687b      	ldr	r3, [r7, #4]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bc80      	pop	{r7}
 8009fba:	4770      	bx	lr
 8009fbc:	20000f80 	.word	0x20000f80

08009fc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fca:	4b51      	ldr	r3, [pc, #324]	; (800a110 <xTaskIncrementTick+0x150>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f040 808e 	bne.w	800a0f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009fd4:	4b4f      	ldr	r3, [pc, #316]	; (800a114 <xTaskIncrementTick+0x154>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009fdc:	4a4d      	ldr	r2, [pc, #308]	; (800a114 <xTaskIncrementTick+0x154>)
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d120      	bne.n	800a02a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009fe8:	4b4b      	ldr	r3, [pc, #300]	; (800a118 <xTaskIncrementTick+0x158>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00a      	beq.n	800a008 <xTaskIncrementTick+0x48>
	__asm volatile
 8009ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	603b      	str	r3, [r7, #0]
}
 800a004:	bf00      	nop
 800a006:	e7fe      	b.n	800a006 <xTaskIncrementTick+0x46>
 800a008:	4b43      	ldr	r3, [pc, #268]	; (800a118 <xTaskIncrementTick+0x158>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	60fb      	str	r3, [r7, #12]
 800a00e:	4b43      	ldr	r3, [pc, #268]	; (800a11c <xTaskIncrementTick+0x15c>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a41      	ldr	r2, [pc, #260]	; (800a118 <xTaskIncrementTick+0x158>)
 800a014:	6013      	str	r3, [r2, #0]
 800a016:	4a41      	ldr	r2, [pc, #260]	; (800a11c <xTaskIncrementTick+0x15c>)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6013      	str	r3, [r2, #0]
 800a01c:	4b40      	ldr	r3, [pc, #256]	; (800a120 <xTaskIncrementTick+0x160>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	3301      	adds	r3, #1
 800a022:	4a3f      	ldr	r2, [pc, #252]	; (800a120 <xTaskIncrementTick+0x160>)
 800a024:	6013      	str	r3, [r2, #0]
 800a026:	f000 fadf 	bl	800a5e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a02a:	4b3e      	ldr	r3, [pc, #248]	; (800a124 <xTaskIncrementTick+0x164>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	693a      	ldr	r2, [r7, #16]
 800a030:	429a      	cmp	r2, r3
 800a032:	d34e      	bcc.n	800a0d2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a034:	4b38      	ldr	r3, [pc, #224]	; (800a118 <xTaskIncrementTick+0x158>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d101      	bne.n	800a042 <xTaskIncrementTick+0x82>
 800a03e:	2301      	movs	r3, #1
 800a040:	e000      	b.n	800a044 <xTaskIncrementTick+0x84>
 800a042:	2300      	movs	r3, #0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d004      	beq.n	800a052 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a048:	4b36      	ldr	r3, [pc, #216]	; (800a124 <xTaskIncrementTick+0x164>)
 800a04a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a04e:	601a      	str	r2, [r3, #0]
					break;
 800a050:	e03f      	b.n	800a0d2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a052:	4b31      	ldr	r3, [pc, #196]	; (800a118 <xTaskIncrementTick+0x158>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a062:	693a      	ldr	r2, [r7, #16]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	429a      	cmp	r2, r3
 800a068:	d203      	bcs.n	800a072 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a06a:	4a2e      	ldr	r2, [pc, #184]	; (800a124 <xTaskIncrementTick+0x164>)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6013      	str	r3, [r2, #0]
						break;
 800a070:	e02f      	b.n	800a0d2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	3304      	adds	r3, #4
 800a076:	4618      	mov	r0, r3
 800a078:	f7fe ff86 	bl	8008f88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a080:	2b00      	cmp	r3, #0
 800a082:	d004      	beq.n	800a08e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	3318      	adds	r3, #24
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fe ff7d 	bl	8008f88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a092:	4b25      	ldr	r3, [pc, #148]	; (800a128 <xTaskIncrementTick+0x168>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	429a      	cmp	r2, r3
 800a098:	d903      	bls.n	800a0a2 <xTaskIncrementTick+0xe2>
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09e:	4a22      	ldr	r2, [pc, #136]	; (800a128 <xTaskIncrementTick+0x168>)
 800a0a0:	6013      	str	r3, [r2, #0]
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4a1f      	ldr	r2, [pc, #124]	; (800a12c <xTaskIncrementTick+0x16c>)
 800a0b0:	441a      	add	r2, r3
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	f7fe ff0a 	bl	8008ed2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c2:	4b1b      	ldr	r3, [pc, #108]	; (800a130 <xTaskIncrementTick+0x170>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d3b3      	bcc.n	800a034 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0d0:	e7b0      	b.n	800a034 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a0d2:	4b17      	ldr	r3, [pc, #92]	; (800a130 <xTaskIncrementTick+0x170>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d8:	4914      	ldr	r1, [pc, #80]	; (800a12c <xTaskIncrementTick+0x16c>)
 800a0da:	4613      	mov	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	440b      	add	r3, r1
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d907      	bls.n	800a0fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	617b      	str	r3, [r7, #20]
 800a0ee:	e004      	b.n	800a0fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a0f0:	4b10      	ldr	r3, [pc, #64]	; (800a134 <xTaskIncrementTick+0x174>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	4a0f      	ldr	r2, [pc, #60]	; (800a134 <xTaskIncrementTick+0x174>)
 800a0f8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a0fa:	4b0f      	ldr	r3, [pc, #60]	; (800a138 <xTaskIncrementTick+0x178>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800a102:	2301      	movs	r3, #1
 800a104:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a106:	697b      	ldr	r3, [r7, #20]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3718      	adds	r7, #24
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	20000fa4 	.word	0x20000fa4
 800a114:	20000f80 	.word	0x20000f80
 800a118:	20000f34 	.word	0x20000f34
 800a11c:	20000f38 	.word	0x20000f38
 800a120:	20000f94 	.word	0x20000f94
 800a124:	20000f9c 	.word	0x20000f9c
 800a128:	20000f84 	.word	0x20000f84
 800a12c:	20000aac 	.word	0x20000aac
 800a130:	20000aa8 	.word	0x20000aa8
 800a134:	20000f8c 	.word	0x20000f8c
 800a138:	20000f90 	.word	0x20000f90

0800a13c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a142:	4b2a      	ldr	r3, [pc, #168]	; (800a1ec <vTaskSwitchContext+0xb0>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d003      	beq.n	800a152 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a14a:	4b29      	ldr	r3, [pc, #164]	; (800a1f0 <vTaskSwitchContext+0xb4>)
 800a14c:	2201      	movs	r2, #1
 800a14e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a150:	e046      	b.n	800a1e0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a152:	4b27      	ldr	r3, [pc, #156]	; (800a1f0 <vTaskSwitchContext+0xb4>)
 800a154:	2200      	movs	r2, #0
 800a156:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a158:	4b26      	ldr	r3, [pc, #152]	; (800a1f4 <vTaskSwitchContext+0xb8>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	60fb      	str	r3, [r7, #12]
 800a15e:	e010      	b.n	800a182 <vTaskSwitchContext+0x46>
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10a      	bne.n	800a17c <vTaskSwitchContext+0x40>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	607b      	str	r3, [r7, #4]
}
 800a178:	bf00      	nop
 800a17a:	e7fe      	b.n	800a17a <vTaskSwitchContext+0x3e>
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	3b01      	subs	r3, #1
 800a180:	60fb      	str	r3, [r7, #12]
 800a182:	491d      	ldr	r1, [pc, #116]	; (800a1f8 <vTaskSwitchContext+0xbc>)
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	4613      	mov	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4413      	add	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	440b      	add	r3, r1
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d0e4      	beq.n	800a160 <vTaskSwitchContext+0x24>
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	4613      	mov	r3, r2
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	4413      	add	r3, r2
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	4a15      	ldr	r2, [pc, #84]	; (800a1f8 <vTaskSwitchContext+0xbc>)
 800a1a2:	4413      	add	r3, r2
 800a1a4:	60bb      	str	r3, [r7, #8]
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	605a      	str	r2, [r3, #4]
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	685a      	ldr	r2, [r3, #4]
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	3308      	adds	r3, #8
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d104      	bne.n	800a1c6 <vTaskSwitchContext+0x8a>
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	685a      	ldr	r2, [r3, #4]
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	605a      	str	r2, [r3, #4]
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	4a0b      	ldr	r2, [pc, #44]	; (800a1fc <vTaskSwitchContext+0xc0>)
 800a1ce:	6013      	str	r3, [r2, #0]
 800a1d0:	4a08      	ldr	r2, [pc, #32]	; (800a1f4 <vTaskSwitchContext+0xb8>)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a1d6:	4b09      	ldr	r3, [pc, #36]	; (800a1fc <vTaskSwitchContext+0xc0>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	3354      	adds	r3, #84	; 0x54
 800a1dc:	4a08      	ldr	r2, [pc, #32]	; (800a200 <vTaskSwitchContext+0xc4>)
 800a1de:	6013      	str	r3, [r2, #0]
}
 800a1e0:	bf00      	nop
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bc80      	pop	{r7}
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	20000fa4 	.word	0x20000fa4
 800a1f0:	20000f90 	.word	0x20000f90
 800a1f4:	20000f84 	.word	0x20000f84
 800a1f8:	20000aac 	.word	0x20000aac
 800a1fc:	20000aa8 	.word	0x20000aa8
 800a200:	20000194 	.word	0x20000194

0800a204 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10a      	bne.n	800a22a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	60fb      	str	r3, [r7, #12]
}
 800a226:	bf00      	nop
 800a228:	e7fe      	b.n	800a228 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a22a:	4b07      	ldr	r3, [pc, #28]	; (800a248 <vTaskPlaceOnEventList+0x44>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	3318      	adds	r3, #24
 800a230:	4619      	mov	r1, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7fe fe70 	bl	8008f18 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a238:	2101      	movs	r1, #1
 800a23a:	6838      	ldr	r0, [r7, #0]
 800a23c:	f000 fa84 	bl	800a748 <prvAddCurrentTaskToDelayedList>
}
 800a240:	bf00      	nop
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	20000aa8 	.word	0x20000aa8

0800a24c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b086      	sub	sp, #24
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10a      	bne.n	800a274 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	617b      	str	r3, [r7, #20]
}
 800a270:	bf00      	nop
 800a272:	e7fe      	b.n	800a272 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a274:	4b0a      	ldr	r3, [pc, #40]	; (800a2a0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	3318      	adds	r3, #24
 800a27a:	4619      	mov	r1, r3
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f7fe fe28 	bl	8008ed2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d002      	beq.n	800a28e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a28c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a28e:	6879      	ldr	r1, [r7, #4]
 800a290:	68b8      	ldr	r0, [r7, #8]
 800a292:	f000 fa59 	bl	800a748 <prvAddCurrentTaskToDelayedList>
	}
 800a296:	bf00      	nop
 800a298:	3718      	adds	r7, #24
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20000aa8 	.word	0x20000aa8

0800a2a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b086      	sub	sp, #24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10a      	bne.n	800a2d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2be:	f383 8811 	msr	BASEPRI, r3
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	f3bf 8f4f 	dsb	sy
 800a2ca:	60fb      	str	r3, [r7, #12]
}
 800a2cc:	bf00      	nop
 800a2ce:	e7fe      	b.n	800a2ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	3318      	adds	r3, #24
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7fe fe57 	bl	8008f88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2da:	4b1e      	ldr	r3, [pc, #120]	; (800a354 <xTaskRemoveFromEventList+0xb0>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d11d      	bne.n	800a31e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	3304      	adds	r3, #4
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7fe fe4e 	bl	8008f88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f0:	4b19      	ldr	r3, [pc, #100]	; (800a358 <xTaskRemoveFromEventList+0xb4>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d903      	bls.n	800a300 <xTaskRemoveFromEventList+0x5c>
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fc:	4a16      	ldr	r2, [pc, #88]	; (800a358 <xTaskRemoveFromEventList+0xb4>)
 800a2fe:	6013      	str	r3, [r2, #0]
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a304:	4613      	mov	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4a13      	ldr	r2, [pc, #76]	; (800a35c <xTaskRemoveFromEventList+0xb8>)
 800a30e:	441a      	add	r2, r3
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	3304      	adds	r3, #4
 800a314:	4619      	mov	r1, r3
 800a316:	4610      	mov	r0, r2
 800a318:	f7fe fddb 	bl	8008ed2 <vListInsertEnd>
 800a31c:	e005      	b.n	800a32a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	3318      	adds	r3, #24
 800a322:	4619      	mov	r1, r3
 800a324:	480e      	ldr	r0, [pc, #56]	; (800a360 <xTaskRemoveFromEventList+0xbc>)
 800a326:	f7fe fdd4 	bl	8008ed2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a32e:	4b0d      	ldr	r3, [pc, #52]	; (800a364 <xTaskRemoveFromEventList+0xc0>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a334:	429a      	cmp	r2, r3
 800a336:	d905      	bls.n	800a344 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a338:	2301      	movs	r3, #1
 800a33a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a33c:	4b0a      	ldr	r3, [pc, #40]	; (800a368 <xTaskRemoveFromEventList+0xc4>)
 800a33e:	2201      	movs	r2, #1
 800a340:	601a      	str	r2, [r3, #0]
 800a342:	e001      	b.n	800a348 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a344:	2300      	movs	r3, #0
 800a346:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a348:	697b      	ldr	r3, [r7, #20]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3718      	adds	r7, #24
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	20000fa4 	.word	0x20000fa4
 800a358:	20000f84 	.word	0x20000f84
 800a35c:	20000aac 	.word	0x20000aac
 800a360:	20000f3c 	.word	0x20000f3c
 800a364:	20000aa8 	.word	0x20000aa8
 800a368:	20000f90 	.word	0x20000f90

0800a36c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a374:	4b06      	ldr	r3, [pc, #24]	; (800a390 <vTaskInternalSetTimeOutState+0x24>)
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a37c:	4b05      	ldr	r3, [pc, #20]	; (800a394 <vTaskInternalSetTimeOutState+0x28>)
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	605a      	str	r2, [r3, #4]
}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	bc80      	pop	{r7}
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	20000f94 	.word	0x20000f94
 800a394:	20000f80 	.word	0x20000f80

0800a398 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b088      	sub	sp, #32
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10a      	bne.n	800a3be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	613b      	str	r3, [r7, #16]
}
 800a3ba:	bf00      	nop
 800a3bc:	e7fe      	b.n	800a3bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d10a      	bne.n	800a3da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	60fb      	str	r3, [r7, #12]
}
 800a3d6:	bf00      	nop
 800a3d8:	e7fe      	b.n	800a3d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a3da:	f000 fe0f 	bl	800affc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a3de:	4b1d      	ldr	r3, [pc, #116]	; (800a454 <xTaskCheckForTimeOut+0xbc>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	69ba      	ldr	r2, [r7, #24]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3f6:	d102      	bne.n	800a3fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	61fb      	str	r3, [r7, #28]
 800a3fc:	e023      	b.n	800a446 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	4b15      	ldr	r3, [pc, #84]	; (800a458 <xTaskCheckForTimeOut+0xc0>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	429a      	cmp	r2, r3
 800a408:	d007      	beq.n	800a41a <xTaskCheckForTimeOut+0x82>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	69ba      	ldr	r2, [r7, #24]
 800a410:	429a      	cmp	r2, r3
 800a412:	d302      	bcc.n	800a41a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a414:	2301      	movs	r3, #1
 800a416:	61fb      	str	r3, [r7, #28]
 800a418:	e015      	b.n	800a446 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	429a      	cmp	r2, r3
 800a422:	d20b      	bcs.n	800a43c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	1ad2      	subs	r2, r2, r3
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f7ff ff9b 	bl	800a36c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a436:	2300      	movs	r3, #0
 800a438:	61fb      	str	r3, [r7, #28]
 800a43a:	e004      	b.n	800a446 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	2200      	movs	r2, #0
 800a440:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a442:	2301      	movs	r3, #1
 800a444:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a446:	f000 fe09 	bl	800b05c <vPortExitCritical>

	return xReturn;
 800a44a:	69fb      	ldr	r3, [r7, #28]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3720      	adds	r7, #32
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	20000f80 	.word	0x20000f80
 800a458:	20000f94 	.word	0x20000f94

0800a45c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a45c:	b480      	push	{r7}
 800a45e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a460:	4b03      	ldr	r3, [pc, #12]	; (800a470 <vTaskMissedYield+0x14>)
 800a462:	2201      	movs	r2, #1
 800a464:	601a      	str	r2, [r3, #0]
}
 800a466:	bf00      	nop
 800a468:	46bd      	mov	sp, r7
 800a46a:	bc80      	pop	{r7}
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	20000f90 	.word	0x20000f90

0800a474 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a47c:	f000 f852 	bl	800a524 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a480:	4b06      	ldr	r3, [pc, #24]	; (800a49c <prvIdleTask+0x28>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2b01      	cmp	r3, #1
 800a486:	d9f9      	bls.n	800a47c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a488:	4b05      	ldr	r3, [pc, #20]	; (800a4a0 <prvIdleTask+0x2c>)
 800a48a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a48e:	601a      	str	r2, [r3, #0]
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a498:	e7f0      	b.n	800a47c <prvIdleTask+0x8>
 800a49a:	bf00      	nop
 800a49c:	20000aac 	.word	0x20000aac
 800a4a0:	e000ed04 	.word	0xe000ed04

0800a4a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	607b      	str	r3, [r7, #4]
 800a4ae:	e00c      	b.n	800a4ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4413      	add	r3, r2
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	4a12      	ldr	r2, [pc, #72]	; (800a504 <prvInitialiseTaskLists+0x60>)
 800a4bc:	4413      	add	r3, r2
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fe fcdc 	bl	8008e7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	607b      	str	r3, [r7, #4]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2b37      	cmp	r3, #55	; 0x37
 800a4ce:	d9ef      	bls.n	800a4b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a4d0:	480d      	ldr	r0, [pc, #52]	; (800a508 <prvInitialiseTaskLists+0x64>)
 800a4d2:	f7fe fcd3 	bl	8008e7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a4d6:	480d      	ldr	r0, [pc, #52]	; (800a50c <prvInitialiseTaskLists+0x68>)
 800a4d8:	f7fe fcd0 	bl	8008e7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a4dc:	480c      	ldr	r0, [pc, #48]	; (800a510 <prvInitialiseTaskLists+0x6c>)
 800a4de:	f7fe fccd 	bl	8008e7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a4e2:	480c      	ldr	r0, [pc, #48]	; (800a514 <prvInitialiseTaskLists+0x70>)
 800a4e4:	f7fe fcca 	bl	8008e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a4e8:	480b      	ldr	r0, [pc, #44]	; (800a518 <prvInitialiseTaskLists+0x74>)
 800a4ea:	f7fe fcc7 	bl	8008e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a4ee:	4b0b      	ldr	r3, [pc, #44]	; (800a51c <prvInitialiseTaskLists+0x78>)
 800a4f0:	4a05      	ldr	r2, [pc, #20]	; (800a508 <prvInitialiseTaskLists+0x64>)
 800a4f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a4f4:	4b0a      	ldr	r3, [pc, #40]	; (800a520 <prvInitialiseTaskLists+0x7c>)
 800a4f6:	4a05      	ldr	r2, [pc, #20]	; (800a50c <prvInitialiseTaskLists+0x68>)
 800a4f8:	601a      	str	r2, [r3, #0]
}
 800a4fa:	bf00      	nop
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	20000aac 	.word	0x20000aac
 800a508:	20000f0c 	.word	0x20000f0c
 800a50c:	20000f20 	.word	0x20000f20
 800a510:	20000f3c 	.word	0x20000f3c
 800a514:	20000f50 	.word	0x20000f50
 800a518:	20000f68 	.word	0x20000f68
 800a51c:	20000f34 	.word	0x20000f34
 800a520:	20000f38 	.word	0x20000f38

0800a524 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a52a:	e019      	b.n	800a560 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a52c:	f000 fd66 	bl	800affc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a530:	4b10      	ldr	r3, [pc, #64]	; (800a574 <prvCheckTasksWaitingTermination+0x50>)
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	3304      	adds	r3, #4
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7fe fd23 	bl	8008f88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a542:	4b0d      	ldr	r3, [pc, #52]	; (800a578 <prvCheckTasksWaitingTermination+0x54>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	3b01      	subs	r3, #1
 800a548:	4a0b      	ldr	r2, [pc, #44]	; (800a578 <prvCheckTasksWaitingTermination+0x54>)
 800a54a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a54c:	4b0b      	ldr	r3, [pc, #44]	; (800a57c <prvCheckTasksWaitingTermination+0x58>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	3b01      	subs	r3, #1
 800a552:	4a0a      	ldr	r2, [pc, #40]	; (800a57c <prvCheckTasksWaitingTermination+0x58>)
 800a554:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a556:	f000 fd81 	bl	800b05c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 f810 	bl	800a580 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a560:	4b06      	ldr	r3, [pc, #24]	; (800a57c <prvCheckTasksWaitingTermination+0x58>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d1e1      	bne.n	800a52c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a568:	bf00      	nop
 800a56a:	bf00      	nop
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	20000f50 	.word	0x20000f50
 800a578:	20000f7c 	.word	0x20000f7c
 800a57c:	20000f64 	.word	0x20000f64

0800a580 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	3354      	adds	r3, #84	; 0x54
 800a58c:	4618      	mov	r0, r3
 800a58e:	f001 fd25 	bl	800bfdc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d108      	bne.n	800a5ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f000 feef 	bl	800b384 <vPortFree>
				vPortFree( pxTCB );
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 feec 	bl	800b384 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a5ac:	e018      	b.n	800a5e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d103      	bne.n	800a5c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 fee3 	bl	800b384 <vPortFree>
	}
 800a5be:	e00f      	b.n	800a5e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	d00a      	beq.n	800a5e0 <prvDeleteTCB+0x60>
	__asm volatile
 800a5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ce:	f383 8811 	msr	BASEPRI, r3
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	60fb      	str	r3, [r7, #12]
}
 800a5dc:	bf00      	nop
 800a5de:	e7fe      	b.n	800a5de <prvDeleteTCB+0x5e>
	}
 800a5e0:	bf00      	nop
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5ee:	4b0e      	ldr	r3, [pc, #56]	; (800a628 <prvResetNextTaskUnblockTime+0x40>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d101      	bne.n	800a5fc <prvResetNextTaskUnblockTime+0x14>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e000      	b.n	800a5fe <prvResetNextTaskUnblockTime+0x16>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d004      	beq.n	800a60c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a602:	4b0a      	ldr	r3, [pc, #40]	; (800a62c <prvResetNextTaskUnblockTime+0x44>)
 800a604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a608:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a60a:	e008      	b.n	800a61e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a60c:	4b06      	ldr	r3, [pc, #24]	; (800a628 <prvResetNextTaskUnblockTime+0x40>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	4a04      	ldr	r2, [pc, #16]	; (800a62c <prvResetNextTaskUnblockTime+0x44>)
 800a61c:	6013      	str	r3, [r2, #0]
}
 800a61e:	bf00      	nop
 800a620:	370c      	adds	r7, #12
 800a622:	46bd      	mov	sp, r7
 800a624:	bc80      	pop	{r7}
 800a626:	4770      	bx	lr
 800a628:	20000f34 	.word	0x20000f34
 800a62c:	20000f9c 	.word	0x20000f9c

0800a630 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a636:	4b0b      	ldr	r3, [pc, #44]	; (800a664 <xTaskGetSchedulerState+0x34>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d102      	bne.n	800a644 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a63e:	2301      	movs	r3, #1
 800a640:	607b      	str	r3, [r7, #4]
 800a642:	e008      	b.n	800a656 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a644:	4b08      	ldr	r3, [pc, #32]	; (800a668 <xTaskGetSchedulerState+0x38>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d102      	bne.n	800a652 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a64c:	2302      	movs	r3, #2
 800a64e:	607b      	str	r3, [r7, #4]
 800a650:	e001      	b.n	800a656 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a652:	2300      	movs	r3, #0
 800a654:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a656:	687b      	ldr	r3, [r7, #4]
	}
 800a658:	4618      	mov	r0, r3
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bc80      	pop	{r7}
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	20000f88 	.word	0x20000f88
 800a668:	20000fa4 	.word	0x20000fa4

0800a66c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a678:	2300      	movs	r3, #0
 800a67a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d056      	beq.n	800a730 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a682:	4b2e      	ldr	r3, [pc, #184]	; (800a73c <xTaskPriorityDisinherit+0xd0>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	693a      	ldr	r2, [r7, #16]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d00a      	beq.n	800a6a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a690:	f383 8811 	msr	BASEPRI, r3
 800a694:	f3bf 8f6f 	isb	sy
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	60fb      	str	r3, [r7, #12]
}
 800a69e:	bf00      	nop
 800a6a0:	e7fe      	b.n	800a6a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10a      	bne.n	800a6c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ae:	f383 8811 	msr	BASEPRI, r3
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	60bb      	str	r3, [r7, #8]
}
 800a6bc:	bf00      	nop
 800a6be:	e7fe      	b.n	800a6be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6c4:	1e5a      	subs	r2, r3, #1
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d02c      	beq.n	800a730 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d128      	bne.n	800a730 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fe fc50 	bl	8008f88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a700:	4b0f      	ldr	r3, [pc, #60]	; (800a740 <xTaskPriorityDisinherit+0xd4>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	429a      	cmp	r2, r3
 800a706:	d903      	bls.n	800a710 <xTaskPriorityDisinherit+0xa4>
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70c:	4a0c      	ldr	r2, [pc, #48]	; (800a740 <xTaskPriorityDisinherit+0xd4>)
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a714:	4613      	mov	r3, r2
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4a09      	ldr	r2, [pc, #36]	; (800a744 <xTaskPriorityDisinherit+0xd8>)
 800a71e:	441a      	add	r2, r3
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	3304      	adds	r3, #4
 800a724:	4619      	mov	r1, r3
 800a726:	4610      	mov	r0, r2
 800a728:	f7fe fbd3 	bl	8008ed2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a72c:	2301      	movs	r3, #1
 800a72e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a730:	697b      	ldr	r3, [r7, #20]
	}
 800a732:	4618      	mov	r0, r3
 800a734:	3718      	adds	r7, #24
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20000aa8 	.word	0x20000aa8
 800a740:	20000f84 	.word	0x20000f84
 800a744:	20000aac 	.word	0x20000aac

0800a748 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a752:	4b21      	ldr	r3, [pc, #132]	; (800a7d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a758:	4b20      	ldr	r3, [pc, #128]	; (800a7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	3304      	adds	r3, #4
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fe fc12 	bl	8008f88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a76a:	d10a      	bne.n	800a782 <prvAddCurrentTaskToDelayedList+0x3a>
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d007      	beq.n	800a782 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a772:	4b1a      	ldr	r3, [pc, #104]	; (800a7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3304      	adds	r3, #4
 800a778:	4619      	mov	r1, r3
 800a77a:	4819      	ldr	r0, [pc, #100]	; (800a7e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a77c:	f7fe fba9 	bl	8008ed2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a780:	e026      	b.n	800a7d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4413      	add	r3, r2
 800a788:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a78a:	4b14      	ldr	r3, [pc, #80]	; (800a7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	429a      	cmp	r2, r3
 800a798:	d209      	bcs.n	800a7ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a79a:	4b12      	ldr	r3, [pc, #72]	; (800a7e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	4b0f      	ldr	r3, [pc, #60]	; (800a7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	f7fe fbb6 	bl	8008f18 <vListInsert>
}
 800a7ac:	e010      	b.n	800a7d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7ae:	4b0e      	ldr	r3, [pc, #56]	; (800a7e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	4b0a      	ldr	r3, [pc, #40]	; (800a7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	4610      	mov	r0, r2
 800a7bc:	f7fe fbac 	bl	8008f18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a7c0:	4b0a      	ldr	r3, [pc, #40]	; (800a7ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d202      	bcs.n	800a7d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a7ca:	4a08      	ldr	r2, [pc, #32]	; (800a7ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	6013      	str	r3, [r2, #0]
}
 800a7d0:	bf00      	nop
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	20000f80 	.word	0x20000f80
 800a7dc:	20000aa8 	.word	0x20000aa8
 800a7e0:	20000f68 	.word	0x20000f68
 800a7e4:	20000f38 	.word	0x20000f38
 800a7e8:	20000f34 	.word	0x20000f34
 800a7ec:	20000f9c 	.word	0x20000f9c

0800a7f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b08a      	sub	sp, #40	; 0x28
 800a7f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a7fa:	f000 facb 	bl	800ad94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a7fe:	4b1c      	ldr	r3, [pc, #112]	; (800a870 <xTimerCreateTimerTask+0x80>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d021      	beq.n	800a84a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a806:	2300      	movs	r3, #0
 800a808:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a80a:	2300      	movs	r3, #0
 800a80c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a80e:	1d3a      	adds	r2, r7, #4
 800a810:	f107 0108 	add.w	r1, r7, #8
 800a814:	f107 030c 	add.w	r3, r7, #12
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fe fb15 	bl	8008e48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a81e:	6879      	ldr	r1, [r7, #4]
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	9202      	str	r2, [sp, #8]
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	2302      	movs	r3, #2
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	2300      	movs	r3, #0
 800a82e:	460a      	mov	r2, r1
 800a830:	4910      	ldr	r1, [pc, #64]	; (800a874 <xTimerCreateTimerTask+0x84>)
 800a832:	4811      	ldr	r0, [pc, #68]	; (800a878 <xTimerCreateTimerTask+0x88>)
 800a834:	f7ff f8b6 	bl	80099a4 <xTaskCreateStatic>
 800a838:	4603      	mov	r3, r0
 800a83a:	4a10      	ldr	r2, [pc, #64]	; (800a87c <xTimerCreateTimerTask+0x8c>)
 800a83c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a83e:	4b0f      	ldr	r3, [pc, #60]	; (800a87c <xTimerCreateTimerTask+0x8c>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d001      	beq.n	800a84a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a846:	2301      	movs	r3, #1
 800a848:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10a      	bne.n	800a866 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	613b      	str	r3, [r7, #16]
}
 800a862:	bf00      	nop
 800a864:	e7fe      	b.n	800a864 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a866:	697b      	ldr	r3, [r7, #20]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	20000fd8 	.word	0x20000fd8
 800a874:	0800c0f8 	.word	0x0800c0f8
 800a878:	0800a99d 	.word	0x0800a99d
 800a87c:	20000fdc 	.word	0x20000fdc

0800a880 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b08a      	sub	sp, #40	; 0x28
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
 800a88c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a88e:	2300      	movs	r3, #0
 800a890:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10a      	bne.n	800a8ae <xTimerGenericCommand+0x2e>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	623b      	str	r3, [r7, #32]
}
 800a8aa:	bf00      	nop
 800a8ac:	e7fe      	b.n	800a8ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a8ae:	4b1a      	ldr	r3, [pc, #104]	; (800a918 <xTimerGenericCommand+0x98>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d02a      	beq.n	800a90c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	2b05      	cmp	r3, #5
 800a8c6:	dc18      	bgt.n	800a8fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a8c8:	f7ff feb2 	bl	800a630 <xTaskGetSchedulerState>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d109      	bne.n	800a8e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a8d2:	4b11      	ldr	r3, [pc, #68]	; (800a918 <xTimerGenericCommand+0x98>)
 800a8d4:	6818      	ldr	r0, [r3, #0]
 800a8d6:	f107 0110 	add.w	r1, r7, #16
 800a8da:	2300      	movs	r3, #0
 800a8dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8de:	f7fe fc7f 	bl	80091e0 <xQueueGenericSend>
 800a8e2:	6278      	str	r0, [r7, #36]	; 0x24
 800a8e4:	e012      	b.n	800a90c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a8e6:	4b0c      	ldr	r3, [pc, #48]	; (800a918 <xTimerGenericCommand+0x98>)
 800a8e8:	6818      	ldr	r0, [r3, #0]
 800a8ea:	f107 0110 	add.w	r1, r7, #16
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f7fe fc75 	bl	80091e0 <xQueueGenericSend>
 800a8f6:	6278      	str	r0, [r7, #36]	; 0x24
 800a8f8:	e008      	b.n	800a90c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a8fa:	4b07      	ldr	r3, [pc, #28]	; (800a918 <xTimerGenericCommand+0x98>)
 800a8fc:	6818      	ldr	r0, [r3, #0]
 800a8fe:	f107 0110 	add.w	r1, r7, #16
 800a902:	2300      	movs	r3, #0
 800a904:	683a      	ldr	r2, [r7, #0]
 800a906:	f7fe fd69 	bl	80093dc <xQueueGenericSendFromISR>
 800a90a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3728      	adds	r7, #40	; 0x28
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	20000fd8 	.word	0x20000fd8

0800a91c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b088      	sub	sp, #32
 800a920:	af02      	add	r7, sp, #8
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a926:	4b1c      	ldr	r3, [pc, #112]	; (800a998 <prvProcessExpiredTimer+0x7c>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	3304      	adds	r3, #4
 800a934:	4618      	mov	r0, r3
 800a936:	f7fe fb27 	bl	8008f88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	69db      	ldr	r3, [r3, #28]
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d122      	bne.n	800a988 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	699a      	ldr	r2, [r3, #24]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	18d1      	adds	r1, r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	6978      	ldr	r0, [r7, #20]
 800a950:	f000 f8c8 	bl	800aae4 <prvInsertTimerInActiveList>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d016      	beq.n	800a988 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a95a:	2300      	movs	r3, #0
 800a95c:	9300      	str	r3, [sp, #0]
 800a95e:	2300      	movs	r3, #0
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	2100      	movs	r1, #0
 800a964:	6978      	ldr	r0, [r7, #20]
 800a966:	f7ff ff8b 	bl	800a880 <xTimerGenericCommand>
 800a96a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10a      	bne.n	800a988 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	60fb      	str	r3, [r7, #12]
}
 800a984:	bf00      	nop
 800a986:	e7fe      	b.n	800a986 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98c:	6978      	ldr	r0, [r7, #20]
 800a98e:	4798      	blx	r3
}
 800a990:	bf00      	nop
 800a992:	3718      	adds	r7, #24
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	20000fd0 	.word	0x20000fd0

0800a99c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9a4:	f107 0308 	add.w	r3, r7, #8
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f000 f857 	bl	800aa5c <prvGetNextExpireTime>
 800a9ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f000 f803 	bl	800a9c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a9ba:	f000 f8d5 	bl	800ab68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9be:	e7f1      	b.n	800a9a4 <prvTimerTask+0x8>

0800a9c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a9ca:	f7ff fa3f 	bl	8009e4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9ce:	f107 0308 	add.w	r3, r7, #8
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 f866 	bl	800aaa4 <prvSampleTimeNow>
 800a9d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d130      	bne.n	800aa42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d10a      	bne.n	800a9fc <prvProcessTimerOrBlockTask+0x3c>
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d806      	bhi.n	800a9fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a9ee:	f7ff fa3b 	bl	8009e68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a9f2:	68f9      	ldr	r1, [r7, #12]
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f7ff ff91 	bl	800a91c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a9fa:	e024      	b.n	800aa46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d008      	beq.n	800aa14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa02:	4b13      	ldr	r3, [pc, #76]	; (800aa50 <prvProcessTimerOrBlockTask+0x90>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	bf0c      	ite	eq
 800aa0c:	2301      	moveq	r3, #1
 800aa0e:	2300      	movne	r3, #0
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa14:	4b0f      	ldr	r3, [pc, #60]	; (800aa54 <prvProcessTimerOrBlockTask+0x94>)
 800aa16:	6818      	ldr	r0, [r3, #0]
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	683a      	ldr	r2, [r7, #0]
 800aa20:	4619      	mov	r1, r3
 800aa22:	f7fe ff8b 	bl	800993c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aa26:	f7ff fa1f 	bl	8009e68 <xTaskResumeAll>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10a      	bne.n	800aa46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aa30:	4b09      	ldr	r3, [pc, #36]	; (800aa58 <prvProcessTimerOrBlockTask+0x98>)
 800aa32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa36:	601a      	str	r2, [r3, #0]
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	f3bf 8f6f 	isb	sy
}
 800aa40:	e001      	b.n	800aa46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aa42:	f7ff fa11 	bl	8009e68 <xTaskResumeAll>
}
 800aa46:	bf00      	nop
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	20000fd4 	.word	0x20000fd4
 800aa54:	20000fd8 	.word	0x20000fd8
 800aa58:	e000ed04 	.word	0xe000ed04

0800aa5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa64:	4b0e      	ldr	r3, [pc, #56]	; (800aaa0 <prvGetNextExpireTime+0x44>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	bf0c      	ite	eq
 800aa6e:	2301      	moveq	r3, #1
 800aa70:	2300      	movne	r3, #0
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	461a      	mov	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d105      	bne.n	800aa8e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa82:	4b07      	ldr	r3, [pc, #28]	; (800aaa0 <prvGetNextExpireTime+0x44>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	60fb      	str	r3, [r7, #12]
 800aa8c:	e001      	b.n	800aa92 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aa92:	68fb      	ldr	r3, [r7, #12]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3714      	adds	r7, #20
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bc80      	pop	{r7}
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	20000fd0 	.word	0x20000fd0

0800aaa4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aaac:	f7ff fa7a 	bl	8009fa4 <xTaskGetTickCount>
 800aab0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aab2:	4b0b      	ldr	r3, [pc, #44]	; (800aae0 <prvSampleTimeNow+0x3c>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d205      	bcs.n	800aac8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aabc:	f000 f908 	bl	800acd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	601a      	str	r2, [r3, #0]
 800aac6:	e002      	b.n	800aace <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aace:	4a04      	ldr	r2, [pc, #16]	; (800aae0 <prvSampleTimeNow+0x3c>)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aad4:	68fb      	ldr	r3, [r7, #12]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	20000fe0 	.word	0x20000fe0

0800aae4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
 800aaf0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	68ba      	ldr	r2, [r7, #8]
 800aafa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	68fa      	ldr	r2, [r7, #12]
 800ab00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d812      	bhi.n	800ab30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	1ad2      	subs	r2, r2, r3
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	699b      	ldr	r3, [r3, #24]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d302      	bcc.n	800ab1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	617b      	str	r3, [r7, #20]
 800ab1c:	e01b      	b.n	800ab56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ab1e:	4b10      	ldr	r3, [pc, #64]	; (800ab60 <prvInsertTimerInActiveList+0x7c>)
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	3304      	adds	r3, #4
 800ab26:	4619      	mov	r1, r3
 800ab28:	4610      	mov	r0, r2
 800ab2a:	f7fe f9f5 	bl	8008f18 <vListInsert>
 800ab2e:	e012      	b.n	800ab56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d206      	bcs.n	800ab46 <prvInsertTimerInActiveList+0x62>
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d302      	bcc.n	800ab46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ab40:	2301      	movs	r3, #1
 800ab42:	617b      	str	r3, [r7, #20]
 800ab44:	e007      	b.n	800ab56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab46:	4b07      	ldr	r3, [pc, #28]	; (800ab64 <prvInsertTimerInActiveList+0x80>)
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	3304      	adds	r3, #4
 800ab4e:	4619      	mov	r1, r3
 800ab50:	4610      	mov	r0, r2
 800ab52:	f7fe f9e1 	bl	8008f18 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab56:	697b      	ldr	r3, [r7, #20]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	20000fd4 	.word	0x20000fd4
 800ab64:	20000fd0 	.word	0x20000fd0

0800ab68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b08e      	sub	sp, #56	; 0x38
 800ab6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab6e:	e09d      	b.n	800acac <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	da18      	bge.n	800aba8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ab76:	1d3b      	adds	r3, r7, #4
 800ab78:	3304      	adds	r3, #4
 800ab7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ab7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d10a      	bne.n	800ab98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ab82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab86:	f383 8811 	msr	BASEPRI, r3
 800ab8a:	f3bf 8f6f 	isb	sy
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	61fb      	str	r3, [r7, #28]
}
 800ab94:	bf00      	nop
 800ab96:	e7fe      	b.n	800ab96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ab98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab9e:	6850      	ldr	r0, [r2, #4]
 800aba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aba2:	6892      	ldr	r2, [r2, #8]
 800aba4:	4611      	mov	r1, r2
 800aba6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	db7d      	blt.n	800acaa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800abb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb4:	695b      	ldr	r3, [r3, #20]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d004      	beq.n	800abc4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbc:	3304      	adds	r3, #4
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe f9e2 	bl	8008f88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abc4:	463b      	mov	r3, r7
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7ff ff6c 	bl	800aaa4 <prvSampleTimeNow>
 800abcc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2b09      	cmp	r3, #9
 800abd2:	d86b      	bhi.n	800acac <prvProcessReceivedCommands+0x144>
 800abd4:	a201      	add	r2, pc, #4	; (adr r2, 800abdc <prvProcessReceivedCommands+0x74>)
 800abd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abda:	bf00      	nop
 800abdc:	0800ac05 	.word	0x0800ac05
 800abe0:	0800ac05 	.word	0x0800ac05
 800abe4:	0800ac05 	.word	0x0800ac05
 800abe8:	0800acad 	.word	0x0800acad
 800abec:	0800ac61 	.word	0x0800ac61
 800abf0:	0800ac99 	.word	0x0800ac99
 800abf4:	0800ac05 	.word	0x0800ac05
 800abf8:	0800ac05 	.word	0x0800ac05
 800abfc:	0800acad 	.word	0x0800acad
 800ac00:	0800ac61 	.word	0x0800ac61
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac04:	68ba      	ldr	r2, [r7, #8]
 800ac06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac08:	699b      	ldr	r3, [r3, #24]
 800ac0a:	18d1      	adds	r1, r2, r3
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac12:	f7ff ff67 	bl	800aae4 <prvInsertTimerInActiveList>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d047      	beq.n	800acac <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac22:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ac24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac26:	69db      	ldr	r3, [r3, #28]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d13f      	bne.n	800acac <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac2c:	68ba      	ldr	r2, [r7, #8]
 800ac2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac30:	699b      	ldr	r3, [r3, #24]
 800ac32:	441a      	add	r2, r3
 800ac34:	2300      	movs	r3, #0
 800ac36:	9300      	str	r3, [sp, #0]
 800ac38:	2300      	movs	r3, #0
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac3e:	f7ff fe1f 	bl	800a880 <xTimerGenericCommand>
 800ac42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac44:	6a3b      	ldr	r3, [r7, #32]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d130      	bne.n	800acac <prvProcessReceivedCommands+0x144>
	__asm volatile
 800ac4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4e:	f383 8811 	msr	BASEPRI, r3
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	61bb      	str	r3, [r7, #24]
}
 800ac5c:	bf00      	nop
 800ac5e:	e7fe      	b.n	800ac5e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac64:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10a      	bne.n	800ac84 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800ac6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	617b      	str	r3, [r7, #20]
}
 800ac80:	bf00      	nop
 800ac82:	e7fe      	b.n	800ac82 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ac84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac86:	699a      	ldr	r2, [r3, #24]
 800ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8a:	18d1      	adds	r1, r2, r3
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac92:	f7ff ff27 	bl	800aae4 <prvInsertTimerInActiveList>
					break;
 800ac96:	e009      	b.n	800acac <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ac98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d104      	bne.n	800acac <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800aca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aca4:	f000 fb6e 	bl	800b384 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aca8:	e000      	b.n	800acac <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800acaa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800acac:	4b07      	ldr	r3, [pc, #28]	; (800accc <prvProcessReceivedCommands+0x164>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	1d39      	adds	r1, r7, #4
 800acb2:	2200      	movs	r2, #0
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7fe fc29 	bl	800950c <xQueueReceive>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f47f af57 	bne.w	800ab70 <prvProcessReceivedCommands+0x8>
	}
}
 800acc2:	bf00      	nop
 800acc4:	bf00      	nop
 800acc6:	3730      	adds	r7, #48	; 0x30
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	20000fd8 	.word	0x20000fd8

0800acd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b088      	sub	sp, #32
 800acd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800acd6:	e045      	b.n	800ad64 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800acd8:	4b2c      	ldr	r3, [pc, #176]	; (800ad8c <prvSwitchTimerLists+0xbc>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ace2:	4b2a      	ldr	r3, [pc, #168]	; (800ad8c <prvSwitchTimerLists+0xbc>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	3304      	adds	r3, #4
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7fe f949 	bl	8008f88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	69db      	ldr	r3, [r3, #28]
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d12e      	bne.n	800ad64 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	699b      	ldr	r3, [r3, #24]
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d90e      	bls.n	800ad36 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	68ba      	ldr	r2, [r7, #8]
 800ad1c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad24:	4b19      	ldr	r3, [pc, #100]	; (800ad8c <prvSwitchTimerLists+0xbc>)
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	3304      	adds	r3, #4
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	4610      	mov	r0, r2
 800ad30:	f7fe f8f2 	bl	8008f18 <vListInsert>
 800ad34:	e016      	b.n	800ad64 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad36:	2300      	movs	r3, #0
 800ad38:	9300      	str	r3, [sp, #0]
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	693a      	ldr	r2, [r7, #16]
 800ad3e:	2100      	movs	r1, #0
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f7ff fd9d 	bl	800a880 <xTimerGenericCommand>
 800ad46:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d10a      	bne.n	800ad64 <prvSwitchTimerLists+0x94>
	__asm volatile
 800ad4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad52:	f383 8811 	msr	BASEPRI, r3
 800ad56:	f3bf 8f6f 	isb	sy
 800ad5a:	f3bf 8f4f 	dsb	sy
 800ad5e:	603b      	str	r3, [r7, #0]
}
 800ad60:	bf00      	nop
 800ad62:	e7fe      	b.n	800ad62 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad64:	4b09      	ldr	r3, [pc, #36]	; (800ad8c <prvSwitchTimerLists+0xbc>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1b4      	bne.n	800acd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ad6e:	4b07      	ldr	r3, [pc, #28]	; (800ad8c <prvSwitchTimerLists+0xbc>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ad74:	4b06      	ldr	r3, [pc, #24]	; (800ad90 <prvSwitchTimerLists+0xc0>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a04      	ldr	r2, [pc, #16]	; (800ad8c <prvSwitchTimerLists+0xbc>)
 800ad7a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ad7c:	4a04      	ldr	r2, [pc, #16]	; (800ad90 <prvSwitchTimerLists+0xc0>)
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	6013      	str	r3, [r2, #0]
}
 800ad82:	bf00      	nop
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	20000fd0 	.word	0x20000fd0
 800ad90:	20000fd4 	.word	0x20000fd4

0800ad94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ad9a:	f000 f92f 	bl	800affc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ad9e:	4b15      	ldr	r3, [pc, #84]	; (800adf4 <prvCheckForValidListAndQueue+0x60>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d120      	bne.n	800ade8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ada6:	4814      	ldr	r0, [pc, #80]	; (800adf8 <prvCheckForValidListAndQueue+0x64>)
 800ada8:	f7fe f868 	bl	8008e7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800adac:	4813      	ldr	r0, [pc, #76]	; (800adfc <prvCheckForValidListAndQueue+0x68>)
 800adae:	f7fe f865 	bl	8008e7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800adb2:	4b13      	ldr	r3, [pc, #76]	; (800ae00 <prvCheckForValidListAndQueue+0x6c>)
 800adb4:	4a10      	ldr	r2, [pc, #64]	; (800adf8 <prvCheckForValidListAndQueue+0x64>)
 800adb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800adb8:	4b12      	ldr	r3, [pc, #72]	; (800ae04 <prvCheckForValidListAndQueue+0x70>)
 800adba:	4a10      	ldr	r2, [pc, #64]	; (800adfc <prvCheckForValidListAndQueue+0x68>)
 800adbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800adbe:	2300      	movs	r3, #0
 800adc0:	9300      	str	r3, [sp, #0]
 800adc2:	4b11      	ldr	r3, [pc, #68]	; (800ae08 <prvCheckForValidListAndQueue+0x74>)
 800adc4:	4a11      	ldr	r2, [pc, #68]	; (800ae0c <prvCheckForValidListAndQueue+0x78>)
 800adc6:	2110      	movs	r1, #16
 800adc8:	200a      	movs	r0, #10
 800adca:	f7fe f96f 	bl	80090ac <xQueueGenericCreateStatic>
 800adce:	4603      	mov	r3, r0
 800add0:	4a08      	ldr	r2, [pc, #32]	; (800adf4 <prvCheckForValidListAndQueue+0x60>)
 800add2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800add4:	4b07      	ldr	r3, [pc, #28]	; (800adf4 <prvCheckForValidListAndQueue+0x60>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d005      	beq.n	800ade8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800addc:	4b05      	ldr	r3, [pc, #20]	; (800adf4 <prvCheckForValidListAndQueue+0x60>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	490b      	ldr	r1, [pc, #44]	; (800ae10 <prvCheckForValidListAndQueue+0x7c>)
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fe fd82 	bl	80098ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ade8:	f000 f938 	bl	800b05c <vPortExitCritical>
}
 800adec:	bf00      	nop
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	20000fd8 	.word	0x20000fd8
 800adf8:	20000fa8 	.word	0x20000fa8
 800adfc:	20000fbc 	.word	0x20000fbc
 800ae00:	20000fd0 	.word	0x20000fd0
 800ae04:	20000fd4 	.word	0x20000fd4
 800ae08:	20001084 	.word	0x20001084
 800ae0c:	20000fe4 	.word	0x20000fe4
 800ae10:	0800c100 	.word	0x0800c100

0800ae14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	3b04      	subs	r3, #4
 800ae24:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ae2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	3b04      	subs	r3, #4
 800ae32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	f023 0201 	bic.w	r2, r3, #1
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	3b04      	subs	r3, #4
 800ae42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ae44:	4a08      	ldr	r2, [pc, #32]	; (800ae68 <pxPortInitialiseStack+0x54>)
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	3b14      	subs	r3, #20
 800ae4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	3b20      	subs	r3, #32
 800ae5a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3714      	adds	r7, #20
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bc80      	pop	{r7}
 800ae66:	4770      	bx	lr
 800ae68:	0800ae6d 	.word	0x0800ae6d

0800ae6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ae72:	2300      	movs	r3, #0
 800ae74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ae76:	4b12      	ldr	r3, [pc, #72]	; (800aec0 <prvTaskExitError+0x54>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae7e:	d00a      	beq.n	800ae96 <prvTaskExitError+0x2a>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	60fb      	str	r3, [r7, #12]
}
 800ae92:	bf00      	nop
 800ae94:	e7fe      	b.n	800ae94 <prvTaskExitError+0x28>
	__asm volatile
 800ae96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9a:	f383 8811 	msr	BASEPRI, r3
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	f3bf 8f4f 	dsb	sy
 800aea6:	60bb      	str	r3, [r7, #8]
}
 800aea8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aeaa:	bf00      	nop
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d0fc      	beq.n	800aeac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aeb2:	bf00      	nop
 800aeb4:	bf00      	nop
 800aeb6:	3714      	adds	r7, #20
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bc80      	pop	{r7}
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	20000130 	.word	0x20000130
	...

0800aed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aed0:	4b07      	ldr	r3, [pc, #28]	; (800aef0 <pxCurrentTCBConst2>)
 800aed2:	6819      	ldr	r1, [r3, #0]
 800aed4:	6808      	ldr	r0, [r1, #0]
 800aed6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aeda:	f380 8809 	msr	PSP, r0
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f04f 0000 	mov.w	r0, #0
 800aee6:	f380 8811 	msr	BASEPRI, r0
 800aeea:	f04e 0e0d 	orr.w	lr, lr, #13
 800aeee:	4770      	bx	lr

0800aef0 <pxCurrentTCBConst2>:
 800aef0:	20000aa8 	.word	0x20000aa8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aef4:	bf00      	nop
 800aef6:	bf00      	nop

0800aef8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800aef8:	4806      	ldr	r0, [pc, #24]	; (800af14 <prvPortStartFirstTask+0x1c>)
 800aefa:	6800      	ldr	r0, [r0, #0]
 800aefc:	6800      	ldr	r0, [r0, #0]
 800aefe:	f380 8808 	msr	MSP, r0
 800af02:	b662      	cpsie	i
 800af04:	b661      	cpsie	f
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	df00      	svc	0
 800af10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af12:	bf00      	nop
 800af14:	e000ed08 	.word	0xe000ed08

0800af18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800af1e:	4b32      	ldr	r3, [pc, #200]	; (800afe8 <xPortStartScheduler+0xd0>)
 800af20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	b2db      	uxtb	r3, r3
 800af28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	22ff      	movs	r2, #255	; 0xff
 800af2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	b2db      	uxtb	r3, r3
 800af36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af38:	78fb      	ldrb	r3, [r7, #3]
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800af40:	b2da      	uxtb	r2, r3
 800af42:	4b2a      	ldr	r3, [pc, #168]	; (800afec <xPortStartScheduler+0xd4>)
 800af44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800af46:	4b2a      	ldr	r3, [pc, #168]	; (800aff0 <xPortStartScheduler+0xd8>)
 800af48:	2207      	movs	r2, #7
 800af4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af4c:	e009      	b.n	800af62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800af4e:	4b28      	ldr	r3, [pc, #160]	; (800aff0 <xPortStartScheduler+0xd8>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	3b01      	subs	r3, #1
 800af54:	4a26      	ldr	r2, [pc, #152]	; (800aff0 <xPortStartScheduler+0xd8>)
 800af56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800af58:	78fb      	ldrb	r3, [r7, #3]
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	005b      	lsls	r3, r3, #1
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af62:	78fb      	ldrb	r3, [r7, #3]
 800af64:	b2db      	uxtb	r3, r3
 800af66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af6a:	2b80      	cmp	r3, #128	; 0x80
 800af6c:	d0ef      	beq.n	800af4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800af6e:	4b20      	ldr	r3, [pc, #128]	; (800aff0 <xPortStartScheduler+0xd8>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f1c3 0307 	rsb	r3, r3, #7
 800af76:	2b04      	cmp	r3, #4
 800af78:	d00a      	beq.n	800af90 <xPortStartScheduler+0x78>
	__asm volatile
 800af7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7e:	f383 8811 	msr	BASEPRI, r3
 800af82:	f3bf 8f6f 	isb	sy
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	60bb      	str	r3, [r7, #8]
}
 800af8c:	bf00      	nop
 800af8e:	e7fe      	b.n	800af8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800af90:	4b17      	ldr	r3, [pc, #92]	; (800aff0 <xPortStartScheduler+0xd8>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	021b      	lsls	r3, r3, #8
 800af96:	4a16      	ldr	r2, [pc, #88]	; (800aff0 <xPortStartScheduler+0xd8>)
 800af98:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800af9a:	4b15      	ldr	r3, [pc, #84]	; (800aff0 <xPortStartScheduler+0xd8>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800afa2:	4a13      	ldr	r2, [pc, #76]	; (800aff0 <xPortStartScheduler+0xd8>)
 800afa4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	b2da      	uxtb	r2, r3
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800afae:	4b11      	ldr	r3, [pc, #68]	; (800aff4 <xPortStartScheduler+0xdc>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a10      	ldr	r2, [pc, #64]	; (800aff4 <xPortStartScheduler+0xdc>)
 800afb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800afb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800afba:	4b0e      	ldr	r3, [pc, #56]	; (800aff4 <xPortStartScheduler+0xdc>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4a0d      	ldr	r2, [pc, #52]	; (800aff4 <xPortStartScheduler+0xdc>)
 800afc0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800afc4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800afc6:	f000 f8b9 	bl	800b13c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800afca:	4b0b      	ldr	r3, [pc, #44]	; (800aff8 <xPortStartScheduler+0xe0>)
 800afcc:	2200      	movs	r2, #0
 800afce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800afd0:	f7ff ff92 	bl	800aef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800afd4:	f7ff f8b2 	bl	800a13c <vTaskSwitchContext>
	prvTaskExitError();
 800afd8:	f7ff ff48 	bl	800ae6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	e000e400 	.word	0xe000e400
 800afec:	200010d4 	.word	0x200010d4
 800aff0:	200010d8 	.word	0x200010d8
 800aff4:	e000ed20 	.word	0xe000ed20
 800aff8:	20000130 	.word	0x20000130

0800affc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
	__asm volatile
 800b002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b006:	f383 8811 	msr	BASEPRI, r3
 800b00a:	f3bf 8f6f 	isb	sy
 800b00e:	f3bf 8f4f 	dsb	sy
 800b012:	607b      	str	r3, [r7, #4]
}
 800b014:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b016:	4b0f      	ldr	r3, [pc, #60]	; (800b054 <vPortEnterCritical+0x58>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	3301      	adds	r3, #1
 800b01c:	4a0d      	ldr	r2, [pc, #52]	; (800b054 <vPortEnterCritical+0x58>)
 800b01e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b020:	4b0c      	ldr	r3, [pc, #48]	; (800b054 <vPortEnterCritical+0x58>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b01      	cmp	r3, #1
 800b026:	d10f      	bne.n	800b048 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b028:	4b0b      	ldr	r3, [pc, #44]	; (800b058 <vPortEnterCritical+0x5c>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00a      	beq.n	800b048 <vPortEnterCritical+0x4c>
	__asm volatile
 800b032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b036:	f383 8811 	msr	BASEPRI, r3
 800b03a:	f3bf 8f6f 	isb	sy
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	603b      	str	r3, [r7, #0]
}
 800b044:	bf00      	nop
 800b046:	e7fe      	b.n	800b046 <vPortEnterCritical+0x4a>
	}
}
 800b048:	bf00      	nop
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bc80      	pop	{r7}
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	20000130 	.word	0x20000130
 800b058:	e000ed04 	.word	0xe000ed04

0800b05c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b062:	4b11      	ldr	r3, [pc, #68]	; (800b0a8 <vPortExitCritical+0x4c>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d10a      	bne.n	800b080 <vPortExitCritical+0x24>
	__asm volatile
 800b06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06e:	f383 8811 	msr	BASEPRI, r3
 800b072:	f3bf 8f6f 	isb	sy
 800b076:	f3bf 8f4f 	dsb	sy
 800b07a:	607b      	str	r3, [r7, #4]
}
 800b07c:	bf00      	nop
 800b07e:	e7fe      	b.n	800b07e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b080:	4b09      	ldr	r3, [pc, #36]	; (800b0a8 <vPortExitCritical+0x4c>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	3b01      	subs	r3, #1
 800b086:	4a08      	ldr	r2, [pc, #32]	; (800b0a8 <vPortExitCritical+0x4c>)
 800b088:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b08a:	4b07      	ldr	r3, [pc, #28]	; (800b0a8 <vPortExitCritical+0x4c>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d105      	bne.n	800b09e <vPortExitCritical+0x42>
 800b092:	2300      	movs	r3, #0
 800b094:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	f383 8811 	msr	BASEPRI, r3
}
 800b09c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b09e:	bf00      	nop
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bc80      	pop	{r7}
 800b0a6:	4770      	bx	lr
 800b0a8:	20000130 	.word	0x20000130
 800b0ac:	00000000 	.word	0x00000000

0800b0b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b0b0:	f3ef 8009 	mrs	r0, PSP
 800b0b4:	f3bf 8f6f 	isb	sy
 800b0b8:	4b0d      	ldr	r3, [pc, #52]	; (800b0f0 <pxCurrentTCBConst>)
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b0c0:	6010      	str	r0, [r2, #0]
 800b0c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b0c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b0ca:	f380 8811 	msr	BASEPRI, r0
 800b0ce:	f7ff f835 	bl	800a13c <vTaskSwitchContext>
 800b0d2:	f04f 0000 	mov.w	r0, #0
 800b0d6:	f380 8811 	msr	BASEPRI, r0
 800b0da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b0de:	6819      	ldr	r1, [r3, #0]
 800b0e0:	6808      	ldr	r0, [r1, #0]
 800b0e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b0e6:	f380 8809 	msr	PSP, r0
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	4770      	bx	lr

0800b0f0 <pxCurrentTCBConst>:
 800b0f0:	20000aa8 	.word	0x20000aa8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b0f4:	bf00      	nop
 800b0f6:	bf00      	nop

0800b0f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	607b      	str	r3, [r7, #4]
}
 800b110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b112:	f7fe ff55 	bl	8009fc0 <xTaskIncrementTick>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d003      	beq.n	800b124 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b11c:	4b06      	ldr	r3, [pc, #24]	; (800b138 <SysTick_Handler+0x40>)
 800b11e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	2300      	movs	r3, #0
 800b126:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	f383 8811 	msr	BASEPRI, r3
}
 800b12e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b130:	bf00      	nop
 800b132:	3708      	adds	r7, #8
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	e000ed04 	.word	0xe000ed04

0800b13c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b13c:	b480      	push	{r7}
 800b13e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b140:	4b0a      	ldr	r3, [pc, #40]	; (800b16c <vPortSetupTimerInterrupt+0x30>)
 800b142:	2200      	movs	r2, #0
 800b144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b146:	4b0a      	ldr	r3, [pc, #40]	; (800b170 <vPortSetupTimerInterrupt+0x34>)
 800b148:	2200      	movs	r2, #0
 800b14a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b14c:	4b09      	ldr	r3, [pc, #36]	; (800b174 <vPortSetupTimerInterrupt+0x38>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a09      	ldr	r2, [pc, #36]	; (800b178 <vPortSetupTimerInterrupt+0x3c>)
 800b152:	fba2 2303 	umull	r2, r3, r2, r3
 800b156:	099b      	lsrs	r3, r3, #6
 800b158:	4a08      	ldr	r2, [pc, #32]	; (800b17c <vPortSetupTimerInterrupt+0x40>)
 800b15a:	3b01      	subs	r3, #1
 800b15c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b15e:	4b03      	ldr	r3, [pc, #12]	; (800b16c <vPortSetupTimerInterrupt+0x30>)
 800b160:	2207      	movs	r2, #7
 800b162:	601a      	str	r2, [r3, #0]
}
 800b164:	bf00      	nop
 800b166:	46bd      	mov	sp, r7
 800b168:	bc80      	pop	{r7}
 800b16a:	4770      	bx	lr
 800b16c:	e000e010 	.word	0xe000e010
 800b170:	e000e018 	.word	0xe000e018
 800b174:	20000000 	.word	0x20000000
 800b178:	10624dd3 	.word	0x10624dd3
 800b17c:	e000e014 	.word	0xe000e014

0800b180 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b186:	f3ef 8305 	mrs	r3, IPSR
 800b18a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b0f      	cmp	r3, #15
 800b190:	d914      	bls.n	800b1bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b192:	4a16      	ldr	r2, [pc, #88]	; (800b1ec <vPortValidateInterruptPriority+0x6c>)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	4413      	add	r3, r2
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b19c:	4b14      	ldr	r3, [pc, #80]	; (800b1f0 <vPortValidateInterruptPriority+0x70>)
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	7afa      	ldrb	r2, [r7, #11]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d20a      	bcs.n	800b1bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1aa:	f383 8811 	msr	BASEPRI, r3
 800b1ae:	f3bf 8f6f 	isb	sy
 800b1b2:	f3bf 8f4f 	dsb	sy
 800b1b6:	607b      	str	r3, [r7, #4]
}
 800b1b8:	bf00      	nop
 800b1ba:	e7fe      	b.n	800b1ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b1bc:	4b0d      	ldr	r3, [pc, #52]	; (800b1f4 <vPortValidateInterruptPriority+0x74>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b1c4:	4b0c      	ldr	r3, [pc, #48]	; (800b1f8 <vPortValidateInterruptPriority+0x78>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d90a      	bls.n	800b1e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d0:	f383 8811 	msr	BASEPRI, r3
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	603b      	str	r3, [r7, #0]
}
 800b1de:	bf00      	nop
 800b1e0:	e7fe      	b.n	800b1e0 <vPortValidateInterruptPriority+0x60>
	}
 800b1e2:	bf00      	nop
 800b1e4:	3714      	adds	r7, #20
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bc80      	pop	{r7}
 800b1ea:	4770      	bx	lr
 800b1ec:	e000e3f0 	.word	0xe000e3f0
 800b1f0:	200010d4 	.word	0x200010d4
 800b1f4:	e000ed0c 	.word	0xe000ed0c
 800b1f8:	200010d8 	.word	0x200010d8

0800b1fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b08a      	sub	sp, #40	; 0x28
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b204:	2300      	movs	r3, #0
 800b206:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b208:	f7fe fe20 	bl	8009e4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b20c:	4b58      	ldr	r3, [pc, #352]	; (800b370 <pvPortMalloc+0x174>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d101      	bne.n	800b218 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b214:	f000 f910 	bl	800b438 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b218:	4b56      	ldr	r3, [pc, #344]	; (800b374 <pvPortMalloc+0x178>)
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4013      	ands	r3, r2
 800b220:	2b00      	cmp	r3, #0
 800b222:	f040 808e 	bne.w	800b342 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d01d      	beq.n	800b268 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b22c:	2208      	movs	r2, #8
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4413      	add	r3, r2
 800b232:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f003 0307 	and.w	r3, r3, #7
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d014      	beq.n	800b268 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f023 0307 	bic.w	r3, r3, #7
 800b244:	3308      	adds	r3, #8
 800b246:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f003 0307 	and.w	r3, r3, #7
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d00a      	beq.n	800b268 <pvPortMalloc+0x6c>
	__asm volatile
 800b252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b256:	f383 8811 	msr	BASEPRI, r3
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	617b      	str	r3, [r7, #20]
}
 800b264:	bf00      	nop
 800b266:	e7fe      	b.n	800b266 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d069      	beq.n	800b342 <pvPortMalloc+0x146>
 800b26e:	4b42      	ldr	r3, [pc, #264]	; (800b378 <pvPortMalloc+0x17c>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	429a      	cmp	r2, r3
 800b276:	d864      	bhi.n	800b342 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b278:	4b40      	ldr	r3, [pc, #256]	; (800b37c <pvPortMalloc+0x180>)
 800b27a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b27c:	4b3f      	ldr	r3, [pc, #252]	; (800b37c <pvPortMalloc+0x180>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b282:	e004      	b.n	800b28e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b286:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	429a      	cmp	r2, r3
 800b296:	d903      	bls.n	800b2a0 <pvPortMalloc+0xa4>
 800b298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d1f1      	bne.n	800b284 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b2a0:	4b33      	ldr	r3, [pc, #204]	; (800b370 <pvPortMalloc+0x174>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d04b      	beq.n	800b342 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b2aa:	6a3b      	ldr	r3, [r7, #32]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2208      	movs	r2, #8
 800b2b0:	4413      	add	r3, r2
 800b2b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	6a3b      	ldr	r3, [r7, #32]
 800b2ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2be:	685a      	ldr	r2, [r3, #4]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	1ad2      	subs	r2, r2, r3
 800b2c4:	2308      	movs	r3, #8
 800b2c6:	005b      	lsls	r3, r3, #1
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d91f      	bls.n	800b30c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b2cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	f003 0307 	and.w	r3, r3, #7
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00a      	beq.n	800b2f4 <pvPortMalloc+0xf8>
	__asm volatile
 800b2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	613b      	str	r3, [r7, #16]
}
 800b2f0:	bf00      	nop
 800b2f2:	e7fe      	b.n	800b2f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f6:	685a      	ldr	r2, [r3, #4]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	1ad2      	subs	r2, r2, r3
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b306:	69b8      	ldr	r0, [r7, #24]
 800b308:	f000 f8f8 	bl	800b4fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b30c:	4b1a      	ldr	r3, [pc, #104]	; (800b378 <pvPortMalloc+0x17c>)
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	4a18      	ldr	r2, [pc, #96]	; (800b378 <pvPortMalloc+0x17c>)
 800b318:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b31a:	4b17      	ldr	r3, [pc, #92]	; (800b378 <pvPortMalloc+0x17c>)
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	4b18      	ldr	r3, [pc, #96]	; (800b380 <pvPortMalloc+0x184>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	429a      	cmp	r2, r3
 800b324:	d203      	bcs.n	800b32e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b326:	4b14      	ldr	r3, [pc, #80]	; (800b378 <pvPortMalloc+0x17c>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a15      	ldr	r2, [pc, #84]	; (800b380 <pvPortMalloc+0x184>)
 800b32c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b330:	685a      	ldr	r2, [r3, #4]
 800b332:	4b10      	ldr	r3, [pc, #64]	; (800b374 <pvPortMalloc+0x178>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	431a      	orrs	r2, r3
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33e:	2200      	movs	r2, #0
 800b340:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b342:	f7fe fd91 	bl	8009e68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	f003 0307 	and.w	r3, r3, #7
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00a      	beq.n	800b366 <pvPortMalloc+0x16a>
	__asm volatile
 800b350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	60fb      	str	r3, [r7, #12]
}
 800b362:	bf00      	nop
 800b364:	e7fe      	b.n	800b364 <pvPortMalloc+0x168>
	return pvReturn;
 800b366:	69fb      	ldr	r3, [r7, #28]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3728      	adds	r7, #40	; 0x28
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	20001ce4 	.word	0x20001ce4
 800b374:	20001cf0 	.word	0x20001cf0
 800b378:	20001ce8 	.word	0x20001ce8
 800b37c:	20001cdc 	.word	0x20001cdc
 800b380:	20001cec 	.word	0x20001cec

0800b384 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b086      	sub	sp, #24
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d048      	beq.n	800b428 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b396:	2308      	movs	r3, #8
 800b398:	425b      	negs	r3, r3
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	4413      	add	r3, r2
 800b39e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	685a      	ldr	r2, [r3, #4]
 800b3a8:	4b21      	ldr	r3, [pc, #132]	; (800b430 <vPortFree+0xac>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d10a      	bne.n	800b3c8 <vPortFree+0x44>
	__asm volatile
 800b3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b6:	f383 8811 	msr	BASEPRI, r3
 800b3ba:	f3bf 8f6f 	isb	sy
 800b3be:	f3bf 8f4f 	dsb	sy
 800b3c2:	60fb      	str	r3, [r7, #12]
}
 800b3c4:	bf00      	nop
 800b3c6:	e7fe      	b.n	800b3c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d00a      	beq.n	800b3e6 <vPortFree+0x62>
	__asm volatile
 800b3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	60bb      	str	r3, [r7, #8]
}
 800b3e2:	bf00      	nop
 800b3e4:	e7fe      	b.n	800b3e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	685a      	ldr	r2, [r3, #4]
 800b3ea:	4b11      	ldr	r3, [pc, #68]	; (800b430 <vPortFree+0xac>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d019      	beq.n	800b428 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d115      	bne.n	800b428 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	685a      	ldr	r2, [r3, #4]
 800b400:	4b0b      	ldr	r3, [pc, #44]	; (800b430 <vPortFree+0xac>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	43db      	mvns	r3, r3
 800b406:	401a      	ands	r2, r3
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b40c:	f7fe fd1e 	bl	8009e4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	685a      	ldr	r2, [r3, #4]
 800b414:	4b07      	ldr	r3, [pc, #28]	; (800b434 <vPortFree+0xb0>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4413      	add	r3, r2
 800b41a:	4a06      	ldr	r2, [pc, #24]	; (800b434 <vPortFree+0xb0>)
 800b41c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b41e:	6938      	ldr	r0, [r7, #16]
 800b420:	f000 f86c 	bl	800b4fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b424:	f7fe fd20 	bl	8009e68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b428:	bf00      	nop
 800b42a:	3718      	adds	r7, #24
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	20001cf0 	.word	0x20001cf0
 800b434:	20001ce8 	.word	0x20001ce8

0800b438 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b43e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b442:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b444:	4b27      	ldr	r3, [pc, #156]	; (800b4e4 <prvHeapInit+0xac>)
 800b446:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f003 0307 	and.w	r3, r3, #7
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00c      	beq.n	800b46c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	3307      	adds	r3, #7
 800b456:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f023 0307 	bic.w	r3, r3, #7
 800b45e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b460:	68ba      	ldr	r2, [r7, #8]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	1ad3      	subs	r3, r2, r3
 800b466:	4a1f      	ldr	r2, [pc, #124]	; (800b4e4 <prvHeapInit+0xac>)
 800b468:	4413      	add	r3, r2
 800b46a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b470:	4a1d      	ldr	r2, [pc, #116]	; (800b4e8 <prvHeapInit+0xb0>)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b476:	4b1c      	ldr	r3, [pc, #112]	; (800b4e8 <prvHeapInit+0xb0>)
 800b478:	2200      	movs	r2, #0
 800b47a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	68ba      	ldr	r2, [r7, #8]
 800b480:	4413      	add	r3, r2
 800b482:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b484:	2208      	movs	r2, #8
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	1a9b      	subs	r3, r3, r2
 800b48a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f023 0307 	bic.w	r3, r3, #7
 800b492:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	4a15      	ldr	r2, [pc, #84]	; (800b4ec <prvHeapInit+0xb4>)
 800b498:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b49a:	4b14      	ldr	r3, [pc, #80]	; (800b4ec <prvHeapInit+0xb4>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b4a2:	4b12      	ldr	r3, [pc, #72]	; (800b4ec <prvHeapInit+0xb4>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	1ad2      	subs	r2, r2, r3
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b4b8:	4b0c      	ldr	r3, [pc, #48]	; (800b4ec <prvHeapInit+0xb4>)
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	4a0a      	ldr	r2, [pc, #40]	; (800b4f0 <prvHeapInit+0xb8>)
 800b4c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	4a09      	ldr	r2, [pc, #36]	; (800b4f4 <prvHeapInit+0xbc>)
 800b4ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b4d0:	4b09      	ldr	r3, [pc, #36]	; (800b4f8 <prvHeapInit+0xc0>)
 800b4d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b4d6:	601a      	str	r2, [r3, #0]
}
 800b4d8:	bf00      	nop
 800b4da:	3714      	adds	r7, #20
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bc80      	pop	{r7}
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	200010dc 	.word	0x200010dc
 800b4e8:	20001cdc 	.word	0x20001cdc
 800b4ec:	20001ce4 	.word	0x20001ce4
 800b4f0:	20001cec 	.word	0x20001cec
 800b4f4:	20001ce8 	.word	0x20001ce8
 800b4f8:	20001cf0 	.word	0x20001cf0

0800b4fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b504:	4b27      	ldr	r3, [pc, #156]	; (800b5a4 <prvInsertBlockIntoFreeList+0xa8>)
 800b506:	60fb      	str	r3, [r7, #12]
 800b508:	e002      	b.n	800b510 <prvInsertBlockIntoFreeList+0x14>
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	60fb      	str	r3, [r7, #12]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	429a      	cmp	r2, r3
 800b518:	d8f7      	bhi.n	800b50a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	68ba      	ldr	r2, [r7, #8]
 800b524:	4413      	add	r3, r2
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d108      	bne.n	800b53e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	685a      	ldr	r2, [r3, #4]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	441a      	add	r2, r3
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	68ba      	ldr	r2, [r7, #8]
 800b548:	441a      	add	r2, r3
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d118      	bne.n	800b584 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	4b14      	ldr	r3, [pc, #80]	; (800b5a8 <prvInsertBlockIntoFreeList+0xac>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d00d      	beq.n	800b57a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	685a      	ldr	r2, [r3, #4]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	441a      	add	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	601a      	str	r2, [r3, #0]
 800b578:	e008      	b.n	800b58c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b57a:	4b0b      	ldr	r3, [pc, #44]	; (800b5a8 <prvInsertBlockIntoFreeList+0xac>)
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	601a      	str	r2, [r3, #0]
 800b582:	e003      	b.n	800b58c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	429a      	cmp	r2, r3
 800b592:	d002      	beq.n	800b59a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b59a:	bf00      	nop
 800b59c:	3714      	adds	r7, #20
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bc80      	pop	{r7}
 800b5a2:	4770      	bx	lr
 800b5a4:	20001cdc 	.word	0x20001cdc
 800b5a8:	20001ce4 	.word	0x20001ce4

0800b5ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	4912      	ldr	r1, [pc, #72]	; (800b5fc <MX_USB_DEVICE_Init+0x50>)
 800b5b4:	4812      	ldr	r0, [pc, #72]	; (800b600 <MX_USB_DEVICE_Init+0x54>)
 800b5b6:	f7fc f9fd 	bl	80079b4 <USBD_Init>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d001      	beq.n	800b5c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b5c0:	f7f5 f8f0 	bl	80007a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b5c4:	490f      	ldr	r1, [pc, #60]	; (800b604 <MX_USB_DEVICE_Init+0x58>)
 800b5c6:	480e      	ldr	r0, [pc, #56]	; (800b600 <MX_USB_DEVICE_Init+0x54>)
 800b5c8:	f7fc fa1f 	bl	8007a0a <USBD_RegisterClass>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b5d2:	f7f5 f8e7 	bl	80007a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b5d6:	490c      	ldr	r1, [pc, #48]	; (800b608 <MX_USB_DEVICE_Init+0x5c>)
 800b5d8:	4809      	ldr	r0, [pc, #36]	; (800b600 <MX_USB_DEVICE_Init+0x54>)
 800b5da:	f7fc f97f 	bl	80078dc <USBD_CDC_RegisterInterface>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d001      	beq.n	800b5e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b5e4:	f7f5 f8de 	bl	80007a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b5e8:	4805      	ldr	r0, [pc, #20]	; (800b600 <MX_USB_DEVICE_Init+0x54>)
 800b5ea:	f7fc fa27 	bl	8007a3c <USBD_Start>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d001      	beq.n	800b5f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b5f4:	f7f5 f8d6 	bl	80007a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b5f8:	bf00      	nop
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	20000144 	.word	0x20000144
 800b600:	2000240c 	.word	0x2000240c
 800b604:	2000002c 	.word	0x2000002c
 800b608:	20000134 	.word	0x20000134

0800b60c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b610:	2200      	movs	r2, #0
 800b612:	4905      	ldr	r1, [pc, #20]	; (800b628 <CDC_Init_FS+0x1c>)
 800b614:	4805      	ldr	r0, [pc, #20]	; (800b62c <CDC_Init_FS+0x20>)
 800b616:	f7fc f977 	bl	8007908 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b61a:	4905      	ldr	r1, [pc, #20]	; (800b630 <CDC_Init_FS+0x24>)
 800b61c:	4803      	ldr	r0, [pc, #12]	; (800b62c <CDC_Init_FS+0x20>)
 800b61e:	f7fc f98c 	bl	800793a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b622:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b624:	4618      	mov	r0, r3
 800b626:	bd80      	pop	{r7, pc}
 800b628:	20002ab8 	.word	0x20002ab8
 800b62c:	2000240c 	.word	0x2000240c
 800b630:	200026d0 	.word	0x200026d0

0800b634 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b634:	b480      	push	{r7}
 800b636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b638:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bc80      	pop	{r7}
 800b640:	4770      	bx	lr
	...

0800b644 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	4603      	mov	r3, r0
 800b64c:	6039      	str	r1, [r7, #0]
 800b64e:	71fb      	strb	r3, [r7, #7]
 800b650:	4613      	mov	r3, r2
 800b652:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b654:	79fb      	ldrb	r3, [r7, #7]
 800b656:	2b23      	cmp	r3, #35	; 0x23
 800b658:	d84a      	bhi.n	800b6f0 <CDC_Control_FS+0xac>
 800b65a:	a201      	add	r2, pc, #4	; (adr r2, 800b660 <CDC_Control_FS+0x1c>)
 800b65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b660:	0800b6f1 	.word	0x0800b6f1
 800b664:	0800b6f1 	.word	0x0800b6f1
 800b668:	0800b6f1 	.word	0x0800b6f1
 800b66c:	0800b6f1 	.word	0x0800b6f1
 800b670:	0800b6f1 	.word	0x0800b6f1
 800b674:	0800b6f1 	.word	0x0800b6f1
 800b678:	0800b6f1 	.word	0x0800b6f1
 800b67c:	0800b6f1 	.word	0x0800b6f1
 800b680:	0800b6f1 	.word	0x0800b6f1
 800b684:	0800b6f1 	.word	0x0800b6f1
 800b688:	0800b6f1 	.word	0x0800b6f1
 800b68c:	0800b6f1 	.word	0x0800b6f1
 800b690:	0800b6f1 	.word	0x0800b6f1
 800b694:	0800b6f1 	.word	0x0800b6f1
 800b698:	0800b6f1 	.word	0x0800b6f1
 800b69c:	0800b6f1 	.word	0x0800b6f1
 800b6a0:	0800b6f1 	.word	0x0800b6f1
 800b6a4:	0800b6f1 	.word	0x0800b6f1
 800b6a8:	0800b6f1 	.word	0x0800b6f1
 800b6ac:	0800b6f1 	.word	0x0800b6f1
 800b6b0:	0800b6f1 	.word	0x0800b6f1
 800b6b4:	0800b6f1 	.word	0x0800b6f1
 800b6b8:	0800b6f1 	.word	0x0800b6f1
 800b6bc:	0800b6f1 	.word	0x0800b6f1
 800b6c0:	0800b6f1 	.word	0x0800b6f1
 800b6c4:	0800b6f1 	.word	0x0800b6f1
 800b6c8:	0800b6f1 	.word	0x0800b6f1
 800b6cc:	0800b6f1 	.word	0x0800b6f1
 800b6d0:	0800b6f1 	.word	0x0800b6f1
 800b6d4:	0800b6f1 	.word	0x0800b6f1
 800b6d8:	0800b6f1 	.word	0x0800b6f1
 800b6dc:	0800b6f1 	.word	0x0800b6f1
 800b6e0:	0800b6f1 	.word	0x0800b6f1
 800b6e4:	0800b6f1 	.word	0x0800b6f1
 800b6e8:	0800b6f1 	.word	0x0800b6f1
 800b6ec:	0800b6f1 	.word	0x0800b6f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b6f0:	bf00      	nop
  }

  return (USBD_OK);
 800b6f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bc80      	pop	{r7}
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop

0800b700 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b70a:	6879      	ldr	r1, [r7, #4]
 800b70c:	4805      	ldr	r0, [pc, #20]	; (800b724 <CDC_Receive_FS+0x24>)
 800b70e:	f7fc f914 	bl	800793a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b712:	4804      	ldr	r0, [pc, #16]	; (800b724 <CDC_Receive_FS+0x24>)
 800b714:	f7fc f924 	bl	8007960 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b718:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	2000240c 	.word	0x2000240c

0800b728 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	4603      	mov	r3, r0
 800b730:	6039      	str	r1, [r7, #0]
 800b732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	2212      	movs	r2, #18
 800b738:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b73a:	4b03      	ldr	r3, [pc, #12]	; (800b748 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	bc80      	pop	{r7}
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	20000160 	.word	0x20000160

0800b74c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	4603      	mov	r3, r0
 800b754:	6039      	str	r1, [r7, #0]
 800b756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	2204      	movs	r2, #4
 800b75c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b75e:	4b03      	ldr	r3, [pc, #12]	; (800b76c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b760:	4618      	mov	r0, r3
 800b762:	370c      	adds	r7, #12
 800b764:	46bd      	mov	sp, r7
 800b766:	bc80      	pop	{r7}
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	20000174 	.word	0x20000174

0800b770 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	4603      	mov	r3, r0
 800b778:	6039      	str	r1, [r7, #0]
 800b77a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b77c:	79fb      	ldrb	r3, [r7, #7]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d105      	bne.n	800b78e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	4907      	ldr	r1, [pc, #28]	; (800b7a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b786:	4808      	ldr	r0, [pc, #32]	; (800b7a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b788:	f7fd f8d0 	bl	800892c <USBD_GetString>
 800b78c:	e004      	b.n	800b798 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	4904      	ldr	r1, [pc, #16]	; (800b7a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b792:	4805      	ldr	r0, [pc, #20]	; (800b7a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b794:	f7fd f8ca 	bl	800892c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b798:	4b02      	ldr	r3, [pc, #8]	; (800b7a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3708      	adds	r7, #8
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	20002ea0 	.word	0x20002ea0
 800b7a8:	0800c108 	.word	0x0800c108

0800b7ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	6039      	str	r1, [r7, #0]
 800b7b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b7b8:	683a      	ldr	r2, [r7, #0]
 800b7ba:	4904      	ldr	r1, [pc, #16]	; (800b7cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b7bc:	4804      	ldr	r0, [pc, #16]	; (800b7d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b7be:	f7fd f8b5 	bl	800892c <USBD_GetString>
  return USBD_StrDesc;
 800b7c2:	4b02      	ldr	r3, [pc, #8]	; (800b7cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3708      	adds	r7, #8
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	20002ea0 	.word	0x20002ea0
 800b7d0:	0800c120 	.word	0x0800c120

0800b7d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	4603      	mov	r3, r0
 800b7dc:	6039      	str	r1, [r7, #0]
 800b7de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	221a      	movs	r2, #26
 800b7e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b7e6:	f000 f843 	bl	800b870 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b7ea:	4b02      	ldr	r3, [pc, #8]	; (800b7f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	20000178 	.word	0x20000178

0800b7f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	4603      	mov	r3, r0
 800b800:	6039      	str	r1, [r7, #0]
 800b802:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b804:	79fb      	ldrb	r3, [r7, #7]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d105      	bne.n	800b816 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	4907      	ldr	r1, [pc, #28]	; (800b82c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b80e:	4808      	ldr	r0, [pc, #32]	; (800b830 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b810:	f7fd f88c 	bl	800892c <USBD_GetString>
 800b814:	e004      	b.n	800b820 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	4904      	ldr	r1, [pc, #16]	; (800b82c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b81a:	4805      	ldr	r0, [pc, #20]	; (800b830 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b81c:	f7fd f886 	bl	800892c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b820:	4b02      	ldr	r3, [pc, #8]	; (800b82c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b822:	4618      	mov	r0, r3
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	20002ea0 	.word	0x20002ea0
 800b830:	0800c134 	.word	0x0800c134

0800b834 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	4603      	mov	r3, r0
 800b83c:	6039      	str	r1, [r7, #0]
 800b83e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b840:	79fb      	ldrb	r3, [r7, #7]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d105      	bne.n	800b852 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	4907      	ldr	r1, [pc, #28]	; (800b868 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b84a:	4808      	ldr	r0, [pc, #32]	; (800b86c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b84c:	f7fd f86e 	bl	800892c <USBD_GetString>
 800b850:	e004      	b.n	800b85c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b852:	683a      	ldr	r2, [r7, #0]
 800b854:	4904      	ldr	r1, [pc, #16]	; (800b868 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b856:	4805      	ldr	r0, [pc, #20]	; (800b86c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b858:	f7fd f868 	bl	800892c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b85c:	4b02      	ldr	r3, [pc, #8]	; (800b868 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	20002ea0 	.word	0x20002ea0
 800b86c:	0800c140 	.word	0x0800c140

0800b870 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b876:	4b0f      	ldr	r3, [pc, #60]	; (800b8b4 <Get_SerialNum+0x44>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b87c:	4b0e      	ldr	r3, [pc, #56]	; (800b8b8 <Get_SerialNum+0x48>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b882:	4b0e      	ldr	r3, [pc, #56]	; (800b8bc <Get_SerialNum+0x4c>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	4413      	add	r3, r2
 800b88e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d009      	beq.n	800b8aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b896:	2208      	movs	r2, #8
 800b898:	4909      	ldr	r1, [pc, #36]	; (800b8c0 <Get_SerialNum+0x50>)
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f000 f814 	bl	800b8c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b8a0:	2204      	movs	r2, #4
 800b8a2:	4908      	ldr	r1, [pc, #32]	; (800b8c4 <Get_SerialNum+0x54>)
 800b8a4:	68b8      	ldr	r0, [r7, #8]
 800b8a6:	f000 f80f 	bl	800b8c8 <IntToUnicode>
  }
}
 800b8aa:	bf00      	nop
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	1ffff7e8 	.word	0x1ffff7e8
 800b8b8:	1ffff7ec 	.word	0x1ffff7ec
 800b8bc:	1ffff7f0 	.word	0x1ffff7f0
 800b8c0:	2000017a 	.word	0x2000017a
 800b8c4:	2000018a 	.word	0x2000018a

0800b8c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b087      	sub	sp, #28
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	4613      	mov	r3, r2
 800b8d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b8da:	2300      	movs	r3, #0
 800b8dc:	75fb      	strb	r3, [r7, #23]
 800b8de:	e027      	b.n	800b930 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	0f1b      	lsrs	r3, r3, #28
 800b8e4:	2b09      	cmp	r3, #9
 800b8e6:	d80b      	bhi.n	800b900 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	0f1b      	lsrs	r3, r3, #28
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	7dfb      	ldrb	r3, [r7, #23]
 800b8f0:	005b      	lsls	r3, r3, #1
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	440b      	add	r3, r1
 800b8f8:	3230      	adds	r2, #48	; 0x30
 800b8fa:	b2d2      	uxtb	r2, r2
 800b8fc:	701a      	strb	r2, [r3, #0]
 800b8fe:	e00a      	b.n	800b916 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	0f1b      	lsrs	r3, r3, #28
 800b904:	b2da      	uxtb	r2, r3
 800b906:	7dfb      	ldrb	r3, [r7, #23]
 800b908:	005b      	lsls	r3, r3, #1
 800b90a:	4619      	mov	r1, r3
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	440b      	add	r3, r1
 800b910:	3237      	adds	r2, #55	; 0x37
 800b912:	b2d2      	uxtb	r2, r2
 800b914:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	011b      	lsls	r3, r3, #4
 800b91a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b91c:	7dfb      	ldrb	r3, [r7, #23]
 800b91e:	005b      	lsls	r3, r3, #1
 800b920:	3301      	adds	r3, #1
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	4413      	add	r3, r2
 800b926:	2200      	movs	r2, #0
 800b928:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b92a:	7dfb      	ldrb	r3, [r7, #23]
 800b92c:	3301      	adds	r3, #1
 800b92e:	75fb      	strb	r3, [r7, #23]
 800b930:	7dfa      	ldrb	r2, [r7, #23]
 800b932:	79fb      	ldrb	r3, [r7, #7]
 800b934:	429a      	cmp	r2, r3
 800b936:	d3d3      	bcc.n	800b8e0 <IntToUnicode+0x18>
  }
}
 800b938:	bf00      	nop
 800b93a:	bf00      	nop
 800b93c:	371c      	adds	r7, #28
 800b93e:	46bd      	mov	sp, r7
 800b940:	bc80      	pop	{r7}
 800b942:	4770      	bx	lr

0800b944 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a0d      	ldr	r2, [pc, #52]	; (800b988 <HAL_PCD_MspInit+0x44>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d113      	bne.n	800b97e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b956:	4b0d      	ldr	r3, [pc, #52]	; (800b98c <HAL_PCD_MspInit+0x48>)
 800b958:	69db      	ldr	r3, [r3, #28]
 800b95a:	4a0c      	ldr	r2, [pc, #48]	; (800b98c <HAL_PCD_MspInit+0x48>)
 800b95c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b960:	61d3      	str	r3, [r2, #28]
 800b962:	4b0a      	ldr	r3, [pc, #40]	; (800b98c <HAL_PCD_MspInit+0x48>)
 800b964:	69db      	ldr	r3, [r3, #28]
 800b966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b96a:	60fb      	str	r3, [r7, #12]
 800b96c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800b96e:	2200      	movs	r2, #0
 800b970:	2105      	movs	r1, #5
 800b972:	2014      	movs	r0, #20
 800b974:	f7f5 fbff 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b978:	2014      	movs	r0, #20
 800b97a:	f7f5 fc18 	bl	80011ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b97e:	bf00      	nop
 800b980:	3710      	adds	r7, #16
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	40005c00 	.word	0x40005c00
 800b98c:	40021000 	.word	0x40021000

0800b990 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	4610      	mov	r0, r2
 800b9a8:	f7fc f890 	bl	8007acc <USBD_LL_SetupStage>
}
 800b9ac:	bf00      	nop
 800b9ae:	3708      	adds	r7, #8
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b9c6:	78fa      	ldrb	r2, [r7, #3]
 800b9c8:	6879      	ldr	r1, [r7, #4]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	4413      	add	r3, r2
 800b9d0:	00db      	lsls	r3, r3, #3
 800b9d2:	440b      	add	r3, r1
 800b9d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	78fb      	ldrb	r3, [r7, #3]
 800b9dc:	4619      	mov	r1, r3
 800b9de:	f7fc f8c2 	bl	8007b66 <USBD_LL_DataOutStage>
}
 800b9e2:	bf00      	nop
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b082      	sub	sp, #8
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b9fc:	78fa      	ldrb	r2, [r7, #3]
 800b9fe:	6879      	ldr	r1, [r7, #4]
 800ba00:	4613      	mov	r3, r2
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	4413      	add	r3, r2
 800ba06:	00db      	lsls	r3, r3, #3
 800ba08:	440b      	add	r3, r1
 800ba0a:	333c      	adds	r3, #60	; 0x3c
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	78fb      	ldrb	r3, [r7, #3]
 800ba10:	4619      	mov	r1, r3
 800ba12:	f7fc f919 	bl	8007c48 <USBD_LL_DataInStage>
}
 800ba16:	bf00      	nop
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b082      	sub	sp, #8
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7fc fa29 	bl	8007e84 <USBD_LL_SOF>
}
 800ba32:	bf00      	nop
 800ba34:	3708      	adds	r7, #8
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b084      	sub	sp, #16
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba42:	2301      	movs	r3, #1
 800ba44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	2b02      	cmp	r3, #2
 800ba4c:	d001      	beq.n	800ba52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ba4e:	f7f4 fea9 	bl	80007a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ba58:	7bfa      	ldrb	r2, [r7, #15]
 800ba5a:	4611      	mov	r1, r2
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7fc f9d9 	bl	8007e14 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7fc f992 	bl	8007d92 <USBD_LL_Reset>
}
 800ba6e:	bf00      	nop
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
	...

0800ba78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fc f9d3 	bl	8007e32 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d005      	beq.n	800baa0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba94:	4b04      	ldr	r3, [pc, #16]	; (800baa8 <HAL_PCD_SuspendCallback+0x30>)
 800ba96:	691b      	ldr	r3, [r3, #16]
 800ba98:	4a03      	ldr	r2, [pc, #12]	; (800baa8 <HAL_PCD_SuspendCallback+0x30>)
 800ba9a:	f043 0306 	orr.w	r3, r3, #6
 800ba9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800baa0:	bf00      	nop
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	e000ed00 	.word	0xe000ed00

0800baac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800baba:	4618      	mov	r0, r3
 800babc:	f7fc f9cd 	bl	8007e5a <USBD_LL_Resume>
}
 800bac0:	bf00      	nop
 800bac2:	3708      	adds	r7, #8
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bad0:	4a28      	ldr	r2, [pc, #160]	; (800bb74 <USBD_LL_Init+0xac>)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	4a26      	ldr	r2, [pc, #152]	; (800bb74 <USBD_LL_Init+0xac>)
 800badc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bae0:	4b24      	ldr	r3, [pc, #144]	; (800bb74 <USBD_LL_Init+0xac>)
 800bae2:	4a25      	ldr	r2, [pc, #148]	; (800bb78 <USBD_LL_Init+0xb0>)
 800bae4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bae6:	4b23      	ldr	r3, [pc, #140]	; (800bb74 <USBD_LL_Init+0xac>)
 800bae8:	2208      	movs	r2, #8
 800baea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800baec:	4b21      	ldr	r3, [pc, #132]	; (800bb74 <USBD_LL_Init+0xac>)
 800baee:	2202      	movs	r2, #2
 800baf0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800baf2:	4b20      	ldr	r3, [pc, #128]	; (800bb74 <USBD_LL_Init+0xac>)
 800baf4:	2200      	movs	r2, #0
 800baf6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800baf8:	4b1e      	ldr	r3, [pc, #120]	; (800bb74 <USBD_LL_Init+0xac>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bafe:	4b1d      	ldr	r3, [pc, #116]	; (800bb74 <USBD_LL_Init+0xac>)
 800bb00:	2200      	movs	r2, #0
 800bb02:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bb04:	481b      	ldr	r0, [pc, #108]	; (800bb74 <USBD_LL_Init+0xac>)
 800bb06:	f7f5 fe41 	bl	800178c <HAL_PCD_Init>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d001      	beq.n	800bb14 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bb10:	f7f4 fe48 	bl	80007a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb1a:	2318      	movs	r3, #24
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	2100      	movs	r1, #0
 800bb20:	f7f7 fab7 	bl	8003092 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb2a:	2358      	movs	r3, #88	; 0x58
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	2180      	movs	r1, #128	; 0x80
 800bb30:	f7f7 faaf 	bl	8003092 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb3a:	23c0      	movs	r3, #192	; 0xc0
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	2181      	movs	r1, #129	; 0x81
 800bb40:	f7f7 faa7 	bl	8003092 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb4a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bb4e:	2200      	movs	r2, #0
 800bb50:	2101      	movs	r1, #1
 800bb52:	f7f7 fa9e 	bl	8003092 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb60:	2200      	movs	r2, #0
 800bb62:	2182      	movs	r1, #130	; 0x82
 800bb64:	f7f7 fa95 	bl	8003092 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3708      	adds	r7, #8
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	200030a0 	.word	0x200030a0
 800bb78:	40005c00 	.word	0x40005c00

0800bb7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb84:	2300      	movs	r3, #0
 800bb86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7f5 ff05 	bl	80019a2 <HAL_PCD_Start>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 f94e 	bl	800be40 <USBD_Get_USB_Status>
 800bba4:	4603      	mov	r3, r0
 800bba6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bba8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b084      	sub	sp, #16
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
 800bbba:	4608      	mov	r0, r1
 800bbbc:	4611      	mov	r1, r2
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	70fb      	strb	r3, [r7, #3]
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	70bb      	strb	r3, [r7, #2]
 800bbc8:	4613      	mov	r3, r2
 800bbca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bbda:	78bb      	ldrb	r3, [r7, #2]
 800bbdc:	883a      	ldrh	r2, [r7, #0]
 800bbde:	78f9      	ldrb	r1, [r7, #3]
 800bbe0:	f7f6 f87f 	bl	8001ce2 <HAL_PCD_EP_Open>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbe8:	7bfb      	ldrb	r3, [r7, #15]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 f928 	bl	800be40 <USBD_Get_USB_Status>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b084      	sub	sp, #16
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	460b      	mov	r3, r1
 800bc08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc18:	78fa      	ldrb	r2, [r7, #3]
 800bc1a:	4611      	mov	r1, r2
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7f6 f8c6 	bl	8001dae <HAL_PCD_EP_Close>
 800bc22:	4603      	mov	r3, r0
 800bc24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc26:	7bfb      	ldrb	r3, [r7, #15]
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f000 f909 	bl	800be40 <USBD_Get_USB_Status>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc32:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	460b      	mov	r3, r1
 800bc46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc56:	78fa      	ldrb	r2, [r7, #3]
 800bc58:	4611      	mov	r1, r2
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7f6 f986 	bl	8001f6c <HAL_PCD_EP_SetStall>
 800bc60:	4603      	mov	r3, r0
 800bc62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc64:	7bfb      	ldrb	r3, [r7, #15]
 800bc66:	4618      	mov	r0, r3
 800bc68:	f000 f8ea 	bl	800be40 <USBD_Get_USB_Status>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc70:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b084      	sub	sp, #16
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
 800bc82:	460b      	mov	r3, r1
 800bc84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc94:	78fa      	ldrb	r2, [r7, #3]
 800bc96:	4611      	mov	r1, r2
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7f6 f9c7 	bl	800202c <HAL_PCD_EP_ClrStall>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bca2:	7bfb      	ldrb	r3, [r7, #15]
 800bca4:	4618      	mov	r0, r3
 800bca6:	f000 f8cb 	bl	800be40 <USBD_Get_USB_Status>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcae:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3710      	adds	r7, #16
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	da0c      	bge.n	800bcee <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bcd4:	78fb      	ldrb	r3, [r7, #3]
 800bcd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcda:	68f9      	ldr	r1, [r7, #12]
 800bcdc:	1c5a      	adds	r2, r3, #1
 800bcde:	4613      	mov	r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	4413      	add	r3, r2
 800bce4:	00db      	lsls	r3, r3, #3
 800bce6:	440b      	add	r3, r1
 800bce8:	3302      	adds	r3, #2
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	e00b      	b.n	800bd06 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bcee:	78fb      	ldrb	r3, [r7, #3]
 800bcf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcf4:	68f9      	ldr	r1, [r7, #12]
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	4413      	add	r3, r2
 800bcfc:	00db      	lsls	r3, r3, #3
 800bcfe:	440b      	add	r3, r1
 800bd00:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bd04:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3714      	adds	r7, #20
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bc80      	pop	{r7}
 800bd0e:	4770      	bx	lr

0800bd10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	460b      	mov	r3, r1
 800bd1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd20:	2300      	movs	r3, #0
 800bd22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd2a:	78fa      	ldrb	r2, [r7, #3]
 800bd2c:	4611      	mov	r1, r2
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7f5 ffb2 	bl	8001c98 <HAL_PCD_SetAddress>
 800bd34:	4603      	mov	r3, r0
 800bd36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd38:	7bfb      	ldrb	r3, [r7, #15]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f000 f880 	bl	800be40 <USBD_Get_USB_Status>
 800bd40:	4603      	mov	r3, r0
 800bd42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd44:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}

0800bd4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bd4e:	b580      	push	{r7, lr}
 800bd50:	b086      	sub	sp, #24
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	60f8      	str	r0, [r7, #12]
 800bd56:	607a      	str	r2, [r7, #4]
 800bd58:	461a      	mov	r2, r3
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	72fb      	strb	r3, [r7, #11]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd62:	2300      	movs	r3, #0
 800bd64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd66:	2300      	movs	r3, #0
 800bd68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd70:	893b      	ldrh	r3, [r7, #8]
 800bd72:	7af9      	ldrb	r1, [r7, #11]
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	f7f6 f8b6 	bl	8001ee6 <HAL_PCD_EP_Transmit>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd7e:	7dfb      	ldrb	r3, [r7, #23]
 800bd80:	4618      	mov	r0, r3
 800bd82:	f000 f85d 	bl	800be40 <USBD_Get_USB_Status>
 800bd86:	4603      	mov	r3, r0
 800bd88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd8a:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3718      	adds	r7, #24
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b086      	sub	sp, #24
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	607a      	str	r2, [r7, #4]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	460b      	mov	r3, r1
 800bda2:	72fb      	strb	r3, [r7, #11]
 800bda4:	4613      	mov	r3, r2
 800bda6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdac:	2300      	movs	r3, #0
 800bdae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bdb6:	893b      	ldrh	r3, [r7, #8]
 800bdb8:	7af9      	ldrb	r1, [r7, #11]
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	f7f6 f83f 	bl	8001e3e <HAL_PCD_EP_Receive>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdc4:	7dfb      	ldrb	r3, [r7, #23]
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f000 f83a 	bl	800be40 <USBD_Get_USB_Status>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bdd0:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3718      	adds	r7, #24
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b082      	sub	sp, #8
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
 800bde2:	460b      	mov	r3, r1
 800bde4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdec:	78fa      	ldrb	r2, [r7, #3]
 800bdee:	4611      	mov	r1, r2
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7f6 f861 	bl	8001eb8 <HAL_PCD_EP_GetRxCount>
 800bdf6:	4603      	mov	r3, r0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3708      	adds	r7, #8
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800be08:	4b02      	ldr	r3, [pc, #8]	; (800be14 <USBD_static_malloc+0x14>)
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	370c      	adds	r7, #12
 800be0e:	46bd      	mov	sp, r7
 800be10:	bc80      	pop	{r7}
 800be12:	4770      	bx	lr
 800be14:	20001cf4 	.word	0x20001cf4

0800be18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]

}
 800be20:	bf00      	nop
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	bc80      	pop	{r7}
 800be28:	4770      	bx	lr

0800be2a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be2a:	b480      	push	{r7}
 800be2c:	b083      	sub	sp, #12
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	460b      	mov	r3, r1
 800be34:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800be36:	bf00      	nop
 800be38:	370c      	adds	r7, #12
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bc80      	pop	{r7}
 800be3e:	4770      	bx	lr

0800be40 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800be40:	b480      	push	{r7}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	4603      	mov	r3, r0
 800be48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be4a:	2300      	movs	r3, #0
 800be4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800be4e:	79fb      	ldrb	r3, [r7, #7]
 800be50:	2b03      	cmp	r3, #3
 800be52:	d817      	bhi.n	800be84 <USBD_Get_USB_Status+0x44>
 800be54:	a201      	add	r2, pc, #4	; (adr r2, 800be5c <USBD_Get_USB_Status+0x1c>)
 800be56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5a:	bf00      	nop
 800be5c:	0800be6d 	.word	0x0800be6d
 800be60:	0800be73 	.word	0x0800be73
 800be64:	0800be79 	.word	0x0800be79
 800be68:	0800be7f 	.word	0x0800be7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800be6c:	2300      	movs	r3, #0
 800be6e:	73fb      	strb	r3, [r7, #15]
    break;
 800be70:	e00b      	b.n	800be8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be72:	2302      	movs	r3, #2
 800be74:	73fb      	strb	r3, [r7, #15]
    break;
 800be76:	e008      	b.n	800be8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be78:	2301      	movs	r3, #1
 800be7a:	73fb      	strb	r3, [r7, #15]
    break;
 800be7c:	e005      	b.n	800be8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be7e:	2302      	movs	r3, #2
 800be80:	73fb      	strb	r3, [r7, #15]
    break;
 800be82:	e002      	b.n	800be8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800be84:	2302      	movs	r3, #2
 800be86:	73fb      	strb	r3, [r7, #15]
    break;
 800be88:	bf00      	nop
  }
  return usb_status;
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3714      	adds	r7, #20
 800be90:	46bd      	mov	sp, r7
 800be92:	bc80      	pop	{r7}
 800be94:	4770      	bx	lr
 800be96:	bf00      	nop

0800be98 <_ZdlPvj>:
 800be98:	f000 b800 	b.w	800be9c <_ZdlPv>

0800be9c <_ZdlPv>:
 800be9c:	f000 b826 	b.w	800beec <free>

0800bea0 <__libc_init_array>:
 800bea0:	b570      	push	{r4, r5, r6, lr}
 800bea2:	2600      	movs	r6, #0
 800bea4:	4d0c      	ldr	r5, [pc, #48]	; (800bed8 <__libc_init_array+0x38>)
 800bea6:	4c0d      	ldr	r4, [pc, #52]	; (800bedc <__libc_init_array+0x3c>)
 800bea8:	1b64      	subs	r4, r4, r5
 800beaa:	10a4      	asrs	r4, r4, #2
 800beac:	42a6      	cmp	r6, r4
 800beae:	d109      	bne.n	800bec4 <__libc_init_array+0x24>
 800beb0:	f000 f8fc 	bl	800c0ac <_init>
 800beb4:	2600      	movs	r6, #0
 800beb6:	4d0a      	ldr	r5, [pc, #40]	; (800bee0 <__libc_init_array+0x40>)
 800beb8:	4c0a      	ldr	r4, [pc, #40]	; (800bee4 <__libc_init_array+0x44>)
 800beba:	1b64      	subs	r4, r4, r5
 800bebc:	10a4      	asrs	r4, r4, #2
 800bebe:	42a6      	cmp	r6, r4
 800bec0:	d105      	bne.n	800bece <__libc_init_array+0x2e>
 800bec2:	bd70      	pop	{r4, r5, r6, pc}
 800bec4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bec8:	4798      	blx	r3
 800beca:	3601      	adds	r6, #1
 800becc:	e7ee      	b.n	800beac <__libc_init_array+0xc>
 800bece:	f855 3b04 	ldr.w	r3, [r5], #4
 800bed2:	4798      	blx	r3
 800bed4:	3601      	adds	r6, #1
 800bed6:	e7f2      	b.n	800bebe <__libc_init_array+0x1e>
 800bed8:	0800c21c 	.word	0x0800c21c
 800bedc:	0800c21c 	.word	0x0800c21c
 800bee0:	0800c21c 	.word	0x0800c21c
 800bee4:	0800c220 	.word	0x0800c220

0800bee8 <__retarget_lock_acquire_recursive>:
 800bee8:	4770      	bx	lr

0800beea <__retarget_lock_release_recursive>:
 800beea:	4770      	bx	lr

0800beec <free>:
 800beec:	4b02      	ldr	r3, [pc, #8]	; (800bef8 <free+0xc>)
 800beee:	4601      	mov	r1, r0
 800bef0:	6818      	ldr	r0, [r3, #0]
 800bef2:	f000 b819 	b.w	800bf28 <_free_r>
 800bef6:	bf00      	nop
 800bef8:	20000194 	.word	0x20000194

0800befc <memcpy>:
 800befc:	440a      	add	r2, r1
 800befe:	4291      	cmp	r1, r2
 800bf00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bf04:	d100      	bne.n	800bf08 <memcpy+0xc>
 800bf06:	4770      	bx	lr
 800bf08:	b510      	push	{r4, lr}
 800bf0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf0e:	4291      	cmp	r1, r2
 800bf10:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf14:	d1f9      	bne.n	800bf0a <memcpy+0xe>
 800bf16:	bd10      	pop	{r4, pc}

0800bf18 <memset>:
 800bf18:	4603      	mov	r3, r0
 800bf1a:	4402      	add	r2, r0
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d100      	bne.n	800bf22 <memset+0xa>
 800bf20:	4770      	bx	lr
 800bf22:	f803 1b01 	strb.w	r1, [r3], #1
 800bf26:	e7f9      	b.n	800bf1c <memset+0x4>

0800bf28 <_free_r>:
 800bf28:	b538      	push	{r3, r4, r5, lr}
 800bf2a:	4605      	mov	r5, r0
 800bf2c:	2900      	cmp	r1, #0
 800bf2e:	d043      	beq.n	800bfb8 <_free_r+0x90>
 800bf30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf34:	1f0c      	subs	r4, r1, #4
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	bfb8      	it	lt
 800bf3a:	18e4      	addlt	r4, r4, r3
 800bf3c:	f000 f8aa 	bl	800c094 <__malloc_lock>
 800bf40:	4a1e      	ldr	r2, [pc, #120]	; (800bfbc <_free_r+0x94>)
 800bf42:	6813      	ldr	r3, [r2, #0]
 800bf44:	4610      	mov	r0, r2
 800bf46:	b933      	cbnz	r3, 800bf56 <_free_r+0x2e>
 800bf48:	6063      	str	r3, [r4, #4]
 800bf4a:	6014      	str	r4, [r2, #0]
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf52:	f000 b8a5 	b.w	800c0a0 <__malloc_unlock>
 800bf56:	42a3      	cmp	r3, r4
 800bf58:	d90a      	bls.n	800bf70 <_free_r+0x48>
 800bf5a:	6821      	ldr	r1, [r4, #0]
 800bf5c:	1862      	adds	r2, r4, r1
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	bf01      	itttt	eq
 800bf62:	681a      	ldreq	r2, [r3, #0]
 800bf64:	685b      	ldreq	r3, [r3, #4]
 800bf66:	1852      	addeq	r2, r2, r1
 800bf68:	6022      	streq	r2, [r4, #0]
 800bf6a:	6063      	str	r3, [r4, #4]
 800bf6c:	6004      	str	r4, [r0, #0]
 800bf6e:	e7ed      	b.n	800bf4c <_free_r+0x24>
 800bf70:	461a      	mov	r2, r3
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	b10b      	cbz	r3, 800bf7a <_free_r+0x52>
 800bf76:	42a3      	cmp	r3, r4
 800bf78:	d9fa      	bls.n	800bf70 <_free_r+0x48>
 800bf7a:	6811      	ldr	r1, [r2, #0]
 800bf7c:	1850      	adds	r0, r2, r1
 800bf7e:	42a0      	cmp	r0, r4
 800bf80:	d10b      	bne.n	800bf9a <_free_r+0x72>
 800bf82:	6820      	ldr	r0, [r4, #0]
 800bf84:	4401      	add	r1, r0
 800bf86:	1850      	adds	r0, r2, r1
 800bf88:	4283      	cmp	r3, r0
 800bf8a:	6011      	str	r1, [r2, #0]
 800bf8c:	d1de      	bne.n	800bf4c <_free_r+0x24>
 800bf8e:	6818      	ldr	r0, [r3, #0]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	4401      	add	r1, r0
 800bf94:	6011      	str	r1, [r2, #0]
 800bf96:	6053      	str	r3, [r2, #4]
 800bf98:	e7d8      	b.n	800bf4c <_free_r+0x24>
 800bf9a:	d902      	bls.n	800bfa2 <_free_r+0x7a>
 800bf9c:	230c      	movs	r3, #12
 800bf9e:	602b      	str	r3, [r5, #0]
 800bfa0:	e7d4      	b.n	800bf4c <_free_r+0x24>
 800bfa2:	6820      	ldr	r0, [r4, #0]
 800bfa4:	1821      	adds	r1, r4, r0
 800bfa6:	428b      	cmp	r3, r1
 800bfa8:	bf01      	itttt	eq
 800bfaa:	6819      	ldreq	r1, [r3, #0]
 800bfac:	685b      	ldreq	r3, [r3, #4]
 800bfae:	1809      	addeq	r1, r1, r0
 800bfb0:	6021      	streq	r1, [r4, #0]
 800bfb2:	6063      	str	r3, [r4, #4]
 800bfb4:	6054      	str	r4, [r2, #4]
 800bfb6:	e7c9      	b.n	800bf4c <_free_r+0x24>
 800bfb8:	bd38      	pop	{r3, r4, r5, pc}
 800bfba:	bf00      	nop
 800bfbc:	20001f14 	.word	0x20001f14

0800bfc0 <cleanup_glue>:
 800bfc0:	b538      	push	{r3, r4, r5, lr}
 800bfc2:	460c      	mov	r4, r1
 800bfc4:	6809      	ldr	r1, [r1, #0]
 800bfc6:	4605      	mov	r5, r0
 800bfc8:	b109      	cbz	r1, 800bfce <cleanup_glue+0xe>
 800bfca:	f7ff fff9 	bl	800bfc0 <cleanup_glue>
 800bfce:	4621      	mov	r1, r4
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfd6:	f7ff bfa7 	b.w	800bf28 <_free_r>
	...

0800bfdc <_reclaim_reent>:
 800bfdc:	4b2c      	ldr	r3, [pc, #176]	; (800c090 <_reclaim_reent+0xb4>)
 800bfde:	b570      	push	{r4, r5, r6, lr}
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	4283      	cmp	r3, r0
 800bfe6:	d051      	beq.n	800c08c <_reclaim_reent+0xb0>
 800bfe8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bfea:	b143      	cbz	r3, 800bffe <_reclaim_reent+0x22>
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d14a      	bne.n	800c088 <_reclaim_reent+0xac>
 800bff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bff4:	6819      	ldr	r1, [r3, #0]
 800bff6:	b111      	cbz	r1, 800bffe <_reclaim_reent+0x22>
 800bff8:	4620      	mov	r0, r4
 800bffa:	f7ff ff95 	bl	800bf28 <_free_r>
 800bffe:	6961      	ldr	r1, [r4, #20]
 800c000:	b111      	cbz	r1, 800c008 <_reclaim_reent+0x2c>
 800c002:	4620      	mov	r0, r4
 800c004:	f7ff ff90 	bl	800bf28 <_free_r>
 800c008:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c00a:	b111      	cbz	r1, 800c012 <_reclaim_reent+0x36>
 800c00c:	4620      	mov	r0, r4
 800c00e:	f7ff ff8b 	bl	800bf28 <_free_r>
 800c012:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c014:	b111      	cbz	r1, 800c01c <_reclaim_reent+0x40>
 800c016:	4620      	mov	r0, r4
 800c018:	f7ff ff86 	bl	800bf28 <_free_r>
 800c01c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c01e:	b111      	cbz	r1, 800c026 <_reclaim_reent+0x4a>
 800c020:	4620      	mov	r0, r4
 800c022:	f7ff ff81 	bl	800bf28 <_free_r>
 800c026:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c028:	b111      	cbz	r1, 800c030 <_reclaim_reent+0x54>
 800c02a:	4620      	mov	r0, r4
 800c02c:	f7ff ff7c 	bl	800bf28 <_free_r>
 800c030:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c032:	b111      	cbz	r1, 800c03a <_reclaim_reent+0x5e>
 800c034:	4620      	mov	r0, r4
 800c036:	f7ff ff77 	bl	800bf28 <_free_r>
 800c03a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c03c:	b111      	cbz	r1, 800c044 <_reclaim_reent+0x68>
 800c03e:	4620      	mov	r0, r4
 800c040:	f7ff ff72 	bl	800bf28 <_free_r>
 800c044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c046:	b111      	cbz	r1, 800c04e <_reclaim_reent+0x72>
 800c048:	4620      	mov	r0, r4
 800c04a:	f7ff ff6d 	bl	800bf28 <_free_r>
 800c04e:	69a3      	ldr	r3, [r4, #24]
 800c050:	b1e3      	cbz	r3, 800c08c <_reclaim_reent+0xb0>
 800c052:	4620      	mov	r0, r4
 800c054:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c056:	4798      	blx	r3
 800c058:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c05a:	b1b9      	cbz	r1, 800c08c <_reclaim_reent+0xb0>
 800c05c:	4620      	mov	r0, r4
 800c05e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c062:	f7ff bfad 	b.w	800bfc0 <cleanup_glue>
 800c066:	5949      	ldr	r1, [r1, r5]
 800c068:	b941      	cbnz	r1, 800c07c <_reclaim_reent+0xa0>
 800c06a:	3504      	adds	r5, #4
 800c06c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c06e:	2d80      	cmp	r5, #128	; 0x80
 800c070:	68d9      	ldr	r1, [r3, #12]
 800c072:	d1f8      	bne.n	800c066 <_reclaim_reent+0x8a>
 800c074:	4620      	mov	r0, r4
 800c076:	f7ff ff57 	bl	800bf28 <_free_r>
 800c07a:	e7ba      	b.n	800bff2 <_reclaim_reent+0x16>
 800c07c:	680e      	ldr	r6, [r1, #0]
 800c07e:	4620      	mov	r0, r4
 800c080:	f7ff ff52 	bl	800bf28 <_free_r>
 800c084:	4631      	mov	r1, r6
 800c086:	e7ef      	b.n	800c068 <_reclaim_reent+0x8c>
 800c088:	2500      	movs	r5, #0
 800c08a:	e7ef      	b.n	800c06c <_reclaim_reent+0x90>
 800c08c:	bd70      	pop	{r4, r5, r6, pc}
 800c08e:	bf00      	nop
 800c090:	20000194 	.word	0x20000194

0800c094 <__malloc_lock>:
 800c094:	4801      	ldr	r0, [pc, #4]	; (800c09c <__malloc_lock+0x8>)
 800c096:	f7ff bf27 	b.w	800bee8 <__retarget_lock_acquire_recursive>
 800c09a:	bf00      	nop
 800c09c:	20003390 	.word	0x20003390

0800c0a0 <__malloc_unlock>:
 800c0a0:	4801      	ldr	r0, [pc, #4]	; (800c0a8 <__malloc_unlock+0x8>)
 800c0a2:	f7ff bf22 	b.w	800beea <__retarget_lock_release_recursive>
 800c0a6:	bf00      	nop
 800c0a8:	20003390 	.word	0x20003390

0800c0ac <_init>:
 800c0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ae:	bf00      	nop
 800c0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0b2:	bc08      	pop	{r3}
 800c0b4:	469e      	mov	lr, r3
 800c0b6:	4770      	bx	lr

0800c0b8 <_fini>:
 800c0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ba:	bf00      	nop
 800c0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0be:	bc08      	pop	{r3}
 800c0c0:	469e      	mov	lr, r3
 800c0c2:	4770      	bx	lr
